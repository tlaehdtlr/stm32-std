
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004950  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08004ae0  08004ae0  00014ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c00  08004c00  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004c00  08004c00  00014c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c08  08004c08  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c08  08004c08  00014c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c0c  08004c0c  00014c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000070  08004c80  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08004c80  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dff3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000216d  00000000  00000000  0002e093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  00030200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a40  00000000  00000000  00030d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b196  00000000  00000000  00031798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce22  00000000  00000000  0004c92e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3b6a  00000000  00000000  00059750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd2ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034d4  00000000  00000000  000fd310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ac8 	.word	0x08004ac8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004ac8 	.word	0x08004ac8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <MX_GPIO_Init+0x5c>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <MX_GPIO_Init+0x5c>)
 8000574:	f043 0304 	orr.w	r3, r3, #4
 8000578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <MX_GPIO_Init+0x5c>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	f003 0304 	and.w	r3, r3, #4
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <MX_GPIO_Init+0x5c>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <MX_GPIO_Init+0x5c>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <MX_GPIO_Init+0x5c>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <MX_GPIO_Init+0x5c>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a2:	4a08      	ldr	r2, [pc, #32]	; (80005c4 <MX_GPIO_Init+0x5c>)
 80005a4:	f043 0302 	orr.w	r3, r3, #2
 80005a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <MX_GPIO_Init+0x5c>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	f003 0302 	and.w	r3, r3, #2
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000

080005c8 <__io_putchar>:
#else
    #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80005d0:	1d39      	adds	r1, r7, #4
 80005d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005d6:	2201      	movs	r2, #1
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <__io_putchar+0x20>)
 80005da:	f002 fe4d 	bl	8003278 <HAL_UART_Transmit>
  return ch;
 80005de:	687b      	ldr	r3, [r7, #4]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000160 	.word	0x20000160

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fba5 	bl	8000d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f863 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f7ff ffb5 	bl	8000568 <MX_GPIO_Init>
  MX_SPI2_Init();
 80005fe:	f000 f909 	bl	8000814 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000602:	f000 facb 	bl	8000b9c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000606:	f000 f8cb 	bl	80007a0 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("new~ \r\n");
 800060a:	4825      	ldr	r0, [pc, #148]	; (80006a0 <main+0xb4>)
 800060c:	f003 fb16 	bl	8003c3c <puts>
      HAL_UART_Transmit(&huart2, &rx_buffer, 1, 100);
    }
#else


  uint8_t tx_buf[10] = {1,2,3,4,5,6,7,8,9,10};
 8000610:	4a24      	ldr	r2, [pc, #144]	; (80006a4 <main+0xb8>)
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	ca07      	ldmia	r2, {r0, r1, r2}
 8000618:	c303      	stmia	r3!, {r0, r1}
 800061a:	801a      	strh	r2, [r3, #0]
  uint8_t rx_buf[10] = {0,0,0,0,0,0,0,0,0,0};
 800061c:	4a22      	ldr	r2, [pc, #136]	; (80006a8 <main+0xbc>)
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	ca07      	ldmia	r2, {r0, r1, r2}
 8000622:	c303      	stmia	r3!, {r0, r1}
 8000624:	801a      	strh	r2, [r3, #0]
//  uint8_t rx_buf;

  while (1)
  {
    HAL_Delay(1000);
 8000626:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800062a:	f000 fbfd 	bl	8000e28 <HAL_Delay>

    for (int i=0; i<10;i++)
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
 8000632:	e02d      	b.n	8000690 <main+0xa4>
    {
      if (HAL_SPI_Receive(&hspi1, &rx_buf[i], 1, 100)==HAL_OK)
 8000634:	1d3a      	adds	r2, r7, #4
 8000636:	69fb      	ldr	r3, [r7, #28]
 8000638:	18d1      	adds	r1, r2, r3
 800063a:	2364      	movs	r3, #100	; 0x64
 800063c:	2201      	movs	r2, #1
 800063e:	481b      	ldr	r0, [pc, #108]	; (80006ac <main+0xc0>)
 8000640:	f002 f8d5 	bl	80027ee <HAL_SPI_Receive>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d107      	bne.n	800065a <main+0x6e>
      {
        printf("Receive : %d ", rx_buf[i]);
 800064a:	1d3a      	adds	r2, r7, #4
 800064c:	69fb      	ldr	r3, [r7, #28]
 800064e:	4413      	add	r3, r2
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	4619      	mov	r1, r3
 8000654:	4816      	ldr	r0, [pc, #88]	; (80006b0 <main+0xc4>)
 8000656:	f003 fa6b 	bl	8003b30 <iprintf>
      }
      if (HAL_SPI_Transmit(&hspi2, &tx_buf[i], 1, 100)==HAL_OK)
 800065a:	f107 0210 	add.w	r2, r7, #16
 800065e:	69fb      	ldr	r3, [r7, #28]
 8000660:	18d1      	adds	r1, r2, r3
 8000662:	2364      	movs	r3, #100	; 0x64
 8000664:	2201      	movs	r2, #1
 8000666:	4813      	ldr	r0, [pc, #76]	; (80006b4 <main+0xc8>)
 8000668:	f001 ff53 	bl	8002512 <HAL_SPI_Transmit>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d108      	bne.n	8000684 <main+0x98>
      {
        printf("Trans : %d ", tx_buf[i]);
 8000672:	f107 0210 	add.w	r2, r7, #16
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	4413      	add	r3, r2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4619      	mov	r1, r3
 800067e:	480e      	ldr	r0, [pc, #56]	; (80006b8 <main+0xcc>)
 8000680:	f003 fa56 	bl	8003b30 <iprintf>
      }
      printf("\r\n");
 8000684:	480d      	ldr	r0, [pc, #52]	; (80006bc <main+0xd0>)
 8000686:	f003 fad9 	bl	8003c3c <puts>
    for (int i=0; i<10;i++)
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	3301      	adds	r3, #1
 800068e:	61fb      	str	r3, [r7, #28]
 8000690:	69fb      	ldr	r3, [r7, #28]
 8000692:	2b09      	cmp	r3, #9
 8000694:	ddce      	ble.n	8000634 <main+0x48>
//    for (int i=0; i<10;i++)
//    {
////      HAL_UART_Transmit(&huart2, &rx_buf[i], 1, 100);
//      printf("%d ", &rx_buf[i]);
//    }
    printf("\r\n");
 8000696:	4809      	ldr	r0, [pc, #36]	; (80006bc <main+0xd0>)
 8000698:	f003 fad0 	bl	8003c3c <puts>
    HAL_Delay(1000);
 800069c:	e7c3      	b.n	8000626 <main+0x3a>
 800069e:	bf00      	nop
 80006a0:	08004ae0 	.word	0x08004ae0
 80006a4:	08004b08 	.word	0x08004b08
 80006a8:	08004b14 	.word	0x08004b14
 80006ac:	200000fc 	.word	0x200000fc
 80006b0:	08004ae8 	.word	0x08004ae8
 80006b4:	20000098 	.word	0x20000098
 80006b8:	08004af8 	.word	0x08004af8
 80006bc:	08004b04 	.word	0x08004b04

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b0a4      	sub	sp, #144	; 0x90
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006ca:	2244      	movs	r2, #68	; 0x44
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 fa26 	bl	8003b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2234      	movs	r2, #52	; 0x34
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f003 fa18 	bl	8003b20 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006f0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006f4:	f000 fe22 	bl	800133c <HAL_PWREx_ControlVoltageScaling>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x42>
  {
    Error_Handler();
 80006fe:	f000 f84a 	bl	8000796 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000702:	2310      	movs	r3, #16
 8000704:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000706:	2301      	movs	r3, #1
 8000708:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800070e:	2360      	movs	r3, #96	; 0x60
 8000710:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000716:	2301      	movs	r3, #1
 8000718:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800071a:	2301      	movs	r3, #1
 800071c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000720:	2314      	movs	r3, #20
 8000722:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000726:	2302      	movs	r3, #2
 8000728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000732:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000736:	4618      	mov	r0, r3
 8000738:	f000 fe56 	bl	80013e8 <HAL_RCC_OscConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000742:	f000 f828 	bl	8000796 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000746:	230f      	movs	r3, #15
 8000748:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074a:	2303      	movs	r3, #3
 800074c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000756:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800075c:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800075e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000762:	2102      	movs	r1, #2
 8000764:	4618      	mov	r0, r3
 8000766:	f001 faa5 	bl	8001cb4 <HAL_RCC_ClockConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000770:	f000 f811 	bl	8000796 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000774:	2302      	movs	r3, #2
 8000776:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	4618      	mov	r0, r3
 8000780:	f001 fc9e 	bl	80020c0 <HAL_RCCEx_PeriphCLKConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800078a:	f000 f804 	bl	8000796 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3790      	adds	r7, #144	; 0x90
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079a:	b672      	cpsid	i
}
 800079c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079e:	e7fe      	b.n	800079e <Error_Handler+0x8>

080007a0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_SPI1_Init+0x6c>)
 80007a6:	4a1a      	ldr	r2, [pc, #104]	; (8000810 <MX_SPI1_Init+0x70>)
 80007a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_SPI1_Init+0x6c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007b0:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_SPI1_Init+0x6c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_SPI1_Init+0x6c>)
 80007b8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_SPI1_Init+0x6c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_SPI1_Init+0x6c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_SPI1_Init+0x6c>)
 80007cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_SPI1_Init+0x6c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_SPI1_Init+0x6c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_SPI1_Init+0x6c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_SPI1_Init+0x6c>)
 80007e6:	2207      	movs	r2, #7
 80007e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_SPI1_Init+0x6c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_SPI1_Init+0x6c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_SPI1_Init+0x6c>)
 80007f8:	f001 fde8 	bl	80023cc <HAL_SPI_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000802:	f7ff ffc8 	bl	8000796 <Error_Handler>
  }

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200000fc 	.word	0x200000fc
 8000810:	40013000 	.word	0x40013000

08000814 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_SPI2_Init+0x74>)
 800081a:	4a1c      	ldr	r2, [pc, #112]	; (800088c <MX_SPI2_Init+0x78>)
 800081c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_SPI2_Init+0x74>)
 8000820:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000824:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_SPI2_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_SPI2_Init+0x74>)
 800082e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000832:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_SPI2_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_SPI2_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_SPI2_Init+0x74>)
 8000842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000846:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_SPI2_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_SPI2_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_SPI2_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_SPI2_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_SPI2_Init+0x74>)
 8000862:	2207      	movs	r2, #7
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_SPI2_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_SPI2_Init+0x74>)
 800086e:	2208      	movs	r2, #8
 8000870:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_SPI2_Init+0x74>)
 8000874:	f001 fdaa 	bl	80023cc <HAL_SPI_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800087e:	f7ff ff8a 	bl	8000796 <Error_Handler>
  }

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000098 	.word	0x20000098
 800088c:	40003800 	.word	0x40003800

08000890 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	; 0x30
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a3d      	ldr	r2, [pc, #244]	; (80009a4 <HAL_SPI_MspInit+0x114>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d129      	bne.n	8000906 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008b2:	4b3d      	ldr	r3, [pc, #244]	; (80009a8 <HAL_SPI_MspInit+0x118>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b6:	4a3c      	ldr	r2, [pc, #240]	; (80009a8 <HAL_SPI_MspInit+0x118>)
 80008b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008bc:	6613      	str	r3, [r2, #96]	; 0x60
 80008be:	4b3a      	ldr	r3, [pc, #232]	; (80009a8 <HAL_SPI_MspInit+0x118>)
 80008c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008c6:	61bb      	str	r3, [r7, #24]
 80008c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b37      	ldr	r3, [pc, #220]	; (80009a8 <HAL_SPI_MspInit+0x118>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a36      	ldr	r2, [pc, #216]	; (80009a8 <HAL_SPI_MspInit+0x118>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b34      	ldr	r3, [pc, #208]	; (80009a8 <HAL_SPI_MspInit+0x118>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80008e2:	23c2      	movs	r3, #194	; 0xc2
 80008e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008f2:	2305      	movs	r3, #5
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000900:	f000 fb9c 	bl	800103c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000904:	e049      	b.n	800099a <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI2)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a28      	ldr	r2, [pc, #160]	; (80009ac <HAL_SPI_MspInit+0x11c>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d144      	bne.n	800099a <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000910:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <HAL_SPI_MspInit+0x118>)
 8000912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000914:	4a24      	ldr	r2, [pc, #144]	; (80009a8 <HAL_SPI_MspInit+0x118>)
 8000916:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091a:	6593      	str	r3, [r2, #88]	; 0x58
 800091c:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <HAL_SPI_MspInit+0x118>)
 800091e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000928:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <HAL_SPI_MspInit+0x118>)
 800092a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092c:	4a1e      	ldr	r2, [pc, #120]	; (80009a8 <HAL_SPI_MspInit+0x118>)
 800092e:	f043 0304 	orr.w	r3, r3, #4
 8000932:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000934:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <HAL_SPI_MspInit+0x118>)
 8000936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000938:	f003 0304 	and.w	r3, r3, #4
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000940:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <HAL_SPI_MspInit+0x118>)
 8000942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000944:	4a18      	ldr	r2, [pc, #96]	; (80009a8 <HAL_SPI_MspInit+0x118>)
 8000946:	f043 0302 	orr.w	r3, r3, #2
 800094a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <HAL_SPI_MspInit+0x118>)
 800094e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000950:	f003 0302 	and.w	r3, r3, #2
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000958:	230c      	movs	r3, #12
 800095a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000968:	2305      	movs	r3, #5
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	480f      	ldr	r0, [pc, #60]	; (80009b0 <HAL_SPI_MspInit+0x120>)
 8000974:	f000 fb62 	bl	800103c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800097c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800098a:	2305      	movs	r3, #5
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4807      	ldr	r0, [pc, #28]	; (80009b4 <HAL_SPI_MspInit+0x124>)
 8000996:	f000 fb51 	bl	800103c <HAL_GPIO_Init>
}
 800099a:	bf00      	nop
 800099c:	3730      	adds	r7, #48	; 0x30
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40013000 	.word	0x40013000
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40003800 	.word	0x40003800
 80009b0:	48000800 	.word	0x48000800
 80009b4:	48000400 	.word	0x48000400

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_MspInit+0x44>)
 80009c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c2:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <HAL_MspInit+0x44>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6613      	str	r3, [r2, #96]	; 0x60
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <HAL_MspInit+0x44>)
 80009cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_MspInit+0x44>)
 80009d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009da:	4a08      	ldr	r2, [pc, #32]	; (80009fc <HAL_MspInit+0x44>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e0:	6593      	str	r3, [r2, #88]	; 0x58
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_MspInit+0x44>)
 80009e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <NMI_Handler+0x4>

08000a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <MemManage_Handler+0x4>

08000a12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4c:	f000 f9cc 	bl	8000de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	e00a      	b.n	8000a7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a66:	f3af 8000 	nop.w
 8000a6a:	4601      	mov	r1, r0
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	1c5a      	adds	r2, r3, #1
 8000a70:	60ba      	str	r2, [r7, #8]
 8000a72:	b2ca      	uxtb	r2, r1
 8000a74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	697a      	ldr	r2, [r7, #20]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	dbf0      	blt.n	8000a66 <_read+0x12>
	}

return len;
 8000a84:	687b      	ldr	r3, [r7, #4]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	60f8      	str	r0, [r7, #12]
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	e009      	b.n	8000ab4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	60ba      	str	r2, [r7, #8]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fd8d 	bl	80005c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	dbf1      	blt.n	8000aa0 <_write+0x12>
	}
	return len;
 8000abc:	687b      	ldr	r3, [r7, #4]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <_close>:

int _close(int file)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
	return -1;
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
 8000ae6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aee:	605a      	str	r2, [r3, #4]
	return 0;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <_isatty>:

int _isatty(int file)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
	return 1;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
	return 0;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b38:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <_sbrk+0x5c>)
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <_sbrk+0x60>)
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d102      	bne.n	8000b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <_sbrk+0x64>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <_sbrk+0x68>)
 8000b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d207      	bcs.n	8000b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b60:	f002 ffb4 	bl	8003acc <__errno>
 8000b64:	4603      	mov	r3, r0
 8000b66:	220c      	movs	r2, #12
 8000b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	e009      	b.n	8000b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b76:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <_sbrk+0x64>)
 8000b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b82:	68fb      	ldr	r3, [r7, #12]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	2000a000 	.word	0x2000a000
 8000b90:	00000400 	.word	0x00000400
 8000b94:	2000008c 	.word	0x2000008c
 8000b98:	200001f8 	.word	0x200001f8

08000b9c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000ba2:	4a15      	ldr	r2, [pc, #84]	; (8000bf8 <MX_USART2_UART_Init+0x5c>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_USART2_UART_Init+0x58>)
 8000be0:	f002 fafc 	bl	80031dc <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bea:	f7ff fdd4 	bl	8000796 <Error_Handler>
  }

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000160 	.word	0x20000160
 8000bf8:	40004400 	.word	0x40004400

08000bfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <HAL_UART_MspInit+0x7c>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d128      	bne.n	8000c70 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c1e:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <HAL_UART_MspInit+0x80>)
 8000c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c22:	4a16      	ldr	r2, [pc, #88]	; (8000c7c <HAL_UART_MspInit+0x80>)
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c28:	6593      	str	r3, [r2, #88]	; 0x58
 8000c2a:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <HAL_UART_MspInit+0x80>)
 8000c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <HAL_UART_MspInit+0x80>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <HAL_UART_MspInit+0x80>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <HAL_UART_MspInit+0x80>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c4e:	230c      	movs	r3, #12
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c5e:	2307      	movs	r3, #7
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6c:	f000 f9e6 	bl	800103c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	; 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40004400 	.word	0x40004400
 8000c7c:	40021000 	.word	0x40021000

08000c80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c84:	f000 f826 	bl	8000cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c88:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c8a:	e003      	b.n	8000c94 <LoopCopyDataInit>

08000c8c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c8e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c90:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c92:	3104      	adds	r1, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c94:	480a      	ldr	r0, [pc, #40]	; (8000cc0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c98:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c9a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c9c:	d3f6      	bcc.n	8000c8c <CopyDataInit>
	ldr	r2, =_sbss
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ca0:	e002      	b.n	8000ca8 <LoopFillZerobss>

08000ca2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ca2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ca4:	f842 3b04 	str.w	r3, [r2], #4

08000ca8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <LoopForever+0x16>)
	cmp	r2, r3
 8000caa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000cac:	d3f9      	bcc.n	8000ca2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cae:	f002 ff13 	bl	8003ad8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cb2:	f7ff fc9b 	bl	80005ec <main>

08000cb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cb6:	e7fe      	b.n	8000cb6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000cbc:	08004c10 	.word	0x08004c10
	ldr	r0, =_sdata
 8000cc0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000cc4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000cc8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000ccc:	200001f4 	.word	0x200001f4

08000cd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC1_2_IRQHandler>
	...

08000cd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <SystemInit+0x64>)
 8000cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cde:	4a16      	ldr	r2, [pc, #88]	; (8000d38 <SystemInit+0x64>)
 8000ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <SystemInit+0x68>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a13      	ldr	r2, [pc, #76]	; (8000d3c <SystemInit+0x68>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <SystemInit+0x68>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <SystemInit+0x68>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a0f      	ldr	r2, [pc, #60]	; (8000d3c <SystemInit+0x68>)
 8000d00:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d04:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <SystemInit+0x68>)
 8000d0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d10:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <SystemInit+0x68>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a09      	ldr	r2, [pc, #36]	; (8000d3c <SystemInit+0x68>)
 8000d18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <SystemInit+0x68>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <SystemInit+0x64>)
 8000d26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d2a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00
 8000d3c:	40021000 	.word	0x40021000

08000d40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4a:	2003      	movs	r0, #3
 8000d4c:	f000 f942 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d50:	2000      	movs	r0, #0
 8000d52:	f000 f80d 	bl	8000d70 <HAL_InitTick>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d002      	beq.n	8000d62 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	71fb      	strb	r3, [r7, #7]
 8000d60:	e001      	b.n	8000d66 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d62:	f7ff fe29 	bl	80009b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d66:	79fb      	ldrb	r3, [r7, #7]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <HAL_InitTick+0x6c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d023      	beq.n	8000dcc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_InitTick+0x70>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <HAL_InitTick+0x6c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f941 	bl	8001022 <HAL_SYSTICK_Config>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d10f      	bne.n	8000dc6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b0f      	cmp	r3, #15
 8000daa:	d809      	bhi.n	8000dc0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dac:	2200      	movs	r2, #0
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	f000 f919 	bl	8000fea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000db8:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <HAL_InitTick+0x74>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6013      	str	r3, [r2, #0]
 8000dbe:	e007      	b.n	8000dd0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	73fb      	strb	r3, [r7, #15]
 8000dc4:	e004      	b.n	8000dd0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	73fb      	strb	r3, [r7, #15]
 8000dca:	e001      	b.n	8000dd0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000004 	.word	0x20000004

08000de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_IncTick+0x20>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_IncTick+0x24>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <HAL_IncTick+0x24>)
 8000dfa:	6013      	str	r3, [r2, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	200001e0 	.word	0x200001e0

08000e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <HAL_GetTick+0x14>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	200001e0 	.word	0x200001e0

08000e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e30:	f7ff ffee 	bl	8000e10 <HAL_GetTick>
 8000e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e40:	d005      	beq.n	8000e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_Delay+0x44>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e4e:	bf00      	nop
 8000e50:	f7ff ffde 	bl	8000e10 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d8f7      	bhi.n	8000e50 <HAL_Delay+0x28>
  {
  }
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008

08000e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	f003 0307 	and.w	r3, r3, #7
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	; (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa0:	d301      	bcc.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00f      	b.n	8000fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <SysTick_Config+0x40>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	210f      	movs	r1, #15
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f7ff ff8e 	bl	8000ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <SysTick_Config+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <SysTick_Config+0x40>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff47 	bl	8000e70 <__NVIC_SetPriorityGrouping>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffc:	f7ff ff5c 	bl	8000eb8 <__NVIC_GetPriorityGrouping>
 8001000:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f7ff ff8e 	bl	8000f28 <NVIC_EncodePriority>
 800100c:	4602      	mov	r2, r0
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5d 	bl	8000ed4 <__NVIC_SetPriority>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ffb0 	bl	8000f90 <SysTick_Config>
 8001030:	4603      	mov	r3, r0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b087      	sub	sp, #28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104a:	e14e      	b.n	80012ea <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	2101      	movs	r1, #1
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	fa01 f303 	lsl.w	r3, r1, r3
 8001058:	4013      	ands	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 8140 	beq.w	80012e4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d00b      	beq.n	8001084 <HAL_GPIO_Init+0x48>
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d007      	beq.n	8001084 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001078:	2b11      	cmp	r3, #17
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2b12      	cmp	r3, #18
 8001082:	d130      	bne.n	80010e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ba:	2201      	movs	r2, #1
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	091b      	lsrs	r3, r3, #4
 80010d0:	f003 0201 	and.w	r2, r3, #1
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0xea>
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b12      	cmp	r3, #18
 8001124:	d123      	bne.n	800116e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	08da      	lsrs	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3208      	adds	r2, #8
 800112e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001132:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	220f      	movs	r2, #15
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	691a      	ldr	r2, [r3, #16]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	08da      	lsrs	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3208      	adds	r2, #8
 8001168:	6939      	ldr	r1, [r7, #16]
 800116a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0203 	and.w	r2, r3, #3
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 809a 	beq.w	80012e4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b0:	4b55      	ldr	r3, [pc, #340]	; (8001308 <HAL_GPIO_Init+0x2cc>)
 80011b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b4:	4a54      	ldr	r2, [pc, #336]	; (8001308 <HAL_GPIO_Init+0x2cc>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	6613      	str	r3, [r2, #96]	; 0x60
 80011bc:	4b52      	ldr	r3, [pc, #328]	; (8001308 <HAL_GPIO_Init+0x2cc>)
 80011be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011c8:	4a50      	ldr	r2, [pc, #320]	; (800130c <HAL_GPIO_Init+0x2d0>)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3302      	adds	r3, #2
 80011d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	220f      	movs	r2, #15
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011f2:	d013      	beq.n	800121c <HAL_GPIO_Init+0x1e0>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a46      	ldr	r2, [pc, #280]	; (8001310 <HAL_GPIO_Init+0x2d4>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d00d      	beq.n	8001218 <HAL_GPIO_Init+0x1dc>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a45      	ldr	r2, [pc, #276]	; (8001314 <HAL_GPIO_Init+0x2d8>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d007      	beq.n	8001214 <HAL_GPIO_Init+0x1d8>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a44      	ldr	r2, [pc, #272]	; (8001318 <HAL_GPIO_Init+0x2dc>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d101      	bne.n	8001210 <HAL_GPIO_Init+0x1d4>
 800120c:	2303      	movs	r3, #3
 800120e:	e006      	b.n	800121e <HAL_GPIO_Init+0x1e2>
 8001210:	2307      	movs	r3, #7
 8001212:	e004      	b.n	800121e <HAL_GPIO_Init+0x1e2>
 8001214:	2302      	movs	r3, #2
 8001216:	e002      	b.n	800121e <HAL_GPIO_Init+0x1e2>
 8001218:	2301      	movs	r3, #1
 800121a:	e000      	b.n	800121e <HAL_GPIO_Init+0x1e2>
 800121c:	2300      	movs	r3, #0
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	f002 0203 	and.w	r2, r2, #3
 8001224:	0092      	lsls	r2, r2, #2
 8001226:	4093      	lsls	r3, r2
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800122e:	4937      	ldr	r1, [pc, #220]	; (800130c <HAL_GPIO_Init+0x2d0>)
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	089b      	lsrs	r3, r3, #2
 8001234:	3302      	adds	r3, #2
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800123c:	4b37      	ldr	r3, [pc, #220]	; (800131c <HAL_GPIO_Init+0x2e0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	43db      	mvns	r3, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001260:	4a2e      	ldr	r2, [pc, #184]	; (800131c <HAL_GPIO_Init+0x2e0>)
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001266:	4b2d      	ldr	r3, [pc, #180]	; (800131c <HAL_GPIO_Init+0x2e0>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	43db      	mvns	r3, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4313      	orrs	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800128a:	4a24      	ldr	r2, [pc, #144]	; (800131c <HAL_GPIO_Init+0x2e0>)
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001290:	4b22      	ldr	r3, [pc, #136]	; (800131c <HAL_GPIO_Init+0x2e0>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	43db      	mvns	r3, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012b4:	4a19      	ldr	r2, [pc, #100]	; (800131c <HAL_GPIO_Init+0x2e0>)
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012ba:	4b18      	ldr	r3, [pc, #96]	; (800131c <HAL_GPIO_Init+0x2e0>)
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4313      	orrs	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012de:	4a0f      	ldr	r2, [pc, #60]	; (800131c <HAL_GPIO_Init+0x2e0>)
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	3301      	adds	r3, #1
 80012e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	fa22 f303 	lsr.w	r3, r2, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f47f aea9 	bne.w	800104c <HAL_GPIO_Init+0x10>
  }
}
 80012fa:	bf00      	nop
 80012fc:	bf00      	nop
 80012fe:	371c      	adds	r7, #28
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	40021000 	.word	0x40021000
 800130c:	40010000 	.word	0x40010000
 8001310:	48000400 	.word	0x48000400
 8001314:	48000800 	.word	0x48000800
 8001318:	48000c00 	.word	0x48000c00
 800131c:	40010400 	.word	0x40010400

08001320 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <HAL_PWREx_GetVoltageRange+0x18>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40007000 	.word	0x40007000

0800133c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800134a:	d130      	bne.n	80013ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800134c:	4b23      	ldr	r3, [pc, #140]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001358:	d038      	beq.n	80013cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800135a:	4b20      	ldr	r3, [pc, #128]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001362:	4a1e      	ldr	r2, [pc, #120]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001364:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001368:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2232      	movs	r2, #50	; 0x32
 8001370:	fb02 f303 	mul.w	r3, r2, r3
 8001374:	4a1b      	ldr	r2, [pc, #108]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001376:	fba2 2303 	umull	r2, r3, r2, r3
 800137a:	0c9b      	lsrs	r3, r3, #18
 800137c:	3301      	adds	r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001380:	e002      	b.n	8001388 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	3b01      	subs	r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001394:	d102      	bne.n	800139c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f2      	bne.n	8001382 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013a8:	d110      	bne.n	80013cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e00f      	b.n	80013ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ba:	d007      	beq.n	80013cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013c4:	4a05      	ldr	r2, [pc, #20]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40007000 	.word	0x40007000
 80013e0:	20000000 	.word	0x20000000
 80013e4:	431bde83 	.word	0x431bde83

080013e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d102      	bne.n	80013fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	f000 bc56 	b.w	8001ca8 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013fc:	4ba1      	ldr	r3, [pc, #644]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 030c 	and.w	r3, r3, #12
 8001404:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001406:	4b9f      	ldr	r3, [pc, #636]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0310 	and.w	r3, r3, #16
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 80e6 	beq.w	80015ea <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d007      	beq.n	8001434 <HAL_RCC_OscConfig+0x4c>
 8001424:	6a3b      	ldr	r3, [r7, #32]
 8001426:	2b0c      	cmp	r3, #12
 8001428:	f040 808d 	bne.w	8001546 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	2b01      	cmp	r3, #1
 8001430:	f040 8089 	bne.w	8001546 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001434:	4b93      	ldr	r3, [pc, #588]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d006      	beq.n	800144e <HAL_RCC_OscConfig+0x66>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d102      	bne.n	800144e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	f000 bc2d 	b.w	8001ca8 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001452:	4b8c      	ldr	r3, [pc, #560]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b00      	cmp	r3, #0
 800145c:	d004      	beq.n	8001468 <HAL_RCC_OscConfig+0x80>
 800145e:	4b89      	ldr	r3, [pc, #548]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001466:	e005      	b.n	8001474 <HAL_RCC_OscConfig+0x8c>
 8001468:	4b86      	ldr	r3, [pc, #536]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 800146a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001474:	4293      	cmp	r3, r2
 8001476:	d224      	bcs.n	80014c2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	4618      	mov	r0, r3
 800147e:	f000 fdbf 	bl	8002000 <RCC_SetFlashLatencyFromMSIRange>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d002      	beq.n	800148e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	f000 bc0d 	b.w	8001ca8 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800148e:	4b7d      	ldr	r3, [pc, #500]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a7c      	ldr	r2, [pc, #496]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	4b7a      	ldr	r3, [pc, #488]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	4977      	ldr	r1, [pc, #476]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ac:	4b75      	ldr	r3, [pc, #468]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	4972      	ldr	r1, [pc, #456]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	604b      	str	r3, [r1, #4]
 80014c0:	e025      	b.n	800150e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c2:	4b70      	ldr	r3, [pc, #448]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a6f      	ldr	r2, [pc, #444]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 80014c8:	f043 0308 	orr.w	r3, r3, #8
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b6d      	ldr	r3, [pc, #436]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	496a      	ldr	r1, [pc, #424]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014e0:	4b68      	ldr	r3, [pc, #416]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	4965      	ldr	r1, [pc, #404]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d109      	bne.n	800150e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fd7e 	bl	8002000 <RCC_SetFlashLatencyFromMSIRange>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e3cc      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800150e:	f000 fcb3 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 8001512:	4602      	mov	r2, r0
 8001514:	4b5b      	ldr	r3, [pc, #364]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	495a      	ldr	r1, [pc, #360]	; (8001688 <HAL_RCC_OscConfig+0x2a0>)
 8001520:	5ccb      	ldrb	r3, [r1, r3]
 8001522:	f003 031f 	and.w	r3, r3, #31
 8001526:	fa22 f303 	lsr.w	r3, r2, r3
 800152a:	4a58      	ldr	r2, [pc, #352]	; (800168c <HAL_RCC_OscConfig+0x2a4>)
 800152c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800152e:	4b58      	ldr	r3, [pc, #352]	; (8001690 <HAL_RCC_OscConfig+0x2a8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fc1c 	bl	8000d70 <HAL_InitTick>
 8001538:	4603      	mov	r3, r0
 800153a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800153c:	7dfb      	ldrb	r3, [r7, #23]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d052      	beq.n	80015e8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001542:	7dfb      	ldrb	r3, [r7, #23]
 8001544:	e3b0      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d032      	beq.n	80015b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800154e:	4b4d      	ldr	r3, [pc, #308]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a4c      	ldr	r2, [pc, #304]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800155a:	f7ff fc59 	bl	8000e10 <HAL_GetTick>
 800155e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001562:	f7ff fc55 	bl	8000e10 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e399      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001574:	4b43      	ldr	r3, [pc, #268]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001580:	4b40      	ldr	r3, [pc, #256]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a3f      	ldr	r2, [pc, #252]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 8001586:	f043 0308 	orr.w	r3, r3, #8
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	4b3d      	ldr	r3, [pc, #244]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001598:	493a      	ldr	r1, [pc, #232]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 800159a:	4313      	orrs	r3, r2
 800159c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800159e:	4b39      	ldr	r3, [pc, #228]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	4935      	ldr	r1, [pc, #212]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	604b      	str	r3, [r1, #4]
 80015b2:	e01a      	b.n	80015ea <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015b4:	4b33      	ldr	r3, [pc, #204]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a32      	ldr	r2, [pc, #200]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fc26 	bl	8000e10 <HAL_GetTick>
 80015c4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015c8:	f7ff fc22 	bl	8000e10 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e366      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015da:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x1e0>
 80015e6:	e000      	b.n	80015ea <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d073      	beq.n	80016de <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d005      	beq.n	8001608 <HAL_RCC_OscConfig+0x220>
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	2b0c      	cmp	r3, #12
 8001600:	d10e      	bne.n	8001620 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	2b03      	cmp	r3, #3
 8001606:	d10b      	bne.n	8001620 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d063      	beq.n	80016dc <HAL_RCC_OscConfig+0x2f4>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d15f      	bne.n	80016dc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e343      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001628:	d106      	bne.n	8001638 <HAL_RCC_OscConfig+0x250>
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a15      	ldr	r2, [pc, #84]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 8001630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e01d      	b.n	8001674 <HAL_RCC_OscConfig+0x28c>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001640:	d10c      	bne.n	800165c <HAL_RCC_OscConfig+0x274>
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 8001648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a0c      	ldr	r2, [pc, #48]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 8001654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e00b      	b.n	8001674 <HAL_RCC_OscConfig+0x28c>
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a08      	ldr	r2, [pc, #32]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 8001662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a05      	ldr	r2, [pc, #20]	; (8001684 <HAL_RCC_OscConfig+0x29c>)
 800166e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d01b      	beq.n	80016b4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff fbc8 	bl	8000e10 <HAL_GetTick>
 8001680:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001682:	e010      	b.n	80016a6 <HAL_RCC_OscConfig+0x2be>
 8001684:	40021000 	.word	0x40021000
 8001688:	08004b20 	.word	0x08004b20
 800168c:	20000000 	.word	0x20000000
 8001690:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff fbbc 	bl	8000e10 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	; 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e300      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016a6:	4ba0      	ldr	r3, [pc, #640]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0x2ac>
 80016b2:	e014      	b.n	80016de <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b4:	f7ff fbac 	bl	8000e10 <HAL_GetTick>
 80016b8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016bc:	f7ff fba8 	bl	8000e10 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	; 0x64
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e2ec      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ce:	4b96      	ldr	r3, [pc, #600]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x2d4>
 80016da:	e000      	b.n	80016de <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d060      	beq.n	80017ac <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016ea:	6a3b      	ldr	r3, [r7, #32]
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_OscConfig+0x314>
 80016f0:	6a3b      	ldr	r3, [r7, #32]
 80016f2:	2b0c      	cmp	r3, #12
 80016f4:	d119      	bne.n	800172a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d116      	bne.n	800172a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016fc:	4b8a      	ldr	r3, [pc, #552]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <HAL_RCC_OscConfig+0x32c>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e2c9      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001714:	4b84      	ldr	r3, [pc, #528]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	061b      	lsls	r3, r3, #24
 8001722:	4981      	ldr	r1, [pc, #516]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001728:	e040      	b.n	80017ac <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d023      	beq.n	800177a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001732:	4b7d      	ldr	r3, [pc, #500]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a7c      	ldr	r2, [pc, #496]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 8001738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173e:	f7ff fb67 	bl	8000e10 <HAL_GetTick>
 8001742:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001746:	f7ff fb63 	bl	8000e10 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e2a7      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001758:	4b73      	ldr	r3, [pc, #460]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f0      	beq.n	8001746 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001764:	4b70      	ldr	r3, [pc, #448]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	061b      	lsls	r3, r3, #24
 8001772:	496d      	ldr	r1, [pc, #436]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
 8001778:	e018      	b.n	80017ac <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177a:	4b6b      	ldr	r3, [pc, #428]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a6a      	ldr	r2, [pc, #424]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 8001780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff fb43 	bl	8000e10 <HAL_GetTick>
 800178a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178e:	f7ff fb3f 	bl	8000e10 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e283      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017a0:	4b61      	ldr	r3, [pc, #388]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1f0      	bne.n	800178e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d07f      	beq.n	80018b8 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d05f      	beq.n	8001880 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80017c0:	4b59      	ldr	r3, [pc, #356]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 80017c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c6:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699a      	ldr	r2, [r3, #24]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	f003 0310 	and.w	r3, r3, #16
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d037      	beq.n	8001846 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d006      	beq.n	80017ee <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e25c      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d01b      	beq.n	8001830 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80017f8:	4b4b      	ldr	r3, [pc, #300]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 80017fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017fe:	4a4a      	ldr	r2, [pc, #296]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001808:	f7ff fb02 	bl	8000e10 <HAL_GetTick>
 800180c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001810:	f7ff fafe 	bl	8000e10 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b11      	cmp	r3, #17
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e242      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001822:	4b41      	ldr	r3, [pc, #260]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 8001824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1ef      	bne.n	8001810 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001830:	4b3d      	ldr	r3, [pc, #244]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 8001832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001836:	f023 0210 	bic.w	r2, r3, #16
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	493a      	ldr	r1, [pc, #232]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 8001840:	4313      	orrs	r3, r2
 8001842:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001846:	4b38      	ldr	r3, [pc, #224]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 8001848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800184c:	4a36      	ldr	r2, [pc, #216]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001856:	f7ff fadb 	bl	8000e10 <HAL_GetTick>
 800185a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800185e:	f7ff fad7 	bl	8000e10 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b11      	cmp	r3, #17
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e21b      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001870:	4b2d      	ldr	r3, [pc, #180]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 8001872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0ef      	beq.n	800185e <HAL_RCC_OscConfig+0x476>
 800187e:	e01b      	b.n	80018b8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001880:	4b29      	ldr	r3, [pc, #164]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 8001882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001886:	4a28      	ldr	r2, [pc, #160]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001890:	f7ff fabe 	bl	8000e10 <HAL_GetTick>
 8001894:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001898:	f7ff faba 	bl	8000e10 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b11      	cmp	r3, #17
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e1fe      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018aa:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 80018ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1ef      	bne.n	8001898 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 80c1 	beq.w	8001a48 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018cc:	4b16      	ldr	r3, [pc, #88]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 80018ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d10e      	bne.n	80018f6 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 80018da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018dc:	4a12      	ldr	r2, [pc, #72]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 80018de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e2:	6593      	str	r3, [r2, #88]	; 0x58
 80018e4:	4b10      	ldr	r3, [pc, #64]	; (8001928 <HAL_RCC_OscConfig+0x540>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018f0:	2301      	movs	r3, #1
 80018f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f6:	4b0d      	ldr	r3, [pc, #52]	; (800192c <HAL_RCC_OscConfig+0x544>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d11c      	bne.n	800193c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_RCC_OscConfig+0x544>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a09      	ldr	r2, [pc, #36]	; (800192c <HAL_RCC_OscConfig+0x544>)
 8001908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800190e:	f7ff fa7f 	bl	8000e10 <HAL_GetTick>
 8001912:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001914:	e00c      	b.n	8001930 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001916:	f7ff fa7b 	bl	8000e10 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d905      	bls.n	8001930 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e1bf      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
 8001928:	40021000 	.word	0x40021000
 800192c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001930:	4bb1      	ldr	r3, [pc, #708]	; (8001bf8 <HAL_RCC_OscConfig+0x810>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0ec      	beq.n	8001916 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b00      	cmp	r3, #0
 8001946:	d02c      	beq.n	80019a2 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001948:	4bac      	ldr	r3, [pc, #688]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 800194a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195a:	49a8      	ldr	r1, [pc, #672]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 800195c:	4313      	orrs	r3, r2
 800195e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	2b00      	cmp	r3, #0
 800196c:	d010      	beq.n	8001990 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800196e:	4ba3      	ldr	r3, [pc, #652]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001974:	4aa1      	ldr	r2, [pc, #644]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800197e:	4b9f      	ldr	r3, [pc, #636]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001984:	4a9d      	ldr	r2, [pc, #628]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800198e:	e018      	b.n	80019c2 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001990:	4b9a      	ldr	r3, [pc, #616]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001996:	4a99      	ldr	r2, [pc, #612]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019a0:	e00f      	b.n	80019c2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019a2:	4b96      	ldr	r3, [pc, #600]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 80019a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a8:	4a94      	ldr	r2, [pc, #592]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 80019aa:	f023 0301 	bic.w	r3, r3, #1
 80019ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019b2:	4b92      	ldr	r3, [pc, #584]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 80019b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b8:	4a90      	ldr	r2, [pc, #576]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 80019ba:	f023 0304 	bic.w	r3, r3, #4
 80019be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d016      	beq.n	80019f8 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ca:	f7ff fa21 	bl	8000e10 <HAL_GetTick>
 80019ce:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019d0:	e00a      	b.n	80019e8 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d2:	f7ff fa1d 	bl	8000e10 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e15f      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019e8:	4b84      	ldr	r3, [pc, #528]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 80019ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0ed      	beq.n	80019d2 <HAL_RCC_OscConfig+0x5ea>
 80019f6:	e01d      	b.n	8001a34 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f8:	f7ff fa0a 	bl	8000e10 <HAL_GetTick>
 80019fc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a00:	f7ff fa06 	bl	8000e10 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e148      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a16:	4b79      	ldr	r3, [pc, #484]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1ed      	bne.n	8001a00 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001a24:	4b75      	ldr	r3, [pc, #468]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2a:	4a74      	ldr	r2, [pc, #464]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d105      	bne.n	8001a48 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a3c:	4b6f      	ldr	r3, [pc, #444]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a40:	4a6e      	ldr	r2, [pc, #440]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0320 	and.w	r3, r3, #32
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d03c      	beq.n	8001ace <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d01c      	beq.n	8001a96 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a5c:	4b67      	ldr	r3, [pc, #412]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001a5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a62:	4a66      	ldr	r2, [pc, #408]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6c:	f7ff f9d0 	bl	8000e10 <HAL_GetTick>
 8001a70:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a74:	f7ff f9cc 	bl	8000e10 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e110      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a86:	4b5d      	ldr	r3, [pc, #372]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001a88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0ef      	beq.n	8001a74 <HAL_RCC_OscConfig+0x68c>
 8001a94:	e01b      	b.n	8001ace <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a96:	4b59      	ldr	r3, [pc, #356]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001a98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a9c:	4a57      	ldr	r2, [pc, #348]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001a9e:	f023 0301 	bic.w	r3, r3, #1
 8001aa2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa6:	f7ff f9b3 	bl	8000e10 <HAL_GetTick>
 8001aaa:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aae:	f7ff f9af 	bl	8000e10 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e0f3      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ac0:	4b4e      	ldr	r3, [pc, #312]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001ac2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1ef      	bne.n	8001aae <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 80e7 	beq.w	8001ca6 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	f040 80b7 	bne.w	8001c50 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ae2:	4b46      	ldr	r3, [pc, #280]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f003 0203 	and.w	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d124      	bne.n	8001b40 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b00:	3b01      	subs	r3, #1
 8001b02:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d11b      	bne.n	8001b40 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b12:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d113      	bne.n	8001b40 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b22:	085b      	lsrs	r3, r3, #1
 8001b24:	3b01      	subs	r3, #1
 8001b26:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d109      	bne.n	8001b40 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	085b      	lsrs	r3, r3, #1
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d061      	beq.n	8001c04 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	2b0c      	cmp	r3, #12
 8001b44:	d056      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b46:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a2c      	ldr	r2, [pc, #176]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001b4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b50:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b52:	f7ff f95d 	bl	8000e10 <HAL_GetTick>
 8001b56:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5a:	f7ff f959 	bl	8000e10 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e09d      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b6c:	4b23      	ldr	r3, [pc, #140]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1f0      	bne.n	8001b5a <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b78:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <HAL_RCC_OscConfig+0x818>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b88:	3a01      	subs	r2, #1
 8001b8a:	0112      	lsls	r2, r2, #4
 8001b8c:	4311      	orrs	r1, r2
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b92:	0212      	lsls	r2, r2, #8
 8001b94:	4311      	orrs	r1, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b9a:	0852      	lsrs	r2, r2, #1
 8001b9c:	3a01      	subs	r2, #1
 8001b9e:	0552      	lsls	r2, r2, #21
 8001ba0:	4311      	orrs	r1, r2
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ba6:	0852      	lsrs	r2, r2, #1
 8001ba8:	3a01      	subs	r2, #1
 8001baa:	0652      	lsls	r2, r2, #25
 8001bac:	430a      	orrs	r2, r1
 8001bae:	4913      	ldr	r1, [pc, #76]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bb4:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a10      	ldr	r2, [pc, #64]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bc0:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001bc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bcc:	f7ff f920 	bl	8000e10 <HAL_GetTick>
 8001bd0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd4:	f7ff f91c 	bl	8000e10 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e060      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_RCC_OscConfig+0x814>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bf2:	e058      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e057      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
 8001bf8:	40007000 	.word	0x40007000
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c04:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <HAL_RCC_OscConfig+0x8c8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d14a      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c10:	4b27      	ldr	r3, [pc, #156]	; (8001cb0 <HAL_RCC_OscConfig+0x8c8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a26      	ldr	r2, [pc, #152]	; (8001cb0 <HAL_RCC_OscConfig+0x8c8>)
 8001c16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c1c:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <HAL_RCC_OscConfig+0x8c8>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	4a23      	ldr	r2, [pc, #140]	; (8001cb0 <HAL_RCC_OscConfig+0x8c8>)
 8001c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c28:	f7ff f8f2 	bl	8000e10 <HAL_GetTick>
 8001c2c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c30:	f7ff f8ee 	bl	8000e10 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e032      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c42:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_RCC_OscConfig+0x8c8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x848>
 8001c4e:	e02a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	2b0c      	cmp	r3, #12
 8001c54:	d025      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c56:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <HAL_RCC_OscConfig+0x8c8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a15      	ldr	r2, [pc, #84]	; (8001cb0 <HAL_RCC_OscConfig+0x8c8>)
 8001c5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c60:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c62:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <HAL_RCC_OscConfig+0x8c8>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <HAL_RCC_OscConfig+0x8c8>)
 8001c68:	f023 0303 	bic.w	r3, r3, #3
 8001c6c:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <HAL_RCC_OscConfig+0x8c8>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <HAL_RCC_OscConfig+0x8c8>)
 8001c74:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c78:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7a:	f7ff f8c9 	bl	8000e10 <HAL_GetTick>
 8001c7e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c82:	f7ff f8c5 	bl	8000e10 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e009      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_RCC_OscConfig+0x8c8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f0      	bne.n	8001c82 <HAL_RCC_OscConfig+0x89a>
 8001ca0:	e001      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3728      	adds	r7, #40	; 0x28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0c8      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc8:	4b66      	ldr	r3, [pc, #408]	; (8001e64 <HAL_RCC_ClockConfig+0x1b0>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d910      	bls.n	8001cf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd6:	4b63      	ldr	r3, [pc, #396]	; (8001e64 <HAL_RCC_ClockConfig+0x1b0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 0207 	bic.w	r2, r3, #7
 8001cde:	4961      	ldr	r1, [pc, #388]	; (8001e64 <HAL_RCC_ClockConfig+0x1b0>)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce6:	4b5f      	ldr	r3, [pc, #380]	; (8001e64 <HAL_RCC_ClockConfig+0x1b0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d001      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e0b0      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d04c      	beq.n	8001d9e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d107      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0c:	4b56      	ldr	r3, [pc, #344]	; (8001e68 <HAL_RCC_ClockConfig+0x1b4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d121      	bne.n	8001d5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e09e      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d107      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d24:	4b50      	ldr	r3, [pc, #320]	; (8001e68 <HAL_RCC_ClockConfig+0x1b4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d115      	bne.n	8001d5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e092      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d107      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d3c:	4b4a      	ldr	r3, [pc, #296]	; (8001e68 <HAL_RCC_ClockConfig+0x1b4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d109      	bne.n	8001d5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e086      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d4c:	4b46      	ldr	r3, [pc, #280]	; (8001e68 <HAL_RCC_ClockConfig+0x1b4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e07e      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d5c:	4b42      	ldr	r3, [pc, #264]	; (8001e68 <HAL_RCC_ClockConfig+0x1b4>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f023 0203 	bic.w	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	493f      	ldr	r1, [pc, #252]	; (8001e68 <HAL_RCC_ClockConfig+0x1b4>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d6e:	f7ff f84f 	bl	8000e10 <HAL_GetTick>
 8001d72:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d74:	e00a      	b.n	8001d8c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d76:	f7ff f84b 	bl	8000e10 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e066      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8c:	4b36      	ldr	r3, [pc, #216]	; (8001e68 <HAL_RCC_ClockConfig+0x1b4>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 020c 	and.w	r2, r3, #12
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d1eb      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d008      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001daa:	4b2f      	ldr	r3, [pc, #188]	; (8001e68 <HAL_RCC_ClockConfig+0x1b4>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	492c      	ldr	r1, [pc, #176]	; (8001e68 <HAL_RCC_ClockConfig+0x1b4>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dbc:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <HAL_RCC_ClockConfig+0x1b0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d210      	bcs.n	8001dec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dca:	4b26      	ldr	r3, [pc, #152]	; (8001e64 <HAL_RCC_ClockConfig+0x1b0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f023 0207 	bic.w	r2, r3, #7
 8001dd2:	4924      	ldr	r1, [pc, #144]	; (8001e64 <HAL_RCC_ClockConfig+0x1b0>)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dda:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <HAL_RCC_ClockConfig+0x1b0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d001      	beq.n	8001dec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e036      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d008      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001df8:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <HAL_RCC_ClockConfig+0x1b4>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	4918      	ldr	r1, [pc, #96]	; (8001e68 <HAL_RCC_ClockConfig+0x1b4>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d009      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e16:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <HAL_RCC_ClockConfig+0x1b4>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4910      	ldr	r1, [pc, #64]	; (8001e68 <HAL_RCC_ClockConfig+0x1b4>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e2a:	f000 f825 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <HAL_RCC_ClockConfig+0x1b4>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	091b      	lsrs	r3, r3, #4
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	490c      	ldr	r1, [pc, #48]	; (8001e6c <HAL_RCC_ClockConfig+0x1b8>)
 8001e3c:	5ccb      	ldrb	r3, [r1, r3]
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	fa22 f303 	lsr.w	r3, r2, r3
 8001e46:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <HAL_RCC_ClockConfig+0x1c0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe ff8e 	bl	8000d70 <HAL_InitTick>
 8001e54:	4603      	mov	r3, r0
 8001e56:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e58:	7afb      	ldrb	r3, [r7, #11]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40022000 	.word	0x40022000
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	08004b20 	.word	0x08004b20
 8001e70:	20000000 	.word	0x20000000
 8001e74:	20000004 	.word	0x20000004

08001e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	; 0x24
 8001e7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e86:	4b3e      	ldr	r3, [pc, #248]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e90:	4b3b      	ldr	r3, [pc, #236]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_GetSysClockFreq+0x34>
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	2b0c      	cmp	r3, #12
 8001ea4:	d121      	bne.n	8001eea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d11e      	bne.n	8001eea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001eac:	4b34      	ldr	r3, [pc, #208]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d107      	bne.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001eb8:	4b31      	ldr	r3, [pc, #196]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ebe:	0a1b      	lsrs	r3, r3, #8
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	e005      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ec8:	4b2d      	ldr	r3, [pc, #180]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ed4:	4a2b      	ldr	r2, [pc, #172]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001edc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10d      	bne.n	8001f00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ee8:	e00a      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d102      	bne.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ef0:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	e004      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001efc:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x114>)
 8001efe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	2b0c      	cmp	r3, #12
 8001f04:	d134      	bne.n	8001f70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f06:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d003      	beq.n	8001f1e <HAL_RCC_GetSysClockFreq+0xa6>
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d003      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0xac>
 8001f1c:	e005      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f20:	617b      	str	r3, [r7, #20]
      break;
 8001f22:	e005      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f24:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x114>)
 8001f26:	617b      	str	r3, [r7, #20]
      break;
 8001f28:	e002      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	617b      	str	r3, [r7, #20]
      break;
 8001f2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f30:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	fb02 f203 	mul.w	r2, r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	0e5b      	lsrs	r3, r3, #25
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	3301      	adds	r3, #1
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f70:	69bb      	ldr	r3, [r7, #24]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3724      	adds	r7, #36	; 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000
 8001f84:	08004b38 	.word	0x08004b38
 8001f88:	00f42400 	.word	0x00f42400
 8001f8c:	007a1200 	.word	0x007a1200

08001f90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000000 	.word	0x20000000

08001fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fac:	f7ff fff0 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	4904      	ldr	r1, [pc, #16]	; (8001fd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fbe:	5ccb      	ldrb	r3, [r1, r3]
 8001fc0:	f003 031f 	and.w	r3, r3, #31
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	08004b30 	.word	0x08004b30

08001fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fd8:	f7ff ffda 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	0adb      	lsrs	r3, r3, #11
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	4904      	ldr	r1, [pc, #16]	; (8001ffc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fea:	5ccb      	ldrb	r3, [r1, r3]
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	08004b30 	.word	0x08004b30

08002000 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800200c:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002018:	f7ff f982 	bl	8001320 <HAL_PWREx_GetVoltageRange>
 800201c:	6178      	str	r0, [r7, #20]
 800201e:	e014      	b.n	800204a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002020:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	4a24      	ldr	r2, [pc, #144]	; (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202a:	6593      	str	r3, [r2, #88]	; 0x58
 800202c:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002038:	f7ff f972 	bl	8001320 <HAL_PWREx_GetVoltageRange>
 800203c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800203e:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002048:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002050:	d10b      	bne.n	800206a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b80      	cmp	r3, #128	; 0x80
 8002056:	d919      	bls.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2ba0      	cmp	r3, #160	; 0xa0
 800205c:	d902      	bls.n	8002064 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800205e:	2302      	movs	r3, #2
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	e013      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002064:	2301      	movs	r3, #1
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	e010      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b80      	cmp	r3, #128	; 0x80
 800206e:	d902      	bls.n	8002076 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002070:	2303      	movs	r3, #3
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	e00a      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b80      	cmp	r3, #128	; 0x80
 800207a:	d102      	bne.n	8002082 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800207c:	2302      	movs	r3, #2
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	e004      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b70      	cmp	r3, #112	; 0x70
 8002086:	d101      	bne.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002088:	2301      	movs	r3, #1
 800208a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f023 0207 	bic.w	r2, r3, #7
 8002094:	4909      	ldr	r1, [pc, #36]	; (80020bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800209c:	4b07      	ldr	r3, [pc, #28]	; (80020bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d001      	beq.n	80020ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40022000 	.word	0x40022000

080020c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020c8:	2300      	movs	r3, #0
 80020ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020cc:	2300      	movs	r3, #0
 80020ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 809e 	beq.w	800221a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020e2:	4b46      	ldr	r3, [pc, #280]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80020f2:	2300      	movs	r3, #0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00d      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f8:	4b40      	ldr	r3, [pc, #256]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	4a3f      	ldr	r2, [pc, #252]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002102:	6593      	str	r3, [r2, #88]	; 0x58
 8002104:	4b3d      	ldr	r3, [pc, #244]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002110:	2301      	movs	r3, #1
 8002112:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002114:	4b3a      	ldr	r3, [pc, #232]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a39      	ldr	r2, [pc, #228]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800211a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002120:	f7fe fe76 	bl	8000e10 <HAL_GetTick>
 8002124:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002126:	e009      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002128:	f7fe fe72 	bl	8000e10 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d902      	bls.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	74fb      	strb	r3, [r7, #19]
        break;
 800213a:	e005      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800213c:	4b30      	ldr	r3, [pc, #192]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0ef      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002148:	7cfb      	ldrb	r3, [r7, #19]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d15a      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800214e:	4b2b      	ldr	r3, [pc, #172]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002158:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d01e      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	429a      	cmp	r2, r3
 8002168:	d019      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800216a:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002174:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002176:	4b21      	ldr	r3, [pc, #132]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217c:	4a1f      	ldr	r2, [pc, #124]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800217e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002186:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218c:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800218e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002192:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002196:	4a19      	ldr	r2, [pc, #100]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d016      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7fe fe32 	bl	8000e10 <HAL_GetTick>
 80021ac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ae:	e00b      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b0:	f7fe fe2e 	bl	8000e10 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d902      	bls.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	74fb      	strb	r3, [r7, #19]
            break;
 80021c6:	e006      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0ec      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80021d6:	7cfb      	ldrb	r3, [r7, #19]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10b      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021dc:	4b07      	ldr	r3, [pc, #28]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4904      	ldr	r1, [pc, #16]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021f2:	e009      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021f4:	7cfb      	ldrb	r3, [r7, #19]
 80021f6:	74bb      	strb	r3, [r7, #18]
 80021f8:	e006      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80021fa:	bf00      	nop
 80021fc:	40021000 	.word	0x40021000
 8002200:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002208:	7c7b      	ldrb	r3, [r7, #17]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d105      	bne.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220e:	4b6e      	ldr	r3, [pc, #440]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002212:	4a6d      	ldr	r2, [pc, #436]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002218:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002226:	4b68      	ldr	r3, [pc, #416]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222c:	f023 0203 	bic.w	r2, r3, #3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4964      	ldr	r1, [pc, #400]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002248:	4b5f      	ldr	r3, [pc, #380]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224e:	f023 020c 	bic.w	r2, r3, #12
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	495c      	ldr	r1, [pc, #368]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800226a:	4b57      	ldr	r3, [pc, #348]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800226c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002270:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4953      	ldr	r1, [pc, #332]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0320 	and.w	r3, r3, #32
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00a      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800228c:	4b4e      	ldr	r3, [pc, #312]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002292:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	494b      	ldr	r1, [pc, #300]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022ae:	4b46      	ldr	r3, [pc, #280]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	4942      	ldr	r1, [pc, #264]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00a      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022d0:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	493a      	ldr	r1, [pc, #232]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00a      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022f2:	4b35      	ldr	r3, [pc, #212]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	4931      	ldr	r1, [pc, #196]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00a      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002314:	4b2c      	ldr	r3, [pc, #176]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	4929      	ldr	r1, [pc, #164]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002336:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	4920      	ldr	r1, [pc, #128]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d015      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002358:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800235a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002366:	4918      	ldr	r1, [pc, #96]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002376:	d105      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800237e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002382:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d015      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002390:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002396:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239e:	490a      	ldr	r1, [pc, #40]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023ae:	d105      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000

080023cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e095      	b.n	800250a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d108      	bne.n	80023f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023ee:	d009      	beq.n	8002404 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	61da      	str	r2, [r3, #28]
 80023f6:	e005      	b.n	8002404 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d106      	bne.n	8002424 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7fe fa36 	bl	8000890 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2202      	movs	r2, #2
 8002428:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800243a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002444:	d902      	bls.n	800244c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	e002      	b.n	8002452 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800244c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002450:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800245a:	d007      	beq.n	800246c <HAL_SPI_Init+0xa0>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002464:	d002      	beq.n	800246c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800247c:	431a      	orrs	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ae:	ea42 0103 	orr.w	r1, r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	0c1b      	lsrs	r3, r3, #16
 80024c8:	f003 0204 	and.w	r2, r3, #4
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	431a      	orrs	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80024e8:	ea42 0103 	orr.w	r1, r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b088      	sub	sp, #32
 8002516:	af00      	add	r7, sp, #0
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	603b      	str	r3, [r7, #0]
 800251e:	4613      	mov	r3, r2
 8002520:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_SPI_Transmit+0x22>
 8002530:	2302      	movs	r3, #2
 8002532:	e158      	b.n	80027e6 <HAL_SPI_Transmit+0x2d4>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800253c:	f7fe fc68 	bl	8000e10 <HAL_GetTick>
 8002540:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002542:	88fb      	ldrh	r3, [r7, #6]
 8002544:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d002      	beq.n	8002558 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002552:	2302      	movs	r3, #2
 8002554:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002556:	e13d      	b.n	80027d4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <HAL_SPI_Transmit+0x52>
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d102      	bne.n	800256a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002568:	e134      	b.n	80027d4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2203      	movs	r2, #3
 800256e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	88fa      	ldrh	r2, [r7, #6]
 8002582:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	88fa      	ldrh	r2, [r7, #6]
 8002588:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025b4:	d10f      	bne.n	80025d6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e0:	2b40      	cmp	r3, #64	; 0x40
 80025e2:	d007      	beq.n	80025f4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025fc:	d94b      	bls.n	8002696 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <HAL_SPI_Transmit+0xfa>
 8002606:	8afb      	ldrh	r3, [r7, #22]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d13e      	bne.n	800268a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002610:	881a      	ldrh	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261c:	1c9a      	adds	r2, r3, #2
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002630:	e02b      	b.n	800268a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b02      	cmp	r3, #2
 800263e:	d112      	bne.n	8002666 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002644:	881a      	ldrh	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002650:	1c9a      	adds	r2, r3, #2
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002664:	e011      	b.n	800268a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002666:	f7fe fbd3 	bl	8000e10 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d803      	bhi.n	800267e <HAL_SPI_Transmit+0x16c>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267c:	d102      	bne.n	8002684 <HAL_SPI_Transmit+0x172>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d102      	bne.n	800268a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002688:	e0a4      	b.n	80027d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800268e:	b29b      	uxth	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1ce      	bne.n	8002632 <HAL_SPI_Transmit+0x120>
 8002694:	e07c      	b.n	8002790 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <HAL_SPI_Transmit+0x192>
 800269e:	8afb      	ldrh	r3, [r7, #22]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d170      	bne.n	8002786 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d912      	bls.n	80026d4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b2:	881a      	ldrh	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026be:	1c9a      	adds	r2, r3, #2
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	3b02      	subs	r3, #2
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026d2:	e058      	b.n	8002786 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	330c      	adds	r3, #12
 80026de:	7812      	ldrb	r2, [r2, #0]
 80026e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80026fa:	e044      	b.n	8002786 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b02      	cmp	r3, #2
 8002708:	d12b      	bne.n	8002762 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800270e:	b29b      	uxth	r3, r3
 8002710:	2b01      	cmp	r3, #1
 8002712:	d912      	bls.n	800273a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002718:	881a      	ldrh	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002724:	1c9a      	adds	r2, r3, #2
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800272e:	b29b      	uxth	r3, r3
 8002730:	3b02      	subs	r3, #2
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002738:	e025      	b.n	8002786 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	330c      	adds	r3, #12
 8002744:	7812      	ldrb	r2, [r2, #0]
 8002746:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002760:	e011      	b.n	8002786 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002762:	f7fe fb55 	bl	8000e10 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d803      	bhi.n	800277a <HAL_SPI_Transmit+0x268>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d102      	bne.n	8002780 <HAL_SPI_Transmit+0x26e>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d102      	bne.n	8002786 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002784:	e026      	b.n	80027d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800278a:	b29b      	uxth	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1b5      	bne.n	80026fc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	6839      	ldr	r1, [r7, #0]
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 fcdb 	bl	8003150 <SPI_EndRxTxTransaction>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2220      	movs	r2, #32
 80027a4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10a      	bne.n	80027c4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	77fb      	strb	r3, [r7, #31]
 80027d0:	e000      	b.n	80027d4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80027d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80027e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3720      	adds	r7, #32
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b088      	sub	sp, #32
 80027f2:	af02      	add	r7, sp, #8
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	603b      	str	r3, [r7, #0]
 80027fa:	4613      	mov	r3, r2
 80027fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800280a:	d112      	bne.n	8002832 <HAL_SPI_Receive+0x44>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10e      	bne.n	8002832 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2204      	movs	r2, #4
 8002818:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800281c:	88fa      	ldrh	r2, [r7, #6]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	4613      	mov	r3, r2
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 f910 	bl	8002a4e <HAL_SPI_TransmitReceive>
 800282e:	4603      	mov	r3, r0
 8002830:	e109      	b.n	8002a46 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_SPI_Receive+0x52>
 800283c:	2302      	movs	r3, #2
 800283e:	e102      	b.n	8002a46 <HAL_SPI_Receive+0x258>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002848:	f7fe fae2 	bl	8000e10 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b01      	cmp	r3, #1
 8002858:	d002      	beq.n	8002860 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800285a:	2302      	movs	r3, #2
 800285c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800285e:	e0e9      	b.n	8002a34 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <HAL_SPI_Receive+0x7e>
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d102      	bne.n	8002872 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002870:	e0e0      	b.n	8002a34 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2204      	movs	r2, #4
 8002876:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	88fa      	ldrh	r2, [r7, #6]
 800288a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	88fa      	ldrh	r2, [r7, #6]
 8002892:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028bc:	d908      	bls.n	80028d0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	e007      	b.n	80028e0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028de:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028e8:	d10f      	bne.n	800290a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002908:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002914:	2b40      	cmp	r3, #64	; 0x40
 8002916:	d007      	beq.n	8002928 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002926:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002930:	d867      	bhi.n	8002a02 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002932:	e030      	b.n	8002996 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b01      	cmp	r3, #1
 8002940:	d117      	bne.n	8002972 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f103 020c 	add.w	r2, r3, #12
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	7812      	ldrb	r2, [r2, #0]
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002970:	e011      	b.n	8002996 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002972:	f7fe fa4d 	bl	8000e10 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d803      	bhi.n	800298a <HAL_SPI_Receive+0x19c>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d102      	bne.n	8002990 <HAL_SPI_Receive+0x1a2>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d102      	bne.n	8002996 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002994:	e04e      	b.n	8002a34 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800299c:	b29b      	uxth	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1c8      	bne.n	8002934 <HAL_SPI_Receive+0x146>
 80029a2:	e034      	b.n	8002a0e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d115      	bne.n	80029de <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	b292      	uxth	r2, r2
 80029be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	1c9a      	adds	r2, r3, #2
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80029dc:	e011      	b.n	8002a02 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029de:	f7fe fa17 	bl	8000e10 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d803      	bhi.n	80029f6 <HAL_SPI_Receive+0x208>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f4:	d102      	bne.n	80029fc <HAL_SPI_Receive+0x20e>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d102      	bne.n	8002a02 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002a00:	e018      	b.n	8002a34 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1ca      	bne.n	80029a4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	6839      	ldr	r1, [r7, #0]
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 fb44 	bl	80030a0 <SPI_EndRxTransaction>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	75fb      	strb	r3, [r7, #23]
 8002a30:	e000      	b.n	8002a34 <HAL_SPI_Receive+0x246>
  }

error :
 8002a32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b08a      	sub	sp, #40	; 0x28
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <HAL_SPI_TransmitReceive+0x26>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e1fb      	b.n	8002e6c <HAL_SPI_TransmitReceive+0x41e>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a7c:	f7fe f9c8 	bl	8000e10 <HAL_GetTick>
 8002a80:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a88:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002a90:	887b      	ldrh	r3, [r7, #2]
 8002a92:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002a94:	887b      	ldrh	r3, [r7, #2]
 8002a96:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a98:	7efb      	ldrb	r3, [r7, #27]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d00e      	beq.n	8002abc <HAL_SPI_TransmitReceive+0x6e>
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aa4:	d106      	bne.n	8002ab4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d102      	bne.n	8002ab4 <HAL_SPI_TransmitReceive+0x66>
 8002aae:	7efb      	ldrb	r3, [r7, #27]
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d003      	beq.n	8002abc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002aba:	e1cd      	b.n	8002e58 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d005      	beq.n	8002ace <HAL_SPI_TransmitReceive+0x80>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_SPI_TransmitReceive+0x80>
 8002ac8:	887b      	ldrh	r3, [r7, #2]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d103      	bne.n	8002ad6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002ad4:	e1c0      	b.n	8002e58 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d003      	beq.n	8002aea <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2205      	movs	r2, #5
 8002ae6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	887a      	ldrh	r2, [r7, #2]
 8002afa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	887a      	ldrh	r2, [r7, #2]
 8002b02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	887a      	ldrh	r2, [r7, #2]
 8002b10:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	887a      	ldrh	r2, [r7, #2]
 8002b16:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b2c:	d802      	bhi.n	8002b34 <HAL_SPI_TransmitReceive+0xe6>
 8002b2e:	8a3b      	ldrh	r3, [r7, #16]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d908      	bls.n	8002b46 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	e007      	b.n	8002b56 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b54:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b60:	2b40      	cmp	r3, #64	; 0x40
 8002b62:	d007      	beq.n	8002b74 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b7c:	d97c      	bls.n	8002c78 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <HAL_SPI_TransmitReceive+0x13e>
 8002b86:	8a7b      	ldrh	r3, [r7, #18]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d169      	bne.n	8002c60 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b90:	881a      	ldrh	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9c:	1c9a      	adds	r2, r3, #2
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bb0:	e056      	b.n	8002c60 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d11b      	bne.n	8002bf8 <HAL_SPI_TransmitReceive+0x1aa>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d016      	beq.n	8002bf8 <HAL_SPI_TransmitReceive+0x1aa>
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d113      	bne.n	8002bf8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd4:	881a      	ldrh	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be0:	1c9a      	adds	r2, r3, #2
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d11c      	bne.n	8002c40 <HAL_SPI_TransmitReceive+0x1f2>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d016      	beq.n	8002c40 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	b292      	uxth	r2, r2
 8002c1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	1c9a      	adds	r2, r3, #2
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c40:	f7fe f8e6 	bl	8000e10 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d807      	bhi.n	8002c60 <HAL_SPI_TransmitReceive+0x212>
 8002c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c56:	d003      	beq.n	8002c60 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002c5e:	e0fb      	b.n	8002e58 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1a3      	bne.n	8002bb2 <HAL_SPI_TransmitReceive+0x164>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d19d      	bne.n	8002bb2 <HAL_SPI_TransmitReceive+0x164>
 8002c76:	e0df      	b.n	8002e38 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_SPI_TransmitReceive+0x23a>
 8002c80:	8a7b      	ldrh	r3, [r7, #18]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	f040 80cb 	bne.w	8002e1e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d912      	bls.n	8002cb8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c96:	881a      	ldrh	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca2:	1c9a      	adds	r2, r3, #2
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	3b02      	subs	r3, #2
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cb6:	e0b2      	b.n	8002e1e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	330c      	adds	r3, #12
 8002cc2:	7812      	ldrb	r2, [r2, #0]
 8002cc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cde:	e09e      	b.n	8002e1e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d134      	bne.n	8002d58 <HAL_SPI_TransmitReceive+0x30a>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d02f      	beq.n	8002d58 <HAL_SPI_TransmitReceive+0x30a>
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d12c      	bne.n	8002d58 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d912      	bls.n	8002d2e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0c:	881a      	ldrh	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d18:	1c9a      	adds	r2, r3, #2
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b02      	subs	r3, #2
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d2c:	e012      	b.n	8002d54 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	330c      	adds	r3, #12
 8002d38:	7812      	ldrb	r2, [r2, #0]
 8002d3a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d148      	bne.n	8002df8 <HAL_SPI_TransmitReceive+0x3aa>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d042      	beq.n	8002df8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d923      	bls.n	8002dc6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	b292      	uxth	r2, r2
 8002d8a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	1c9a      	adds	r2, r3, #2
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	3b02      	subs	r3, #2
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d81f      	bhi.n	8002df4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dc2:	605a      	str	r2, [r3, #4]
 8002dc4:	e016      	b.n	8002df4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f103 020c 	add.w	r2, r3, #12
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	7812      	ldrb	r2, [r2, #0]
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002df4:	2301      	movs	r3, #1
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002df8:	f7fe f80a 	bl	8000e10 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d803      	bhi.n	8002e10 <HAL_SPI_TransmitReceive+0x3c2>
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0e:	d102      	bne.n	8002e16 <HAL_SPI_TransmitReceive+0x3c8>
 8002e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d103      	bne.n	8002e1e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002e1c:	e01c      	b.n	8002e58 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f47f af5b 	bne.w	8002ce0 <HAL_SPI_TransmitReceive+0x292>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f47f af54 	bne.w	8002ce0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e38:	69fa      	ldr	r2, [r7, #28]
 8002e3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f987 	bl	8003150 <SPI_EndRxTxTransaction>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d006      	beq.n	8002e56 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2220      	movs	r2, #32
 8002e52:	661a      	str	r2, [r3, #96]	; 0x60
 8002e54:	e000      	b.n	8002e58 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002e56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002e68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3728      	adds	r7, #40	; 0x28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	4613      	mov	r3, r2
 8002e82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e84:	f7fd ffc4 	bl	8000e10 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8c:	1a9b      	subs	r3, r3, r2
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	4413      	add	r3, r2
 8002e92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e94:	f7fd ffbc 	bl	8000e10 <HAL_GetTick>
 8002e98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e9a:	4b39      	ldr	r3, [pc, #228]	; (8002f80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	015b      	lsls	r3, r3, #5
 8002ea0:	0d1b      	lsrs	r3, r3, #20
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	fb02 f303 	mul.w	r3, r2, r3
 8002ea8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eaa:	e054      	b.n	8002f56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb2:	d050      	beq.n	8002f56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002eb4:	f7fd ffac 	bl	8000e10 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	69fa      	ldr	r2, [r7, #28]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d902      	bls.n	8002eca <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d13d      	bne.n	8002f46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ed8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ee2:	d111      	bne.n	8002f08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eec:	d004      	beq.n	8002ef8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef6:	d107      	bne.n	8002f08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f10:	d10f      	bne.n	8002f32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e017      	b.n	8002f76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	bf0c      	ite	eq
 8002f66:	2301      	moveq	r3, #1
 8002f68:	2300      	movne	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d19b      	bne.n	8002eac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3720      	adds	r7, #32
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000000 	.word	0x20000000

08002f84 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
 8002f90:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002f92:	f7fd ff3d 	bl	8000e10 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002fa2:	f7fd ff35 	bl	8000e10 <HAL_GetTick>
 8002fa6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002fa8:	4b3c      	ldr	r3, [pc, #240]	; (800309c <SPI_WaitFifoStateUntilTimeout+0x118>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	00da      	lsls	r2, r3, #3
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	0d1b      	lsrs	r3, r3, #20
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	fb02 f303 	mul.w	r3, r2, r3
 8002fbe:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8002fc0:	e05f      	b.n	8003082 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002fc8:	d106      	bne.n	8002fd8 <SPI_WaitFifoStateUntilTimeout+0x54>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d103      	bne.n	8002fd8 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	330c      	adds	r3, #12
 8002fd6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fde:	d050      	beq.n	8003082 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fe0:	f7fd ff16 	bl	8000e10 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	69fa      	ldr	r2, [r7, #28]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d902      	bls.n	8002ff6 <SPI_WaitFifoStateUntilTimeout+0x72>
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d13d      	bne.n	8003072 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003004:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800300e:	d111      	bne.n	8003034 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003018:	d004      	beq.n	8003024 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003022:	d107      	bne.n	8003034 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003032:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800303c:	d10f      	bne.n	800305e <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800305c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e010      	b.n	8003094 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	3b01      	subs	r3, #1
 8003080:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4013      	ands	r3, r2
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	429a      	cmp	r2, r3
 8003090:	d197      	bne.n	8002fc2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3720      	adds	r7, #32
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	20000000 	.word	0x20000000

080030a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030b4:	d111      	bne.n	80030da <SPI_EndRxTransaction+0x3a>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030be:	d004      	beq.n	80030ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c8:	d107      	bne.n	80030da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030d8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2200      	movs	r2, #0
 80030e2:	2180      	movs	r1, #128	; 0x80
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f7ff fec5 	bl	8002e74 <SPI_WaitFlagStateUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f4:	f043 0220 	orr.w	r2, r3, #32
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e023      	b.n	8003148 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003108:	d11d      	bne.n	8003146 <SPI_EndRxTransaction+0xa6>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003112:	d004      	beq.n	800311e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800311c:	d113      	bne.n	8003146 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2200      	movs	r2, #0
 8003126:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f7ff ff2a 	bl	8002f84 <SPI_WaitFifoStateUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d007      	beq.n	8003146 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800313a:	f043 0220 	orr.w	r2, r3, #32
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e000      	b.n	8003148 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af02      	add	r7, sp, #8
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2200      	movs	r2, #0
 8003164:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f7ff ff0b 	bl	8002f84 <SPI_WaitFifoStateUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d007      	beq.n	8003184 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003178:	f043 0220 	orr.w	r2, r3, #32
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e027      	b.n	80031d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2200      	movs	r2, #0
 800318c:	2180      	movs	r1, #128	; 0x80
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f7ff fe70 	bl	8002e74 <SPI_WaitFlagStateUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d007      	beq.n	80031aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319e:	f043 0220 	orr.w	r2, r3, #32
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e014      	b.n	80031d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f7ff fee4 	bl	8002f84 <SPI_WaitFifoStateUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d007      	beq.n	80031d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c6:	f043 0220 	orr.w	r2, r3, #32
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e000      	b.n	80031d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e040      	b.n	8003270 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fd fcfc 	bl	8000bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2224      	movs	r2, #36	; 0x24
 8003208:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0201 	bic.w	r2, r2, #1
 8003218:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f8c0 	bl	80033a0 <UART_SetConfig>
 8003220:	4603      	mov	r3, r0
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e022      	b.n	8003270 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fae8 	bl	8003808 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003246:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003256:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 fb6f 	bl	800394c <UART_CheckIdleState>
 800326e:	4603      	mov	r3, r0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08a      	sub	sp, #40	; 0x28
 800327c:	af02      	add	r7, sp, #8
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	4613      	mov	r3, r2
 8003286:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800328c:	2b20      	cmp	r3, #32
 800328e:	f040 8081 	bne.w	8003394 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <HAL_UART_Transmit+0x26>
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e079      	b.n	8003396 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_UART_Transmit+0x38>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e072      	b.n	8003396 <HAL_UART_Transmit+0x11e>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2221      	movs	r2, #33	; 0x21
 80032c2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80032c4:	f7fd fda4 	bl	8000e10 <HAL_GetTick>
 80032c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	88fa      	ldrh	r2, [r7, #6]
 80032ce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	88fa      	ldrh	r2, [r7, #6]
 80032d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e2:	d108      	bne.n	80032f6 <HAL_UART_Transmit+0x7e>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d104      	bne.n	80032f6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	61bb      	str	r3, [r7, #24]
 80032f4:	e003      	b.n	80032fe <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003306:	e02d      	b.n	8003364 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2200      	movs	r2, #0
 8003310:	2180      	movs	r1, #128	; 0x80
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 fb5f 	bl	80039d6 <UART_WaitOnFlagUntilTimeout>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e039      	b.n	8003396 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10b      	bne.n	8003340 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	881a      	ldrh	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003334:	b292      	uxth	r2, r2
 8003336:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	3302      	adds	r3, #2
 800333c:	61bb      	str	r3, [r7, #24]
 800333e:	e008      	b.n	8003352 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	781a      	ldrb	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	b292      	uxth	r2, r2
 800334a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	3301      	adds	r3, #1
 8003350:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1cb      	bne.n	8003308 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2200      	movs	r2, #0
 8003378:	2140      	movs	r1, #64	; 0x40
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 fb2b 	bl	80039d6 <UART_WaitOnFlagUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e005      	b.n	8003396 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2220      	movs	r2, #32
 800338e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	e000      	b.n	8003396 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003394:	2302      	movs	r3, #2
  }
}
 8003396:	4618      	mov	r0, r3
 8003398:	3720      	adds	r7, #32
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033a0:	b5b0      	push	{r4, r5, r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4baa      	ldr	r3, [pc, #680]	; (8003674 <UART_SetConfig+0x2d4>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6812      	ldr	r2, [r2, #0]
 80033d2:	69f9      	ldr	r1, [r7, #28]
 80033d4:	430b      	orrs	r3, r1
 80033d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a9f      	ldr	r2, [pc, #636]	; (8003678 <UART_SetConfig+0x2d8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d004      	beq.n	8003408 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	4313      	orrs	r3, r2
 8003406:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69fa      	ldr	r2, [r7, #28]
 8003418:	430a      	orrs	r2, r1
 800341a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a96      	ldr	r2, [pc, #600]	; (800367c <UART_SetConfig+0x2dc>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d121      	bne.n	800346a <UART_SetConfig+0xca>
 8003426:	4b96      	ldr	r3, [pc, #600]	; (8003680 <UART_SetConfig+0x2e0>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	2b03      	cmp	r3, #3
 8003432:	d817      	bhi.n	8003464 <UART_SetConfig+0xc4>
 8003434:	a201      	add	r2, pc, #4	; (adr r2, 800343c <UART_SetConfig+0x9c>)
 8003436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343a:	bf00      	nop
 800343c:	0800344d 	.word	0x0800344d
 8003440:	08003459 	.word	0x08003459
 8003444:	08003453 	.word	0x08003453
 8003448:	0800345f 	.word	0x0800345f
 800344c:	2301      	movs	r3, #1
 800344e:	76fb      	strb	r3, [r7, #27]
 8003450:	e096      	b.n	8003580 <UART_SetConfig+0x1e0>
 8003452:	2302      	movs	r3, #2
 8003454:	76fb      	strb	r3, [r7, #27]
 8003456:	e093      	b.n	8003580 <UART_SetConfig+0x1e0>
 8003458:	2304      	movs	r3, #4
 800345a:	76fb      	strb	r3, [r7, #27]
 800345c:	e090      	b.n	8003580 <UART_SetConfig+0x1e0>
 800345e:	2308      	movs	r3, #8
 8003460:	76fb      	strb	r3, [r7, #27]
 8003462:	e08d      	b.n	8003580 <UART_SetConfig+0x1e0>
 8003464:	2310      	movs	r3, #16
 8003466:	76fb      	strb	r3, [r7, #27]
 8003468:	e08a      	b.n	8003580 <UART_SetConfig+0x1e0>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a85      	ldr	r2, [pc, #532]	; (8003684 <UART_SetConfig+0x2e4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d132      	bne.n	80034da <UART_SetConfig+0x13a>
 8003474:	4b82      	ldr	r3, [pc, #520]	; (8003680 <UART_SetConfig+0x2e0>)
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b0c      	cmp	r3, #12
 8003480:	d828      	bhi.n	80034d4 <UART_SetConfig+0x134>
 8003482:	a201      	add	r2, pc, #4	; (adr r2, 8003488 <UART_SetConfig+0xe8>)
 8003484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003488:	080034bd 	.word	0x080034bd
 800348c:	080034d5 	.word	0x080034d5
 8003490:	080034d5 	.word	0x080034d5
 8003494:	080034d5 	.word	0x080034d5
 8003498:	080034c9 	.word	0x080034c9
 800349c:	080034d5 	.word	0x080034d5
 80034a0:	080034d5 	.word	0x080034d5
 80034a4:	080034d5 	.word	0x080034d5
 80034a8:	080034c3 	.word	0x080034c3
 80034ac:	080034d5 	.word	0x080034d5
 80034b0:	080034d5 	.word	0x080034d5
 80034b4:	080034d5 	.word	0x080034d5
 80034b8:	080034cf 	.word	0x080034cf
 80034bc:	2300      	movs	r3, #0
 80034be:	76fb      	strb	r3, [r7, #27]
 80034c0:	e05e      	b.n	8003580 <UART_SetConfig+0x1e0>
 80034c2:	2302      	movs	r3, #2
 80034c4:	76fb      	strb	r3, [r7, #27]
 80034c6:	e05b      	b.n	8003580 <UART_SetConfig+0x1e0>
 80034c8:	2304      	movs	r3, #4
 80034ca:	76fb      	strb	r3, [r7, #27]
 80034cc:	e058      	b.n	8003580 <UART_SetConfig+0x1e0>
 80034ce:	2308      	movs	r3, #8
 80034d0:	76fb      	strb	r3, [r7, #27]
 80034d2:	e055      	b.n	8003580 <UART_SetConfig+0x1e0>
 80034d4:	2310      	movs	r3, #16
 80034d6:	76fb      	strb	r3, [r7, #27]
 80034d8:	e052      	b.n	8003580 <UART_SetConfig+0x1e0>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a6a      	ldr	r2, [pc, #424]	; (8003688 <UART_SetConfig+0x2e8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d120      	bne.n	8003526 <UART_SetConfig+0x186>
 80034e4:	4b66      	ldr	r3, [pc, #408]	; (8003680 <UART_SetConfig+0x2e0>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034ee:	2b30      	cmp	r3, #48	; 0x30
 80034f0:	d013      	beq.n	800351a <UART_SetConfig+0x17a>
 80034f2:	2b30      	cmp	r3, #48	; 0x30
 80034f4:	d814      	bhi.n	8003520 <UART_SetConfig+0x180>
 80034f6:	2b20      	cmp	r3, #32
 80034f8:	d009      	beq.n	800350e <UART_SetConfig+0x16e>
 80034fa:	2b20      	cmp	r3, #32
 80034fc:	d810      	bhi.n	8003520 <UART_SetConfig+0x180>
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <UART_SetConfig+0x168>
 8003502:	2b10      	cmp	r3, #16
 8003504:	d006      	beq.n	8003514 <UART_SetConfig+0x174>
 8003506:	e00b      	b.n	8003520 <UART_SetConfig+0x180>
 8003508:	2300      	movs	r3, #0
 800350a:	76fb      	strb	r3, [r7, #27]
 800350c:	e038      	b.n	8003580 <UART_SetConfig+0x1e0>
 800350e:	2302      	movs	r3, #2
 8003510:	76fb      	strb	r3, [r7, #27]
 8003512:	e035      	b.n	8003580 <UART_SetConfig+0x1e0>
 8003514:	2304      	movs	r3, #4
 8003516:	76fb      	strb	r3, [r7, #27]
 8003518:	e032      	b.n	8003580 <UART_SetConfig+0x1e0>
 800351a:	2308      	movs	r3, #8
 800351c:	76fb      	strb	r3, [r7, #27]
 800351e:	e02f      	b.n	8003580 <UART_SetConfig+0x1e0>
 8003520:	2310      	movs	r3, #16
 8003522:	76fb      	strb	r3, [r7, #27]
 8003524:	e02c      	b.n	8003580 <UART_SetConfig+0x1e0>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a53      	ldr	r2, [pc, #332]	; (8003678 <UART_SetConfig+0x2d8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d125      	bne.n	800357c <UART_SetConfig+0x1dc>
 8003530:	4b53      	ldr	r3, [pc, #332]	; (8003680 <UART_SetConfig+0x2e0>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003536:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800353a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800353e:	d017      	beq.n	8003570 <UART_SetConfig+0x1d0>
 8003540:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003544:	d817      	bhi.n	8003576 <UART_SetConfig+0x1d6>
 8003546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800354a:	d00b      	beq.n	8003564 <UART_SetConfig+0x1c4>
 800354c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003550:	d811      	bhi.n	8003576 <UART_SetConfig+0x1d6>
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <UART_SetConfig+0x1be>
 8003556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355a:	d006      	beq.n	800356a <UART_SetConfig+0x1ca>
 800355c:	e00b      	b.n	8003576 <UART_SetConfig+0x1d6>
 800355e:	2300      	movs	r3, #0
 8003560:	76fb      	strb	r3, [r7, #27]
 8003562:	e00d      	b.n	8003580 <UART_SetConfig+0x1e0>
 8003564:	2302      	movs	r3, #2
 8003566:	76fb      	strb	r3, [r7, #27]
 8003568:	e00a      	b.n	8003580 <UART_SetConfig+0x1e0>
 800356a:	2304      	movs	r3, #4
 800356c:	76fb      	strb	r3, [r7, #27]
 800356e:	e007      	b.n	8003580 <UART_SetConfig+0x1e0>
 8003570:	2308      	movs	r3, #8
 8003572:	76fb      	strb	r3, [r7, #27]
 8003574:	e004      	b.n	8003580 <UART_SetConfig+0x1e0>
 8003576:	2310      	movs	r3, #16
 8003578:	76fb      	strb	r3, [r7, #27]
 800357a:	e001      	b.n	8003580 <UART_SetConfig+0x1e0>
 800357c:	2310      	movs	r3, #16
 800357e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a3c      	ldr	r2, [pc, #240]	; (8003678 <UART_SetConfig+0x2d8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	f040 8082 	bne.w	8003690 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800358c:	7efb      	ldrb	r3, [r7, #27]
 800358e:	2b08      	cmp	r3, #8
 8003590:	d823      	bhi.n	80035da <UART_SetConfig+0x23a>
 8003592:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <UART_SetConfig+0x1f8>)
 8003594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003598:	080035bd 	.word	0x080035bd
 800359c:	080035db 	.word	0x080035db
 80035a0:	080035c5 	.word	0x080035c5
 80035a4:	080035db 	.word	0x080035db
 80035a8:	080035cb 	.word	0x080035cb
 80035ac:	080035db 	.word	0x080035db
 80035b0:	080035db 	.word	0x080035db
 80035b4:	080035db 	.word	0x080035db
 80035b8:	080035d3 	.word	0x080035d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035bc:	f7fe fcf4 	bl	8001fa8 <HAL_RCC_GetPCLK1Freq>
 80035c0:	6178      	str	r0, [r7, #20]
        break;
 80035c2:	e00f      	b.n	80035e4 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035c4:	4b31      	ldr	r3, [pc, #196]	; (800368c <UART_SetConfig+0x2ec>)
 80035c6:	617b      	str	r3, [r7, #20]
        break;
 80035c8:	e00c      	b.n	80035e4 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ca:	f7fe fc55 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 80035ce:	6178      	str	r0, [r7, #20]
        break;
 80035d0:	e008      	b.n	80035e4 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035d6:	617b      	str	r3, [r7, #20]
        break;
 80035d8:	e004      	b.n	80035e4 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	76bb      	strb	r3, [r7, #26]
        break;
 80035e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 8100 	beq.w	80037ec <UART_SetConfig+0x44c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	4413      	add	r3, r2
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d305      	bcc.n	8003608 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	429a      	cmp	r2, r3
 8003606:	d902      	bls.n	800360e <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	76bb      	strb	r3, [r7, #26]
 800360c:	e0ee      	b.n	80037ec <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	4618      	mov	r0, r3
 8003612:	f04f 0100 	mov.w	r1, #0
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	020b      	lsls	r3, r1, #8
 8003620:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003624:	0202      	lsls	r2, r0, #8
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	6849      	ldr	r1, [r1, #4]
 800362a:	0849      	lsrs	r1, r1, #1
 800362c:	4608      	mov	r0, r1
 800362e:	f04f 0100 	mov.w	r1, #0
 8003632:	1814      	adds	r4, r2, r0
 8003634:	eb43 0501 	adc.w	r5, r3, r1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	461a      	mov	r2, r3
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	4620      	mov	r0, r4
 8003644:	4629      	mov	r1, r5
 8003646:	f7fc fe13 	bl	8000270 <__aeabi_uldivmod>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4613      	mov	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003658:	d308      	bcc.n	800366c <UART_SetConfig+0x2cc>
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003660:	d204      	bcs.n	800366c <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	60da      	str	r2, [r3, #12]
 800366a:	e0bf      	b.n	80037ec <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	76bb      	strb	r3, [r7, #26]
 8003670:	e0bc      	b.n	80037ec <UART_SetConfig+0x44c>
 8003672:	bf00      	nop
 8003674:	efff69f3 	.word	0xefff69f3
 8003678:	40008000 	.word	0x40008000
 800367c:	40013800 	.word	0x40013800
 8003680:	40021000 	.word	0x40021000
 8003684:	40004400 	.word	0x40004400
 8003688:	40004800 	.word	0x40004800
 800368c:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003698:	d15c      	bne.n	8003754 <UART_SetConfig+0x3b4>
  {
    switch (clocksource)
 800369a:	7efb      	ldrb	r3, [r7, #27]
 800369c:	2b08      	cmp	r3, #8
 800369e:	d828      	bhi.n	80036f2 <UART_SetConfig+0x352>
 80036a0:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <UART_SetConfig+0x308>)
 80036a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a6:	bf00      	nop
 80036a8:	080036cd 	.word	0x080036cd
 80036ac:	080036d5 	.word	0x080036d5
 80036b0:	080036dd 	.word	0x080036dd
 80036b4:	080036f3 	.word	0x080036f3
 80036b8:	080036e3 	.word	0x080036e3
 80036bc:	080036f3 	.word	0x080036f3
 80036c0:	080036f3 	.word	0x080036f3
 80036c4:	080036f3 	.word	0x080036f3
 80036c8:	080036eb 	.word	0x080036eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036cc:	f7fe fc6c 	bl	8001fa8 <HAL_RCC_GetPCLK1Freq>
 80036d0:	6178      	str	r0, [r7, #20]
        break;
 80036d2:	e013      	b.n	80036fc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036d4:	f7fe fc7e 	bl	8001fd4 <HAL_RCC_GetPCLK2Freq>
 80036d8:	6178      	str	r0, [r7, #20]
        break;
 80036da:	e00f      	b.n	80036fc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036dc:	4b49      	ldr	r3, [pc, #292]	; (8003804 <UART_SetConfig+0x464>)
 80036de:	617b      	str	r3, [r7, #20]
        break;
 80036e0:	e00c      	b.n	80036fc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036e2:	f7fe fbc9 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 80036e6:	6178      	str	r0, [r7, #20]
        break;
 80036e8:	e008      	b.n	80036fc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ee:	617b      	str	r3, [r7, #20]
        break;
 80036f0:	e004      	b.n	80036fc <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	76bb      	strb	r3, [r7, #26]
        break;
 80036fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d074      	beq.n	80037ec <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	005a      	lsls	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	085b      	lsrs	r3, r3, #1
 800370c:	441a      	add	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	fbb2 f3f3 	udiv	r3, r2, r3
 8003716:	b29b      	uxth	r3, r3
 8003718:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2b0f      	cmp	r3, #15
 800371e:	d916      	bls.n	800374e <UART_SetConfig+0x3ae>
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003726:	d212      	bcs.n	800374e <UART_SetConfig+0x3ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	b29b      	uxth	r3, r3
 800372c:	f023 030f 	bic.w	r3, r3, #15
 8003730:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	085b      	lsrs	r3, r3, #1
 8003736:	b29b      	uxth	r3, r3
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	b29a      	uxth	r2, r3
 800373e:	89fb      	ldrh	r3, [r7, #14]
 8003740:	4313      	orrs	r3, r2
 8003742:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	89fa      	ldrh	r2, [r7, #14]
 800374a:	60da      	str	r2, [r3, #12]
 800374c:	e04e      	b.n	80037ec <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	76bb      	strb	r3, [r7, #26]
 8003752:	e04b      	b.n	80037ec <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003754:	7efb      	ldrb	r3, [r7, #27]
 8003756:	2b08      	cmp	r3, #8
 8003758:	d827      	bhi.n	80037aa <UART_SetConfig+0x40a>
 800375a:	a201      	add	r2, pc, #4	; (adr r2, 8003760 <UART_SetConfig+0x3c0>)
 800375c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003760:	08003785 	.word	0x08003785
 8003764:	0800378d 	.word	0x0800378d
 8003768:	08003795 	.word	0x08003795
 800376c:	080037ab 	.word	0x080037ab
 8003770:	0800379b 	.word	0x0800379b
 8003774:	080037ab 	.word	0x080037ab
 8003778:	080037ab 	.word	0x080037ab
 800377c:	080037ab 	.word	0x080037ab
 8003780:	080037a3 	.word	0x080037a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003784:	f7fe fc10 	bl	8001fa8 <HAL_RCC_GetPCLK1Freq>
 8003788:	6178      	str	r0, [r7, #20]
        break;
 800378a:	e013      	b.n	80037b4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800378c:	f7fe fc22 	bl	8001fd4 <HAL_RCC_GetPCLK2Freq>
 8003790:	6178      	str	r0, [r7, #20]
        break;
 8003792:	e00f      	b.n	80037b4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003794:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <UART_SetConfig+0x464>)
 8003796:	617b      	str	r3, [r7, #20]
        break;
 8003798:	e00c      	b.n	80037b4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800379a:	f7fe fb6d 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 800379e:	6178      	str	r0, [r7, #20]
        break;
 80037a0:	e008      	b.n	80037b4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037a6:	617b      	str	r3, [r7, #20]
        break;
 80037a8:	e004      	b.n	80037b4 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	76bb      	strb	r3, [r7, #26]
        break;
 80037b2:	bf00      	nop
    }

    if (pclk != 0U)
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d018      	beq.n	80037ec <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	085a      	lsrs	r2, r3, #1
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	441a      	add	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	2b0f      	cmp	r3, #15
 80037d4:	d908      	bls.n	80037e8 <UART_SetConfig+0x448>
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037dc:	d204      	bcs.n	80037e8 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = usartdiv;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	60da      	str	r2, [r3, #12]
 80037e6:	e001      	b.n	80037ec <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80037f8:	7ebb      	ldrb	r3, [r7, #26]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3720      	adds	r7, #32
 80037fe:	46bd      	mov	sp, r7
 8003800:	bdb0      	pop	{r4, r5, r7, pc}
 8003802:	bf00      	nop
 8003804:	00f42400 	.word	0x00f42400

08003808 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d01a      	beq.n	800391e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003906:	d10a      	bne.n	800391e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00a      	beq.n	8003940 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	605a      	str	r2, [r3, #4]
  }
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af02      	add	r7, sp, #8
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800395a:	f7fd fa59 	bl	8000e10 <HAL_GetTick>
 800395e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b08      	cmp	r3, #8
 800396c:	d10e      	bne.n	800398c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800396e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f82a 	bl	80039d6 <UART_WaitOnFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e020      	b.n	80039ce <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b04      	cmp	r3, #4
 8003998:	d10e      	bne.n	80039b8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800399a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f814 	bl	80039d6 <UART_WaitOnFlagUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e00a      	b.n	80039ce <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2220      	movs	r2, #32
 80039c2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	4613      	mov	r3, r2
 80039e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039e6:	e05d      	b.n	8003aa4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ee:	d059      	beq.n	8003aa4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f0:	f7fd fa0e 	bl	8000e10 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d302      	bcc.n	8003a06 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d11b      	bne.n	8003a3e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a14:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0201 	bic.w	r2, r2, #1
 8003a24:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e042      	b.n	8003ac4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d02b      	beq.n	8003aa4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a5a:	d123      	bne.n	8003aa4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a74:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0201 	bic.w	r2, r2, #1
 8003a84:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e00f      	b.n	8003ac4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	69da      	ldr	r2, [r3, #28]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	4013      	ands	r3, r2
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2301      	moveq	r3, #1
 8003ab6:	2300      	movne	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	461a      	mov	r2, r3
 8003abc:	79fb      	ldrb	r3, [r7, #7]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d092      	beq.n	80039e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <__errno>:
 8003acc:	4b01      	ldr	r3, [pc, #4]	; (8003ad4 <__errno+0x8>)
 8003ace:	6818      	ldr	r0, [r3, #0]
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	2000000c 	.word	0x2000000c

08003ad8 <__libc_init_array>:
 8003ad8:	b570      	push	{r4, r5, r6, lr}
 8003ada:	4d0d      	ldr	r5, [pc, #52]	; (8003b10 <__libc_init_array+0x38>)
 8003adc:	4c0d      	ldr	r4, [pc, #52]	; (8003b14 <__libc_init_array+0x3c>)
 8003ade:	1b64      	subs	r4, r4, r5
 8003ae0:	10a4      	asrs	r4, r4, #2
 8003ae2:	2600      	movs	r6, #0
 8003ae4:	42a6      	cmp	r6, r4
 8003ae6:	d109      	bne.n	8003afc <__libc_init_array+0x24>
 8003ae8:	4d0b      	ldr	r5, [pc, #44]	; (8003b18 <__libc_init_array+0x40>)
 8003aea:	4c0c      	ldr	r4, [pc, #48]	; (8003b1c <__libc_init_array+0x44>)
 8003aec:	f000 ffec 	bl	8004ac8 <_init>
 8003af0:	1b64      	subs	r4, r4, r5
 8003af2:	10a4      	asrs	r4, r4, #2
 8003af4:	2600      	movs	r6, #0
 8003af6:	42a6      	cmp	r6, r4
 8003af8:	d105      	bne.n	8003b06 <__libc_init_array+0x2e>
 8003afa:	bd70      	pop	{r4, r5, r6, pc}
 8003afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b00:	4798      	blx	r3
 8003b02:	3601      	adds	r6, #1
 8003b04:	e7ee      	b.n	8003ae4 <__libc_init_array+0xc>
 8003b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b0a:	4798      	blx	r3
 8003b0c:	3601      	adds	r6, #1
 8003b0e:	e7f2      	b.n	8003af6 <__libc_init_array+0x1e>
 8003b10:	08004c08 	.word	0x08004c08
 8003b14:	08004c08 	.word	0x08004c08
 8003b18:	08004c08 	.word	0x08004c08
 8003b1c:	08004c0c 	.word	0x08004c0c

08003b20 <memset>:
 8003b20:	4402      	add	r2, r0
 8003b22:	4603      	mov	r3, r0
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d100      	bne.n	8003b2a <memset+0xa>
 8003b28:	4770      	bx	lr
 8003b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b2e:	e7f9      	b.n	8003b24 <memset+0x4>

08003b30 <iprintf>:
 8003b30:	b40f      	push	{r0, r1, r2, r3}
 8003b32:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <iprintf+0x2c>)
 8003b34:	b513      	push	{r0, r1, r4, lr}
 8003b36:	681c      	ldr	r4, [r3, #0]
 8003b38:	b124      	cbz	r4, 8003b44 <iprintf+0x14>
 8003b3a:	69a3      	ldr	r3, [r4, #24]
 8003b3c:	b913      	cbnz	r3, 8003b44 <iprintf+0x14>
 8003b3e:	4620      	mov	r0, r4
 8003b40:	f000 fa5e 	bl	8004000 <__sinit>
 8003b44:	ab05      	add	r3, sp, #20
 8003b46:	9a04      	ldr	r2, [sp, #16]
 8003b48:	68a1      	ldr	r1, [r4, #8]
 8003b4a:	9301      	str	r3, [sp, #4]
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	f000 fc2f 	bl	80043b0 <_vfiprintf_r>
 8003b52:	b002      	add	sp, #8
 8003b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b58:	b004      	add	sp, #16
 8003b5a:	4770      	bx	lr
 8003b5c:	2000000c 	.word	0x2000000c

08003b60 <_puts_r>:
 8003b60:	b570      	push	{r4, r5, r6, lr}
 8003b62:	460e      	mov	r6, r1
 8003b64:	4605      	mov	r5, r0
 8003b66:	b118      	cbz	r0, 8003b70 <_puts_r+0x10>
 8003b68:	6983      	ldr	r3, [r0, #24]
 8003b6a:	b90b      	cbnz	r3, 8003b70 <_puts_r+0x10>
 8003b6c:	f000 fa48 	bl	8004000 <__sinit>
 8003b70:	69ab      	ldr	r3, [r5, #24]
 8003b72:	68ac      	ldr	r4, [r5, #8]
 8003b74:	b913      	cbnz	r3, 8003b7c <_puts_r+0x1c>
 8003b76:	4628      	mov	r0, r5
 8003b78:	f000 fa42 	bl	8004000 <__sinit>
 8003b7c:	4b2c      	ldr	r3, [pc, #176]	; (8003c30 <_puts_r+0xd0>)
 8003b7e:	429c      	cmp	r4, r3
 8003b80:	d120      	bne.n	8003bc4 <_puts_r+0x64>
 8003b82:	686c      	ldr	r4, [r5, #4]
 8003b84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b86:	07db      	lsls	r3, r3, #31
 8003b88:	d405      	bmi.n	8003b96 <_puts_r+0x36>
 8003b8a:	89a3      	ldrh	r3, [r4, #12]
 8003b8c:	0598      	lsls	r0, r3, #22
 8003b8e:	d402      	bmi.n	8003b96 <_puts_r+0x36>
 8003b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b92:	f000 fad3 	bl	800413c <__retarget_lock_acquire_recursive>
 8003b96:	89a3      	ldrh	r3, [r4, #12]
 8003b98:	0719      	lsls	r1, r3, #28
 8003b9a:	d51d      	bpl.n	8003bd8 <_puts_r+0x78>
 8003b9c:	6923      	ldr	r3, [r4, #16]
 8003b9e:	b1db      	cbz	r3, 8003bd8 <_puts_r+0x78>
 8003ba0:	3e01      	subs	r6, #1
 8003ba2:	68a3      	ldr	r3, [r4, #8]
 8003ba4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	60a3      	str	r3, [r4, #8]
 8003bac:	bb39      	cbnz	r1, 8003bfe <_puts_r+0x9e>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	da38      	bge.n	8003c24 <_puts_r+0xc4>
 8003bb2:	4622      	mov	r2, r4
 8003bb4:	210a      	movs	r1, #10
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	f000 f848 	bl	8003c4c <__swbuf_r>
 8003bbc:	3001      	adds	r0, #1
 8003bbe:	d011      	beq.n	8003be4 <_puts_r+0x84>
 8003bc0:	250a      	movs	r5, #10
 8003bc2:	e011      	b.n	8003be8 <_puts_r+0x88>
 8003bc4:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <_puts_r+0xd4>)
 8003bc6:	429c      	cmp	r4, r3
 8003bc8:	d101      	bne.n	8003bce <_puts_r+0x6e>
 8003bca:	68ac      	ldr	r4, [r5, #8]
 8003bcc:	e7da      	b.n	8003b84 <_puts_r+0x24>
 8003bce:	4b1a      	ldr	r3, [pc, #104]	; (8003c38 <_puts_r+0xd8>)
 8003bd0:	429c      	cmp	r4, r3
 8003bd2:	bf08      	it	eq
 8003bd4:	68ec      	ldreq	r4, [r5, #12]
 8003bd6:	e7d5      	b.n	8003b84 <_puts_r+0x24>
 8003bd8:	4621      	mov	r1, r4
 8003bda:	4628      	mov	r0, r5
 8003bdc:	f000 f888 	bl	8003cf0 <__swsetup_r>
 8003be0:	2800      	cmp	r0, #0
 8003be2:	d0dd      	beq.n	8003ba0 <_puts_r+0x40>
 8003be4:	f04f 35ff 	mov.w	r5, #4294967295
 8003be8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bea:	07da      	lsls	r2, r3, #31
 8003bec:	d405      	bmi.n	8003bfa <_puts_r+0x9a>
 8003bee:	89a3      	ldrh	r3, [r4, #12]
 8003bf0:	059b      	lsls	r3, r3, #22
 8003bf2:	d402      	bmi.n	8003bfa <_puts_r+0x9a>
 8003bf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bf6:	f000 faa2 	bl	800413e <__retarget_lock_release_recursive>
 8003bfa:	4628      	mov	r0, r5
 8003bfc:	bd70      	pop	{r4, r5, r6, pc}
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	da04      	bge.n	8003c0c <_puts_r+0xac>
 8003c02:	69a2      	ldr	r2, [r4, #24]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	dc06      	bgt.n	8003c16 <_puts_r+0xb6>
 8003c08:	290a      	cmp	r1, #10
 8003c0a:	d004      	beq.n	8003c16 <_puts_r+0xb6>
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	6022      	str	r2, [r4, #0]
 8003c12:	7019      	strb	r1, [r3, #0]
 8003c14:	e7c5      	b.n	8003ba2 <_puts_r+0x42>
 8003c16:	4622      	mov	r2, r4
 8003c18:	4628      	mov	r0, r5
 8003c1a:	f000 f817 	bl	8003c4c <__swbuf_r>
 8003c1e:	3001      	adds	r0, #1
 8003c20:	d1bf      	bne.n	8003ba2 <_puts_r+0x42>
 8003c22:	e7df      	b.n	8003be4 <_puts_r+0x84>
 8003c24:	6823      	ldr	r3, [r4, #0]
 8003c26:	250a      	movs	r5, #10
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	6022      	str	r2, [r4, #0]
 8003c2c:	701d      	strb	r5, [r3, #0]
 8003c2e:	e7db      	b.n	8003be8 <_puts_r+0x88>
 8003c30:	08004b8c 	.word	0x08004b8c
 8003c34:	08004bac 	.word	0x08004bac
 8003c38:	08004b6c 	.word	0x08004b6c

08003c3c <puts>:
 8003c3c:	4b02      	ldr	r3, [pc, #8]	; (8003c48 <puts+0xc>)
 8003c3e:	4601      	mov	r1, r0
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	f7ff bf8d 	b.w	8003b60 <_puts_r>
 8003c46:	bf00      	nop
 8003c48:	2000000c 	.word	0x2000000c

08003c4c <__swbuf_r>:
 8003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4e:	460e      	mov	r6, r1
 8003c50:	4614      	mov	r4, r2
 8003c52:	4605      	mov	r5, r0
 8003c54:	b118      	cbz	r0, 8003c5e <__swbuf_r+0x12>
 8003c56:	6983      	ldr	r3, [r0, #24]
 8003c58:	b90b      	cbnz	r3, 8003c5e <__swbuf_r+0x12>
 8003c5a:	f000 f9d1 	bl	8004000 <__sinit>
 8003c5e:	4b21      	ldr	r3, [pc, #132]	; (8003ce4 <__swbuf_r+0x98>)
 8003c60:	429c      	cmp	r4, r3
 8003c62:	d12b      	bne.n	8003cbc <__swbuf_r+0x70>
 8003c64:	686c      	ldr	r4, [r5, #4]
 8003c66:	69a3      	ldr	r3, [r4, #24]
 8003c68:	60a3      	str	r3, [r4, #8]
 8003c6a:	89a3      	ldrh	r3, [r4, #12]
 8003c6c:	071a      	lsls	r2, r3, #28
 8003c6e:	d52f      	bpl.n	8003cd0 <__swbuf_r+0x84>
 8003c70:	6923      	ldr	r3, [r4, #16]
 8003c72:	b36b      	cbz	r3, 8003cd0 <__swbuf_r+0x84>
 8003c74:	6923      	ldr	r3, [r4, #16]
 8003c76:	6820      	ldr	r0, [r4, #0]
 8003c78:	1ac0      	subs	r0, r0, r3
 8003c7a:	6963      	ldr	r3, [r4, #20]
 8003c7c:	b2f6      	uxtb	r6, r6
 8003c7e:	4283      	cmp	r3, r0
 8003c80:	4637      	mov	r7, r6
 8003c82:	dc04      	bgt.n	8003c8e <__swbuf_r+0x42>
 8003c84:	4621      	mov	r1, r4
 8003c86:	4628      	mov	r0, r5
 8003c88:	f000 f926 	bl	8003ed8 <_fflush_r>
 8003c8c:	bb30      	cbnz	r0, 8003cdc <__swbuf_r+0x90>
 8003c8e:	68a3      	ldr	r3, [r4, #8]
 8003c90:	3b01      	subs	r3, #1
 8003c92:	60a3      	str	r3, [r4, #8]
 8003c94:	6823      	ldr	r3, [r4, #0]
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	6022      	str	r2, [r4, #0]
 8003c9a:	701e      	strb	r6, [r3, #0]
 8003c9c:	6963      	ldr	r3, [r4, #20]
 8003c9e:	3001      	adds	r0, #1
 8003ca0:	4283      	cmp	r3, r0
 8003ca2:	d004      	beq.n	8003cae <__swbuf_r+0x62>
 8003ca4:	89a3      	ldrh	r3, [r4, #12]
 8003ca6:	07db      	lsls	r3, r3, #31
 8003ca8:	d506      	bpl.n	8003cb8 <__swbuf_r+0x6c>
 8003caa:	2e0a      	cmp	r6, #10
 8003cac:	d104      	bne.n	8003cb8 <__swbuf_r+0x6c>
 8003cae:	4621      	mov	r1, r4
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	f000 f911 	bl	8003ed8 <_fflush_r>
 8003cb6:	b988      	cbnz	r0, 8003cdc <__swbuf_r+0x90>
 8003cb8:	4638      	mov	r0, r7
 8003cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cbc:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <__swbuf_r+0x9c>)
 8003cbe:	429c      	cmp	r4, r3
 8003cc0:	d101      	bne.n	8003cc6 <__swbuf_r+0x7a>
 8003cc2:	68ac      	ldr	r4, [r5, #8]
 8003cc4:	e7cf      	b.n	8003c66 <__swbuf_r+0x1a>
 8003cc6:	4b09      	ldr	r3, [pc, #36]	; (8003cec <__swbuf_r+0xa0>)
 8003cc8:	429c      	cmp	r4, r3
 8003cca:	bf08      	it	eq
 8003ccc:	68ec      	ldreq	r4, [r5, #12]
 8003cce:	e7ca      	b.n	8003c66 <__swbuf_r+0x1a>
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	f000 f80c 	bl	8003cf0 <__swsetup_r>
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	d0cb      	beq.n	8003c74 <__swbuf_r+0x28>
 8003cdc:	f04f 37ff 	mov.w	r7, #4294967295
 8003ce0:	e7ea      	b.n	8003cb8 <__swbuf_r+0x6c>
 8003ce2:	bf00      	nop
 8003ce4:	08004b8c 	.word	0x08004b8c
 8003ce8:	08004bac 	.word	0x08004bac
 8003cec:	08004b6c 	.word	0x08004b6c

08003cf0 <__swsetup_r>:
 8003cf0:	4b32      	ldr	r3, [pc, #200]	; (8003dbc <__swsetup_r+0xcc>)
 8003cf2:	b570      	push	{r4, r5, r6, lr}
 8003cf4:	681d      	ldr	r5, [r3, #0]
 8003cf6:	4606      	mov	r6, r0
 8003cf8:	460c      	mov	r4, r1
 8003cfa:	b125      	cbz	r5, 8003d06 <__swsetup_r+0x16>
 8003cfc:	69ab      	ldr	r3, [r5, #24]
 8003cfe:	b913      	cbnz	r3, 8003d06 <__swsetup_r+0x16>
 8003d00:	4628      	mov	r0, r5
 8003d02:	f000 f97d 	bl	8004000 <__sinit>
 8003d06:	4b2e      	ldr	r3, [pc, #184]	; (8003dc0 <__swsetup_r+0xd0>)
 8003d08:	429c      	cmp	r4, r3
 8003d0a:	d10f      	bne.n	8003d2c <__swsetup_r+0x3c>
 8003d0c:	686c      	ldr	r4, [r5, #4]
 8003d0e:	89a3      	ldrh	r3, [r4, #12]
 8003d10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d14:	0719      	lsls	r1, r3, #28
 8003d16:	d42c      	bmi.n	8003d72 <__swsetup_r+0x82>
 8003d18:	06dd      	lsls	r5, r3, #27
 8003d1a:	d411      	bmi.n	8003d40 <__swsetup_r+0x50>
 8003d1c:	2309      	movs	r3, #9
 8003d1e:	6033      	str	r3, [r6, #0]
 8003d20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003d24:	81a3      	strh	r3, [r4, #12]
 8003d26:	f04f 30ff 	mov.w	r0, #4294967295
 8003d2a:	e03e      	b.n	8003daa <__swsetup_r+0xba>
 8003d2c:	4b25      	ldr	r3, [pc, #148]	; (8003dc4 <__swsetup_r+0xd4>)
 8003d2e:	429c      	cmp	r4, r3
 8003d30:	d101      	bne.n	8003d36 <__swsetup_r+0x46>
 8003d32:	68ac      	ldr	r4, [r5, #8]
 8003d34:	e7eb      	b.n	8003d0e <__swsetup_r+0x1e>
 8003d36:	4b24      	ldr	r3, [pc, #144]	; (8003dc8 <__swsetup_r+0xd8>)
 8003d38:	429c      	cmp	r4, r3
 8003d3a:	bf08      	it	eq
 8003d3c:	68ec      	ldreq	r4, [r5, #12]
 8003d3e:	e7e6      	b.n	8003d0e <__swsetup_r+0x1e>
 8003d40:	0758      	lsls	r0, r3, #29
 8003d42:	d512      	bpl.n	8003d6a <__swsetup_r+0x7a>
 8003d44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d46:	b141      	cbz	r1, 8003d5a <__swsetup_r+0x6a>
 8003d48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d4c:	4299      	cmp	r1, r3
 8003d4e:	d002      	beq.n	8003d56 <__swsetup_r+0x66>
 8003d50:	4630      	mov	r0, r6
 8003d52:	f000 fa59 	bl	8004208 <_free_r>
 8003d56:	2300      	movs	r3, #0
 8003d58:	6363      	str	r3, [r4, #52]	; 0x34
 8003d5a:	89a3      	ldrh	r3, [r4, #12]
 8003d5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d60:	81a3      	strh	r3, [r4, #12]
 8003d62:	2300      	movs	r3, #0
 8003d64:	6063      	str	r3, [r4, #4]
 8003d66:	6923      	ldr	r3, [r4, #16]
 8003d68:	6023      	str	r3, [r4, #0]
 8003d6a:	89a3      	ldrh	r3, [r4, #12]
 8003d6c:	f043 0308 	orr.w	r3, r3, #8
 8003d70:	81a3      	strh	r3, [r4, #12]
 8003d72:	6923      	ldr	r3, [r4, #16]
 8003d74:	b94b      	cbnz	r3, 8003d8a <__swsetup_r+0x9a>
 8003d76:	89a3      	ldrh	r3, [r4, #12]
 8003d78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d80:	d003      	beq.n	8003d8a <__swsetup_r+0x9a>
 8003d82:	4621      	mov	r1, r4
 8003d84:	4630      	mov	r0, r6
 8003d86:	f000 f9ff 	bl	8004188 <__smakebuf_r>
 8003d8a:	89a0      	ldrh	r0, [r4, #12]
 8003d8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d90:	f010 0301 	ands.w	r3, r0, #1
 8003d94:	d00a      	beq.n	8003dac <__swsetup_r+0xbc>
 8003d96:	2300      	movs	r3, #0
 8003d98:	60a3      	str	r3, [r4, #8]
 8003d9a:	6963      	ldr	r3, [r4, #20]
 8003d9c:	425b      	negs	r3, r3
 8003d9e:	61a3      	str	r3, [r4, #24]
 8003da0:	6923      	ldr	r3, [r4, #16]
 8003da2:	b943      	cbnz	r3, 8003db6 <__swsetup_r+0xc6>
 8003da4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003da8:	d1ba      	bne.n	8003d20 <__swsetup_r+0x30>
 8003daa:	bd70      	pop	{r4, r5, r6, pc}
 8003dac:	0781      	lsls	r1, r0, #30
 8003dae:	bf58      	it	pl
 8003db0:	6963      	ldrpl	r3, [r4, #20]
 8003db2:	60a3      	str	r3, [r4, #8]
 8003db4:	e7f4      	b.n	8003da0 <__swsetup_r+0xb0>
 8003db6:	2000      	movs	r0, #0
 8003db8:	e7f7      	b.n	8003daa <__swsetup_r+0xba>
 8003dba:	bf00      	nop
 8003dbc:	2000000c 	.word	0x2000000c
 8003dc0:	08004b8c 	.word	0x08004b8c
 8003dc4:	08004bac 	.word	0x08004bac
 8003dc8:	08004b6c 	.word	0x08004b6c

08003dcc <__sflush_r>:
 8003dcc:	898a      	ldrh	r2, [r1, #12]
 8003dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dd2:	4605      	mov	r5, r0
 8003dd4:	0710      	lsls	r0, r2, #28
 8003dd6:	460c      	mov	r4, r1
 8003dd8:	d458      	bmi.n	8003e8c <__sflush_r+0xc0>
 8003dda:	684b      	ldr	r3, [r1, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	dc05      	bgt.n	8003dec <__sflush_r+0x20>
 8003de0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	dc02      	bgt.n	8003dec <__sflush_r+0x20>
 8003de6:	2000      	movs	r0, #0
 8003de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003dee:	2e00      	cmp	r6, #0
 8003df0:	d0f9      	beq.n	8003de6 <__sflush_r+0x1a>
 8003df2:	2300      	movs	r3, #0
 8003df4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003df8:	682f      	ldr	r7, [r5, #0]
 8003dfa:	602b      	str	r3, [r5, #0]
 8003dfc:	d032      	beq.n	8003e64 <__sflush_r+0x98>
 8003dfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e00:	89a3      	ldrh	r3, [r4, #12]
 8003e02:	075a      	lsls	r2, r3, #29
 8003e04:	d505      	bpl.n	8003e12 <__sflush_r+0x46>
 8003e06:	6863      	ldr	r3, [r4, #4]
 8003e08:	1ac0      	subs	r0, r0, r3
 8003e0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e0c:	b10b      	cbz	r3, 8003e12 <__sflush_r+0x46>
 8003e0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e10:	1ac0      	subs	r0, r0, r3
 8003e12:	2300      	movs	r3, #0
 8003e14:	4602      	mov	r2, r0
 8003e16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e18:	6a21      	ldr	r1, [r4, #32]
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	47b0      	blx	r6
 8003e1e:	1c43      	adds	r3, r0, #1
 8003e20:	89a3      	ldrh	r3, [r4, #12]
 8003e22:	d106      	bne.n	8003e32 <__sflush_r+0x66>
 8003e24:	6829      	ldr	r1, [r5, #0]
 8003e26:	291d      	cmp	r1, #29
 8003e28:	d82c      	bhi.n	8003e84 <__sflush_r+0xb8>
 8003e2a:	4a2a      	ldr	r2, [pc, #168]	; (8003ed4 <__sflush_r+0x108>)
 8003e2c:	40ca      	lsrs	r2, r1
 8003e2e:	07d6      	lsls	r6, r2, #31
 8003e30:	d528      	bpl.n	8003e84 <__sflush_r+0xb8>
 8003e32:	2200      	movs	r2, #0
 8003e34:	6062      	str	r2, [r4, #4]
 8003e36:	04d9      	lsls	r1, r3, #19
 8003e38:	6922      	ldr	r2, [r4, #16]
 8003e3a:	6022      	str	r2, [r4, #0]
 8003e3c:	d504      	bpl.n	8003e48 <__sflush_r+0x7c>
 8003e3e:	1c42      	adds	r2, r0, #1
 8003e40:	d101      	bne.n	8003e46 <__sflush_r+0x7a>
 8003e42:	682b      	ldr	r3, [r5, #0]
 8003e44:	b903      	cbnz	r3, 8003e48 <__sflush_r+0x7c>
 8003e46:	6560      	str	r0, [r4, #84]	; 0x54
 8003e48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e4a:	602f      	str	r7, [r5, #0]
 8003e4c:	2900      	cmp	r1, #0
 8003e4e:	d0ca      	beq.n	8003de6 <__sflush_r+0x1a>
 8003e50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e54:	4299      	cmp	r1, r3
 8003e56:	d002      	beq.n	8003e5e <__sflush_r+0x92>
 8003e58:	4628      	mov	r0, r5
 8003e5a:	f000 f9d5 	bl	8004208 <_free_r>
 8003e5e:	2000      	movs	r0, #0
 8003e60:	6360      	str	r0, [r4, #52]	; 0x34
 8003e62:	e7c1      	b.n	8003de8 <__sflush_r+0x1c>
 8003e64:	6a21      	ldr	r1, [r4, #32]
 8003e66:	2301      	movs	r3, #1
 8003e68:	4628      	mov	r0, r5
 8003e6a:	47b0      	blx	r6
 8003e6c:	1c41      	adds	r1, r0, #1
 8003e6e:	d1c7      	bne.n	8003e00 <__sflush_r+0x34>
 8003e70:	682b      	ldr	r3, [r5, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0c4      	beq.n	8003e00 <__sflush_r+0x34>
 8003e76:	2b1d      	cmp	r3, #29
 8003e78:	d001      	beq.n	8003e7e <__sflush_r+0xb2>
 8003e7a:	2b16      	cmp	r3, #22
 8003e7c:	d101      	bne.n	8003e82 <__sflush_r+0xb6>
 8003e7e:	602f      	str	r7, [r5, #0]
 8003e80:	e7b1      	b.n	8003de6 <__sflush_r+0x1a>
 8003e82:	89a3      	ldrh	r3, [r4, #12]
 8003e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e88:	81a3      	strh	r3, [r4, #12]
 8003e8a:	e7ad      	b.n	8003de8 <__sflush_r+0x1c>
 8003e8c:	690f      	ldr	r7, [r1, #16]
 8003e8e:	2f00      	cmp	r7, #0
 8003e90:	d0a9      	beq.n	8003de6 <__sflush_r+0x1a>
 8003e92:	0793      	lsls	r3, r2, #30
 8003e94:	680e      	ldr	r6, [r1, #0]
 8003e96:	bf08      	it	eq
 8003e98:	694b      	ldreq	r3, [r1, #20]
 8003e9a:	600f      	str	r7, [r1, #0]
 8003e9c:	bf18      	it	ne
 8003e9e:	2300      	movne	r3, #0
 8003ea0:	eba6 0807 	sub.w	r8, r6, r7
 8003ea4:	608b      	str	r3, [r1, #8]
 8003ea6:	f1b8 0f00 	cmp.w	r8, #0
 8003eaa:	dd9c      	ble.n	8003de6 <__sflush_r+0x1a>
 8003eac:	6a21      	ldr	r1, [r4, #32]
 8003eae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003eb0:	4643      	mov	r3, r8
 8003eb2:	463a      	mov	r2, r7
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	47b0      	blx	r6
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	dc06      	bgt.n	8003eca <__sflush_r+0xfe>
 8003ebc:	89a3      	ldrh	r3, [r4, #12]
 8003ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ec2:	81a3      	strh	r3, [r4, #12]
 8003ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec8:	e78e      	b.n	8003de8 <__sflush_r+0x1c>
 8003eca:	4407      	add	r7, r0
 8003ecc:	eba8 0800 	sub.w	r8, r8, r0
 8003ed0:	e7e9      	b.n	8003ea6 <__sflush_r+0xda>
 8003ed2:	bf00      	nop
 8003ed4:	20400001 	.word	0x20400001

08003ed8 <_fflush_r>:
 8003ed8:	b538      	push	{r3, r4, r5, lr}
 8003eda:	690b      	ldr	r3, [r1, #16]
 8003edc:	4605      	mov	r5, r0
 8003ede:	460c      	mov	r4, r1
 8003ee0:	b913      	cbnz	r3, 8003ee8 <_fflush_r+0x10>
 8003ee2:	2500      	movs	r5, #0
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}
 8003ee8:	b118      	cbz	r0, 8003ef2 <_fflush_r+0x1a>
 8003eea:	6983      	ldr	r3, [r0, #24]
 8003eec:	b90b      	cbnz	r3, 8003ef2 <_fflush_r+0x1a>
 8003eee:	f000 f887 	bl	8004000 <__sinit>
 8003ef2:	4b14      	ldr	r3, [pc, #80]	; (8003f44 <_fflush_r+0x6c>)
 8003ef4:	429c      	cmp	r4, r3
 8003ef6:	d11b      	bne.n	8003f30 <_fflush_r+0x58>
 8003ef8:	686c      	ldr	r4, [r5, #4]
 8003efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0ef      	beq.n	8003ee2 <_fflush_r+0xa>
 8003f02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f04:	07d0      	lsls	r0, r2, #31
 8003f06:	d404      	bmi.n	8003f12 <_fflush_r+0x3a>
 8003f08:	0599      	lsls	r1, r3, #22
 8003f0a:	d402      	bmi.n	8003f12 <_fflush_r+0x3a>
 8003f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f0e:	f000 f915 	bl	800413c <__retarget_lock_acquire_recursive>
 8003f12:	4628      	mov	r0, r5
 8003f14:	4621      	mov	r1, r4
 8003f16:	f7ff ff59 	bl	8003dcc <__sflush_r>
 8003f1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f1c:	07da      	lsls	r2, r3, #31
 8003f1e:	4605      	mov	r5, r0
 8003f20:	d4e0      	bmi.n	8003ee4 <_fflush_r+0xc>
 8003f22:	89a3      	ldrh	r3, [r4, #12]
 8003f24:	059b      	lsls	r3, r3, #22
 8003f26:	d4dd      	bmi.n	8003ee4 <_fflush_r+0xc>
 8003f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f2a:	f000 f908 	bl	800413e <__retarget_lock_release_recursive>
 8003f2e:	e7d9      	b.n	8003ee4 <_fflush_r+0xc>
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <_fflush_r+0x70>)
 8003f32:	429c      	cmp	r4, r3
 8003f34:	d101      	bne.n	8003f3a <_fflush_r+0x62>
 8003f36:	68ac      	ldr	r4, [r5, #8]
 8003f38:	e7df      	b.n	8003efa <_fflush_r+0x22>
 8003f3a:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <_fflush_r+0x74>)
 8003f3c:	429c      	cmp	r4, r3
 8003f3e:	bf08      	it	eq
 8003f40:	68ec      	ldreq	r4, [r5, #12]
 8003f42:	e7da      	b.n	8003efa <_fflush_r+0x22>
 8003f44:	08004b8c 	.word	0x08004b8c
 8003f48:	08004bac 	.word	0x08004bac
 8003f4c:	08004b6c 	.word	0x08004b6c

08003f50 <std>:
 8003f50:	2300      	movs	r3, #0
 8003f52:	b510      	push	{r4, lr}
 8003f54:	4604      	mov	r4, r0
 8003f56:	e9c0 3300 	strd	r3, r3, [r0]
 8003f5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f5e:	6083      	str	r3, [r0, #8]
 8003f60:	8181      	strh	r1, [r0, #12]
 8003f62:	6643      	str	r3, [r0, #100]	; 0x64
 8003f64:	81c2      	strh	r2, [r0, #14]
 8003f66:	6183      	str	r3, [r0, #24]
 8003f68:	4619      	mov	r1, r3
 8003f6a:	2208      	movs	r2, #8
 8003f6c:	305c      	adds	r0, #92	; 0x5c
 8003f6e:	f7ff fdd7 	bl	8003b20 <memset>
 8003f72:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <std+0x38>)
 8003f74:	6263      	str	r3, [r4, #36]	; 0x24
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <std+0x3c>)
 8003f78:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f7a:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <std+0x40>)
 8003f7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f7e:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <std+0x44>)
 8003f80:	6224      	str	r4, [r4, #32]
 8003f82:	6323      	str	r3, [r4, #48]	; 0x30
 8003f84:	bd10      	pop	{r4, pc}
 8003f86:	bf00      	nop
 8003f88:	08004959 	.word	0x08004959
 8003f8c:	0800497b 	.word	0x0800497b
 8003f90:	080049b3 	.word	0x080049b3
 8003f94:	080049d7 	.word	0x080049d7

08003f98 <_cleanup_r>:
 8003f98:	4901      	ldr	r1, [pc, #4]	; (8003fa0 <_cleanup_r+0x8>)
 8003f9a:	f000 b8af 	b.w	80040fc <_fwalk_reent>
 8003f9e:	bf00      	nop
 8003fa0:	08003ed9 	.word	0x08003ed9

08003fa4 <__sfmoreglue>:
 8003fa4:	b570      	push	{r4, r5, r6, lr}
 8003fa6:	1e4a      	subs	r2, r1, #1
 8003fa8:	2568      	movs	r5, #104	; 0x68
 8003faa:	4355      	muls	r5, r2
 8003fac:	460e      	mov	r6, r1
 8003fae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003fb2:	f000 f979 	bl	80042a8 <_malloc_r>
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	b140      	cbz	r0, 8003fcc <__sfmoreglue+0x28>
 8003fba:	2100      	movs	r1, #0
 8003fbc:	e9c0 1600 	strd	r1, r6, [r0]
 8003fc0:	300c      	adds	r0, #12
 8003fc2:	60a0      	str	r0, [r4, #8]
 8003fc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003fc8:	f7ff fdaa 	bl	8003b20 <memset>
 8003fcc:	4620      	mov	r0, r4
 8003fce:	bd70      	pop	{r4, r5, r6, pc}

08003fd0 <__sfp_lock_acquire>:
 8003fd0:	4801      	ldr	r0, [pc, #4]	; (8003fd8 <__sfp_lock_acquire+0x8>)
 8003fd2:	f000 b8b3 	b.w	800413c <__retarget_lock_acquire_recursive>
 8003fd6:	bf00      	nop
 8003fd8:	200001ec 	.word	0x200001ec

08003fdc <__sfp_lock_release>:
 8003fdc:	4801      	ldr	r0, [pc, #4]	; (8003fe4 <__sfp_lock_release+0x8>)
 8003fde:	f000 b8ae 	b.w	800413e <__retarget_lock_release_recursive>
 8003fe2:	bf00      	nop
 8003fe4:	200001ec 	.word	0x200001ec

08003fe8 <__sinit_lock_acquire>:
 8003fe8:	4801      	ldr	r0, [pc, #4]	; (8003ff0 <__sinit_lock_acquire+0x8>)
 8003fea:	f000 b8a7 	b.w	800413c <__retarget_lock_acquire_recursive>
 8003fee:	bf00      	nop
 8003ff0:	200001e7 	.word	0x200001e7

08003ff4 <__sinit_lock_release>:
 8003ff4:	4801      	ldr	r0, [pc, #4]	; (8003ffc <__sinit_lock_release+0x8>)
 8003ff6:	f000 b8a2 	b.w	800413e <__retarget_lock_release_recursive>
 8003ffa:	bf00      	nop
 8003ffc:	200001e7 	.word	0x200001e7

08004000 <__sinit>:
 8004000:	b510      	push	{r4, lr}
 8004002:	4604      	mov	r4, r0
 8004004:	f7ff fff0 	bl	8003fe8 <__sinit_lock_acquire>
 8004008:	69a3      	ldr	r3, [r4, #24]
 800400a:	b11b      	cbz	r3, 8004014 <__sinit+0x14>
 800400c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004010:	f7ff bff0 	b.w	8003ff4 <__sinit_lock_release>
 8004014:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004018:	6523      	str	r3, [r4, #80]	; 0x50
 800401a:	4b13      	ldr	r3, [pc, #76]	; (8004068 <__sinit+0x68>)
 800401c:	4a13      	ldr	r2, [pc, #76]	; (800406c <__sinit+0x6c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	62a2      	str	r2, [r4, #40]	; 0x28
 8004022:	42a3      	cmp	r3, r4
 8004024:	bf04      	itt	eq
 8004026:	2301      	moveq	r3, #1
 8004028:	61a3      	streq	r3, [r4, #24]
 800402a:	4620      	mov	r0, r4
 800402c:	f000 f820 	bl	8004070 <__sfp>
 8004030:	6060      	str	r0, [r4, #4]
 8004032:	4620      	mov	r0, r4
 8004034:	f000 f81c 	bl	8004070 <__sfp>
 8004038:	60a0      	str	r0, [r4, #8]
 800403a:	4620      	mov	r0, r4
 800403c:	f000 f818 	bl	8004070 <__sfp>
 8004040:	2200      	movs	r2, #0
 8004042:	60e0      	str	r0, [r4, #12]
 8004044:	2104      	movs	r1, #4
 8004046:	6860      	ldr	r0, [r4, #4]
 8004048:	f7ff ff82 	bl	8003f50 <std>
 800404c:	68a0      	ldr	r0, [r4, #8]
 800404e:	2201      	movs	r2, #1
 8004050:	2109      	movs	r1, #9
 8004052:	f7ff ff7d 	bl	8003f50 <std>
 8004056:	68e0      	ldr	r0, [r4, #12]
 8004058:	2202      	movs	r2, #2
 800405a:	2112      	movs	r1, #18
 800405c:	f7ff ff78 	bl	8003f50 <std>
 8004060:	2301      	movs	r3, #1
 8004062:	61a3      	str	r3, [r4, #24]
 8004064:	e7d2      	b.n	800400c <__sinit+0xc>
 8004066:	bf00      	nop
 8004068:	08004b68 	.word	0x08004b68
 800406c:	08003f99 	.word	0x08003f99

08004070 <__sfp>:
 8004070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004072:	4607      	mov	r7, r0
 8004074:	f7ff ffac 	bl	8003fd0 <__sfp_lock_acquire>
 8004078:	4b1e      	ldr	r3, [pc, #120]	; (80040f4 <__sfp+0x84>)
 800407a:	681e      	ldr	r6, [r3, #0]
 800407c:	69b3      	ldr	r3, [r6, #24]
 800407e:	b913      	cbnz	r3, 8004086 <__sfp+0x16>
 8004080:	4630      	mov	r0, r6
 8004082:	f7ff ffbd 	bl	8004000 <__sinit>
 8004086:	3648      	adds	r6, #72	; 0x48
 8004088:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800408c:	3b01      	subs	r3, #1
 800408e:	d503      	bpl.n	8004098 <__sfp+0x28>
 8004090:	6833      	ldr	r3, [r6, #0]
 8004092:	b30b      	cbz	r3, 80040d8 <__sfp+0x68>
 8004094:	6836      	ldr	r6, [r6, #0]
 8004096:	e7f7      	b.n	8004088 <__sfp+0x18>
 8004098:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800409c:	b9d5      	cbnz	r5, 80040d4 <__sfp+0x64>
 800409e:	4b16      	ldr	r3, [pc, #88]	; (80040f8 <__sfp+0x88>)
 80040a0:	60e3      	str	r3, [r4, #12]
 80040a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80040a6:	6665      	str	r5, [r4, #100]	; 0x64
 80040a8:	f000 f847 	bl	800413a <__retarget_lock_init_recursive>
 80040ac:	f7ff ff96 	bl	8003fdc <__sfp_lock_release>
 80040b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80040b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80040b8:	6025      	str	r5, [r4, #0]
 80040ba:	61a5      	str	r5, [r4, #24]
 80040bc:	2208      	movs	r2, #8
 80040be:	4629      	mov	r1, r5
 80040c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80040c4:	f7ff fd2c 	bl	8003b20 <memset>
 80040c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80040cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80040d0:	4620      	mov	r0, r4
 80040d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040d4:	3468      	adds	r4, #104	; 0x68
 80040d6:	e7d9      	b.n	800408c <__sfp+0x1c>
 80040d8:	2104      	movs	r1, #4
 80040da:	4638      	mov	r0, r7
 80040dc:	f7ff ff62 	bl	8003fa4 <__sfmoreglue>
 80040e0:	4604      	mov	r4, r0
 80040e2:	6030      	str	r0, [r6, #0]
 80040e4:	2800      	cmp	r0, #0
 80040e6:	d1d5      	bne.n	8004094 <__sfp+0x24>
 80040e8:	f7ff ff78 	bl	8003fdc <__sfp_lock_release>
 80040ec:	230c      	movs	r3, #12
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	e7ee      	b.n	80040d0 <__sfp+0x60>
 80040f2:	bf00      	nop
 80040f4:	08004b68 	.word	0x08004b68
 80040f8:	ffff0001 	.word	0xffff0001

080040fc <_fwalk_reent>:
 80040fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004100:	4606      	mov	r6, r0
 8004102:	4688      	mov	r8, r1
 8004104:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004108:	2700      	movs	r7, #0
 800410a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800410e:	f1b9 0901 	subs.w	r9, r9, #1
 8004112:	d505      	bpl.n	8004120 <_fwalk_reent+0x24>
 8004114:	6824      	ldr	r4, [r4, #0]
 8004116:	2c00      	cmp	r4, #0
 8004118:	d1f7      	bne.n	800410a <_fwalk_reent+0xe>
 800411a:	4638      	mov	r0, r7
 800411c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004120:	89ab      	ldrh	r3, [r5, #12]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d907      	bls.n	8004136 <_fwalk_reent+0x3a>
 8004126:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800412a:	3301      	adds	r3, #1
 800412c:	d003      	beq.n	8004136 <_fwalk_reent+0x3a>
 800412e:	4629      	mov	r1, r5
 8004130:	4630      	mov	r0, r6
 8004132:	47c0      	blx	r8
 8004134:	4307      	orrs	r7, r0
 8004136:	3568      	adds	r5, #104	; 0x68
 8004138:	e7e9      	b.n	800410e <_fwalk_reent+0x12>

0800413a <__retarget_lock_init_recursive>:
 800413a:	4770      	bx	lr

0800413c <__retarget_lock_acquire_recursive>:
 800413c:	4770      	bx	lr

0800413e <__retarget_lock_release_recursive>:
 800413e:	4770      	bx	lr

08004140 <__swhatbuf_r>:
 8004140:	b570      	push	{r4, r5, r6, lr}
 8004142:	460e      	mov	r6, r1
 8004144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004148:	2900      	cmp	r1, #0
 800414a:	b096      	sub	sp, #88	; 0x58
 800414c:	4614      	mov	r4, r2
 800414e:	461d      	mov	r5, r3
 8004150:	da07      	bge.n	8004162 <__swhatbuf_r+0x22>
 8004152:	2300      	movs	r3, #0
 8004154:	602b      	str	r3, [r5, #0]
 8004156:	89b3      	ldrh	r3, [r6, #12]
 8004158:	061a      	lsls	r2, r3, #24
 800415a:	d410      	bmi.n	800417e <__swhatbuf_r+0x3e>
 800415c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004160:	e00e      	b.n	8004180 <__swhatbuf_r+0x40>
 8004162:	466a      	mov	r2, sp
 8004164:	f000 fc5e 	bl	8004a24 <_fstat_r>
 8004168:	2800      	cmp	r0, #0
 800416a:	dbf2      	blt.n	8004152 <__swhatbuf_r+0x12>
 800416c:	9a01      	ldr	r2, [sp, #4]
 800416e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004172:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004176:	425a      	negs	r2, r3
 8004178:	415a      	adcs	r2, r3
 800417a:	602a      	str	r2, [r5, #0]
 800417c:	e7ee      	b.n	800415c <__swhatbuf_r+0x1c>
 800417e:	2340      	movs	r3, #64	; 0x40
 8004180:	2000      	movs	r0, #0
 8004182:	6023      	str	r3, [r4, #0]
 8004184:	b016      	add	sp, #88	; 0x58
 8004186:	bd70      	pop	{r4, r5, r6, pc}

08004188 <__smakebuf_r>:
 8004188:	898b      	ldrh	r3, [r1, #12]
 800418a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800418c:	079d      	lsls	r5, r3, #30
 800418e:	4606      	mov	r6, r0
 8004190:	460c      	mov	r4, r1
 8004192:	d507      	bpl.n	80041a4 <__smakebuf_r+0x1c>
 8004194:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004198:	6023      	str	r3, [r4, #0]
 800419a:	6123      	str	r3, [r4, #16]
 800419c:	2301      	movs	r3, #1
 800419e:	6163      	str	r3, [r4, #20]
 80041a0:	b002      	add	sp, #8
 80041a2:	bd70      	pop	{r4, r5, r6, pc}
 80041a4:	ab01      	add	r3, sp, #4
 80041a6:	466a      	mov	r2, sp
 80041a8:	f7ff ffca 	bl	8004140 <__swhatbuf_r>
 80041ac:	9900      	ldr	r1, [sp, #0]
 80041ae:	4605      	mov	r5, r0
 80041b0:	4630      	mov	r0, r6
 80041b2:	f000 f879 	bl	80042a8 <_malloc_r>
 80041b6:	b948      	cbnz	r0, 80041cc <__smakebuf_r+0x44>
 80041b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041bc:	059a      	lsls	r2, r3, #22
 80041be:	d4ef      	bmi.n	80041a0 <__smakebuf_r+0x18>
 80041c0:	f023 0303 	bic.w	r3, r3, #3
 80041c4:	f043 0302 	orr.w	r3, r3, #2
 80041c8:	81a3      	strh	r3, [r4, #12]
 80041ca:	e7e3      	b.n	8004194 <__smakebuf_r+0xc>
 80041cc:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <__smakebuf_r+0x7c>)
 80041ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80041d0:	89a3      	ldrh	r3, [r4, #12]
 80041d2:	6020      	str	r0, [r4, #0]
 80041d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d8:	81a3      	strh	r3, [r4, #12]
 80041da:	9b00      	ldr	r3, [sp, #0]
 80041dc:	6163      	str	r3, [r4, #20]
 80041de:	9b01      	ldr	r3, [sp, #4]
 80041e0:	6120      	str	r0, [r4, #16]
 80041e2:	b15b      	cbz	r3, 80041fc <__smakebuf_r+0x74>
 80041e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041e8:	4630      	mov	r0, r6
 80041ea:	f000 fc2d 	bl	8004a48 <_isatty_r>
 80041ee:	b128      	cbz	r0, 80041fc <__smakebuf_r+0x74>
 80041f0:	89a3      	ldrh	r3, [r4, #12]
 80041f2:	f023 0303 	bic.w	r3, r3, #3
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	81a3      	strh	r3, [r4, #12]
 80041fc:	89a0      	ldrh	r0, [r4, #12]
 80041fe:	4305      	orrs	r5, r0
 8004200:	81a5      	strh	r5, [r4, #12]
 8004202:	e7cd      	b.n	80041a0 <__smakebuf_r+0x18>
 8004204:	08003f99 	.word	0x08003f99

08004208 <_free_r>:
 8004208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800420a:	2900      	cmp	r1, #0
 800420c:	d048      	beq.n	80042a0 <_free_r+0x98>
 800420e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004212:	9001      	str	r0, [sp, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	f1a1 0404 	sub.w	r4, r1, #4
 800421a:	bfb8      	it	lt
 800421c:	18e4      	addlt	r4, r4, r3
 800421e:	f000 fc35 	bl	8004a8c <__malloc_lock>
 8004222:	4a20      	ldr	r2, [pc, #128]	; (80042a4 <_free_r+0x9c>)
 8004224:	9801      	ldr	r0, [sp, #4]
 8004226:	6813      	ldr	r3, [r2, #0]
 8004228:	4615      	mov	r5, r2
 800422a:	b933      	cbnz	r3, 800423a <_free_r+0x32>
 800422c:	6063      	str	r3, [r4, #4]
 800422e:	6014      	str	r4, [r2, #0]
 8004230:	b003      	add	sp, #12
 8004232:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004236:	f000 bc2f 	b.w	8004a98 <__malloc_unlock>
 800423a:	42a3      	cmp	r3, r4
 800423c:	d90b      	bls.n	8004256 <_free_r+0x4e>
 800423e:	6821      	ldr	r1, [r4, #0]
 8004240:	1862      	adds	r2, r4, r1
 8004242:	4293      	cmp	r3, r2
 8004244:	bf04      	itt	eq
 8004246:	681a      	ldreq	r2, [r3, #0]
 8004248:	685b      	ldreq	r3, [r3, #4]
 800424a:	6063      	str	r3, [r4, #4]
 800424c:	bf04      	itt	eq
 800424e:	1852      	addeq	r2, r2, r1
 8004250:	6022      	streq	r2, [r4, #0]
 8004252:	602c      	str	r4, [r5, #0]
 8004254:	e7ec      	b.n	8004230 <_free_r+0x28>
 8004256:	461a      	mov	r2, r3
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	b10b      	cbz	r3, 8004260 <_free_r+0x58>
 800425c:	42a3      	cmp	r3, r4
 800425e:	d9fa      	bls.n	8004256 <_free_r+0x4e>
 8004260:	6811      	ldr	r1, [r2, #0]
 8004262:	1855      	adds	r5, r2, r1
 8004264:	42a5      	cmp	r5, r4
 8004266:	d10b      	bne.n	8004280 <_free_r+0x78>
 8004268:	6824      	ldr	r4, [r4, #0]
 800426a:	4421      	add	r1, r4
 800426c:	1854      	adds	r4, r2, r1
 800426e:	42a3      	cmp	r3, r4
 8004270:	6011      	str	r1, [r2, #0]
 8004272:	d1dd      	bne.n	8004230 <_free_r+0x28>
 8004274:	681c      	ldr	r4, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	6053      	str	r3, [r2, #4]
 800427a:	4421      	add	r1, r4
 800427c:	6011      	str	r1, [r2, #0]
 800427e:	e7d7      	b.n	8004230 <_free_r+0x28>
 8004280:	d902      	bls.n	8004288 <_free_r+0x80>
 8004282:	230c      	movs	r3, #12
 8004284:	6003      	str	r3, [r0, #0]
 8004286:	e7d3      	b.n	8004230 <_free_r+0x28>
 8004288:	6825      	ldr	r5, [r4, #0]
 800428a:	1961      	adds	r1, r4, r5
 800428c:	428b      	cmp	r3, r1
 800428e:	bf04      	itt	eq
 8004290:	6819      	ldreq	r1, [r3, #0]
 8004292:	685b      	ldreq	r3, [r3, #4]
 8004294:	6063      	str	r3, [r4, #4]
 8004296:	bf04      	itt	eq
 8004298:	1949      	addeq	r1, r1, r5
 800429a:	6021      	streq	r1, [r4, #0]
 800429c:	6054      	str	r4, [r2, #4]
 800429e:	e7c7      	b.n	8004230 <_free_r+0x28>
 80042a0:	b003      	add	sp, #12
 80042a2:	bd30      	pop	{r4, r5, pc}
 80042a4:	20000090 	.word	0x20000090

080042a8 <_malloc_r>:
 80042a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042aa:	1ccd      	adds	r5, r1, #3
 80042ac:	f025 0503 	bic.w	r5, r5, #3
 80042b0:	3508      	adds	r5, #8
 80042b2:	2d0c      	cmp	r5, #12
 80042b4:	bf38      	it	cc
 80042b6:	250c      	movcc	r5, #12
 80042b8:	2d00      	cmp	r5, #0
 80042ba:	4606      	mov	r6, r0
 80042bc:	db01      	blt.n	80042c2 <_malloc_r+0x1a>
 80042be:	42a9      	cmp	r1, r5
 80042c0:	d903      	bls.n	80042ca <_malloc_r+0x22>
 80042c2:	230c      	movs	r3, #12
 80042c4:	6033      	str	r3, [r6, #0]
 80042c6:	2000      	movs	r0, #0
 80042c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042ca:	f000 fbdf 	bl	8004a8c <__malloc_lock>
 80042ce:	4921      	ldr	r1, [pc, #132]	; (8004354 <_malloc_r+0xac>)
 80042d0:	680a      	ldr	r2, [r1, #0]
 80042d2:	4614      	mov	r4, r2
 80042d4:	b99c      	cbnz	r4, 80042fe <_malloc_r+0x56>
 80042d6:	4f20      	ldr	r7, [pc, #128]	; (8004358 <_malloc_r+0xb0>)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	b923      	cbnz	r3, 80042e6 <_malloc_r+0x3e>
 80042dc:	4621      	mov	r1, r4
 80042de:	4630      	mov	r0, r6
 80042e0:	f000 fb2a 	bl	8004938 <_sbrk_r>
 80042e4:	6038      	str	r0, [r7, #0]
 80042e6:	4629      	mov	r1, r5
 80042e8:	4630      	mov	r0, r6
 80042ea:	f000 fb25 	bl	8004938 <_sbrk_r>
 80042ee:	1c43      	adds	r3, r0, #1
 80042f0:	d123      	bne.n	800433a <_malloc_r+0x92>
 80042f2:	230c      	movs	r3, #12
 80042f4:	6033      	str	r3, [r6, #0]
 80042f6:	4630      	mov	r0, r6
 80042f8:	f000 fbce 	bl	8004a98 <__malloc_unlock>
 80042fc:	e7e3      	b.n	80042c6 <_malloc_r+0x1e>
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	1b5b      	subs	r3, r3, r5
 8004302:	d417      	bmi.n	8004334 <_malloc_r+0x8c>
 8004304:	2b0b      	cmp	r3, #11
 8004306:	d903      	bls.n	8004310 <_malloc_r+0x68>
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	441c      	add	r4, r3
 800430c:	6025      	str	r5, [r4, #0]
 800430e:	e004      	b.n	800431a <_malloc_r+0x72>
 8004310:	6863      	ldr	r3, [r4, #4]
 8004312:	42a2      	cmp	r2, r4
 8004314:	bf0c      	ite	eq
 8004316:	600b      	streq	r3, [r1, #0]
 8004318:	6053      	strne	r3, [r2, #4]
 800431a:	4630      	mov	r0, r6
 800431c:	f000 fbbc 	bl	8004a98 <__malloc_unlock>
 8004320:	f104 000b 	add.w	r0, r4, #11
 8004324:	1d23      	adds	r3, r4, #4
 8004326:	f020 0007 	bic.w	r0, r0, #7
 800432a:	1ac2      	subs	r2, r0, r3
 800432c:	d0cc      	beq.n	80042c8 <_malloc_r+0x20>
 800432e:	1a1b      	subs	r3, r3, r0
 8004330:	50a3      	str	r3, [r4, r2]
 8004332:	e7c9      	b.n	80042c8 <_malloc_r+0x20>
 8004334:	4622      	mov	r2, r4
 8004336:	6864      	ldr	r4, [r4, #4]
 8004338:	e7cc      	b.n	80042d4 <_malloc_r+0x2c>
 800433a:	1cc4      	adds	r4, r0, #3
 800433c:	f024 0403 	bic.w	r4, r4, #3
 8004340:	42a0      	cmp	r0, r4
 8004342:	d0e3      	beq.n	800430c <_malloc_r+0x64>
 8004344:	1a21      	subs	r1, r4, r0
 8004346:	4630      	mov	r0, r6
 8004348:	f000 faf6 	bl	8004938 <_sbrk_r>
 800434c:	3001      	adds	r0, #1
 800434e:	d1dd      	bne.n	800430c <_malloc_r+0x64>
 8004350:	e7cf      	b.n	80042f2 <_malloc_r+0x4a>
 8004352:	bf00      	nop
 8004354:	20000090 	.word	0x20000090
 8004358:	20000094 	.word	0x20000094

0800435c <__sfputc_r>:
 800435c:	6893      	ldr	r3, [r2, #8]
 800435e:	3b01      	subs	r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	b410      	push	{r4}
 8004364:	6093      	str	r3, [r2, #8]
 8004366:	da08      	bge.n	800437a <__sfputc_r+0x1e>
 8004368:	6994      	ldr	r4, [r2, #24]
 800436a:	42a3      	cmp	r3, r4
 800436c:	db01      	blt.n	8004372 <__sfputc_r+0x16>
 800436e:	290a      	cmp	r1, #10
 8004370:	d103      	bne.n	800437a <__sfputc_r+0x1e>
 8004372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004376:	f7ff bc69 	b.w	8003c4c <__swbuf_r>
 800437a:	6813      	ldr	r3, [r2, #0]
 800437c:	1c58      	adds	r0, r3, #1
 800437e:	6010      	str	r0, [r2, #0]
 8004380:	7019      	strb	r1, [r3, #0]
 8004382:	4608      	mov	r0, r1
 8004384:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004388:	4770      	bx	lr

0800438a <__sfputs_r>:
 800438a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438c:	4606      	mov	r6, r0
 800438e:	460f      	mov	r7, r1
 8004390:	4614      	mov	r4, r2
 8004392:	18d5      	adds	r5, r2, r3
 8004394:	42ac      	cmp	r4, r5
 8004396:	d101      	bne.n	800439c <__sfputs_r+0x12>
 8004398:	2000      	movs	r0, #0
 800439a:	e007      	b.n	80043ac <__sfputs_r+0x22>
 800439c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043a0:	463a      	mov	r2, r7
 80043a2:	4630      	mov	r0, r6
 80043a4:	f7ff ffda 	bl	800435c <__sfputc_r>
 80043a8:	1c43      	adds	r3, r0, #1
 80043aa:	d1f3      	bne.n	8004394 <__sfputs_r+0xa>
 80043ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043b0 <_vfiprintf_r>:
 80043b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b4:	460d      	mov	r5, r1
 80043b6:	b09d      	sub	sp, #116	; 0x74
 80043b8:	4614      	mov	r4, r2
 80043ba:	4698      	mov	r8, r3
 80043bc:	4606      	mov	r6, r0
 80043be:	b118      	cbz	r0, 80043c8 <_vfiprintf_r+0x18>
 80043c0:	6983      	ldr	r3, [r0, #24]
 80043c2:	b90b      	cbnz	r3, 80043c8 <_vfiprintf_r+0x18>
 80043c4:	f7ff fe1c 	bl	8004000 <__sinit>
 80043c8:	4b89      	ldr	r3, [pc, #548]	; (80045f0 <_vfiprintf_r+0x240>)
 80043ca:	429d      	cmp	r5, r3
 80043cc:	d11b      	bne.n	8004406 <_vfiprintf_r+0x56>
 80043ce:	6875      	ldr	r5, [r6, #4]
 80043d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043d2:	07d9      	lsls	r1, r3, #31
 80043d4:	d405      	bmi.n	80043e2 <_vfiprintf_r+0x32>
 80043d6:	89ab      	ldrh	r3, [r5, #12]
 80043d8:	059a      	lsls	r2, r3, #22
 80043da:	d402      	bmi.n	80043e2 <_vfiprintf_r+0x32>
 80043dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043de:	f7ff fead 	bl	800413c <__retarget_lock_acquire_recursive>
 80043e2:	89ab      	ldrh	r3, [r5, #12]
 80043e4:	071b      	lsls	r3, r3, #28
 80043e6:	d501      	bpl.n	80043ec <_vfiprintf_r+0x3c>
 80043e8:	692b      	ldr	r3, [r5, #16]
 80043ea:	b9eb      	cbnz	r3, 8004428 <_vfiprintf_r+0x78>
 80043ec:	4629      	mov	r1, r5
 80043ee:	4630      	mov	r0, r6
 80043f0:	f7ff fc7e 	bl	8003cf0 <__swsetup_r>
 80043f4:	b1c0      	cbz	r0, 8004428 <_vfiprintf_r+0x78>
 80043f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043f8:	07dc      	lsls	r4, r3, #31
 80043fa:	d50e      	bpl.n	800441a <_vfiprintf_r+0x6a>
 80043fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004400:	b01d      	add	sp, #116	; 0x74
 8004402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004406:	4b7b      	ldr	r3, [pc, #492]	; (80045f4 <_vfiprintf_r+0x244>)
 8004408:	429d      	cmp	r5, r3
 800440a:	d101      	bne.n	8004410 <_vfiprintf_r+0x60>
 800440c:	68b5      	ldr	r5, [r6, #8]
 800440e:	e7df      	b.n	80043d0 <_vfiprintf_r+0x20>
 8004410:	4b79      	ldr	r3, [pc, #484]	; (80045f8 <_vfiprintf_r+0x248>)
 8004412:	429d      	cmp	r5, r3
 8004414:	bf08      	it	eq
 8004416:	68f5      	ldreq	r5, [r6, #12]
 8004418:	e7da      	b.n	80043d0 <_vfiprintf_r+0x20>
 800441a:	89ab      	ldrh	r3, [r5, #12]
 800441c:	0598      	lsls	r0, r3, #22
 800441e:	d4ed      	bmi.n	80043fc <_vfiprintf_r+0x4c>
 8004420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004422:	f7ff fe8c 	bl	800413e <__retarget_lock_release_recursive>
 8004426:	e7e9      	b.n	80043fc <_vfiprintf_r+0x4c>
 8004428:	2300      	movs	r3, #0
 800442a:	9309      	str	r3, [sp, #36]	; 0x24
 800442c:	2320      	movs	r3, #32
 800442e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004432:	f8cd 800c 	str.w	r8, [sp, #12]
 8004436:	2330      	movs	r3, #48	; 0x30
 8004438:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80045fc <_vfiprintf_r+0x24c>
 800443c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004440:	f04f 0901 	mov.w	r9, #1
 8004444:	4623      	mov	r3, r4
 8004446:	469a      	mov	sl, r3
 8004448:	f813 2b01 	ldrb.w	r2, [r3], #1
 800444c:	b10a      	cbz	r2, 8004452 <_vfiprintf_r+0xa2>
 800444e:	2a25      	cmp	r2, #37	; 0x25
 8004450:	d1f9      	bne.n	8004446 <_vfiprintf_r+0x96>
 8004452:	ebba 0b04 	subs.w	fp, sl, r4
 8004456:	d00b      	beq.n	8004470 <_vfiprintf_r+0xc0>
 8004458:	465b      	mov	r3, fp
 800445a:	4622      	mov	r2, r4
 800445c:	4629      	mov	r1, r5
 800445e:	4630      	mov	r0, r6
 8004460:	f7ff ff93 	bl	800438a <__sfputs_r>
 8004464:	3001      	adds	r0, #1
 8004466:	f000 80aa 	beq.w	80045be <_vfiprintf_r+0x20e>
 800446a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800446c:	445a      	add	r2, fp
 800446e:	9209      	str	r2, [sp, #36]	; 0x24
 8004470:	f89a 3000 	ldrb.w	r3, [sl]
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 80a2 	beq.w	80045be <_vfiprintf_r+0x20e>
 800447a:	2300      	movs	r3, #0
 800447c:	f04f 32ff 	mov.w	r2, #4294967295
 8004480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004484:	f10a 0a01 	add.w	sl, sl, #1
 8004488:	9304      	str	r3, [sp, #16]
 800448a:	9307      	str	r3, [sp, #28]
 800448c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004490:	931a      	str	r3, [sp, #104]	; 0x68
 8004492:	4654      	mov	r4, sl
 8004494:	2205      	movs	r2, #5
 8004496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800449a:	4858      	ldr	r0, [pc, #352]	; (80045fc <_vfiprintf_r+0x24c>)
 800449c:	f7fb fe98 	bl	80001d0 <memchr>
 80044a0:	9a04      	ldr	r2, [sp, #16]
 80044a2:	b9d8      	cbnz	r0, 80044dc <_vfiprintf_r+0x12c>
 80044a4:	06d1      	lsls	r1, r2, #27
 80044a6:	bf44      	itt	mi
 80044a8:	2320      	movmi	r3, #32
 80044aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044ae:	0713      	lsls	r3, r2, #28
 80044b0:	bf44      	itt	mi
 80044b2:	232b      	movmi	r3, #43	; 0x2b
 80044b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044b8:	f89a 3000 	ldrb.w	r3, [sl]
 80044bc:	2b2a      	cmp	r3, #42	; 0x2a
 80044be:	d015      	beq.n	80044ec <_vfiprintf_r+0x13c>
 80044c0:	9a07      	ldr	r2, [sp, #28]
 80044c2:	4654      	mov	r4, sl
 80044c4:	2000      	movs	r0, #0
 80044c6:	f04f 0c0a 	mov.w	ip, #10
 80044ca:	4621      	mov	r1, r4
 80044cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044d0:	3b30      	subs	r3, #48	; 0x30
 80044d2:	2b09      	cmp	r3, #9
 80044d4:	d94e      	bls.n	8004574 <_vfiprintf_r+0x1c4>
 80044d6:	b1b0      	cbz	r0, 8004506 <_vfiprintf_r+0x156>
 80044d8:	9207      	str	r2, [sp, #28]
 80044da:	e014      	b.n	8004506 <_vfiprintf_r+0x156>
 80044dc:	eba0 0308 	sub.w	r3, r0, r8
 80044e0:	fa09 f303 	lsl.w	r3, r9, r3
 80044e4:	4313      	orrs	r3, r2
 80044e6:	9304      	str	r3, [sp, #16]
 80044e8:	46a2      	mov	sl, r4
 80044ea:	e7d2      	b.n	8004492 <_vfiprintf_r+0xe2>
 80044ec:	9b03      	ldr	r3, [sp, #12]
 80044ee:	1d19      	adds	r1, r3, #4
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	9103      	str	r1, [sp, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	bfbb      	ittet	lt
 80044f8:	425b      	neglt	r3, r3
 80044fa:	f042 0202 	orrlt.w	r2, r2, #2
 80044fe:	9307      	strge	r3, [sp, #28]
 8004500:	9307      	strlt	r3, [sp, #28]
 8004502:	bfb8      	it	lt
 8004504:	9204      	strlt	r2, [sp, #16]
 8004506:	7823      	ldrb	r3, [r4, #0]
 8004508:	2b2e      	cmp	r3, #46	; 0x2e
 800450a:	d10c      	bne.n	8004526 <_vfiprintf_r+0x176>
 800450c:	7863      	ldrb	r3, [r4, #1]
 800450e:	2b2a      	cmp	r3, #42	; 0x2a
 8004510:	d135      	bne.n	800457e <_vfiprintf_r+0x1ce>
 8004512:	9b03      	ldr	r3, [sp, #12]
 8004514:	1d1a      	adds	r2, r3, #4
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	9203      	str	r2, [sp, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	bfb8      	it	lt
 800451e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004522:	3402      	adds	r4, #2
 8004524:	9305      	str	r3, [sp, #20]
 8004526:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800460c <_vfiprintf_r+0x25c>
 800452a:	7821      	ldrb	r1, [r4, #0]
 800452c:	2203      	movs	r2, #3
 800452e:	4650      	mov	r0, sl
 8004530:	f7fb fe4e 	bl	80001d0 <memchr>
 8004534:	b140      	cbz	r0, 8004548 <_vfiprintf_r+0x198>
 8004536:	2340      	movs	r3, #64	; 0x40
 8004538:	eba0 000a 	sub.w	r0, r0, sl
 800453c:	fa03 f000 	lsl.w	r0, r3, r0
 8004540:	9b04      	ldr	r3, [sp, #16]
 8004542:	4303      	orrs	r3, r0
 8004544:	3401      	adds	r4, #1
 8004546:	9304      	str	r3, [sp, #16]
 8004548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800454c:	482c      	ldr	r0, [pc, #176]	; (8004600 <_vfiprintf_r+0x250>)
 800454e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004552:	2206      	movs	r2, #6
 8004554:	f7fb fe3c 	bl	80001d0 <memchr>
 8004558:	2800      	cmp	r0, #0
 800455a:	d03f      	beq.n	80045dc <_vfiprintf_r+0x22c>
 800455c:	4b29      	ldr	r3, [pc, #164]	; (8004604 <_vfiprintf_r+0x254>)
 800455e:	bb1b      	cbnz	r3, 80045a8 <_vfiprintf_r+0x1f8>
 8004560:	9b03      	ldr	r3, [sp, #12]
 8004562:	3307      	adds	r3, #7
 8004564:	f023 0307 	bic.w	r3, r3, #7
 8004568:	3308      	adds	r3, #8
 800456a:	9303      	str	r3, [sp, #12]
 800456c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800456e:	443b      	add	r3, r7
 8004570:	9309      	str	r3, [sp, #36]	; 0x24
 8004572:	e767      	b.n	8004444 <_vfiprintf_r+0x94>
 8004574:	fb0c 3202 	mla	r2, ip, r2, r3
 8004578:	460c      	mov	r4, r1
 800457a:	2001      	movs	r0, #1
 800457c:	e7a5      	b.n	80044ca <_vfiprintf_r+0x11a>
 800457e:	2300      	movs	r3, #0
 8004580:	3401      	adds	r4, #1
 8004582:	9305      	str	r3, [sp, #20]
 8004584:	4619      	mov	r1, r3
 8004586:	f04f 0c0a 	mov.w	ip, #10
 800458a:	4620      	mov	r0, r4
 800458c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004590:	3a30      	subs	r2, #48	; 0x30
 8004592:	2a09      	cmp	r2, #9
 8004594:	d903      	bls.n	800459e <_vfiprintf_r+0x1ee>
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0c5      	beq.n	8004526 <_vfiprintf_r+0x176>
 800459a:	9105      	str	r1, [sp, #20]
 800459c:	e7c3      	b.n	8004526 <_vfiprintf_r+0x176>
 800459e:	fb0c 2101 	mla	r1, ip, r1, r2
 80045a2:	4604      	mov	r4, r0
 80045a4:	2301      	movs	r3, #1
 80045a6:	e7f0      	b.n	800458a <_vfiprintf_r+0x1da>
 80045a8:	ab03      	add	r3, sp, #12
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	462a      	mov	r2, r5
 80045ae:	4b16      	ldr	r3, [pc, #88]	; (8004608 <_vfiprintf_r+0x258>)
 80045b0:	a904      	add	r1, sp, #16
 80045b2:	4630      	mov	r0, r6
 80045b4:	f3af 8000 	nop.w
 80045b8:	4607      	mov	r7, r0
 80045ba:	1c78      	adds	r0, r7, #1
 80045bc:	d1d6      	bne.n	800456c <_vfiprintf_r+0x1bc>
 80045be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045c0:	07d9      	lsls	r1, r3, #31
 80045c2:	d405      	bmi.n	80045d0 <_vfiprintf_r+0x220>
 80045c4:	89ab      	ldrh	r3, [r5, #12]
 80045c6:	059a      	lsls	r2, r3, #22
 80045c8:	d402      	bmi.n	80045d0 <_vfiprintf_r+0x220>
 80045ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045cc:	f7ff fdb7 	bl	800413e <__retarget_lock_release_recursive>
 80045d0:	89ab      	ldrh	r3, [r5, #12]
 80045d2:	065b      	lsls	r3, r3, #25
 80045d4:	f53f af12 	bmi.w	80043fc <_vfiprintf_r+0x4c>
 80045d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045da:	e711      	b.n	8004400 <_vfiprintf_r+0x50>
 80045dc:	ab03      	add	r3, sp, #12
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	462a      	mov	r2, r5
 80045e2:	4b09      	ldr	r3, [pc, #36]	; (8004608 <_vfiprintf_r+0x258>)
 80045e4:	a904      	add	r1, sp, #16
 80045e6:	4630      	mov	r0, r6
 80045e8:	f000 f880 	bl	80046ec <_printf_i>
 80045ec:	e7e4      	b.n	80045b8 <_vfiprintf_r+0x208>
 80045ee:	bf00      	nop
 80045f0:	08004b8c 	.word	0x08004b8c
 80045f4:	08004bac 	.word	0x08004bac
 80045f8:	08004b6c 	.word	0x08004b6c
 80045fc:	08004bcc 	.word	0x08004bcc
 8004600:	08004bd6 	.word	0x08004bd6
 8004604:	00000000 	.word	0x00000000
 8004608:	0800438b 	.word	0x0800438b
 800460c:	08004bd2 	.word	0x08004bd2

08004610 <_printf_common>:
 8004610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004614:	4616      	mov	r6, r2
 8004616:	4699      	mov	r9, r3
 8004618:	688a      	ldr	r2, [r1, #8]
 800461a:	690b      	ldr	r3, [r1, #16]
 800461c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004620:	4293      	cmp	r3, r2
 8004622:	bfb8      	it	lt
 8004624:	4613      	movlt	r3, r2
 8004626:	6033      	str	r3, [r6, #0]
 8004628:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800462c:	4607      	mov	r7, r0
 800462e:	460c      	mov	r4, r1
 8004630:	b10a      	cbz	r2, 8004636 <_printf_common+0x26>
 8004632:	3301      	adds	r3, #1
 8004634:	6033      	str	r3, [r6, #0]
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	0699      	lsls	r1, r3, #26
 800463a:	bf42      	ittt	mi
 800463c:	6833      	ldrmi	r3, [r6, #0]
 800463e:	3302      	addmi	r3, #2
 8004640:	6033      	strmi	r3, [r6, #0]
 8004642:	6825      	ldr	r5, [r4, #0]
 8004644:	f015 0506 	ands.w	r5, r5, #6
 8004648:	d106      	bne.n	8004658 <_printf_common+0x48>
 800464a:	f104 0a19 	add.w	sl, r4, #25
 800464e:	68e3      	ldr	r3, [r4, #12]
 8004650:	6832      	ldr	r2, [r6, #0]
 8004652:	1a9b      	subs	r3, r3, r2
 8004654:	42ab      	cmp	r3, r5
 8004656:	dc26      	bgt.n	80046a6 <_printf_common+0x96>
 8004658:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800465c:	1e13      	subs	r3, r2, #0
 800465e:	6822      	ldr	r2, [r4, #0]
 8004660:	bf18      	it	ne
 8004662:	2301      	movne	r3, #1
 8004664:	0692      	lsls	r2, r2, #26
 8004666:	d42b      	bmi.n	80046c0 <_printf_common+0xb0>
 8004668:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800466c:	4649      	mov	r1, r9
 800466e:	4638      	mov	r0, r7
 8004670:	47c0      	blx	r8
 8004672:	3001      	adds	r0, #1
 8004674:	d01e      	beq.n	80046b4 <_printf_common+0xa4>
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	68e5      	ldr	r5, [r4, #12]
 800467a:	6832      	ldr	r2, [r6, #0]
 800467c:	f003 0306 	and.w	r3, r3, #6
 8004680:	2b04      	cmp	r3, #4
 8004682:	bf08      	it	eq
 8004684:	1aad      	subeq	r5, r5, r2
 8004686:	68a3      	ldr	r3, [r4, #8]
 8004688:	6922      	ldr	r2, [r4, #16]
 800468a:	bf0c      	ite	eq
 800468c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004690:	2500      	movne	r5, #0
 8004692:	4293      	cmp	r3, r2
 8004694:	bfc4      	itt	gt
 8004696:	1a9b      	subgt	r3, r3, r2
 8004698:	18ed      	addgt	r5, r5, r3
 800469a:	2600      	movs	r6, #0
 800469c:	341a      	adds	r4, #26
 800469e:	42b5      	cmp	r5, r6
 80046a0:	d11a      	bne.n	80046d8 <_printf_common+0xc8>
 80046a2:	2000      	movs	r0, #0
 80046a4:	e008      	b.n	80046b8 <_printf_common+0xa8>
 80046a6:	2301      	movs	r3, #1
 80046a8:	4652      	mov	r2, sl
 80046aa:	4649      	mov	r1, r9
 80046ac:	4638      	mov	r0, r7
 80046ae:	47c0      	blx	r8
 80046b0:	3001      	adds	r0, #1
 80046b2:	d103      	bne.n	80046bc <_printf_common+0xac>
 80046b4:	f04f 30ff 	mov.w	r0, #4294967295
 80046b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046bc:	3501      	adds	r5, #1
 80046be:	e7c6      	b.n	800464e <_printf_common+0x3e>
 80046c0:	18e1      	adds	r1, r4, r3
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	2030      	movs	r0, #48	; 0x30
 80046c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046ca:	4422      	add	r2, r4
 80046cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046d4:	3302      	adds	r3, #2
 80046d6:	e7c7      	b.n	8004668 <_printf_common+0x58>
 80046d8:	2301      	movs	r3, #1
 80046da:	4622      	mov	r2, r4
 80046dc:	4649      	mov	r1, r9
 80046de:	4638      	mov	r0, r7
 80046e0:	47c0      	blx	r8
 80046e2:	3001      	adds	r0, #1
 80046e4:	d0e6      	beq.n	80046b4 <_printf_common+0xa4>
 80046e6:	3601      	adds	r6, #1
 80046e8:	e7d9      	b.n	800469e <_printf_common+0x8e>
	...

080046ec <_printf_i>:
 80046ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046f0:	460c      	mov	r4, r1
 80046f2:	4691      	mov	r9, r2
 80046f4:	7e27      	ldrb	r7, [r4, #24]
 80046f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80046f8:	2f78      	cmp	r7, #120	; 0x78
 80046fa:	4680      	mov	r8, r0
 80046fc:	469a      	mov	sl, r3
 80046fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004702:	d807      	bhi.n	8004714 <_printf_i+0x28>
 8004704:	2f62      	cmp	r7, #98	; 0x62
 8004706:	d80a      	bhi.n	800471e <_printf_i+0x32>
 8004708:	2f00      	cmp	r7, #0
 800470a:	f000 80d8 	beq.w	80048be <_printf_i+0x1d2>
 800470e:	2f58      	cmp	r7, #88	; 0x58
 8004710:	f000 80a3 	beq.w	800485a <_printf_i+0x16e>
 8004714:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004718:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800471c:	e03a      	b.n	8004794 <_printf_i+0xa8>
 800471e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004722:	2b15      	cmp	r3, #21
 8004724:	d8f6      	bhi.n	8004714 <_printf_i+0x28>
 8004726:	a001      	add	r0, pc, #4	; (adr r0, 800472c <_printf_i+0x40>)
 8004728:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800472c:	08004785 	.word	0x08004785
 8004730:	08004799 	.word	0x08004799
 8004734:	08004715 	.word	0x08004715
 8004738:	08004715 	.word	0x08004715
 800473c:	08004715 	.word	0x08004715
 8004740:	08004715 	.word	0x08004715
 8004744:	08004799 	.word	0x08004799
 8004748:	08004715 	.word	0x08004715
 800474c:	08004715 	.word	0x08004715
 8004750:	08004715 	.word	0x08004715
 8004754:	08004715 	.word	0x08004715
 8004758:	080048a5 	.word	0x080048a5
 800475c:	080047c9 	.word	0x080047c9
 8004760:	08004887 	.word	0x08004887
 8004764:	08004715 	.word	0x08004715
 8004768:	08004715 	.word	0x08004715
 800476c:	080048c7 	.word	0x080048c7
 8004770:	08004715 	.word	0x08004715
 8004774:	080047c9 	.word	0x080047c9
 8004778:	08004715 	.word	0x08004715
 800477c:	08004715 	.word	0x08004715
 8004780:	0800488f 	.word	0x0800488f
 8004784:	680b      	ldr	r3, [r1, #0]
 8004786:	1d1a      	adds	r2, r3, #4
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	600a      	str	r2, [r1, #0]
 800478c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004794:	2301      	movs	r3, #1
 8004796:	e0a3      	b.n	80048e0 <_printf_i+0x1f4>
 8004798:	6825      	ldr	r5, [r4, #0]
 800479a:	6808      	ldr	r0, [r1, #0]
 800479c:	062e      	lsls	r6, r5, #24
 800479e:	f100 0304 	add.w	r3, r0, #4
 80047a2:	d50a      	bpl.n	80047ba <_printf_i+0xce>
 80047a4:	6805      	ldr	r5, [r0, #0]
 80047a6:	600b      	str	r3, [r1, #0]
 80047a8:	2d00      	cmp	r5, #0
 80047aa:	da03      	bge.n	80047b4 <_printf_i+0xc8>
 80047ac:	232d      	movs	r3, #45	; 0x2d
 80047ae:	426d      	negs	r5, r5
 80047b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047b4:	485e      	ldr	r0, [pc, #376]	; (8004930 <_printf_i+0x244>)
 80047b6:	230a      	movs	r3, #10
 80047b8:	e019      	b.n	80047ee <_printf_i+0x102>
 80047ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80047be:	6805      	ldr	r5, [r0, #0]
 80047c0:	600b      	str	r3, [r1, #0]
 80047c2:	bf18      	it	ne
 80047c4:	b22d      	sxthne	r5, r5
 80047c6:	e7ef      	b.n	80047a8 <_printf_i+0xbc>
 80047c8:	680b      	ldr	r3, [r1, #0]
 80047ca:	6825      	ldr	r5, [r4, #0]
 80047cc:	1d18      	adds	r0, r3, #4
 80047ce:	6008      	str	r0, [r1, #0]
 80047d0:	0628      	lsls	r0, r5, #24
 80047d2:	d501      	bpl.n	80047d8 <_printf_i+0xec>
 80047d4:	681d      	ldr	r5, [r3, #0]
 80047d6:	e002      	b.n	80047de <_printf_i+0xf2>
 80047d8:	0669      	lsls	r1, r5, #25
 80047da:	d5fb      	bpl.n	80047d4 <_printf_i+0xe8>
 80047dc:	881d      	ldrh	r5, [r3, #0]
 80047de:	4854      	ldr	r0, [pc, #336]	; (8004930 <_printf_i+0x244>)
 80047e0:	2f6f      	cmp	r7, #111	; 0x6f
 80047e2:	bf0c      	ite	eq
 80047e4:	2308      	moveq	r3, #8
 80047e6:	230a      	movne	r3, #10
 80047e8:	2100      	movs	r1, #0
 80047ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047ee:	6866      	ldr	r6, [r4, #4]
 80047f0:	60a6      	str	r6, [r4, #8]
 80047f2:	2e00      	cmp	r6, #0
 80047f4:	bfa2      	ittt	ge
 80047f6:	6821      	ldrge	r1, [r4, #0]
 80047f8:	f021 0104 	bicge.w	r1, r1, #4
 80047fc:	6021      	strge	r1, [r4, #0]
 80047fe:	b90d      	cbnz	r5, 8004804 <_printf_i+0x118>
 8004800:	2e00      	cmp	r6, #0
 8004802:	d04d      	beq.n	80048a0 <_printf_i+0x1b4>
 8004804:	4616      	mov	r6, r2
 8004806:	fbb5 f1f3 	udiv	r1, r5, r3
 800480a:	fb03 5711 	mls	r7, r3, r1, r5
 800480e:	5dc7      	ldrb	r7, [r0, r7]
 8004810:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004814:	462f      	mov	r7, r5
 8004816:	42bb      	cmp	r3, r7
 8004818:	460d      	mov	r5, r1
 800481a:	d9f4      	bls.n	8004806 <_printf_i+0x11a>
 800481c:	2b08      	cmp	r3, #8
 800481e:	d10b      	bne.n	8004838 <_printf_i+0x14c>
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	07df      	lsls	r7, r3, #31
 8004824:	d508      	bpl.n	8004838 <_printf_i+0x14c>
 8004826:	6923      	ldr	r3, [r4, #16]
 8004828:	6861      	ldr	r1, [r4, #4]
 800482a:	4299      	cmp	r1, r3
 800482c:	bfde      	ittt	le
 800482e:	2330      	movle	r3, #48	; 0x30
 8004830:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004834:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004838:	1b92      	subs	r2, r2, r6
 800483a:	6122      	str	r2, [r4, #16]
 800483c:	f8cd a000 	str.w	sl, [sp]
 8004840:	464b      	mov	r3, r9
 8004842:	aa03      	add	r2, sp, #12
 8004844:	4621      	mov	r1, r4
 8004846:	4640      	mov	r0, r8
 8004848:	f7ff fee2 	bl	8004610 <_printf_common>
 800484c:	3001      	adds	r0, #1
 800484e:	d14c      	bne.n	80048ea <_printf_i+0x1fe>
 8004850:	f04f 30ff 	mov.w	r0, #4294967295
 8004854:	b004      	add	sp, #16
 8004856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800485a:	4835      	ldr	r0, [pc, #212]	; (8004930 <_printf_i+0x244>)
 800485c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	680e      	ldr	r6, [r1, #0]
 8004864:	061f      	lsls	r7, r3, #24
 8004866:	f856 5b04 	ldr.w	r5, [r6], #4
 800486a:	600e      	str	r6, [r1, #0]
 800486c:	d514      	bpl.n	8004898 <_printf_i+0x1ac>
 800486e:	07d9      	lsls	r1, r3, #31
 8004870:	bf44      	itt	mi
 8004872:	f043 0320 	orrmi.w	r3, r3, #32
 8004876:	6023      	strmi	r3, [r4, #0]
 8004878:	b91d      	cbnz	r5, 8004882 <_printf_i+0x196>
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	f023 0320 	bic.w	r3, r3, #32
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	2310      	movs	r3, #16
 8004884:	e7b0      	b.n	80047e8 <_printf_i+0xfc>
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	f043 0320 	orr.w	r3, r3, #32
 800488c:	6023      	str	r3, [r4, #0]
 800488e:	2378      	movs	r3, #120	; 0x78
 8004890:	4828      	ldr	r0, [pc, #160]	; (8004934 <_printf_i+0x248>)
 8004892:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004896:	e7e3      	b.n	8004860 <_printf_i+0x174>
 8004898:	065e      	lsls	r6, r3, #25
 800489a:	bf48      	it	mi
 800489c:	b2ad      	uxthmi	r5, r5
 800489e:	e7e6      	b.n	800486e <_printf_i+0x182>
 80048a0:	4616      	mov	r6, r2
 80048a2:	e7bb      	b.n	800481c <_printf_i+0x130>
 80048a4:	680b      	ldr	r3, [r1, #0]
 80048a6:	6826      	ldr	r6, [r4, #0]
 80048a8:	6960      	ldr	r0, [r4, #20]
 80048aa:	1d1d      	adds	r5, r3, #4
 80048ac:	600d      	str	r5, [r1, #0]
 80048ae:	0635      	lsls	r5, r6, #24
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	d501      	bpl.n	80048b8 <_printf_i+0x1cc>
 80048b4:	6018      	str	r0, [r3, #0]
 80048b6:	e002      	b.n	80048be <_printf_i+0x1d2>
 80048b8:	0671      	lsls	r1, r6, #25
 80048ba:	d5fb      	bpl.n	80048b4 <_printf_i+0x1c8>
 80048bc:	8018      	strh	r0, [r3, #0]
 80048be:	2300      	movs	r3, #0
 80048c0:	6123      	str	r3, [r4, #16]
 80048c2:	4616      	mov	r6, r2
 80048c4:	e7ba      	b.n	800483c <_printf_i+0x150>
 80048c6:	680b      	ldr	r3, [r1, #0]
 80048c8:	1d1a      	adds	r2, r3, #4
 80048ca:	600a      	str	r2, [r1, #0]
 80048cc:	681e      	ldr	r6, [r3, #0]
 80048ce:	6862      	ldr	r2, [r4, #4]
 80048d0:	2100      	movs	r1, #0
 80048d2:	4630      	mov	r0, r6
 80048d4:	f7fb fc7c 	bl	80001d0 <memchr>
 80048d8:	b108      	cbz	r0, 80048de <_printf_i+0x1f2>
 80048da:	1b80      	subs	r0, r0, r6
 80048dc:	6060      	str	r0, [r4, #4]
 80048de:	6863      	ldr	r3, [r4, #4]
 80048e0:	6123      	str	r3, [r4, #16]
 80048e2:	2300      	movs	r3, #0
 80048e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048e8:	e7a8      	b.n	800483c <_printf_i+0x150>
 80048ea:	6923      	ldr	r3, [r4, #16]
 80048ec:	4632      	mov	r2, r6
 80048ee:	4649      	mov	r1, r9
 80048f0:	4640      	mov	r0, r8
 80048f2:	47d0      	blx	sl
 80048f4:	3001      	adds	r0, #1
 80048f6:	d0ab      	beq.n	8004850 <_printf_i+0x164>
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	079b      	lsls	r3, r3, #30
 80048fc:	d413      	bmi.n	8004926 <_printf_i+0x23a>
 80048fe:	68e0      	ldr	r0, [r4, #12]
 8004900:	9b03      	ldr	r3, [sp, #12]
 8004902:	4298      	cmp	r0, r3
 8004904:	bfb8      	it	lt
 8004906:	4618      	movlt	r0, r3
 8004908:	e7a4      	b.n	8004854 <_printf_i+0x168>
 800490a:	2301      	movs	r3, #1
 800490c:	4632      	mov	r2, r6
 800490e:	4649      	mov	r1, r9
 8004910:	4640      	mov	r0, r8
 8004912:	47d0      	blx	sl
 8004914:	3001      	adds	r0, #1
 8004916:	d09b      	beq.n	8004850 <_printf_i+0x164>
 8004918:	3501      	adds	r5, #1
 800491a:	68e3      	ldr	r3, [r4, #12]
 800491c:	9903      	ldr	r1, [sp, #12]
 800491e:	1a5b      	subs	r3, r3, r1
 8004920:	42ab      	cmp	r3, r5
 8004922:	dcf2      	bgt.n	800490a <_printf_i+0x21e>
 8004924:	e7eb      	b.n	80048fe <_printf_i+0x212>
 8004926:	2500      	movs	r5, #0
 8004928:	f104 0619 	add.w	r6, r4, #25
 800492c:	e7f5      	b.n	800491a <_printf_i+0x22e>
 800492e:	bf00      	nop
 8004930:	08004bdd 	.word	0x08004bdd
 8004934:	08004bee 	.word	0x08004bee

08004938 <_sbrk_r>:
 8004938:	b538      	push	{r3, r4, r5, lr}
 800493a:	4d06      	ldr	r5, [pc, #24]	; (8004954 <_sbrk_r+0x1c>)
 800493c:	2300      	movs	r3, #0
 800493e:	4604      	mov	r4, r0
 8004940:	4608      	mov	r0, r1
 8004942:	602b      	str	r3, [r5, #0]
 8004944:	f7fc f8f4 	bl	8000b30 <_sbrk>
 8004948:	1c43      	adds	r3, r0, #1
 800494a:	d102      	bne.n	8004952 <_sbrk_r+0x1a>
 800494c:	682b      	ldr	r3, [r5, #0]
 800494e:	b103      	cbz	r3, 8004952 <_sbrk_r+0x1a>
 8004950:	6023      	str	r3, [r4, #0]
 8004952:	bd38      	pop	{r3, r4, r5, pc}
 8004954:	200001f0 	.word	0x200001f0

08004958 <__sread>:
 8004958:	b510      	push	{r4, lr}
 800495a:	460c      	mov	r4, r1
 800495c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004960:	f000 f8a0 	bl	8004aa4 <_read_r>
 8004964:	2800      	cmp	r0, #0
 8004966:	bfab      	itete	ge
 8004968:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800496a:	89a3      	ldrhlt	r3, [r4, #12]
 800496c:	181b      	addge	r3, r3, r0
 800496e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004972:	bfac      	ite	ge
 8004974:	6563      	strge	r3, [r4, #84]	; 0x54
 8004976:	81a3      	strhlt	r3, [r4, #12]
 8004978:	bd10      	pop	{r4, pc}

0800497a <__swrite>:
 800497a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800497e:	461f      	mov	r7, r3
 8004980:	898b      	ldrh	r3, [r1, #12]
 8004982:	05db      	lsls	r3, r3, #23
 8004984:	4605      	mov	r5, r0
 8004986:	460c      	mov	r4, r1
 8004988:	4616      	mov	r6, r2
 800498a:	d505      	bpl.n	8004998 <__swrite+0x1e>
 800498c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004990:	2302      	movs	r3, #2
 8004992:	2200      	movs	r2, #0
 8004994:	f000 f868 	bl	8004a68 <_lseek_r>
 8004998:	89a3      	ldrh	r3, [r4, #12]
 800499a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800499e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049a2:	81a3      	strh	r3, [r4, #12]
 80049a4:	4632      	mov	r2, r6
 80049a6:	463b      	mov	r3, r7
 80049a8:	4628      	mov	r0, r5
 80049aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049ae:	f000 b817 	b.w	80049e0 <_write_r>

080049b2 <__sseek>:
 80049b2:	b510      	push	{r4, lr}
 80049b4:	460c      	mov	r4, r1
 80049b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049ba:	f000 f855 	bl	8004a68 <_lseek_r>
 80049be:	1c43      	adds	r3, r0, #1
 80049c0:	89a3      	ldrh	r3, [r4, #12]
 80049c2:	bf15      	itete	ne
 80049c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80049c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80049ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80049ce:	81a3      	strheq	r3, [r4, #12]
 80049d0:	bf18      	it	ne
 80049d2:	81a3      	strhne	r3, [r4, #12]
 80049d4:	bd10      	pop	{r4, pc}

080049d6 <__sclose>:
 80049d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049da:	f000 b813 	b.w	8004a04 <_close_r>
	...

080049e0 <_write_r>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	4d07      	ldr	r5, [pc, #28]	; (8004a00 <_write_r+0x20>)
 80049e4:	4604      	mov	r4, r0
 80049e6:	4608      	mov	r0, r1
 80049e8:	4611      	mov	r1, r2
 80049ea:	2200      	movs	r2, #0
 80049ec:	602a      	str	r2, [r5, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	f7fc f84d 	bl	8000a8e <_write>
 80049f4:	1c43      	adds	r3, r0, #1
 80049f6:	d102      	bne.n	80049fe <_write_r+0x1e>
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	b103      	cbz	r3, 80049fe <_write_r+0x1e>
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	bd38      	pop	{r3, r4, r5, pc}
 8004a00:	200001f0 	.word	0x200001f0

08004a04 <_close_r>:
 8004a04:	b538      	push	{r3, r4, r5, lr}
 8004a06:	4d06      	ldr	r5, [pc, #24]	; (8004a20 <_close_r+0x1c>)
 8004a08:	2300      	movs	r3, #0
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	4608      	mov	r0, r1
 8004a0e:	602b      	str	r3, [r5, #0]
 8004a10:	f7fc f859 	bl	8000ac6 <_close>
 8004a14:	1c43      	adds	r3, r0, #1
 8004a16:	d102      	bne.n	8004a1e <_close_r+0x1a>
 8004a18:	682b      	ldr	r3, [r5, #0]
 8004a1a:	b103      	cbz	r3, 8004a1e <_close_r+0x1a>
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	bd38      	pop	{r3, r4, r5, pc}
 8004a20:	200001f0 	.word	0x200001f0

08004a24 <_fstat_r>:
 8004a24:	b538      	push	{r3, r4, r5, lr}
 8004a26:	4d07      	ldr	r5, [pc, #28]	; (8004a44 <_fstat_r+0x20>)
 8004a28:	2300      	movs	r3, #0
 8004a2a:	4604      	mov	r4, r0
 8004a2c:	4608      	mov	r0, r1
 8004a2e:	4611      	mov	r1, r2
 8004a30:	602b      	str	r3, [r5, #0]
 8004a32:	f7fc f854 	bl	8000ade <_fstat>
 8004a36:	1c43      	adds	r3, r0, #1
 8004a38:	d102      	bne.n	8004a40 <_fstat_r+0x1c>
 8004a3a:	682b      	ldr	r3, [r5, #0]
 8004a3c:	b103      	cbz	r3, 8004a40 <_fstat_r+0x1c>
 8004a3e:	6023      	str	r3, [r4, #0]
 8004a40:	bd38      	pop	{r3, r4, r5, pc}
 8004a42:	bf00      	nop
 8004a44:	200001f0 	.word	0x200001f0

08004a48 <_isatty_r>:
 8004a48:	b538      	push	{r3, r4, r5, lr}
 8004a4a:	4d06      	ldr	r5, [pc, #24]	; (8004a64 <_isatty_r+0x1c>)
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	4604      	mov	r4, r0
 8004a50:	4608      	mov	r0, r1
 8004a52:	602b      	str	r3, [r5, #0]
 8004a54:	f7fc f853 	bl	8000afe <_isatty>
 8004a58:	1c43      	adds	r3, r0, #1
 8004a5a:	d102      	bne.n	8004a62 <_isatty_r+0x1a>
 8004a5c:	682b      	ldr	r3, [r5, #0]
 8004a5e:	b103      	cbz	r3, 8004a62 <_isatty_r+0x1a>
 8004a60:	6023      	str	r3, [r4, #0]
 8004a62:	bd38      	pop	{r3, r4, r5, pc}
 8004a64:	200001f0 	.word	0x200001f0

08004a68 <_lseek_r>:
 8004a68:	b538      	push	{r3, r4, r5, lr}
 8004a6a:	4d07      	ldr	r5, [pc, #28]	; (8004a88 <_lseek_r+0x20>)
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	4608      	mov	r0, r1
 8004a70:	4611      	mov	r1, r2
 8004a72:	2200      	movs	r2, #0
 8004a74:	602a      	str	r2, [r5, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	f7fc f84c 	bl	8000b14 <_lseek>
 8004a7c:	1c43      	adds	r3, r0, #1
 8004a7e:	d102      	bne.n	8004a86 <_lseek_r+0x1e>
 8004a80:	682b      	ldr	r3, [r5, #0]
 8004a82:	b103      	cbz	r3, 8004a86 <_lseek_r+0x1e>
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	bd38      	pop	{r3, r4, r5, pc}
 8004a88:	200001f0 	.word	0x200001f0

08004a8c <__malloc_lock>:
 8004a8c:	4801      	ldr	r0, [pc, #4]	; (8004a94 <__malloc_lock+0x8>)
 8004a8e:	f7ff bb55 	b.w	800413c <__retarget_lock_acquire_recursive>
 8004a92:	bf00      	nop
 8004a94:	200001e8 	.word	0x200001e8

08004a98 <__malloc_unlock>:
 8004a98:	4801      	ldr	r0, [pc, #4]	; (8004aa0 <__malloc_unlock+0x8>)
 8004a9a:	f7ff bb50 	b.w	800413e <__retarget_lock_release_recursive>
 8004a9e:	bf00      	nop
 8004aa0:	200001e8 	.word	0x200001e8

08004aa4 <_read_r>:
 8004aa4:	b538      	push	{r3, r4, r5, lr}
 8004aa6:	4d07      	ldr	r5, [pc, #28]	; (8004ac4 <_read_r+0x20>)
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	4608      	mov	r0, r1
 8004aac:	4611      	mov	r1, r2
 8004aae:	2200      	movs	r2, #0
 8004ab0:	602a      	str	r2, [r5, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	f7fb ffce 	bl	8000a54 <_read>
 8004ab8:	1c43      	adds	r3, r0, #1
 8004aba:	d102      	bne.n	8004ac2 <_read_r+0x1e>
 8004abc:	682b      	ldr	r3, [r5, #0]
 8004abe:	b103      	cbz	r3, 8004ac2 <_read_r+0x1e>
 8004ac0:	6023      	str	r3, [r4, #0]
 8004ac2:	bd38      	pop	{r3, r4, r5, pc}
 8004ac4:	200001f0 	.word	0x200001f0

08004ac8 <_init>:
 8004ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aca:	bf00      	nop
 8004acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ace:	bc08      	pop	{r3}
 8004ad0:	469e      	mov	lr, r3
 8004ad2:	4770      	bx	lr

08004ad4 <_fini>:
 8004ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad6:	bf00      	nop
 8004ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ada:	bc08      	pop	{r3}
 8004adc:	469e      	mov	lr, r3
 8004ade:	4770      	bx	lr
