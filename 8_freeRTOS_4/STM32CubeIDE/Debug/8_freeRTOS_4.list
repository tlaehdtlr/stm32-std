
8_freeRTOS_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dd0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08005f60  08005f60  00015f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060a8  080060a8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080060a8  080060a8  000160a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060b0  080060b0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060b0  080060b0  000160b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060b4  080060b4  000160b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080060b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c5c  20000074  0800612c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cd0  0800612c  00021cd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000196e9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003464  00000000  00000000  0003978d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014b8  00000000  00000000  0003cbf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001320  00000000  00000000  0003e0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d96c  00000000  00000000  0003f3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011c4e  00000000  00000000  0005cd3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b48a5  00000000  00000000  0006e98a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012322f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c84  00000000  00000000  001232ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f48 	.word	0x08005f48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005f48 	.word	0x08005f48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	; (800059c <vApplicationGetIdleTaskMemory+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000098 	.word	0x20000098
 80005a0:	200000ec 	.word	0x200000ec

080005a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <MX_FREERTOS_Init+0x60>)
 80005ac:	1d3c      	adds	r4, r7, #4
 80005ae:	461d      	mov	r5, r3
 80005b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f002 fdf8 	bl	80031b6 <osThreadCreate>
 80005c6:	4602      	mov	r2, r0
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_FREERTOS_Init+0x64>)
 80005ca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */


  /* create queue for button task */
  xButtonQueueHandle = xQueueCreate(4, sizeof(uint8_t));
 80005cc:	2200      	movs	r2, #0
 80005ce:	2101      	movs	r1, #1
 80005d0:	2004      	movs	r0, #4
 80005d2:	f003 fb85 	bl	8003ce0 <xQueueGenericCreate>
 80005d6:	4602      	mov	r2, r0
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_FREERTOS_Init+0x68>)
 80005da:	601a      	str	r2, [r3, #0]
  /* be viewable in a RTOS kernel aware debugger */
  vQueueAddToRegistry(xButtonQueueHandle, "buttonQueue");
 80005dc:	4b0b      	ldr	r3, [pc, #44]	; (800060c <MX_FREERTOS_Init+0x68>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	490b      	ldr	r1, [pc, #44]	; (8000610 <MX_FREERTOS_Init+0x6c>)
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 fe42 	bl	800426c <vQueueAddToRegistry>
  /* create button task */
  xTaskCreate(vButton_Task, "buttonTask", configMINIMAL_STACK_SIZE, NULL, 1, &xButtonTaskHandle);
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <MX_FREERTOS_Init+0x70>)
 80005ea:	9301      	str	r3, [sp, #4]
 80005ec:	2301      	movs	r3, #1
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	2300      	movs	r3, #0
 80005f2:	2280      	movs	r2, #128	; 0x80
 80005f4:	4908      	ldr	r1, [pc, #32]	; (8000618 <MX_FREERTOS_Init+0x74>)
 80005f6:	4809      	ldr	r0, [pc, #36]	; (800061c <MX_FREERTOS_Init+0x78>)
 80005f8:	f003 feba 	bl	8004370 <xTaskCreate>
  //xTaskCreate(vPrint_Task, "printTask", configMINIMAL_STACK_SIZE, NULL, 1, &printTaskHandle);

  /* USER CODE END RTOS_THREADS */

}
 80005fc:	bf00      	nop
 80005fe:	3720      	adds	r7, #32
 8000600:	46bd      	mov	sp, r7
 8000602:	bdb0      	pop	{r4, r5, r7, pc}
 8000604:	08005f84 	.word	0x08005f84
 8000608:	20001bb8 	.word	0x20001bb8
 800060c:	20000094 	.word	0x20000094
 8000610:	08005f60 	.word	0x08005f60
 8000614:	20000090 	.word	0x20000090
 8000618:	08005f6c 	.word	0x08005f6c
 800061c:	08000661 	.word	0x08000661

08000620 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f002 fe10 	bl	800324e <osDelay>
 800062e:	e7fb      	b.n	8000628 <StartDefaultTask+0x8>

08000630 <vButton_QueueSendFromISR>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void vButton_QueueSendFromISR(uint8_t* pucButtonState)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
  //buttonCtl* peButtonReq = (buttonCtl*)pucButtonState;
  if (xButtonQueueHandle != NULL)
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <vButton_QueueSendFromISR+0x2c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d007      	beq.n	8000654 <vButton_QueueSendFromISR+0x24>
  {
    xQueueSendFromISR(xButtonQueueHandle, pucButtonState, &xHigherPriorityTaskWoken);
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <vButton_QueueSendFromISR+0x2c>)
 8000646:	6818      	ldr	r0, [r3, #0]
 8000648:	f107 020c 	add.w	r2, r7, #12
 800064c:	2300      	movs	r3, #0
 800064e:	6879      	ldr	r1, [r7, #4]
 8000650:	f003 fba4 	bl	8003d9c <xQueueGenericSendFromISR>

  }
}
 8000654:	bf00      	nop
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000094 	.word	0x20000094

08000660 <vButton_Task>:

void vButton_Task()
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
  printf("On!! \r\n");
 8000666:	480c      	ldr	r0, [pc, #48]	; (8000698 <vButton_Task+0x38>)
 8000668:	f004 fd9a 	bl	80051a0 <puts>
  //buttonCtl* btnCtl;
  uint8_t btnCtl;
  for (;;)
  {
    if (xQueueReceive(xButtonQueueHandle, &btnCtl, 1000))
 800066c:	4b0b      	ldr	r3, [pc, #44]	; (800069c <vButton_Task+0x3c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	1df9      	adds	r1, r7, #7
 8000672:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000676:	4618      	mov	r0, r3
 8000678:	f003 fc24 	bl	8003ec4 <xQueueReceive>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d005      	beq.n	800068e <vButton_Task+0x2e>
    {
        printf("here : %d \r\n", btnCtl);
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	4619      	mov	r1, r3
 8000686:	4806      	ldr	r0, [pc, #24]	; (80006a0 <vButton_Task+0x40>)
 8000688:	f004 fd16 	bl	80050b8 <iprintf>
 800068c:	e7ee      	b.n	800066c <vButton_Task+0xc>
    }
    else
    {
      printf("no! \r\n");
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <vButton_Task+0x44>)
 8000690:	f004 fd86 	bl	80051a0 <puts>
    if (xQueueReceive(xButtonQueueHandle, &btnCtl, 1000))
 8000694:	e7ea      	b.n	800066c <vButton_Task+0xc>
 8000696:	bf00      	nop
 8000698:	08005fa0 	.word	0x08005fa0
 800069c:	20000094 	.word	0x20000094
 80006a0:	08005fa8 	.word	0x08005fa8
 80006a4:	08005fb8 	.word	0x08005fb8

080006a8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_GPIO_Init+0x78>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a17      	ldr	r2, [pc, #92]	; (8000720 <MX_GPIO_Init+0x78>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_GPIO_Init+0x78>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_GPIO_Init+0x78>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	4a11      	ldr	r2, [pc, #68]	; (8000720 <MX_GPIO_Init+0x78>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_GPIO_Init+0x78>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_GPIO_Init+0x7c>)
 80006f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	4619      	mov	r1, r3
 8000702:	4809      	ldr	r0, [pc, #36]	; (8000728 <MX_GPIO_Init+0x80>)
 8000704:	f000 fc16 	bl	8000f34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000708:	2200      	movs	r2, #0
 800070a:	2100      	movs	r1, #0
 800070c:	2028      	movs	r0, #40	; 0x28
 800070e:	f000 fbe7 	bl	8000ee0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000712:	2028      	movs	r0, #40	; 0x28
 8000714:	f000 fc00 	bl	8000f18 <HAL_NVIC_EnableIRQ>

}
 8000718:	bf00      	nop
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40021000 	.word	0x40021000
 8000724:	10310000 	.word	0x10310000
 8000728:	48000800 	.word	0x48000800

0800072c <__io_putchar>:
#else
    #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000734:	1d39      	adds	r1, r7, #4
 8000736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800073a:	2201      	movs	r2, #1
 800073c:	4803      	ldr	r0, [pc, #12]	; (800074c <__io_putchar+0x20>)
 800073e:	f002 f8ef 	bl	8002920 <HAL_UART_Transmit>
  return ch;
 8000742:	687b      	ldr	r3, [r7, #4]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20001c08 	.word	0x20001c08

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000754:	f000 fad4 	bl	8000d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000758:	f000 f809 	bl	800076e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075c:	f7ff ffa4 	bl	80006a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000760:	f000 f9fa 	bl	8000b58 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000764:	f7ff ff1e 	bl	80005a4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000768:	f002 fd1e 	bl	80031a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800076c:	e7fe      	b.n	800076c <main+0x1c>

0800076e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b0a4      	sub	sp, #144	; 0x90
 8000772:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000774:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000778:	2244      	movs	r2, #68	; 0x44
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f004 fc92 	bl	80050a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000782:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2234      	movs	r2, #52	; 0x34
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f004 fc84 	bl	80050a6 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800079e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007a2:	f000 fd77 	bl	8001294 <HAL_PWREx_ControlVoltageScaling>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x42>
  {
    Error_Handler();
 80007ac:	f000 f886 	bl	80008bc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007b0:	2310      	movs	r3, #16
 80007b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007b4:	2301      	movs	r3, #1
 80007b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007bc:	2360      	movs	r3, #96	; 0x60
 80007be:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c0:	2302      	movs	r3, #2
 80007c2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007c4:	2301      	movs	r3, #1
 80007c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007c8:	2301      	movs	r3, #1
 80007ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007ce:	2328      	movs	r3, #40	; 0x28
 80007d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007da:	2302      	movs	r3, #2
 80007dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 fdab 	bl	8001340 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80007f0:	f000 f864 	bl	80008bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	230f      	movs	r3, #15
 80007f6:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f8:	2303      	movs	r3, #3
 80007fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000808:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800080c:	2104      	movs	r1, #4
 800080e:	4618      	mov	r0, r3
 8000810:	f001 f9fc 	bl	8001c0c <HAL_RCC_ClockConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800081a:	f000 f84f 	bl	80008bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800081e:	2301      	movs	r3, #1
 8000820:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	4618      	mov	r0, r3
 800082a:	f001 fc25 	bl	8002078 <HAL_RCCEx_PeriphCLKConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000834:	f000 f842 	bl	80008bc <Error_Handler>
  }
}
 8000838:	bf00      	nop
 800083a:	3790      	adds	r7, #144	; 0x90
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 800084a:	88fb      	ldrh	r3, [r7, #6]
 800084c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000850:	d11a      	bne.n	8000888 <HAL_GPIO_EXTI_Callback+0x48>
  {
    GPIO_PinState btn_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000856:	480e      	ldr	r0, [pc, #56]	; (8000890 <HAL_GPIO_EXTI_Callback+0x50>)
 8000858:	f000 fcde 	bl	8001218 <HAL_GPIO_ReadPin>
 800085c:	4603      	mov	r3, r0
 800085e:	73fb      	strb	r3, [r7, #15]
    uint8_t _btn_state;
    _btn_state = btn_state == GPIO_PIN_RESET? 0:1;
 8000860:	7bfb      	ldrb	r3, [r7, #15]
 8000862:	2b00      	cmp	r3, #0
 8000864:	bf14      	ite	ne
 8000866:	2301      	movne	r3, #1
 8000868:	2300      	moveq	r3, #0
 800086a:	b2db      	uxtb	r3, r3
 800086c:	73bb      	strb	r3, [r7, #14]
    vButton_QueueSendFromISR(&_btn_state);
 800086e:	f107 030e 	add.w	r3, r7, #14
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fedc 	bl	8000630 <vButton_QueueSendFromISR>
    if (g_prev_btn_state != btn_state)
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_GPIO_EXTI_Callback+0x54>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	7bfa      	ldrb	r2, [r7, #15]
 800087e:	429a      	cmp	r2, r3
 8000880:	d002      	beq.n	8000888 <HAL_GPIO_EXTI_Callback+0x48>
    {
      g_prev_btn_state = btn_state;
 8000882:	4a04      	ldr	r2, [pc, #16]	; (8000894 <HAL_GPIO_EXTI_Callback+0x54>)
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	7013      	strb	r3, [r2, #0]
    }
  }
}
 8000888:	bf00      	nop
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	48000800 	.word	0x48000800
 8000894:	200002ec 	.word	0x200002ec

08000898 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d101      	bne.n	80008ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008aa:	f000 fa41 	bl	8000d30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40001000 	.word	0x40001000

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <Error_Handler+0x6>

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <HAL_MspInit+0x4c>)
 80008cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ce:	4a10      	ldr	r2, [pc, #64]	; (8000910 <HAL_MspInit+0x4c>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6613      	str	r3, [r2, #96]	; 0x60
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <HAL_MspInit+0x4c>)
 80008d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <HAL_MspInit+0x4c>)
 80008e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <HAL_MspInit+0x4c>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ec:	6593      	str	r3, [r2, #88]	; 0x58
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <HAL_MspInit+0x4c>)
 80008f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	210f      	movs	r1, #15
 80008fe:	f06f 0001 	mvn.w	r0, #1
 8000902:	f000 faed 	bl	8000ee0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40021000 	.word	0x40021000

08000914 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08c      	sub	sp, #48	; 0x30
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 8000924:	2200      	movs	r2, #0
 8000926:	6879      	ldr	r1, [r7, #4]
 8000928:	2036      	movs	r0, #54	; 0x36
 800092a:	f000 fad9 	bl	8000ee0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800092e:	2036      	movs	r0, #54	; 0x36
 8000930:	f000 faf2 	bl	8000f18 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <HAL_InitTick+0x9c>)
 8000936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000938:	4a1d      	ldr	r2, [pc, #116]	; (80009b0 <HAL_InitTick+0x9c>)
 800093a:	f043 0310 	orr.w	r3, r3, #16
 800093e:	6593      	str	r3, [r2, #88]	; 0x58
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <HAL_InitTick+0x9c>)
 8000942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000944:	f003 0310 	and.w	r3, r3, #16
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800094c:	f107 0210 	add.w	r2, r7, #16
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4611      	mov	r1, r2
 8000956:	4618      	mov	r0, r3
 8000958:	f001 fafc 	bl	8001f54 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800095c:	f001 face 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 8000960:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000964:	4a13      	ldr	r2, [pc, #76]	; (80009b4 <HAL_InitTick+0xa0>)
 8000966:	fba2 2303 	umull	r2, r3, r2, r3
 800096a:	0c9b      	lsrs	r3, r3, #18
 800096c:	3b01      	subs	r3, #1
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_InitTick+0xa4>)
 8000972:	4a12      	ldr	r2, [pc, #72]	; (80009bc <HAL_InitTick+0xa8>)
 8000974:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <HAL_InitTick+0xa4>)
 8000978:	f240 32e7 	movw	r2, #999	; 0x3e7
 800097c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <HAL_InitTick+0xa4>)
 8000980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000982:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_InitTick+0xa4>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <HAL_InitTick+0xa4>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000990:	4809      	ldr	r0, [pc, #36]	; (80009b8 <HAL_InitTick+0xa4>)
 8000992:	f001 fcf7 	bl	8002384 <HAL_TIM_Base_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d104      	bne.n	80009a6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800099c:	4806      	ldr	r0, [pc, #24]	; (80009b8 <HAL_InitTick+0xa4>)
 800099e:	f001 fd53 	bl	8002448 <HAL_TIM_Base_Start_IT>
 80009a2:	4603      	mov	r3, r0
 80009a4:	e000      	b.n	80009a8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3730      	adds	r7, #48	; 0x30
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40021000 	.word	0x40021000
 80009b4:	431bde83 	.word	0x431bde83
 80009b8:	20001bbc 	.word	0x20001bbc
 80009bc:	40001000 	.word	0x40001000

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <NMI_Handler+0x4>

080009c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <HardFault_Handler+0x4>

080009cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <MemManage_Handler+0x4>

080009d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <UsageFault_Handler+0x4>

080009de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80009f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009f4:	f000 fc28 	bl	8001248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}

080009fc <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <TIM6_IRQHandler+0x10>)
 8000a02:	f001 fd75 	bl	80024f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20001bbc 	.word	0x20001bbc

08000a10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	e00a      	b.n	8000a38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a22:	f3af 8000 	nop.w
 8000a26:	4601      	mov	r1, r0
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	60ba      	str	r2, [r7, #8]
 8000a2e:	b2ca      	uxtb	r2, r1
 8000a30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	3301      	adds	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	dbf0      	blt.n	8000a22 <_read+0x12>
	}

return len;
 8000a40:	687b      	ldr	r3, [r7, #4]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b086      	sub	sp, #24
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	60f8      	str	r0, [r7, #12]
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	e009      	b.n	8000a70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	1c5a      	adds	r2, r3, #1
 8000a60:	60ba      	str	r2, [r7, #8]
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fe61 	bl	800072c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	dbf1      	blt.n	8000a5c <_write+0x12>
	}
	return len;
 8000a78:	687b      	ldr	r3, [r7, #4]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <_close>:

int _close(int file)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
	return -1;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aaa:	605a      	str	r2, [r3, #4]
	return 0;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <_isatty>:

int _isatty(int file)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
	return 0;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3714      	adds	r7, #20
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
	...

08000aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af4:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <_sbrk+0x5c>)
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <_sbrk+0x60>)
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d102      	bne.n	8000b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <_sbrk+0x64>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <_sbrk+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d207      	bcs.n	8000b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b1c:	f004 fa8e 	bl	800503c <__errno>
 8000b20:	4602      	mov	r2, r0
 8000b22:	230c      	movs	r3, #12
 8000b24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2a:	e009      	b.n	8000b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <_sbrk+0x64>)
 8000b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000a000 	.word	0x2000a000
 8000b4c:	00000400 	.word	0x00000400
 8000b50:	200002f0 	.word	0x200002f0
 8000b54:	20001cd0 	.word	0x20001cd0

08000b58 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_USART1_UART_Init+0x58>)
 8000b5e:	4a15      	ldr	r2, [pc, #84]	; (8000bb4 <MX_USART1_UART_Init+0x5c>)
 8000b60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <MX_USART1_UART_Init+0x58>)
 8000b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_USART1_UART_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_USART1_UART_Init+0x58>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_USART1_UART_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_USART1_UART_Init+0x58>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <MX_USART1_UART_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_USART1_UART_Init+0x58>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <MX_USART1_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_USART1_UART_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_USART1_UART_Init+0x58>)
 8000b9c:	f001 fe72 	bl	8002884 <HAL_UART_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ba6:	f7ff fe89 	bl	80008bc <Error_Handler>
  }

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20001c08 	.word	0x20001c08
 8000bb4:	40013800 	.word	0x40013800

08000bb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a18      	ldr	r2, [pc, #96]	; (8000c38 <HAL_UART_MspInit+0x80>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d129      	bne.n	8000c2e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <HAL_UART_MspInit+0x84>)
 8000bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bde:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <HAL_UART_MspInit+0x84>)
 8000be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be4:	6613      	str	r3, [r2, #96]	; 0x60
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <HAL_UART_MspInit+0x84>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_UART_MspInit+0x84>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	4a11      	ldr	r2, [pc, #68]	; (8000c3c <HAL_UART_MspInit+0x84>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <HAL_UART_MspInit+0x84>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c1c:	2307      	movs	r3, #7
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4619      	mov	r1, r3
 8000c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2a:	f000 f983 	bl	8000f34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40013800 	.word	0x40013800
 8000c3c:	40021000 	.word	0x40021000

08000c40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c44:	f000 f826 	bl	8000c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c48:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c4a:	e003      	b.n	8000c54 <LoopCopyDataInit>

08000c4c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c4e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c50:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c52:	3104      	adds	r1, #4

08000c54 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c54:	480a      	ldr	r0, [pc, #40]	; (8000c80 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c58:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c5a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c5c:	d3f6      	bcc.n	8000c4c <CopyDataInit>
	ldr	r2, =_sbss
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c60:	e002      	b.n	8000c68 <LoopFillZerobss>

08000c62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c62:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c64:	f842 3b04 	str.w	r3, [r2], #4

08000c68 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <LoopForever+0x16>)
	cmp	r2, r3
 8000c6a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c6c:	d3f9      	bcc.n	8000c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f004 f9eb 	bl	8005048 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c72:	f7ff fd6d 	bl	8000750 <main>

08000c76 <LoopForever>:

LoopForever:
    b LoopForever
 8000c76:	e7fe      	b.n	8000c76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c78:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000c7c:	080060b8 	.word	0x080060b8
	ldr	r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c84:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000c88:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000c8c:	20001cd0 	.word	0x20001cd0

08000c90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC1_2_IRQHandler>
	...

08000c94 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <SystemInit+0x64>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9e:	4a16      	ldr	r2, [pc, #88]	; (8000cf8 <SystemInit+0x64>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <SystemInit+0x68>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a13      	ldr	r2, [pc, #76]	; (8000cfc <SystemInit+0x68>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <SystemInit+0x68>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <SystemInit+0x68>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a0f      	ldr	r2, [pc, #60]	; (8000cfc <SystemInit+0x68>)
 8000cc0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000cc4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000cc8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <SystemInit+0x68>)
 8000ccc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cd0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <SystemInit+0x68>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a09      	ldr	r2, [pc, #36]	; (8000cfc <SystemInit+0x68>)
 8000cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cdc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000cde:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <SystemInit+0x68>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SystemInit+0x64>)
 8000ce6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cea:	609a      	str	r2, [r3, #8]
#endif
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00
 8000cfc:	40021000 	.word	0x40021000

08000d00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0a:	2003      	movs	r0, #3
 8000d0c:	f000 f8dd 	bl	8000eca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d10:	2000      	movs	r0, #0
 8000d12:	f7ff fdff 	bl	8000914 <HAL_InitTick>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d002      	beq.n	8000d22 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	71fb      	strb	r3, [r7, #7]
 8000d20:	e001      	b.n	8000d26 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d22:	f7ff fdcf 	bl	80008c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d26:	79fb      	ldrb	r3, [r7, #7]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x20>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x24>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_IncTick+0x24>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20001c88 	.word	0x20001c88

08000d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20001c88 	.word	0x20001c88

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	; (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	; (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ff4c 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
 8000eec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef2:	f7ff ff61 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000ef6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	68b9      	ldr	r1, [r7, #8]
 8000efc:	6978      	ldr	r0, [r7, #20]
 8000efe:	f7ff ffb1 	bl	8000e64 <NVIC_EncodePriority>
 8000f02:	4602      	mov	r2, r0
 8000f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f08:	4611      	mov	r1, r2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff80 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f10:	bf00      	nop
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ff54 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b087      	sub	sp, #28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f42:	e14e      	b.n	80011e2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	2101      	movs	r1, #1
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f50:	4013      	ands	r3, r2
 8000f52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 8140 	beq.w	80011dc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d00b      	beq.n	8000f7c <HAL_GPIO_Init+0x48>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d007      	beq.n	8000f7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f70:	2b11      	cmp	r3, #17
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b12      	cmp	r3, #18
 8000f7a:	d130      	bne.n	8000fde <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	091b      	lsrs	r3, r3, #4
 8000fc8:	f003 0201 	and.w	r2, r3, #1
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	2203      	movs	r2, #3
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b02      	cmp	r3, #2
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0xea>
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b12      	cmp	r3, #18
 800101c:	d123      	bne.n	8001066 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	08da      	lsrs	r2, r3, #3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3208      	adds	r2, #8
 8001026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	220f      	movs	r2, #15
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	691a      	ldr	r2, [r3, #16]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	08da      	lsrs	r2, r3, #3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3208      	adds	r2, #8
 8001060:	6939      	ldr	r1, [r7, #16]
 8001062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	2203      	movs	r2, #3
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0203 	and.w	r2, r3, #3
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 809a 	beq.w	80011dc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a8:	4b55      	ldr	r3, [pc, #340]	; (8001200 <HAL_GPIO_Init+0x2cc>)
 80010aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ac:	4a54      	ldr	r2, [pc, #336]	; (8001200 <HAL_GPIO_Init+0x2cc>)
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	6613      	str	r3, [r2, #96]	; 0x60
 80010b4:	4b52      	ldr	r3, [pc, #328]	; (8001200 <HAL_GPIO_Init+0x2cc>)
 80010b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010c0:	4a50      	ldr	r2, [pc, #320]	; (8001204 <HAL_GPIO_Init+0x2d0>)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3302      	adds	r3, #2
 80010c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	220f      	movs	r2, #15
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010ea:	d013      	beq.n	8001114 <HAL_GPIO_Init+0x1e0>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a46      	ldr	r2, [pc, #280]	; (8001208 <HAL_GPIO_Init+0x2d4>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d00d      	beq.n	8001110 <HAL_GPIO_Init+0x1dc>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a45      	ldr	r2, [pc, #276]	; (800120c <HAL_GPIO_Init+0x2d8>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d007      	beq.n	800110c <HAL_GPIO_Init+0x1d8>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a44      	ldr	r2, [pc, #272]	; (8001210 <HAL_GPIO_Init+0x2dc>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d101      	bne.n	8001108 <HAL_GPIO_Init+0x1d4>
 8001104:	2303      	movs	r3, #3
 8001106:	e006      	b.n	8001116 <HAL_GPIO_Init+0x1e2>
 8001108:	2307      	movs	r3, #7
 800110a:	e004      	b.n	8001116 <HAL_GPIO_Init+0x1e2>
 800110c:	2302      	movs	r3, #2
 800110e:	e002      	b.n	8001116 <HAL_GPIO_Init+0x1e2>
 8001110:	2301      	movs	r3, #1
 8001112:	e000      	b.n	8001116 <HAL_GPIO_Init+0x1e2>
 8001114:	2300      	movs	r3, #0
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	f002 0203 	and.w	r2, r2, #3
 800111c:	0092      	lsls	r2, r2, #2
 800111e:	4093      	lsls	r3, r2
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001126:	4937      	ldr	r1, [pc, #220]	; (8001204 <HAL_GPIO_Init+0x2d0>)
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	089b      	lsrs	r3, r3, #2
 800112c:	3302      	adds	r3, #2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001134:	4b37      	ldr	r3, [pc, #220]	; (8001214 <HAL_GPIO_Init+0x2e0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	43db      	mvns	r3, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001158:	4a2e      	ldr	r2, [pc, #184]	; (8001214 <HAL_GPIO_Init+0x2e0>)
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800115e:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <HAL_GPIO_Init+0x2e0>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	43db      	mvns	r3, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001182:	4a24      	ldr	r2, [pc, #144]	; (8001214 <HAL_GPIO_Init+0x2e0>)
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <HAL_GPIO_Init+0x2e0>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	43db      	mvns	r3, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011ac:	4a19      	ldr	r2, [pc, #100]	; (8001214 <HAL_GPIO_Init+0x2e0>)
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <HAL_GPIO_Init+0x2e0>)
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011d6:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <HAL_GPIO_Init+0x2e0>)
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	3301      	adds	r3, #1
 80011e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f47f aea9 	bne.w	8000f44 <HAL_GPIO_Init+0x10>
  }
}
 80011f2:	bf00      	nop
 80011f4:	371c      	adds	r7, #28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000
 8001204:	40010000 	.word	0x40010000
 8001208:	48000400 	.word	0x48000400
 800120c:	48000800 	.word	0x48000800
 8001210:	48000c00 	.word	0x48000c00
 8001214:	40010400 	.word	0x40010400

08001218 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691a      	ldr	r2, [r3, #16]
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	4013      	ands	r3, r2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d002      	beq.n	8001236 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001230:	2301      	movs	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	e001      	b.n	800123a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800123a:	7bfb      	ldrb	r3, [r7, #15]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001254:	695a      	ldr	r2, [r3, #20]
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	4013      	ands	r3, r2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d006      	beq.n	800126c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff faea 	bl	8000840 <HAL_GPIO_EXTI_Callback>
  }
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40010400 	.word	0x40010400

08001278 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <HAL_PWREx_GetVoltageRange+0x18>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40007000 	.word	0x40007000

08001294 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012a2:	d130      	bne.n	8001306 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012a4:	4b23      	ldr	r3, [pc, #140]	; (8001334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012b0:	d038      	beq.n	8001324 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012ba:	4a1e      	ldr	r2, [pc, #120]	; (8001334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2232      	movs	r2, #50	; 0x32
 80012c8:	fb02 f303 	mul.w	r3, r2, r3
 80012cc:	4a1b      	ldr	r2, [pc, #108]	; (800133c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012ce:	fba2 2303 	umull	r2, r3, r2, r3
 80012d2:	0c9b      	lsrs	r3, r3, #18
 80012d4:	3301      	adds	r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012d8:	e002      	b.n	80012e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3b01      	subs	r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ec:	d102      	bne.n	80012f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1f2      	bne.n	80012da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001300:	d110      	bne.n	8001324 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e00f      	b.n	8001326 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800130e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001312:	d007      	beq.n	8001324 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800131c:	4a05      	ldr	r2, [pc, #20]	; (8001334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001322:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40007000 	.word	0x40007000
 8001338:	20000000 	.word	0x20000000
 800133c:	431bde83 	.word	0x431bde83

08001340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	f000 bc56 	b.w	8001c00 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001354:	4ba1      	ldr	r3, [pc, #644]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 030c 	and.w	r3, r3, #12
 800135c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800135e:	4b9f      	ldr	r3, [pc, #636]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0310 	and.w	r3, r3, #16
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 80e6 	beq.w	8001542 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d007      	beq.n	800138c <HAL_RCC_OscConfig+0x4c>
 800137c:	6a3b      	ldr	r3, [r7, #32]
 800137e:	2b0c      	cmp	r3, #12
 8001380:	f040 808d 	bne.w	800149e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	2b01      	cmp	r3, #1
 8001388:	f040 8089 	bne.w	800149e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800138c:	4b93      	ldr	r3, [pc, #588]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d006      	beq.n	80013a6 <HAL_RCC_OscConfig+0x66>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	f000 bc2d 	b.w	8001c00 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013aa:	4b8c      	ldr	r3, [pc, #560]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d004      	beq.n	80013c0 <HAL_RCC_OscConfig+0x80>
 80013b6:	4b89      	ldr	r3, [pc, #548]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013be:	e005      	b.n	80013cc <HAL_RCC_OscConfig+0x8c>
 80013c0:	4b86      	ldr	r3, [pc, #536]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80013c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c6:	091b      	lsrs	r3, r3, #4
 80013c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d224      	bcs.n	800141a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fdef 	bl	8001fb8 <RCC_SetFlashLatencyFromMSIRange>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d002      	beq.n	80013e6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	f000 bc0d 	b.w	8001c00 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013e6:	4b7d      	ldr	r3, [pc, #500]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a7c      	ldr	r2, [pc, #496]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b7a      	ldr	r3, [pc, #488]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fe:	4977      	ldr	r1, [pc, #476]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001400:	4313      	orrs	r3, r2
 8001402:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001404:	4b75      	ldr	r3, [pc, #468]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	4972      	ldr	r1, [pc, #456]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001414:	4313      	orrs	r3, r2
 8001416:	604b      	str	r3, [r1, #4]
 8001418:	e025      	b.n	8001466 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800141a:	4b70      	ldr	r3, [pc, #448]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a6f      	ldr	r2, [pc, #444]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	4b6d      	ldr	r3, [pc, #436]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	496a      	ldr	r1, [pc, #424]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001434:	4313      	orrs	r3, r2
 8001436:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001438:	4b68      	ldr	r3, [pc, #416]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	021b      	lsls	r3, r3, #8
 8001446:	4965      	ldr	r1, [pc, #404]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001448:	4313      	orrs	r3, r2
 800144a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d109      	bne.n	8001466 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001456:	4618      	mov	r0, r3
 8001458:	f000 fdae 	bl	8001fb8 <RCC_SetFlashLatencyFromMSIRange>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e3cc      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001466:	f000 fcb3 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 800146a:	4601      	mov	r1, r0
 800146c:	4b5b      	ldr	r3, [pc, #364]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	091b      	lsrs	r3, r3, #4
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	4a5a      	ldr	r2, [pc, #360]	; (80015e0 <HAL_RCC_OscConfig+0x2a0>)
 8001478:	5cd3      	ldrb	r3, [r2, r3]
 800147a:	f003 031f 	and.w	r3, r3, #31
 800147e:	fa21 f303 	lsr.w	r3, r1, r3
 8001482:	4a58      	ldr	r2, [pc, #352]	; (80015e4 <HAL_RCC_OscConfig+0x2a4>)
 8001484:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001486:	4b58      	ldr	r3, [pc, #352]	; (80015e8 <HAL_RCC_OscConfig+0x2a8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fa42 	bl	8000914 <HAL_InitTick>
 8001490:	4603      	mov	r3, r0
 8001492:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001494:	7dfb      	ldrb	r3, [r7, #23]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d052      	beq.n	8001540 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800149a:	7dfb      	ldrb	r3, [r7, #23]
 800149c:	e3b0      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d032      	beq.n	800150c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014a6:	4b4d      	ldr	r3, [pc, #308]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a4c      	ldr	r2, [pc, #304]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014b2:	f7ff fc51 	bl	8000d58 <HAL_GetTick>
 80014b6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014ba:	f7ff fc4d 	bl	8000d58 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e399      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014cc:	4b43      	ldr	r3, [pc, #268]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014d8:	4b40      	ldr	r3, [pc, #256]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a3f      	ldr	r2, [pc, #252]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80014de:	f043 0308 	orr.w	r3, r3, #8
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b3d      	ldr	r3, [pc, #244]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	493a      	ldr	r1, [pc, #232]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f6:	4b39      	ldr	r3, [pc, #228]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	4935      	ldr	r1, [pc, #212]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001506:	4313      	orrs	r3, r2
 8001508:	604b      	str	r3, [r1, #4]
 800150a:	e01a      	b.n	8001542 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800150c:	4b33      	ldr	r3, [pc, #204]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a32      	ldr	r2, [pc, #200]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001512:	f023 0301 	bic.w	r3, r3, #1
 8001516:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001518:	f7ff fc1e 	bl	8000d58 <HAL_GetTick>
 800151c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001520:	f7ff fc1a 	bl	8000d58 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e366      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001532:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x1e0>
 800153e:	e000      	b.n	8001542 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001540:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d073      	beq.n	8001636 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	2b08      	cmp	r3, #8
 8001552:	d005      	beq.n	8001560 <HAL_RCC_OscConfig+0x220>
 8001554:	6a3b      	ldr	r3, [r7, #32]
 8001556:	2b0c      	cmp	r3, #12
 8001558:	d10e      	bne.n	8001578 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	2b03      	cmp	r3, #3
 800155e:	d10b      	bne.n	8001578 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001560:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d063      	beq.n	8001634 <HAL_RCC_OscConfig+0x2f4>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d15f      	bne.n	8001634 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e343      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001580:	d106      	bne.n	8001590 <HAL_RCC_OscConfig+0x250>
 8001582:	4b16      	ldr	r3, [pc, #88]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a15      	ldr	r2, [pc, #84]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e01d      	b.n	80015cc <HAL_RCC_OscConfig+0x28c>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x274>
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80015a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0x28c>
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a08      	ldr	r2, [pc, #32]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80015ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a05      	ldr	r2, [pc, #20]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80015c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d01b      	beq.n	800160c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d4:	f7ff fbc0 	bl	8000d58 <HAL_GetTick>
 80015d8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015da:	e010      	b.n	80015fe <HAL_RCC_OscConfig+0x2be>
 80015dc:	40021000 	.word	0x40021000
 80015e0:	08005fc8 	.word	0x08005fc8
 80015e4:	20000000 	.word	0x20000000
 80015e8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fbb4 	bl	8000d58 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e300      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015fe:	4ba0      	ldr	r3, [pc, #640]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x2ac>
 800160a:	e014      	b.n	8001636 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fba4 	bl	8000d58 <HAL_GetTick>
 8001610:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fba0 	bl	8000d58 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	; 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e2ec      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001626:	4b96      	ldr	r3, [pc, #600]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x2d4>
 8001632:	e000      	b.n	8001636 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d060      	beq.n	8001704 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	2b04      	cmp	r3, #4
 8001646:	d005      	beq.n	8001654 <HAL_RCC_OscConfig+0x314>
 8001648:	6a3b      	ldr	r3, [r7, #32]
 800164a:	2b0c      	cmp	r3, #12
 800164c:	d119      	bne.n	8001682 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	2b02      	cmp	r3, #2
 8001652:	d116      	bne.n	8001682 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001654:	4b8a      	ldr	r3, [pc, #552]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <HAL_RCC_OscConfig+0x32c>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e2c9      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166c:	4b84      	ldr	r3, [pc, #528]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	061b      	lsls	r3, r3, #24
 800167a:	4981      	ldr	r1, [pc, #516]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 800167c:	4313      	orrs	r3, r2
 800167e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001680:	e040      	b.n	8001704 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d023      	beq.n	80016d2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800168a:	4b7d      	ldr	r3, [pc, #500]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a7c      	ldr	r2, [pc, #496]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001696:	f7ff fb5f 	bl	8000d58 <HAL_GetTick>
 800169a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800169e:	f7ff fb5b 	bl	8000d58 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e2a7      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016b0:	4b73      	ldr	r3, [pc, #460]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016bc:	4b70      	ldr	r3, [pc, #448]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	061b      	lsls	r3, r3, #24
 80016ca:	496d      	ldr	r1, [pc, #436]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
 80016d0:	e018      	b.n	8001704 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d2:	4b6b      	ldr	r3, [pc, #428]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a6a      	ldr	r2, [pc, #424]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 80016d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016de:	f7ff fb3b 	bl	8000d58 <HAL_GetTick>
 80016e2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e6:	f7ff fb37 	bl	8000d58 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e283      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016f8:	4b61      	ldr	r3, [pc, #388]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1f0      	bne.n	80016e6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	2b00      	cmp	r3, #0
 800170e:	d07f      	beq.n	8001810 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d05f      	beq.n	80017d8 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001718:	4b59      	ldr	r3, [pc, #356]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 800171a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800171e:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	699a      	ldr	r2, [r3, #24]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f003 0310 	and.w	r3, r3, #16
 800172a:	429a      	cmp	r2, r3
 800172c:	d037      	beq.n	800179e <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d006      	beq.n	8001746 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e25c      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b00      	cmp	r3, #0
 800174e:	d01b      	beq.n	8001788 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8001750:	4b4b      	ldr	r3, [pc, #300]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 8001752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001756:	4a4a      	ldr	r2, [pc, #296]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001760:	f7ff fafa 	bl	8000d58 <HAL_GetTick>
 8001764:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001768:	f7ff faf6 	bl	8000d58 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b11      	cmp	r3, #17
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e242      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800177a:	4b41      	ldr	r3, [pc, #260]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 800177c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1ef      	bne.n	8001768 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001788:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 800178a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800178e:	f023 0210 	bic.w	r2, r3, #16
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	493a      	ldr	r1, [pc, #232]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 8001798:	4313      	orrs	r3, r2
 800179a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179e:	4b38      	ldr	r3, [pc, #224]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 80017a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017a4:	4a36      	ldr	r2, [pc, #216]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ae:	f7ff fad3 	bl	8000d58 <HAL_GetTick>
 80017b2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b6:	f7ff facf 	bl	8000d58 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b11      	cmp	r3, #17
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e21b      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c8:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 80017ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0ef      	beq.n	80017b6 <HAL_RCC_OscConfig+0x476>
 80017d6:	e01b      	b.n	8001810 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d8:	4b29      	ldr	r3, [pc, #164]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 80017da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017de:	4a28      	ldr	r2, [pc, #160]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 80017e0:	f023 0301 	bic.w	r3, r3, #1
 80017e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e8:	f7ff fab6 	bl	8000d58 <HAL_GetTick>
 80017ec:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f0:	f7ff fab2 	bl	8000d58 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b11      	cmp	r3, #17
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e1fe      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001802:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 8001804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1ef      	bne.n	80017f0 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 80c1 	beq.w	80019a0 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001824:	4b16      	ldr	r3, [pc, #88]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 8001826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d10e      	bne.n	800184e <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 8001832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001834:	4a12      	ldr	r2, [pc, #72]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 8001836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183a:	6593      	str	r3, [r2, #88]	; 0x58
 800183c:	4b10      	ldr	r3, [pc, #64]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 800183e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001848:	2301      	movs	r3, #1
 800184a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800184e:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <HAL_RCC_OscConfig+0x544>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001856:	2b00      	cmp	r3, #0
 8001858:	d11c      	bne.n	8001894 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_RCC_OscConfig+0x544>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <HAL_RCC_OscConfig+0x544>)
 8001860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001866:	f7ff fa77 	bl	8000d58 <HAL_GetTick>
 800186a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186c:	e00c      	b.n	8001888 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186e:	f7ff fa73 	bl	8000d58 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d905      	bls.n	8001888 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e1bf      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
 8001880:	40021000 	.word	0x40021000
 8001884:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001888:	4bb1      	ldr	r3, [pc, #708]	; (8001b50 <HAL_RCC_OscConfig+0x810>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0ec      	beq.n	800186e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d02c      	beq.n	80018fa <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80018a0:	4bac      	ldr	r3, [pc, #688]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80018a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b2:	49a8      	ldr	r1, [pc, #672]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d010      	beq.n	80018e8 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80018c6:	4ba3      	ldr	r3, [pc, #652]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80018c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018cc:	4aa1      	ldr	r2, [pc, #644]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018d6:	4b9f      	ldr	r3, [pc, #636]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80018d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018dc:	4a9d      	ldr	r2, [pc, #628]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018e6:	e018      	b.n	800191a <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018e8:	4b9a      	ldr	r3, [pc, #616]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80018ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ee:	4a99      	ldr	r2, [pc, #612]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018f8:	e00f      	b.n	800191a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018fa:	4b96      	ldr	r3, [pc, #600]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80018fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001900:	4a94      	ldr	r2, [pc, #592]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800190a:	4b92      	ldr	r3, [pc, #584]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 800190c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001910:	4a90      	ldr	r2, [pc, #576]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001912:	f023 0304 	bic.w	r3, r3, #4
 8001916:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d016      	beq.n	8001950 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001922:	f7ff fa19 	bl	8000d58 <HAL_GetTick>
 8001926:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001928:	e00a      	b.n	8001940 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192a:	f7ff fa15 	bl	8000d58 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	f241 3288 	movw	r2, #5000	; 0x1388
 8001938:	4293      	cmp	r3, r2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e15f      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001940:	4b84      	ldr	r3, [pc, #528]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0ed      	beq.n	800192a <HAL_RCC_OscConfig+0x5ea>
 800194e:	e01d      	b.n	800198c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001950:	f7ff fa02 	bl	8000d58 <HAL_GetTick>
 8001954:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001956:	e00a      	b.n	800196e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001958:	f7ff f9fe 	bl	8000d58 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f241 3288 	movw	r2, #5000	; 0x1388
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e148      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800196e:	4b79      	ldr	r3, [pc, #484]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1ed      	bne.n	8001958 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800197c:	4b75      	ldr	r3, [pc, #468]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 800197e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001982:	4a74      	ldr	r2, [pc, #464]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800198c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001990:	2b01      	cmp	r3, #1
 8001992:	d105      	bne.n	80019a0 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001994:	4b6f      	ldr	r3, [pc, #444]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001998:	4a6e      	ldr	r2, [pc, #440]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 800199a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800199e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0320 	and.w	r3, r3, #32
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d03c      	beq.n	8001a26 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d01c      	beq.n	80019ee <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019b4:	4b67      	ldr	r3, [pc, #412]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80019b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ba:	4a66      	ldr	r2, [pc, #408]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c4:	f7ff f9c8 	bl	8000d58 <HAL_GetTick>
 80019c8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019cc:	f7ff f9c4 	bl	8000d58 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e110      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019de:	4b5d      	ldr	r3, [pc, #372]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80019e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0ef      	beq.n	80019cc <HAL_RCC_OscConfig+0x68c>
 80019ec:	e01b      	b.n	8001a26 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019ee:	4b59      	ldr	r3, [pc, #356]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80019f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019f4:	4a57      	ldr	r2, [pc, #348]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80019f6:	f023 0301 	bic.w	r3, r3, #1
 80019fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fe:	f7ff f9ab 	bl	8000d58 <HAL_GetTick>
 8001a02:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a06:	f7ff f9a7 	bl	8000d58 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e0f3      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a18:	4b4e      	ldr	r3, [pc, #312]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001a1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1ef      	bne.n	8001a06 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 80e7 	beq.w	8001bfe <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	f040 80b7 	bne.w	8001ba8 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a3a:	4b46      	ldr	r3, [pc, #280]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f003 0203 	and.w	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d124      	bne.n	8001a98 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d11b      	bne.n	8001a98 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d113      	bne.n	8001a98 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7a:	085b      	lsrs	r3, r3, #1
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d109      	bne.n	8001a98 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	085b      	lsrs	r3, r3, #1
 8001a90:	3b01      	subs	r3, #1
 8001a92:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d061      	beq.n	8001b5c <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a98:	6a3b      	ldr	r3, [r7, #32]
 8001a9a:	2b0c      	cmp	r3, #12
 8001a9c:	d056      	beq.n	8001b4c <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a9e:	4b2d      	ldr	r3, [pc, #180]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a2c      	ldr	r2, [pc, #176]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001aa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aa8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001aaa:	f7ff f955 	bl	8000d58 <HAL_GetTick>
 8001aae:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab2:	f7ff f951 	bl	8000d58 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e09d      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac4:	4b23      	ldr	r3, [pc, #140]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1f0      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad0:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_RCC_OscConfig+0x818>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ae0:	3a01      	subs	r2, #1
 8001ae2:	0112      	lsls	r2, r2, #4
 8001ae4:	4311      	orrs	r1, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001aea:	0212      	lsls	r2, r2, #8
 8001aec:	4311      	orrs	r1, r2
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001af2:	0852      	lsrs	r2, r2, #1
 8001af4:	3a01      	subs	r2, #1
 8001af6:	0552      	lsls	r2, r2, #21
 8001af8:	4311      	orrs	r1, r2
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001afe:	0852      	lsrs	r2, r2, #1
 8001b00:	3a01      	subs	r2, #1
 8001b02:	0652      	lsls	r2, r2, #25
 8001b04:	430a      	orrs	r2, r1
 8001b06:	4913      	ldr	r1, [pc, #76]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a10      	ldr	r2, [pc, #64]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b18:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b24:	f7ff f918 	bl	8000d58 <HAL_GetTick>
 8001b28:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2c:	f7ff f914 	bl	8000d58 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e060      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b4a:	e058      	b.n	8001bfe <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e057      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
 8001b50:	40007000 	.word	0x40007000
 8001b54:	40021000 	.word	0x40021000
 8001b58:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5c:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d14a      	bne.n	8001bfe <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b68:	4b27      	ldr	r3, [pc, #156]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a26      	ldr	r2, [pc, #152]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b74:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	4a23      	ldr	r2, [pc, #140]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b80:	f7ff f8ea 	bl	8000d58 <HAL_GetTick>
 8001b84:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b88:	f7ff f8e6 	bl	8000d58 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e032      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9a:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x848>
 8001ba6:	e02a      	b.n	8001bfe <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
 8001baa:	2b0c      	cmp	r3, #12
 8001bac:	d025      	beq.n	8001bfa <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a15      	ldr	r2, [pc, #84]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001bb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bb8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001bba:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	4a12      	ldr	r2, [pc, #72]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001bc0:	f023 0303 	bic.w	r3, r3, #3
 8001bc4:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	4a0f      	ldr	r2, [pc, #60]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001bcc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001bd0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd2:	f7ff f8c1 	bl	8000d58 <HAL_GetTick>
 8001bd6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bda:	f7ff f8bd 	bl	8000d58 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e009      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f0      	bne.n	8001bda <HAL_RCC_OscConfig+0x89a>
 8001bf8:	e001      	b.n	8001bfe <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3728      	adds	r7, #40	; 0x28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40021000 	.word	0x40021000

08001c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0c8      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c20:	4b66      	ldr	r3, [pc, #408]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d910      	bls.n	8001c50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b63      	ldr	r3, [pc, #396]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 0207 	bic.w	r2, r3, #7
 8001c36:	4961      	ldr	r1, [pc, #388]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b5f      	ldr	r3, [pc, #380]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0b0      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d04c      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d107      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c64:	4b56      	ldr	r3, [pc, #344]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d121      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e09e      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d107      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c7c:	4b50      	ldr	r3, [pc, #320]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d115      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e092      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c94:	4b4a      	ldr	r3, [pc, #296]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d109      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e086      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca4:	4b46      	ldr	r3, [pc, #280]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e07e      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cb4:	4b42      	ldr	r3, [pc, #264]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f023 0203 	bic.w	r2, r3, #3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	493f      	ldr	r1, [pc, #252]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc6:	f7ff f847 	bl	8000d58 <HAL_GetTick>
 8001cca:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cce:	f7ff f843 	bl	8000d58 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e066      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce4:	4b36      	ldr	r3, [pc, #216]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 020c 	and.w	r2, r3, #12
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d1eb      	bne.n	8001cce <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d008      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d02:	4b2f      	ldr	r3, [pc, #188]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	492c      	ldr	r1, [pc, #176]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d14:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d210      	bcs.n	8001d44 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 0207 	bic.w	r2, r3, #7
 8001d2a:	4924      	ldr	r1, [pc, #144]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b22      	ldr	r3, [pc, #136]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e036      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4918      	ldr	r1, [pc, #96]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d009      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d6e:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4910      	ldr	r1, [pc, #64]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d82:	f000 f825 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001d86:	4601      	mov	r1, r0
 8001d88:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	4a0c      	ldr	r2, [pc, #48]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d94:	5cd3      	ldrb	r3, [r2, r3]
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fdb4 	bl	8000914 <HAL_InitTick>
 8001dac:	4603      	mov	r3, r0
 8001dae:	72fb      	strb	r3, [r7, #11]

  return status;
 8001db0:	7afb      	ldrb	r3, [r7, #11]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40022000 	.word	0x40022000
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	08005fc8 	.word	0x08005fc8
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	20000004 	.word	0x20000004

08001dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dde:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001de8:	4b3a      	ldr	r3, [pc, #232]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0x34>
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d121      	bne.n	8001e42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d11e      	bne.n	8001e42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e04:	4b33      	ldr	r3, [pc, #204]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d107      	bne.n	8001e20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e10:	4b30      	ldr	r3, [pc, #192]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	f003 030f 	and.w	r3, r3, #15
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	e005      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e20:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e2c:	4a2a      	ldr	r2, [pc, #168]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10d      	bne.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d102      	bne.n	8001e4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e48:	4b24      	ldr	r3, [pc, #144]	; (8001edc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e4a:	61bb      	str	r3, [r7, #24]
 8001e4c:	e004      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e54:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	2b0c      	cmp	r3, #12
 8001e5c:	d133      	bne.n	8001ec6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d002      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0xa4>
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d003      	beq.n	8001e7a <HAL_RCC_GetSysClockFreq+0xaa>
 8001e72:	e005      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e76:	617b      	str	r3, [r7, #20]
      break;
 8001e78:	e005      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e7c:	617b      	str	r3, [r7, #20]
      break;
 8001e7e:	e002      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	617b      	str	r3, [r7, #20]
      break;
 8001e84:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e86:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	091b      	lsrs	r3, r3, #4
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	3301      	adds	r3, #1
 8001e92:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e94:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	fb02 f203 	mul.w	r2, r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eaa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eac:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	0e5b      	lsrs	r3, r3, #25
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ec6:	69bb      	ldr	r3, [r7, #24]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3724      	adds	r7, #36	; 0x24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	08005fe0 	.word	0x08005fe0
 8001edc:	00f42400 	.word	0x00f42400
 8001ee0:	007a1200 	.word	0x007a1200

08001ee4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000000 	.word	0x20000000

08001efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f00:	f7ff fff0 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
 8001f04:	4601      	mov	r1, r0
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	0a1b      	lsrs	r3, r3, #8
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f12:	5cd3      	ldrb	r3, [r2, r3]
 8001f14:	f003 031f 	and.w	r3, r3, #31
 8001f18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	08005fd8 	.word	0x08005fd8

08001f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f2c:	f7ff ffda 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
 8001f30:	4601      	mov	r1, r0
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	0adb      	lsrs	r3, r3, #11
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f3e:	5cd3      	ldrb	r3, [r2, r3]
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	08005fd8 	.word	0x08005fd8

08001f54 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	220f      	movs	r2, #15
 8001f62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0203 	and.w	r2, r3, #3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	08db      	lsrs	r3, r3, #3
 8001f8e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <HAL_RCC_GetClockConfig+0x60>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0207 	and.w	r2, r3, #7
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	601a      	str	r2, [r3, #0]
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40022000 	.word	0x40022000

08001fb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fc4:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fd0:	f7ff f952 	bl	8001278 <HAL_PWREx_GetVoltageRange>
 8001fd4:	6178      	str	r0, [r7, #20]
 8001fd6:	e014      	b.n	8002002 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fd8:	4b25      	ldr	r3, [pc, #148]	; (8002070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fdc:	4a24      	ldr	r2, [pc, #144]	; (8002070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fe4:	4b22      	ldr	r3, [pc, #136]	; (8002070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ff0:	f7ff f942 	bl	8001278 <HAL_PWREx_GetVoltageRange>
 8001ff4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffa:	4a1d      	ldr	r2, [pc, #116]	; (8002070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002000:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002008:	d10b      	bne.n	8002022 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b80      	cmp	r3, #128	; 0x80
 800200e:	d919      	bls.n	8002044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2ba0      	cmp	r3, #160	; 0xa0
 8002014:	d902      	bls.n	800201c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002016:	2302      	movs	r3, #2
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	e013      	b.n	8002044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800201c:	2301      	movs	r3, #1
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	e010      	b.n	8002044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b80      	cmp	r3, #128	; 0x80
 8002026:	d902      	bls.n	800202e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002028:	2303      	movs	r3, #3
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	e00a      	b.n	8002044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b80      	cmp	r3, #128	; 0x80
 8002032:	d102      	bne.n	800203a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002034:	2302      	movs	r3, #2
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	e004      	b.n	8002044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b70      	cmp	r3, #112	; 0x70
 800203e:	d101      	bne.n	8002044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002040:	2301      	movs	r3, #1
 8002042:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f023 0207 	bic.w	r2, r3, #7
 800204c:	4909      	ldr	r1, [pc, #36]	; (8002074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	429a      	cmp	r2, r3
 8002060:	d001      	beq.n	8002066 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40021000 	.word	0x40021000
 8002074:	40022000 	.word	0x40022000

08002078 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002080:	2300      	movs	r3, #0
 8002082:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002084:	2300      	movs	r3, #0
 8002086:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 809e 	beq.w	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002096:	2300      	movs	r3, #0
 8002098:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800209a:	4b46      	ldr	r3, [pc, #280]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x34>
 80020aa:	2300      	movs	r3, #0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00d      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b0:	4b40      	ldr	r3, [pc, #256]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b4:	4a3f      	ldr	r2, [pc, #252]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ba:	6593      	str	r3, [r2, #88]	; 0x58
 80020bc:	4b3d      	ldr	r3, [pc, #244]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c8:	2301      	movs	r3, #1
 80020ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020cc:	4b3a      	ldr	r3, [pc, #232]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a39      	ldr	r2, [pc, #228]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80020d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020d8:	f7fe fe3e 	bl	8000d58 <HAL_GetTick>
 80020dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020de:	e009      	b.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e0:	f7fe fe3a 	bl	8000d58 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d902      	bls.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	74fb      	strb	r3, [r7, #19]
        break;
 80020f2:	e005      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020f4:	4b30      	ldr	r3, [pc, #192]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0ef      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002100:	7cfb      	ldrb	r3, [r7, #19]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d15a      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002106:	4b2b      	ldr	r3, [pc, #172]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002110:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d01e      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	429a      	cmp	r2, r3
 8002120:	d019      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002122:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800212c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800212e:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002134:	4a1f      	ldr	r2, [pc, #124]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800213a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800213e:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002144:	4a1b      	ldr	r2, [pc, #108]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800214a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800214e:	4a19      	ldr	r2, [pc, #100]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d016      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7fe fdfa 	bl	8000d58 <HAL_GetTick>
 8002164:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002166:	e00b      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002168:	f7fe fdf6 	bl	8000d58 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	f241 3288 	movw	r2, #5000	; 0x1388
 8002176:	4293      	cmp	r3, r2
 8002178:	d902      	bls.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	74fb      	strb	r3, [r7, #19]
            break;
 800217e:	e006      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0ec      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800218e:	7cfb      	ldrb	r3, [r7, #19]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10b      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002194:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4904      	ldr	r1, [pc, #16]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021aa:	e009      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021ac:	7cfb      	ldrb	r3, [r7, #19]
 80021ae:	74bb      	strb	r3, [r7, #18]
 80021b0:	e006      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021bc:	7cfb      	ldrb	r3, [r7, #19]
 80021be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021c0:	7c7b      	ldrb	r3, [r7, #17]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d105      	bne.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c6:	4b6e      	ldr	r3, [pc, #440]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ca:	4a6d      	ldr	r2, [pc, #436]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021de:	4b68      	ldr	r3, [pc, #416]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e4:	f023 0203 	bic.w	r2, r3, #3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4964      	ldr	r1, [pc, #400]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00a      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002200:	4b5f      	ldr	r3, [pc, #380]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002206:	f023 020c 	bic.w	r2, r3, #12
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	495c      	ldr	r1, [pc, #368]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00a      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002222:	4b57      	ldr	r3, [pc, #348]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002228:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4953      	ldr	r1, [pc, #332]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002232:	4313      	orrs	r3, r2
 8002234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002244:	4b4e      	ldr	r3, [pc, #312]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	494b      	ldr	r1, [pc, #300]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002254:	4313      	orrs	r3, r2
 8002256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002266:	4b46      	ldr	r3, [pc, #280]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	4942      	ldr	r1, [pc, #264]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002288:	4b3d      	ldr	r3, [pc, #244]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	493a      	ldr	r1, [pc, #232]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022aa:	4b35      	ldr	r3, [pc, #212]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	4931      	ldr	r1, [pc, #196]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00a      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022cc:	4b2c      	ldr	r3, [pc, #176]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	4929      	ldr	r1, [pc, #164]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022ee:	4b24      	ldr	r3, [pc, #144]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	4920      	ldr	r1, [pc, #128]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d015      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002310:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002316:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	4918      	ldr	r1, [pc, #96]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800232e:	d105      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002330:	4b13      	ldr	r3, [pc, #76]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4a12      	ldr	r2, [pc, #72]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800233a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d015      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002348:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	490a      	ldr	r1, [pc, #40]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002362:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002366:	d105      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4a04      	ldr	r2, [pc, #16]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800236e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002372:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002374:	7cbb      	ldrb	r3, [r7, #18]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000

08002384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e049      	b.n	800242a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d106      	bne.n	80023b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f841 	bl	8002432 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3304      	adds	r3, #4
 80023c0:	4619      	mov	r1, r3
 80023c2:	4610      	mov	r0, r2
 80023c4:	f000 f9dc 	bl	8002780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
	...

08002448 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b01      	cmp	r3, #1
 800245a:	d001      	beq.n	8002460 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e03b      	b.n	80024d8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0201 	orr.w	r2, r2, #1
 8002476:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a19      	ldr	r2, [pc, #100]	; (80024e4 <HAL_TIM_Base_Start_IT+0x9c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d009      	beq.n	8002496 <HAL_TIM_Base_Start_IT+0x4e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800248a:	d004      	beq.n	8002496 <HAL_TIM_Base_Start_IT+0x4e>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a15      	ldr	r2, [pc, #84]	; (80024e8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d115      	bne.n	80024c2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	4b13      	ldr	r3, [pc, #76]	; (80024ec <HAL_TIM_Base_Start_IT+0xa4>)
 800249e:	4013      	ands	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2b06      	cmp	r3, #6
 80024a6:	d015      	beq.n	80024d4 <HAL_TIM_Base_Start_IT+0x8c>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ae:	d011      	beq.n	80024d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c0:	e008      	b.n	80024d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0201 	orr.w	r2, r2, #1
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	e000      	b.n	80024d6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	40012c00 	.word	0x40012c00
 80024e8:	40014000 	.word	0x40014000
 80024ec:	00010007 	.word	0x00010007

080024f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b02      	cmp	r3, #2
 8002504:	d122      	bne.n	800254c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b02      	cmp	r3, #2
 8002512:	d11b      	bne.n	800254c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f06f 0202 	mvn.w	r2, #2
 800251c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f905 	bl	8002742 <HAL_TIM_IC_CaptureCallback>
 8002538:	e005      	b.n	8002546 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f8f7 	bl	800272e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f908 	bl	8002756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b04      	cmp	r3, #4
 8002558:	d122      	bne.n	80025a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b04      	cmp	r3, #4
 8002566:	d11b      	bne.n	80025a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0204 	mvn.w	r2, #4
 8002570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2202      	movs	r2, #2
 8002576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f8db 	bl	8002742 <HAL_TIM_IC_CaptureCallback>
 800258c:	e005      	b.n	800259a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f8cd 	bl	800272e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 f8de 	bl	8002756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d122      	bne.n	80025f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d11b      	bne.n	80025f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f06f 0208 	mvn.w	r2, #8
 80025c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2204      	movs	r2, #4
 80025ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f8b1 	bl	8002742 <HAL_TIM_IC_CaptureCallback>
 80025e0:	e005      	b.n	80025ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f8a3 	bl	800272e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 f8b4 	bl	8002756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	2b10      	cmp	r3, #16
 8002600:	d122      	bne.n	8002648 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	2b10      	cmp	r3, #16
 800260e:	d11b      	bne.n	8002648 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f06f 0210 	mvn.w	r2, #16
 8002618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2208      	movs	r2, #8
 800261e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f887 	bl	8002742 <HAL_TIM_IC_CaptureCallback>
 8002634:	e005      	b.n	8002642 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f879 	bl	800272e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f88a 	bl	8002756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b01      	cmp	r3, #1
 8002654:	d10e      	bne.n	8002674 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b01      	cmp	r3, #1
 8002662:	d107      	bne.n	8002674 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0201 	mvn.w	r2, #1
 800266c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7fe f912 	bl	8000898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267e:	2b80      	cmp	r3, #128	; 0x80
 8002680:	d10e      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268c:	2b80      	cmp	r3, #128	; 0x80
 800268e:	d107      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f8de 	bl	800285c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ae:	d10e      	bne.n	80026ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ba:	2b80      	cmp	r3, #128	; 0x80
 80026bc:	d107      	bne.n	80026ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80026c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f8d1 	bl	8002870 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d8:	2b40      	cmp	r3, #64	; 0x40
 80026da:	d10e      	bne.n	80026fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e6:	2b40      	cmp	r3, #64	; 0x40
 80026e8:	d107      	bne.n	80026fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f838 	bl	800276a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b20      	cmp	r3, #32
 8002706:	d10e      	bne.n	8002726 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f003 0320 	and.w	r3, r3, #32
 8002712:	2b20      	cmp	r3, #32
 8002714:	d107      	bne.n	8002726 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f06f 0220 	mvn.w	r2, #32
 800271e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f891 	bl	8002848 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
	...

08002780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a2a      	ldr	r2, [pc, #168]	; (800283c <TIM_Base_SetConfig+0xbc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d003      	beq.n	80027a0 <TIM_Base_SetConfig+0x20>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279e:	d108      	bne.n	80027b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a21      	ldr	r2, [pc, #132]	; (800283c <TIM_Base_SetConfig+0xbc>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00b      	beq.n	80027d2 <TIM_Base_SetConfig+0x52>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c0:	d007      	beq.n	80027d2 <TIM_Base_SetConfig+0x52>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a1e      	ldr	r2, [pc, #120]	; (8002840 <TIM_Base_SetConfig+0xc0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d003      	beq.n	80027d2 <TIM_Base_SetConfig+0x52>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a1d      	ldr	r2, [pc, #116]	; (8002844 <TIM_Base_SetConfig+0xc4>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d108      	bne.n	80027e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a0c      	ldr	r2, [pc, #48]	; (800283c <TIM_Base_SetConfig+0xbc>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d007      	beq.n	8002820 <TIM_Base_SetConfig+0xa0>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a0b      	ldr	r2, [pc, #44]	; (8002840 <TIM_Base_SetConfig+0xc0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d003      	beq.n	8002820 <TIM_Base_SetConfig+0xa0>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a0a      	ldr	r2, [pc, #40]	; (8002844 <TIM_Base_SetConfig+0xc4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d103      	bne.n	8002828 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	615a      	str	r2, [r3, #20]
}
 800282e:	bf00      	nop
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40012c00 	.word	0x40012c00
 8002840:	40014000 	.word	0x40014000
 8002844:	40014400 	.word	0x40014400

08002848 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e040      	b.n	8002918 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7fe f986 	bl	8000bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2224      	movs	r2, #36	; 0x24
 80028b0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0201 	bic.w	r2, r2, #1
 80028c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f8c0 	bl	8002a48 <UART_SetConfig>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e022      	b.n	8002918 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 faea 	bl	8002eb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 fb71 	bl	8002ff8 <UART_CheckIdleState>
 8002916:	4603      	mov	r3, r0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08a      	sub	sp, #40	; 0x28
 8002924:	af02      	add	r7, sp, #8
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	4613      	mov	r3, r2
 800292e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002934:	2b20      	cmp	r3, #32
 8002936:	f040 8081 	bne.w	8002a3c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <HAL_UART_Transmit+0x26>
 8002940:	88fb      	ldrh	r3, [r7, #6]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e079      	b.n	8002a3e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_UART_Transmit+0x38>
 8002954:	2302      	movs	r3, #2
 8002956:	e072      	b.n	8002a3e <HAL_UART_Transmit+0x11e>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2221      	movs	r2, #33	; 0x21
 800296a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800296c:	f7fe f9f4 	bl	8000d58 <HAL_GetTick>
 8002970:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	88fa      	ldrh	r2, [r7, #6]
 8002976:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	88fa      	ldrh	r2, [r7, #6]
 800297e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800298a:	d108      	bne.n	800299e <HAL_UART_Transmit+0x7e>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d104      	bne.n	800299e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002994:	2300      	movs	r3, #0
 8002996:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	61bb      	str	r3, [r7, #24]
 800299c:	e003      	b.n	80029a6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80029ae:	e02d      	b.n	8002a0c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2200      	movs	r2, #0
 80029b8:	2180      	movs	r1, #128	; 0x80
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 fb61 	bl	8003082 <UART_WaitOnFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e039      	b.n	8002a3e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10b      	bne.n	80029e8 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	881a      	ldrh	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029dc:	b292      	uxth	r2, r2
 80029de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	3302      	adds	r3, #2
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	e008      	b.n	80029fa <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	781a      	ldrb	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	b292      	uxth	r2, r2
 80029f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	3301      	adds	r3, #1
 80029f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1cb      	bne.n	80029b0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2140      	movs	r1, #64	; 0x40
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 fb2d 	bl	8003082 <UART_WaitOnFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e005      	b.n	8002a3e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2220      	movs	r2, #32
 8002a36:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e000      	b.n	8002a3e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002a3c:	2302      	movs	r3, #2
  }
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3720      	adds	r7, #32
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a48:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002a4c:	b088      	sub	sp, #32
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4baa      	ldr	r3, [pc, #680]	; (8002d20 <UART_SetConfig+0x2d8>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	69f9      	ldr	r1, [r7, #28]
 8002a7e:	430b      	orrs	r3, r1
 8002a80:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4aa0      	ldr	r2, [pc, #640]	; (8002d24 <UART_SetConfig+0x2dc>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d004      	beq.n	8002ab2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	69fa      	ldr	r2, [r7, #28]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a97      	ldr	r2, [pc, #604]	; (8002d28 <UART_SetConfig+0x2e0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d121      	bne.n	8002b14 <UART_SetConfig+0xcc>
 8002ad0:	4b96      	ldr	r3, [pc, #600]	; (8002d2c <UART_SetConfig+0x2e4>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d816      	bhi.n	8002b0c <UART_SetConfig+0xc4>
 8002ade:	a201      	add	r2, pc, #4	; (adr r2, 8002ae4 <UART_SetConfig+0x9c>)
 8002ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae4:	08002af5 	.word	0x08002af5
 8002ae8:	08002b01 	.word	0x08002b01
 8002aec:	08002afb 	.word	0x08002afb
 8002af0:	08002b07 	.word	0x08002b07
 8002af4:	2301      	movs	r3, #1
 8002af6:	76fb      	strb	r3, [r7, #27]
 8002af8:	e098      	b.n	8002c2c <UART_SetConfig+0x1e4>
 8002afa:	2302      	movs	r3, #2
 8002afc:	76fb      	strb	r3, [r7, #27]
 8002afe:	e095      	b.n	8002c2c <UART_SetConfig+0x1e4>
 8002b00:	2304      	movs	r3, #4
 8002b02:	76fb      	strb	r3, [r7, #27]
 8002b04:	e092      	b.n	8002c2c <UART_SetConfig+0x1e4>
 8002b06:	2308      	movs	r3, #8
 8002b08:	76fb      	strb	r3, [r7, #27]
 8002b0a:	e08f      	b.n	8002c2c <UART_SetConfig+0x1e4>
 8002b0c:	2310      	movs	r3, #16
 8002b0e:	76fb      	strb	r3, [r7, #27]
 8002b10:	bf00      	nop
 8002b12:	e08b      	b.n	8002c2c <UART_SetConfig+0x1e4>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a85      	ldr	r2, [pc, #532]	; (8002d30 <UART_SetConfig+0x2e8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d134      	bne.n	8002b88 <UART_SetConfig+0x140>
 8002b1e:	4b83      	ldr	r3, [pc, #524]	; (8002d2c <UART_SetConfig+0x2e4>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b24:	f003 030c 	and.w	r3, r3, #12
 8002b28:	2b0c      	cmp	r3, #12
 8002b2a:	d829      	bhi.n	8002b80 <UART_SetConfig+0x138>
 8002b2c:	a201      	add	r2, pc, #4	; (adr r2, 8002b34 <UART_SetConfig+0xec>)
 8002b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b32:	bf00      	nop
 8002b34:	08002b69 	.word	0x08002b69
 8002b38:	08002b81 	.word	0x08002b81
 8002b3c:	08002b81 	.word	0x08002b81
 8002b40:	08002b81 	.word	0x08002b81
 8002b44:	08002b75 	.word	0x08002b75
 8002b48:	08002b81 	.word	0x08002b81
 8002b4c:	08002b81 	.word	0x08002b81
 8002b50:	08002b81 	.word	0x08002b81
 8002b54:	08002b6f 	.word	0x08002b6f
 8002b58:	08002b81 	.word	0x08002b81
 8002b5c:	08002b81 	.word	0x08002b81
 8002b60:	08002b81 	.word	0x08002b81
 8002b64:	08002b7b 	.word	0x08002b7b
 8002b68:	2300      	movs	r3, #0
 8002b6a:	76fb      	strb	r3, [r7, #27]
 8002b6c:	e05e      	b.n	8002c2c <UART_SetConfig+0x1e4>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	76fb      	strb	r3, [r7, #27]
 8002b72:	e05b      	b.n	8002c2c <UART_SetConfig+0x1e4>
 8002b74:	2304      	movs	r3, #4
 8002b76:	76fb      	strb	r3, [r7, #27]
 8002b78:	e058      	b.n	8002c2c <UART_SetConfig+0x1e4>
 8002b7a:	2308      	movs	r3, #8
 8002b7c:	76fb      	strb	r3, [r7, #27]
 8002b7e:	e055      	b.n	8002c2c <UART_SetConfig+0x1e4>
 8002b80:	2310      	movs	r3, #16
 8002b82:	76fb      	strb	r3, [r7, #27]
 8002b84:	bf00      	nop
 8002b86:	e051      	b.n	8002c2c <UART_SetConfig+0x1e4>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a69      	ldr	r2, [pc, #420]	; (8002d34 <UART_SetConfig+0x2ec>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d120      	bne.n	8002bd4 <UART_SetConfig+0x18c>
 8002b92:	4b66      	ldr	r3, [pc, #408]	; (8002d2c <UART_SetConfig+0x2e4>)
 8002b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002b9c:	2b10      	cmp	r3, #16
 8002b9e:	d00f      	beq.n	8002bc0 <UART_SetConfig+0x178>
 8002ba0:	2b10      	cmp	r3, #16
 8002ba2:	d802      	bhi.n	8002baa <UART_SetConfig+0x162>
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <UART_SetConfig+0x16c>
 8002ba8:	e010      	b.n	8002bcc <UART_SetConfig+0x184>
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	d005      	beq.n	8002bba <UART_SetConfig+0x172>
 8002bae:	2b30      	cmp	r3, #48	; 0x30
 8002bb0:	d009      	beq.n	8002bc6 <UART_SetConfig+0x17e>
 8002bb2:	e00b      	b.n	8002bcc <UART_SetConfig+0x184>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	76fb      	strb	r3, [r7, #27]
 8002bb8:	e038      	b.n	8002c2c <UART_SetConfig+0x1e4>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	76fb      	strb	r3, [r7, #27]
 8002bbe:	e035      	b.n	8002c2c <UART_SetConfig+0x1e4>
 8002bc0:	2304      	movs	r3, #4
 8002bc2:	76fb      	strb	r3, [r7, #27]
 8002bc4:	e032      	b.n	8002c2c <UART_SetConfig+0x1e4>
 8002bc6:	2308      	movs	r3, #8
 8002bc8:	76fb      	strb	r3, [r7, #27]
 8002bca:	e02f      	b.n	8002c2c <UART_SetConfig+0x1e4>
 8002bcc:	2310      	movs	r3, #16
 8002bce:	76fb      	strb	r3, [r7, #27]
 8002bd0:	bf00      	nop
 8002bd2:	e02b      	b.n	8002c2c <UART_SetConfig+0x1e4>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a52      	ldr	r2, [pc, #328]	; (8002d24 <UART_SetConfig+0x2dc>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d124      	bne.n	8002c28 <UART_SetConfig+0x1e0>
 8002bde:	4b53      	ldr	r3, [pc, #332]	; (8002d2c <UART_SetConfig+0x2e4>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bec:	d012      	beq.n	8002c14 <UART_SetConfig+0x1cc>
 8002bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf2:	d802      	bhi.n	8002bfa <UART_SetConfig+0x1b2>
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d007      	beq.n	8002c08 <UART_SetConfig+0x1c0>
 8002bf8:	e012      	b.n	8002c20 <UART_SetConfig+0x1d8>
 8002bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bfe:	d006      	beq.n	8002c0e <UART_SetConfig+0x1c6>
 8002c00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c04:	d009      	beq.n	8002c1a <UART_SetConfig+0x1d2>
 8002c06:	e00b      	b.n	8002c20 <UART_SetConfig+0x1d8>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	76fb      	strb	r3, [r7, #27]
 8002c0c:	e00e      	b.n	8002c2c <UART_SetConfig+0x1e4>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	76fb      	strb	r3, [r7, #27]
 8002c12:	e00b      	b.n	8002c2c <UART_SetConfig+0x1e4>
 8002c14:	2304      	movs	r3, #4
 8002c16:	76fb      	strb	r3, [r7, #27]
 8002c18:	e008      	b.n	8002c2c <UART_SetConfig+0x1e4>
 8002c1a:	2308      	movs	r3, #8
 8002c1c:	76fb      	strb	r3, [r7, #27]
 8002c1e:	e005      	b.n	8002c2c <UART_SetConfig+0x1e4>
 8002c20:	2310      	movs	r3, #16
 8002c22:	76fb      	strb	r3, [r7, #27]
 8002c24:	bf00      	nop
 8002c26:	e001      	b.n	8002c2c <UART_SetConfig+0x1e4>
 8002c28:	2310      	movs	r3, #16
 8002c2a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a3c      	ldr	r2, [pc, #240]	; (8002d24 <UART_SetConfig+0x2dc>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	f040 8082 	bne.w	8002d3c <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c38:	7efb      	ldrb	r3, [r7, #27]
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d823      	bhi.n	8002c86 <UART_SetConfig+0x23e>
 8002c3e:	a201      	add	r2, pc, #4	; (adr r2, 8002c44 <UART_SetConfig+0x1fc>)
 8002c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c44:	08002c69 	.word	0x08002c69
 8002c48:	08002c87 	.word	0x08002c87
 8002c4c:	08002c71 	.word	0x08002c71
 8002c50:	08002c87 	.word	0x08002c87
 8002c54:	08002c77 	.word	0x08002c77
 8002c58:	08002c87 	.word	0x08002c87
 8002c5c:	08002c87 	.word	0x08002c87
 8002c60:	08002c87 	.word	0x08002c87
 8002c64:	08002c7f 	.word	0x08002c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c68:	f7ff f948 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 8002c6c:	6178      	str	r0, [r7, #20]
        break;
 8002c6e:	e00f      	b.n	8002c90 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c70:	4b31      	ldr	r3, [pc, #196]	; (8002d38 <UART_SetConfig+0x2f0>)
 8002c72:	617b      	str	r3, [r7, #20]
        break;
 8002c74:	e00c      	b.n	8002c90 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c76:	f7ff f8ab 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8002c7a:	6178      	str	r0, [r7, #20]
        break;
 8002c7c:	e008      	b.n	8002c90 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c82:	617b      	str	r3, [r7, #20]
        break;
 8002c84:	e004      	b.n	8002c90 <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	76bb      	strb	r3, [r7, #26]
        break;
 8002c8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8100 	beq.w	8002e98 <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d305      	bcc.n	8002cb4 <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d902      	bls.n	8002cba <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	76bb      	strb	r3, [r7, #26]
 8002cb8:	e0ee      	b.n	8002e98 <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	f04f 0400 	mov.w	r4, #0
 8002cca:	0214      	lsls	r4, r2, #8
 8002ccc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002cd0:	020b      	lsls	r3, r1, #8
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6852      	ldr	r2, [r2, #4]
 8002cd6:	0852      	lsrs	r2, r2, #1
 8002cd8:	4611      	mov	r1, r2
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	eb13 0b01 	adds.w	fp, r3, r1
 8002ce2:	eb44 0c02 	adc.w	ip, r4, r2
 8002ce6:	4658      	mov	r0, fp
 8002ce8:	4661      	mov	r1, ip
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f04f 0400 	mov.w	r4, #0
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	4623      	mov	r3, r4
 8002cf6:	f7fd fabb 	bl	8000270 <__aeabi_uldivmod>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	460c      	mov	r4, r1
 8002cfe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d06:	d308      	bcc.n	8002d1a <UART_SetConfig+0x2d2>
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d0e:	d204      	bcs.n	8002d1a <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	60da      	str	r2, [r3, #12]
 8002d18:	e0be      	b.n	8002e98 <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	76bb      	strb	r3, [r7, #26]
 8002d1e:	e0bb      	b.n	8002e98 <UART_SetConfig+0x450>
 8002d20:	efff69f3 	.word	0xefff69f3
 8002d24:	40008000 	.word	0x40008000
 8002d28:	40013800 	.word	0x40013800
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	40004400 	.word	0x40004400
 8002d34:	40004800 	.word	0x40004800
 8002d38:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d44:	d15c      	bne.n	8002e00 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8002d46:	7efb      	ldrb	r3, [r7, #27]
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d828      	bhi.n	8002d9e <UART_SetConfig+0x356>
 8002d4c:	a201      	add	r2, pc, #4	; (adr r2, 8002d54 <UART_SetConfig+0x30c>)
 8002d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d52:	bf00      	nop
 8002d54:	08002d79 	.word	0x08002d79
 8002d58:	08002d81 	.word	0x08002d81
 8002d5c:	08002d89 	.word	0x08002d89
 8002d60:	08002d9f 	.word	0x08002d9f
 8002d64:	08002d8f 	.word	0x08002d8f
 8002d68:	08002d9f 	.word	0x08002d9f
 8002d6c:	08002d9f 	.word	0x08002d9f
 8002d70:	08002d9f 	.word	0x08002d9f
 8002d74:	08002d97 	.word	0x08002d97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d78:	f7ff f8c0 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 8002d7c:	6178      	str	r0, [r7, #20]
        break;
 8002d7e:	e013      	b.n	8002da8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d80:	f7ff f8d2 	bl	8001f28 <HAL_RCC_GetPCLK2Freq>
 8002d84:	6178      	str	r0, [r7, #20]
        break;
 8002d86:	e00f      	b.n	8002da8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d88:	4b49      	ldr	r3, [pc, #292]	; (8002eb0 <UART_SetConfig+0x468>)
 8002d8a:	617b      	str	r3, [r7, #20]
        break;
 8002d8c:	e00c      	b.n	8002da8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d8e:	f7ff f81f 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8002d92:	6178      	str	r0, [r7, #20]
        break;
 8002d94:	e008      	b.n	8002da8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d9a:	617b      	str	r3, [r7, #20]
        break;
 8002d9c:	e004      	b.n	8002da8 <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	76bb      	strb	r3, [r7, #26]
        break;
 8002da6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d074      	beq.n	8002e98 <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	005a      	lsls	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	085b      	lsrs	r3, r3, #1
 8002db8:	441a      	add	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	2b0f      	cmp	r3, #15
 8002dca:	d916      	bls.n	8002dfa <UART_SetConfig+0x3b2>
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd2:	d212      	bcs.n	8002dfa <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	f023 030f 	bic.w	r3, r3, #15
 8002ddc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	085b      	lsrs	r3, r3, #1
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	89fb      	ldrh	r3, [r7, #14]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	89fa      	ldrh	r2, [r7, #14]
 8002df6:	60da      	str	r2, [r3, #12]
 8002df8:	e04e      	b.n	8002e98 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	76bb      	strb	r3, [r7, #26]
 8002dfe:	e04b      	b.n	8002e98 <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e00:	7efb      	ldrb	r3, [r7, #27]
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d827      	bhi.n	8002e56 <UART_SetConfig+0x40e>
 8002e06:	a201      	add	r2, pc, #4	; (adr r2, 8002e0c <UART_SetConfig+0x3c4>)
 8002e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0c:	08002e31 	.word	0x08002e31
 8002e10:	08002e39 	.word	0x08002e39
 8002e14:	08002e41 	.word	0x08002e41
 8002e18:	08002e57 	.word	0x08002e57
 8002e1c:	08002e47 	.word	0x08002e47
 8002e20:	08002e57 	.word	0x08002e57
 8002e24:	08002e57 	.word	0x08002e57
 8002e28:	08002e57 	.word	0x08002e57
 8002e2c:	08002e4f 	.word	0x08002e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e30:	f7ff f864 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 8002e34:	6178      	str	r0, [r7, #20]
        break;
 8002e36:	e013      	b.n	8002e60 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e38:	f7ff f876 	bl	8001f28 <HAL_RCC_GetPCLK2Freq>
 8002e3c:	6178      	str	r0, [r7, #20]
        break;
 8002e3e:	e00f      	b.n	8002e60 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e40:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <UART_SetConfig+0x468>)
 8002e42:	617b      	str	r3, [r7, #20]
        break;
 8002e44:	e00c      	b.n	8002e60 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e46:	f7fe ffc3 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8002e4a:	6178      	str	r0, [r7, #20]
        break;
 8002e4c:	e008      	b.n	8002e60 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e52:	617b      	str	r3, [r7, #20]
        break;
 8002e54:	e004      	b.n	8002e60 <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	76bb      	strb	r3, [r7, #26]
        break;
 8002e5e:	bf00      	nop
    }

    if (pclk != 0U)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d018      	beq.n	8002e98 <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	085a      	lsrs	r2, r3, #1
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	441a      	add	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	2b0f      	cmp	r3, #15
 8002e80:	d908      	bls.n	8002e94 <UART_SetConfig+0x44c>
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e88:	d204      	bcs.n	8002e94 <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	e001      	b.n	8002e98 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002ea4:	7ebb      	ldrb	r3, [r7, #26]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3720      	adds	r7, #32
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002eb0:	00f42400 	.word	0x00f42400

08002eb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00a      	beq.n	8002ede <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00a      	beq.n	8002f22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d01a      	beq.n	8002fca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fb2:	d10a      	bne.n	8002fca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	605a      	str	r2, [r3, #4]
  }
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af02      	add	r7, sp, #8
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003006:	f7fd fea7 	bl	8000d58 <HAL_GetTick>
 800300a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b08      	cmp	r3, #8
 8003018:	d10e      	bne.n	8003038 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800301a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f82a 	bl	8003082 <UART_WaitOnFlagUntilTimeout>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e020      	b.n	800307a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b04      	cmp	r3, #4
 8003044:	d10e      	bne.n	8003064 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003046:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f814 	bl	8003082 <UART_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e00a      	b.n	800307a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2220      	movs	r2, #32
 800306e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b084      	sub	sp, #16
 8003086:	af00      	add	r7, sp, #0
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	603b      	str	r3, [r7, #0]
 800308e:	4613      	mov	r3, r2
 8003090:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003092:	e05d      	b.n	8003150 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309a:	d059      	beq.n	8003150 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800309c:	f7fd fe5c 	bl	8000d58 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d302      	bcc.n	80030b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d11b      	bne.n	80030ea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030c0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0201 	bic.w	r2, r2, #1
 80030d0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2220      	movs	r2, #32
 80030dc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e042      	b.n	8003170 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d02b      	beq.n	8003150 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003106:	d123      	bne.n	8003150 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003110:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003120:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0201 	bic.w	r2, r2, #1
 8003130:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2220      	movs	r2, #32
 8003136:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2220      	movs	r2, #32
 8003142:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e00f      	b.n	8003170 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	69da      	ldr	r2, [r3, #28]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	4013      	ands	r3, r2
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	429a      	cmp	r2, r3
 800315e:	bf0c      	ite	eq
 8003160:	2301      	moveq	r3, #1
 8003162:	2300      	movne	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	461a      	mov	r2, r3
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	429a      	cmp	r2, r3
 800316c:	d092      	beq.n	8003094 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800318a:	2b84      	cmp	r3, #132	; 0x84
 800318c:	d005      	beq.n	800319a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800318e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4413      	add	r3, r2
 8003196:	3303      	adds	r3, #3
 8003198:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800319a:	68fb      	ldr	r3, [r7, #12]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80031ac:	f001 fa4a 	bl	8004644 <vTaskStartScheduler>
  
  return osOK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80031b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031b8:	b089      	sub	sp, #36	; 0x24
 80031ba:	af04      	add	r7, sp, #16
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d020      	beq.n	800320a <osThreadCreate+0x54>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01c      	beq.n	800320a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685c      	ldr	r4, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681d      	ldr	r5, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691e      	ldr	r6, [r3, #16]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff ffc8 	bl	8003178 <makeFreeRtosPriority>
 80031e8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80031f2:	9202      	str	r2, [sp, #8]
 80031f4:	9301      	str	r3, [sp, #4]
 80031f6:	9100      	str	r1, [sp, #0]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	4632      	mov	r2, r6
 80031fc:	4629      	mov	r1, r5
 80031fe:	4620      	mov	r0, r4
 8003200:	f001 f85c 	bl	80042bc <xTaskCreateStatic>
 8003204:	4603      	mov	r3, r0
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	e01c      	b.n	8003244 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685c      	ldr	r4, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003216:	b29e      	uxth	r6, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff ffaa 	bl	8003178 <makeFreeRtosPriority>
 8003224:	4602      	mov	r2, r0
 8003226:	f107 030c 	add.w	r3, r7, #12
 800322a:	9301      	str	r3, [sp, #4]
 800322c:	9200      	str	r2, [sp, #0]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	4632      	mov	r2, r6
 8003232:	4629      	mov	r1, r5
 8003234:	4620      	mov	r0, r4
 8003236:	f001 f89b 	bl	8004370 <xTaskCreate>
 800323a:	4603      	mov	r3, r0
 800323c:	2b01      	cmp	r3, #1
 800323e:	d001      	beq.n	8003244 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003240:	2300      	movs	r3, #0
 8003242:	e000      	b.n	8003246 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003244:	68fb      	ldr	r3, [r7, #12]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800324e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <osDelay+0x16>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	e000      	b.n	8003266 <osDelay+0x18>
 8003264:	2301      	movs	r3, #1
 8003266:	4618      	mov	r0, r3
 8003268:	f001 f9b8 	bl	80045dc <vTaskDelay>
  
  return osOK;
 800326c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
	...

08003278 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08a      	sub	sp, #40	; 0x28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003280:	2300      	movs	r3, #0
 8003282:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003284:	f001 fa3c 	bl	8004700 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003288:	4b57      	ldr	r3, [pc, #348]	; (80033e8 <pvPortMalloc+0x170>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003290:	f000 f90c 	bl	80034ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003294:	4b55      	ldr	r3, [pc, #340]	; (80033ec <pvPortMalloc+0x174>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4013      	ands	r3, r2
 800329c:	2b00      	cmp	r3, #0
 800329e:	f040 808c 	bne.w	80033ba <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01c      	beq.n	80032e2 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80032a8:	2208      	movs	r2, #8
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4413      	add	r3, r2
 80032ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d013      	beq.n	80032e2 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f023 0307 	bic.w	r3, r3, #7
 80032c0:	3308      	adds	r3, #8
 80032c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d009      	beq.n	80032e2 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80032ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d2:	f383 8811 	msr	BASEPRI, r3
 80032d6:	f3bf 8f6f 	isb	sy
 80032da:	f3bf 8f4f 	dsb	sy
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	e7fe      	b.n	80032e0 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d068      	beq.n	80033ba <pvPortMalloc+0x142>
 80032e8:	4b41      	ldr	r3, [pc, #260]	; (80033f0 <pvPortMalloc+0x178>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d863      	bhi.n	80033ba <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80032f2:	4b40      	ldr	r3, [pc, #256]	; (80033f4 <pvPortMalloc+0x17c>)
 80032f4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80032f6:	4b3f      	ldr	r3, [pc, #252]	; (80033f4 <pvPortMalloc+0x17c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80032fc:	e004      	b.n	8003308 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	429a      	cmp	r2, r3
 8003310:	d903      	bls.n	800331a <pvPortMalloc+0xa2>
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f1      	bne.n	80032fe <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800331a:	4b33      	ldr	r3, [pc, #204]	; (80033e8 <pvPortMalloc+0x170>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003320:	429a      	cmp	r2, r3
 8003322:	d04a      	beq.n	80033ba <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2208      	movs	r2, #8
 800332a:	4413      	add	r3, r2
 800332c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	1ad2      	subs	r2, r2, r3
 800333e:	2308      	movs	r3, #8
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	429a      	cmp	r2, r3
 8003344:	d91e      	bls.n	8003384 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4413      	add	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	2b00      	cmp	r3, #0
 8003356:	d009      	beq.n	800336c <pvPortMalloc+0xf4>
 8003358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335c:	f383 8811 	msr	BASEPRI, r3
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	e7fe      	b.n	800336a <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	1ad2      	subs	r2, r2, r3
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800337e:	69b8      	ldr	r0, [r7, #24]
 8003380:	f000 f8f6 	bl	8003570 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003384:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <pvPortMalloc+0x178>)
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	4a18      	ldr	r2, [pc, #96]	; (80033f0 <pvPortMalloc+0x178>)
 8003390:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003392:	4b17      	ldr	r3, [pc, #92]	; (80033f0 <pvPortMalloc+0x178>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <pvPortMalloc+0x180>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d203      	bcs.n	80033a6 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800339e:	4b14      	ldr	r3, [pc, #80]	; (80033f0 <pvPortMalloc+0x178>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a15      	ldr	r2, [pc, #84]	; (80033f8 <pvPortMalloc+0x180>)
 80033a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	4b10      	ldr	r3, [pc, #64]	; (80033ec <pvPortMalloc+0x174>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80033ba:	f001 f9af 	bl	800471c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d009      	beq.n	80033dc <pvPortMalloc+0x164>
 80033c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	e7fe      	b.n	80033da <pvPortMalloc+0x162>
	return pvReturn;
 80033dc:	69fb      	ldr	r3, [r7, #28]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3728      	adds	r7, #40	; 0x28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20001a6c 	.word	0x20001a6c
 80033ec:	20001a78 	.word	0x20001a78
 80033f0:	20001a70 	.word	0x20001a70
 80033f4:	20001a64 	.word	0x20001a64
 80033f8:	20001a74 	.word	0x20001a74

080033fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d046      	beq.n	800349c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800340e:	2308      	movs	r3, #8
 8003410:	425b      	negs	r3, r3
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4413      	add	r3, r2
 8003416:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	4b20      	ldr	r3, [pc, #128]	; (80034a4 <vPortFree+0xa8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4013      	ands	r3, r2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <vPortFree+0x42>
 800342a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342e:	f383 8811 	msr	BASEPRI, r3
 8003432:	f3bf 8f6f 	isb	sy
 8003436:	f3bf 8f4f 	dsb	sy
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	e7fe      	b.n	800343c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <vPortFree+0x5e>
 8003446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344a:	f383 8811 	msr	BASEPRI, r3
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	e7fe      	b.n	8003458 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <vPortFree+0xa8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4013      	ands	r3, r2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d019      	beq.n	800349c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d115      	bne.n	800349c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <vPortFree+0xa8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	43db      	mvns	r3, r3
 800347a:	401a      	ands	r2, r3
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003480:	f001 f93e 	bl	8004700 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	4b07      	ldr	r3, [pc, #28]	; (80034a8 <vPortFree+0xac>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4413      	add	r3, r2
 800348e:	4a06      	ldr	r2, [pc, #24]	; (80034a8 <vPortFree+0xac>)
 8003490:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003492:	6938      	ldr	r0, [r7, #16]
 8003494:	f000 f86c 	bl	8003570 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003498:	f001 f940 	bl	800471c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800349c:	bf00      	nop
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	20001a78 	.word	0x20001a78
 80034a8:	20001a70 	.word	0x20001a70

080034ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80034b2:	f241 7370 	movw	r3, #6000	; 0x1770
 80034b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80034b8:	4b27      	ldr	r3, [pc, #156]	; (8003558 <prvHeapInit+0xac>)
 80034ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00c      	beq.n	80034e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	3307      	adds	r3, #7
 80034ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0307 	bic.w	r3, r3, #7
 80034d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	4a1f      	ldr	r2, [pc, #124]	; (8003558 <prvHeapInit+0xac>)
 80034dc:	4413      	add	r3, r2
 80034de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80034e4:	4a1d      	ldr	r2, [pc, #116]	; (800355c <prvHeapInit+0xb0>)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80034ea:	4b1c      	ldr	r3, [pc, #112]	; (800355c <prvHeapInit+0xb0>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	4413      	add	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80034f8:	2208      	movs	r2, #8
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0307 	bic.w	r3, r3, #7
 8003506:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4a15      	ldr	r2, [pc, #84]	; (8003560 <prvHeapInit+0xb4>)
 800350c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800350e:	4b14      	ldr	r3, [pc, #80]	; (8003560 <prvHeapInit+0xb4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2200      	movs	r2, #0
 8003514:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <prvHeapInit+0xb4>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	1ad2      	subs	r2, r2, r3
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800352c:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <prvHeapInit+0xb4>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	4a0a      	ldr	r2, [pc, #40]	; (8003564 <prvHeapInit+0xb8>)
 800353a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	4a09      	ldr	r2, [pc, #36]	; (8003568 <prvHeapInit+0xbc>)
 8003542:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003544:	4b09      	ldr	r3, [pc, #36]	; (800356c <prvHeapInit+0xc0>)
 8003546:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800354a:	601a      	str	r2, [r3, #0]
}
 800354c:	bf00      	nop
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	200002f4 	.word	0x200002f4
 800355c:	20001a64 	.word	0x20001a64
 8003560:	20001a6c 	.word	0x20001a6c
 8003564:	20001a74 	.word	0x20001a74
 8003568:	20001a70 	.word	0x20001a70
 800356c:	20001a78 	.word	0x20001a78

08003570 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003578:	4b28      	ldr	r3, [pc, #160]	; (800361c <prvInsertBlockIntoFreeList+0xac>)
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	e002      	b.n	8003584 <prvInsertBlockIntoFreeList+0x14>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	429a      	cmp	r2, r3
 800358c:	d8f7      	bhi.n	800357e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	4413      	add	r3, r2
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	429a      	cmp	r2, r3
 800359e:	d108      	bne.n	80035b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	441a      	add	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	441a      	add	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d118      	bne.n	80035f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	4b15      	ldr	r3, [pc, #84]	; (8003620 <prvInsertBlockIntoFreeList+0xb0>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d00d      	beq.n	80035ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	441a      	add	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	e008      	b.n	8003600 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80035ee:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <prvInsertBlockIntoFreeList+0xb0>)
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	e003      	b.n	8003600 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	429a      	cmp	r2, r3
 8003606:	d002      	beq.n	800360e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800360e:	bf00      	nop
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	20001a64 	.word	0x20001a64
 8003620:	20001a6c 	.word	0x20001a6c

08003624 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f103 0208 	add.w	r2, r3, #8
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f04f 32ff 	mov.w	r2, #4294967295
 800363c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f103 0208 	add.w	r2, r3, #8
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f103 0208 	add.w	r2, r3, #8
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800367e:	b480      	push	{r7}
 8003680:	b085      	sub	sp, #20
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	601a      	str	r2, [r3, #0]
}
 80036ba:	bf00      	nop
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036c6:	b480      	push	{r7}
 80036c8:	b085      	sub	sp, #20
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036dc:	d103      	bne.n	80036e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	e00c      	b.n	8003700 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3308      	adds	r3, #8
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	e002      	b.n	80036f4 <vListInsert+0x2e>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d2f6      	bcs.n	80036ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	601a      	str	r2, [r3, #0]
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6892      	ldr	r2, [r2, #8]
 800374e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6852      	ldr	r2, [r2, #4]
 8003758:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	429a      	cmp	r2, r3
 8003762:	d103      	bne.n	800376c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	1e5a      	subs	r2, r3, #1
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	3b04      	subs	r3, #4
 800379c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	3b04      	subs	r3, #4
 80037aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f023 0201 	bic.w	r2, r3, #1
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	3b04      	subs	r3, #4
 80037ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80037bc:	4a0c      	ldr	r2, [pc, #48]	; (80037f0 <pxPortInitialiseStack+0x64>)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	3b14      	subs	r3, #20
 80037c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	3b04      	subs	r3, #4
 80037d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f06f 0202 	mvn.w	r2, #2
 80037da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	3b20      	subs	r3, #32
 80037e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80037e2:	68fb      	ldr	r3, [r7, #12]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	080037f5 	.word	0x080037f5

080037f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80037fa:	2300      	movs	r3, #0
 80037fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80037fe:	4b11      	ldr	r3, [pc, #68]	; (8003844 <prvTaskExitError+0x50>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003806:	d009      	beq.n	800381c <prvTaskExitError+0x28>
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	e7fe      	b.n	800381a <prvTaskExitError+0x26>
 800381c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003820:	f383 8811 	msr	BASEPRI, r3
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800382e:	bf00      	nop
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0fc      	beq.n	8003830 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003836:	bf00      	nop
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	2000000c 	.word	0x2000000c
	...

08003850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003850:	4b07      	ldr	r3, [pc, #28]	; (8003870 <pxCurrentTCBConst2>)
 8003852:	6819      	ldr	r1, [r3, #0]
 8003854:	6808      	ldr	r0, [r1, #0]
 8003856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800385a:	f380 8809 	msr	PSP, r0
 800385e:	f3bf 8f6f 	isb	sy
 8003862:	f04f 0000 	mov.w	r0, #0
 8003866:	f380 8811 	msr	BASEPRI, r0
 800386a:	4770      	bx	lr
 800386c:	f3af 8000 	nop.w

08003870 <pxCurrentTCBConst2>:
 8003870:	20001a84 	.word	0x20001a84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003874:	bf00      	nop
 8003876:	bf00      	nop

08003878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003878:	4808      	ldr	r0, [pc, #32]	; (800389c <prvPortStartFirstTask+0x24>)
 800387a:	6800      	ldr	r0, [r0, #0]
 800387c:	6800      	ldr	r0, [r0, #0]
 800387e:	f380 8808 	msr	MSP, r0
 8003882:	f04f 0000 	mov.w	r0, #0
 8003886:	f380 8814 	msr	CONTROL, r0
 800388a:	b662      	cpsie	i
 800388c:	b661      	cpsie	f
 800388e:	f3bf 8f4f 	dsb	sy
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	df00      	svc	0
 8003898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800389a:	bf00      	nop
 800389c:	e000ed08 	.word	0xe000ed08

080038a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80038a6:	4b44      	ldr	r3, [pc, #272]	; (80039b8 <xPortStartScheduler+0x118>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a44      	ldr	r2, [pc, #272]	; (80039bc <xPortStartScheduler+0x11c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d109      	bne.n	80038c4 <xPortStartScheduler+0x24>
 80038b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	e7fe      	b.n	80038c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80038c4:	4b3c      	ldr	r3, [pc, #240]	; (80039b8 <xPortStartScheduler+0x118>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a3d      	ldr	r2, [pc, #244]	; (80039c0 <xPortStartScheduler+0x120>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d109      	bne.n	80038e2 <xPortStartScheduler+0x42>
 80038ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	e7fe      	b.n	80038e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80038e2:	4b38      	ldr	r3, [pc, #224]	; (80039c4 <xPortStartScheduler+0x124>)
 80038e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	22ff      	movs	r2, #255	; 0xff
 80038f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003904:	b2da      	uxtb	r2, r3
 8003906:	4b30      	ldr	r3, [pc, #192]	; (80039c8 <xPortStartScheduler+0x128>)
 8003908:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800390a:	4b30      	ldr	r3, [pc, #192]	; (80039cc <xPortStartScheduler+0x12c>)
 800390c:	2207      	movs	r2, #7
 800390e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003910:	e009      	b.n	8003926 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003912:	4b2e      	ldr	r3, [pc, #184]	; (80039cc <xPortStartScheduler+0x12c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3b01      	subs	r3, #1
 8003918:	4a2c      	ldr	r2, [pc, #176]	; (80039cc <xPortStartScheduler+0x12c>)
 800391a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800391c:	78fb      	ldrb	r3, [r7, #3]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	b2db      	uxtb	r3, r3
 8003924:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003926:	78fb      	ldrb	r3, [r7, #3]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392e:	2b80      	cmp	r3, #128	; 0x80
 8003930:	d0ef      	beq.n	8003912 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003932:	4b26      	ldr	r3, [pc, #152]	; (80039cc <xPortStartScheduler+0x12c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f1c3 0307 	rsb	r3, r3, #7
 800393a:	2b04      	cmp	r3, #4
 800393c:	d009      	beq.n	8003952 <xPortStartScheduler+0xb2>
 800393e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	60bb      	str	r3, [r7, #8]
 8003950:	e7fe      	b.n	8003950 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003952:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <xPortStartScheduler+0x12c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	4a1c      	ldr	r2, [pc, #112]	; (80039cc <xPortStartScheduler+0x12c>)
 800395a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800395c:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <xPortStartScheduler+0x12c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003964:	4a19      	ldr	r2, [pc, #100]	; (80039cc <xPortStartScheduler+0x12c>)
 8003966:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	b2da      	uxtb	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003970:	4b17      	ldr	r3, [pc, #92]	; (80039d0 <xPortStartScheduler+0x130>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a16      	ldr	r2, [pc, #88]	; (80039d0 <xPortStartScheduler+0x130>)
 8003976:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800397a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800397c:	4b14      	ldr	r3, [pc, #80]	; (80039d0 <xPortStartScheduler+0x130>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a13      	ldr	r2, [pc, #76]	; (80039d0 <xPortStartScheduler+0x130>)
 8003982:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003986:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003988:	f000 f8d6 	bl	8003b38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800398c:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <xPortStartScheduler+0x134>)
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003992:	f000 f8f5 	bl	8003b80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003996:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <xPortStartScheduler+0x138>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a0f      	ldr	r2, [pc, #60]	; (80039d8 <xPortStartScheduler+0x138>)
 800399c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80039a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80039a2:	f7ff ff69 	bl	8003878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80039a6:	f001 f80d 	bl	80049c4 <vTaskSwitchContext>
	prvTaskExitError();
 80039aa:	f7ff ff23 	bl	80037f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	e000ed00 	.word	0xe000ed00
 80039bc:	410fc271 	.word	0x410fc271
 80039c0:	410fc270 	.word	0x410fc270
 80039c4:	e000e400 	.word	0xe000e400
 80039c8:	20001a7c 	.word	0x20001a7c
 80039cc:	20001a80 	.word	0x20001a80
 80039d0:	e000ed20 	.word	0xe000ed20
 80039d4:	2000000c 	.word	0x2000000c
 80039d8:	e000ef34 	.word	0xe000ef34

080039dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e6:	f383 8811 	msr	BASEPRI, r3
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80039f4:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <vPortEnterCritical+0x54>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3301      	adds	r3, #1
 80039fa:	4a0d      	ldr	r2, [pc, #52]	; (8003a30 <vPortEnterCritical+0x54>)
 80039fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80039fe:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <vPortEnterCritical+0x54>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d10e      	bne.n	8003a24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a06:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <vPortEnterCritical+0x58>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d009      	beq.n	8003a24 <vPortEnterCritical+0x48>
 8003a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a14:	f383 8811 	msr	BASEPRI, r3
 8003a18:	f3bf 8f6f 	isb	sy
 8003a1c:	f3bf 8f4f 	dsb	sy
 8003a20:	603b      	str	r3, [r7, #0]
 8003a22:	e7fe      	b.n	8003a22 <vPortEnterCritical+0x46>
	}
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	2000000c 	.word	0x2000000c
 8003a34:	e000ed04 	.word	0xe000ed04

08003a38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003a3e:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <vPortExitCritical+0x4c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <vPortExitCritical+0x22>
 8003a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4a:	f383 8811 	msr	BASEPRI, r3
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f3bf 8f4f 	dsb	sy
 8003a56:	607b      	str	r3, [r7, #4]
 8003a58:	e7fe      	b.n	8003a58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <vPortExitCritical+0x4c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	4a08      	ldr	r2, [pc, #32]	; (8003a84 <vPortExitCritical+0x4c>)
 8003a62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003a64:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <vPortExitCritical+0x4c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d104      	bne.n	8003a76 <vPortExitCritical+0x3e>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	2000000c 	.word	0x2000000c
	...

08003a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003a90:	f3ef 8009 	mrs	r0, PSP
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <pxCurrentTCBConst>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	f01e 0f10 	tst.w	lr, #16
 8003aa0:	bf08      	it	eq
 8003aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aaa:	6010      	str	r0, [r2, #0]
 8003aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003ab4:	f380 8811 	msr	BASEPRI, r0
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f000 ff80 	bl	80049c4 <vTaskSwitchContext>
 8003ac4:	f04f 0000 	mov.w	r0, #0
 8003ac8:	f380 8811 	msr	BASEPRI, r0
 8003acc:	bc09      	pop	{r0, r3}
 8003ace:	6819      	ldr	r1, [r3, #0]
 8003ad0:	6808      	ldr	r0, [r1, #0]
 8003ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ad6:	f01e 0f10 	tst.w	lr, #16
 8003ada:	bf08      	it	eq
 8003adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003ae0:	f380 8809 	msr	PSP, r0
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	f3af 8000 	nop.w

08003af0 <pxCurrentTCBConst>:
 8003af0:	20001a84 	.word	0x20001a84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop

08003af8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
	__asm volatile
 8003afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b02:	f383 8811 	msr	BASEPRI, r3
 8003b06:	f3bf 8f6f 	isb	sy
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003b10:	f000 fea0 	bl	8004854 <xTaskIncrementTick>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <SysTick_Handler+0x3c>)
 8003b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	2300      	movs	r3, #0
 8003b24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	e000ed04 	.word	0xe000ed04

08003b38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003b3c:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <vPortSetupTimerInterrupt+0x34>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003b42:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <vPortSetupTimerInterrupt+0x38>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003b48:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <vPortSetupTimerInterrupt+0x3c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a0a      	ldr	r2, [pc, #40]	; (8003b78 <vPortSetupTimerInterrupt+0x40>)
 8003b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b52:	099b      	lsrs	r3, r3, #6
 8003b54:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <vPortSetupTimerInterrupt+0x44>)
 8003b56:	3b01      	subs	r3, #1
 8003b58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003b5a:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <vPortSetupTimerInterrupt+0x34>)
 8003b5c:	2207      	movs	r2, #7
 8003b5e:	601a      	str	r2, [r3, #0]
}
 8003b60:	bf00      	nop
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	e000e010 	.word	0xe000e010
 8003b70:	e000e018 	.word	0xe000e018
 8003b74:	20000000 	.word	0x20000000
 8003b78:	10624dd3 	.word	0x10624dd3
 8003b7c:	e000e014 	.word	0xe000e014

08003b80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003b80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003b90 <vPortEnableVFP+0x10>
 8003b84:	6801      	ldr	r1, [r0, #0]
 8003b86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003b8a:	6001      	str	r1, [r0, #0]
 8003b8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003b8e:	bf00      	nop
 8003b90:	e000ed88 	.word	0xe000ed88

08003b94 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003b9a:	f3ef 8305 	mrs	r3, IPSR
 8003b9e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b0f      	cmp	r3, #15
 8003ba4:	d913      	bls.n	8003bce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003ba6:	4a16      	ldr	r2, [pc, #88]	; (8003c00 <vPortValidateInterruptPriority+0x6c>)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4413      	add	r3, r2
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003bb0:	4b14      	ldr	r3, [pc, #80]	; (8003c04 <vPortValidateInterruptPriority+0x70>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	7afa      	ldrb	r2, [r7, #11]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d209      	bcs.n	8003bce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	607b      	str	r3, [r7, #4]
 8003bcc:	e7fe      	b.n	8003bcc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003bce:	4b0e      	ldr	r3, [pc, #56]	; (8003c08 <vPortValidateInterruptPriority+0x74>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003bd6:	4b0d      	ldr	r3, [pc, #52]	; (8003c0c <vPortValidateInterruptPriority+0x78>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d909      	bls.n	8003bf2 <vPortValidateInterruptPriority+0x5e>
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	603b      	str	r3, [r7, #0]
 8003bf0:	e7fe      	b.n	8003bf0 <vPortValidateInterruptPriority+0x5c>
	}
 8003bf2:	bf00      	nop
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	e000e3f0 	.word	0xe000e3f0
 8003c04:	20001a7c 	.word	0x20001a7c
 8003c08:	e000ed0c 	.word	0xe000ed0c
 8003c0c:	20001a80 	.word	0x20001a80

08003c10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d109      	bne.n	8003c38 <xQueueGenericReset+0x28>
 8003c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	60bb      	str	r3, [r7, #8]
 8003c36:	e7fe      	b.n	8003c36 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003c38:	f7ff fed0 	bl	80039dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c44:	68f9      	ldr	r1, [r7, #12]
 8003c46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c48:	fb01 f303 	mul.w	r3, r1, r3
 8003c4c:	441a      	add	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	68f9      	ldr	r1, [r7, #12]
 8003c6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c6e:	fb01 f303 	mul.w	r3, r1, r3
 8003c72:	441a      	add	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	22ff      	movs	r2, #255	; 0xff
 8003c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	22ff      	movs	r2, #255	; 0xff
 8003c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d114      	bne.n	8003cb8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d01a      	beq.n	8003ccc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	3310      	adds	r3, #16
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 ff10 	bl	8004ac0 <xTaskRemoveFromEventList>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d012      	beq.n	8003ccc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ca6:	4b0d      	ldr	r3, [pc, #52]	; (8003cdc <xQueueGenericReset+0xcc>)
 8003ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	e009      	b.n	8003ccc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	3310      	adds	r3, #16
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff fcb1 	bl	8003624 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	3324      	adds	r3, #36	; 0x24
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff fcac 	bl	8003624 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ccc:	f7ff feb4 	bl	8003a38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003cd0:	2301      	movs	r3, #1
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	e000ed04 	.word	0xe000ed04

08003ce0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08a      	sub	sp, #40	; 0x28
 8003ce4:	af02      	add	r7, sp, #8
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	4613      	mov	r3, r2
 8003cec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d109      	bne.n	8003d08 <xQueueGenericCreate+0x28>
 8003cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	e7fe      	b.n	8003d06 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d102      	bne.n	8003d14 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	e004      	b.n	8003d1e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	fb02 f303 	mul.w	r3, r2, r3
 8003d1c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	3348      	adds	r3, #72	; 0x48
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff faa8 	bl	8003278 <pvPortMalloc>
 8003d28:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d011      	beq.n	8003d54 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	3348      	adds	r3, #72	; 0x48
 8003d38:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d42:	79fa      	ldrb	r2, [r7, #7]
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 f805 	bl	8003d5e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d54:	69bb      	ldr	r3, [r7, #24]
	}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3720      	adds	r7, #32
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]
 8003d6a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d103      	bne.n	8003d7a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	e002      	b.n	8003d80 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	69b8      	ldr	r0, [r7, #24]
 8003d90:	f7ff ff3e 	bl	8003c10 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d94:	bf00      	nop
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08e      	sub	sp, #56	; 0x38
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
 8003da8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d109      	bne.n	8003dc8 <xQueueGenericSendFromISR+0x2c>
 8003db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc6:	e7fe      	b.n	8003dc6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d103      	bne.n	8003dd6 <xQueueGenericSendFromISR+0x3a>
 8003dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <xQueueGenericSendFromISR+0x3e>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <xQueueGenericSendFromISR+0x40>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d109      	bne.n	8003df4 <xQueueGenericSendFromISR+0x58>
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	623b      	str	r3, [r7, #32]
 8003df2:	e7fe      	b.n	8003df2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d103      	bne.n	8003e02 <xQueueGenericSendFromISR+0x66>
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <xQueueGenericSendFromISR+0x6a>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <xQueueGenericSendFromISR+0x6c>
 8003e06:	2300      	movs	r3, #0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d109      	bne.n	8003e20 <xQueueGenericSendFromISR+0x84>
 8003e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e10:	f383 8811 	msr	BASEPRI, r3
 8003e14:	f3bf 8f6f 	isb	sy
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	61fb      	str	r3, [r7, #28]
 8003e1e:	e7fe      	b.n	8003e1e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e20:	f7ff feb8 	bl	8003b94 <vPortValidateInterruptPriority>
	__asm volatile
 8003e24:	f3ef 8211 	mrs	r2, BASEPRI
 8003e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	61ba      	str	r2, [r7, #24]
 8003e3a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003e3c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d302      	bcc.n	8003e52 <xQueueGenericSendFromISR+0xb6>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d12c      	bne.n	8003eac <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	68b9      	ldr	r1, [r7, #8]
 8003e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e62:	f000 f90b 	bl	800407c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003e66:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6e:	d112      	bne.n	8003e96 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d016      	beq.n	8003ea6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7a:	3324      	adds	r3, #36	; 0x24
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 fe1f 	bl	8004ac0 <xTaskRemoveFromEventList>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00e      	beq.n	8003ea6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00b      	beq.n	8003ea6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	e007      	b.n	8003ea6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	b25a      	sxtb	r2, r3
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003eaa:	e001      	b.n	8003eb0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	637b      	str	r3, [r7, #52]	; 0x34
 8003eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb2:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3738      	adds	r7, #56	; 0x38
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08c      	sub	sp, #48	; 0x30
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d109      	bne.n	8003ef2 <xQueueReceive+0x2e>
	__asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	623b      	str	r3, [r7, #32]
 8003ef0:	e7fe      	b.n	8003ef0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d103      	bne.n	8003f00 <xQueueReceive+0x3c>
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <xQueueReceive+0x40>
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <xQueueReceive+0x42>
 8003f04:	2300      	movs	r3, #0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d109      	bne.n	8003f1e <xQueueReceive+0x5a>
 8003f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	61fb      	str	r3, [r7, #28]
 8003f1c:	e7fe      	b.n	8003f1c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f1e:	f000 ff85 	bl	8004e2c <xTaskGetSchedulerState>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d102      	bne.n	8003f2e <xQueueReceive+0x6a>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <xQueueReceive+0x6e>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <xQueueReceive+0x70>
 8003f32:	2300      	movs	r3, #0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d109      	bne.n	8003f4c <xQueueReceive+0x88>
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	61bb      	str	r3, [r7, #24]
 8003f4a:	e7fe      	b.n	8003f4a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f4c:	f7ff fd46 	bl	80039dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01f      	beq.n	8003f9c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f5c:	68b9      	ldr	r1, [r7, #8]
 8003f5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f60:	f000 f8f6 	bl	8004150 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	1e5a      	subs	r2, r3, #1
 8003f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00f      	beq.n	8003f94 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f76:	3310      	adds	r3, #16
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 fda1 	bl	8004ac0 <xTaskRemoveFromEventList>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d007      	beq.n	8003f94 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f84:	4b3c      	ldr	r3, [pc, #240]	; (8004078 <xQueueReceive+0x1b4>)
 8003f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f94:	f7ff fd50 	bl	8003a38 <vPortExitCritical>
				return pdPASS;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e069      	b.n	8004070 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d103      	bne.n	8003faa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fa2:	f7ff fd49 	bl	8003a38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	e062      	b.n	8004070 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d106      	bne.n	8003fbe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fb0:	f107 0310 	add.w	r3, r7, #16
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fde5 	bl	8004b84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fbe:	f7ff fd3b 	bl	8003a38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fc2:	f000 fb9d 	bl	8004700 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fc6:	f7ff fd09 	bl	80039dc <vPortEnterCritical>
 8003fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fd0:	b25b      	sxtb	r3, r3
 8003fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd6:	d103      	bne.n	8003fe0 <xQueueReceive+0x11c>
 8003fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fe6:	b25b      	sxtb	r3, r3
 8003fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fec:	d103      	bne.n	8003ff6 <xQueueReceive+0x132>
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ff6:	f7ff fd1f 	bl	8003a38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ffa:	1d3a      	adds	r2, r7, #4
 8003ffc:	f107 0310 	add.w	r3, r7, #16
 8004000:	4611      	mov	r1, r2
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fdd4 	bl	8004bb0 <xTaskCheckForTimeOut>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d123      	bne.n	8004056 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800400e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004010:	f000 f916 	bl	8004240 <prvIsQueueEmpty>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d017      	beq.n	800404a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	3324      	adds	r3, #36	; 0x24
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	4611      	mov	r1, r2
 8004022:	4618      	mov	r0, r3
 8004024:	f000 fd28 	bl	8004a78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800402a:	f000 f8b7 	bl	800419c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800402e:	f000 fb75 	bl	800471c <xTaskResumeAll>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d189      	bne.n	8003f4c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004038:	4b0f      	ldr	r3, [pc, #60]	; (8004078 <xQueueReceive+0x1b4>)
 800403a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	e780      	b.n	8003f4c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800404a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800404c:	f000 f8a6 	bl	800419c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004050:	f000 fb64 	bl	800471c <xTaskResumeAll>
 8004054:	e77a      	b.n	8003f4c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004058:	f000 f8a0 	bl	800419c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800405c:	f000 fb5e 	bl	800471c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004062:	f000 f8ed 	bl	8004240 <prvIsQueueEmpty>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	f43f af6f 	beq.w	8003f4c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800406e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004070:	4618      	mov	r0, r3
 8004072:	3730      	adds	r7, #48	; 0x30
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	e000ed04 	.word	0xe000ed04

0800407c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004088:	2300      	movs	r3, #0
 800408a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10d      	bne.n	80040b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d14d      	bne.n	800413e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fede 	bl	8004e68 <xTaskPriorityDisinherit>
 80040ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	609a      	str	r2, [r3, #8]
 80040b4:	e043      	b.n	800413e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d119      	bne.n	80040f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6858      	ldr	r0, [r3, #4]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	461a      	mov	r2, r3
 80040c6:	68b9      	ldr	r1, [r7, #8]
 80040c8:	f000 ffe2 	bl	8005090 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	441a      	add	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d32b      	bcc.n	800413e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	605a      	str	r2, [r3, #4]
 80040ee:	e026      	b.n	800413e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	68d8      	ldr	r0, [r3, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	461a      	mov	r2, r3
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	f000 ffc8 	bl	8005090 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	425b      	negs	r3, r3
 800410a:	441a      	add	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d207      	bcs.n	800412c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	425b      	negs	r3, r3
 8004126:	441a      	add	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d105      	bne.n	800413e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	3b01      	subs	r3, #1
 800413c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004146:	697b      	ldr	r3, [r7, #20]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	2b00      	cmp	r3, #0
 8004160:	d018      	beq.n	8004194 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	441a      	add	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	429a      	cmp	r2, r3
 800417a:	d303      	bcc.n	8004184 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68d9      	ldr	r1, [r3, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	461a      	mov	r2, r3
 800418e:	6838      	ldr	r0, [r7, #0]
 8004190:	f000 ff7e 	bl	8005090 <memcpy>
	}
}
 8004194:	bf00      	nop
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80041a4:	f7ff fc1a 	bl	80039dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041b0:	e011      	b.n	80041d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d012      	beq.n	80041e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3324      	adds	r3, #36	; 0x24
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fc7e 	bl	8004ac0 <xTaskRemoveFromEventList>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80041ca:	f000 fd51 	bl	8004c70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	dce9      	bgt.n	80041b2 <prvUnlockQueue+0x16>
 80041de:	e000      	b.n	80041e2 <prvUnlockQueue+0x46>
					break;
 80041e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	22ff      	movs	r2, #255	; 0xff
 80041e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80041ea:	f7ff fc25 	bl	8003a38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80041ee:	f7ff fbf5 	bl	80039dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041fa:	e011      	b.n	8004220 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d012      	beq.n	800422a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3310      	adds	r3, #16
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fc59 	bl	8004ac0 <xTaskRemoveFromEventList>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004214:	f000 fd2c 	bl	8004c70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004218:	7bbb      	ldrb	r3, [r7, #14]
 800421a:	3b01      	subs	r3, #1
 800421c:	b2db      	uxtb	r3, r3
 800421e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004220:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004224:	2b00      	cmp	r3, #0
 8004226:	dce9      	bgt.n	80041fc <prvUnlockQueue+0x60>
 8004228:	e000      	b.n	800422c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800422a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	22ff      	movs	r2, #255	; 0xff
 8004230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004234:	f7ff fc00 	bl	8003a38 <vPortExitCritical>
}
 8004238:	bf00      	nop
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004248:	f7ff fbc8 	bl	80039dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004250:	2b00      	cmp	r3, #0
 8004252:	d102      	bne.n	800425a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004254:	2301      	movs	r3, #1
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	e001      	b.n	800425e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800425e:	f7ff fbeb 	bl	8003a38 <vPortExitCritical>

	return xReturn;
 8004262:	68fb      	ldr	r3, [r7, #12]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	e014      	b.n	80042a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800427c:	4a0e      	ldr	r2, [pc, #56]	; (80042b8 <vQueueAddToRegistry+0x4c>)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10b      	bne.n	80042a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004288:	490b      	ldr	r1, [pc, #44]	; (80042b8 <vQueueAddToRegistry+0x4c>)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004292:	4a09      	ldr	r2, [pc, #36]	; (80042b8 <vQueueAddToRegistry+0x4c>)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4413      	add	r3, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800429e:	e005      	b.n	80042ac <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	3301      	adds	r3, #1
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b07      	cmp	r3, #7
 80042aa:	d9e7      	bls.n	800427c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80042ac:	bf00      	nop
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	20001c8c 	.word	0x20001c8c

080042bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08e      	sub	sp, #56	; 0x38
 80042c0:	af04      	add	r7, sp, #16
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d109      	bne.n	80042e4 <xTaskCreateStatic+0x28>
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	623b      	str	r3, [r7, #32]
 80042e2:	e7fe      	b.n	80042e2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80042e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d109      	bne.n	80042fe <xTaskCreateStatic+0x42>
 80042ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	61fb      	str	r3, [r7, #28]
 80042fc:	e7fe      	b.n	80042fc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80042fe:	2354      	movs	r3, #84	; 0x54
 8004300:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b54      	cmp	r3, #84	; 0x54
 8004306:	d009      	beq.n	800431c <xTaskCreateStatic+0x60>
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	e7fe      	b.n	800431a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800431c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004320:	2b00      	cmp	r3, #0
 8004322:	d01e      	beq.n	8004362 <xTaskCreateStatic+0xa6>
 8004324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004326:	2b00      	cmp	r3, #0
 8004328:	d01b      	beq.n	8004362 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800432a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004332:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	2202      	movs	r2, #2
 8004338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800433c:	2300      	movs	r3, #0
 800433e:	9303      	str	r3, [sp, #12]
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	9302      	str	r3, [sp, #8]
 8004344:	f107 0314 	add.w	r3, r7, #20
 8004348:	9301      	str	r3, [sp, #4]
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 f850 	bl	80043fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800435a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800435c:	f000 f8d4 	bl	8004508 <prvAddNewTaskToReadyList>
 8004360:	e001      	b.n	8004366 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004366:	697b      	ldr	r3, [r7, #20]
	}
 8004368:	4618      	mov	r0, r3
 800436a:	3728      	adds	r7, #40	; 0x28
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08c      	sub	sp, #48	; 0x30
 8004374:	af04      	add	r7, sp, #16
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	4613      	mov	r3, r2
 800437e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004380:	88fb      	ldrh	r3, [r7, #6]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4618      	mov	r0, r3
 8004386:	f7fe ff77 	bl	8003278 <pvPortMalloc>
 800438a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00e      	beq.n	80043b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004392:	2054      	movs	r0, #84	; 0x54
 8004394:	f7fe ff70 	bl	8003278 <pvPortMalloc>
 8004398:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	631a      	str	r2, [r3, #48]	; 0x30
 80043a6:	e005      	b.n	80043b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043a8:	6978      	ldr	r0, [r7, #20]
 80043aa:	f7ff f827 	bl	80033fc <vPortFree>
 80043ae:	e001      	b.n	80043b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043b0:	2300      	movs	r3, #0
 80043b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d017      	beq.n	80043ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043c2:	88fa      	ldrh	r2, [r7, #6]
 80043c4:	2300      	movs	r3, #0
 80043c6:	9303      	str	r3, [sp, #12]
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	9302      	str	r3, [sp, #8]
 80043cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ce:	9301      	str	r3, [sp, #4]
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	68b9      	ldr	r1, [r7, #8]
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 f80e 	bl	80043fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043de:	69f8      	ldr	r0, [r7, #28]
 80043e0:	f000 f892 	bl	8004508 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043e4:	2301      	movs	r3, #1
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	e002      	b.n	80043f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043ea:	f04f 33ff 	mov.w	r3, #4294967295
 80043ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043f0:	69bb      	ldr	r3, [r7, #24]
	}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3720      	adds	r7, #32
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b088      	sub	sp, #32
 80043fe:	af00      	add	r7, sp, #0
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	607a      	str	r2, [r7, #4]
 8004406:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004412:	3b01      	subs	r3, #1
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	f023 0307 	bic.w	r3, r3, #7
 8004420:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	2b00      	cmp	r3, #0
 800442a:	d009      	beq.n	8004440 <prvInitialiseNewTask+0x46>
 800442c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	e7fe      	b.n	800443e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d01f      	beq.n	8004486 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004446:	2300      	movs	r3, #0
 8004448:	61fb      	str	r3, [r7, #28]
 800444a:	e012      	b.n	8004472 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	4413      	add	r3, r2
 8004452:	7819      	ldrb	r1, [r3, #0]
 8004454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	4413      	add	r3, r2
 800445a:	3334      	adds	r3, #52	; 0x34
 800445c:	460a      	mov	r2, r1
 800445e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	4413      	add	r3, r2
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d006      	beq.n	800447a <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	3301      	adds	r3, #1
 8004470:	61fb      	str	r3, [r7, #28]
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	2b0f      	cmp	r3, #15
 8004476:	d9e9      	bls.n	800444c <prvInitialiseNewTask+0x52>
 8004478:	e000      	b.n	800447c <prvInitialiseNewTask+0x82>
			{
				break;
 800447a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800447c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004484:	e003      	b.n	800448e <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800448e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004490:	2b06      	cmp	r3, #6
 8004492:	d901      	bls.n	8004498 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004494:	2306      	movs	r3, #6
 8004496:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800449c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800449e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044a2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80044a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a6:	2200      	movs	r2, #0
 80044a8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	3304      	adds	r3, #4
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7ff f8d8 	bl	8003664 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	3318      	adds	r3, #24
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff f8d3 	bl	8003664 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c6:	f1c3 0207 	rsb	r2, r3, #7
 80044ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d6:	2200      	movs	r2, #0
 80044d8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	68f9      	ldr	r1, [r7, #12]
 80044e6:	69b8      	ldr	r0, [r7, #24]
 80044e8:	f7ff f950 	bl	800378c <pxPortInitialiseStack>
 80044ec:	4602      	mov	r2, r0
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80044f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80044f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044fe:	bf00      	nop
 8004500:	3720      	adds	r7, #32
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004510:	f7ff fa64 	bl	80039dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004514:	4b2a      	ldr	r3, [pc, #168]	; (80045c0 <prvAddNewTaskToReadyList+0xb8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3301      	adds	r3, #1
 800451a:	4a29      	ldr	r2, [pc, #164]	; (80045c0 <prvAddNewTaskToReadyList+0xb8>)
 800451c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800451e:	4b29      	ldr	r3, [pc, #164]	; (80045c4 <prvAddNewTaskToReadyList+0xbc>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d109      	bne.n	800453a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004526:	4a27      	ldr	r2, [pc, #156]	; (80045c4 <prvAddNewTaskToReadyList+0xbc>)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800452c:	4b24      	ldr	r3, [pc, #144]	; (80045c0 <prvAddNewTaskToReadyList+0xb8>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d110      	bne.n	8004556 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004534:	f000 fbc0 	bl	8004cb8 <prvInitialiseTaskLists>
 8004538:	e00d      	b.n	8004556 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800453a:	4b23      	ldr	r3, [pc, #140]	; (80045c8 <prvAddNewTaskToReadyList+0xc0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d109      	bne.n	8004556 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004542:	4b20      	ldr	r3, [pc, #128]	; (80045c4 <prvAddNewTaskToReadyList+0xbc>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	429a      	cmp	r2, r3
 800454e:	d802      	bhi.n	8004556 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004550:	4a1c      	ldr	r2, [pc, #112]	; (80045c4 <prvAddNewTaskToReadyList+0xbc>)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004556:	4b1d      	ldr	r3, [pc, #116]	; (80045cc <prvAddNewTaskToReadyList+0xc4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3301      	adds	r3, #1
 800455c:	4a1b      	ldr	r2, [pc, #108]	; (80045cc <prvAddNewTaskToReadyList+0xc4>)
 800455e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	2201      	movs	r2, #1
 8004566:	409a      	lsls	r2, r3
 8004568:	4b19      	ldr	r3, [pc, #100]	; (80045d0 <prvAddNewTaskToReadyList+0xc8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4313      	orrs	r3, r2
 800456e:	4a18      	ldr	r2, [pc, #96]	; (80045d0 <prvAddNewTaskToReadyList+0xc8>)
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4a15      	ldr	r2, [pc, #84]	; (80045d4 <prvAddNewTaskToReadyList+0xcc>)
 8004580:	441a      	add	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3304      	adds	r3, #4
 8004586:	4619      	mov	r1, r3
 8004588:	4610      	mov	r0, r2
 800458a:	f7ff f878 	bl	800367e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800458e:	f7ff fa53 	bl	8003a38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004592:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <prvAddNewTaskToReadyList+0xc0>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00e      	beq.n	80045b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800459a:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <prvAddNewTaskToReadyList+0xbc>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d207      	bcs.n	80045b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <prvAddNewTaskToReadyList+0xd0>)
 80045aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045b8:	bf00      	nop
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	20001b84 	.word	0x20001b84
 80045c4:	20001a84 	.word	0x20001a84
 80045c8:	20001b90 	.word	0x20001b90
 80045cc:	20001ba0 	.word	0x20001ba0
 80045d0:	20001b8c 	.word	0x20001b8c
 80045d4:	20001a88 	.word	0x20001a88
 80045d8:	e000ed04 	.word	0xe000ed04

080045dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d016      	beq.n	800461c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80045ee:	4b13      	ldr	r3, [pc, #76]	; (800463c <vTaskDelay+0x60>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d009      	beq.n	800460a <vTaskDelay+0x2e>
 80045f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	60bb      	str	r3, [r7, #8]
 8004608:	e7fe      	b.n	8004608 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800460a:	f000 f879 	bl	8004700 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800460e:	2100      	movs	r1, #0
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fcad 	bl	8004f70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004616:	f000 f881 	bl	800471c <xTaskResumeAll>
 800461a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d107      	bne.n	8004632 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004622:	4b07      	ldr	r3, [pc, #28]	; (8004640 <vTaskDelay+0x64>)
 8004624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004632:	bf00      	nop
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	20001bac 	.word	0x20001bac
 8004640:	e000ed04 	.word	0xe000ed04

08004644 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08a      	sub	sp, #40	; 0x28
 8004648:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800464a:	2300      	movs	r3, #0
 800464c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800464e:	2300      	movs	r3, #0
 8004650:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004652:	463a      	mov	r2, r7
 8004654:	1d39      	adds	r1, r7, #4
 8004656:	f107 0308 	add.w	r3, r7, #8
 800465a:	4618      	mov	r0, r3
 800465c:	f7fb ff88 	bl	8000570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004660:	6839      	ldr	r1, [r7, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	9202      	str	r2, [sp, #8]
 8004668:	9301      	str	r3, [sp, #4]
 800466a:	2300      	movs	r3, #0
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	2300      	movs	r3, #0
 8004670:	460a      	mov	r2, r1
 8004672:	491d      	ldr	r1, [pc, #116]	; (80046e8 <vTaskStartScheduler+0xa4>)
 8004674:	481d      	ldr	r0, [pc, #116]	; (80046ec <vTaskStartScheduler+0xa8>)
 8004676:	f7ff fe21 	bl	80042bc <xTaskCreateStatic>
 800467a:	4602      	mov	r2, r0
 800467c:	4b1c      	ldr	r3, [pc, #112]	; (80046f0 <vTaskStartScheduler+0xac>)
 800467e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004680:	4b1b      	ldr	r3, [pc, #108]	; (80046f0 <vTaskStartScheduler+0xac>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004688:	2301      	movs	r3, #1
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	e001      	b.n	8004692 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d115      	bne.n	80046c4 <vTaskStartScheduler+0x80>
 8004698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046aa:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <vTaskStartScheduler+0xb0>)
 80046ac:	f04f 32ff 	mov.w	r2, #4294967295
 80046b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046b2:	4b11      	ldr	r3, [pc, #68]	; (80046f8 <vTaskStartScheduler+0xb4>)
 80046b4:	2201      	movs	r2, #1
 80046b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046b8:	4b10      	ldr	r3, [pc, #64]	; (80046fc <vTaskStartScheduler+0xb8>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046be:	f7ff f8ef 	bl	80038a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046c2:	e00d      	b.n	80046e0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ca:	d109      	bne.n	80046e0 <vTaskStartScheduler+0x9c>
 80046cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	e7fe      	b.n	80046de <vTaskStartScheduler+0x9a>
}
 80046e0:	bf00      	nop
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	08005fc0 	.word	0x08005fc0
 80046ec:	08004c89 	.word	0x08004c89
 80046f0:	20001ba8 	.word	0x20001ba8
 80046f4:	20001ba4 	.word	0x20001ba4
 80046f8:	20001b90 	.word	0x20001b90
 80046fc:	20001b88 	.word	0x20001b88

08004700 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004704:	4b04      	ldr	r3, [pc, #16]	; (8004718 <vTaskSuspendAll+0x18>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3301      	adds	r3, #1
 800470a:	4a03      	ldr	r2, [pc, #12]	; (8004718 <vTaskSuspendAll+0x18>)
 800470c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800470e:	bf00      	nop
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	20001bac 	.word	0x20001bac

0800471c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004722:	2300      	movs	r3, #0
 8004724:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004726:	2300      	movs	r3, #0
 8004728:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800472a:	4b41      	ldr	r3, [pc, #260]	; (8004830 <xTaskResumeAll+0x114>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <xTaskResumeAll+0x2a>
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	e7fe      	b.n	8004744 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004746:	f7ff f949 	bl	80039dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800474a:	4b39      	ldr	r3, [pc, #228]	; (8004830 <xTaskResumeAll+0x114>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3b01      	subs	r3, #1
 8004750:	4a37      	ldr	r2, [pc, #220]	; (8004830 <xTaskResumeAll+0x114>)
 8004752:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004754:	4b36      	ldr	r3, [pc, #216]	; (8004830 <xTaskResumeAll+0x114>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d161      	bne.n	8004820 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800475c:	4b35      	ldr	r3, [pc, #212]	; (8004834 <xTaskResumeAll+0x118>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d05d      	beq.n	8004820 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004764:	e02e      	b.n	80047c4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004766:	4b34      	ldr	r3, [pc, #208]	; (8004838 <xTaskResumeAll+0x11c>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3318      	adds	r3, #24
 8004772:	4618      	mov	r0, r3
 8004774:	f7fe ffe0 	bl	8003738 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	3304      	adds	r3, #4
 800477c:	4618      	mov	r0, r3
 800477e:	f7fe ffdb 	bl	8003738 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004786:	2201      	movs	r2, #1
 8004788:	409a      	lsls	r2, r3
 800478a:	4b2c      	ldr	r3, [pc, #176]	; (800483c <xTaskResumeAll+0x120>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4313      	orrs	r3, r2
 8004790:	4a2a      	ldr	r2, [pc, #168]	; (800483c <xTaskResumeAll+0x120>)
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4a27      	ldr	r2, [pc, #156]	; (8004840 <xTaskResumeAll+0x124>)
 80047a2:	441a      	add	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	3304      	adds	r3, #4
 80047a8:	4619      	mov	r1, r3
 80047aa:	4610      	mov	r0, r2
 80047ac:	f7fe ff67 	bl	800367e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b4:	4b23      	ldr	r3, [pc, #140]	; (8004844 <xTaskResumeAll+0x128>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d302      	bcc.n	80047c4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80047be:	4b22      	ldr	r3, [pc, #136]	; (8004848 <xTaskResumeAll+0x12c>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047c4:	4b1c      	ldr	r3, [pc, #112]	; (8004838 <xTaskResumeAll+0x11c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1cc      	bne.n	8004766 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047d2:	f000 fb0b 	bl	8004dec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80047d6:	4b1d      	ldr	r3, [pc, #116]	; (800484c <xTaskResumeAll+0x130>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d010      	beq.n	8004804 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047e2:	f000 f837 	bl	8004854 <xTaskIncrementTick>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80047ec:	4b16      	ldr	r3, [pc, #88]	; (8004848 <xTaskResumeAll+0x12c>)
 80047ee:	2201      	movs	r2, #1
 80047f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f1      	bne.n	80047e2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80047fe:	4b13      	ldr	r3, [pc, #76]	; (800484c <xTaskResumeAll+0x130>)
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004804:	4b10      	ldr	r3, [pc, #64]	; (8004848 <xTaskResumeAll+0x12c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d009      	beq.n	8004820 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800480c:	2301      	movs	r3, #1
 800480e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004810:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <xTaskResumeAll+0x134>)
 8004812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004820:	f7ff f90a 	bl	8003a38 <vPortExitCritical>

	return xAlreadyYielded;
 8004824:	68bb      	ldr	r3, [r7, #8]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	20001bac 	.word	0x20001bac
 8004834:	20001b84 	.word	0x20001b84
 8004838:	20001b44 	.word	0x20001b44
 800483c:	20001b8c 	.word	0x20001b8c
 8004840:	20001a88 	.word	0x20001a88
 8004844:	20001a84 	.word	0x20001a84
 8004848:	20001b98 	.word	0x20001b98
 800484c:	20001b94 	.word	0x20001b94
 8004850:	e000ed04 	.word	0xe000ed04

08004854 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800485a:	2300      	movs	r3, #0
 800485c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800485e:	4b4e      	ldr	r3, [pc, #312]	; (8004998 <xTaskIncrementTick+0x144>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f040 8087 	bne.w	8004976 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004868:	4b4c      	ldr	r3, [pc, #304]	; (800499c <xTaskIncrementTick+0x148>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3301      	adds	r3, #1
 800486e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004870:	4a4a      	ldr	r2, [pc, #296]	; (800499c <xTaskIncrementTick+0x148>)
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d11f      	bne.n	80048bc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800487c:	4b48      	ldr	r3, [pc, #288]	; (80049a0 <xTaskIncrementTick+0x14c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d009      	beq.n	800489a <xTaskIncrementTick+0x46>
 8004886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	e7fe      	b.n	8004898 <xTaskIncrementTick+0x44>
 800489a:	4b41      	ldr	r3, [pc, #260]	; (80049a0 <xTaskIncrementTick+0x14c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	4b40      	ldr	r3, [pc, #256]	; (80049a4 <xTaskIncrementTick+0x150>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a3e      	ldr	r2, [pc, #248]	; (80049a0 <xTaskIncrementTick+0x14c>)
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	4a3e      	ldr	r2, [pc, #248]	; (80049a4 <xTaskIncrementTick+0x150>)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	4b3e      	ldr	r3, [pc, #248]	; (80049a8 <xTaskIncrementTick+0x154>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3301      	adds	r3, #1
 80048b4:	4a3c      	ldr	r2, [pc, #240]	; (80049a8 <xTaskIncrementTick+0x154>)
 80048b6:	6013      	str	r3, [r2, #0]
 80048b8:	f000 fa98 	bl	8004dec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048bc:	4b3b      	ldr	r3, [pc, #236]	; (80049ac <xTaskIncrementTick+0x158>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d348      	bcc.n	8004958 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048c6:	4b36      	ldr	r3, [pc, #216]	; (80049a0 <xTaskIncrementTick+0x14c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d104      	bne.n	80048da <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048d0:	4b36      	ldr	r3, [pc, #216]	; (80049ac <xTaskIncrementTick+0x158>)
 80048d2:	f04f 32ff 	mov.w	r2, #4294967295
 80048d6:	601a      	str	r2, [r3, #0]
					break;
 80048d8:	e03e      	b.n	8004958 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048da:	4b31      	ldr	r3, [pc, #196]	; (80049a0 <xTaskIncrementTick+0x14c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d203      	bcs.n	80048fa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048f2:	4a2e      	ldr	r2, [pc, #184]	; (80049ac <xTaskIncrementTick+0x158>)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80048f8:	e02e      	b.n	8004958 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	3304      	adds	r3, #4
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fe ff1a 	bl	8003738 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004908:	2b00      	cmp	r3, #0
 800490a:	d004      	beq.n	8004916 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	3318      	adds	r3, #24
 8004910:	4618      	mov	r0, r3
 8004912:	f7fe ff11 	bl	8003738 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	2201      	movs	r2, #1
 800491c:	409a      	lsls	r2, r3
 800491e:	4b24      	ldr	r3, [pc, #144]	; (80049b0 <xTaskIncrementTick+0x15c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4313      	orrs	r3, r2
 8004924:	4a22      	ldr	r2, [pc, #136]	; (80049b0 <xTaskIncrementTick+0x15c>)
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4a1f      	ldr	r2, [pc, #124]	; (80049b4 <xTaskIncrementTick+0x160>)
 8004936:	441a      	add	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	3304      	adds	r3, #4
 800493c:	4619      	mov	r1, r3
 800493e:	4610      	mov	r0, r2
 8004940:	f7fe fe9d 	bl	800367e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004948:	4b1b      	ldr	r3, [pc, #108]	; (80049b8 <xTaskIncrementTick+0x164>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494e:	429a      	cmp	r2, r3
 8004950:	d3b9      	bcc.n	80048c6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004952:	2301      	movs	r3, #1
 8004954:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004956:	e7b6      	b.n	80048c6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004958:	4b17      	ldr	r3, [pc, #92]	; (80049b8 <xTaskIncrementTick+0x164>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495e:	4915      	ldr	r1, [pc, #84]	; (80049b4 <xTaskIncrementTick+0x160>)
 8004960:	4613      	mov	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	440b      	add	r3, r1
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d907      	bls.n	8004980 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004970:	2301      	movs	r3, #1
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	e004      	b.n	8004980 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004976:	4b11      	ldr	r3, [pc, #68]	; (80049bc <xTaskIncrementTick+0x168>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3301      	adds	r3, #1
 800497c:	4a0f      	ldr	r2, [pc, #60]	; (80049bc <xTaskIncrementTick+0x168>)
 800497e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004980:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <xTaskIncrementTick+0x16c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004988:	2301      	movs	r3, #1
 800498a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800498c:	697b      	ldr	r3, [r7, #20]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3718      	adds	r7, #24
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	20001bac 	.word	0x20001bac
 800499c:	20001b88 	.word	0x20001b88
 80049a0:	20001b3c 	.word	0x20001b3c
 80049a4:	20001b40 	.word	0x20001b40
 80049a8:	20001b9c 	.word	0x20001b9c
 80049ac:	20001ba4 	.word	0x20001ba4
 80049b0:	20001b8c 	.word	0x20001b8c
 80049b4:	20001a88 	.word	0x20001a88
 80049b8:	20001a84 	.word	0x20001a84
 80049bc:	20001b94 	.word	0x20001b94
 80049c0:	20001b98 	.word	0x20001b98

080049c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049ca:	4b26      	ldr	r3, [pc, #152]	; (8004a64 <vTaskSwitchContext+0xa0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049d2:	4b25      	ldr	r3, [pc, #148]	; (8004a68 <vTaskSwitchContext+0xa4>)
 80049d4:	2201      	movs	r2, #1
 80049d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049d8:	e03e      	b.n	8004a58 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80049da:	4b23      	ldr	r3, [pc, #140]	; (8004a68 <vTaskSwitchContext+0xa4>)
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049e0:	4b22      	ldr	r3, [pc, #136]	; (8004a6c <vTaskSwitchContext+0xa8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	fab3 f383 	clz	r3, r3
 80049ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80049ee:	7afb      	ldrb	r3, [r7, #11]
 80049f0:	f1c3 031f 	rsb	r3, r3, #31
 80049f4:	617b      	str	r3, [r7, #20]
 80049f6:	491e      	ldr	r1, [pc, #120]	; (8004a70 <vTaskSwitchContext+0xac>)
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	4613      	mov	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d109      	bne.n	8004a1e <vTaskSwitchContext+0x5a>
	__asm volatile
 8004a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	607b      	str	r3, [r7, #4]
 8004a1c:	e7fe      	b.n	8004a1c <vTaskSwitchContext+0x58>
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4a11      	ldr	r2, [pc, #68]	; (8004a70 <vTaskSwitchContext+0xac>)
 8004a2a:	4413      	add	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	605a      	str	r2, [r3, #4]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	3308      	adds	r3, #8
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d104      	bne.n	8004a4e <vTaskSwitchContext+0x8a>
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	4a07      	ldr	r2, [pc, #28]	; (8004a74 <vTaskSwitchContext+0xb0>)
 8004a56:	6013      	str	r3, [r2, #0]
}
 8004a58:	bf00      	nop
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	20001bac 	.word	0x20001bac
 8004a68:	20001b98 	.word	0x20001b98
 8004a6c:	20001b8c 	.word	0x20001b8c
 8004a70:	20001a88 	.word	0x20001a88
 8004a74:	20001a84 	.word	0x20001a84

08004a78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d109      	bne.n	8004a9c <vTaskPlaceOnEventList+0x24>
 8004a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	e7fe      	b.n	8004a9a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a9c:	4b07      	ldr	r3, [pc, #28]	; (8004abc <vTaskPlaceOnEventList+0x44>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3318      	adds	r3, #24
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7fe fe0e 	bl	80036c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004aaa:	2101      	movs	r1, #1
 8004aac:	6838      	ldr	r0, [r7, #0]
 8004aae:	f000 fa5f 	bl	8004f70 <prvAddCurrentTaskToDelayedList>
}
 8004ab2:	bf00      	nop
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20001a84 	.word	0x20001a84

08004ac0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d109      	bne.n	8004aea <xTaskRemoveFromEventList+0x2a>
 8004ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	e7fe      	b.n	8004ae8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	3318      	adds	r3, #24
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fe fe22 	bl	8003738 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004af4:	4b1d      	ldr	r3, [pc, #116]	; (8004b6c <xTaskRemoveFromEventList+0xac>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d11c      	bne.n	8004b36 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	3304      	adds	r3, #4
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fe fe19 	bl	8003738 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	409a      	lsls	r2, r3
 8004b0e:	4b18      	ldr	r3, [pc, #96]	; (8004b70 <xTaskRemoveFromEventList+0xb0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	4a16      	ldr	r2, [pc, #88]	; (8004b70 <xTaskRemoveFromEventList+0xb0>)
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4a13      	ldr	r2, [pc, #76]	; (8004b74 <xTaskRemoveFromEventList+0xb4>)
 8004b26:	441a      	add	r2, r3
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4610      	mov	r0, r2
 8004b30:	f7fe fda5 	bl	800367e <vListInsertEnd>
 8004b34:	e005      	b.n	8004b42 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	3318      	adds	r3, #24
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	480e      	ldr	r0, [pc, #56]	; (8004b78 <xTaskRemoveFromEventList+0xb8>)
 8004b3e:	f7fe fd9e 	bl	800367e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b46:	4b0d      	ldr	r3, [pc, #52]	; (8004b7c <xTaskRemoveFromEventList+0xbc>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d905      	bls.n	8004b5c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b50:	2301      	movs	r3, #1
 8004b52:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b54:	4b0a      	ldr	r3, [pc, #40]	; (8004b80 <xTaskRemoveFromEventList+0xc0>)
 8004b56:	2201      	movs	r2, #1
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	e001      	b.n	8004b60 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004b60:	697b      	ldr	r3, [r7, #20]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20001bac 	.word	0x20001bac
 8004b70:	20001b8c 	.word	0x20001b8c
 8004b74:	20001a88 	.word	0x20001a88
 8004b78:	20001b44 	.word	0x20001b44
 8004b7c:	20001a84 	.word	0x20001a84
 8004b80:	20001b98 	.word	0x20001b98

08004b84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b8c:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <vTaskInternalSetTimeOutState+0x24>)
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b94:	4b05      	ldr	r3, [pc, #20]	; (8004bac <vTaskInternalSetTimeOutState+0x28>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	605a      	str	r2, [r3, #4]
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	20001b9c 	.word	0x20001b9c
 8004bac:	20001b88 	.word	0x20001b88

08004bb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d109      	bne.n	8004bd4 <xTaskCheckForTimeOut+0x24>
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	613b      	str	r3, [r7, #16]
 8004bd2:	e7fe      	b.n	8004bd2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d109      	bne.n	8004bee <xTaskCheckForTimeOut+0x3e>
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	e7fe      	b.n	8004bec <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004bee:	f7fe fef5 	bl	80039dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004bf2:	4b1d      	ldr	r3, [pc, #116]	; (8004c68 <xTaskCheckForTimeOut+0xb8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0a:	d102      	bne.n	8004c12 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61fb      	str	r3, [r7, #28]
 8004c10:	e023      	b.n	8004c5a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	4b15      	ldr	r3, [pc, #84]	; (8004c6c <xTaskCheckForTimeOut+0xbc>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d007      	beq.n	8004c2e <xTaskCheckForTimeOut+0x7e>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d302      	bcc.n	8004c2e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	61fb      	str	r3, [r7, #28]
 8004c2c:	e015      	b.n	8004c5a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d20b      	bcs.n	8004c50 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	1ad2      	subs	r2, r2, r3
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff ff9d 	bl	8004b84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61fb      	str	r3, [r7, #28]
 8004c4e:	e004      	b.n	8004c5a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c56:	2301      	movs	r3, #1
 8004c58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c5a:	f7fe feed 	bl	8003a38 <vPortExitCritical>

	return xReturn;
 8004c5e:	69fb      	ldr	r3, [r7, #28]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3720      	adds	r7, #32
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	20001b88 	.word	0x20001b88
 8004c6c:	20001b9c 	.word	0x20001b9c

08004c70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004c74:	4b03      	ldr	r3, [pc, #12]	; (8004c84 <vTaskMissedYield+0x14>)
 8004c76:	2201      	movs	r2, #1
 8004c78:	601a      	str	r2, [r3, #0]
}
 8004c7a:	bf00      	nop
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	20001b98 	.word	0x20001b98

08004c88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c90:	f000 f852 	bl	8004d38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c94:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <prvIdleTask+0x28>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d9f9      	bls.n	8004c90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c9c:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <prvIdleTask+0x2c>)
 8004c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004cac:	e7f0      	b.n	8004c90 <prvIdleTask+0x8>
 8004cae:	bf00      	nop
 8004cb0:	20001a88 	.word	0x20001a88
 8004cb4:	e000ed04 	.word	0xe000ed04

08004cb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	607b      	str	r3, [r7, #4]
 8004cc2:	e00c      	b.n	8004cde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4a12      	ldr	r2, [pc, #72]	; (8004d18 <prvInitialiseTaskLists+0x60>)
 8004cd0:	4413      	add	r3, r2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fe fca6 	bl	8003624 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	607b      	str	r3, [r7, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b06      	cmp	r3, #6
 8004ce2:	d9ef      	bls.n	8004cc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ce4:	480d      	ldr	r0, [pc, #52]	; (8004d1c <prvInitialiseTaskLists+0x64>)
 8004ce6:	f7fe fc9d 	bl	8003624 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004cea:	480d      	ldr	r0, [pc, #52]	; (8004d20 <prvInitialiseTaskLists+0x68>)
 8004cec:	f7fe fc9a 	bl	8003624 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004cf0:	480c      	ldr	r0, [pc, #48]	; (8004d24 <prvInitialiseTaskLists+0x6c>)
 8004cf2:	f7fe fc97 	bl	8003624 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004cf6:	480c      	ldr	r0, [pc, #48]	; (8004d28 <prvInitialiseTaskLists+0x70>)
 8004cf8:	f7fe fc94 	bl	8003624 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004cfc:	480b      	ldr	r0, [pc, #44]	; (8004d2c <prvInitialiseTaskLists+0x74>)
 8004cfe:	f7fe fc91 	bl	8003624 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d02:	4b0b      	ldr	r3, [pc, #44]	; (8004d30 <prvInitialiseTaskLists+0x78>)
 8004d04:	4a05      	ldr	r2, [pc, #20]	; (8004d1c <prvInitialiseTaskLists+0x64>)
 8004d06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d08:	4b0a      	ldr	r3, [pc, #40]	; (8004d34 <prvInitialiseTaskLists+0x7c>)
 8004d0a:	4a05      	ldr	r2, [pc, #20]	; (8004d20 <prvInitialiseTaskLists+0x68>)
 8004d0c:	601a      	str	r2, [r3, #0]
}
 8004d0e:	bf00      	nop
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20001a88 	.word	0x20001a88
 8004d1c:	20001b14 	.word	0x20001b14
 8004d20:	20001b28 	.word	0x20001b28
 8004d24:	20001b44 	.word	0x20001b44
 8004d28:	20001b58 	.word	0x20001b58
 8004d2c:	20001b70 	.word	0x20001b70
 8004d30:	20001b3c 	.word	0x20001b3c
 8004d34:	20001b40 	.word	0x20001b40

08004d38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d3e:	e019      	b.n	8004d74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d40:	f7fe fe4c 	bl	80039dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d44:	4b0f      	ldr	r3, [pc, #60]	; (8004d84 <prvCheckTasksWaitingTermination+0x4c>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3304      	adds	r3, #4
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fe fcf1 	bl	8003738 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d56:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <prvCheckTasksWaitingTermination+0x50>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	4a0a      	ldr	r2, [pc, #40]	; (8004d88 <prvCheckTasksWaitingTermination+0x50>)
 8004d5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d60:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <prvCheckTasksWaitingTermination+0x54>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	4a09      	ldr	r2, [pc, #36]	; (8004d8c <prvCheckTasksWaitingTermination+0x54>)
 8004d68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d6a:	f7fe fe65 	bl	8003a38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f80e 	bl	8004d90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d74:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <prvCheckTasksWaitingTermination+0x54>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e1      	bne.n	8004d40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d7c:	bf00      	nop
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20001b58 	.word	0x20001b58
 8004d88:	20001b84 	.word	0x20001b84
 8004d8c:	20001b6c 	.word	0x20001b6c

08004d90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d108      	bne.n	8004db4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fe fb28 	bl	80033fc <vPortFree>
				vPortFree( pxTCB );
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7fe fb25 	bl	80033fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004db2:	e017      	b.n	8004de4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d103      	bne.n	8004dc6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7fe fb1c 	bl	80033fc <vPortFree>
	}
 8004dc4:	e00e      	b.n	8004de4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d009      	beq.n	8004de4 <prvDeleteTCB+0x54>
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	e7fe      	b.n	8004de2 <prvDeleteTCB+0x52>
	}
 8004de4:	bf00      	nop
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004df2:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <prvResetNextTaskUnblockTime+0x38>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d104      	bne.n	8004e06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004dfc:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <prvResetNextTaskUnblockTime+0x3c>)
 8004dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8004e02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e04:	e008      	b.n	8004e18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e06:	4b07      	ldr	r3, [pc, #28]	; (8004e24 <prvResetNextTaskUnblockTime+0x38>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	4a04      	ldr	r2, [pc, #16]	; (8004e28 <prvResetNextTaskUnblockTime+0x3c>)
 8004e16:	6013      	str	r3, [r2, #0]
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	20001b3c 	.word	0x20001b3c
 8004e28:	20001ba4 	.word	0x20001ba4

08004e2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e32:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <xTaskGetSchedulerState+0x34>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d102      	bne.n	8004e40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	607b      	str	r3, [r7, #4]
 8004e3e:	e008      	b.n	8004e52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e40:	4b08      	ldr	r3, [pc, #32]	; (8004e64 <xTaskGetSchedulerState+0x38>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d102      	bne.n	8004e4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e48:	2302      	movs	r3, #2
 8004e4a:	607b      	str	r3, [r7, #4]
 8004e4c:	e001      	b.n	8004e52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e52:	687b      	ldr	r3, [r7, #4]
	}
 8004e54:	4618      	mov	r0, r3
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	20001b90 	.word	0x20001b90
 8004e64:	20001bac 	.word	0x20001bac

08004e68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e74:	2300      	movs	r3, #0
 8004e76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d06c      	beq.n	8004f58 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e7e:	4b39      	ldr	r3, [pc, #228]	; (8004f64 <xTaskPriorityDisinherit+0xfc>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d009      	beq.n	8004e9c <xTaskPriorityDisinherit+0x34>
 8004e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8c:	f383 8811 	msr	BASEPRI, r3
 8004e90:	f3bf 8f6f 	isb	sy
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	e7fe      	b.n	8004e9a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d109      	bne.n	8004eb8 <xTaskPriorityDisinherit+0x50>
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	60bb      	str	r3, [r7, #8]
 8004eb6:	e7fe      	b.n	8004eb6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ebc:	1e5a      	subs	r2, r3, #1
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d044      	beq.n	8004f58 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d140      	bne.n	8004f58 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fe fc2c 	bl	8003738 <uxListRemove>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d115      	bne.n	8004f12 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eea:	491f      	ldr	r1, [pc, #124]	; (8004f68 <xTaskPriorityDisinherit+0x100>)
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	440b      	add	r3, r1
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10a      	bne.n	8004f12 <xTaskPriorityDisinherit+0xaa>
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f00:	2201      	movs	r2, #1
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	43da      	mvns	r2, r3
 8004f08:	4b18      	ldr	r3, [pc, #96]	; (8004f6c <xTaskPriorityDisinherit+0x104>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	4a17      	ldr	r2, [pc, #92]	; (8004f6c <xTaskPriorityDisinherit+0x104>)
 8004f10:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1e:	f1c3 0207 	rsb	r2, r3, #7
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	409a      	lsls	r2, r3
 8004f2e:	4b0f      	ldr	r3, [pc, #60]	; (8004f6c <xTaskPriorityDisinherit+0x104>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	4a0d      	ldr	r2, [pc, #52]	; (8004f6c <xTaskPriorityDisinherit+0x104>)
 8004f36:	6013      	str	r3, [r2, #0]
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4a08      	ldr	r2, [pc, #32]	; (8004f68 <xTaskPriorityDisinherit+0x100>)
 8004f46:	441a      	add	r2, r3
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4610      	mov	r0, r2
 8004f50:	f7fe fb95 	bl	800367e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f54:	2301      	movs	r3, #1
 8004f56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f58:	697b      	ldr	r3, [r7, #20]
	}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	20001a84 	.word	0x20001a84
 8004f68:	20001a88 	.word	0x20001a88
 8004f6c:	20001b8c 	.word	0x20001b8c

08004f70 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f7a:	4b29      	ldr	r3, [pc, #164]	; (8005020 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f80:	4b28      	ldr	r3, [pc, #160]	; (8005024 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3304      	adds	r3, #4
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fe fbd6 	bl	8003738 <uxListRemove>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10b      	bne.n	8004faa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004f92:	4b24      	ldr	r3, [pc, #144]	; (8005024 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	2201      	movs	r2, #1
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	43da      	mvns	r2, r3
 8004fa0:	4b21      	ldr	r3, [pc, #132]	; (8005028 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	4a20      	ldr	r2, [pc, #128]	; (8005028 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004fa8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb0:	d10a      	bne.n	8004fc8 <prvAddCurrentTaskToDelayedList+0x58>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d007      	beq.n	8004fc8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fb8:	4b1a      	ldr	r3, [pc, #104]	; (8005024 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	481a      	ldr	r0, [pc, #104]	; (800502c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004fc2:	f7fe fb5c 	bl	800367e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fc6:	e026      	b.n	8005016 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4413      	add	r3, r2
 8004fce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fd0:	4b14      	ldr	r3, [pc, #80]	; (8005024 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d209      	bcs.n	8004ff4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fe0:	4b13      	ldr	r3, [pc, #76]	; (8005030 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	4b0f      	ldr	r3, [pc, #60]	; (8005024 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3304      	adds	r3, #4
 8004fea:	4619      	mov	r1, r3
 8004fec:	4610      	mov	r0, r2
 8004fee:	f7fe fb6a 	bl	80036c6 <vListInsert>
}
 8004ff2:	e010      	b.n	8005016 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ff4:	4b0f      	ldr	r3, [pc, #60]	; (8005034 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	4b0a      	ldr	r3, [pc, #40]	; (8005024 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	4619      	mov	r1, r3
 8005000:	4610      	mov	r0, r2
 8005002:	f7fe fb60 	bl	80036c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005006:	4b0c      	ldr	r3, [pc, #48]	; (8005038 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	429a      	cmp	r2, r3
 800500e:	d202      	bcs.n	8005016 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005010:	4a09      	ldr	r2, [pc, #36]	; (8005038 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	6013      	str	r3, [r2, #0]
}
 8005016:	bf00      	nop
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20001b88 	.word	0x20001b88
 8005024:	20001a84 	.word	0x20001a84
 8005028:	20001b8c 	.word	0x20001b8c
 800502c:	20001b70 	.word	0x20001b70
 8005030:	20001b40 	.word	0x20001b40
 8005034:	20001b3c 	.word	0x20001b3c
 8005038:	20001ba4 	.word	0x20001ba4

0800503c <__errno>:
 800503c:	4b01      	ldr	r3, [pc, #4]	; (8005044 <__errno+0x8>)
 800503e:	6818      	ldr	r0, [r3, #0]
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	20000010 	.word	0x20000010

08005048 <__libc_init_array>:
 8005048:	b570      	push	{r4, r5, r6, lr}
 800504a:	4e0d      	ldr	r6, [pc, #52]	; (8005080 <__libc_init_array+0x38>)
 800504c:	4c0d      	ldr	r4, [pc, #52]	; (8005084 <__libc_init_array+0x3c>)
 800504e:	1ba4      	subs	r4, r4, r6
 8005050:	10a4      	asrs	r4, r4, #2
 8005052:	2500      	movs	r5, #0
 8005054:	42a5      	cmp	r5, r4
 8005056:	d109      	bne.n	800506c <__libc_init_array+0x24>
 8005058:	4e0b      	ldr	r6, [pc, #44]	; (8005088 <__libc_init_array+0x40>)
 800505a:	4c0c      	ldr	r4, [pc, #48]	; (800508c <__libc_init_array+0x44>)
 800505c:	f000 ff74 	bl	8005f48 <_init>
 8005060:	1ba4      	subs	r4, r4, r6
 8005062:	10a4      	asrs	r4, r4, #2
 8005064:	2500      	movs	r5, #0
 8005066:	42a5      	cmp	r5, r4
 8005068:	d105      	bne.n	8005076 <__libc_init_array+0x2e>
 800506a:	bd70      	pop	{r4, r5, r6, pc}
 800506c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005070:	4798      	blx	r3
 8005072:	3501      	adds	r5, #1
 8005074:	e7ee      	b.n	8005054 <__libc_init_array+0xc>
 8005076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800507a:	4798      	blx	r3
 800507c:	3501      	adds	r5, #1
 800507e:	e7f2      	b.n	8005066 <__libc_init_array+0x1e>
 8005080:	080060b0 	.word	0x080060b0
 8005084:	080060b0 	.word	0x080060b0
 8005088:	080060b0 	.word	0x080060b0
 800508c:	080060b4 	.word	0x080060b4

08005090 <memcpy>:
 8005090:	b510      	push	{r4, lr}
 8005092:	1e43      	subs	r3, r0, #1
 8005094:	440a      	add	r2, r1
 8005096:	4291      	cmp	r1, r2
 8005098:	d100      	bne.n	800509c <memcpy+0xc>
 800509a:	bd10      	pop	{r4, pc}
 800509c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050a4:	e7f7      	b.n	8005096 <memcpy+0x6>

080050a6 <memset>:
 80050a6:	4402      	add	r2, r0
 80050a8:	4603      	mov	r3, r0
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d100      	bne.n	80050b0 <memset+0xa>
 80050ae:	4770      	bx	lr
 80050b0:	f803 1b01 	strb.w	r1, [r3], #1
 80050b4:	e7f9      	b.n	80050aa <memset+0x4>
	...

080050b8 <iprintf>:
 80050b8:	b40f      	push	{r0, r1, r2, r3}
 80050ba:	4b0a      	ldr	r3, [pc, #40]	; (80050e4 <iprintf+0x2c>)
 80050bc:	b513      	push	{r0, r1, r4, lr}
 80050be:	681c      	ldr	r4, [r3, #0]
 80050c0:	b124      	cbz	r4, 80050cc <iprintf+0x14>
 80050c2:	69a3      	ldr	r3, [r4, #24]
 80050c4:	b913      	cbnz	r3, 80050cc <iprintf+0x14>
 80050c6:	4620      	mov	r0, r4
 80050c8:	f000 fa22 	bl	8005510 <__sinit>
 80050cc:	ab05      	add	r3, sp, #20
 80050ce:	9a04      	ldr	r2, [sp, #16]
 80050d0:	68a1      	ldr	r1, [r4, #8]
 80050d2:	9301      	str	r3, [sp, #4]
 80050d4:	4620      	mov	r0, r4
 80050d6:	f000 fbdb 	bl	8005890 <_vfiprintf_r>
 80050da:	b002      	add	sp, #8
 80050dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050e0:	b004      	add	sp, #16
 80050e2:	4770      	bx	lr
 80050e4:	20000010 	.word	0x20000010

080050e8 <_puts_r>:
 80050e8:	b570      	push	{r4, r5, r6, lr}
 80050ea:	460e      	mov	r6, r1
 80050ec:	4605      	mov	r5, r0
 80050ee:	b118      	cbz	r0, 80050f8 <_puts_r+0x10>
 80050f0:	6983      	ldr	r3, [r0, #24]
 80050f2:	b90b      	cbnz	r3, 80050f8 <_puts_r+0x10>
 80050f4:	f000 fa0c 	bl	8005510 <__sinit>
 80050f8:	69ab      	ldr	r3, [r5, #24]
 80050fa:	68ac      	ldr	r4, [r5, #8]
 80050fc:	b913      	cbnz	r3, 8005104 <_puts_r+0x1c>
 80050fe:	4628      	mov	r0, r5
 8005100:	f000 fa06 	bl	8005510 <__sinit>
 8005104:	4b23      	ldr	r3, [pc, #140]	; (8005194 <_puts_r+0xac>)
 8005106:	429c      	cmp	r4, r3
 8005108:	d117      	bne.n	800513a <_puts_r+0x52>
 800510a:	686c      	ldr	r4, [r5, #4]
 800510c:	89a3      	ldrh	r3, [r4, #12]
 800510e:	071b      	lsls	r3, r3, #28
 8005110:	d51d      	bpl.n	800514e <_puts_r+0x66>
 8005112:	6923      	ldr	r3, [r4, #16]
 8005114:	b1db      	cbz	r3, 800514e <_puts_r+0x66>
 8005116:	3e01      	subs	r6, #1
 8005118:	68a3      	ldr	r3, [r4, #8]
 800511a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800511e:	3b01      	subs	r3, #1
 8005120:	60a3      	str	r3, [r4, #8]
 8005122:	b9e9      	cbnz	r1, 8005160 <_puts_r+0x78>
 8005124:	2b00      	cmp	r3, #0
 8005126:	da2e      	bge.n	8005186 <_puts_r+0x9e>
 8005128:	4622      	mov	r2, r4
 800512a:	210a      	movs	r1, #10
 800512c:	4628      	mov	r0, r5
 800512e:	f000 f83f 	bl	80051b0 <__swbuf_r>
 8005132:	3001      	adds	r0, #1
 8005134:	d011      	beq.n	800515a <_puts_r+0x72>
 8005136:	200a      	movs	r0, #10
 8005138:	e011      	b.n	800515e <_puts_r+0x76>
 800513a:	4b17      	ldr	r3, [pc, #92]	; (8005198 <_puts_r+0xb0>)
 800513c:	429c      	cmp	r4, r3
 800513e:	d101      	bne.n	8005144 <_puts_r+0x5c>
 8005140:	68ac      	ldr	r4, [r5, #8]
 8005142:	e7e3      	b.n	800510c <_puts_r+0x24>
 8005144:	4b15      	ldr	r3, [pc, #84]	; (800519c <_puts_r+0xb4>)
 8005146:	429c      	cmp	r4, r3
 8005148:	bf08      	it	eq
 800514a:	68ec      	ldreq	r4, [r5, #12]
 800514c:	e7de      	b.n	800510c <_puts_r+0x24>
 800514e:	4621      	mov	r1, r4
 8005150:	4628      	mov	r0, r5
 8005152:	f000 f87f 	bl	8005254 <__swsetup_r>
 8005156:	2800      	cmp	r0, #0
 8005158:	d0dd      	beq.n	8005116 <_puts_r+0x2e>
 800515a:	f04f 30ff 	mov.w	r0, #4294967295
 800515e:	bd70      	pop	{r4, r5, r6, pc}
 8005160:	2b00      	cmp	r3, #0
 8005162:	da04      	bge.n	800516e <_puts_r+0x86>
 8005164:	69a2      	ldr	r2, [r4, #24]
 8005166:	429a      	cmp	r2, r3
 8005168:	dc06      	bgt.n	8005178 <_puts_r+0x90>
 800516a:	290a      	cmp	r1, #10
 800516c:	d004      	beq.n	8005178 <_puts_r+0x90>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	6022      	str	r2, [r4, #0]
 8005174:	7019      	strb	r1, [r3, #0]
 8005176:	e7cf      	b.n	8005118 <_puts_r+0x30>
 8005178:	4622      	mov	r2, r4
 800517a:	4628      	mov	r0, r5
 800517c:	f000 f818 	bl	80051b0 <__swbuf_r>
 8005180:	3001      	adds	r0, #1
 8005182:	d1c9      	bne.n	8005118 <_puts_r+0x30>
 8005184:	e7e9      	b.n	800515a <_puts_r+0x72>
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	200a      	movs	r0, #10
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	6022      	str	r2, [r4, #0]
 800518e:	7018      	strb	r0, [r3, #0]
 8005190:	e7e5      	b.n	800515e <_puts_r+0x76>
 8005192:	bf00      	nop
 8005194:	08006034 	.word	0x08006034
 8005198:	08006054 	.word	0x08006054
 800519c:	08006014 	.word	0x08006014

080051a0 <puts>:
 80051a0:	4b02      	ldr	r3, [pc, #8]	; (80051ac <puts+0xc>)
 80051a2:	4601      	mov	r1, r0
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	f7ff bf9f 	b.w	80050e8 <_puts_r>
 80051aa:	bf00      	nop
 80051ac:	20000010 	.word	0x20000010

080051b0 <__swbuf_r>:
 80051b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b2:	460e      	mov	r6, r1
 80051b4:	4614      	mov	r4, r2
 80051b6:	4605      	mov	r5, r0
 80051b8:	b118      	cbz	r0, 80051c2 <__swbuf_r+0x12>
 80051ba:	6983      	ldr	r3, [r0, #24]
 80051bc:	b90b      	cbnz	r3, 80051c2 <__swbuf_r+0x12>
 80051be:	f000 f9a7 	bl	8005510 <__sinit>
 80051c2:	4b21      	ldr	r3, [pc, #132]	; (8005248 <__swbuf_r+0x98>)
 80051c4:	429c      	cmp	r4, r3
 80051c6:	d12a      	bne.n	800521e <__swbuf_r+0x6e>
 80051c8:	686c      	ldr	r4, [r5, #4]
 80051ca:	69a3      	ldr	r3, [r4, #24]
 80051cc:	60a3      	str	r3, [r4, #8]
 80051ce:	89a3      	ldrh	r3, [r4, #12]
 80051d0:	071a      	lsls	r2, r3, #28
 80051d2:	d52e      	bpl.n	8005232 <__swbuf_r+0x82>
 80051d4:	6923      	ldr	r3, [r4, #16]
 80051d6:	b363      	cbz	r3, 8005232 <__swbuf_r+0x82>
 80051d8:	6923      	ldr	r3, [r4, #16]
 80051da:	6820      	ldr	r0, [r4, #0]
 80051dc:	1ac0      	subs	r0, r0, r3
 80051de:	6963      	ldr	r3, [r4, #20]
 80051e0:	b2f6      	uxtb	r6, r6
 80051e2:	4283      	cmp	r3, r0
 80051e4:	4637      	mov	r7, r6
 80051e6:	dc04      	bgt.n	80051f2 <__swbuf_r+0x42>
 80051e8:	4621      	mov	r1, r4
 80051ea:	4628      	mov	r0, r5
 80051ec:	f000 f926 	bl	800543c <_fflush_r>
 80051f0:	bb28      	cbnz	r0, 800523e <__swbuf_r+0x8e>
 80051f2:	68a3      	ldr	r3, [r4, #8]
 80051f4:	3b01      	subs	r3, #1
 80051f6:	60a3      	str	r3, [r4, #8]
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	6022      	str	r2, [r4, #0]
 80051fe:	701e      	strb	r6, [r3, #0]
 8005200:	6963      	ldr	r3, [r4, #20]
 8005202:	3001      	adds	r0, #1
 8005204:	4283      	cmp	r3, r0
 8005206:	d004      	beq.n	8005212 <__swbuf_r+0x62>
 8005208:	89a3      	ldrh	r3, [r4, #12]
 800520a:	07db      	lsls	r3, r3, #31
 800520c:	d519      	bpl.n	8005242 <__swbuf_r+0x92>
 800520e:	2e0a      	cmp	r6, #10
 8005210:	d117      	bne.n	8005242 <__swbuf_r+0x92>
 8005212:	4621      	mov	r1, r4
 8005214:	4628      	mov	r0, r5
 8005216:	f000 f911 	bl	800543c <_fflush_r>
 800521a:	b190      	cbz	r0, 8005242 <__swbuf_r+0x92>
 800521c:	e00f      	b.n	800523e <__swbuf_r+0x8e>
 800521e:	4b0b      	ldr	r3, [pc, #44]	; (800524c <__swbuf_r+0x9c>)
 8005220:	429c      	cmp	r4, r3
 8005222:	d101      	bne.n	8005228 <__swbuf_r+0x78>
 8005224:	68ac      	ldr	r4, [r5, #8]
 8005226:	e7d0      	b.n	80051ca <__swbuf_r+0x1a>
 8005228:	4b09      	ldr	r3, [pc, #36]	; (8005250 <__swbuf_r+0xa0>)
 800522a:	429c      	cmp	r4, r3
 800522c:	bf08      	it	eq
 800522e:	68ec      	ldreq	r4, [r5, #12]
 8005230:	e7cb      	b.n	80051ca <__swbuf_r+0x1a>
 8005232:	4621      	mov	r1, r4
 8005234:	4628      	mov	r0, r5
 8005236:	f000 f80d 	bl	8005254 <__swsetup_r>
 800523a:	2800      	cmp	r0, #0
 800523c:	d0cc      	beq.n	80051d8 <__swbuf_r+0x28>
 800523e:	f04f 37ff 	mov.w	r7, #4294967295
 8005242:	4638      	mov	r0, r7
 8005244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005246:	bf00      	nop
 8005248:	08006034 	.word	0x08006034
 800524c:	08006054 	.word	0x08006054
 8005250:	08006014 	.word	0x08006014

08005254 <__swsetup_r>:
 8005254:	4b32      	ldr	r3, [pc, #200]	; (8005320 <__swsetup_r+0xcc>)
 8005256:	b570      	push	{r4, r5, r6, lr}
 8005258:	681d      	ldr	r5, [r3, #0]
 800525a:	4606      	mov	r6, r0
 800525c:	460c      	mov	r4, r1
 800525e:	b125      	cbz	r5, 800526a <__swsetup_r+0x16>
 8005260:	69ab      	ldr	r3, [r5, #24]
 8005262:	b913      	cbnz	r3, 800526a <__swsetup_r+0x16>
 8005264:	4628      	mov	r0, r5
 8005266:	f000 f953 	bl	8005510 <__sinit>
 800526a:	4b2e      	ldr	r3, [pc, #184]	; (8005324 <__swsetup_r+0xd0>)
 800526c:	429c      	cmp	r4, r3
 800526e:	d10f      	bne.n	8005290 <__swsetup_r+0x3c>
 8005270:	686c      	ldr	r4, [r5, #4]
 8005272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005276:	b29a      	uxth	r2, r3
 8005278:	0715      	lsls	r5, r2, #28
 800527a:	d42c      	bmi.n	80052d6 <__swsetup_r+0x82>
 800527c:	06d0      	lsls	r0, r2, #27
 800527e:	d411      	bmi.n	80052a4 <__swsetup_r+0x50>
 8005280:	2209      	movs	r2, #9
 8005282:	6032      	str	r2, [r6, #0]
 8005284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005288:	81a3      	strh	r3, [r4, #12]
 800528a:	f04f 30ff 	mov.w	r0, #4294967295
 800528e:	e03e      	b.n	800530e <__swsetup_r+0xba>
 8005290:	4b25      	ldr	r3, [pc, #148]	; (8005328 <__swsetup_r+0xd4>)
 8005292:	429c      	cmp	r4, r3
 8005294:	d101      	bne.n	800529a <__swsetup_r+0x46>
 8005296:	68ac      	ldr	r4, [r5, #8]
 8005298:	e7eb      	b.n	8005272 <__swsetup_r+0x1e>
 800529a:	4b24      	ldr	r3, [pc, #144]	; (800532c <__swsetup_r+0xd8>)
 800529c:	429c      	cmp	r4, r3
 800529e:	bf08      	it	eq
 80052a0:	68ec      	ldreq	r4, [r5, #12]
 80052a2:	e7e6      	b.n	8005272 <__swsetup_r+0x1e>
 80052a4:	0751      	lsls	r1, r2, #29
 80052a6:	d512      	bpl.n	80052ce <__swsetup_r+0x7a>
 80052a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052aa:	b141      	cbz	r1, 80052be <__swsetup_r+0x6a>
 80052ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052b0:	4299      	cmp	r1, r3
 80052b2:	d002      	beq.n	80052ba <__swsetup_r+0x66>
 80052b4:	4630      	mov	r0, r6
 80052b6:	f000 fa19 	bl	80056ec <_free_r>
 80052ba:	2300      	movs	r3, #0
 80052bc:	6363      	str	r3, [r4, #52]	; 0x34
 80052be:	89a3      	ldrh	r3, [r4, #12]
 80052c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052c4:	81a3      	strh	r3, [r4, #12]
 80052c6:	2300      	movs	r3, #0
 80052c8:	6063      	str	r3, [r4, #4]
 80052ca:	6923      	ldr	r3, [r4, #16]
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	89a3      	ldrh	r3, [r4, #12]
 80052d0:	f043 0308 	orr.w	r3, r3, #8
 80052d4:	81a3      	strh	r3, [r4, #12]
 80052d6:	6923      	ldr	r3, [r4, #16]
 80052d8:	b94b      	cbnz	r3, 80052ee <__swsetup_r+0x9a>
 80052da:	89a3      	ldrh	r3, [r4, #12]
 80052dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80052e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052e4:	d003      	beq.n	80052ee <__swsetup_r+0x9a>
 80052e6:	4621      	mov	r1, r4
 80052e8:	4630      	mov	r0, r6
 80052ea:	f000 f9bf 	bl	800566c <__smakebuf_r>
 80052ee:	89a2      	ldrh	r2, [r4, #12]
 80052f0:	f012 0301 	ands.w	r3, r2, #1
 80052f4:	d00c      	beq.n	8005310 <__swsetup_r+0xbc>
 80052f6:	2300      	movs	r3, #0
 80052f8:	60a3      	str	r3, [r4, #8]
 80052fa:	6963      	ldr	r3, [r4, #20]
 80052fc:	425b      	negs	r3, r3
 80052fe:	61a3      	str	r3, [r4, #24]
 8005300:	6923      	ldr	r3, [r4, #16]
 8005302:	b953      	cbnz	r3, 800531a <__swsetup_r+0xc6>
 8005304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005308:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800530c:	d1ba      	bne.n	8005284 <__swsetup_r+0x30>
 800530e:	bd70      	pop	{r4, r5, r6, pc}
 8005310:	0792      	lsls	r2, r2, #30
 8005312:	bf58      	it	pl
 8005314:	6963      	ldrpl	r3, [r4, #20]
 8005316:	60a3      	str	r3, [r4, #8]
 8005318:	e7f2      	b.n	8005300 <__swsetup_r+0xac>
 800531a:	2000      	movs	r0, #0
 800531c:	e7f7      	b.n	800530e <__swsetup_r+0xba>
 800531e:	bf00      	nop
 8005320:	20000010 	.word	0x20000010
 8005324:	08006034 	.word	0x08006034
 8005328:	08006054 	.word	0x08006054
 800532c:	08006014 	.word	0x08006014

08005330 <__sflush_r>:
 8005330:	898a      	ldrh	r2, [r1, #12]
 8005332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005336:	4605      	mov	r5, r0
 8005338:	0710      	lsls	r0, r2, #28
 800533a:	460c      	mov	r4, r1
 800533c:	d458      	bmi.n	80053f0 <__sflush_r+0xc0>
 800533e:	684b      	ldr	r3, [r1, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	dc05      	bgt.n	8005350 <__sflush_r+0x20>
 8005344:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005346:	2b00      	cmp	r3, #0
 8005348:	dc02      	bgt.n	8005350 <__sflush_r+0x20>
 800534a:	2000      	movs	r0, #0
 800534c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005350:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005352:	2e00      	cmp	r6, #0
 8005354:	d0f9      	beq.n	800534a <__sflush_r+0x1a>
 8005356:	2300      	movs	r3, #0
 8005358:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800535c:	682f      	ldr	r7, [r5, #0]
 800535e:	6a21      	ldr	r1, [r4, #32]
 8005360:	602b      	str	r3, [r5, #0]
 8005362:	d032      	beq.n	80053ca <__sflush_r+0x9a>
 8005364:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005366:	89a3      	ldrh	r3, [r4, #12]
 8005368:	075a      	lsls	r2, r3, #29
 800536a:	d505      	bpl.n	8005378 <__sflush_r+0x48>
 800536c:	6863      	ldr	r3, [r4, #4]
 800536e:	1ac0      	subs	r0, r0, r3
 8005370:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005372:	b10b      	cbz	r3, 8005378 <__sflush_r+0x48>
 8005374:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005376:	1ac0      	subs	r0, r0, r3
 8005378:	2300      	movs	r3, #0
 800537a:	4602      	mov	r2, r0
 800537c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800537e:	6a21      	ldr	r1, [r4, #32]
 8005380:	4628      	mov	r0, r5
 8005382:	47b0      	blx	r6
 8005384:	1c43      	adds	r3, r0, #1
 8005386:	89a3      	ldrh	r3, [r4, #12]
 8005388:	d106      	bne.n	8005398 <__sflush_r+0x68>
 800538a:	6829      	ldr	r1, [r5, #0]
 800538c:	291d      	cmp	r1, #29
 800538e:	d848      	bhi.n	8005422 <__sflush_r+0xf2>
 8005390:	4a29      	ldr	r2, [pc, #164]	; (8005438 <__sflush_r+0x108>)
 8005392:	40ca      	lsrs	r2, r1
 8005394:	07d6      	lsls	r6, r2, #31
 8005396:	d544      	bpl.n	8005422 <__sflush_r+0xf2>
 8005398:	2200      	movs	r2, #0
 800539a:	6062      	str	r2, [r4, #4]
 800539c:	04d9      	lsls	r1, r3, #19
 800539e:	6922      	ldr	r2, [r4, #16]
 80053a0:	6022      	str	r2, [r4, #0]
 80053a2:	d504      	bpl.n	80053ae <__sflush_r+0x7e>
 80053a4:	1c42      	adds	r2, r0, #1
 80053a6:	d101      	bne.n	80053ac <__sflush_r+0x7c>
 80053a8:	682b      	ldr	r3, [r5, #0]
 80053aa:	b903      	cbnz	r3, 80053ae <__sflush_r+0x7e>
 80053ac:	6560      	str	r0, [r4, #84]	; 0x54
 80053ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053b0:	602f      	str	r7, [r5, #0]
 80053b2:	2900      	cmp	r1, #0
 80053b4:	d0c9      	beq.n	800534a <__sflush_r+0x1a>
 80053b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053ba:	4299      	cmp	r1, r3
 80053bc:	d002      	beq.n	80053c4 <__sflush_r+0x94>
 80053be:	4628      	mov	r0, r5
 80053c0:	f000 f994 	bl	80056ec <_free_r>
 80053c4:	2000      	movs	r0, #0
 80053c6:	6360      	str	r0, [r4, #52]	; 0x34
 80053c8:	e7c0      	b.n	800534c <__sflush_r+0x1c>
 80053ca:	2301      	movs	r3, #1
 80053cc:	4628      	mov	r0, r5
 80053ce:	47b0      	blx	r6
 80053d0:	1c41      	adds	r1, r0, #1
 80053d2:	d1c8      	bne.n	8005366 <__sflush_r+0x36>
 80053d4:	682b      	ldr	r3, [r5, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0c5      	beq.n	8005366 <__sflush_r+0x36>
 80053da:	2b1d      	cmp	r3, #29
 80053dc:	d001      	beq.n	80053e2 <__sflush_r+0xb2>
 80053de:	2b16      	cmp	r3, #22
 80053e0:	d101      	bne.n	80053e6 <__sflush_r+0xb6>
 80053e2:	602f      	str	r7, [r5, #0]
 80053e4:	e7b1      	b.n	800534a <__sflush_r+0x1a>
 80053e6:	89a3      	ldrh	r3, [r4, #12]
 80053e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053ec:	81a3      	strh	r3, [r4, #12]
 80053ee:	e7ad      	b.n	800534c <__sflush_r+0x1c>
 80053f0:	690f      	ldr	r7, [r1, #16]
 80053f2:	2f00      	cmp	r7, #0
 80053f4:	d0a9      	beq.n	800534a <__sflush_r+0x1a>
 80053f6:	0793      	lsls	r3, r2, #30
 80053f8:	680e      	ldr	r6, [r1, #0]
 80053fa:	bf08      	it	eq
 80053fc:	694b      	ldreq	r3, [r1, #20]
 80053fe:	600f      	str	r7, [r1, #0]
 8005400:	bf18      	it	ne
 8005402:	2300      	movne	r3, #0
 8005404:	eba6 0807 	sub.w	r8, r6, r7
 8005408:	608b      	str	r3, [r1, #8]
 800540a:	f1b8 0f00 	cmp.w	r8, #0
 800540e:	dd9c      	ble.n	800534a <__sflush_r+0x1a>
 8005410:	4643      	mov	r3, r8
 8005412:	463a      	mov	r2, r7
 8005414:	6a21      	ldr	r1, [r4, #32]
 8005416:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005418:	4628      	mov	r0, r5
 800541a:	47b0      	blx	r6
 800541c:	2800      	cmp	r0, #0
 800541e:	dc06      	bgt.n	800542e <__sflush_r+0xfe>
 8005420:	89a3      	ldrh	r3, [r4, #12]
 8005422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005426:	81a3      	strh	r3, [r4, #12]
 8005428:	f04f 30ff 	mov.w	r0, #4294967295
 800542c:	e78e      	b.n	800534c <__sflush_r+0x1c>
 800542e:	4407      	add	r7, r0
 8005430:	eba8 0800 	sub.w	r8, r8, r0
 8005434:	e7e9      	b.n	800540a <__sflush_r+0xda>
 8005436:	bf00      	nop
 8005438:	20400001 	.word	0x20400001

0800543c <_fflush_r>:
 800543c:	b538      	push	{r3, r4, r5, lr}
 800543e:	690b      	ldr	r3, [r1, #16]
 8005440:	4605      	mov	r5, r0
 8005442:	460c      	mov	r4, r1
 8005444:	b1db      	cbz	r3, 800547e <_fflush_r+0x42>
 8005446:	b118      	cbz	r0, 8005450 <_fflush_r+0x14>
 8005448:	6983      	ldr	r3, [r0, #24]
 800544a:	b90b      	cbnz	r3, 8005450 <_fflush_r+0x14>
 800544c:	f000 f860 	bl	8005510 <__sinit>
 8005450:	4b0c      	ldr	r3, [pc, #48]	; (8005484 <_fflush_r+0x48>)
 8005452:	429c      	cmp	r4, r3
 8005454:	d109      	bne.n	800546a <_fflush_r+0x2e>
 8005456:	686c      	ldr	r4, [r5, #4]
 8005458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800545c:	b17b      	cbz	r3, 800547e <_fflush_r+0x42>
 800545e:	4621      	mov	r1, r4
 8005460:	4628      	mov	r0, r5
 8005462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005466:	f7ff bf63 	b.w	8005330 <__sflush_r>
 800546a:	4b07      	ldr	r3, [pc, #28]	; (8005488 <_fflush_r+0x4c>)
 800546c:	429c      	cmp	r4, r3
 800546e:	d101      	bne.n	8005474 <_fflush_r+0x38>
 8005470:	68ac      	ldr	r4, [r5, #8]
 8005472:	e7f1      	b.n	8005458 <_fflush_r+0x1c>
 8005474:	4b05      	ldr	r3, [pc, #20]	; (800548c <_fflush_r+0x50>)
 8005476:	429c      	cmp	r4, r3
 8005478:	bf08      	it	eq
 800547a:	68ec      	ldreq	r4, [r5, #12]
 800547c:	e7ec      	b.n	8005458 <_fflush_r+0x1c>
 800547e:	2000      	movs	r0, #0
 8005480:	bd38      	pop	{r3, r4, r5, pc}
 8005482:	bf00      	nop
 8005484:	08006034 	.word	0x08006034
 8005488:	08006054 	.word	0x08006054
 800548c:	08006014 	.word	0x08006014

08005490 <std>:
 8005490:	2300      	movs	r3, #0
 8005492:	b510      	push	{r4, lr}
 8005494:	4604      	mov	r4, r0
 8005496:	e9c0 3300 	strd	r3, r3, [r0]
 800549a:	6083      	str	r3, [r0, #8]
 800549c:	8181      	strh	r1, [r0, #12]
 800549e:	6643      	str	r3, [r0, #100]	; 0x64
 80054a0:	81c2      	strh	r2, [r0, #14]
 80054a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054a6:	6183      	str	r3, [r0, #24]
 80054a8:	4619      	mov	r1, r3
 80054aa:	2208      	movs	r2, #8
 80054ac:	305c      	adds	r0, #92	; 0x5c
 80054ae:	f7ff fdfa 	bl	80050a6 <memset>
 80054b2:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <std+0x38>)
 80054b4:	6263      	str	r3, [r4, #36]	; 0x24
 80054b6:	4b05      	ldr	r3, [pc, #20]	; (80054cc <std+0x3c>)
 80054b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80054ba:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <std+0x40>)
 80054bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054be:	4b05      	ldr	r3, [pc, #20]	; (80054d4 <std+0x44>)
 80054c0:	6224      	str	r4, [r4, #32]
 80054c2:	6323      	str	r3, [r4, #48]	; 0x30
 80054c4:	bd10      	pop	{r4, pc}
 80054c6:	bf00      	nop
 80054c8:	08005ded 	.word	0x08005ded
 80054cc:	08005e0f 	.word	0x08005e0f
 80054d0:	08005e47 	.word	0x08005e47
 80054d4:	08005e6b 	.word	0x08005e6b

080054d8 <_cleanup_r>:
 80054d8:	4901      	ldr	r1, [pc, #4]	; (80054e0 <_cleanup_r+0x8>)
 80054da:	f000 b885 	b.w	80055e8 <_fwalk_reent>
 80054de:	bf00      	nop
 80054e0:	0800543d 	.word	0x0800543d

080054e4 <__sfmoreglue>:
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	1e4a      	subs	r2, r1, #1
 80054e8:	2568      	movs	r5, #104	; 0x68
 80054ea:	4355      	muls	r5, r2
 80054ec:	460e      	mov	r6, r1
 80054ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80054f2:	f000 f949 	bl	8005788 <_malloc_r>
 80054f6:	4604      	mov	r4, r0
 80054f8:	b140      	cbz	r0, 800550c <__sfmoreglue+0x28>
 80054fa:	2100      	movs	r1, #0
 80054fc:	e9c0 1600 	strd	r1, r6, [r0]
 8005500:	300c      	adds	r0, #12
 8005502:	60a0      	str	r0, [r4, #8]
 8005504:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005508:	f7ff fdcd 	bl	80050a6 <memset>
 800550c:	4620      	mov	r0, r4
 800550e:	bd70      	pop	{r4, r5, r6, pc}

08005510 <__sinit>:
 8005510:	6983      	ldr	r3, [r0, #24]
 8005512:	b510      	push	{r4, lr}
 8005514:	4604      	mov	r4, r0
 8005516:	bb33      	cbnz	r3, 8005566 <__sinit+0x56>
 8005518:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800551c:	6503      	str	r3, [r0, #80]	; 0x50
 800551e:	4b12      	ldr	r3, [pc, #72]	; (8005568 <__sinit+0x58>)
 8005520:	4a12      	ldr	r2, [pc, #72]	; (800556c <__sinit+0x5c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6282      	str	r2, [r0, #40]	; 0x28
 8005526:	4298      	cmp	r0, r3
 8005528:	bf04      	itt	eq
 800552a:	2301      	moveq	r3, #1
 800552c:	6183      	streq	r3, [r0, #24]
 800552e:	f000 f81f 	bl	8005570 <__sfp>
 8005532:	6060      	str	r0, [r4, #4]
 8005534:	4620      	mov	r0, r4
 8005536:	f000 f81b 	bl	8005570 <__sfp>
 800553a:	60a0      	str	r0, [r4, #8]
 800553c:	4620      	mov	r0, r4
 800553e:	f000 f817 	bl	8005570 <__sfp>
 8005542:	2200      	movs	r2, #0
 8005544:	60e0      	str	r0, [r4, #12]
 8005546:	2104      	movs	r1, #4
 8005548:	6860      	ldr	r0, [r4, #4]
 800554a:	f7ff ffa1 	bl	8005490 <std>
 800554e:	2201      	movs	r2, #1
 8005550:	2109      	movs	r1, #9
 8005552:	68a0      	ldr	r0, [r4, #8]
 8005554:	f7ff ff9c 	bl	8005490 <std>
 8005558:	2202      	movs	r2, #2
 800555a:	2112      	movs	r1, #18
 800555c:	68e0      	ldr	r0, [r4, #12]
 800555e:	f7ff ff97 	bl	8005490 <std>
 8005562:	2301      	movs	r3, #1
 8005564:	61a3      	str	r3, [r4, #24]
 8005566:	bd10      	pop	{r4, pc}
 8005568:	08006010 	.word	0x08006010
 800556c:	080054d9 	.word	0x080054d9

08005570 <__sfp>:
 8005570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005572:	4b1b      	ldr	r3, [pc, #108]	; (80055e0 <__sfp+0x70>)
 8005574:	681e      	ldr	r6, [r3, #0]
 8005576:	69b3      	ldr	r3, [r6, #24]
 8005578:	4607      	mov	r7, r0
 800557a:	b913      	cbnz	r3, 8005582 <__sfp+0x12>
 800557c:	4630      	mov	r0, r6
 800557e:	f7ff ffc7 	bl	8005510 <__sinit>
 8005582:	3648      	adds	r6, #72	; 0x48
 8005584:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005588:	3b01      	subs	r3, #1
 800558a:	d503      	bpl.n	8005594 <__sfp+0x24>
 800558c:	6833      	ldr	r3, [r6, #0]
 800558e:	b133      	cbz	r3, 800559e <__sfp+0x2e>
 8005590:	6836      	ldr	r6, [r6, #0]
 8005592:	e7f7      	b.n	8005584 <__sfp+0x14>
 8005594:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005598:	b16d      	cbz	r5, 80055b6 <__sfp+0x46>
 800559a:	3468      	adds	r4, #104	; 0x68
 800559c:	e7f4      	b.n	8005588 <__sfp+0x18>
 800559e:	2104      	movs	r1, #4
 80055a0:	4638      	mov	r0, r7
 80055a2:	f7ff ff9f 	bl	80054e4 <__sfmoreglue>
 80055a6:	6030      	str	r0, [r6, #0]
 80055a8:	2800      	cmp	r0, #0
 80055aa:	d1f1      	bne.n	8005590 <__sfp+0x20>
 80055ac:	230c      	movs	r3, #12
 80055ae:	603b      	str	r3, [r7, #0]
 80055b0:	4604      	mov	r4, r0
 80055b2:	4620      	mov	r0, r4
 80055b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055b6:	4b0b      	ldr	r3, [pc, #44]	; (80055e4 <__sfp+0x74>)
 80055b8:	6665      	str	r5, [r4, #100]	; 0x64
 80055ba:	e9c4 5500 	strd	r5, r5, [r4]
 80055be:	60a5      	str	r5, [r4, #8]
 80055c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80055c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80055c8:	2208      	movs	r2, #8
 80055ca:	4629      	mov	r1, r5
 80055cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80055d0:	f7ff fd69 	bl	80050a6 <memset>
 80055d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80055d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80055dc:	e7e9      	b.n	80055b2 <__sfp+0x42>
 80055de:	bf00      	nop
 80055e0:	08006010 	.word	0x08006010
 80055e4:	ffff0001 	.word	0xffff0001

080055e8 <_fwalk_reent>:
 80055e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055ec:	4680      	mov	r8, r0
 80055ee:	4689      	mov	r9, r1
 80055f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80055f4:	2600      	movs	r6, #0
 80055f6:	b914      	cbnz	r4, 80055fe <_fwalk_reent+0x16>
 80055f8:	4630      	mov	r0, r6
 80055fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005602:	3f01      	subs	r7, #1
 8005604:	d501      	bpl.n	800560a <_fwalk_reent+0x22>
 8005606:	6824      	ldr	r4, [r4, #0]
 8005608:	e7f5      	b.n	80055f6 <_fwalk_reent+0xe>
 800560a:	89ab      	ldrh	r3, [r5, #12]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d907      	bls.n	8005620 <_fwalk_reent+0x38>
 8005610:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005614:	3301      	adds	r3, #1
 8005616:	d003      	beq.n	8005620 <_fwalk_reent+0x38>
 8005618:	4629      	mov	r1, r5
 800561a:	4640      	mov	r0, r8
 800561c:	47c8      	blx	r9
 800561e:	4306      	orrs	r6, r0
 8005620:	3568      	adds	r5, #104	; 0x68
 8005622:	e7ee      	b.n	8005602 <_fwalk_reent+0x1a>

08005624 <__swhatbuf_r>:
 8005624:	b570      	push	{r4, r5, r6, lr}
 8005626:	460e      	mov	r6, r1
 8005628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800562c:	2900      	cmp	r1, #0
 800562e:	b096      	sub	sp, #88	; 0x58
 8005630:	4614      	mov	r4, r2
 8005632:	461d      	mov	r5, r3
 8005634:	da07      	bge.n	8005646 <__swhatbuf_r+0x22>
 8005636:	2300      	movs	r3, #0
 8005638:	602b      	str	r3, [r5, #0]
 800563a:	89b3      	ldrh	r3, [r6, #12]
 800563c:	061a      	lsls	r2, r3, #24
 800563e:	d410      	bmi.n	8005662 <__swhatbuf_r+0x3e>
 8005640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005644:	e00e      	b.n	8005664 <__swhatbuf_r+0x40>
 8005646:	466a      	mov	r2, sp
 8005648:	f000 fc36 	bl	8005eb8 <_fstat_r>
 800564c:	2800      	cmp	r0, #0
 800564e:	dbf2      	blt.n	8005636 <__swhatbuf_r+0x12>
 8005650:	9a01      	ldr	r2, [sp, #4]
 8005652:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005656:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800565a:	425a      	negs	r2, r3
 800565c:	415a      	adcs	r2, r3
 800565e:	602a      	str	r2, [r5, #0]
 8005660:	e7ee      	b.n	8005640 <__swhatbuf_r+0x1c>
 8005662:	2340      	movs	r3, #64	; 0x40
 8005664:	2000      	movs	r0, #0
 8005666:	6023      	str	r3, [r4, #0]
 8005668:	b016      	add	sp, #88	; 0x58
 800566a:	bd70      	pop	{r4, r5, r6, pc}

0800566c <__smakebuf_r>:
 800566c:	898b      	ldrh	r3, [r1, #12]
 800566e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005670:	079d      	lsls	r5, r3, #30
 8005672:	4606      	mov	r6, r0
 8005674:	460c      	mov	r4, r1
 8005676:	d507      	bpl.n	8005688 <__smakebuf_r+0x1c>
 8005678:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	6123      	str	r3, [r4, #16]
 8005680:	2301      	movs	r3, #1
 8005682:	6163      	str	r3, [r4, #20]
 8005684:	b002      	add	sp, #8
 8005686:	bd70      	pop	{r4, r5, r6, pc}
 8005688:	ab01      	add	r3, sp, #4
 800568a:	466a      	mov	r2, sp
 800568c:	f7ff ffca 	bl	8005624 <__swhatbuf_r>
 8005690:	9900      	ldr	r1, [sp, #0]
 8005692:	4605      	mov	r5, r0
 8005694:	4630      	mov	r0, r6
 8005696:	f000 f877 	bl	8005788 <_malloc_r>
 800569a:	b948      	cbnz	r0, 80056b0 <__smakebuf_r+0x44>
 800569c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056a0:	059a      	lsls	r2, r3, #22
 80056a2:	d4ef      	bmi.n	8005684 <__smakebuf_r+0x18>
 80056a4:	f023 0303 	bic.w	r3, r3, #3
 80056a8:	f043 0302 	orr.w	r3, r3, #2
 80056ac:	81a3      	strh	r3, [r4, #12]
 80056ae:	e7e3      	b.n	8005678 <__smakebuf_r+0xc>
 80056b0:	4b0d      	ldr	r3, [pc, #52]	; (80056e8 <__smakebuf_r+0x7c>)
 80056b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80056b4:	89a3      	ldrh	r3, [r4, #12]
 80056b6:	6020      	str	r0, [r4, #0]
 80056b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056bc:	81a3      	strh	r3, [r4, #12]
 80056be:	9b00      	ldr	r3, [sp, #0]
 80056c0:	6163      	str	r3, [r4, #20]
 80056c2:	9b01      	ldr	r3, [sp, #4]
 80056c4:	6120      	str	r0, [r4, #16]
 80056c6:	b15b      	cbz	r3, 80056e0 <__smakebuf_r+0x74>
 80056c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056cc:	4630      	mov	r0, r6
 80056ce:	f000 fc05 	bl	8005edc <_isatty_r>
 80056d2:	b128      	cbz	r0, 80056e0 <__smakebuf_r+0x74>
 80056d4:	89a3      	ldrh	r3, [r4, #12]
 80056d6:	f023 0303 	bic.w	r3, r3, #3
 80056da:	f043 0301 	orr.w	r3, r3, #1
 80056de:	81a3      	strh	r3, [r4, #12]
 80056e0:	89a3      	ldrh	r3, [r4, #12]
 80056e2:	431d      	orrs	r5, r3
 80056e4:	81a5      	strh	r5, [r4, #12]
 80056e6:	e7cd      	b.n	8005684 <__smakebuf_r+0x18>
 80056e8:	080054d9 	.word	0x080054d9

080056ec <_free_r>:
 80056ec:	b538      	push	{r3, r4, r5, lr}
 80056ee:	4605      	mov	r5, r0
 80056f0:	2900      	cmp	r1, #0
 80056f2:	d045      	beq.n	8005780 <_free_r+0x94>
 80056f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056f8:	1f0c      	subs	r4, r1, #4
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	bfb8      	it	lt
 80056fe:	18e4      	addlt	r4, r4, r3
 8005700:	f000 fc0e 	bl	8005f20 <__malloc_lock>
 8005704:	4a1f      	ldr	r2, [pc, #124]	; (8005784 <_free_r+0x98>)
 8005706:	6813      	ldr	r3, [r2, #0]
 8005708:	4610      	mov	r0, r2
 800570a:	b933      	cbnz	r3, 800571a <_free_r+0x2e>
 800570c:	6063      	str	r3, [r4, #4]
 800570e:	6014      	str	r4, [r2, #0]
 8005710:	4628      	mov	r0, r5
 8005712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005716:	f000 bc04 	b.w	8005f22 <__malloc_unlock>
 800571a:	42a3      	cmp	r3, r4
 800571c:	d90c      	bls.n	8005738 <_free_r+0x4c>
 800571e:	6821      	ldr	r1, [r4, #0]
 8005720:	1862      	adds	r2, r4, r1
 8005722:	4293      	cmp	r3, r2
 8005724:	bf04      	itt	eq
 8005726:	681a      	ldreq	r2, [r3, #0]
 8005728:	685b      	ldreq	r3, [r3, #4]
 800572a:	6063      	str	r3, [r4, #4]
 800572c:	bf04      	itt	eq
 800572e:	1852      	addeq	r2, r2, r1
 8005730:	6022      	streq	r2, [r4, #0]
 8005732:	6004      	str	r4, [r0, #0]
 8005734:	e7ec      	b.n	8005710 <_free_r+0x24>
 8005736:	4613      	mov	r3, r2
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	b10a      	cbz	r2, 8005740 <_free_r+0x54>
 800573c:	42a2      	cmp	r2, r4
 800573e:	d9fa      	bls.n	8005736 <_free_r+0x4a>
 8005740:	6819      	ldr	r1, [r3, #0]
 8005742:	1858      	adds	r0, r3, r1
 8005744:	42a0      	cmp	r0, r4
 8005746:	d10b      	bne.n	8005760 <_free_r+0x74>
 8005748:	6820      	ldr	r0, [r4, #0]
 800574a:	4401      	add	r1, r0
 800574c:	1858      	adds	r0, r3, r1
 800574e:	4282      	cmp	r2, r0
 8005750:	6019      	str	r1, [r3, #0]
 8005752:	d1dd      	bne.n	8005710 <_free_r+0x24>
 8005754:	6810      	ldr	r0, [r2, #0]
 8005756:	6852      	ldr	r2, [r2, #4]
 8005758:	605a      	str	r2, [r3, #4]
 800575a:	4401      	add	r1, r0
 800575c:	6019      	str	r1, [r3, #0]
 800575e:	e7d7      	b.n	8005710 <_free_r+0x24>
 8005760:	d902      	bls.n	8005768 <_free_r+0x7c>
 8005762:	230c      	movs	r3, #12
 8005764:	602b      	str	r3, [r5, #0]
 8005766:	e7d3      	b.n	8005710 <_free_r+0x24>
 8005768:	6820      	ldr	r0, [r4, #0]
 800576a:	1821      	adds	r1, r4, r0
 800576c:	428a      	cmp	r2, r1
 800576e:	bf04      	itt	eq
 8005770:	6811      	ldreq	r1, [r2, #0]
 8005772:	6852      	ldreq	r2, [r2, #4]
 8005774:	6062      	str	r2, [r4, #4]
 8005776:	bf04      	itt	eq
 8005778:	1809      	addeq	r1, r1, r0
 800577a:	6021      	streq	r1, [r4, #0]
 800577c:	605c      	str	r4, [r3, #4]
 800577e:	e7c7      	b.n	8005710 <_free_r+0x24>
 8005780:	bd38      	pop	{r3, r4, r5, pc}
 8005782:	bf00      	nop
 8005784:	20001bb0 	.word	0x20001bb0

08005788 <_malloc_r>:
 8005788:	b570      	push	{r4, r5, r6, lr}
 800578a:	1ccd      	adds	r5, r1, #3
 800578c:	f025 0503 	bic.w	r5, r5, #3
 8005790:	3508      	adds	r5, #8
 8005792:	2d0c      	cmp	r5, #12
 8005794:	bf38      	it	cc
 8005796:	250c      	movcc	r5, #12
 8005798:	2d00      	cmp	r5, #0
 800579a:	4606      	mov	r6, r0
 800579c:	db01      	blt.n	80057a2 <_malloc_r+0x1a>
 800579e:	42a9      	cmp	r1, r5
 80057a0:	d903      	bls.n	80057aa <_malloc_r+0x22>
 80057a2:	230c      	movs	r3, #12
 80057a4:	6033      	str	r3, [r6, #0]
 80057a6:	2000      	movs	r0, #0
 80057a8:	bd70      	pop	{r4, r5, r6, pc}
 80057aa:	f000 fbb9 	bl	8005f20 <__malloc_lock>
 80057ae:	4a21      	ldr	r2, [pc, #132]	; (8005834 <_malloc_r+0xac>)
 80057b0:	6814      	ldr	r4, [r2, #0]
 80057b2:	4621      	mov	r1, r4
 80057b4:	b991      	cbnz	r1, 80057dc <_malloc_r+0x54>
 80057b6:	4c20      	ldr	r4, [pc, #128]	; (8005838 <_malloc_r+0xb0>)
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	b91b      	cbnz	r3, 80057c4 <_malloc_r+0x3c>
 80057bc:	4630      	mov	r0, r6
 80057be:	f000 fb05 	bl	8005dcc <_sbrk_r>
 80057c2:	6020      	str	r0, [r4, #0]
 80057c4:	4629      	mov	r1, r5
 80057c6:	4630      	mov	r0, r6
 80057c8:	f000 fb00 	bl	8005dcc <_sbrk_r>
 80057cc:	1c43      	adds	r3, r0, #1
 80057ce:	d124      	bne.n	800581a <_malloc_r+0x92>
 80057d0:	230c      	movs	r3, #12
 80057d2:	6033      	str	r3, [r6, #0]
 80057d4:	4630      	mov	r0, r6
 80057d6:	f000 fba4 	bl	8005f22 <__malloc_unlock>
 80057da:	e7e4      	b.n	80057a6 <_malloc_r+0x1e>
 80057dc:	680b      	ldr	r3, [r1, #0]
 80057de:	1b5b      	subs	r3, r3, r5
 80057e0:	d418      	bmi.n	8005814 <_malloc_r+0x8c>
 80057e2:	2b0b      	cmp	r3, #11
 80057e4:	d90f      	bls.n	8005806 <_malloc_r+0x7e>
 80057e6:	600b      	str	r3, [r1, #0]
 80057e8:	50cd      	str	r5, [r1, r3]
 80057ea:	18cc      	adds	r4, r1, r3
 80057ec:	4630      	mov	r0, r6
 80057ee:	f000 fb98 	bl	8005f22 <__malloc_unlock>
 80057f2:	f104 000b 	add.w	r0, r4, #11
 80057f6:	1d23      	adds	r3, r4, #4
 80057f8:	f020 0007 	bic.w	r0, r0, #7
 80057fc:	1ac3      	subs	r3, r0, r3
 80057fe:	d0d3      	beq.n	80057a8 <_malloc_r+0x20>
 8005800:	425a      	negs	r2, r3
 8005802:	50e2      	str	r2, [r4, r3]
 8005804:	e7d0      	b.n	80057a8 <_malloc_r+0x20>
 8005806:	428c      	cmp	r4, r1
 8005808:	684b      	ldr	r3, [r1, #4]
 800580a:	bf16      	itet	ne
 800580c:	6063      	strne	r3, [r4, #4]
 800580e:	6013      	streq	r3, [r2, #0]
 8005810:	460c      	movne	r4, r1
 8005812:	e7eb      	b.n	80057ec <_malloc_r+0x64>
 8005814:	460c      	mov	r4, r1
 8005816:	6849      	ldr	r1, [r1, #4]
 8005818:	e7cc      	b.n	80057b4 <_malloc_r+0x2c>
 800581a:	1cc4      	adds	r4, r0, #3
 800581c:	f024 0403 	bic.w	r4, r4, #3
 8005820:	42a0      	cmp	r0, r4
 8005822:	d005      	beq.n	8005830 <_malloc_r+0xa8>
 8005824:	1a21      	subs	r1, r4, r0
 8005826:	4630      	mov	r0, r6
 8005828:	f000 fad0 	bl	8005dcc <_sbrk_r>
 800582c:	3001      	adds	r0, #1
 800582e:	d0cf      	beq.n	80057d0 <_malloc_r+0x48>
 8005830:	6025      	str	r5, [r4, #0]
 8005832:	e7db      	b.n	80057ec <_malloc_r+0x64>
 8005834:	20001bb0 	.word	0x20001bb0
 8005838:	20001bb4 	.word	0x20001bb4

0800583c <__sfputc_r>:
 800583c:	6893      	ldr	r3, [r2, #8]
 800583e:	3b01      	subs	r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	b410      	push	{r4}
 8005844:	6093      	str	r3, [r2, #8]
 8005846:	da08      	bge.n	800585a <__sfputc_r+0x1e>
 8005848:	6994      	ldr	r4, [r2, #24]
 800584a:	42a3      	cmp	r3, r4
 800584c:	db01      	blt.n	8005852 <__sfputc_r+0x16>
 800584e:	290a      	cmp	r1, #10
 8005850:	d103      	bne.n	800585a <__sfputc_r+0x1e>
 8005852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005856:	f7ff bcab 	b.w	80051b0 <__swbuf_r>
 800585a:	6813      	ldr	r3, [r2, #0]
 800585c:	1c58      	adds	r0, r3, #1
 800585e:	6010      	str	r0, [r2, #0]
 8005860:	7019      	strb	r1, [r3, #0]
 8005862:	4608      	mov	r0, r1
 8005864:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005868:	4770      	bx	lr

0800586a <__sfputs_r>:
 800586a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586c:	4606      	mov	r6, r0
 800586e:	460f      	mov	r7, r1
 8005870:	4614      	mov	r4, r2
 8005872:	18d5      	adds	r5, r2, r3
 8005874:	42ac      	cmp	r4, r5
 8005876:	d101      	bne.n	800587c <__sfputs_r+0x12>
 8005878:	2000      	movs	r0, #0
 800587a:	e007      	b.n	800588c <__sfputs_r+0x22>
 800587c:	463a      	mov	r2, r7
 800587e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005882:	4630      	mov	r0, r6
 8005884:	f7ff ffda 	bl	800583c <__sfputc_r>
 8005888:	1c43      	adds	r3, r0, #1
 800588a:	d1f3      	bne.n	8005874 <__sfputs_r+0xa>
 800588c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005890 <_vfiprintf_r>:
 8005890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005894:	460c      	mov	r4, r1
 8005896:	b09d      	sub	sp, #116	; 0x74
 8005898:	4617      	mov	r7, r2
 800589a:	461d      	mov	r5, r3
 800589c:	4606      	mov	r6, r0
 800589e:	b118      	cbz	r0, 80058a8 <_vfiprintf_r+0x18>
 80058a0:	6983      	ldr	r3, [r0, #24]
 80058a2:	b90b      	cbnz	r3, 80058a8 <_vfiprintf_r+0x18>
 80058a4:	f7ff fe34 	bl	8005510 <__sinit>
 80058a8:	4b7c      	ldr	r3, [pc, #496]	; (8005a9c <_vfiprintf_r+0x20c>)
 80058aa:	429c      	cmp	r4, r3
 80058ac:	d158      	bne.n	8005960 <_vfiprintf_r+0xd0>
 80058ae:	6874      	ldr	r4, [r6, #4]
 80058b0:	89a3      	ldrh	r3, [r4, #12]
 80058b2:	0718      	lsls	r0, r3, #28
 80058b4:	d55e      	bpl.n	8005974 <_vfiprintf_r+0xe4>
 80058b6:	6923      	ldr	r3, [r4, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d05b      	beq.n	8005974 <_vfiprintf_r+0xe4>
 80058bc:	2300      	movs	r3, #0
 80058be:	9309      	str	r3, [sp, #36]	; 0x24
 80058c0:	2320      	movs	r3, #32
 80058c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058c6:	2330      	movs	r3, #48	; 0x30
 80058c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058cc:	9503      	str	r5, [sp, #12]
 80058ce:	f04f 0b01 	mov.w	fp, #1
 80058d2:	46b8      	mov	r8, r7
 80058d4:	4645      	mov	r5, r8
 80058d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80058da:	b10b      	cbz	r3, 80058e0 <_vfiprintf_r+0x50>
 80058dc:	2b25      	cmp	r3, #37	; 0x25
 80058de:	d154      	bne.n	800598a <_vfiprintf_r+0xfa>
 80058e0:	ebb8 0a07 	subs.w	sl, r8, r7
 80058e4:	d00b      	beq.n	80058fe <_vfiprintf_r+0x6e>
 80058e6:	4653      	mov	r3, sl
 80058e8:	463a      	mov	r2, r7
 80058ea:	4621      	mov	r1, r4
 80058ec:	4630      	mov	r0, r6
 80058ee:	f7ff ffbc 	bl	800586a <__sfputs_r>
 80058f2:	3001      	adds	r0, #1
 80058f4:	f000 80c2 	beq.w	8005a7c <_vfiprintf_r+0x1ec>
 80058f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058fa:	4453      	add	r3, sl
 80058fc:	9309      	str	r3, [sp, #36]	; 0x24
 80058fe:	f898 3000 	ldrb.w	r3, [r8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 80ba 	beq.w	8005a7c <_vfiprintf_r+0x1ec>
 8005908:	2300      	movs	r3, #0
 800590a:	f04f 32ff 	mov.w	r2, #4294967295
 800590e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005912:	9304      	str	r3, [sp, #16]
 8005914:	9307      	str	r3, [sp, #28]
 8005916:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800591a:	931a      	str	r3, [sp, #104]	; 0x68
 800591c:	46a8      	mov	r8, r5
 800591e:	2205      	movs	r2, #5
 8005920:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005924:	485e      	ldr	r0, [pc, #376]	; (8005aa0 <_vfiprintf_r+0x210>)
 8005926:	f7fa fc53 	bl	80001d0 <memchr>
 800592a:	9b04      	ldr	r3, [sp, #16]
 800592c:	bb78      	cbnz	r0, 800598e <_vfiprintf_r+0xfe>
 800592e:	06d9      	lsls	r1, r3, #27
 8005930:	bf44      	itt	mi
 8005932:	2220      	movmi	r2, #32
 8005934:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005938:	071a      	lsls	r2, r3, #28
 800593a:	bf44      	itt	mi
 800593c:	222b      	movmi	r2, #43	; 0x2b
 800593e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005942:	782a      	ldrb	r2, [r5, #0]
 8005944:	2a2a      	cmp	r2, #42	; 0x2a
 8005946:	d02a      	beq.n	800599e <_vfiprintf_r+0x10e>
 8005948:	9a07      	ldr	r2, [sp, #28]
 800594a:	46a8      	mov	r8, r5
 800594c:	2000      	movs	r0, #0
 800594e:	250a      	movs	r5, #10
 8005950:	4641      	mov	r1, r8
 8005952:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005956:	3b30      	subs	r3, #48	; 0x30
 8005958:	2b09      	cmp	r3, #9
 800595a:	d969      	bls.n	8005a30 <_vfiprintf_r+0x1a0>
 800595c:	b360      	cbz	r0, 80059b8 <_vfiprintf_r+0x128>
 800595e:	e024      	b.n	80059aa <_vfiprintf_r+0x11a>
 8005960:	4b50      	ldr	r3, [pc, #320]	; (8005aa4 <_vfiprintf_r+0x214>)
 8005962:	429c      	cmp	r4, r3
 8005964:	d101      	bne.n	800596a <_vfiprintf_r+0xda>
 8005966:	68b4      	ldr	r4, [r6, #8]
 8005968:	e7a2      	b.n	80058b0 <_vfiprintf_r+0x20>
 800596a:	4b4f      	ldr	r3, [pc, #316]	; (8005aa8 <_vfiprintf_r+0x218>)
 800596c:	429c      	cmp	r4, r3
 800596e:	bf08      	it	eq
 8005970:	68f4      	ldreq	r4, [r6, #12]
 8005972:	e79d      	b.n	80058b0 <_vfiprintf_r+0x20>
 8005974:	4621      	mov	r1, r4
 8005976:	4630      	mov	r0, r6
 8005978:	f7ff fc6c 	bl	8005254 <__swsetup_r>
 800597c:	2800      	cmp	r0, #0
 800597e:	d09d      	beq.n	80058bc <_vfiprintf_r+0x2c>
 8005980:	f04f 30ff 	mov.w	r0, #4294967295
 8005984:	b01d      	add	sp, #116	; 0x74
 8005986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800598a:	46a8      	mov	r8, r5
 800598c:	e7a2      	b.n	80058d4 <_vfiprintf_r+0x44>
 800598e:	4a44      	ldr	r2, [pc, #272]	; (8005aa0 <_vfiprintf_r+0x210>)
 8005990:	1a80      	subs	r0, r0, r2
 8005992:	fa0b f000 	lsl.w	r0, fp, r0
 8005996:	4318      	orrs	r0, r3
 8005998:	9004      	str	r0, [sp, #16]
 800599a:	4645      	mov	r5, r8
 800599c:	e7be      	b.n	800591c <_vfiprintf_r+0x8c>
 800599e:	9a03      	ldr	r2, [sp, #12]
 80059a0:	1d11      	adds	r1, r2, #4
 80059a2:	6812      	ldr	r2, [r2, #0]
 80059a4:	9103      	str	r1, [sp, #12]
 80059a6:	2a00      	cmp	r2, #0
 80059a8:	db01      	blt.n	80059ae <_vfiprintf_r+0x11e>
 80059aa:	9207      	str	r2, [sp, #28]
 80059ac:	e004      	b.n	80059b8 <_vfiprintf_r+0x128>
 80059ae:	4252      	negs	r2, r2
 80059b0:	f043 0302 	orr.w	r3, r3, #2
 80059b4:	9207      	str	r2, [sp, #28]
 80059b6:	9304      	str	r3, [sp, #16]
 80059b8:	f898 3000 	ldrb.w	r3, [r8]
 80059bc:	2b2e      	cmp	r3, #46	; 0x2e
 80059be:	d10e      	bne.n	80059de <_vfiprintf_r+0x14e>
 80059c0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80059c4:	2b2a      	cmp	r3, #42	; 0x2a
 80059c6:	d138      	bne.n	8005a3a <_vfiprintf_r+0x1aa>
 80059c8:	9b03      	ldr	r3, [sp, #12]
 80059ca:	1d1a      	adds	r2, r3, #4
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	9203      	str	r2, [sp, #12]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	bfb8      	it	lt
 80059d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80059d8:	f108 0802 	add.w	r8, r8, #2
 80059dc:	9305      	str	r3, [sp, #20]
 80059de:	4d33      	ldr	r5, [pc, #204]	; (8005aac <_vfiprintf_r+0x21c>)
 80059e0:	f898 1000 	ldrb.w	r1, [r8]
 80059e4:	2203      	movs	r2, #3
 80059e6:	4628      	mov	r0, r5
 80059e8:	f7fa fbf2 	bl	80001d0 <memchr>
 80059ec:	b140      	cbz	r0, 8005a00 <_vfiprintf_r+0x170>
 80059ee:	2340      	movs	r3, #64	; 0x40
 80059f0:	1b40      	subs	r0, r0, r5
 80059f2:	fa03 f000 	lsl.w	r0, r3, r0
 80059f6:	9b04      	ldr	r3, [sp, #16]
 80059f8:	4303      	orrs	r3, r0
 80059fa:	f108 0801 	add.w	r8, r8, #1
 80059fe:	9304      	str	r3, [sp, #16]
 8005a00:	f898 1000 	ldrb.w	r1, [r8]
 8005a04:	482a      	ldr	r0, [pc, #168]	; (8005ab0 <_vfiprintf_r+0x220>)
 8005a06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a0a:	2206      	movs	r2, #6
 8005a0c:	f108 0701 	add.w	r7, r8, #1
 8005a10:	f7fa fbde 	bl	80001d0 <memchr>
 8005a14:	2800      	cmp	r0, #0
 8005a16:	d037      	beq.n	8005a88 <_vfiprintf_r+0x1f8>
 8005a18:	4b26      	ldr	r3, [pc, #152]	; (8005ab4 <_vfiprintf_r+0x224>)
 8005a1a:	bb1b      	cbnz	r3, 8005a64 <_vfiprintf_r+0x1d4>
 8005a1c:	9b03      	ldr	r3, [sp, #12]
 8005a1e:	3307      	adds	r3, #7
 8005a20:	f023 0307 	bic.w	r3, r3, #7
 8005a24:	3308      	adds	r3, #8
 8005a26:	9303      	str	r3, [sp, #12]
 8005a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a2a:	444b      	add	r3, r9
 8005a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a2e:	e750      	b.n	80058d2 <_vfiprintf_r+0x42>
 8005a30:	fb05 3202 	mla	r2, r5, r2, r3
 8005a34:	2001      	movs	r0, #1
 8005a36:	4688      	mov	r8, r1
 8005a38:	e78a      	b.n	8005950 <_vfiprintf_r+0xc0>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f108 0801 	add.w	r8, r8, #1
 8005a40:	9305      	str	r3, [sp, #20]
 8005a42:	4619      	mov	r1, r3
 8005a44:	250a      	movs	r5, #10
 8005a46:	4640      	mov	r0, r8
 8005a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a4c:	3a30      	subs	r2, #48	; 0x30
 8005a4e:	2a09      	cmp	r2, #9
 8005a50:	d903      	bls.n	8005a5a <_vfiprintf_r+0x1ca>
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0c3      	beq.n	80059de <_vfiprintf_r+0x14e>
 8005a56:	9105      	str	r1, [sp, #20]
 8005a58:	e7c1      	b.n	80059de <_vfiprintf_r+0x14e>
 8005a5a:	fb05 2101 	mla	r1, r5, r1, r2
 8005a5e:	2301      	movs	r3, #1
 8005a60:	4680      	mov	r8, r0
 8005a62:	e7f0      	b.n	8005a46 <_vfiprintf_r+0x1b6>
 8005a64:	ab03      	add	r3, sp, #12
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	4622      	mov	r2, r4
 8005a6a:	4b13      	ldr	r3, [pc, #76]	; (8005ab8 <_vfiprintf_r+0x228>)
 8005a6c:	a904      	add	r1, sp, #16
 8005a6e:	4630      	mov	r0, r6
 8005a70:	f3af 8000 	nop.w
 8005a74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005a78:	4681      	mov	r9, r0
 8005a7a:	d1d5      	bne.n	8005a28 <_vfiprintf_r+0x198>
 8005a7c:	89a3      	ldrh	r3, [r4, #12]
 8005a7e:	065b      	lsls	r3, r3, #25
 8005a80:	f53f af7e 	bmi.w	8005980 <_vfiprintf_r+0xf0>
 8005a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a86:	e77d      	b.n	8005984 <_vfiprintf_r+0xf4>
 8005a88:	ab03      	add	r3, sp, #12
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	4622      	mov	r2, r4
 8005a8e:	4b0a      	ldr	r3, [pc, #40]	; (8005ab8 <_vfiprintf_r+0x228>)
 8005a90:	a904      	add	r1, sp, #16
 8005a92:	4630      	mov	r0, r6
 8005a94:	f000 f888 	bl	8005ba8 <_printf_i>
 8005a98:	e7ec      	b.n	8005a74 <_vfiprintf_r+0x1e4>
 8005a9a:	bf00      	nop
 8005a9c:	08006034 	.word	0x08006034
 8005aa0:	08006074 	.word	0x08006074
 8005aa4:	08006054 	.word	0x08006054
 8005aa8:	08006014 	.word	0x08006014
 8005aac:	0800607a 	.word	0x0800607a
 8005ab0:	0800607e 	.word	0x0800607e
 8005ab4:	00000000 	.word	0x00000000
 8005ab8:	0800586b 	.word	0x0800586b

08005abc <_printf_common>:
 8005abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac0:	4691      	mov	r9, r2
 8005ac2:	461f      	mov	r7, r3
 8005ac4:	688a      	ldr	r2, [r1, #8]
 8005ac6:	690b      	ldr	r3, [r1, #16]
 8005ac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005acc:	4293      	cmp	r3, r2
 8005ace:	bfb8      	it	lt
 8005ad0:	4613      	movlt	r3, r2
 8005ad2:	f8c9 3000 	str.w	r3, [r9]
 8005ad6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ada:	4606      	mov	r6, r0
 8005adc:	460c      	mov	r4, r1
 8005ade:	b112      	cbz	r2, 8005ae6 <_printf_common+0x2a>
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	f8c9 3000 	str.w	r3, [r9]
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	0699      	lsls	r1, r3, #26
 8005aea:	bf42      	ittt	mi
 8005aec:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005af0:	3302      	addmi	r3, #2
 8005af2:	f8c9 3000 	strmi.w	r3, [r9]
 8005af6:	6825      	ldr	r5, [r4, #0]
 8005af8:	f015 0506 	ands.w	r5, r5, #6
 8005afc:	d107      	bne.n	8005b0e <_printf_common+0x52>
 8005afe:	f104 0a19 	add.w	sl, r4, #25
 8005b02:	68e3      	ldr	r3, [r4, #12]
 8005b04:	f8d9 2000 	ldr.w	r2, [r9]
 8005b08:	1a9b      	subs	r3, r3, r2
 8005b0a:	42ab      	cmp	r3, r5
 8005b0c:	dc28      	bgt.n	8005b60 <_printf_common+0xa4>
 8005b0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005b12:	6822      	ldr	r2, [r4, #0]
 8005b14:	3300      	adds	r3, #0
 8005b16:	bf18      	it	ne
 8005b18:	2301      	movne	r3, #1
 8005b1a:	0692      	lsls	r2, r2, #26
 8005b1c:	d42d      	bmi.n	8005b7a <_printf_common+0xbe>
 8005b1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b22:	4639      	mov	r1, r7
 8005b24:	4630      	mov	r0, r6
 8005b26:	47c0      	blx	r8
 8005b28:	3001      	adds	r0, #1
 8005b2a:	d020      	beq.n	8005b6e <_printf_common+0xb2>
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	68e5      	ldr	r5, [r4, #12]
 8005b30:	f8d9 2000 	ldr.w	r2, [r9]
 8005b34:	f003 0306 	and.w	r3, r3, #6
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	bf08      	it	eq
 8005b3c:	1aad      	subeq	r5, r5, r2
 8005b3e:	68a3      	ldr	r3, [r4, #8]
 8005b40:	6922      	ldr	r2, [r4, #16]
 8005b42:	bf0c      	ite	eq
 8005b44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b48:	2500      	movne	r5, #0
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	bfc4      	itt	gt
 8005b4e:	1a9b      	subgt	r3, r3, r2
 8005b50:	18ed      	addgt	r5, r5, r3
 8005b52:	f04f 0900 	mov.w	r9, #0
 8005b56:	341a      	adds	r4, #26
 8005b58:	454d      	cmp	r5, r9
 8005b5a:	d11a      	bne.n	8005b92 <_printf_common+0xd6>
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	e008      	b.n	8005b72 <_printf_common+0xb6>
 8005b60:	2301      	movs	r3, #1
 8005b62:	4652      	mov	r2, sl
 8005b64:	4639      	mov	r1, r7
 8005b66:	4630      	mov	r0, r6
 8005b68:	47c0      	blx	r8
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	d103      	bne.n	8005b76 <_printf_common+0xba>
 8005b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b76:	3501      	adds	r5, #1
 8005b78:	e7c3      	b.n	8005b02 <_printf_common+0x46>
 8005b7a:	18e1      	adds	r1, r4, r3
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	2030      	movs	r0, #48	; 0x30
 8005b80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b84:	4422      	add	r2, r4
 8005b86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b8e:	3302      	adds	r3, #2
 8005b90:	e7c5      	b.n	8005b1e <_printf_common+0x62>
 8005b92:	2301      	movs	r3, #1
 8005b94:	4622      	mov	r2, r4
 8005b96:	4639      	mov	r1, r7
 8005b98:	4630      	mov	r0, r6
 8005b9a:	47c0      	blx	r8
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	d0e6      	beq.n	8005b6e <_printf_common+0xb2>
 8005ba0:	f109 0901 	add.w	r9, r9, #1
 8005ba4:	e7d8      	b.n	8005b58 <_printf_common+0x9c>
	...

08005ba8 <_printf_i>:
 8005ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005bb0:	460c      	mov	r4, r1
 8005bb2:	7e09      	ldrb	r1, [r1, #24]
 8005bb4:	b085      	sub	sp, #20
 8005bb6:	296e      	cmp	r1, #110	; 0x6e
 8005bb8:	4617      	mov	r7, r2
 8005bba:	4606      	mov	r6, r0
 8005bbc:	4698      	mov	r8, r3
 8005bbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bc0:	f000 80b3 	beq.w	8005d2a <_printf_i+0x182>
 8005bc4:	d822      	bhi.n	8005c0c <_printf_i+0x64>
 8005bc6:	2963      	cmp	r1, #99	; 0x63
 8005bc8:	d036      	beq.n	8005c38 <_printf_i+0x90>
 8005bca:	d80a      	bhi.n	8005be2 <_printf_i+0x3a>
 8005bcc:	2900      	cmp	r1, #0
 8005bce:	f000 80b9 	beq.w	8005d44 <_printf_i+0x19c>
 8005bd2:	2958      	cmp	r1, #88	; 0x58
 8005bd4:	f000 8083 	beq.w	8005cde <_printf_i+0x136>
 8005bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bdc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005be0:	e032      	b.n	8005c48 <_printf_i+0xa0>
 8005be2:	2964      	cmp	r1, #100	; 0x64
 8005be4:	d001      	beq.n	8005bea <_printf_i+0x42>
 8005be6:	2969      	cmp	r1, #105	; 0x69
 8005be8:	d1f6      	bne.n	8005bd8 <_printf_i+0x30>
 8005bea:	6820      	ldr	r0, [r4, #0]
 8005bec:	6813      	ldr	r3, [r2, #0]
 8005bee:	0605      	lsls	r5, r0, #24
 8005bf0:	f103 0104 	add.w	r1, r3, #4
 8005bf4:	d52a      	bpl.n	8005c4c <_printf_i+0xa4>
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6011      	str	r1, [r2, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	da03      	bge.n	8005c06 <_printf_i+0x5e>
 8005bfe:	222d      	movs	r2, #45	; 0x2d
 8005c00:	425b      	negs	r3, r3
 8005c02:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005c06:	486f      	ldr	r0, [pc, #444]	; (8005dc4 <_printf_i+0x21c>)
 8005c08:	220a      	movs	r2, #10
 8005c0a:	e039      	b.n	8005c80 <_printf_i+0xd8>
 8005c0c:	2973      	cmp	r1, #115	; 0x73
 8005c0e:	f000 809d 	beq.w	8005d4c <_printf_i+0x1a4>
 8005c12:	d808      	bhi.n	8005c26 <_printf_i+0x7e>
 8005c14:	296f      	cmp	r1, #111	; 0x6f
 8005c16:	d020      	beq.n	8005c5a <_printf_i+0xb2>
 8005c18:	2970      	cmp	r1, #112	; 0x70
 8005c1a:	d1dd      	bne.n	8005bd8 <_printf_i+0x30>
 8005c1c:	6823      	ldr	r3, [r4, #0]
 8005c1e:	f043 0320 	orr.w	r3, r3, #32
 8005c22:	6023      	str	r3, [r4, #0]
 8005c24:	e003      	b.n	8005c2e <_printf_i+0x86>
 8005c26:	2975      	cmp	r1, #117	; 0x75
 8005c28:	d017      	beq.n	8005c5a <_printf_i+0xb2>
 8005c2a:	2978      	cmp	r1, #120	; 0x78
 8005c2c:	d1d4      	bne.n	8005bd8 <_printf_i+0x30>
 8005c2e:	2378      	movs	r3, #120	; 0x78
 8005c30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c34:	4864      	ldr	r0, [pc, #400]	; (8005dc8 <_printf_i+0x220>)
 8005c36:	e055      	b.n	8005ce4 <_printf_i+0x13c>
 8005c38:	6813      	ldr	r3, [r2, #0]
 8005c3a:	1d19      	adds	r1, r3, #4
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6011      	str	r1, [r2, #0]
 8005c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e08c      	b.n	8005d66 <_printf_i+0x1be>
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6011      	str	r1, [r2, #0]
 8005c50:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c54:	bf18      	it	ne
 8005c56:	b21b      	sxthne	r3, r3
 8005c58:	e7cf      	b.n	8005bfa <_printf_i+0x52>
 8005c5a:	6813      	ldr	r3, [r2, #0]
 8005c5c:	6825      	ldr	r5, [r4, #0]
 8005c5e:	1d18      	adds	r0, r3, #4
 8005c60:	6010      	str	r0, [r2, #0]
 8005c62:	0628      	lsls	r0, r5, #24
 8005c64:	d501      	bpl.n	8005c6a <_printf_i+0xc2>
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	e002      	b.n	8005c70 <_printf_i+0xc8>
 8005c6a:	0668      	lsls	r0, r5, #25
 8005c6c:	d5fb      	bpl.n	8005c66 <_printf_i+0xbe>
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	4854      	ldr	r0, [pc, #336]	; (8005dc4 <_printf_i+0x21c>)
 8005c72:	296f      	cmp	r1, #111	; 0x6f
 8005c74:	bf14      	ite	ne
 8005c76:	220a      	movne	r2, #10
 8005c78:	2208      	moveq	r2, #8
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c80:	6865      	ldr	r5, [r4, #4]
 8005c82:	60a5      	str	r5, [r4, #8]
 8005c84:	2d00      	cmp	r5, #0
 8005c86:	f2c0 8095 	blt.w	8005db4 <_printf_i+0x20c>
 8005c8a:	6821      	ldr	r1, [r4, #0]
 8005c8c:	f021 0104 	bic.w	r1, r1, #4
 8005c90:	6021      	str	r1, [r4, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d13d      	bne.n	8005d12 <_printf_i+0x16a>
 8005c96:	2d00      	cmp	r5, #0
 8005c98:	f040 808e 	bne.w	8005db8 <_printf_i+0x210>
 8005c9c:	4665      	mov	r5, ip
 8005c9e:	2a08      	cmp	r2, #8
 8005ca0:	d10b      	bne.n	8005cba <_printf_i+0x112>
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	07db      	lsls	r3, r3, #31
 8005ca6:	d508      	bpl.n	8005cba <_printf_i+0x112>
 8005ca8:	6923      	ldr	r3, [r4, #16]
 8005caa:	6862      	ldr	r2, [r4, #4]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	bfde      	ittt	le
 8005cb0:	2330      	movle	r3, #48	; 0x30
 8005cb2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cb6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cba:	ebac 0305 	sub.w	r3, ip, r5
 8005cbe:	6123      	str	r3, [r4, #16]
 8005cc0:	f8cd 8000 	str.w	r8, [sp]
 8005cc4:	463b      	mov	r3, r7
 8005cc6:	aa03      	add	r2, sp, #12
 8005cc8:	4621      	mov	r1, r4
 8005cca:	4630      	mov	r0, r6
 8005ccc:	f7ff fef6 	bl	8005abc <_printf_common>
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	d14d      	bne.n	8005d70 <_printf_i+0x1c8>
 8005cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd8:	b005      	add	sp, #20
 8005cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cde:	4839      	ldr	r0, [pc, #228]	; (8005dc4 <_printf_i+0x21c>)
 8005ce0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005ce4:	6813      	ldr	r3, [r2, #0]
 8005ce6:	6821      	ldr	r1, [r4, #0]
 8005ce8:	1d1d      	adds	r5, r3, #4
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6015      	str	r5, [r2, #0]
 8005cee:	060a      	lsls	r2, r1, #24
 8005cf0:	d50b      	bpl.n	8005d0a <_printf_i+0x162>
 8005cf2:	07ca      	lsls	r2, r1, #31
 8005cf4:	bf44      	itt	mi
 8005cf6:	f041 0120 	orrmi.w	r1, r1, #32
 8005cfa:	6021      	strmi	r1, [r4, #0]
 8005cfc:	b91b      	cbnz	r3, 8005d06 <_printf_i+0x15e>
 8005cfe:	6822      	ldr	r2, [r4, #0]
 8005d00:	f022 0220 	bic.w	r2, r2, #32
 8005d04:	6022      	str	r2, [r4, #0]
 8005d06:	2210      	movs	r2, #16
 8005d08:	e7b7      	b.n	8005c7a <_printf_i+0xd2>
 8005d0a:	064d      	lsls	r5, r1, #25
 8005d0c:	bf48      	it	mi
 8005d0e:	b29b      	uxthmi	r3, r3
 8005d10:	e7ef      	b.n	8005cf2 <_printf_i+0x14a>
 8005d12:	4665      	mov	r5, ip
 8005d14:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d18:	fb02 3311 	mls	r3, r2, r1, r3
 8005d1c:	5cc3      	ldrb	r3, [r0, r3]
 8005d1e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005d22:	460b      	mov	r3, r1
 8005d24:	2900      	cmp	r1, #0
 8005d26:	d1f5      	bne.n	8005d14 <_printf_i+0x16c>
 8005d28:	e7b9      	b.n	8005c9e <_printf_i+0xf6>
 8005d2a:	6813      	ldr	r3, [r2, #0]
 8005d2c:	6825      	ldr	r5, [r4, #0]
 8005d2e:	6961      	ldr	r1, [r4, #20]
 8005d30:	1d18      	adds	r0, r3, #4
 8005d32:	6010      	str	r0, [r2, #0]
 8005d34:	0628      	lsls	r0, r5, #24
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	d501      	bpl.n	8005d3e <_printf_i+0x196>
 8005d3a:	6019      	str	r1, [r3, #0]
 8005d3c:	e002      	b.n	8005d44 <_printf_i+0x19c>
 8005d3e:	066a      	lsls	r2, r5, #25
 8005d40:	d5fb      	bpl.n	8005d3a <_printf_i+0x192>
 8005d42:	8019      	strh	r1, [r3, #0]
 8005d44:	2300      	movs	r3, #0
 8005d46:	6123      	str	r3, [r4, #16]
 8005d48:	4665      	mov	r5, ip
 8005d4a:	e7b9      	b.n	8005cc0 <_printf_i+0x118>
 8005d4c:	6813      	ldr	r3, [r2, #0]
 8005d4e:	1d19      	adds	r1, r3, #4
 8005d50:	6011      	str	r1, [r2, #0]
 8005d52:	681d      	ldr	r5, [r3, #0]
 8005d54:	6862      	ldr	r2, [r4, #4]
 8005d56:	2100      	movs	r1, #0
 8005d58:	4628      	mov	r0, r5
 8005d5a:	f7fa fa39 	bl	80001d0 <memchr>
 8005d5e:	b108      	cbz	r0, 8005d64 <_printf_i+0x1bc>
 8005d60:	1b40      	subs	r0, r0, r5
 8005d62:	6060      	str	r0, [r4, #4]
 8005d64:	6863      	ldr	r3, [r4, #4]
 8005d66:	6123      	str	r3, [r4, #16]
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d6e:	e7a7      	b.n	8005cc0 <_printf_i+0x118>
 8005d70:	6923      	ldr	r3, [r4, #16]
 8005d72:	462a      	mov	r2, r5
 8005d74:	4639      	mov	r1, r7
 8005d76:	4630      	mov	r0, r6
 8005d78:	47c0      	blx	r8
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	d0aa      	beq.n	8005cd4 <_printf_i+0x12c>
 8005d7e:	6823      	ldr	r3, [r4, #0]
 8005d80:	079b      	lsls	r3, r3, #30
 8005d82:	d413      	bmi.n	8005dac <_printf_i+0x204>
 8005d84:	68e0      	ldr	r0, [r4, #12]
 8005d86:	9b03      	ldr	r3, [sp, #12]
 8005d88:	4298      	cmp	r0, r3
 8005d8a:	bfb8      	it	lt
 8005d8c:	4618      	movlt	r0, r3
 8005d8e:	e7a3      	b.n	8005cd8 <_printf_i+0x130>
 8005d90:	2301      	movs	r3, #1
 8005d92:	464a      	mov	r2, r9
 8005d94:	4639      	mov	r1, r7
 8005d96:	4630      	mov	r0, r6
 8005d98:	47c0      	blx	r8
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	d09a      	beq.n	8005cd4 <_printf_i+0x12c>
 8005d9e:	3501      	adds	r5, #1
 8005da0:	68e3      	ldr	r3, [r4, #12]
 8005da2:	9a03      	ldr	r2, [sp, #12]
 8005da4:	1a9b      	subs	r3, r3, r2
 8005da6:	42ab      	cmp	r3, r5
 8005da8:	dcf2      	bgt.n	8005d90 <_printf_i+0x1e8>
 8005daa:	e7eb      	b.n	8005d84 <_printf_i+0x1dc>
 8005dac:	2500      	movs	r5, #0
 8005dae:	f104 0919 	add.w	r9, r4, #25
 8005db2:	e7f5      	b.n	8005da0 <_printf_i+0x1f8>
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1ac      	bne.n	8005d12 <_printf_i+0x16a>
 8005db8:	7803      	ldrb	r3, [r0, #0]
 8005dba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dc2:	e76c      	b.n	8005c9e <_printf_i+0xf6>
 8005dc4:	08006085 	.word	0x08006085
 8005dc8:	08006096 	.word	0x08006096

08005dcc <_sbrk_r>:
 8005dcc:	b538      	push	{r3, r4, r5, lr}
 8005dce:	4c06      	ldr	r4, [pc, #24]	; (8005de8 <_sbrk_r+0x1c>)
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	4605      	mov	r5, r0
 8005dd4:	4608      	mov	r0, r1
 8005dd6:	6023      	str	r3, [r4, #0]
 8005dd8:	f7fa fe88 	bl	8000aec <_sbrk>
 8005ddc:	1c43      	adds	r3, r0, #1
 8005dde:	d102      	bne.n	8005de6 <_sbrk_r+0x1a>
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	b103      	cbz	r3, 8005de6 <_sbrk_r+0x1a>
 8005de4:	602b      	str	r3, [r5, #0]
 8005de6:	bd38      	pop	{r3, r4, r5, pc}
 8005de8:	20001ccc 	.word	0x20001ccc

08005dec <__sread>:
 8005dec:	b510      	push	{r4, lr}
 8005dee:	460c      	mov	r4, r1
 8005df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005df4:	f000 f896 	bl	8005f24 <_read_r>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	bfab      	itete	ge
 8005dfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005dfe:	89a3      	ldrhlt	r3, [r4, #12]
 8005e00:	181b      	addge	r3, r3, r0
 8005e02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e06:	bfac      	ite	ge
 8005e08:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e0a:	81a3      	strhlt	r3, [r4, #12]
 8005e0c:	bd10      	pop	{r4, pc}

08005e0e <__swrite>:
 8005e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e12:	461f      	mov	r7, r3
 8005e14:	898b      	ldrh	r3, [r1, #12]
 8005e16:	05db      	lsls	r3, r3, #23
 8005e18:	4605      	mov	r5, r0
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	4616      	mov	r6, r2
 8005e1e:	d505      	bpl.n	8005e2c <__swrite+0x1e>
 8005e20:	2302      	movs	r3, #2
 8005e22:	2200      	movs	r2, #0
 8005e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e28:	f000 f868 	bl	8005efc <_lseek_r>
 8005e2c:	89a3      	ldrh	r3, [r4, #12]
 8005e2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e36:	81a3      	strh	r3, [r4, #12]
 8005e38:	4632      	mov	r2, r6
 8005e3a:	463b      	mov	r3, r7
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e42:	f000 b817 	b.w	8005e74 <_write_r>

08005e46 <__sseek>:
 8005e46:	b510      	push	{r4, lr}
 8005e48:	460c      	mov	r4, r1
 8005e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e4e:	f000 f855 	bl	8005efc <_lseek_r>
 8005e52:	1c43      	adds	r3, r0, #1
 8005e54:	89a3      	ldrh	r3, [r4, #12]
 8005e56:	bf15      	itete	ne
 8005e58:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e62:	81a3      	strheq	r3, [r4, #12]
 8005e64:	bf18      	it	ne
 8005e66:	81a3      	strhne	r3, [r4, #12]
 8005e68:	bd10      	pop	{r4, pc}

08005e6a <__sclose>:
 8005e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e6e:	f000 b813 	b.w	8005e98 <_close_r>
	...

08005e74 <_write_r>:
 8005e74:	b538      	push	{r3, r4, r5, lr}
 8005e76:	4c07      	ldr	r4, [pc, #28]	; (8005e94 <_write_r+0x20>)
 8005e78:	4605      	mov	r5, r0
 8005e7a:	4608      	mov	r0, r1
 8005e7c:	4611      	mov	r1, r2
 8005e7e:	2200      	movs	r2, #0
 8005e80:	6022      	str	r2, [r4, #0]
 8005e82:	461a      	mov	r2, r3
 8005e84:	f7fa fde1 	bl	8000a4a <_write>
 8005e88:	1c43      	adds	r3, r0, #1
 8005e8a:	d102      	bne.n	8005e92 <_write_r+0x1e>
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	b103      	cbz	r3, 8005e92 <_write_r+0x1e>
 8005e90:	602b      	str	r3, [r5, #0]
 8005e92:	bd38      	pop	{r3, r4, r5, pc}
 8005e94:	20001ccc 	.word	0x20001ccc

08005e98 <_close_r>:
 8005e98:	b538      	push	{r3, r4, r5, lr}
 8005e9a:	4c06      	ldr	r4, [pc, #24]	; (8005eb4 <_close_r+0x1c>)
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	4605      	mov	r5, r0
 8005ea0:	4608      	mov	r0, r1
 8005ea2:	6023      	str	r3, [r4, #0]
 8005ea4:	f7fa fded 	bl	8000a82 <_close>
 8005ea8:	1c43      	adds	r3, r0, #1
 8005eaa:	d102      	bne.n	8005eb2 <_close_r+0x1a>
 8005eac:	6823      	ldr	r3, [r4, #0]
 8005eae:	b103      	cbz	r3, 8005eb2 <_close_r+0x1a>
 8005eb0:	602b      	str	r3, [r5, #0]
 8005eb2:	bd38      	pop	{r3, r4, r5, pc}
 8005eb4:	20001ccc 	.word	0x20001ccc

08005eb8 <_fstat_r>:
 8005eb8:	b538      	push	{r3, r4, r5, lr}
 8005eba:	4c07      	ldr	r4, [pc, #28]	; (8005ed8 <_fstat_r+0x20>)
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	4605      	mov	r5, r0
 8005ec0:	4608      	mov	r0, r1
 8005ec2:	4611      	mov	r1, r2
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	f7fa fde8 	bl	8000a9a <_fstat>
 8005eca:	1c43      	adds	r3, r0, #1
 8005ecc:	d102      	bne.n	8005ed4 <_fstat_r+0x1c>
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	b103      	cbz	r3, 8005ed4 <_fstat_r+0x1c>
 8005ed2:	602b      	str	r3, [r5, #0]
 8005ed4:	bd38      	pop	{r3, r4, r5, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20001ccc 	.word	0x20001ccc

08005edc <_isatty_r>:
 8005edc:	b538      	push	{r3, r4, r5, lr}
 8005ede:	4c06      	ldr	r4, [pc, #24]	; (8005ef8 <_isatty_r+0x1c>)
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	4605      	mov	r5, r0
 8005ee4:	4608      	mov	r0, r1
 8005ee6:	6023      	str	r3, [r4, #0]
 8005ee8:	f7fa fde7 	bl	8000aba <_isatty>
 8005eec:	1c43      	adds	r3, r0, #1
 8005eee:	d102      	bne.n	8005ef6 <_isatty_r+0x1a>
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	b103      	cbz	r3, 8005ef6 <_isatty_r+0x1a>
 8005ef4:	602b      	str	r3, [r5, #0]
 8005ef6:	bd38      	pop	{r3, r4, r5, pc}
 8005ef8:	20001ccc 	.word	0x20001ccc

08005efc <_lseek_r>:
 8005efc:	b538      	push	{r3, r4, r5, lr}
 8005efe:	4c07      	ldr	r4, [pc, #28]	; (8005f1c <_lseek_r+0x20>)
 8005f00:	4605      	mov	r5, r0
 8005f02:	4608      	mov	r0, r1
 8005f04:	4611      	mov	r1, r2
 8005f06:	2200      	movs	r2, #0
 8005f08:	6022      	str	r2, [r4, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f7fa fde0 	bl	8000ad0 <_lseek>
 8005f10:	1c43      	adds	r3, r0, #1
 8005f12:	d102      	bne.n	8005f1a <_lseek_r+0x1e>
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	b103      	cbz	r3, 8005f1a <_lseek_r+0x1e>
 8005f18:	602b      	str	r3, [r5, #0]
 8005f1a:	bd38      	pop	{r3, r4, r5, pc}
 8005f1c:	20001ccc 	.word	0x20001ccc

08005f20 <__malloc_lock>:
 8005f20:	4770      	bx	lr

08005f22 <__malloc_unlock>:
 8005f22:	4770      	bx	lr

08005f24 <_read_r>:
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	4c07      	ldr	r4, [pc, #28]	; (8005f44 <_read_r+0x20>)
 8005f28:	4605      	mov	r5, r0
 8005f2a:	4608      	mov	r0, r1
 8005f2c:	4611      	mov	r1, r2
 8005f2e:	2200      	movs	r2, #0
 8005f30:	6022      	str	r2, [r4, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	f7fa fd6c 	bl	8000a10 <_read>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	d102      	bne.n	8005f42 <_read_r+0x1e>
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	b103      	cbz	r3, 8005f42 <_read_r+0x1e>
 8005f40:	602b      	str	r3, [r5, #0]
 8005f42:	bd38      	pop	{r3, r4, r5, pc}
 8005f44:	20001ccc 	.word	0x20001ccc

08005f48 <_init>:
 8005f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4a:	bf00      	nop
 8005f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f4e:	bc08      	pop	{r3}
 8005f50:	469e      	mov	lr, r3
 8005f52:	4770      	bx	lr

08005f54 <_fini>:
 8005f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f56:	bf00      	nop
 8005f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5a:	bc08      	pop	{r3}
 8005f5c:	469e      	mov	lr, r3
 8005f5e:	4770      	bx	lr
