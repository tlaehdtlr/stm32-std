
8_freeRTOS_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08005cdc  08005cdc  00015cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e5c  08005e5c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005e5c  08005e5c  00015e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e64  08005e64  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e64  08005e64  00015e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e68  08005e68  00015e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000105c  20000074  08005ee0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010d0  08005ee0  000210d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018af4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033be  00000000  00000000  00038b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014b8  00000000  00000000  0003bf58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001320  00000000  00000000  0003d410  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d812  00000000  00000000  0003e730  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011a62  00000000  00000000  0005bf42  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b489b  00000000  00000000  0006d9a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012223f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005afc  00000000  00000000  001222bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005cc4 	.word	0x08005cc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005cc4 	.word	0x08005cc4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000090 	.word	0x20000090
 8000500:	200000e4 	.word	0x200000e4

08000504 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b08a      	sub	sp, #40	; 0x28
 8000508:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800050a:	4b17      	ldr	r3, [pc, #92]	; (8000568 <MX_FREERTOS_Init+0x64>)
 800050c:	1d3c      	adds	r4, r7, #4
 800050e:	461d      	mov	r5, r3
 8000510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000514:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000518:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f002 fda2 	bl	800306a <osThreadCreate>
 8000526:	4602      	mov	r2, r0
 8000528:	4b10      	ldr	r3, [pc, #64]	; (800056c <MX_FREERTOS_Init+0x68>)
 800052a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  MutexHandle = xSemaphoreCreateMutex();
 800052c:	2001      	movs	r0, #1
 800052e:	f003 fb69 	bl	8003c04 <xQueueCreateMutex>
 8000532:	4602      	mov	r2, r0
 8000534:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <MX_FREERTOS_Init+0x6c>)
 8000536:	601a      	str	r2, [r3, #0]
  xTaskCreate(GetMutexTask_1, "GetMutex_1" , configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000538:	2300      	movs	r3, #0
 800053a:	9301      	str	r3, [sp, #4]
 800053c:	2301      	movs	r3, #1
 800053e:	9300      	str	r3, [sp, #0]
 8000540:	2300      	movs	r3, #0
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	490b      	ldr	r1, [pc, #44]	; (8000574 <MX_FREERTOS_Init+0x70>)
 8000546:	480c      	ldr	r0, [pc, #48]	; (8000578 <MX_FREERTOS_Init+0x74>)
 8000548:	f003 fed2 	bl	80042f0 <xTaskCreate>
  xTaskCreate(GetMutexTask_2, "GetMutex_2" , configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 800054c:	2300      	movs	r3, #0
 800054e:	9301      	str	r3, [sp, #4]
 8000550:	2301      	movs	r3, #1
 8000552:	9300      	str	r3, [sp, #0]
 8000554:	2300      	movs	r3, #0
 8000556:	2280      	movs	r2, #128	; 0x80
 8000558:	4908      	ldr	r1, [pc, #32]	; (800057c <MX_FREERTOS_Init+0x78>)
 800055a:	4809      	ldr	r0, [pc, #36]	; (8000580 <MX_FREERTOS_Init+0x7c>)
 800055c:	f003 fec8 	bl	80042f0 <xTaskCreate>
  //xTaskCreate(NotifyTask, "Notify" , configMINIMAL_STACK_SIZE, NULL, 1, &MyNotifyTaskHandle);


  /* USER CODE END RTOS_THREADS */

}
 8000560:	bf00      	nop
 8000562:	3720      	adds	r7, #32
 8000564:	46bd      	mov	sp, r7
 8000566:	bdb0      	pop	{r4, r5, r7, pc}
 8000568:	08005d00 	.word	0x08005d00
 800056c:	20000ff4 	.word	0x20000ff4
 8000570:	20000ff8 	.word	0x20000ff8
 8000574:	08005cdc 	.word	0x08005cdc
 8000578:	08000595 	.word	0x08000595
 800057c:	08005ce8 	.word	0x08005ce8
 8000580:	080005e9 	.word	0x080005e9

08000584 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800058c:	2001      	movs	r0, #1
 800058e:	f002 fdb8 	bl	8003102 <osDelay>
 8000592:	e7fb      	b.n	800058c <StartDefaultTask+0x8>

08000594 <GetMutexTask_1>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void GetMutexTask_1()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* Infinite loop */
  for (;;)
  {
    vTaskDelay(1000);
 8000598:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059c:	f003 ffde 	bl	800455c <vTaskDelay>
    if (xSemaphoreTake(MutexHandle, 500) == pdTRUE)
 80005a0:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <GetMutexTask_1+0x48>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 fc3d 	bl	8003e28 <xQueueSemaphoreTake>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d10e      	bne.n	80005d2 <GetMutexTask_1+0x3e>
    {
      printf("Task1 get mutex while 2sec. \r\n");
 80005b4:	480a      	ldr	r0, [pc, #40]	; (80005e0 <GetMutexTask_1+0x4c>)
 80005b6:	f004 ff79 	bl	80054ac <puts>
      vTaskDelay(2000);
 80005ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005be:	f003 ffcd 	bl	800455c <vTaskDelay>
      xSemaphoreGive(MutexHandle);
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <GetMutexTask_1+0x48>)
 80005c4:	6818      	ldr	r0, [r3, #0]
 80005c6:	2300      	movs	r3, #0
 80005c8:	2200      	movs	r2, #0
 80005ca:	2100      	movs	r1, #0
 80005cc:	f003 fb32 	bl	8003c34 <xQueueGenericSend>
 80005d0:	e7e2      	b.n	8000598 <GetMutexTask_1+0x4>
    }
    else
    {
      printf("Task1 mutex timeout or error \r\n");
 80005d2:	4804      	ldr	r0, [pc, #16]	; (80005e4 <GetMutexTask_1+0x50>)
 80005d4:	f004 ff6a 	bl	80054ac <puts>
    vTaskDelay(1000);
 80005d8:	e7de      	b.n	8000598 <GetMutexTask_1+0x4>
 80005da:	bf00      	nop
 80005dc:	20000ff8 	.word	0x20000ff8
 80005e0:	08005d1c 	.word	0x08005d1c
 80005e4:	08005d3c 	.word	0x08005d3c

080005e8 <GetMutexTask_2>:
    }
  }
}
void GetMutexTask_2()
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* Infinite loop */
  for (;;)
  {
    vTaskDelay(1000);
 80005ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f0:	f003 ffb4 	bl	800455c <vTaskDelay>
    if (xSemaphoreTake(MutexHandle, 500) == pdTRUE)
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <GetMutexTask_2+0x4c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005fc:	4618      	mov	r0, r3
 80005fe:	f003 fc13 	bl	8003e28 <xQueueSemaphoreTake>
 8000602:	4603      	mov	r3, r0
 8000604:	2b01      	cmp	r3, #1
 8000606:	d10e      	bne.n	8000626 <GetMutexTask_2+0x3e>
    {
      printf("Task2 get mutex while 1.5sec.\r\n");
 8000608:	480b      	ldr	r0, [pc, #44]	; (8000638 <GetMutexTask_2+0x50>)
 800060a:	f004 ff4f 	bl	80054ac <puts>
      vTaskDelay(1500);
 800060e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000612:	f003 ffa3 	bl	800455c <vTaskDelay>
      xSemaphoreGive(MutexHandle);
 8000616:	4b07      	ldr	r3, [pc, #28]	; (8000634 <GetMutexTask_2+0x4c>)
 8000618:	6818      	ldr	r0, [r3, #0]
 800061a:	2300      	movs	r3, #0
 800061c:	2200      	movs	r2, #0
 800061e:	2100      	movs	r1, #0
 8000620:	f003 fb08 	bl	8003c34 <xQueueGenericSend>
 8000624:	e7e2      	b.n	80005ec <GetMutexTask_2+0x4>

    }
    else
    {
      printf("Task2 mutex timeout or error \r\n");
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <GetMutexTask_2+0x54>)
 8000628:	f004 ff40 	bl	80054ac <puts>
      vCall_TaskNotify(eNotifyFlashInitialized);
 800062c:	2001      	movs	r0, #1
 800062e:	f000 f811 	bl	8000654 <vCall_TaskNotify>
    vTaskDelay(1000);
 8000632:	e7db      	b.n	80005ec <GetMutexTask_2+0x4>
 8000634:	20000ff8 	.word	0x20000ff8
 8000638:	08005d5c 	.word	0x08005d5c
 800063c:	08005d7c 	.word	0x08005d7c

08000640 <NotifyTask>:
  }
}


void NotifyTask()
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  printf("I'm here \r\n");
 8000644:	4802      	ldr	r0, [pc, #8]	; (8000650 <NotifyTask+0x10>)
 8000646:	f004 ff31 	bl	80054ac <puts>
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	08005d9c 	.word	0x08005d9c

08000654 <vCall_TaskNotify>:


void vCall_TaskNotify(eNotifyValue eNofiValue)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if (NotifyTask != NULL)
  {
    xTaskNotify(NotifyTask, eNofiValue, eSetValueWithOverwrite);
 800065e:	79f9      	ldrb	r1, [r7, #7]
 8000660:	2300      	movs	r3, #0
 8000662:	2203      	movs	r2, #3
 8000664:	4803      	ldr	r0, [pc, #12]	; (8000674 <vCall_TaskNotify+0x20>)
 8000666:	f004 fd6f 	bl	8005148 <xTaskGenericNotify>
  }
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	08000641 	.word	0x08000641

08000678 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_GPIO_Init+0x2c>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	4a08      	ldr	r2, [pc, #32]	; (80006a4 <MX_GPIO_Init+0x2c>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_GPIO_Init+0x2c>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000

080006a8 <__io_putchar>:
#else
    #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80006b0:	1d39      	adds	r1, r7, #4
 80006b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006b6:	2201      	movs	r2, #1
 80006b8:	4803      	ldr	r0, [pc, #12]	; (80006c8 <__io_putchar+0x20>)
 80006ba:	f002 f88b 	bl	80027d4 <HAL_UART_Transmit>
  return ch;
 80006be:	687b      	ldr	r3, [r7, #4]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20001048 	.word	0x20001048

080006cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d0:	f000 faa0 	bl	8000c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d4:	f000 f809 	bl	80006ea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d8:	f7ff ffce 	bl	8000678 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006dc:	f000 f9c6 	bl	8000a6c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80006e0:	f7ff ff10 	bl	8000504 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80006e4:	f002 fcba 	bl	800305c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <main+0x1c>

080006ea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b0a4      	sub	sp, #144	; 0x90
 80006ee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006f4:	2244      	movs	r2, #68	; 0x44
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f004 fe72 	bl	80053e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2234      	movs	r2, #52	; 0x34
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f004 fe64 	bl	80053e2 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800071a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800071e:	f000 fd13 	bl	8001148 <HAL_PWREx_ControlVoltageScaling>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000728:	f000 f85a 	bl	80007e0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800072c:	2310      	movs	r3, #16
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000730:	2301      	movs	r3, #1
 8000732:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000738:	2360      	movs	r3, #96	; 0x60
 800073a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000740:	2301      	movs	r3, #1
 8000742:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000744:	2301      	movs	r3, #1
 8000746:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 40;
 800074a:	2328      	movs	r3, #40	; 0x28
 800074c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000756:	2302      	movs	r3, #2
 8000758:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000760:	4618      	mov	r0, r3
 8000762:	f000 fd47 	bl	80011f4 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800076c:	f000 f838 	bl	80007e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2303      	movs	r3, #3
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000784:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000788:	2104      	movs	r1, #4
 800078a:	4618      	mov	r0, r3
 800078c:	f001 f998 	bl	8001ac0 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000796:	f000 f823 	bl	80007e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800079a:	2301      	movs	r3, #1
 800079c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 fbc1 	bl	8001f2c <HAL_RCCEx_PeriphCLKConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007b0:	f000 f816 	bl	80007e0 <Error_Handler>
  }
}
 80007b4:	bf00      	nop
 80007b6:	3790      	adds	r7, #144	; 0x90
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a04      	ldr	r2, [pc, #16]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d101      	bne.n	80007d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ce:	f000 fa39 	bl	8000c44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40001000 	.word	0x40001000

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <Error_Handler+0x6>

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <HAL_MspInit+0x4c>)
 80007f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f2:	4a10      	ldr	r2, [pc, #64]	; (8000834 <HAL_MspInit+0x4c>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6613      	str	r3, [r2, #96]	; 0x60
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <HAL_MspInit+0x4c>)
 80007fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <HAL_MspInit+0x4c>)
 8000808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080a:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <HAL_MspInit+0x4c>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000810:	6593      	str	r3, [r2, #88]	; 0x58
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <HAL_MspInit+0x4c>)
 8000814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	210f      	movs	r1, #15
 8000822:	f06f 0001 	mvn.w	r0, #1
 8000826:	f000 fae5 	bl	8000df4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40021000 	.word	0x40021000

08000838 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08c      	sub	sp, #48	; 0x30
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 8000848:	2200      	movs	r2, #0
 800084a:	6879      	ldr	r1, [r7, #4]
 800084c:	2036      	movs	r0, #54	; 0x36
 800084e:	f000 fad1 	bl	8000df4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000852:	2036      	movs	r0, #54	; 0x36
 8000854:	f000 faea 	bl	8000e2c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000858:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <HAL_InitTick+0x9c>)
 800085a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085c:	4a1d      	ldr	r2, [pc, #116]	; (80008d4 <HAL_InitTick+0x9c>)
 800085e:	f043 0310 	orr.w	r3, r3, #16
 8000862:	6593      	str	r3, [r2, #88]	; 0x58
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <HAL_InitTick+0x9c>)
 8000866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000868:	f003 0310 	and.w	r3, r3, #16
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000870:	f107 0210 	add.w	r2, r7, #16
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4611      	mov	r1, r2
 800087a:	4618      	mov	r0, r3
 800087c:	f001 fac4 	bl	8001e08 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000880:	f001 fa96 	bl	8001db0 <HAL_RCC_GetPCLK1Freq>
 8000884:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000888:	4a13      	ldr	r2, [pc, #76]	; (80008d8 <HAL_InitTick+0xa0>)
 800088a:	fba2 2303 	umull	r2, r3, r2, r3
 800088e:	0c9b      	lsrs	r3, r3, #18
 8000890:	3b01      	subs	r3, #1
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <HAL_InitTick+0xa4>)
 8000896:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <HAL_InitTick+0xa8>)
 8000898:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <HAL_InitTick+0xa4>)
 800089c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <HAL_InitTick+0xa4>)
 80008a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <HAL_InitTick+0xa4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <HAL_InitTick+0xa4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <HAL_InitTick+0xa4>)
 80008b6:	f001 fcbf 	bl	8002238 <HAL_TIM_Base_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d104      	bne.n	80008ca <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80008c0:	4806      	ldr	r0, [pc, #24]	; (80008dc <HAL_InitTick+0xa4>)
 80008c2:	f001 fd1b 	bl	80022fc <HAL_TIM_Base_Start_IT>
 80008c6:	4603      	mov	r3, r0
 80008c8:	e000      	b.n	80008cc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3730      	adds	r7, #48	; 0x30
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40021000 	.word	0x40021000
 80008d8:	431bde83 	.word	0x431bde83
 80008dc:	20000ffc 	.word	0x20000ffc
 80008e0:	40001000 	.word	0x40001000

080008e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <NMI_Handler+0x4>

080008ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <MemManage_Handler+0x4>

080008f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <UsageFault_Handler+0x4>

08000902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <TIM6_IRQHandler+0x10>)
 8000916:	f001 fd45 	bl	80023a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000ffc 	.word	0x20000ffc

08000924 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	e00a      	b.n	800094c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000936:	f3af 8000 	nop.w
 800093a:	4601      	mov	r1, r0
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	1c5a      	adds	r2, r3, #1
 8000940:	60ba      	str	r2, [r7, #8]
 8000942:	b2ca      	uxtb	r2, r1
 8000944:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	3301      	adds	r3, #1
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	429a      	cmp	r2, r3
 8000952:	dbf0      	blt.n	8000936 <_read+0x12>
	}

return len;
 8000954:	687b      	ldr	r3, [r7, #4]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b086      	sub	sp, #24
 8000962:	af00      	add	r7, sp, #0
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	e009      	b.n	8000984 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	1c5a      	adds	r2, r3, #1
 8000974:	60ba      	str	r2, [r7, #8]
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fe95 	bl	80006a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	3301      	adds	r3, #1
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	429a      	cmp	r2, r3
 800098a:	dbf1      	blt.n	8000970 <_write+0x12>
	}
	return len;
 800098c:	687b      	ldr	r3, [r7, #4]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <_close>:

int _close(int file)
{
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
	return -1;
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009ae:	b480      	push	{r7}
 80009b0:	b083      	sub	sp, #12
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
 80009b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009be:	605a      	str	r2, [r3, #4]
	return 0;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <_isatty>:

int _isatty(int file)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b083      	sub	sp, #12
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
	return 1;
 80009d6:	2301      	movs	r3, #1
}
 80009d8:	4618      	mov	r0, r3
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
	return 0;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
	...

08000a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a08:	4a14      	ldr	r2, [pc, #80]	; (8000a5c <_sbrk+0x5c>)
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <_sbrk+0x60>)
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a14:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <_sbrk+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d102      	bne.n	8000a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <_sbrk+0x64>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <_sbrk+0x68>)
 8000a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <_sbrk+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d207      	bcs.n	8000a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a30:	f004 fca2 	bl	8005378 <__errno>
 8000a34:	4602      	mov	r2, r0
 8000a36:	230c      	movs	r3, #12
 8000a38:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3e:	e009      	b.n	8000a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <_sbrk+0x64>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <_sbrk+0x64>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <_sbrk+0x64>)
 8000a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a52:	68fb      	ldr	r3, [r7, #12]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	2000a000 	.word	0x2000a000
 8000a60:	00000400 	.word	0x00000400
 8000a64:	200002e4 	.word	0x200002e4
 8000a68:	200010d0 	.word	0x200010d0

08000a6c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_USART1_UART_Init+0x58>)
 8000a72:	4a15      	ldr	r2, [pc, #84]	; (8000ac8 <MX_USART1_UART_Init+0x5c>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <MX_USART1_UART_Init+0x58>)
 8000a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_USART1_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_USART1_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_USART1_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_USART1_UART_Init+0x58>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_USART1_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_USART1_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_USART1_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_USART1_UART_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_USART1_UART_Init+0x58>)
 8000ab0:	f001 fe42 	bl	8002738 <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000aba:	f7ff fe91 	bl	80007e0 <Error_Handler>
  }

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20001048 	.word	0x20001048
 8000ac8:	40013800 	.word	0x40013800

08000acc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a18      	ldr	r2, [pc, #96]	; (8000b4c <HAL_UART_MspInit+0x80>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d129      	bne.n	8000b42 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_UART_MspInit+0x84>)
 8000af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af2:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <HAL_UART_MspInit+0x84>)
 8000af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af8:	6613      	str	r3, [r2, #96]	; 0x60
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_UART_MspInit+0x84>)
 8000afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_UART_MspInit+0x84>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	4a11      	ldr	r2, [pc, #68]	; (8000b50 <HAL_UART_MspInit+0x84>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_UART_MspInit+0x84>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b30:	2307      	movs	r3, #7
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3e:	f000 f983 	bl	8000e48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b42:	bf00      	nop
 8000b44:	3728      	adds	r7, #40	; 0x28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40013800 	.word	0x40013800
 8000b50:	40021000 	.word	0x40021000

08000b54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b58:	f000 f826 	bl	8000ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b5e:	e003      	b.n	8000b68 <LoopCopyDataInit>

08000b60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b66:	3104      	adds	r1, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b68:	480a      	ldr	r0, [pc, #40]	; (8000b94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b70:	d3f6      	bcc.n	8000b60 <CopyDataInit>
	ldr	r2, =_sbss
 8000b72:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b74:	e002      	b.n	8000b7c <LoopFillZerobss>

08000b76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b78:	f842 3b04 	str.w	r3, [r2], #4

08000b7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <LoopForever+0x16>)
	cmp	r2, r3
 8000b7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b80:	d3f9      	bcc.n	8000b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b82:	f004 fbff 	bl	8005384 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b86:	f7ff fda1 	bl	80006cc <main>

08000b8a <LoopForever>:

LoopForever:
    b LoopForever
 8000b8a:	e7fe      	b.n	8000b8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b8c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000b90:	08005e6c 	.word	0x08005e6c
	ldr	r0, =_sdata
 8000b94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b98:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000b9c:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000ba0:	200010d0 	.word	0x200010d0

08000ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC1_2_IRQHandler>
	...

08000ba8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bac:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <SystemInit+0x64>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb2:	4a16      	ldr	r2, [pc, #88]	; (8000c0c <SystemInit+0x64>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <SystemInit+0x68>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a13      	ldr	r2, [pc, #76]	; (8000c10 <SystemInit+0x68>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <SystemInit+0x68>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <SystemInit+0x68>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <SystemInit+0x68>)
 8000bd4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000bd8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000bdc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <SystemInit+0x68>)
 8000be0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000be4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <SystemInit+0x68>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a09      	ldr	r2, [pc, #36]	; (8000c10 <SystemInit+0x68>)
 8000bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bf0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <SystemInit+0x68>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <SystemInit+0x64>)
 8000bfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bfe:	609a      	str	r2, [r3, #8]
#endif
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00
 8000c10:	40021000 	.word	0x40021000

08000c14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1e:	2003      	movs	r0, #3
 8000c20:	f000 f8dd 	bl	8000dde <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c24:	2000      	movs	r0, #0
 8000c26:	f7ff fe07 	bl	8000838 <HAL_InitTick>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d002      	beq.n	8000c36 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	71fb      	strb	r3, [r7, #7]
 8000c34:	e001      	b.n	8000c3a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c36:	f7ff fdd7 	bl	80007e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008
 8000c68:	200010c8 	.word	0x200010c8

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	200010c8 	.word	0x200010c8

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db0b      	blt.n	8000d12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 021f 	and.w	r2, r3, #31
 8000d00:	4907      	ldr	r1, [pc, #28]	; (8000d20 <__NVIC_EnableIRQ+0x38>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	2001      	movs	r0, #1
 8000d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000e100 	.word	0xe000e100

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	; (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	; 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ff4c 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e06:	f7ff ff61 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e0a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	68b9      	ldr	r1, [r7, #8]
 8000e10:	6978      	ldr	r0, [r7, #20]
 8000e12:	f7ff ffb1 	bl	8000d78 <NVIC_EncodePriority>
 8000e16:	4602      	mov	r2, r0
 8000e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff80 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e24:	bf00      	nop
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff54 	bl	8000ce8 <__NVIC_EnableIRQ>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e56:	e14e      	b.n	80010f6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	fa01 f303 	lsl.w	r3, r1, r3
 8000e64:	4013      	ands	r3, r2
 8000e66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 8140 	beq.w	80010f0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d00b      	beq.n	8000e90 <HAL_GPIO_Init+0x48>
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d007      	beq.n	8000e90 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e84:	2b11      	cmp	r3, #17
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b12      	cmp	r3, #18
 8000e8e:	d130      	bne.n	8000ef2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	f003 0201 	and.w	r2, r3, #1
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	2203      	movs	r2, #3
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0xea>
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b12      	cmp	r3, #18
 8000f30:	d123      	bne.n	8000f7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	08da      	lsrs	r2, r3, #3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3208      	adds	r2, #8
 8000f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	220f      	movs	r2, #15
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	691a      	ldr	r2, [r3, #16]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	f003 0307 	and.w	r3, r3, #7
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	08da      	lsrs	r2, r3, #3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3208      	adds	r2, #8
 8000f74:	6939      	ldr	r1, [r7, #16]
 8000f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	2203      	movs	r2, #3
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 0203 	and.w	r2, r3, #3
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 809a 	beq.w	80010f0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbc:	4b55      	ldr	r3, [pc, #340]	; (8001114 <HAL_GPIO_Init+0x2cc>)
 8000fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc0:	4a54      	ldr	r2, [pc, #336]	; (8001114 <HAL_GPIO_Init+0x2cc>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6613      	str	r3, [r2, #96]	; 0x60
 8000fc8:	4b52      	ldr	r3, [pc, #328]	; (8001114 <HAL_GPIO_Init+0x2cc>)
 8000fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fd4:	4a50      	ldr	r2, [pc, #320]	; (8001118 <HAL_GPIO_Init+0x2d0>)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	3302      	adds	r3, #2
 8000fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	220f      	movs	r2, #15
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ffe:	d013      	beq.n	8001028 <HAL_GPIO_Init+0x1e0>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a46      	ldr	r2, [pc, #280]	; (800111c <HAL_GPIO_Init+0x2d4>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d00d      	beq.n	8001024 <HAL_GPIO_Init+0x1dc>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a45      	ldr	r2, [pc, #276]	; (8001120 <HAL_GPIO_Init+0x2d8>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d007      	beq.n	8001020 <HAL_GPIO_Init+0x1d8>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a44      	ldr	r2, [pc, #272]	; (8001124 <HAL_GPIO_Init+0x2dc>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d101      	bne.n	800101c <HAL_GPIO_Init+0x1d4>
 8001018:	2303      	movs	r3, #3
 800101a:	e006      	b.n	800102a <HAL_GPIO_Init+0x1e2>
 800101c:	2307      	movs	r3, #7
 800101e:	e004      	b.n	800102a <HAL_GPIO_Init+0x1e2>
 8001020:	2302      	movs	r3, #2
 8001022:	e002      	b.n	800102a <HAL_GPIO_Init+0x1e2>
 8001024:	2301      	movs	r3, #1
 8001026:	e000      	b.n	800102a <HAL_GPIO_Init+0x1e2>
 8001028:	2300      	movs	r3, #0
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	f002 0203 	and.w	r2, r2, #3
 8001030:	0092      	lsls	r2, r2, #2
 8001032:	4093      	lsls	r3, r2
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800103a:	4937      	ldr	r1, [pc, #220]	; (8001118 <HAL_GPIO_Init+0x2d0>)
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	3302      	adds	r3, #2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001048:	4b37      	ldr	r3, [pc, #220]	; (8001128 <HAL_GPIO_Init+0x2e0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	43db      	mvns	r3, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800106c:	4a2e      	ldr	r2, [pc, #184]	; (8001128 <HAL_GPIO_Init+0x2e0>)
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001072:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <HAL_GPIO_Init+0x2e0>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	43db      	mvns	r3, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001096:	4a24      	ldr	r2, [pc, #144]	; (8001128 <HAL_GPIO_Init+0x2e0>)
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800109c:	4b22      	ldr	r3, [pc, #136]	; (8001128 <HAL_GPIO_Init+0x2e0>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010c0:	4a19      	ldr	r2, [pc, #100]	; (8001128 <HAL_GPIO_Init+0x2e0>)
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_GPIO_Init+0x2e0>)
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ea:	4a0f      	ldr	r2, [pc, #60]	; (8001128 <HAL_GPIO_Init+0x2e0>)
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	3301      	adds	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	f47f aea9 	bne.w	8000e58 <HAL_GPIO_Init+0x10>
  }
}
 8001106:	bf00      	nop
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	40010000 	.word	0x40010000
 800111c:	48000400 	.word	0x48000400
 8001120:	48000800 	.word	0x48000800
 8001124:	48000c00 	.word	0x48000c00
 8001128:	40010400 	.word	0x40010400

0800112c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <HAL_PWREx_GetVoltageRange+0x18>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40007000 	.word	0x40007000

08001148 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001156:	d130      	bne.n	80011ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001158:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001164:	d038      	beq.n	80011d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001166:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800116e:	4a1e      	ldr	r2, [pc, #120]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001170:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001174:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2232      	movs	r2, #50	; 0x32
 800117c:	fb02 f303 	mul.w	r3, r2, r3
 8001180:	4a1b      	ldr	r2, [pc, #108]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001182:	fba2 2303 	umull	r2, r3, r2, r3
 8001186:	0c9b      	lsrs	r3, r3, #18
 8001188:	3301      	adds	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800118c:	e002      	b.n	8001194 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	3b01      	subs	r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800119c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011a0:	d102      	bne.n	80011a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1f2      	bne.n	800118e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011b4:	d110      	bne.n	80011d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e00f      	b.n	80011da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011c6:	d007      	beq.n	80011d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011d0:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40007000 	.word	0x40007000
 80011ec:	20000000 	.word	0x20000000
 80011f0:	431bde83 	.word	0x431bde83

080011f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d102      	bne.n	8001208 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	f000 bc56 	b.w	8001ab4 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001208:	4ba1      	ldr	r3, [pc, #644]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 030c 	and.w	r3, r3, #12
 8001210:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001212:	4b9f      	ldr	r3, [pc, #636]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0310 	and.w	r3, r3, #16
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80e6 	beq.w	80013f6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800122a:	6a3b      	ldr	r3, [r7, #32]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d007      	beq.n	8001240 <HAL_RCC_OscConfig+0x4c>
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	2b0c      	cmp	r3, #12
 8001234:	f040 808d 	bne.w	8001352 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	2b01      	cmp	r3, #1
 800123c:	f040 8089 	bne.w	8001352 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001240:	4b93      	ldr	r3, [pc, #588]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <HAL_RCC_OscConfig+0x66>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	f000 bc2d 	b.w	8001ab4 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800125e:	4b8c      	ldr	r3, [pc, #560]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	2b00      	cmp	r3, #0
 8001268:	d004      	beq.n	8001274 <HAL_RCC_OscConfig+0x80>
 800126a:	4b89      	ldr	r3, [pc, #548]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001272:	e005      	b.n	8001280 <HAL_RCC_OscConfig+0x8c>
 8001274:	4b86      	ldr	r3, [pc, #536]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 8001276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800127a:	091b      	lsrs	r3, r3, #4
 800127c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001280:	4293      	cmp	r3, r2
 8001282:	d224      	bcs.n	80012ce <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	4618      	mov	r0, r3
 800128a:	f000 fdef 	bl	8001e6c <RCC_SetFlashLatencyFromMSIRange>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	f000 bc0d 	b.w	8001ab4 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800129a:	4b7d      	ldr	r3, [pc, #500]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a7c      	ldr	r2, [pc, #496]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 80012a0:	f043 0308 	orr.w	r3, r3, #8
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	4b7a      	ldr	r3, [pc, #488]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	4977      	ldr	r1, [pc, #476]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012b8:	4b75      	ldr	r3, [pc, #468]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	4972      	ldr	r1, [pc, #456]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
 80012cc:	e025      	b.n	800131a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ce:	4b70      	ldr	r3, [pc, #448]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a6f      	ldr	r2, [pc, #444]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 80012d4:	f043 0308 	orr.w	r3, r3, #8
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b6d      	ldr	r3, [pc, #436]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	496a      	ldr	r1, [pc, #424]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ec:	4b68      	ldr	r3, [pc, #416]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	4965      	ldr	r1, [pc, #404]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001300:	6a3b      	ldr	r3, [r7, #32]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d109      	bne.n	800131a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130a:	4618      	mov	r0, r3
 800130c:	f000 fdae 	bl	8001e6c <RCC_SetFlashLatencyFromMSIRange>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e3cc      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800131a:	f000 fcb3 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 800131e:	4601      	mov	r1, r0
 8001320:	4b5b      	ldr	r3, [pc, #364]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	091b      	lsrs	r3, r3, #4
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	4a5a      	ldr	r2, [pc, #360]	; (8001494 <HAL_RCC_OscConfig+0x2a0>)
 800132c:	5cd3      	ldrb	r3, [r2, r3]
 800132e:	f003 031f 	and.w	r3, r3, #31
 8001332:	fa21 f303 	lsr.w	r3, r1, r3
 8001336:	4a58      	ldr	r2, [pc, #352]	; (8001498 <HAL_RCC_OscConfig+0x2a4>)
 8001338:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800133a:	4b58      	ldr	r3, [pc, #352]	; (800149c <HAL_RCC_OscConfig+0x2a8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fa7a 	bl	8000838 <HAL_InitTick>
 8001344:	4603      	mov	r3, r0
 8001346:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d052      	beq.n	80013f4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800134e:	7dfb      	ldrb	r3, [r7, #23]
 8001350:	e3b0      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d032      	beq.n	80013c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800135a:	4b4d      	ldr	r3, [pc, #308]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a4c      	ldr	r2, [pc, #304]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001366:	f7ff fc81 	bl	8000c6c <HAL_GetTick>
 800136a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800136e:	f7ff fc7d 	bl	8000c6c <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e399      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001380:	4b43      	ldr	r3, [pc, #268]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800138c:	4b40      	ldr	r3, [pc, #256]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a3f      	ldr	r2, [pc, #252]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 8001392:	f043 0308 	orr.w	r3, r3, #8
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b3d      	ldr	r3, [pc, #244]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	493a      	ldr	r1, [pc, #232]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013aa:	4b39      	ldr	r3, [pc, #228]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	4935      	ldr	r1, [pc, #212]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]
 80013be:	e01a      	b.n	80013f6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013c0:	4b33      	ldr	r3, [pc, #204]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a32      	ldr	r2, [pc, #200]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 80013c6:	f023 0301 	bic.w	r3, r3, #1
 80013ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fc4e 	bl	8000c6c <HAL_GetTick>
 80013d0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013d4:	f7ff fc4a 	bl	8000c6c <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e366      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013e6:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f0      	bne.n	80013d4 <HAL_RCC_OscConfig+0x1e0>
 80013f2:	e000      	b.n	80013f6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d073      	beq.n	80014ea <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	2b08      	cmp	r3, #8
 8001406:	d005      	beq.n	8001414 <HAL_RCC_OscConfig+0x220>
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	2b0c      	cmp	r3, #12
 800140c:	d10e      	bne.n	800142c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	2b03      	cmp	r3, #3
 8001412:	d10b      	bne.n	800142c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001414:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d063      	beq.n	80014e8 <HAL_RCC_OscConfig+0x2f4>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d15f      	bne.n	80014e8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e343      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001434:	d106      	bne.n	8001444 <HAL_RCC_OscConfig+0x250>
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a15      	ldr	r2, [pc, #84]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 800143c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e01d      	b.n	8001480 <HAL_RCC_OscConfig+0x28c>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800144c:	d10c      	bne.n	8001468 <HAL_RCC_OscConfig+0x274>
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 8001454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a0c      	ldr	r2, [pc, #48]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 8001460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e00b      	b.n	8001480 <HAL_RCC_OscConfig+0x28c>
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a08      	ldr	r2, [pc, #32]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 800146e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a05      	ldr	r2, [pc, #20]	; (8001490 <HAL_RCC_OscConfig+0x29c>)
 800147a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d01b      	beq.n	80014c0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001488:	f7ff fbf0 	bl	8000c6c <HAL_GetTick>
 800148c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800148e:	e010      	b.n	80014b2 <HAL_RCC_OscConfig+0x2be>
 8001490:	40021000 	.word	0x40021000
 8001494:	08005db0 	.word	0x08005db0
 8001498:	20000000 	.word	0x20000000
 800149c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff fbe4 	bl	8000c6c <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	; 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e300      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014b2:	4ba0      	ldr	r3, [pc, #640]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x2ac>
 80014be:	e014      	b.n	80014ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff fbd4 	bl	8000c6c <HAL_GetTick>
 80014c4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c8:	f7ff fbd0 	bl	8000c6c <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e2ec      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014da:	4b96      	ldr	r3, [pc, #600]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x2d4>
 80014e6:	e000      	b.n	80014ea <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d060      	beq.n	80015b8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014f6:	6a3b      	ldr	r3, [r7, #32]
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	d005      	beq.n	8001508 <HAL_RCC_OscConfig+0x314>
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	2b0c      	cmp	r3, #12
 8001500:	d119      	bne.n	8001536 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d116      	bne.n	8001536 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001508:	4b8a      	ldr	r3, [pc, #552]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001510:	2b00      	cmp	r3, #0
 8001512:	d005      	beq.n	8001520 <HAL_RCC_OscConfig+0x32c>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e2c9      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001520:	4b84      	ldr	r3, [pc, #528]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	061b      	lsls	r3, r3, #24
 800152e:	4981      	ldr	r1, [pc, #516]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 8001530:	4313      	orrs	r3, r2
 8001532:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001534:	e040      	b.n	80015b8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d023      	beq.n	8001586 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800153e:	4b7d      	ldr	r3, [pc, #500]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a7c      	ldr	r2, [pc, #496]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 8001544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154a:	f7ff fb8f 	bl	8000c6c <HAL_GetTick>
 800154e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001552:	f7ff fb8b 	bl	8000c6c <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e2a7      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001564:	4b73      	ldr	r3, [pc, #460]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0f0      	beq.n	8001552 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001570:	4b70      	ldr	r3, [pc, #448]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	061b      	lsls	r3, r3, #24
 800157e:	496d      	ldr	r1, [pc, #436]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 8001580:	4313      	orrs	r3, r2
 8001582:	604b      	str	r3, [r1, #4]
 8001584:	e018      	b.n	80015b8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001586:	4b6b      	ldr	r3, [pc, #428]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a6a      	ldr	r2, [pc, #424]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 800158c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001592:	f7ff fb6b 	bl	8000c6c <HAL_GetTick>
 8001596:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159a:	f7ff fb67 	bl	8000c6c <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e283      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015ac:	4b61      	ldr	r3, [pc, #388]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1f0      	bne.n	800159a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d07f      	beq.n	80016c4 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d05f      	beq.n	800168c <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80015cc:	4b59      	ldr	r3, [pc, #356]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 80015ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d2:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699a      	ldr	r2, [r3, #24]
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	f003 0310 	and.w	r3, r3, #16
 80015de:	429a      	cmp	r2, r3
 80015e0:	d037      	beq.n	8001652 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d006      	beq.n	80015fa <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e25c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b00      	cmp	r3, #0
 8001602:	d01b      	beq.n	800163c <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8001604:	4b4b      	ldr	r3, [pc, #300]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 8001606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800160a:	4a4a      	ldr	r2, [pc, #296]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 800160c:	f023 0301 	bic.w	r3, r3, #1
 8001610:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001614:	f7ff fb2a 	bl	8000c6c <HAL_GetTick>
 8001618:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161c:	f7ff fb26 	bl	8000c6c <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b11      	cmp	r3, #17
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e242      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800162e:	4b41      	ldr	r3, [pc, #260]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 8001630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1ef      	bne.n	800161c <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800163c:	4b3d      	ldr	r3, [pc, #244]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 800163e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001642:	f023 0210 	bic.w	r2, r3, #16
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	493a      	ldr	r1, [pc, #232]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 800164c:	4313      	orrs	r3, r2
 800164e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001652:	4b38      	ldr	r3, [pc, #224]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 8001654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001658:	4a36      	ldr	r2, [pc, #216]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001662:	f7ff fb03 	bl	8000c6c <HAL_GetTick>
 8001666:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166a:	f7ff faff 	bl	8000c6c <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b11      	cmp	r3, #17
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e21b      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800167c:	4b2d      	ldr	r3, [pc, #180]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 800167e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0ef      	beq.n	800166a <HAL_RCC_OscConfig+0x476>
 800168a:	e01b      	b.n	80016c4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800168c:	4b29      	ldr	r3, [pc, #164]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 800168e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001692:	4a28      	ldr	r2, [pc, #160]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169c:	f7ff fae6 	bl	8000c6c <HAL_GetTick>
 80016a0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a4:	f7ff fae2 	bl	8000c6c <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b11      	cmp	r3, #17
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e1fe      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016b6:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 80016b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1ef      	bne.n	80016a4 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 80c1 	beq.w	8001854 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016d8:	4b16      	ldr	r3, [pc, #88]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 80016da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d10e      	bne.n	8001702 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 80016e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e8:	4a12      	ldr	r2, [pc, #72]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 80016ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ee:	6593      	str	r3, [r2, #88]	; 0x58
 80016f0:	4b10      	ldr	r3, [pc, #64]	; (8001734 <HAL_RCC_OscConfig+0x540>)
 80016f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016fc:	2301      	movs	r3, #1
 80016fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001702:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <HAL_RCC_OscConfig+0x544>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170a:	2b00      	cmp	r3, #0
 800170c:	d11c      	bne.n	8001748 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <HAL_RCC_OscConfig+0x544>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a09      	ldr	r2, [pc, #36]	; (8001738 <HAL_RCC_OscConfig+0x544>)
 8001714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800171a:	f7ff faa7 	bl	8000c6c <HAL_GetTick>
 800171e:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001720:	e00c      	b.n	800173c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001722:	f7ff faa3 	bl	8000c6c <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d905      	bls.n	800173c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e1bf      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
 8001734:	40021000 	.word	0x40021000
 8001738:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800173c:	4bb1      	ldr	r3, [pc, #708]	; (8001a04 <HAL_RCC_OscConfig+0x810>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0ec      	beq.n	8001722 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b00      	cmp	r3, #0
 8001752:	d02c      	beq.n	80017ae <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001754:	4bac      	ldr	r3, [pc, #688]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 8001756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800175a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001766:	49a8      	ldr	r1, [pc, #672]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 8001768:	4313      	orrs	r3, r2
 800176a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	2b00      	cmp	r3, #0
 8001778:	d010      	beq.n	800179c <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800177a:	4ba3      	ldr	r3, [pc, #652]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 800177c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001780:	4aa1      	ldr	r2, [pc, #644]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 8001782:	f043 0304 	orr.w	r3, r3, #4
 8001786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800178a:	4b9f      	ldr	r3, [pc, #636]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 800178c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001790:	4a9d      	ldr	r2, [pc, #628]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800179a:	e018      	b.n	80017ce <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800179c:	4b9a      	ldr	r3, [pc, #616]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 800179e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a2:	4a99      	ldr	r2, [pc, #612]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017ac:	e00f      	b.n	80017ce <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017ae:	4b96      	ldr	r3, [pc, #600]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 80017b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b4:	4a94      	ldr	r2, [pc, #592]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 80017b6:	f023 0301 	bic.w	r3, r3, #1
 80017ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017be:	4b92      	ldr	r3, [pc, #584]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 80017c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c4:	4a90      	ldr	r2, [pc, #576]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 80017c6:	f023 0304 	bic.w	r3, r3, #4
 80017ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d016      	beq.n	8001804 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d6:	f7ff fa49 	bl	8000c6c <HAL_GetTick>
 80017da:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017dc:	e00a      	b.n	80017f4 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017de:	f7ff fa45 	bl	8000c6c <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e15f      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017f4:	4b84      	ldr	r3, [pc, #528]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 80017f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0ed      	beq.n	80017de <HAL_RCC_OscConfig+0x5ea>
 8001802:	e01d      	b.n	8001840 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001804:	f7ff fa32 	bl	8000c6c <HAL_GetTick>
 8001808:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800180a:	e00a      	b.n	8001822 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180c:	f7ff fa2e 	bl	8000c6c <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	; 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e148      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001822:	4b79      	ldr	r3, [pc, #484]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 8001824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1ed      	bne.n	800180c <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001830:	4b75      	ldr	r3, [pc, #468]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 8001832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001836:	4a74      	ldr	r2, [pc, #464]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 8001838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800183c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001844:	2b01      	cmp	r3, #1
 8001846:	d105      	bne.n	8001854 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001848:	4b6f      	ldr	r3, [pc, #444]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 800184a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184c:	4a6e      	ldr	r2, [pc, #440]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 800184e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001852:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0320 	and.w	r3, r3, #32
 800185c:	2b00      	cmp	r3, #0
 800185e:	d03c      	beq.n	80018da <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001864:	2b00      	cmp	r3, #0
 8001866:	d01c      	beq.n	80018a2 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001868:	4b67      	ldr	r3, [pc, #412]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 800186a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800186e:	4a66      	ldr	r2, [pc, #408]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff f9f8 	bl	8000c6c <HAL_GetTick>
 800187c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001880:	f7ff f9f4 	bl	8000c6c <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e110      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001892:	4b5d      	ldr	r3, [pc, #372]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 8001894:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0ef      	beq.n	8001880 <HAL_RCC_OscConfig+0x68c>
 80018a0:	e01b      	b.n	80018da <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018a2:	4b59      	ldr	r3, [pc, #356]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 80018a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018a8:	4a57      	ldr	r2, [pc, #348]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 80018aa:	f023 0301 	bic.w	r3, r3, #1
 80018ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b2:	f7ff f9db 	bl	8000c6c <HAL_GetTick>
 80018b6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018ba:	f7ff f9d7 	bl	8000c6c <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e0f3      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018cc:	4b4e      	ldr	r3, [pc, #312]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 80018ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1ef      	bne.n	80018ba <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 80e7 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	f040 80b7 	bne.w	8001a5c <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018ee:	4b46      	ldr	r3, [pc, #280]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f003 0203 	and.w	r2, r3, #3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	429a      	cmp	r2, r3
 8001900:	d124      	bne.n	800194c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190c:	3b01      	subs	r3, #1
 800190e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001910:	429a      	cmp	r2, r3
 8001912:	d11b      	bne.n	800194c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001920:	429a      	cmp	r2, r3
 8001922:	d113      	bne.n	800194c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192e:	085b      	lsrs	r3, r3, #1
 8001930:	3b01      	subs	r3, #1
 8001932:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d109      	bne.n	800194c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	085b      	lsrs	r3, r3, #1
 8001944:	3b01      	subs	r3, #1
 8001946:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d061      	beq.n	8001a10 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	2b0c      	cmp	r3, #12
 8001950:	d056      	beq.n	8001a00 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001952:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a2c      	ldr	r2, [pc, #176]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 8001958:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800195c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800195e:	f7ff f985 	bl	8000c6c <HAL_GetTick>
 8001962:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001966:	f7ff f981 	bl	8000c6c <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e09d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001978:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f0      	bne.n	8001966 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001984:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <HAL_RCC_OscConfig+0x818>)
 800198a:	4013      	ands	r3, r2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001994:	3a01      	subs	r2, #1
 8001996:	0112      	lsls	r2, r2, #4
 8001998:	4311      	orrs	r1, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800199e:	0212      	lsls	r2, r2, #8
 80019a0:	4311      	orrs	r1, r2
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019a6:	0852      	lsrs	r2, r2, #1
 80019a8:	3a01      	subs	r2, #1
 80019aa:	0552      	lsls	r2, r2, #21
 80019ac:	4311      	orrs	r1, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019b2:	0852      	lsrs	r2, r2, #1
 80019b4:	3a01      	subs	r2, #1
 80019b6:	0652      	lsls	r2, r2, #25
 80019b8:	430a      	orrs	r2, r1
 80019ba:	4913      	ldr	r1, [pc, #76]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a10      	ldr	r2, [pc, #64]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 80019c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019cc:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4a0d      	ldr	r2, [pc, #52]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 80019d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019d8:	f7ff f948 	bl	8000c6c <HAL_GetTick>
 80019dc:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e0:	f7ff f944 	bl	8000c6c <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e060      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f2:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_RCC_OscConfig+0x814>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019fe:	e058      	b.n	8001ab2 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e057      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
 8001a04:	40007000 	.word	0x40007000
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a10:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <HAL_RCC_OscConfig+0x8c8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d14a      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a1c:	4b27      	ldr	r3, [pc, #156]	; (8001abc <HAL_RCC_OscConfig+0x8c8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a26      	ldr	r2, [pc, #152]	; (8001abc <HAL_RCC_OscConfig+0x8c8>)
 8001a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a28:	4b24      	ldr	r3, [pc, #144]	; (8001abc <HAL_RCC_OscConfig+0x8c8>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	4a23      	ldr	r2, [pc, #140]	; (8001abc <HAL_RCC_OscConfig+0x8c8>)
 8001a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a34:	f7ff f91a 	bl	8000c6c <HAL_GetTick>
 8001a38:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3c:	f7ff f916 	bl	8000c6c <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e032      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <HAL_RCC_OscConfig+0x8c8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x848>
 8001a5a:	e02a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	2b0c      	cmp	r3, #12
 8001a60:	d025      	beq.n	8001aae <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <HAL_RCC_OscConfig+0x8c8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a15      	ldr	r2, [pc, #84]	; (8001abc <HAL_RCC_OscConfig+0x8c8>)
 8001a68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a6c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <HAL_RCC_OscConfig+0x8c8>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	4a12      	ldr	r2, [pc, #72]	; (8001abc <HAL_RCC_OscConfig+0x8c8>)
 8001a74:	f023 0303 	bic.w	r3, r3, #3
 8001a78:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <HAL_RCC_OscConfig+0x8c8>)
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	4a0f      	ldr	r2, [pc, #60]	; (8001abc <HAL_RCC_OscConfig+0x8c8>)
 8001a80:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a84:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a86:	f7ff f8f1 	bl	8000c6c <HAL_GetTick>
 8001a8a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7ff f8ed 	bl	8000c6c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e009      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_RCC_OscConfig+0x8c8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x89a>
 8001aac:	e001      	b.n	8001ab2 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3728      	adds	r7, #40	; 0x28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000

08001ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0c8      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad4:	4b66      	ldr	r3, [pc, #408]	; (8001c70 <HAL_RCC_ClockConfig+0x1b0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d910      	bls.n	8001b04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae2:	4b63      	ldr	r3, [pc, #396]	; (8001c70 <HAL_RCC_ClockConfig+0x1b0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 0207 	bic.w	r2, r3, #7
 8001aea:	4961      	ldr	r1, [pc, #388]	; (8001c70 <HAL_RCC_ClockConfig+0x1b0>)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b5f      	ldr	r3, [pc, #380]	; (8001c70 <HAL_RCC_ClockConfig+0x1b0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0b0      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d04c      	beq.n	8001baa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d107      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b18:	4b56      	ldr	r3, [pc, #344]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d121      	bne.n	8001b68 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e09e      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d107      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b30:	4b50      	ldr	r3, [pc, #320]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d115      	bne.n	8001b68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e092      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d107      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b48:	4b4a      	ldr	r3, [pc, #296]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d109      	bne.n	8001b68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e086      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b58:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e07e      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b68:	4b42      	ldr	r3, [pc, #264]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f023 0203 	bic.w	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	493f      	ldr	r1, [pc, #252]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b7a:	f7ff f877 	bl	8000c6c <HAL_GetTick>
 8001b7e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b80:	e00a      	b.n	8001b98 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b82:	f7ff f873 	bl	8000c6c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e066      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b98:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 020c 	and.w	r2, r3, #12
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d1eb      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d008      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb6:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	492c      	ldr	r1, [pc, #176]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <HAL_RCC_ClockConfig+0x1b0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d210      	bcs.n	8001bf8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <HAL_RCC_ClockConfig+0x1b0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 0207 	bic.w	r2, r3, #7
 8001bde:	4924      	ldr	r1, [pc, #144]	; (8001c70 <HAL_RCC_ClockConfig+0x1b0>)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <HAL_RCC_ClockConfig+0x1b0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e036      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c04:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	4918      	ldr	r1, [pc, #96]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d009      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c22:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4910      	ldr	r1, [pc, #64]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c36:	f000 f825 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8001c3a:	4601      	mov	r1, r0
 8001c3c:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	091b      	lsrs	r3, r3, #4
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	4a0c      	ldr	r2, [pc, #48]	; (8001c78 <HAL_RCC_ClockConfig+0x1b8>)
 8001c48:	5cd3      	ldrb	r3, [r2, r3]
 8001c4a:	f003 031f 	and.w	r3, r3, #31
 8001c4e:	fa21 f303 	lsr.w	r3, r1, r3
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fdec 	bl	8000838 <HAL_InitTick>
 8001c60:	4603      	mov	r3, r0
 8001c62:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c64:	7afb      	ldrb	r3, [r7, #11]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40022000 	.word	0x40022000
 8001c74:	40021000 	.word	0x40021000
 8001c78:	08005db0 	.word	0x08005db0
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000004 	.word	0x20000004

08001c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c92:	4b3d      	ldr	r3, [pc, #244]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
 8001c9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c9c:	4b3a      	ldr	r3, [pc, #232]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	2b0c      	cmp	r3, #12
 8001cb0:	d121      	bne.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d11e      	bne.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cb8:	4b33      	ldr	r3, [pc, #204]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d107      	bne.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cc4:	4b30      	ldr	r3, [pc, #192]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cca:	0a1b      	lsrs	r3, r3, #8
 8001ccc:	f003 030f 	and.w	r3, r3, #15
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	e005      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cd4:	4b2c      	ldr	r3, [pc, #176]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ce0:	4a2a      	ldr	r2, [pc, #168]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10d      	bne.n	8001d0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cf4:	e00a      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d102      	bne.n	8001d02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cfc:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cfe:	61bb      	str	r3, [r7, #24]
 8001d00:	e004      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d101      	bne.n	8001d0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d08:	4b22      	ldr	r3, [pc, #136]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	2b0c      	cmp	r3, #12
 8001d10:	d133      	bne.n	8001d7a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d12:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d002      	beq.n	8001d28 <HAL_RCC_GetSysClockFreq+0xa4>
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d003      	beq.n	8001d2e <HAL_RCC_GetSysClockFreq+0xaa>
 8001d26:	e005      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d28:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d2a:	617b      	str	r3, [r7, #20]
      break;
 8001d2c:	e005      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d2e:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d30:	617b      	str	r3, [r7, #20]
      break;
 8001d32:	e002      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	617b      	str	r3, [r7, #20]
      break;
 8001d38:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d3a:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	091b      	lsrs	r3, r3, #4
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	3301      	adds	r3, #1
 8001d46:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	fb02 f203 	mul.w	r2, r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	0e5b      	lsrs	r3, r3, #25
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d78:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d7a:	69bb      	ldr	r3, [r7, #24]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3724      	adds	r7, #36	; 0x24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	08005dc8 	.word	0x08005dc8
 8001d90:	00f42400 	.word	0x00f42400
 8001d94:	007a1200 	.word	0x007a1200

08001d98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <HAL_RCC_GetHCLKFreq+0x14>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000000 	.word	0x20000000

08001db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001db4:	f7ff fff0 	bl	8001d98 <HAL_RCC_GetHCLKFreq>
 8001db8:	4601      	mov	r1, r0
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	4a04      	ldr	r2, [pc, #16]	; (8001dd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dc6:	5cd3      	ldrb	r3, [r2, r3]
 8001dc8:	f003 031f 	and.w	r3, r3, #31
 8001dcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	08005dc0 	.word	0x08005dc0

08001ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001de0:	f7ff ffda 	bl	8001d98 <HAL_RCC_GetHCLKFreq>
 8001de4:	4601      	mov	r1, r0
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	0adb      	lsrs	r3, r3, #11
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	4a04      	ldr	r2, [pc, #16]	; (8001e04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001df2:	5cd3      	ldrb	r3, [r2, r3]
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40021000 	.word	0x40021000
 8001e04:	08005dc0 	.word	0x08005dc0

08001e08 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	220f      	movs	r2, #15
 8001e16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_RCC_GetClockConfig+0x5c>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 0203 	and.w	r2, r3, #3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <HAL_RCC_GetClockConfig+0x5c>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <HAL_RCC_GetClockConfig+0x5c>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e3c:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <HAL_RCC_GetClockConfig+0x5c>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	08db      	lsrs	r3, r3, #3
 8001e42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <HAL_RCC_GetClockConfig+0x60>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0207 	and.w	r2, r3, #7
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	601a      	str	r2, [r3, #0]
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40022000 	.word	0x40022000

08001e6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e78:	4b2a      	ldr	r3, [pc, #168]	; (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e84:	f7ff f952 	bl	800112c <HAL_PWREx_GetVoltageRange>
 8001e88:	6178      	str	r0, [r7, #20]
 8001e8a:	e014      	b.n	8001eb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e8c:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e90:	4a24      	ldr	r2, [pc, #144]	; (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e96:	6593      	str	r3, [r2, #88]	; 0x58
 8001e98:	4b22      	ldr	r3, [pc, #136]	; (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ea4:	f7ff f942 	bl	800112c <HAL_PWREx_GetVoltageRange>
 8001ea8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	4a1d      	ldr	r2, [pc, #116]	; (8001f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ebc:	d10b      	bne.n	8001ed6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b80      	cmp	r3, #128	; 0x80
 8001ec2:	d919      	bls.n	8001ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2ba0      	cmp	r3, #160	; 0xa0
 8001ec8:	d902      	bls.n	8001ed0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eca:	2302      	movs	r3, #2
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	e013      	b.n	8001ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	e010      	b.n	8001ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b80      	cmp	r3, #128	; 0x80
 8001eda:	d902      	bls.n	8001ee2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001edc:	2303      	movs	r3, #3
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	e00a      	b.n	8001ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b80      	cmp	r3, #128	; 0x80
 8001ee6:	d102      	bne.n	8001eee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ee8:	2302      	movs	r3, #2
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	e004      	b.n	8001ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b70      	cmp	r3, #112	; 0x70
 8001ef2:	d101      	bne.n	8001ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f023 0207 	bic.w	r2, r3, #7
 8001f00:	4909      	ldr	r1, [pc, #36]	; (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f08:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d001      	beq.n	8001f1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40022000 	.word	0x40022000

08001f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f34:	2300      	movs	r3, #0
 8001f36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f38:	2300      	movs	r3, #0
 8001f3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 809e 	beq.w	8002086 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f4e:	4b46      	ldr	r3, [pc, #280]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00d      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f64:	4b40      	ldr	r3, [pc, #256]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	4a3f      	ldr	r2, [pc, #252]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f70:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f80:	4b3a      	ldr	r3, [pc, #232]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a39      	ldr	r2, [pc, #228]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f8c:	f7fe fe6e 	bl	8000c6c <HAL_GetTick>
 8001f90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f92:	e009      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f94:	f7fe fe6a 	bl	8000c6c <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d902      	bls.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	74fb      	strb	r3, [r7, #19]
        break;
 8001fa6:	e005      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fa8:	4b30      	ldr	r3, [pc, #192]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0ef      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8001fb4:	7cfb      	ldrb	r3, [r7, #19]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d15a      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fba:	4b2b      	ldr	r3, [pc, #172]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fc4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d01e      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d019      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fd6:	4b24      	ldr	r3, [pc, #144]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fe0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fe2:	4b21      	ldr	r3, [pc, #132]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe8:	4a1f      	ldr	r2, [pc, #124]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff8:	4a1b      	ldr	r2, [pc, #108]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002002:	4a19      	ldr	r2, [pc, #100]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d016      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002014:	f7fe fe2a 	bl	8000c6c <HAL_GetTick>
 8002018:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800201a:	e00b      	b.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201c:	f7fe fe26 	bl	8000c6c <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	f241 3288 	movw	r2, #5000	; 0x1388
 800202a:	4293      	cmp	r3, r2
 800202c:	d902      	bls.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	74fb      	strb	r3, [r7, #19]
            break;
 8002032:	e006      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0ec      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002042:	7cfb      	ldrb	r3, [r7, #19]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10b      	bne.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002048:	4b07      	ldr	r3, [pc, #28]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4904      	ldr	r1, [pc, #16]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800205e:	e009      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	74bb      	strb	r3, [r7, #18]
 8002064:	e006      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002070:	7cfb      	ldrb	r3, [r7, #19]
 8002072:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002074:	7c7b      	ldrb	r3, [r7, #17]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d105      	bne.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800207a:	4b6e      	ldr	r3, [pc, #440]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	4a6d      	ldr	r2, [pc, #436]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002084:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00a      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002092:	4b68      	ldr	r3, [pc, #416]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002098:	f023 0203 	bic.w	r2, r3, #3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4964      	ldr	r1, [pc, #400]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00a      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020b4:	4b5f      	ldr	r3, [pc, #380]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ba:	f023 020c 	bic.w	r2, r3, #12
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	495c      	ldr	r1, [pc, #368]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00a      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020d6:	4b57      	ldr	r3, [pc, #348]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4953      	ldr	r1, [pc, #332]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0320 	and.w	r3, r3, #32
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00a      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020f8:	4b4e      	ldr	r3, [pc, #312]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	494b      	ldr	r1, [pc, #300]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800211a:	4b46      	ldr	r3, [pc, #280]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800211c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002120:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	4942      	ldr	r1, [pc, #264]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800212a:	4313      	orrs	r3, r2
 800212c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00a      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800213c:	4b3d      	ldr	r3, [pc, #244]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002142:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	493a      	ldr	r1, [pc, #232]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00a      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800215e:	4b35      	ldr	r3, [pc, #212]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002164:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	4931      	ldr	r1, [pc, #196]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800216e:	4313      	orrs	r3, r2
 8002170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00a      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002180:	4b2c      	ldr	r3, [pc, #176]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002186:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	4929      	ldr	r1, [pc, #164]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002190:	4313      	orrs	r3, r2
 8002192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021a2:	4b24      	ldr	r3, [pc, #144]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	4920      	ldr	r1, [pc, #128]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d015      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021c4:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d2:	4918      	ldr	r1, [pc, #96]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021e2:	d105      	bne.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	4a12      	ldr	r2, [pc, #72]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d015      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021fc:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002202:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220a:	490a      	ldr	r1, [pc, #40]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800220c:	4313      	orrs	r3, r2
 800220e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800221a:	d105      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4a04      	ldr	r2, [pc, #16]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002222:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002226:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002228:	7cbb      	ldrb	r3, [r7, #18]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000

08002238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e049      	b.n	80022de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f841 	bl	80022e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3304      	adds	r3, #4
 8002274:	4619      	mov	r1, r3
 8002276:	4610      	mov	r0, r2
 8002278:	f000 f9dc 	bl	8002634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b01      	cmp	r3, #1
 800230e:	d001      	beq.n	8002314 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e03b      	b.n	800238c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2202      	movs	r2, #2
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0201 	orr.w	r2, r2, #1
 800232a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a19      	ldr	r2, [pc, #100]	; (8002398 <HAL_TIM_Base_Start_IT+0x9c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d009      	beq.n	800234a <HAL_TIM_Base_Start_IT+0x4e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800233e:	d004      	beq.n	800234a <HAL_TIM_Base_Start_IT+0x4e>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a15      	ldr	r2, [pc, #84]	; (800239c <HAL_TIM_Base_Start_IT+0xa0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d115      	bne.n	8002376 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <HAL_TIM_Base_Start_IT+0xa4>)
 8002352:	4013      	ands	r3, r2
 8002354:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b06      	cmp	r3, #6
 800235a:	d015      	beq.n	8002388 <HAL_TIM_Base_Start_IT+0x8c>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002362:	d011      	beq.n	8002388 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002374:	e008      	b.n	8002388 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0201 	orr.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	e000      	b.n	800238a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002388:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	40012c00 	.word	0x40012c00
 800239c:	40014000 	.word	0x40014000
 80023a0:	00010007 	.word	0x00010007

080023a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d122      	bne.n	8002400 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d11b      	bne.n	8002400 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f06f 0202 	mvn.w	r2, #2
 80023d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f905 	bl	80025f6 <HAL_TIM_IC_CaptureCallback>
 80023ec:	e005      	b.n	80023fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f8f7 	bl	80025e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f908 	bl	800260a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	2b04      	cmp	r3, #4
 800240c:	d122      	bne.n	8002454 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b04      	cmp	r3, #4
 800241a:	d11b      	bne.n	8002454 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f06f 0204 	mvn.w	r2, #4
 8002424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2202      	movs	r2, #2
 800242a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f8db 	bl	80025f6 <HAL_TIM_IC_CaptureCallback>
 8002440:	e005      	b.n	800244e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f8cd 	bl	80025e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f8de 	bl	800260a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b08      	cmp	r3, #8
 8002460:	d122      	bne.n	80024a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b08      	cmp	r3, #8
 800246e:	d11b      	bne.n	80024a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f06f 0208 	mvn.w	r2, #8
 8002478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2204      	movs	r2, #4
 800247e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f8b1 	bl	80025f6 <HAL_TIM_IC_CaptureCallback>
 8002494:	e005      	b.n	80024a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f8a3 	bl	80025e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f8b4 	bl	800260a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	2b10      	cmp	r3, #16
 80024b4:	d122      	bne.n	80024fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f003 0310 	and.w	r3, r3, #16
 80024c0:	2b10      	cmp	r3, #16
 80024c2:	d11b      	bne.n	80024fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f06f 0210 	mvn.w	r2, #16
 80024cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2208      	movs	r2, #8
 80024d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f887 	bl	80025f6 <HAL_TIM_IC_CaptureCallback>
 80024e8:	e005      	b.n	80024f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f879 	bl	80025e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f88a 	bl	800260a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b01      	cmp	r3, #1
 8002508:	d10e      	bne.n	8002528 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b01      	cmp	r3, #1
 8002516:	d107      	bne.n	8002528 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0201 	mvn.w	r2, #1
 8002520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7fe f94a 	bl	80007bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002532:	2b80      	cmp	r3, #128	; 0x80
 8002534:	d10e      	bne.n	8002554 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002540:	2b80      	cmp	r3, #128	; 0x80
 8002542:	d107      	bne.n	8002554 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800254c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f8de 	bl	8002710 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002562:	d10e      	bne.n	8002582 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256e:	2b80      	cmp	r3, #128	; 0x80
 8002570:	d107      	bne.n	8002582 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800257a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f8d1 	bl	8002724 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258c:	2b40      	cmp	r3, #64	; 0x40
 800258e:	d10e      	bne.n	80025ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259a:	2b40      	cmp	r3, #64	; 0x40
 800259c:	d107      	bne.n	80025ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f838 	bl	800261e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	f003 0320 	and.w	r3, r3, #32
 80025b8:	2b20      	cmp	r3, #32
 80025ba:	d10e      	bne.n	80025da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f003 0320 	and.w	r3, r3, #32
 80025c6:	2b20      	cmp	r3, #32
 80025c8:	d107      	bne.n	80025da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f06f 0220 	mvn.w	r2, #32
 80025d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f891 	bl	80026fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a2a      	ldr	r2, [pc, #168]	; (80026f0 <TIM_Base_SetConfig+0xbc>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d003      	beq.n	8002654 <TIM_Base_SetConfig+0x20>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002652:	d108      	bne.n	8002666 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a21      	ldr	r2, [pc, #132]	; (80026f0 <TIM_Base_SetConfig+0xbc>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d00b      	beq.n	8002686 <TIM_Base_SetConfig+0x52>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002674:	d007      	beq.n	8002686 <TIM_Base_SetConfig+0x52>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a1e      	ldr	r2, [pc, #120]	; (80026f4 <TIM_Base_SetConfig+0xc0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d003      	beq.n	8002686 <TIM_Base_SetConfig+0x52>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a1d      	ldr	r2, [pc, #116]	; (80026f8 <TIM_Base_SetConfig+0xc4>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d108      	bne.n	8002698 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800268c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	4313      	orrs	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a0c      	ldr	r2, [pc, #48]	; (80026f0 <TIM_Base_SetConfig+0xbc>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d007      	beq.n	80026d4 <TIM_Base_SetConfig+0xa0>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a0b      	ldr	r2, [pc, #44]	; (80026f4 <TIM_Base_SetConfig+0xc0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d003      	beq.n	80026d4 <TIM_Base_SetConfig+0xa0>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <TIM_Base_SetConfig+0xc4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d103      	bne.n	80026dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	615a      	str	r2, [r3, #20]
}
 80026e2:	bf00      	nop
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40012c00 	.word	0x40012c00
 80026f4:	40014000 	.word	0x40014000
 80026f8:	40014400 	.word	0x40014400

080026fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e040      	b.n	80027cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800274e:	2b00      	cmp	r3, #0
 8002750:	d106      	bne.n	8002760 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7fe f9b6 	bl	8000acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2224      	movs	r2, #36	; 0x24
 8002764:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0201 	bic.w	r2, r2, #1
 8002774:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f8c0 	bl	80028fc <UART_SetConfig>
 800277c:	4603      	mov	r3, r0
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e022      	b.n	80027cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 faea 	bl	8002d68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 fb71 	bl	8002eac <UART_CheckIdleState>
 80027ca:	4603      	mov	r3, r0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	; 0x28
 80027d8:	af02      	add	r7, sp, #8
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	603b      	str	r3, [r7, #0]
 80027e0:	4613      	mov	r3, r2
 80027e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e8:	2b20      	cmp	r3, #32
 80027ea:	f040 8081 	bne.w	80028f0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d002      	beq.n	80027fa <HAL_UART_Transmit+0x26>
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e079      	b.n	80028f2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_UART_Transmit+0x38>
 8002808:	2302      	movs	r3, #2
 800280a:	e072      	b.n	80028f2 <HAL_UART_Transmit+0x11e>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2221      	movs	r2, #33	; 0x21
 800281e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002820:	f7fe fa24 	bl	8000c6c <HAL_GetTick>
 8002824:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	88fa      	ldrh	r2, [r7, #6]
 800282a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	88fa      	ldrh	r2, [r7, #6]
 8002832:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283e:	d108      	bne.n	8002852 <HAL_UART_Transmit+0x7e>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d104      	bne.n	8002852 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002848:	2300      	movs	r3, #0
 800284a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	61bb      	str	r3, [r7, #24]
 8002850:	e003      	b.n	800285a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002856:	2300      	movs	r3, #0
 8002858:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002862:	e02d      	b.n	80028c0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2200      	movs	r2, #0
 800286c:	2180      	movs	r1, #128	; 0x80
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 fb61 	bl	8002f36 <UART_WaitOnFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e039      	b.n	80028f2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10b      	bne.n	800289c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	881a      	ldrh	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002890:	b292      	uxth	r2, r2
 8002892:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	3302      	adds	r3, #2
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	e008      	b.n	80028ae <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	781a      	ldrb	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	b292      	uxth	r2, r2
 80028a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	3301      	adds	r3, #1
 80028ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1cb      	bne.n	8002864 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2200      	movs	r2, #0
 80028d4:	2140      	movs	r1, #64	; 0x40
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 fb2d 	bl	8002f36 <UART_WaitOnFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e005      	b.n	80028f2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2220      	movs	r2, #32
 80028ea:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	e000      	b.n	80028f2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80028f0:	2302      	movs	r3, #2
  }
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3720      	adds	r7, #32
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028fc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002900:	b088      	sub	sp, #32
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	4313      	orrs	r3, r2
 8002920:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4baa      	ldr	r3, [pc, #680]	; (8002bd4 <UART_SetConfig+0x2d8>)
 800292a:	4013      	ands	r3, r2
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	69f9      	ldr	r1, [r7, #28]
 8002932:	430b      	orrs	r3, r1
 8002934:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4aa0      	ldr	r2, [pc, #640]	; (8002bd8 <UART_SetConfig+0x2dc>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d004      	beq.n	8002966 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	69fa      	ldr	r2, [r7, #28]
 8002962:	4313      	orrs	r3, r2
 8002964:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	430a      	orrs	r2, r1
 8002978:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a97      	ldr	r2, [pc, #604]	; (8002bdc <UART_SetConfig+0x2e0>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d121      	bne.n	80029c8 <UART_SetConfig+0xcc>
 8002984:	4b96      	ldr	r3, [pc, #600]	; (8002be0 <UART_SetConfig+0x2e4>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b03      	cmp	r3, #3
 8002990:	d816      	bhi.n	80029c0 <UART_SetConfig+0xc4>
 8002992:	a201      	add	r2, pc, #4	; (adr r2, 8002998 <UART_SetConfig+0x9c>)
 8002994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002998:	080029a9 	.word	0x080029a9
 800299c:	080029b5 	.word	0x080029b5
 80029a0:	080029af 	.word	0x080029af
 80029a4:	080029bb 	.word	0x080029bb
 80029a8:	2301      	movs	r3, #1
 80029aa:	76fb      	strb	r3, [r7, #27]
 80029ac:	e098      	b.n	8002ae0 <UART_SetConfig+0x1e4>
 80029ae:	2302      	movs	r3, #2
 80029b0:	76fb      	strb	r3, [r7, #27]
 80029b2:	e095      	b.n	8002ae0 <UART_SetConfig+0x1e4>
 80029b4:	2304      	movs	r3, #4
 80029b6:	76fb      	strb	r3, [r7, #27]
 80029b8:	e092      	b.n	8002ae0 <UART_SetConfig+0x1e4>
 80029ba:	2308      	movs	r3, #8
 80029bc:	76fb      	strb	r3, [r7, #27]
 80029be:	e08f      	b.n	8002ae0 <UART_SetConfig+0x1e4>
 80029c0:	2310      	movs	r3, #16
 80029c2:	76fb      	strb	r3, [r7, #27]
 80029c4:	bf00      	nop
 80029c6:	e08b      	b.n	8002ae0 <UART_SetConfig+0x1e4>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a85      	ldr	r2, [pc, #532]	; (8002be4 <UART_SetConfig+0x2e8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d134      	bne.n	8002a3c <UART_SetConfig+0x140>
 80029d2:	4b83      	ldr	r3, [pc, #524]	; (8002be0 <UART_SetConfig+0x2e4>)
 80029d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d8:	f003 030c 	and.w	r3, r3, #12
 80029dc:	2b0c      	cmp	r3, #12
 80029de:	d829      	bhi.n	8002a34 <UART_SetConfig+0x138>
 80029e0:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <UART_SetConfig+0xec>)
 80029e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e6:	bf00      	nop
 80029e8:	08002a1d 	.word	0x08002a1d
 80029ec:	08002a35 	.word	0x08002a35
 80029f0:	08002a35 	.word	0x08002a35
 80029f4:	08002a35 	.word	0x08002a35
 80029f8:	08002a29 	.word	0x08002a29
 80029fc:	08002a35 	.word	0x08002a35
 8002a00:	08002a35 	.word	0x08002a35
 8002a04:	08002a35 	.word	0x08002a35
 8002a08:	08002a23 	.word	0x08002a23
 8002a0c:	08002a35 	.word	0x08002a35
 8002a10:	08002a35 	.word	0x08002a35
 8002a14:	08002a35 	.word	0x08002a35
 8002a18:	08002a2f 	.word	0x08002a2f
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	76fb      	strb	r3, [r7, #27]
 8002a20:	e05e      	b.n	8002ae0 <UART_SetConfig+0x1e4>
 8002a22:	2302      	movs	r3, #2
 8002a24:	76fb      	strb	r3, [r7, #27]
 8002a26:	e05b      	b.n	8002ae0 <UART_SetConfig+0x1e4>
 8002a28:	2304      	movs	r3, #4
 8002a2a:	76fb      	strb	r3, [r7, #27]
 8002a2c:	e058      	b.n	8002ae0 <UART_SetConfig+0x1e4>
 8002a2e:	2308      	movs	r3, #8
 8002a30:	76fb      	strb	r3, [r7, #27]
 8002a32:	e055      	b.n	8002ae0 <UART_SetConfig+0x1e4>
 8002a34:	2310      	movs	r3, #16
 8002a36:	76fb      	strb	r3, [r7, #27]
 8002a38:	bf00      	nop
 8002a3a:	e051      	b.n	8002ae0 <UART_SetConfig+0x1e4>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a69      	ldr	r2, [pc, #420]	; (8002be8 <UART_SetConfig+0x2ec>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d120      	bne.n	8002a88 <UART_SetConfig+0x18c>
 8002a46:	4b66      	ldr	r3, [pc, #408]	; (8002be0 <UART_SetConfig+0x2e4>)
 8002a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002a50:	2b10      	cmp	r3, #16
 8002a52:	d00f      	beq.n	8002a74 <UART_SetConfig+0x178>
 8002a54:	2b10      	cmp	r3, #16
 8002a56:	d802      	bhi.n	8002a5e <UART_SetConfig+0x162>
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <UART_SetConfig+0x16c>
 8002a5c:	e010      	b.n	8002a80 <UART_SetConfig+0x184>
 8002a5e:	2b20      	cmp	r3, #32
 8002a60:	d005      	beq.n	8002a6e <UART_SetConfig+0x172>
 8002a62:	2b30      	cmp	r3, #48	; 0x30
 8002a64:	d009      	beq.n	8002a7a <UART_SetConfig+0x17e>
 8002a66:	e00b      	b.n	8002a80 <UART_SetConfig+0x184>
 8002a68:	2300      	movs	r3, #0
 8002a6a:	76fb      	strb	r3, [r7, #27]
 8002a6c:	e038      	b.n	8002ae0 <UART_SetConfig+0x1e4>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	76fb      	strb	r3, [r7, #27]
 8002a72:	e035      	b.n	8002ae0 <UART_SetConfig+0x1e4>
 8002a74:	2304      	movs	r3, #4
 8002a76:	76fb      	strb	r3, [r7, #27]
 8002a78:	e032      	b.n	8002ae0 <UART_SetConfig+0x1e4>
 8002a7a:	2308      	movs	r3, #8
 8002a7c:	76fb      	strb	r3, [r7, #27]
 8002a7e:	e02f      	b.n	8002ae0 <UART_SetConfig+0x1e4>
 8002a80:	2310      	movs	r3, #16
 8002a82:	76fb      	strb	r3, [r7, #27]
 8002a84:	bf00      	nop
 8002a86:	e02b      	b.n	8002ae0 <UART_SetConfig+0x1e4>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a52      	ldr	r2, [pc, #328]	; (8002bd8 <UART_SetConfig+0x2dc>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d124      	bne.n	8002adc <UART_SetConfig+0x1e0>
 8002a92:	4b53      	ldr	r3, [pc, #332]	; (8002be0 <UART_SetConfig+0x2e4>)
 8002a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa0:	d012      	beq.n	8002ac8 <UART_SetConfig+0x1cc>
 8002aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa6:	d802      	bhi.n	8002aae <UART_SetConfig+0x1b2>
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d007      	beq.n	8002abc <UART_SetConfig+0x1c0>
 8002aac:	e012      	b.n	8002ad4 <UART_SetConfig+0x1d8>
 8002aae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ab2:	d006      	beq.n	8002ac2 <UART_SetConfig+0x1c6>
 8002ab4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ab8:	d009      	beq.n	8002ace <UART_SetConfig+0x1d2>
 8002aba:	e00b      	b.n	8002ad4 <UART_SetConfig+0x1d8>
 8002abc:	2300      	movs	r3, #0
 8002abe:	76fb      	strb	r3, [r7, #27]
 8002ac0:	e00e      	b.n	8002ae0 <UART_SetConfig+0x1e4>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	76fb      	strb	r3, [r7, #27]
 8002ac6:	e00b      	b.n	8002ae0 <UART_SetConfig+0x1e4>
 8002ac8:	2304      	movs	r3, #4
 8002aca:	76fb      	strb	r3, [r7, #27]
 8002acc:	e008      	b.n	8002ae0 <UART_SetConfig+0x1e4>
 8002ace:	2308      	movs	r3, #8
 8002ad0:	76fb      	strb	r3, [r7, #27]
 8002ad2:	e005      	b.n	8002ae0 <UART_SetConfig+0x1e4>
 8002ad4:	2310      	movs	r3, #16
 8002ad6:	76fb      	strb	r3, [r7, #27]
 8002ad8:	bf00      	nop
 8002ada:	e001      	b.n	8002ae0 <UART_SetConfig+0x1e4>
 8002adc:	2310      	movs	r3, #16
 8002ade:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a3c      	ldr	r2, [pc, #240]	; (8002bd8 <UART_SetConfig+0x2dc>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	f040 8082 	bne.w	8002bf0 <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002aec:	7efb      	ldrb	r3, [r7, #27]
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d823      	bhi.n	8002b3a <UART_SetConfig+0x23e>
 8002af2:	a201      	add	r2, pc, #4	; (adr r2, 8002af8 <UART_SetConfig+0x1fc>)
 8002af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af8:	08002b1d 	.word	0x08002b1d
 8002afc:	08002b3b 	.word	0x08002b3b
 8002b00:	08002b25 	.word	0x08002b25
 8002b04:	08002b3b 	.word	0x08002b3b
 8002b08:	08002b2b 	.word	0x08002b2b
 8002b0c:	08002b3b 	.word	0x08002b3b
 8002b10:	08002b3b 	.word	0x08002b3b
 8002b14:	08002b3b 	.word	0x08002b3b
 8002b18:	08002b33 	.word	0x08002b33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b1c:	f7ff f948 	bl	8001db0 <HAL_RCC_GetPCLK1Freq>
 8002b20:	6178      	str	r0, [r7, #20]
        break;
 8002b22:	e00f      	b.n	8002b44 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b24:	4b31      	ldr	r3, [pc, #196]	; (8002bec <UART_SetConfig+0x2f0>)
 8002b26:	617b      	str	r3, [r7, #20]
        break;
 8002b28:	e00c      	b.n	8002b44 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b2a:	f7ff f8ab 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8002b2e:	6178      	str	r0, [r7, #20]
        break;
 8002b30:	e008      	b.n	8002b44 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b36:	617b      	str	r3, [r7, #20]
        break;
 8002b38:	e004      	b.n	8002b44 <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	76bb      	strb	r3, [r7, #26]
        break;
 8002b42:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 8100 	beq.w	8002d4c <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	4413      	add	r3, r2
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d305      	bcc.n	8002b68 <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d902      	bls.n	8002b6e <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	76bb      	strb	r3, [r7, #26]
 8002b6c:	e0ee      	b.n	8002d4c <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	4619      	mov	r1, r3
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	f04f 0300 	mov.w	r3, #0
 8002b7a:	f04f 0400 	mov.w	r4, #0
 8002b7e:	0214      	lsls	r4, r2, #8
 8002b80:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002b84:	020b      	lsls	r3, r1, #8
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6852      	ldr	r2, [r2, #4]
 8002b8a:	0852      	lsrs	r2, r2, #1
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	eb13 0b01 	adds.w	fp, r3, r1
 8002b96:	eb44 0c02 	adc.w	ip, r4, r2
 8002b9a:	4658      	mov	r0, fp
 8002b9c:	4661      	mov	r1, ip
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f04f 0400 	mov.w	r4, #0
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4623      	mov	r3, r4
 8002baa:	f7fd fb11 	bl	80001d0 <__aeabi_uldivmod>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	460c      	mov	r4, r1
 8002bb2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bba:	d308      	bcc.n	8002bce <UART_SetConfig+0x2d2>
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bc2:	d204      	bcs.n	8002bce <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	60da      	str	r2, [r3, #12]
 8002bcc:	e0be      	b.n	8002d4c <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	76bb      	strb	r3, [r7, #26]
 8002bd2:	e0bb      	b.n	8002d4c <UART_SetConfig+0x450>
 8002bd4:	efff69f3 	.word	0xefff69f3
 8002bd8:	40008000 	.word	0x40008000
 8002bdc:	40013800 	.word	0x40013800
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40004400 	.word	0x40004400
 8002be8:	40004800 	.word	0x40004800
 8002bec:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bf8:	d15c      	bne.n	8002cb4 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8002bfa:	7efb      	ldrb	r3, [r7, #27]
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d828      	bhi.n	8002c52 <UART_SetConfig+0x356>
 8002c00:	a201      	add	r2, pc, #4	; (adr r2, 8002c08 <UART_SetConfig+0x30c>)
 8002c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c06:	bf00      	nop
 8002c08:	08002c2d 	.word	0x08002c2d
 8002c0c:	08002c35 	.word	0x08002c35
 8002c10:	08002c3d 	.word	0x08002c3d
 8002c14:	08002c53 	.word	0x08002c53
 8002c18:	08002c43 	.word	0x08002c43
 8002c1c:	08002c53 	.word	0x08002c53
 8002c20:	08002c53 	.word	0x08002c53
 8002c24:	08002c53 	.word	0x08002c53
 8002c28:	08002c4b 	.word	0x08002c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c2c:	f7ff f8c0 	bl	8001db0 <HAL_RCC_GetPCLK1Freq>
 8002c30:	6178      	str	r0, [r7, #20]
        break;
 8002c32:	e013      	b.n	8002c5c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c34:	f7ff f8d2 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
 8002c38:	6178      	str	r0, [r7, #20]
        break;
 8002c3a:	e00f      	b.n	8002c5c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c3c:	4b49      	ldr	r3, [pc, #292]	; (8002d64 <UART_SetConfig+0x468>)
 8002c3e:	617b      	str	r3, [r7, #20]
        break;
 8002c40:	e00c      	b.n	8002c5c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c42:	f7ff f81f 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8002c46:	6178      	str	r0, [r7, #20]
        break;
 8002c48:	e008      	b.n	8002c5c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c4e:	617b      	str	r3, [r7, #20]
        break;
 8002c50:	e004      	b.n	8002c5c <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	76bb      	strb	r3, [r7, #26]
        break;
 8002c5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d074      	beq.n	8002d4c <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	005a      	lsls	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	085b      	lsrs	r3, r3, #1
 8002c6c:	441a      	add	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	2b0f      	cmp	r3, #15
 8002c7e:	d916      	bls.n	8002cae <UART_SetConfig+0x3b2>
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c86:	d212      	bcs.n	8002cae <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	f023 030f 	bic.w	r3, r3, #15
 8002c90:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	085b      	lsrs	r3, r3, #1
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	89fb      	ldrh	r3, [r7, #14]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	89fa      	ldrh	r2, [r7, #14]
 8002caa:	60da      	str	r2, [r3, #12]
 8002cac:	e04e      	b.n	8002d4c <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	76bb      	strb	r3, [r7, #26]
 8002cb2:	e04b      	b.n	8002d4c <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cb4:	7efb      	ldrb	r3, [r7, #27]
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d827      	bhi.n	8002d0a <UART_SetConfig+0x40e>
 8002cba:	a201      	add	r2, pc, #4	; (adr r2, 8002cc0 <UART_SetConfig+0x3c4>)
 8002cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc0:	08002ce5 	.word	0x08002ce5
 8002cc4:	08002ced 	.word	0x08002ced
 8002cc8:	08002cf5 	.word	0x08002cf5
 8002ccc:	08002d0b 	.word	0x08002d0b
 8002cd0:	08002cfb 	.word	0x08002cfb
 8002cd4:	08002d0b 	.word	0x08002d0b
 8002cd8:	08002d0b 	.word	0x08002d0b
 8002cdc:	08002d0b 	.word	0x08002d0b
 8002ce0:	08002d03 	.word	0x08002d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ce4:	f7ff f864 	bl	8001db0 <HAL_RCC_GetPCLK1Freq>
 8002ce8:	6178      	str	r0, [r7, #20]
        break;
 8002cea:	e013      	b.n	8002d14 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cec:	f7ff f876 	bl	8001ddc <HAL_RCC_GetPCLK2Freq>
 8002cf0:	6178      	str	r0, [r7, #20]
        break;
 8002cf2:	e00f      	b.n	8002d14 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <UART_SetConfig+0x468>)
 8002cf6:	617b      	str	r3, [r7, #20]
        break;
 8002cf8:	e00c      	b.n	8002d14 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cfa:	f7fe ffc3 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8002cfe:	6178      	str	r0, [r7, #20]
        break;
 8002d00:	e008      	b.n	8002d14 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d06:	617b      	str	r3, [r7, #20]
        break;
 8002d08:	e004      	b.n	8002d14 <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	76bb      	strb	r3, [r7, #26]
        break;
 8002d12:	bf00      	nop
    }

    if (pclk != 0U)
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d018      	beq.n	8002d4c <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	085a      	lsrs	r2, r3, #1
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	441a      	add	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	2b0f      	cmp	r3, #15
 8002d34:	d908      	bls.n	8002d48 <UART_SetConfig+0x44c>
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d3c:	d204      	bcs.n	8002d48 <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	e001      	b.n	8002d4c <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002d58:	7ebb      	ldrb	r3, [r7, #26]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3720      	adds	r7, #32
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002d64:	00f42400 	.word	0x00f42400

08002d68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d01a      	beq.n	8002e7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e66:	d10a      	bne.n	8002e7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	605a      	str	r2, [r3, #4]
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af02      	add	r7, sp, #8
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002eba:	f7fd fed7 	bl	8000c6c <HAL_GetTick>
 8002ebe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d10e      	bne.n	8002eec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ece:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f82a 	bl	8002f36 <UART_WaitOnFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e020      	b.n	8002f2e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d10e      	bne.n	8002f18 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002efa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f814 	bl	8002f36 <UART_WaitOnFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e00a      	b.n	8002f2e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2220      	movs	r2, #32
 8002f22:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	603b      	str	r3, [r7, #0]
 8002f42:	4613      	mov	r3, r2
 8002f44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f46:	e05d      	b.n	8003004 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4e:	d059      	beq.n	8003004 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f50:	f7fd fe8c 	bl	8000c6c <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d302      	bcc.n	8002f66 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d11b      	bne.n	8002f9e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f74:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0201 	bic.w	r2, r2, #1
 8002f84:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e042      	b.n	8003024 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d02b      	beq.n	8003004 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fba:	d123      	bne.n	8003004 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fc4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fd4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0201 	bic.w	r2, r2, #1
 8002fe4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e00f      	b.n	8003024 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	69da      	ldr	r2, [r3, #28]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4013      	ands	r3, r2
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	429a      	cmp	r2, r3
 8003012:	bf0c      	ite	eq
 8003014:	2301      	moveq	r3, #1
 8003016:	2300      	movne	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	429a      	cmp	r2, r3
 8003020:	d092      	beq.n	8002f48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800303a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800303e:	2b84      	cmp	r3, #132	; 0x84
 8003040:	d005      	beq.n	800304e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003042:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4413      	add	r3, r2
 800304a:	3303      	adds	r3, #3
 800304c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800304e:	68fb      	ldr	r3, [r7, #12]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003060:	f001 fab0 	bl	80045c4 <vTaskStartScheduler>
  
  return osOK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	bd80      	pop	{r7, pc}

0800306a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800306a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800306c:	b089      	sub	sp, #36	; 0x24
 800306e:	af04      	add	r7, sp, #16
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d020      	beq.n	80030be <osThreadCreate+0x54>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d01c      	beq.n	80030be <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685c      	ldr	r4, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681d      	ldr	r5, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691e      	ldr	r6, [r3, #16]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff ffc8 	bl	800302c <makeFreeRtosPriority>
 800309c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030a6:	9202      	str	r2, [sp, #8]
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	9100      	str	r1, [sp, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4632      	mov	r2, r6
 80030b0:	4629      	mov	r1, r5
 80030b2:	4620      	mov	r0, r4
 80030b4:	f001 f8c2 	bl	800423c <xTaskCreateStatic>
 80030b8:	4603      	mov	r3, r0
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	e01c      	b.n	80030f8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685c      	ldr	r4, [r3, #4]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030ca:	b29e      	uxth	r6, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff ffaa 	bl	800302c <makeFreeRtosPriority>
 80030d8:	4602      	mov	r2, r0
 80030da:	f107 030c 	add.w	r3, r7, #12
 80030de:	9301      	str	r3, [sp, #4]
 80030e0:	9200      	str	r2, [sp, #0]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	4632      	mov	r2, r6
 80030e6:	4629      	mov	r1, r5
 80030e8:	4620      	mov	r0, r4
 80030ea:	f001 f901 	bl	80042f0 <xTaskCreate>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d001      	beq.n	80030f8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	e000      	b.n	80030fa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80030f8:	68fb      	ldr	r3, [r7, #12]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003102 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <osDelay+0x16>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	e000      	b.n	800311a <osDelay+0x18>
 8003118:	2301      	movs	r3, #1
 800311a:	4618      	mov	r0, r3
 800311c:	f001 fa1e 	bl	800455c <vTaskDelay>
  
  return osOK;
 8003120:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08a      	sub	sp, #40	; 0x28
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003134:	2300      	movs	r3, #0
 8003136:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003138:	f001 faa2 	bl	8004680 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800313c:	4b57      	ldr	r3, [pc, #348]	; (800329c <pvPortMalloc+0x170>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003144:	f000 f90c 	bl	8003360 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003148:	4b55      	ldr	r3, [pc, #340]	; (80032a0 <pvPortMalloc+0x174>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4013      	ands	r3, r2
 8003150:	2b00      	cmp	r3, #0
 8003152:	f040 808c 	bne.w	800326e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01c      	beq.n	8003196 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800315c:	2208      	movs	r2, #8
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4413      	add	r3, r2
 8003162:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	2b00      	cmp	r3, #0
 800316c:	d013      	beq.n	8003196 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f023 0307 	bic.w	r3, r3, #7
 8003174:	3308      	adds	r3, #8
 8003176:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	2b00      	cmp	r3, #0
 8003180:	d009      	beq.n	8003196 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003186:	f383 8811 	msr	BASEPRI, r3
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	e7fe      	b.n	8003194 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d068      	beq.n	800326e <pvPortMalloc+0x142>
 800319c:	4b41      	ldr	r3, [pc, #260]	; (80032a4 <pvPortMalloc+0x178>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d863      	bhi.n	800326e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80031a6:	4b40      	ldr	r3, [pc, #256]	; (80032a8 <pvPortMalloc+0x17c>)
 80031a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80031aa:	4b3f      	ldr	r3, [pc, #252]	; (80032a8 <pvPortMalloc+0x17c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031b0:	e004      	b.n	80031bc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d903      	bls.n	80031ce <pvPortMalloc+0xa2>
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f1      	bne.n	80031b2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80031ce:	4b33      	ldr	r3, [pc, #204]	; (800329c <pvPortMalloc+0x170>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d04a      	beq.n	800326e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2208      	movs	r2, #8
 80031de:	4413      	add	r3, r2
 80031e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	1ad2      	subs	r2, r2, r3
 80031f2:	2308      	movs	r3, #8
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d91e      	bls.n	8003238 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80031fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4413      	add	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	2b00      	cmp	r3, #0
 800320a:	d009      	beq.n	8003220 <pvPortMalloc+0xf4>
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	613b      	str	r3, [r7, #16]
 800321e:	e7fe      	b.n	800321e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	1ad2      	subs	r2, r2, r3
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003232:	69b8      	ldr	r0, [r7, #24]
 8003234:	f000 f8f6 	bl	8003424 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003238:	4b1a      	ldr	r3, [pc, #104]	; (80032a4 <pvPortMalloc+0x178>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	4a18      	ldr	r2, [pc, #96]	; (80032a4 <pvPortMalloc+0x178>)
 8003244:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003246:	4b17      	ldr	r3, [pc, #92]	; (80032a4 <pvPortMalloc+0x178>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	4b18      	ldr	r3, [pc, #96]	; (80032ac <pvPortMalloc+0x180>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d203      	bcs.n	800325a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003252:	4b14      	ldr	r3, [pc, #80]	; (80032a4 <pvPortMalloc+0x178>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a15      	ldr	r2, [pc, #84]	; (80032ac <pvPortMalloc+0x180>)
 8003258:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <pvPortMalloc+0x174>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	431a      	orrs	r2, r3
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800326e:	f001 fa15 	bl	800469c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	2b00      	cmp	r3, #0
 800327a:	d009      	beq.n	8003290 <pvPortMalloc+0x164>
 800327c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003280:	f383 8811 	msr	BASEPRI, r3
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	f3bf 8f4f 	dsb	sy
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	e7fe      	b.n	800328e <pvPortMalloc+0x162>
	return pvReturn;
 8003290:	69fb      	ldr	r3, [r7, #28]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3728      	adds	r7, #40	; 0x28
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20000ea8 	.word	0x20000ea8
 80032a0:	20000eb4 	.word	0x20000eb4
 80032a4:	20000eac 	.word	0x20000eac
 80032a8:	20000ea0 	.word	0x20000ea0
 80032ac:	20000eb0 	.word	0x20000eb0

080032b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d046      	beq.n	8003350 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80032c2:	2308      	movs	r3, #8
 80032c4:	425b      	negs	r3, r3
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	4413      	add	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	4b20      	ldr	r3, [pc, #128]	; (8003358 <vPortFree+0xa8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4013      	ands	r3, r2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <vPortFree+0x42>
 80032de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e2:	f383 8811 	msr	BASEPRI, r3
 80032e6:	f3bf 8f6f 	isb	sy
 80032ea:	f3bf 8f4f 	dsb	sy
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	e7fe      	b.n	80032f0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <vPortFree+0x5e>
 80032fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	e7fe      	b.n	800330c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	4b11      	ldr	r3, [pc, #68]	; (8003358 <vPortFree+0xa8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4013      	ands	r3, r2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d019      	beq.n	8003350 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d115      	bne.n	8003350 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <vPortFree+0xa8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	43db      	mvns	r3, r3
 800332e:	401a      	ands	r2, r3
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003334:	f001 f9a4 	bl	8004680 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	4b07      	ldr	r3, [pc, #28]	; (800335c <vPortFree+0xac>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4413      	add	r3, r2
 8003342:	4a06      	ldr	r2, [pc, #24]	; (800335c <vPortFree+0xac>)
 8003344:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003346:	6938      	ldr	r0, [r7, #16]
 8003348:	f000 f86c 	bl	8003424 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800334c:	f001 f9a6 	bl	800469c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003350:	bf00      	nop
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20000eb4 	.word	0x20000eb4
 800335c:	20000eac 	.word	0x20000eac

08003360 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003366:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800336a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800336c:	4b27      	ldr	r3, [pc, #156]	; (800340c <prvHeapInit+0xac>)
 800336e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00c      	beq.n	8003394 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	3307      	adds	r3, #7
 800337e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 0307 	bic.w	r3, r3, #7
 8003386:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	4a1f      	ldr	r2, [pc, #124]	; (800340c <prvHeapInit+0xac>)
 8003390:	4413      	add	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003398:	4a1d      	ldr	r2, [pc, #116]	; (8003410 <prvHeapInit+0xb0>)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800339e:	4b1c      	ldr	r3, [pc, #112]	; (8003410 <prvHeapInit+0xb0>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	4413      	add	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80033ac:	2208      	movs	r2, #8
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0307 	bic.w	r3, r3, #7
 80033ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4a15      	ldr	r2, [pc, #84]	; (8003414 <prvHeapInit+0xb4>)
 80033c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80033c2:	4b14      	ldr	r3, [pc, #80]	; (8003414 <prvHeapInit+0xb4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2200      	movs	r2, #0
 80033c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80033ca:	4b12      	ldr	r3, [pc, #72]	; (8003414 <prvHeapInit+0xb4>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	1ad2      	subs	r2, r2, r3
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80033e0:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <prvHeapInit+0xb4>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	4a0a      	ldr	r2, [pc, #40]	; (8003418 <prvHeapInit+0xb8>)
 80033ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4a09      	ldr	r2, [pc, #36]	; (800341c <prvHeapInit+0xbc>)
 80033f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80033f8:	4b09      	ldr	r3, [pc, #36]	; (8003420 <prvHeapInit+0xc0>)
 80033fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80033fe:	601a      	str	r2, [r3, #0]
}
 8003400:	bf00      	nop
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	200002e8 	.word	0x200002e8
 8003410:	20000ea0 	.word	0x20000ea0
 8003414:	20000ea8 	.word	0x20000ea8
 8003418:	20000eb0 	.word	0x20000eb0
 800341c:	20000eac 	.word	0x20000eac
 8003420:	20000eb4 	.word	0x20000eb4

08003424 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800342c:	4b28      	ldr	r3, [pc, #160]	; (80034d0 <prvInsertBlockIntoFreeList+0xac>)
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	e002      	b.n	8003438 <prvInsertBlockIntoFreeList+0x14>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	429a      	cmp	r2, r3
 8003440:	d8f7      	bhi.n	8003432 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	4413      	add	r3, r2
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	429a      	cmp	r2, r3
 8003452:	d108      	bne.n	8003466 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	441a      	add	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	441a      	add	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d118      	bne.n	80034ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <prvInsertBlockIntoFreeList+0xb0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d00d      	beq.n	80034a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	441a      	add	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	e008      	b.n	80034b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80034a2:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <prvInsertBlockIntoFreeList+0xb0>)
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	e003      	b.n	80034b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d002      	beq.n	80034c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034c2:	bf00      	nop
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20000ea0 	.word	0x20000ea0
 80034d4:	20000ea8 	.word	0x20000ea8

080034d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f103 0208 	add.w	r2, r3, #8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f04f 32ff 	mov.w	r2, #4294967295
 80034f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f103 0208 	add.w	r2, r3, #8
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f103 0208 	add.w	r2, r3, #8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003532:	b480      	push	{r7}
 8003534:	b085      	sub	sp, #20
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	601a      	str	r2, [r3, #0]
}
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800357a:	b480      	push	{r7}
 800357c:	b085      	sub	sp, #20
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d103      	bne.n	800359a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	e00c      	b.n	80035b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3308      	adds	r3, #8
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	e002      	b.n	80035a8 <vListInsert+0x2e>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d2f6      	bcs.n	80035a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	601a      	str	r2, [r3, #0]
}
 80035e0:	bf00      	nop
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6892      	ldr	r2, [r2, #8]
 8003602:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6852      	ldr	r2, [r2, #4]
 800360c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	429a      	cmp	r2, r3
 8003616:	d103      	bne.n	8003620 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	1e5a      	subs	r2, r3, #1
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	3b04      	subs	r3, #4
 8003650:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003658:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	3b04      	subs	r3, #4
 800365e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f023 0201 	bic.w	r2, r3, #1
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	3b04      	subs	r3, #4
 800366e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003670:	4a0c      	ldr	r2, [pc, #48]	; (80036a4 <pxPortInitialiseStack+0x64>)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	3b14      	subs	r3, #20
 800367a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	3b04      	subs	r3, #4
 8003686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f06f 0202 	mvn.w	r2, #2
 800368e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	3b20      	subs	r3, #32
 8003694:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003696:	68fb      	ldr	r3, [r7, #12]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	080036a9 	.word	0x080036a9

080036a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80036b2:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <prvTaskExitError+0x50>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ba:	d009      	beq.n	80036d0 <prvTaskExitError+0x28>
 80036bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	e7fe      	b.n	80036ce <prvTaskExitError+0x26>
 80036d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80036e2:	bf00      	nop
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0fc      	beq.n	80036e4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80036ea:	bf00      	nop
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	2000000c 	.word	0x2000000c
 80036fc:	00000000 	.word	0x00000000

08003700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003700:	4b07      	ldr	r3, [pc, #28]	; (8003720 <pxCurrentTCBConst2>)
 8003702:	6819      	ldr	r1, [r3, #0]
 8003704:	6808      	ldr	r0, [r1, #0]
 8003706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800370a:	f380 8809 	msr	PSP, r0
 800370e:	f3bf 8f6f 	isb	sy
 8003712:	f04f 0000 	mov.w	r0, #0
 8003716:	f380 8811 	msr	BASEPRI, r0
 800371a:	4770      	bx	lr
 800371c:	f3af 8000 	nop.w

08003720 <pxCurrentTCBConst2>:
 8003720:	20000ec0 	.word	0x20000ec0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop

08003728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003728:	4808      	ldr	r0, [pc, #32]	; (800374c <prvPortStartFirstTask+0x24>)
 800372a:	6800      	ldr	r0, [r0, #0]
 800372c:	6800      	ldr	r0, [r0, #0]
 800372e:	f380 8808 	msr	MSP, r0
 8003732:	f04f 0000 	mov.w	r0, #0
 8003736:	f380 8814 	msr	CONTROL, r0
 800373a:	b662      	cpsie	i
 800373c:	b661      	cpsie	f
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	df00      	svc	0
 8003748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800374a:	bf00      	nop
 800374c:	e000ed08 	.word	0xe000ed08

08003750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003756:	4b44      	ldr	r3, [pc, #272]	; (8003868 <xPortStartScheduler+0x118>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a44      	ldr	r2, [pc, #272]	; (800386c <xPortStartScheduler+0x11c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d109      	bne.n	8003774 <xPortStartScheduler+0x24>
 8003760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003764:	f383 8811 	msr	BASEPRI, r3
 8003768:	f3bf 8f6f 	isb	sy
 800376c:	f3bf 8f4f 	dsb	sy
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	e7fe      	b.n	8003772 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003774:	4b3c      	ldr	r3, [pc, #240]	; (8003868 <xPortStartScheduler+0x118>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a3d      	ldr	r2, [pc, #244]	; (8003870 <xPortStartScheduler+0x120>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d109      	bne.n	8003792 <xPortStartScheduler+0x42>
 800377e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003782:	f383 8811 	msr	BASEPRI, r3
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	e7fe      	b.n	8003790 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003792:	4b38      	ldr	r3, [pc, #224]	; (8003874 <xPortStartScheduler+0x124>)
 8003794:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	b2db      	uxtb	r3, r3
 800379c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	22ff      	movs	r2, #255	; 0xff
 80037a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80037ac:	78fb      	ldrb	r3, [r7, #3]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	4b30      	ldr	r3, [pc, #192]	; (8003878 <xPortStartScheduler+0x128>)
 80037b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80037ba:	4b30      	ldr	r3, [pc, #192]	; (800387c <xPortStartScheduler+0x12c>)
 80037bc:	2207      	movs	r2, #7
 80037be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037c0:	e009      	b.n	80037d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80037c2:	4b2e      	ldr	r3, [pc, #184]	; (800387c <xPortStartScheduler+0x12c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	4a2c      	ldr	r2, [pc, #176]	; (800387c <xPortStartScheduler+0x12c>)
 80037ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037d6:	78fb      	ldrb	r3, [r7, #3]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037de:	2b80      	cmp	r3, #128	; 0x80
 80037e0:	d0ef      	beq.n	80037c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80037e2:	4b26      	ldr	r3, [pc, #152]	; (800387c <xPortStartScheduler+0x12c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f1c3 0307 	rsb	r3, r3, #7
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d009      	beq.n	8003802 <xPortStartScheduler+0xb2>
 80037ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	e7fe      	b.n	8003800 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003802:	4b1e      	ldr	r3, [pc, #120]	; (800387c <xPortStartScheduler+0x12c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	021b      	lsls	r3, r3, #8
 8003808:	4a1c      	ldr	r2, [pc, #112]	; (800387c <xPortStartScheduler+0x12c>)
 800380a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800380c:	4b1b      	ldr	r3, [pc, #108]	; (800387c <xPortStartScheduler+0x12c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003814:	4a19      	ldr	r2, [pc, #100]	; (800387c <xPortStartScheduler+0x12c>)
 8003816:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	b2da      	uxtb	r2, r3
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003820:	4b17      	ldr	r3, [pc, #92]	; (8003880 <xPortStartScheduler+0x130>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a16      	ldr	r2, [pc, #88]	; (8003880 <xPortStartScheduler+0x130>)
 8003826:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800382a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800382c:	4b14      	ldr	r3, [pc, #80]	; (8003880 <xPortStartScheduler+0x130>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a13      	ldr	r2, [pc, #76]	; (8003880 <xPortStartScheduler+0x130>)
 8003832:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003836:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003838:	f000 f8d6 	bl	80039e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800383c:	4b11      	ldr	r3, [pc, #68]	; (8003884 <xPortStartScheduler+0x134>)
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003842:	f000 f8f5 	bl	8003a30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003846:	4b10      	ldr	r3, [pc, #64]	; (8003888 <xPortStartScheduler+0x138>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a0f      	ldr	r2, [pc, #60]	; (8003888 <xPortStartScheduler+0x138>)
 800384c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003850:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003852:	f7ff ff69 	bl	8003728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003856:	f001 f875 	bl	8004944 <vTaskSwitchContext>
	prvTaskExitError();
 800385a:	f7ff ff25 	bl	80036a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	e000ed00 	.word	0xe000ed00
 800386c:	410fc271 	.word	0x410fc271
 8003870:	410fc270 	.word	0x410fc270
 8003874:	e000e400 	.word	0xe000e400
 8003878:	20000eb8 	.word	0x20000eb8
 800387c:	20000ebc 	.word	0x20000ebc
 8003880:	e000ed20 	.word	0xe000ed20
 8003884:	2000000c 	.word	0x2000000c
 8003888:	e000ef34 	.word	0xe000ef34

0800388c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003896:	f383 8811 	msr	BASEPRI, r3
 800389a:	f3bf 8f6f 	isb	sy
 800389e:	f3bf 8f4f 	dsb	sy
 80038a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80038a4:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <vPortEnterCritical+0x54>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3301      	adds	r3, #1
 80038aa:	4a0d      	ldr	r2, [pc, #52]	; (80038e0 <vPortEnterCritical+0x54>)
 80038ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80038ae:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <vPortEnterCritical+0x54>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d10e      	bne.n	80038d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80038b6:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <vPortEnterCritical+0x58>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d009      	beq.n	80038d4 <vPortEnterCritical+0x48>
 80038c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c4:	f383 8811 	msr	BASEPRI, r3
 80038c8:	f3bf 8f6f 	isb	sy
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	603b      	str	r3, [r7, #0]
 80038d2:	e7fe      	b.n	80038d2 <vPortEnterCritical+0x46>
	}
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	2000000c 	.word	0x2000000c
 80038e4:	e000ed04 	.word	0xe000ed04

080038e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80038ee:	4b11      	ldr	r3, [pc, #68]	; (8003934 <vPortExitCritical+0x4c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <vPortExitCritical+0x22>
 80038f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	607b      	str	r3, [r7, #4]
 8003908:	e7fe      	b.n	8003908 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800390a:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <vPortExitCritical+0x4c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3b01      	subs	r3, #1
 8003910:	4a08      	ldr	r2, [pc, #32]	; (8003934 <vPortExitCritical+0x4c>)
 8003912:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003914:	4b07      	ldr	r3, [pc, #28]	; (8003934 <vPortExitCritical+0x4c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d104      	bne.n	8003926 <vPortExitCritical+0x3e>
 800391c:	2300      	movs	r3, #0
 800391e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	2000000c 	.word	0x2000000c
	...

08003940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003940:	f3ef 8009 	mrs	r0, PSP
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <pxCurrentTCBConst>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	f01e 0f10 	tst.w	lr, #16
 8003950:	bf08      	it	eq
 8003952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800395a:	6010      	str	r0, [r2, #0]
 800395c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003960:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003964:	f380 8811 	msr	BASEPRI, r0
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f000 ffe8 	bl	8004944 <vTaskSwitchContext>
 8003974:	f04f 0000 	mov.w	r0, #0
 8003978:	f380 8811 	msr	BASEPRI, r0
 800397c:	bc09      	pop	{r0, r3}
 800397e:	6819      	ldr	r1, [r3, #0]
 8003980:	6808      	ldr	r0, [r1, #0]
 8003982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003986:	f01e 0f10 	tst.w	lr, #16
 800398a:	bf08      	it	eq
 800398c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003990:	f380 8809 	msr	PSP, r0
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	f3af 8000 	nop.w

080039a0 <pxCurrentTCBConst>:
 80039a0:	20000ec0 	.word	0x20000ec0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop

080039a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
	__asm volatile
 80039ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80039c0:	f000 ff08 	bl	80047d4 <xTaskIncrementTick>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80039ca:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <SysTick_Handler+0x3c>)
 80039cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	2300      	movs	r3, #0
 80039d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	e000ed04 	.word	0xe000ed04

080039e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80039ec:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <vPortSetupTimerInterrupt+0x34>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80039f2:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <vPortSetupTimerInterrupt+0x38>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80039f8:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <vPortSetupTimerInterrupt+0x3c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a0a      	ldr	r2, [pc, #40]	; (8003a28 <vPortSetupTimerInterrupt+0x40>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	099b      	lsrs	r3, r3, #6
 8003a04:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <vPortSetupTimerInterrupt+0x44>)
 8003a06:	3b01      	subs	r3, #1
 8003a08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003a0a:	4b04      	ldr	r3, [pc, #16]	; (8003a1c <vPortSetupTimerInterrupt+0x34>)
 8003a0c:	2207      	movs	r2, #7
 8003a0e:	601a      	str	r2, [r3, #0]
}
 8003a10:	bf00      	nop
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	e000e010 	.word	0xe000e010
 8003a20:	e000e018 	.word	0xe000e018
 8003a24:	20000000 	.word	0x20000000
 8003a28:	10624dd3 	.word	0x10624dd3
 8003a2c:	e000e014 	.word	0xe000e014

08003a30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003a30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003a40 <vPortEnableVFP+0x10>
 8003a34:	6801      	ldr	r1, [r0, #0]
 8003a36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003a3a:	6001      	str	r1, [r0, #0]
 8003a3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003a3e:	bf00      	nop
 8003a40:	e000ed88 	.word	0xe000ed88

08003a44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d109      	bne.n	8003a6c <xQueueGenericReset+0x28>
	__asm volatile
 8003a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5c:	f383 8811 	msr	BASEPRI, r3
 8003a60:	f3bf 8f6f 	isb	sy
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	e7fe      	b.n	8003a6a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003a6c:	f7ff ff0e 	bl	800388c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a78:	68f9      	ldr	r1, [r7, #12]
 8003a7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a7c:	fb01 f303 	mul.w	r3, r1, r3
 8003a80:	441a      	add	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	68f9      	ldr	r1, [r7, #12]
 8003aa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003aa2:	fb01 f303 	mul.w	r3, r1, r3
 8003aa6:	441a      	add	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	22ff      	movs	r2, #255	; 0xff
 8003ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	22ff      	movs	r2, #255	; 0xff
 8003ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d114      	bne.n	8003aec <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d01a      	beq.n	8003b00 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	3310      	adds	r3, #16
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 ffb6 	bl	8004a40 <xTaskRemoveFromEventList>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d012      	beq.n	8003b00 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ada:	4b0d      	ldr	r3, [pc, #52]	; (8003b10 <xQueueGenericReset+0xcc>)
 8003adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	e009      	b.n	8003b00 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3310      	adds	r3, #16
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff fcf1 	bl	80034d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	3324      	adds	r3, #36	; 0x24
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff fcec 	bl	80034d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b00:	f7ff fef2 	bl	80038e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b04:	2301      	movs	r3, #1
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	e000ed04 	.word	0xe000ed04

08003b14 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08a      	sub	sp, #40	; 0x28
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d109      	bne.n	8003b3c <xQueueGenericCreate+0x28>
 8003b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	e7fe      	b.n	8003b3a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d102      	bne.n	8003b48 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61fb      	str	r3, [r7, #28]
 8003b46:	e004      	b.n	8003b52 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	fb02 f303 	mul.w	r3, r2, r3
 8003b50:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	3348      	adds	r3, #72	; 0x48
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff fae8 	bl	800312c <pvPortMalloc>
 8003b5c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d011      	beq.n	8003b88 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	3348      	adds	r3, #72	; 0x48
 8003b6c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b76:	79fa      	ldrb	r2, [r7, #7]
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 f805 	bl	8003b92 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003b88:	69bb      	ldr	r3, [r7, #24]
	}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3720      	adds	r7, #32
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b084      	sub	sp, #16
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d103      	bne.n	8003bae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	e002      	b.n	8003bb4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	69b8      	ldr	r0, [r7, #24]
 8003bc4:	f7ff ff3e 	bl	8003a44 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003bc8:	bf00      	nop
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00e      	beq.n	8003bfc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f81c 	bl	8003c34 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003bfc:	bf00      	nop
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	2300      	movs	r3, #0
 8003c14:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	6939      	ldr	r1, [r7, #16]
 8003c1c:	6978      	ldr	r0, [r7, #20]
 8003c1e:	f7ff ff79 	bl	8003b14 <xQueueGenericCreate>
 8003c22:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f7ff ffd3 	bl	8003bd0 <prvInitialiseMutex>

		return xNewQueue;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
	}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08e      	sub	sp, #56	; 0x38
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c42:	2300      	movs	r3, #0
 8003c44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d109      	bne.n	8003c64 <xQueueGenericSend+0x30>
 8003c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c54:	f383 8811 	msr	BASEPRI, r3
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c62:	e7fe      	b.n	8003c62 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d103      	bne.n	8003c72 <xQueueGenericSend+0x3e>
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <xQueueGenericSend+0x42>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <xQueueGenericSend+0x44>
 8003c76:	2300      	movs	r3, #0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d109      	bne.n	8003c90 <xQueueGenericSend+0x5c>
 8003c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8e:	e7fe      	b.n	8003c8e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d103      	bne.n	8003c9e <xQueueGenericSend+0x6a>
 8003c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <xQueueGenericSend+0x6e>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <xQueueGenericSend+0x70>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d109      	bne.n	8003cbc <xQueueGenericSend+0x88>
 8003ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cac:	f383 8811 	msr	BASEPRI, r3
 8003cb0:	f3bf 8f6f 	isb	sy
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	623b      	str	r3, [r7, #32]
 8003cba:	e7fe      	b.n	8003cba <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cbc:	f001 f876 	bl	8004dac <xTaskGetSchedulerState>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d102      	bne.n	8003ccc <xQueueGenericSend+0x98>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <xQueueGenericSend+0x9c>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e000      	b.n	8003cd2 <xQueueGenericSend+0x9e>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d109      	bne.n	8003cea <xQueueGenericSend+0xb6>
 8003cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cda:	f383 8811 	msr	BASEPRI, r3
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	61fb      	str	r3, [r7, #28]
 8003ce8:	e7fe      	b.n	8003ce8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cea:	f7ff fdcf 	bl	800388c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d302      	bcc.n	8003d00 <xQueueGenericSend+0xcc>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d129      	bne.n	8003d54 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	68b9      	ldr	r1, [r7, #8]
 8003d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d06:	f000 f9af 	bl	8004068 <prvCopyDataToQueue>
 8003d0a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d010      	beq.n	8003d36 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d16:	3324      	adds	r3, #36	; 0x24
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 fe91 	bl	8004a40 <xTaskRemoveFromEventList>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d013      	beq.n	8003d4c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d24:	4b3f      	ldr	r3, [pc, #252]	; (8003e24 <xQueueGenericSend+0x1f0>)
 8003d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	f3bf 8f6f 	isb	sy
 8003d34:	e00a      	b.n	8003d4c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d007      	beq.n	8003d4c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d3c:	4b39      	ldr	r3, [pc, #228]	; (8003e24 <xQueueGenericSend+0x1f0>)
 8003d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d4c:	f7ff fdcc 	bl	80038e8 <vPortExitCritical>
				return pdPASS;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e063      	b.n	8003e1c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d103      	bne.n	8003d62 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d5a:	f7ff fdc5 	bl	80038e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e05c      	b.n	8003e1c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d106      	bne.n	8003d76 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d68:	f107 0314 	add.w	r3, r7, #20
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fec9 	bl	8004b04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d72:	2301      	movs	r3, #1
 8003d74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d76:	f7ff fdb7 	bl	80038e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d7a:	f000 fc81 	bl	8004680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d7e:	f7ff fd85 	bl	800388c <vPortEnterCritical>
 8003d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d88:	b25b      	sxtb	r3, r3
 8003d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8e:	d103      	bne.n	8003d98 <xQueueGenericSend+0x164>
 8003d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d9e:	b25b      	sxtb	r3, r3
 8003da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da4:	d103      	bne.n	8003dae <xQueueGenericSend+0x17a>
 8003da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dae:	f7ff fd9b 	bl	80038e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003db2:	1d3a      	adds	r2, r7, #4
 8003db4:	f107 0314 	add.w	r3, r7, #20
 8003db8:	4611      	mov	r1, r2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 feb8 	bl	8004b30 <xTaskCheckForTimeOut>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d124      	bne.n	8003e10 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003dc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dc8:	f000 fa20 	bl	800420c <prvIsQueueFull>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d018      	beq.n	8003e04 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd4:	3310      	adds	r3, #16
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	4611      	mov	r1, r2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fe0c 	bl	80049f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003de2:	f000 f9ab 	bl	800413c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003de6:	f000 fc59 	bl	800469c <xTaskResumeAll>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f47f af7c 	bne.w	8003cea <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003df2:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <xQueueGenericSend+0x1f0>)
 8003df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	e772      	b.n	8003cea <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e06:	f000 f999 	bl	800413c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e0a:	f000 fc47 	bl	800469c <xTaskResumeAll>
 8003e0e:	e76c      	b.n	8003cea <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e12:	f000 f993 	bl	800413c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e16:	f000 fc41 	bl	800469c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003e1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3738      	adds	r7, #56	; 0x38
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	e000ed04 	.word	0xe000ed04

08003e28 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08e      	sub	sp, #56	; 0x38
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e32:	2300      	movs	r3, #0
 8003e34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d109      	bne.n	8003e58 <xQueueSemaphoreTake+0x30>
 8003e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	623b      	str	r3, [r7, #32]
 8003e56:	e7fe      	b.n	8003e56 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d009      	beq.n	8003e74 <xQueueSemaphoreTake+0x4c>
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	61fb      	str	r3, [r7, #28]
 8003e72:	e7fe      	b.n	8003e72 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e74:	f000 ff9a 	bl	8004dac <xTaskGetSchedulerState>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d102      	bne.n	8003e84 <xQueueSemaphoreTake+0x5c>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <xQueueSemaphoreTake+0x60>
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <xQueueSemaphoreTake+0x62>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d109      	bne.n	8003ea2 <xQueueSemaphoreTake+0x7a>
 8003e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e92:	f383 8811 	msr	BASEPRI, r3
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	61bb      	str	r3, [r7, #24]
 8003ea0:	e7fe      	b.n	8003ea0 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ea2:	f7ff fcf3 	bl	800388c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d024      	beq.n	8003efc <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	1e5a      	subs	r2, r3, #1
 8003eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d104      	bne.n	8003ecc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003ec2:	f001 f92d 	bl	8005120 <pvTaskIncrementMutexHeldCount>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00f      	beq.n	8003ef4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed6:	3310      	adds	r3, #16
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 fdb1 	bl	8004a40 <xTaskRemoveFromEventList>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d007      	beq.n	8003ef4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ee4:	4b53      	ldr	r3, [pc, #332]	; (8004034 <xQueueSemaphoreTake+0x20c>)
 8003ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ef4:	f7ff fcf8 	bl	80038e8 <vPortExitCritical>
				return pdPASS;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e096      	b.n	800402a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d110      	bne.n	8003f24 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d009      	beq.n	8003f1c <xQueueSemaphoreTake+0xf4>
 8003f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	e7fe      	b.n	8003f1a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003f1c:	f7ff fce4 	bl	80038e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f20:	2300      	movs	r3, #0
 8003f22:	e082      	b.n	800402a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d106      	bne.n	8003f38 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f2a:	f107 030c 	add.w	r3, r7, #12
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fde8 	bl	8004b04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f34:	2301      	movs	r3, #1
 8003f36:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f38:	f7ff fcd6 	bl	80038e8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f3c:	f000 fba0 	bl	8004680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f40:	f7ff fca4 	bl	800388c <vPortEnterCritical>
 8003f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f4a:	b25b      	sxtb	r3, r3
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f50:	d103      	bne.n	8003f5a <xQueueSemaphoreTake+0x132>
 8003f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f60:	b25b      	sxtb	r3, r3
 8003f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f66:	d103      	bne.n	8003f70 <xQueueSemaphoreTake+0x148>
 8003f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f70:	f7ff fcba 	bl	80038e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f74:	463a      	mov	r2, r7
 8003f76:	f107 030c 	add.w	r3, r7, #12
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 fdd7 	bl	8004b30 <xTaskCheckForTimeOut>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d132      	bne.n	8003fee <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f8a:	f000 f929 	bl	80041e0 <prvIsQueueEmpty>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d026      	beq.n	8003fe2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d109      	bne.n	8003fb0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8003f9c:	f7ff fc76 	bl	800388c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 ff1f 	bl	8004de8 <xTaskPriorityInherit>
 8003faa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003fac:	f7ff fc9c 	bl	80038e8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb2:	3324      	adds	r3, #36	; 0x24
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 fd1d 	bl	80049f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003fc0:	f000 f8bc 	bl	800413c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003fc4:	f000 fb6a 	bl	800469c <xTaskResumeAll>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f47f af69 	bne.w	8003ea2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8003fd0:	4b18      	ldr	r3, [pc, #96]	; (8004034 <xQueueSemaphoreTake+0x20c>)
 8003fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	e75f      	b.n	8003ea2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003fe2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003fe4:	f000 f8aa 	bl	800413c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fe8:	f000 fb58 	bl	800469c <xTaskResumeAll>
 8003fec:	e759      	b.n	8003ea2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003fee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ff0:	f000 f8a4 	bl	800413c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ff4:	f000 fb52 	bl	800469c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ff8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ffa:	f000 f8f1 	bl	80041e0 <prvIsQueueEmpty>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	f43f af4e 	beq.w	8003ea2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00d      	beq.n	8004028 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800400c:	f7ff fc3e 	bl	800388c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004010:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004012:	f000 f811 	bl	8004038 <prvGetDisinheritPriorityAfterTimeout>
 8004016:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800401e:	4618      	mov	r0, r3
 8004020:	f000 ffe6 	bl	8004ff0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004024:	f7ff fc60 	bl	80038e8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004028:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800402a:	4618      	mov	r0, r3
 800402c:	3738      	adds	r7, #56	; 0x38
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	e000ed04 	.word	0xe000ed04

08004038 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	2b00      	cmp	r3, #0
 8004046:	d006      	beq.n	8004056 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f1c3 0307 	rsb	r3, r3, #7
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	e001      	b.n	800405a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800405a:	68fb      	ldr	r3, [r7, #12]
	}
 800405c:	4618      	mov	r0, r3
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004074:	2300      	movs	r3, #0
 8004076:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10d      	bne.n	80040a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d14d      	bne.n	800412a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	4618      	mov	r0, r3
 8004094:	f000 ff28 	bl	8004ee8 <xTaskPriorityDisinherit>
 8004098:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	609a      	str	r2, [r3, #8]
 80040a0:	e043      	b.n	800412a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d119      	bne.n	80040dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6858      	ldr	r0, [r3, #4]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	461a      	mov	r2, r3
 80040b2:	68b9      	ldr	r1, [r7, #8]
 80040b4:	f001 f98a 	bl	80053cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	441a      	add	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d32b      	bcc.n	800412a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	605a      	str	r2, [r3, #4]
 80040da:	e026      	b.n	800412a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	68d8      	ldr	r0, [r3, #12]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	461a      	mov	r2, r3
 80040e6:	68b9      	ldr	r1, [r7, #8]
 80040e8:	f001 f970 	bl	80053cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	425b      	negs	r3, r3
 80040f6:	441a      	add	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d207      	bcs.n	8004118 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	425b      	negs	r3, r3
 8004112:	441a      	add	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b02      	cmp	r3, #2
 800411c:	d105      	bne.n	800412a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	3b01      	subs	r3, #1
 8004128:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004132:	697b      	ldr	r3, [r7, #20]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004144:	f7ff fba2 	bl	800388c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800414e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004150:	e011      	b.n	8004176 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	2b00      	cmp	r3, #0
 8004158:	d012      	beq.n	8004180 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3324      	adds	r3, #36	; 0x24
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fc6e 	bl	8004a40 <xTaskRemoveFromEventList>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800416a:	f000 fd41 	bl	8004bf0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	3b01      	subs	r3, #1
 8004172:	b2db      	uxtb	r3, r3
 8004174:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800417a:	2b00      	cmp	r3, #0
 800417c:	dce9      	bgt.n	8004152 <prvUnlockQueue+0x16>
 800417e:	e000      	b.n	8004182 <prvUnlockQueue+0x46>
					break;
 8004180:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	22ff      	movs	r2, #255	; 0xff
 8004186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800418a:	f7ff fbad 	bl	80038e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800418e:	f7ff fb7d 	bl	800388c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004198:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800419a:	e011      	b.n	80041c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d012      	beq.n	80041ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3310      	adds	r3, #16
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 fc49 	bl	8004a40 <xTaskRemoveFromEventList>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80041b4:	f000 fd1c 	bl	8004bf0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041b8:	7bbb      	ldrb	r3, [r7, #14]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	dce9      	bgt.n	800419c <prvUnlockQueue+0x60>
 80041c8:	e000      	b.n	80041cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	22ff      	movs	r2, #255	; 0xff
 80041d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80041d4:	f7ff fb88 	bl	80038e8 <vPortExitCritical>
}
 80041d8:	bf00      	nop
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041e8:	f7ff fb50 	bl	800388c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d102      	bne.n	80041fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041f4:	2301      	movs	r3, #1
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	e001      	b.n	80041fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041fe:	f7ff fb73 	bl	80038e8 <vPortExitCritical>

	return xReturn;
 8004202:	68fb      	ldr	r3, [r7, #12]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004214:	f7ff fb3a 	bl	800388c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004220:	429a      	cmp	r2, r3
 8004222:	d102      	bne.n	800422a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004224:	2301      	movs	r3, #1
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	e001      	b.n	800422e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800422e:	f7ff fb5b 	bl	80038e8 <vPortExitCritical>

	return xReturn;
 8004232:	68fb      	ldr	r3, [r7, #12]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08e      	sub	sp, #56	; 0x38
 8004240:	af04      	add	r7, sp, #16
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800424a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424c:	2b00      	cmp	r3, #0
 800424e:	d109      	bne.n	8004264 <xTaskCreateStatic+0x28>
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	623b      	str	r3, [r7, #32]
 8004262:	e7fe      	b.n	8004262 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004266:	2b00      	cmp	r3, #0
 8004268:	d109      	bne.n	800427e <xTaskCreateStatic+0x42>
 800426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	61fb      	str	r3, [r7, #28]
 800427c:	e7fe      	b.n	800427c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800427e:	2354      	movs	r3, #84	; 0x54
 8004280:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	2b54      	cmp	r3, #84	; 0x54
 8004286:	d009      	beq.n	800429c <xTaskCreateStatic+0x60>
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	61bb      	str	r3, [r7, #24]
 800429a:	e7fe      	b.n	800429a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800429c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800429e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d01e      	beq.n	80042e2 <xTaskCreateStatic+0xa6>
 80042a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d01b      	beq.n	80042e2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042b2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80042bc:	2300      	movs	r3, #0
 80042be:	9303      	str	r3, [sp, #12]
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	9302      	str	r3, [sp, #8]
 80042c4:	f107 0314 	add.w	r3, r7, #20
 80042c8:	9301      	str	r3, [sp, #4]
 80042ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	68b9      	ldr	r1, [r7, #8]
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 f850 	bl	800437a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042dc:	f000 f8d4 	bl	8004488 <prvAddNewTaskToReadyList>
 80042e0:	e001      	b.n	80042e6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042e6:	697b      	ldr	r3, [r7, #20]
	}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3728      	adds	r7, #40	; 0x28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08c      	sub	sp, #48	; 0x30
 80042f4:	af04      	add	r7, sp, #16
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004300:	88fb      	ldrh	r3, [r7, #6]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4618      	mov	r0, r3
 8004306:	f7fe ff11 	bl	800312c <pvPortMalloc>
 800430a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00e      	beq.n	8004330 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004312:	2054      	movs	r0, #84	; 0x54
 8004314:	f7fe ff0a 	bl	800312c <pvPortMalloc>
 8004318:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	631a      	str	r2, [r3, #48]	; 0x30
 8004326:	e005      	b.n	8004334 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004328:	6978      	ldr	r0, [r7, #20]
 800432a:	f7fe ffc1 	bl	80032b0 <vPortFree>
 800432e:	e001      	b.n	8004334 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d017      	beq.n	800436a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004342:	88fa      	ldrh	r2, [r7, #6]
 8004344:	2300      	movs	r3, #0
 8004346:	9303      	str	r3, [sp, #12]
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	9302      	str	r3, [sp, #8]
 800434c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434e:	9301      	str	r3, [sp, #4]
 8004350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 f80e 	bl	800437a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800435e:	69f8      	ldr	r0, [r7, #28]
 8004360:	f000 f892 	bl	8004488 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004364:	2301      	movs	r3, #1
 8004366:	61bb      	str	r3, [r7, #24]
 8004368:	e002      	b.n	8004370 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800436a:	f04f 33ff 	mov.w	r3, #4294967295
 800436e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004370:	69bb      	ldr	r3, [r7, #24]
	}
 8004372:	4618      	mov	r0, r3
 8004374:	3720      	adds	r7, #32
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b088      	sub	sp, #32
 800437e:	af00      	add	r7, sp, #0
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	607a      	str	r2, [r7, #4]
 8004386:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004392:	3b01      	subs	r3, #1
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	f023 0307 	bic.w	r3, r3, #7
 80043a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d009      	beq.n	80043c0 <prvInitialiseNewTask+0x46>
 80043ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b0:	f383 8811 	msr	BASEPRI, r3
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	e7fe      	b.n	80043be <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d01f      	beq.n	8004406 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043c6:	2300      	movs	r3, #0
 80043c8:	61fb      	str	r3, [r7, #28]
 80043ca:	e012      	b.n	80043f2 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	4413      	add	r3, r2
 80043d2:	7819      	ldrb	r1, [r3, #0]
 80043d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	4413      	add	r3, r2
 80043da:	3334      	adds	r3, #52	; 0x34
 80043dc:	460a      	mov	r2, r1
 80043de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	4413      	add	r3, r2
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d006      	beq.n	80043fa <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	3301      	adds	r3, #1
 80043f0:	61fb      	str	r3, [r7, #28]
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	2b0f      	cmp	r3, #15
 80043f6:	d9e9      	bls.n	80043cc <prvInitialiseNewTask+0x52>
 80043f8:	e000      	b.n	80043fc <prvInitialiseNewTask+0x82>
			{
				break;
 80043fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004404:	e003      	b.n	800440e <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	2b06      	cmp	r3, #6
 8004412:	d901      	bls.n	8004418 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004414:	2306      	movs	r3, #6
 8004416:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800441c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004422:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	2200      	movs	r2, #0
 8004428:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442c:	3304      	adds	r3, #4
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff f872 	bl	8003518 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	3318      	adds	r3, #24
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff f86d 	bl	8003518 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004442:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004446:	f1c3 0207 	rsb	r2, r3, #7
 800444a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004452:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004456:	2200      	movs	r2, #0
 8004458:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	68f9      	ldr	r1, [r7, #12]
 8004466:	69b8      	ldr	r0, [r7, #24]
 8004468:	f7ff f8ea 	bl	8003640 <pxPortInitialiseStack>
 800446c:	4602      	mov	r2, r0
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004474:	2b00      	cmp	r3, #0
 8004476:	d002      	beq.n	800447e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800447c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800447e:	bf00      	nop
 8004480:	3720      	adds	r7, #32
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004490:	f7ff f9fc 	bl	800388c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004494:	4b2a      	ldr	r3, [pc, #168]	; (8004540 <prvAddNewTaskToReadyList+0xb8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3301      	adds	r3, #1
 800449a:	4a29      	ldr	r2, [pc, #164]	; (8004540 <prvAddNewTaskToReadyList+0xb8>)
 800449c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800449e:	4b29      	ldr	r3, [pc, #164]	; (8004544 <prvAddNewTaskToReadyList+0xbc>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d109      	bne.n	80044ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044a6:	4a27      	ldr	r2, [pc, #156]	; (8004544 <prvAddNewTaskToReadyList+0xbc>)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044ac:	4b24      	ldr	r3, [pc, #144]	; (8004540 <prvAddNewTaskToReadyList+0xb8>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d110      	bne.n	80044d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044b4:	f000 fbc0 	bl	8004c38 <prvInitialiseTaskLists>
 80044b8:	e00d      	b.n	80044d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044ba:	4b23      	ldr	r3, [pc, #140]	; (8004548 <prvAddNewTaskToReadyList+0xc0>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d109      	bne.n	80044d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044c2:	4b20      	ldr	r3, [pc, #128]	; (8004544 <prvAddNewTaskToReadyList+0xbc>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d802      	bhi.n	80044d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044d0:	4a1c      	ldr	r2, [pc, #112]	; (8004544 <prvAddNewTaskToReadyList+0xbc>)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044d6:	4b1d      	ldr	r3, [pc, #116]	; (800454c <prvAddNewTaskToReadyList+0xc4>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3301      	adds	r3, #1
 80044dc:	4a1b      	ldr	r2, [pc, #108]	; (800454c <prvAddNewTaskToReadyList+0xc4>)
 80044de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	2201      	movs	r2, #1
 80044e6:	409a      	lsls	r2, r3
 80044e8:	4b19      	ldr	r3, [pc, #100]	; (8004550 <prvAddNewTaskToReadyList+0xc8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	4a18      	ldr	r2, [pc, #96]	; (8004550 <prvAddNewTaskToReadyList+0xc8>)
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4a15      	ldr	r2, [pc, #84]	; (8004554 <prvAddNewTaskToReadyList+0xcc>)
 8004500:	441a      	add	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3304      	adds	r3, #4
 8004506:	4619      	mov	r1, r3
 8004508:	4610      	mov	r0, r2
 800450a:	f7ff f812 	bl	8003532 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800450e:	f7ff f9eb 	bl	80038e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004512:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <prvAddNewTaskToReadyList+0xc0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00e      	beq.n	8004538 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800451a:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <prvAddNewTaskToReadyList+0xbc>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004524:	429a      	cmp	r2, r3
 8004526:	d207      	bcs.n	8004538 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004528:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <prvAddNewTaskToReadyList+0xd0>)
 800452a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004538:	bf00      	nop
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	20000fc0 	.word	0x20000fc0
 8004544:	20000ec0 	.word	0x20000ec0
 8004548:	20000fcc 	.word	0x20000fcc
 800454c:	20000fdc 	.word	0x20000fdc
 8004550:	20000fc8 	.word	0x20000fc8
 8004554:	20000ec4 	.word	0x20000ec4
 8004558:	e000ed04 	.word	0xe000ed04

0800455c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d016      	beq.n	800459c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800456e:	4b13      	ldr	r3, [pc, #76]	; (80045bc <vTaskDelay+0x60>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d009      	beq.n	800458a <vTaskDelay+0x2e>
 8004576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	60bb      	str	r3, [r7, #8]
 8004588:	e7fe      	b.n	8004588 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800458a:	f000 f879 	bl	8004680 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800458e:	2100      	movs	r1, #0
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 fe8b 	bl	80052ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004596:	f000 f881 	bl	800469c <xTaskResumeAll>
 800459a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d107      	bne.n	80045b2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80045a2:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <vTaskDelay+0x64>)
 80045a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045b2:	bf00      	nop
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000fe8 	.word	0x20000fe8
 80045c0:	e000ed04 	.word	0xe000ed04

080045c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08a      	sub	sp, #40	; 0x28
 80045c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045d2:	463a      	mov	r2, r7
 80045d4:	1d39      	adds	r1, r7, #4
 80045d6:	f107 0308 	add.w	r3, r7, #8
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fb ff78 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045e0:	6839      	ldr	r1, [r7, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	9202      	str	r2, [sp, #8]
 80045e8:	9301      	str	r3, [sp, #4]
 80045ea:	2300      	movs	r3, #0
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	2300      	movs	r3, #0
 80045f0:	460a      	mov	r2, r1
 80045f2:	491d      	ldr	r1, [pc, #116]	; (8004668 <vTaskStartScheduler+0xa4>)
 80045f4:	481d      	ldr	r0, [pc, #116]	; (800466c <vTaskStartScheduler+0xa8>)
 80045f6:	f7ff fe21 	bl	800423c <xTaskCreateStatic>
 80045fa:	4602      	mov	r2, r0
 80045fc:	4b1c      	ldr	r3, [pc, #112]	; (8004670 <vTaskStartScheduler+0xac>)
 80045fe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004600:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <vTaskStartScheduler+0xac>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004608:	2301      	movs	r3, #1
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	e001      	b.n	8004612 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d115      	bne.n	8004644 <vTaskStartScheduler+0x80>
 8004618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461c:	f383 8811 	msr	BASEPRI, r3
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800462a:	4b12      	ldr	r3, [pc, #72]	; (8004674 <vTaskStartScheduler+0xb0>)
 800462c:	f04f 32ff 	mov.w	r2, #4294967295
 8004630:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004632:	4b11      	ldr	r3, [pc, #68]	; (8004678 <vTaskStartScheduler+0xb4>)
 8004634:	2201      	movs	r2, #1
 8004636:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004638:	4b10      	ldr	r3, [pc, #64]	; (800467c <vTaskStartScheduler+0xb8>)
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800463e:	f7ff f887 	bl	8003750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004642:	e00d      	b.n	8004660 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464a:	d109      	bne.n	8004660 <vTaskStartScheduler+0x9c>
 800464c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	e7fe      	b.n	800465e <vTaskStartScheduler+0x9a>
}
 8004660:	bf00      	nop
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	08005da8 	.word	0x08005da8
 800466c:	08004c09 	.word	0x08004c09
 8004670:	20000fe4 	.word	0x20000fe4
 8004674:	20000fe0 	.word	0x20000fe0
 8004678:	20000fcc 	.word	0x20000fcc
 800467c:	20000fc4 	.word	0x20000fc4

08004680 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004684:	4b04      	ldr	r3, [pc, #16]	; (8004698 <vTaskSuspendAll+0x18>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3301      	adds	r3, #1
 800468a:	4a03      	ldr	r2, [pc, #12]	; (8004698 <vTaskSuspendAll+0x18>)
 800468c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800468e:	bf00      	nop
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	20000fe8 	.word	0x20000fe8

0800469c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046a6:	2300      	movs	r3, #0
 80046a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046aa:	4b41      	ldr	r3, [pc, #260]	; (80047b0 <xTaskResumeAll+0x114>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d109      	bne.n	80046c6 <xTaskResumeAll+0x2a>
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	e7fe      	b.n	80046c4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046c6:	f7ff f8e1 	bl	800388c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046ca:	4b39      	ldr	r3, [pc, #228]	; (80047b0 <xTaskResumeAll+0x114>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	4a37      	ldr	r2, [pc, #220]	; (80047b0 <xTaskResumeAll+0x114>)
 80046d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046d4:	4b36      	ldr	r3, [pc, #216]	; (80047b0 <xTaskResumeAll+0x114>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d161      	bne.n	80047a0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046dc:	4b35      	ldr	r3, [pc, #212]	; (80047b4 <xTaskResumeAll+0x118>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d05d      	beq.n	80047a0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046e4:	e02e      	b.n	8004744 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046e6:	4b34      	ldr	r3, [pc, #208]	; (80047b8 <xTaskResumeAll+0x11c>)
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	3318      	adds	r3, #24
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fe ff7a 	bl	80035ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	3304      	adds	r3, #4
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fe ff75 	bl	80035ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004706:	2201      	movs	r2, #1
 8004708:	409a      	lsls	r2, r3
 800470a:	4b2c      	ldr	r3, [pc, #176]	; (80047bc <xTaskResumeAll+0x120>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4313      	orrs	r3, r2
 8004710:	4a2a      	ldr	r2, [pc, #168]	; (80047bc <xTaskResumeAll+0x120>)
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4a27      	ldr	r2, [pc, #156]	; (80047c0 <xTaskResumeAll+0x124>)
 8004722:	441a      	add	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	3304      	adds	r3, #4
 8004728:	4619      	mov	r1, r3
 800472a:	4610      	mov	r0, r2
 800472c:	f7fe ff01 	bl	8003532 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004734:	4b23      	ldr	r3, [pc, #140]	; (80047c4 <xTaskResumeAll+0x128>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473a:	429a      	cmp	r2, r3
 800473c:	d302      	bcc.n	8004744 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800473e:	4b22      	ldr	r3, [pc, #136]	; (80047c8 <xTaskResumeAll+0x12c>)
 8004740:	2201      	movs	r2, #1
 8004742:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004744:	4b1c      	ldr	r3, [pc, #112]	; (80047b8 <xTaskResumeAll+0x11c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1cc      	bne.n	80046e6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004752:	f000 fb0b 	bl	8004d6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004756:	4b1d      	ldr	r3, [pc, #116]	; (80047cc <xTaskResumeAll+0x130>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d010      	beq.n	8004784 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004762:	f000 f837 	bl	80047d4 <xTaskIncrementTick>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800476c:	4b16      	ldr	r3, [pc, #88]	; (80047c8 <xTaskResumeAll+0x12c>)
 800476e:	2201      	movs	r2, #1
 8004770:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3b01      	subs	r3, #1
 8004776:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f1      	bne.n	8004762 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800477e:	4b13      	ldr	r3, [pc, #76]	; (80047cc <xTaskResumeAll+0x130>)
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004784:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <xTaskResumeAll+0x12c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d009      	beq.n	80047a0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800478c:	2301      	movs	r3, #1
 800478e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004790:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <xTaskResumeAll+0x134>)
 8004792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047a0:	f7ff f8a2 	bl	80038e8 <vPortExitCritical>

	return xAlreadyYielded;
 80047a4:	68bb      	ldr	r3, [r7, #8]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000fe8 	.word	0x20000fe8
 80047b4:	20000fc0 	.word	0x20000fc0
 80047b8:	20000f80 	.word	0x20000f80
 80047bc:	20000fc8 	.word	0x20000fc8
 80047c0:	20000ec4 	.word	0x20000ec4
 80047c4:	20000ec0 	.word	0x20000ec0
 80047c8:	20000fd4 	.word	0x20000fd4
 80047cc:	20000fd0 	.word	0x20000fd0
 80047d0:	e000ed04 	.word	0xe000ed04

080047d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047da:	2300      	movs	r3, #0
 80047dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047de:	4b4e      	ldr	r3, [pc, #312]	; (8004918 <xTaskIncrementTick+0x144>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f040 8087 	bne.w	80048f6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047e8:	4b4c      	ldr	r3, [pc, #304]	; (800491c <xTaskIncrementTick+0x148>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3301      	adds	r3, #1
 80047ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047f0:	4a4a      	ldr	r2, [pc, #296]	; (800491c <xTaskIncrementTick+0x148>)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d11f      	bne.n	800483c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80047fc:	4b48      	ldr	r3, [pc, #288]	; (8004920 <xTaskIncrementTick+0x14c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d009      	beq.n	800481a <xTaskIncrementTick+0x46>
 8004806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	e7fe      	b.n	8004818 <xTaskIncrementTick+0x44>
 800481a:	4b41      	ldr	r3, [pc, #260]	; (8004920 <xTaskIncrementTick+0x14c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	4b40      	ldr	r3, [pc, #256]	; (8004924 <xTaskIncrementTick+0x150>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a3e      	ldr	r2, [pc, #248]	; (8004920 <xTaskIncrementTick+0x14c>)
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	4a3e      	ldr	r2, [pc, #248]	; (8004924 <xTaskIncrementTick+0x150>)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	4b3e      	ldr	r3, [pc, #248]	; (8004928 <xTaskIncrementTick+0x154>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3301      	adds	r3, #1
 8004834:	4a3c      	ldr	r2, [pc, #240]	; (8004928 <xTaskIncrementTick+0x154>)
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	f000 fa98 	bl	8004d6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800483c:	4b3b      	ldr	r3, [pc, #236]	; (800492c <xTaskIncrementTick+0x158>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	429a      	cmp	r2, r3
 8004844:	d348      	bcc.n	80048d8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004846:	4b36      	ldr	r3, [pc, #216]	; (8004920 <xTaskIncrementTick+0x14c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d104      	bne.n	800485a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004850:	4b36      	ldr	r3, [pc, #216]	; (800492c <xTaskIncrementTick+0x158>)
 8004852:	f04f 32ff 	mov.w	r2, #4294967295
 8004856:	601a      	str	r2, [r3, #0]
					break;
 8004858:	e03e      	b.n	80048d8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800485a:	4b31      	ldr	r3, [pc, #196]	; (8004920 <xTaskIncrementTick+0x14c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	429a      	cmp	r2, r3
 8004870:	d203      	bcs.n	800487a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004872:	4a2e      	ldr	r2, [pc, #184]	; (800492c <xTaskIncrementTick+0x158>)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004878:	e02e      	b.n	80048d8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	3304      	adds	r3, #4
 800487e:	4618      	mov	r0, r3
 8004880:	f7fe feb4 	bl	80035ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004888:	2b00      	cmp	r3, #0
 800488a:	d004      	beq.n	8004896 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	3318      	adds	r3, #24
 8004890:	4618      	mov	r0, r3
 8004892:	f7fe feab 	bl	80035ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489a:	2201      	movs	r2, #1
 800489c:	409a      	lsls	r2, r3
 800489e:	4b24      	ldr	r3, [pc, #144]	; (8004930 <xTaskIncrementTick+0x15c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	4a22      	ldr	r2, [pc, #136]	; (8004930 <xTaskIncrementTick+0x15c>)
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4a1f      	ldr	r2, [pc, #124]	; (8004934 <xTaskIncrementTick+0x160>)
 80048b6:	441a      	add	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	3304      	adds	r3, #4
 80048bc:	4619      	mov	r1, r3
 80048be:	4610      	mov	r0, r2
 80048c0:	f7fe fe37 	bl	8003532 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c8:	4b1b      	ldr	r3, [pc, #108]	; (8004938 <xTaskIncrementTick+0x164>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d3b9      	bcc.n	8004846 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80048d2:	2301      	movs	r3, #1
 80048d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048d6:	e7b6      	b.n	8004846 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048d8:	4b17      	ldr	r3, [pc, #92]	; (8004938 <xTaskIncrementTick+0x164>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048de:	4915      	ldr	r1, [pc, #84]	; (8004934 <xTaskIncrementTick+0x160>)
 80048e0:	4613      	mov	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	440b      	add	r3, r1
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d907      	bls.n	8004900 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80048f0:	2301      	movs	r3, #1
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	e004      	b.n	8004900 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80048f6:	4b11      	ldr	r3, [pc, #68]	; (800493c <xTaskIncrementTick+0x168>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3301      	adds	r3, #1
 80048fc:	4a0f      	ldr	r2, [pc, #60]	; (800493c <xTaskIncrementTick+0x168>)
 80048fe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004900:	4b0f      	ldr	r3, [pc, #60]	; (8004940 <xTaskIncrementTick+0x16c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004908:	2301      	movs	r3, #1
 800490a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800490c:	697b      	ldr	r3, [r7, #20]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20000fe8 	.word	0x20000fe8
 800491c:	20000fc4 	.word	0x20000fc4
 8004920:	20000f78 	.word	0x20000f78
 8004924:	20000f7c 	.word	0x20000f7c
 8004928:	20000fd8 	.word	0x20000fd8
 800492c:	20000fe0 	.word	0x20000fe0
 8004930:	20000fc8 	.word	0x20000fc8
 8004934:	20000ec4 	.word	0x20000ec4
 8004938:	20000ec0 	.word	0x20000ec0
 800493c:	20000fd0 	.word	0x20000fd0
 8004940:	20000fd4 	.word	0x20000fd4

08004944 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800494a:	4b26      	ldr	r3, [pc, #152]	; (80049e4 <vTaskSwitchContext+0xa0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004952:	4b25      	ldr	r3, [pc, #148]	; (80049e8 <vTaskSwitchContext+0xa4>)
 8004954:	2201      	movs	r2, #1
 8004956:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004958:	e03e      	b.n	80049d8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800495a:	4b23      	ldr	r3, [pc, #140]	; (80049e8 <vTaskSwitchContext+0xa4>)
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004960:	4b22      	ldr	r3, [pc, #136]	; (80049ec <vTaskSwitchContext+0xa8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	fab3 f383 	clz	r3, r3
 800496c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800496e:	7afb      	ldrb	r3, [r7, #11]
 8004970:	f1c3 031f 	rsb	r3, r3, #31
 8004974:	617b      	str	r3, [r7, #20]
 8004976:	491e      	ldr	r1, [pc, #120]	; (80049f0 <vTaskSwitchContext+0xac>)
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	4613      	mov	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <vTaskSwitchContext+0x5a>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	607b      	str	r3, [r7, #4]
 800499c:	e7fe      	b.n	800499c <vTaskSwitchContext+0x58>
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4a11      	ldr	r2, [pc, #68]	; (80049f0 <vTaskSwitchContext+0xac>)
 80049aa:	4413      	add	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	605a      	str	r2, [r3, #4]
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	3308      	adds	r3, #8
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d104      	bne.n	80049ce <vTaskSwitchContext+0x8a>
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	605a      	str	r2, [r3, #4]
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	4a07      	ldr	r2, [pc, #28]	; (80049f4 <vTaskSwitchContext+0xb0>)
 80049d6:	6013      	str	r3, [r2, #0]
}
 80049d8:	bf00      	nop
 80049da:	371c      	adds	r7, #28
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	20000fe8 	.word	0x20000fe8
 80049e8:	20000fd4 	.word	0x20000fd4
 80049ec:	20000fc8 	.word	0x20000fc8
 80049f0:	20000ec4 	.word	0x20000ec4
 80049f4:	20000ec0 	.word	0x20000ec0

080049f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d109      	bne.n	8004a1c <vTaskPlaceOnEventList+0x24>
 8004a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	60fb      	str	r3, [r7, #12]
 8004a1a:	e7fe      	b.n	8004a1a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a1c:	4b07      	ldr	r3, [pc, #28]	; (8004a3c <vTaskPlaceOnEventList+0x44>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3318      	adds	r3, #24
 8004a22:	4619      	mov	r1, r3
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7fe fda8 	bl	800357a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	6838      	ldr	r0, [r7, #0]
 8004a2e:	f000 fc3d 	bl	80052ac <prvAddCurrentTaskToDelayedList>
}
 8004a32:	bf00      	nop
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	20000ec0 	.word	0x20000ec0

08004a40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d109      	bne.n	8004a6a <xTaskRemoveFromEventList+0x2a>
 8004a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5a:	f383 8811 	msr	BASEPRI, r3
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	e7fe      	b.n	8004a68 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	3318      	adds	r3, #24
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fe fdbc 	bl	80035ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a74:	4b1d      	ldr	r3, [pc, #116]	; (8004aec <xTaskRemoveFromEventList+0xac>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d11c      	bne.n	8004ab6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fe fdb3 	bl	80035ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	409a      	lsls	r2, r3
 8004a8e:	4b18      	ldr	r3, [pc, #96]	; (8004af0 <xTaskRemoveFromEventList+0xb0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	4a16      	ldr	r2, [pc, #88]	; (8004af0 <xTaskRemoveFromEventList+0xb0>)
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4a13      	ldr	r2, [pc, #76]	; (8004af4 <xTaskRemoveFromEventList+0xb4>)
 8004aa6:	441a      	add	r2, r3
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	4619      	mov	r1, r3
 8004aae:	4610      	mov	r0, r2
 8004ab0:	f7fe fd3f 	bl	8003532 <vListInsertEnd>
 8004ab4:	e005      	b.n	8004ac2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	3318      	adds	r3, #24
 8004aba:	4619      	mov	r1, r3
 8004abc:	480e      	ldr	r0, [pc, #56]	; (8004af8 <xTaskRemoveFromEventList+0xb8>)
 8004abe:	f7fe fd38 	bl	8003532 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac6:	4b0d      	ldr	r3, [pc, #52]	; (8004afc <xTaskRemoveFromEventList+0xbc>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d905      	bls.n	8004adc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ad4:	4b0a      	ldr	r3, [pc, #40]	; (8004b00 <xTaskRemoveFromEventList+0xc0>)
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	e001      	b.n	8004ae0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004adc:	2300      	movs	r3, #0
 8004ade:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ae0:	697b      	ldr	r3, [r7, #20]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	20000fe8 	.word	0x20000fe8
 8004af0:	20000fc8 	.word	0x20000fc8
 8004af4:	20000ec4 	.word	0x20000ec4
 8004af8:	20000f80 	.word	0x20000f80
 8004afc:	20000ec0 	.word	0x20000ec0
 8004b00:	20000fd4 	.word	0x20000fd4

08004b04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b0c:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <vTaskInternalSetTimeOutState+0x24>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b14:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <vTaskInternalSetTimeOutState+0x28>)
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	605a      	str	r2, [r3, #4]
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	20000fd8 	.word	0x20000fd8
 8004b2c:	20000fc4 	.word	0x20000fc4

08004b30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d109      	bne.n	8004b54 <xTaskCheckForTimeOut+0x24>
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	613b      	str	r3, [r7, #16]
 8004b52:	e7fe      	b.n	8004b52 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d109      	bne.n	8004b6e <xTaskCheckForTimeOut+0x3e>
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	e7fe      	b.n	8004b6c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004b6e:	f7fe fe8d 	bl	800388c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b72:	4b1d      	ldr	r3, [pc, #116]	; (8004be8 <xTaskCheckForTimeOut+0xb8>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8a:	d102      	bne.n	8004b92 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	61fb      	str	r3, [r7, #28]
 8004b90:	e023      	b.n	8004bda <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	4b15      	ldr	r3, [pc, #84]	; (8004bec <xTaskCheckForTimeOut+0xbc>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d007      	beq.n	8004bae <xTaskCheckForTimeOut+0x7e>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d302      	bcc.n	8004bae <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	61fb      	str	r3, [r7, #28]
 8004bac:	e015      	b.n	8004bda <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d20b      	bcs.n	8004bd0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	1ad2      	subs	r2, r2, r3
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7ff ff9d 	bl	8004b04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61fb      	str	r3, [r7, #28]
 8004bce:	e004      	b.n	8004bda <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004bda:	f7fe fe85 	bl	80038e8 <vPortExitCritical>

	return xReturn;
 8004bde:	69fb      	ldr	r3, [r7, #28]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3720      	adds	r7, #32
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	20000fc4 	.word	0x20000fc4
 8004bec:	20000fd8 	.word	0x20000fd8

08004bf0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004bf4:	4b03      	ldr	r3, [pc, #12]	; (8004c04 <vTaskMissedYield+0x14>)
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]
}
 8004bfa:	bf00      	nop
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	20000fd4 	.word	0x20000fd4

08004c08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c10:	f000 f852 	bl	8004cb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c14:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <prvIdleTask+0x28>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d9f9      	bls.n	8004c10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c1c:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <prvIdleTask+0x2c>)
 8004c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c2c:	e7f0      	b.n	8004c10 <prvIdleTask+0x8>
 8004c2e:	bf00      	nop
 8004c30:	20000ec4 	.word	0x20000ec4
 8004c34:	e000ed04 	.word	0xe000ed04

08004c38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c3e:	2300      	movs	r3, #0
 8004c40:	607b      	str	r3, [r7, #4]
 8004c42:	e00c      	b.n	8004c5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	4613      	mov	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4a12      	ldr	r2, [pc, #72]	; (8004c98 <prvInitialiseTaskLists+0x60>)
 8004c50:	4413      	add	r3, r2
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7fe fc40 	bl	80034d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	607b      	str	r3, [r7, #4]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b06      	cmp	r3, #6
 8004c62:	d9ef      	bls.n	8004c44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c64:	480d      	ldr	r0, [pc, #52]	; (8004c9c <prvInitialiseTaskLists+0x64>)
 8004c66:	f7fe fc37 	bl	80034d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c6a:	480d      	ldr	r0, [pc, #52]	; (8004ca0 <prvInitialiseTaskLists+0x68>)
 8004c6c:	f7fe fc34 	bl	80034d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c70:	480c      	ldr	r0, [pc, #48]	; (8004ca4 <prvInitialiseTaskLists+0x6c>)
 8004c72:	f7fe fc31 	bl	80034d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c76:	480c      	ldr	r0, [pc, #48]	; (8004ca8 <prvInitialiseTaskLists+0x70>)
 8004c78:	f7fe fc2e 	bl	80034d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c7c:	480b      	ldr	r0, [pc, #44]	; (8004cac <prvInitialiseTaskLists+0x74>)
 8004c7e:	f7fe fc2b 	bl	80034d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c82:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <prvInitialiseTaskLists+0x78>)
 8004c84:	4a05      	ldr	r2, [pc, #20]	; (8004c9c <prvInitialiseTaskLists+0x64>)
 8004c86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c88:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <prvInitialiseTaskLists+0x7c>)
 8004c8a:	4a05      	ldr	r2, [pc, #20]	; (8004ca0 <prvInitialiseTaskLists+0x68>)
 8004c8c:	601a      	str	r2, [r3, #0]
}
 8004c8e:	bf00      	nop
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	20000ec4 	.word	0x20000ec4
 8004c9c:	20000f50 	.word	0x20000f50
 8004ca0:	20000f64 	.word	0x20000f64
 8004ca4:	20000f80 	.word	0x20000f80
 8004ca8:	20000f94 	.word	0x20000f94
 8004cac:	20000fac 	.word	0x20000fac
 8004cb0:	20000f78 	.word	0x20000f78
 8004cb4:	20000f7c 	.word	0x20000f7c

08004cb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cbe:	e019      	b.n	8004cf4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004cc0:	f7fe fde4 	bl	800388c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cc4:	4b0f      	ldr	r3, [pc, #60]	; (8004d04 <prvCheckTasksWaitingTermination+0x4c>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fe fc8b 	bl	80035ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004cd6:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <prvCheckTasksWaitingTermination+0x50>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	4a0a      	ldr	r2, [pc, #40]	; (8004d08 <prvCheckTasksWaitingTermination+0x50>)
 8004cde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ce0:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <prvCheckTasksWaitingTermination+0x54>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	4a09      	ldr	r2, [pc, #36]	; (8004d0c <prvCheckTasksWaitingTermination+0x54>)
 8004ce8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004cea:	f7fe fdfd 	bl	80038e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f80e 	bl	8004d10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cf4:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <prvCheckTasksWaitingTermination+0x54>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e1      	bne.n	8004cc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004cfc:	bf00      	nop
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	20000f94 	.word	0x20000f94
 8004d08:	20000fc0 	.word	0x20000fc0
 8004d0c:	20000fa8 	.word	0x20000fa8

08004d10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d108      	bne.n	8004d34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fe fac2 	bl	80032b0 <vPortFree>
				vPortFree( pxTCB );
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7fe fabf 	bl	80032b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d32:	e017      	b.n	8004d64 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d103      	bne.n	8004d46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fe fab6 	bl	80032b0 <vPortFree>
	}
 8004d44:	e00e      	b.n	8004d64 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d009      	beq.n	8004d64 <prvDeleteTCB+0x54>
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	e7fe      	b.n	8004d62 <prvDeleteTCB+0x52>
	}
 8004d64:	bf00      	nop
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d72:	4b0c      	ldr	r3, [pc, #48]	; (8004da4 <prvResetNextTaskUnblockTime+0x38>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d104      	bne.n	8004d86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d7c:	4b0a      	ldr	r3, [pc, #40]	; (8004da8 <prvResetNextTaskUnblockTime+0x3c>)
 8004d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d84:	e008      	b.n	8004d98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d86:	4b07      	ldr	r3, [pc, #28]	; (8004da4 <prvResetNextTaskUnblockTime+0x38>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	4a04      	ldr	r2, [pc, #16]	; (8004da8 <prvResetNextTaskUnblockTime+0x3c>)
 8004d96:	6013      	str	r3, [r2, #0]
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	20000f78 	.word	0x20000f78
 8004da8:	20000fe0 	.word	0x20000fe0

08004dac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004db2:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <xTaskGetSchedulerState+0x34>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d102      	bne.n	8004dc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	607b      	str	r3, [r7, #4]
 8004dbe:	e008      	b.n	8004dd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dc0:	4b08      	ldr	r3, [pc, #32]	; (8004de4 <xTaskGetSchedulerState+0x38>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d102      	bne.n	8004dce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004dc8:	2302      	movs	r3, #2
 8004dca:	607b      	str	r3, [r7, #4]
 8004dcc:	e001      	b.n	8004dd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004dd2:	687b      	ldr	r3, [r7, #4]
	}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	20000fcc 	.word	0x20000fcc
 8004de4:	20000fe8 	.word	0x20000fe8

08004de8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004df4:	2300      	movs	r3, #0
 8004df6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d069      	beq.n	8004ed2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e02:	4b36      	ldr	r3, [pc, #216]	; (8004edc <xTaskPriorityInherit+0xf4>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d259      	bcs.n	8004ec0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	db06      	blt.n	8004e22 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e14:	4b31      	ldr	r3, [pc, #196]	; (8004edc <xTaskPriorityInherit+0xf4>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1a:	f1c3 0207 	rsb	r2, r3, #7
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	6959      	ldr	r1, [r3, #20]
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4a2b      	ldr	r2, [pc, #172]	; (8004ee0 <xTaskPriorityInherit+0xf8>)
 8004e34:	4413      	add	r3, r2
 8004e36:	4299      	cmp	r1, r3
 8004e38:	d13a      	bne.n	8004eb0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fe fbd4 	bl	80035ec <uxListRemove>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d115      	bne.n	8004e76 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4e:	4924      	ldr	r1, [pc, #144]	; (8004ee0 <xTaskPriorityInherit+0xf8>)
 8004e50:	4613      	mov	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10a      	bne.n	8004e76 <xTaskPriorityInherit+0x8e>
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e64:	2201      	movs	r2, #1
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	43da      	mvns	r2, r3
 8004e6c:	4b1d      	ldr	r3, [pc, #116]	; (8004ee4 <xTaskPriorityInherit+0xfc>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4013      	ands	r3, r2
 8004e72:	4a1c      	ldr	r2, [pc, #112]	; (8004ee4 <xTaskPriorityInherit+0xfc>)
 8004e74:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e76:	4b19      	ldr	r3, [pc, #100]	; (8004edc <xTaskPriorityInherit+0xf4>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e84:	2201      	movs	r2, #1
 8004e86:	409a      	lsls	r2, r3
 8004e88:	4b16      	ldr	r3, [pc, #88]	; (8004ee4 <xTaskPriorityInherit+0xfc>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	4a15      	ldr	r2, [pc, #84]	; (8004ee4 <xTaskPriorityInherit+0xfc>)
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e96:	4613      	mov	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4a10      	ldr	r2, [pc, #64]	; (8004ee0 <xTaskPriorityInherit+0xf8>)
 8004ea0:	441a      	add	r2, r3
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	f7fe fb42 	bl	8003532 <vListInsertEnd>
 8004eae:	e004      	b.n	8004eba <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004eb0:	4b0a      	ldr	r3, [pc, #40]	; (8004edc <xTaskPriorityInherit+0xf4>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	e008      	b.n	8004ed2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ec4:	4b05      	ldr	r3, [pc, #20]	; (8004edc <xTaskPriorityInherit+0xf4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d201      	bcs.n	8004ed2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
	}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	20000ec0 	.word	0x20000ec0
 8004ee0:	20000ec4 	.word	0x20000ec4
 8004ee4:	20000fc8 	.word	0x20000fc8

08004ee8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d06c      	beq.n	8004fd8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004efe:	4b39      	ldr	r3, [pc, #228]	; (8004fe4 <xTaskPriorityDisinherit+0xfc>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d009      	beq.n	8004f1c <xTaskPriorityDisinherit+0x34>
 8004f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0c:	f383 8811 	msr	BASEPRI, r3
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	e7fe      	b.n	8004f1a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d109      	bne.n	8004f38 <xTaskPriorityDisinherit+0x50>
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	e7fe      	b.n	8004f36 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f3c:	1e5a      	subs	r2, r3, #1
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d044      	beq.n	8004fd8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d140      	bne.n	8004fd8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	3304      	adds	r3, #4
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fe fb46 	bl	80035ec <uxListRemove>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d115      	bne.n	8004f92 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6a:	491f      	ldr	r1, [pc, #124]	; (8004fe8 <xTaskPriorityDisinherit+0x100>)
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10a      	bne.n	8004f92 <xTaskPriorityDisinherit+0xaa>
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	2201      	movs	r2, #1
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	43da      	mvns	r2, r3
 8004f88:	4b18      	ldr	r3, [pc, #96]	; (8004fec <xTaskPriorityDisinherit+0x104>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	4a17      	ldr	r2, [pc, #92]	; (8004fec <xTaskPriorityDisinherit+0x104>)
 8004f90:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9e:	f1c3 0207 	rsb	r2, r3, #7
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	2201      	movs	r2, #1
 8004fac:	409a      	lsls	r2, r3
 8004fae:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <xTaskPriorityDisinherit+0x104>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	4a0d      	ldr	r2, [pc, #52]	; (8004fec <xTaskPriorityDisinherit+0x104>)
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4a08      	ldr	r2, [pc, #32]	; (8004fe8 <xTaskPriorityDisinherit+0x100>)
 8004fc6:	441a      	add	r2, r3
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4610      	mov	r0, r2
 8004fd0:	f7fe faaf 	bl	8003532 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004fd8:	697b      	ldr	r3, [r7, #20]
	}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000ec0 	.word	0x20000ec0
 8004fe8:	20000ec4 	.word	0x20000ec4
 8004fec:	20000fc8 	.word	0x20000fc8

08004ff0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004ffe:	2301      	movs	r3, #1
 8005000:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8081 	beq.w	800510c <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800500e:	2b00      	cmp	r3, #0
 8005010:	d109      	bne.n	8005026 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8005012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	e7fe      	b.n	8005024 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	429a      	cmp	r2, r3
 800502e:	d902      	bls.n	8005036 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	61fb      	str	r3, [r7, #28]
 8005034:	e002      	b.n	800503c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	69fa      	ldr	r2, [r7, #28]
 8005042:	429a      	cmp	r2, r3
 8005044:	d062      	beq.n	800510c <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	429a      	cmp	r2, r3
 800504e:	d15d      	bne.n	800510c <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005050:	4b30      	ldr	r3, [pc, #192]	; (8005114 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	429a      	cmp	r2, r3
 8005058:	d109      	bne.n	800506e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	60bb      	str	r3, [r7, #8]
 800506c:	e7fe      	b.n	800506c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005072:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	69fa      	ldr	r2, [r7, #28]
 8005078:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	2b00      	cmp	r3, #0
 8005080:	db04      	blt.n	800508c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	f1c3 0207 	rsb	r2, r3, #7
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	6959      	ldr	r1, [r3, #20]
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4a1f      	ldr	r2, [pc, #124]	; (8005118 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800509c:	4413      	add	r3, r2
 800509e:	4299      	cmp	r1, r3
 80050a0:	d134      	bne.n	800510c <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	3304      	adds	r3, #4
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fe faa0 	bl	80035ec <uxListRemove>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d115      	bne.n	80050de <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b6:	4918      	ldr	r1, [pc, #96]	; (8005118 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80050b8:	4613      	mov	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	440b      	add	r3, r1
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10a      	bne.n	80050de <vTaskPriorityDisinheritAfterTimeout+0xee>
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	2201      	movs	r2, #1
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	43da      	mvns	r2, r3
 80050d4:	4b11      	ldr	r3, [pc, #68]	; (800511c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4013      	ands	r3, r2
 80050da:	4a10      	ldr	r2, [pc, #64]	; (800511c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80050dc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e2:	2201      	movs	r2, #1
 80050e4:	409a      	lsls	r2, r3
 80050e6:	4b0d      	ldr	r3, [pc, #52]	; (800511c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	4a0b      	ldr	r2, [pc, #44]	; (800511c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80050ee:	6013      	str	r3, [r2, #0]
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f4:	4613      	mov	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4a06      	ldr	r2, [pc, #24]	; (8005118 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80050fe:	441a      	add	r2, r3
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	3304      	adds	r3, #4
 8005104:	4619      	mov	r1, r3
 8005106:	4610      	mov	r0, r2
 8005108:	f7fe fa13 	bl	8003532 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800510c:	bf00      	nop
 800510e:	3720      	adds	r7, #32
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	20000ec0 	.word	0x20000ec0
 8005118:	20000ec4 	.word	0x20000ec4
 800511c:	20000fc8 	.word	0x20000fc8

08005120 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005124:	4b07      	ldr	r3, [pc, #28]	; (8005144 <pvTaskIncrementMutexHeldCount+0x24>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d004      	beq.n	8005136 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800512c:	4b05      	ldr	r3, [pc, #20]	; (8005144 <pvTaskIncrementMutexHeldCount+0x24>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005132:	3201      	adds	r2, #1
 8005134:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005136:	4b03      	ldr	r3, [pc, #12]	; (8005144 <pvTaskIncrementMutexHeldCount+0x24>)
 8005138:	681b      	ldr	r3, [r3, #0]
	}
 800513a:	4618      	mov	r0, r3
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	20000ec0 	.word	0x20000ec0

08005148 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08a      	sub	sp, #40	; 0x28
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	4613      	mov	r3, r2
 8005156:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005158:	2301      	movs	r3, #1
 800515a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d109      	bne.n	8005176 <xTaskGenericNotify+0x2e>
 8005162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	61bb      	str	r3, [r7, #24]
 8005174:	e7fe      	b.n	8005174 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800517a:	f7fe fb87 	bl	800388c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005192:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d827      	bhi.n	80051f2 <xTaskGenericNotify+0xaa>
 80051a2:	a201      	add	r2, pc, #4	; (adr r2, 80051a8 <xTaskGenericNotify+0x60>)
 80051a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a8:	08005211 	.word	0x08005211
 80051ac:	080051bd 	.word	0x080051bd
 80051b0:	080051cb 	.word	0x080051cb
 80051b4:	080051d7 	.word	0x080051d7
 80051b8:	080051df 	.word	0x080051df
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	431a      	orrs	r2, r3
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80051c8:	e025      	b.n	8005216 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80051d4:	e01f      	b.n	8005216 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80051dc:	e01b      	b.n	8005216 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80051de:	7ffb      	ldrb	r3, [r7, #31]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d003      	beq.n	80051ec <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80051ea:	e014      	b.n	8005216 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 80051ec:	2300      	movs	r3, #0
 80051ee:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80051f0:	e011      	b.n	8005216 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fa:	d00b      	beq.n	8005214 <xTaskGenericNotify+0xcc>
 80051fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	e7fe      	b.n	800520e <xTaskGenericNotify+0xc6>
					break;
 8005210:	bf00      	nop
 8005212:	e000      	b.n	8005216 <xTaskGenericNotify+0xce>

					break;
 8005214:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005216:	7ffb      	ldrb	r3, [r7, #31]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d138      	bne.n	800528e <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	3304      	adds	r3, #4
 8005220:	4618      	mov	r0, r3
 8005222:	f7fe f9e3 	bl	80035ec <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522a:	2201      	movs	r2, #1
 800522c:	409a      	lsls	r2, r3
 800522e:	4b1b      	ldr	r3, [pc, #108]	; (800529c <xTaskGenericNotify+0x154>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4313      	orrs	r3, r2
 8005234:	4a19      	ldr	r2, [pc, #100]	; (800529c <xTaskGenericNotify+0x154>)
 8005236:	6013      	str	r3, [r2, #0]
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4a16      	ldr	r2, [pc, #88]	; (80052a0 <xTaskGenericNotify+0x158>)
 8005246:	441a      	add	r2, r3
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	3304      	adds	r3, #4
 800524c:	4619      	mov	r1, r3
 800524e:	4610      	mov	r0, r2
 8005250:	f7fe f96f 	bl	8003532 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	2b00      	cmp	r3, #0
 800525a:	d009      	beq.n	8005270 <xTaskGenericNotify+0x128>
 800525c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	613b      	str	r3, [r7, #16]
 800526e:	e7fe      	b.n	800526e <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005274:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <xTaskGenericNotify+0x15c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	429a      	cmp	r2, r3
 800527c:	d907      	bls.n	800528e <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800527e:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <xTaskGenericNotify+0x160>)
 8005280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005284:	601a      	str	r2, [r3, #0]
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800528e:	f7fe fb2b 	bl	80038e8 <vPortExitCritical>

		return xReturn;
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005294:	4618      	mov	r0, r3
 8005296:	3728      	adds	r7, #40	; 0x28
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	20000fc8 	.word	0x20000fc8
 80052a0:	20000ec4 	.word	0x20000ec4
 80052a4:	20000ec0 	.word	0x20000ec0
 80052a8:	e000ed04 	.word	0xe000ed04

080052ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052b6:	4b29      	ldr	r3, [pc, #164]	; (800535c <prvAddCurrentTaskToDelayedList+0xb0>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052bc:	4b28      	ldr	r3, [pc, #160]	; (8005360 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3304      	adds	r3, #4
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fe f992 	bl	80035ec <uxListRemove>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10b      	bne.n	80052e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80052ce:	4b24      	ldr	r3, [pc, #144]	; (8005360 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d4:	2201      	movs	r2, #1
 80052d6:	fa02 f303 	lsl.w	r3, r2, r3
 80052da:	43da      	mvns	r2, r3
 80052dc:	4b21      	ldr	r3, [pc, #132]	; (8005364 <prvAddCurrentTaskToDelayedList+0xb8>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4013      	ands	r3, r2
 80052e2:	4a20      	ldr	r2, [pc, #128]	; (8005364 <prvAddCurrentTaskToDelayedList+0xb8>)
 80052e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ec:	d10a      	bne.n	8005304 <prvAddCurrentTaskToDelayedList+0x58>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d007      	beq.n	8005304 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052f4:	4b1a      	ldr	r3, [pc, #104]	; (8005360 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3304      	adds	r3, #4
 80052fa:	4619      	mov	r1, r3
 80052fc:	481a      	ldr	r0, [pc, #104]	; (8005368 <prvAddCurrentTaskToDelayedList+0xbc>)
 80052fe:	f7fe f918 	bl	8003532 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005302:	e026      	b.n	8005352 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4413      	add	r3, r2
 800530a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800530c:	4b14      	ldr	r3, [pc, #80]	; (8005360 <prvAddCurrentTaskToDelayedList+0xb4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	429a      	cmp	r2, r3
 800531a:	d209      	bcs.n	8005330 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800531c:	4b13      	ldr	r3, [pc, #76]	; (800536c <prvAddCurrentTaskToDelayedList+0xc0>)
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3304      	adds	r3, #4
 8005326:	4619      	mov	r1, r3
 8005328:	4610      	mov	r0, r2
 800532a:	f7fe f926 	bl	800357a <vListInsert>
}
 800532e:	e010      	b.n	8005352 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005330:	4b0f      	ldr	r3, [pc, #60]	; (8005370 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3304      	adds	r3, #4
 800533a:	4619      	mov	r1, r3
 800533c:	4610      	mov	r0, r2
 800533e:	f7fe f91c 	bl	800357a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005342:	4b0c      	ldr	r3, [pc, #48]	; (8005374 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	429a      	cmp	r2, r3
 800534a:	d202      	bcs.n	8005352 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800534c:	4a09      	ldr	r2, [pc, #36]	; (8005374 <prvAddCurrentTaskToDelayedList+0xc8>)
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	6013      	str	r3, [r2, #0]
}
 8005352:	bf00      	nop
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	20000fc4 	.word	0x20000fc4
 8005360:	20000ec0 	.word	0x20000ec0
 8005364:	20000fc8 	.word	0x20000fc8
 8005368:	20000fac 	.word	0x20000fac
 800536c:	20000f7c 	.word	0x20000f7c
 8005370:	20000f78 	.word	0x20000f78
 8005374:	20000fe0 	.word	0x20000fe0

08005378 <__errno>:
 8005378:	4b01      	ldr	r3, [pc, #4]	; (8005380 <__errno+0x8>)
 800537a:	6818      	ldr	r0, [r3, #0]
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	20000010 	.word	0x20000010

08005384 <__libc_init_array>:
 8005384:	b570      	push	{r4, r5, r6, lr}
 8005386:	4e0d      	ldr	r6, [pc, #52]	; (80053bc <__libc_init_array+0x38>)
 8005388:	4c0d      	ldr	r4, [pc, #52]	; (80053c0 <__libc_init_array+0x3c>)
 800538a:	1ba4      	subs	r4, r4, r6
 800538c:	10a4      	asrs	r4, r4, #2
 800538e:	2500      	movs	r5, #0
 8005390:	42a5      	cmp	r5, r4
 8005392:	d109      	bne.n	80053a8 <__libc_init_array+0x24>
 8005394:	4e0b      	ldr	r6, [pc, #44]	; (80053c4 <__libc_init_array+0x40>)
 8005396:	4c0c      	ldr	r4, [pc, #48]	; (80053c8 <__libc_init_array+0x44>)
 8005398:	f000 fc94 	bl	8005cc4 <_init>
 800539c:	1ba4      	subs	r4, r4, r6
 800539e:	10a4      	asrs	r4, r4, #2
 80053a0:	2500      	movs	r5, #0
 80053a2:	42a5      	cmp	r5, r4
 80053a4:	d105      	bne.n	80053b2 <__libc_init_array+0x2e>
 80053a6:	bd70      	pop	{r4, r5, r6, pc}
 80053a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053ac:	4798      	blx	r3
 80053ae:	3501      	adds	r5, #1
 80053b0:	e7ee      	b.n	8005390 <__libc_init_array+0xc>
 80053b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053b6:	4798      	blx	r3
 80053b8:	3501      	adds	r5, #1
 80053ba:	e7f2      	b.n	80053a2 <__libc_init_array+0x1e>
 80053bc:	08005e64 	.word	0x08005e64
 80053c0:	08005e64 	.word	0x08005e64
 80053c4:	08005e64 	.word	0x08005e64
 80053c8:	08005e68 	.word	0x08005e68

080053cc <memcpy>:
 80053cc:	b510      	push	{r4, lr}
 80053ce:	1e43      	subs	r3, r0, #1
 80053d0:	440a      	add	r2, r1
 80053d2:	4291      	cmp	r1, r2
 80053d4:	d100      	bne.n	80053d8 <memcpy+0xc>
 80053d6:	bd10      	pop	{r4, pc}
 80053d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053e0:	e7f7      	b.n	80053d2 <memcpy+0x6>

080053e2 <memset>:
 80053e2:	4402      	add	r2, r0
 80053e4:	4603      	mov	r3, r0
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d100      	bne.n	80053ec <memset+0xa>
 80053ea:	4770      	bx	lr
 80053ec:	f803 1b01 	strb.w	r1, [r3], #1
 80053f0:	e7f9      	b.n	80053e6 <memset+0x4>
	...

080053f4 <_puts_r>:
 80053f4:	b570      	push	{r4, r5, r6, lr}
 80053f6:	460e      	mov	r6, r1
 80053f8:	4605      	mov	r5, r0
 80053fa:	b118      	cbz	r0, 8005404 <_puts_r+0x10>
 80053fc:	6983      	ldr	r3, [r0, #24]
 80053fe:	b90b      	cbnz	r3, 8005404 <_puts_r+0x10>
 8005400:	f000 fa0c 	bl	800581c <__sinit>
 8005404:	69ab      	ldr	r3, [r5, #24]
 8005406:	68ac      	ldr	r4, [r5, #8]
 8005408:	b913      	cbnz	r3, 8005410 <_puts_r+0x1c>
 800540a:	4628      	mov	r0, r5
 800540c:	f000 fa06 	bl	800581c <__sinit>
 8005410:	4b23      	ldr	r3, [pc, #140]	; (80054a0 <_puts_r+0xac>)
 8005412:	429c      	cmp	r4, r3
 8005414:	d117      	bne.n	8005446 <_puts_r+0x52>
 8005416:	686c      	ldr	r4, [r5, #4]
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	071b      	lsls	r3, r3, #28
 800541c:	d51d      	bpl.n	800545a <_puts_r+0x66>
 800541e:	6923      	ldr	r3, [r4, #16]
 8005420:	b1db      	cbz	r3, 800545a <_puts_r+0x66>
 8005422:	3e01      	subs	r6, #1
 8005424:	68a3      	ldr	r3, [r4, #8]
 8005426:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800542a:	3b01      	subs	r3, #1
 800542c:	60a3      	str	r3, [r4, #8]
 800542e:	b9e9      	cbnz	r1, 800546c <_puts_r+0x78>
 8005430:	2b00      	cmp	r3, #0
 8005432:	da2e      	bge.n	8005492 <_puts_r+0x9e>
 8005434:	4622      	mov	r2, r4
 8005436:	210a      	movs	r1, #10
 8005438:	4628      	mov	r0, r5
 800543a:	f000 f83f 	bl	80054bc <__swbuf_r>
 800543e:	3001      	adds	r0, #1
 8005440:	d011      	beq.n	8005466 <_puts_r+0x72>
 8005442:	200a      	movs	r0, #10
 8005444:	e011      	b.n	800546a <_puts_r+0x76>
 8005446:	4b17      	ldr	r3, [pc, #92]	; (80054a4 <_puts_r+0xb0>)
 8005448:	429c      	cmp	r4, r3
 800544a:	d101      	bne.n	8005450 <_puts_r+0x5c>
 800544c:	68ac      	ldr	r4, [r5, #8]
 800544e:	e7e3      	b.n	8005418 <_puts_r+0x24>
 8005450:	4b15      	ldr	r3, [pc, #84]	; (80054a8 <_puts_r+0xb4>)
 8005452:	429c      	cmp	r4, r3
 8005454:	bf08      	it	eq
 8005456:	68ec      	ldreq	r4, [r5, #12]
 8005458:	e7de      	b.n	8005418 <_puts_r+0x24>
 800545a:	4621      	mov	r1, r4
 800545c:	4628      	mov	r0, r5
 800545e:	f000 f87f 	bl	8005560 <__swsetup_r>
 8005462:	2800      	cmp	r0, #0
 8005464:	d0dd      	beq.n	8005422 <_puts_r+0x2e>
 8005466:	f04f 30ff 	mov.w	r0, #4294967295
 800546a:	bd70      	pop	{r4, r5, r6, pc}
 800546c:	2b00      	cmp	r3, #0
 800546e:	da04      	bge.n	800547a <_puts_r+0x86>
 8005470:	69a2      	ldr	r2, [r4, #24]
 8005472:	429a      	cmp	r2, r3
 8005474:	dc06      	bgt.n	8005484 <_puts_r+0x90>
 8005476:	290a      	cmp	r1, #10
 8005478:	d004      	beq.n	8005484 <_puts_r+0x90>
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	6022      	str	r2, [r4, #0]
 8005480:	7019      	strb	r1, [r3, #0]
 8005482:	e7cf      	b.n	8005424 <_puts_r+0x30>
 8005484:	4622      	mov	r2, r4
 8005486:	4628      	mov	r0, r5
 8005488:	f000 f818 	bl	80054bc <__swbuf_r>
 800548c:	3001      	adds	r0, #1
 800548e:	d1c9      	bne.n	8005424 <_puts_r+0x30>
 8005490:	e7e9      	b.n	8005466 <_puts_r+0x72>
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	200a      	movs	r0, #10
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	6022      	str	r2, [r4, #0]
 800549a:	7018      	strb	r0, [r3, #0]
 800549c:	e7e5      	b.n	800546a <_puts_r+0x76>
 800549e:	bf00      	nop
 80054a0:	08005e1c 	.word	0x08005e1c
 80054a4:	08005e3c 	.word	0x08005e3c
 80054a8:	08005dfc 	.word	0x08005dfc

080054ac <puts>:
 80054ac:	4b02      	ldr	r3, [pc, #8]	; (80054b8 <puts+0xc>)
 80054ae:	4601      	mov	r1, r0
 80054b0:	6818      	ldr	r0, [r3, #0]
 80054b2:	f7ff bf9f 	b.w	80053f4 <_puts_r>
 80054b6:	bf00      	nop
 80054b8:	20000010 	.word	0x20000010

080054bc <__swbuf_r>:
 80054bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054be:	460e      	mov	r6, r1
 80054c0:	4614      	mov	r4, r2
 80054c2:	4605      	mov	r5, r0
 80054c4:	b118      	cbz	r0, 80054ce <__swbuf_r+0x12>
 80054c6:	6983      	ldr	r3, [r0, #24]
 80054c8:	b90b      	cbnz	r3, 80054ce <__swbuf_r+0x12>
 80054ca:	f000 f9a7 	bl	800581c <__sinit>
 80054ce:	4b21      	ldr	r3, [pc, #132]	; (8005554 <__swbuf_r+0x98>)
 80054d0:	429c      	cmp	r4, r3
 80054d2:	d12a      	bne.n	800552a <__swbuf_r+0x6e>
 80054d4:	686c      	ldr	r4, [r5, #4]
 80054d6:	69a3      	ldr	r3, [r4, #24]
 80054d8:	60a3      	str	r3, [r4, #8]
 80054da:	89a3      	ldrh	r3, [r4, #12]
 80054dc:	071a      	lsls	r2, r3, #28
 80054de:	d52e      	bpl.n	800553e <__swbuf_r+0x82>
 80054e0:	6923      	ldr	r3, [r4, #16]
 80054e2:	b363      	cbz	r3, 800553e <__swbuf_r+0x82>
 80054e4:	6923      	ldr	r3, [r4, #16]
 80054e6:	6820      	ldr	r0, [r4, #0]
 80054e8:	1ac0      	subs	r0, r0, r3
 80054ea:	6963      	ldr	r3, [r4, #20]
 80054ec:	b2f6      	uxtb	r6, r6
 80054ee:	4283      	cmp	r3, r0
 80054f0:	4637      	mov	r7, r6
 80054f2:	dc04      	bgt.n	80054fe <__swbuf_r+0x42>
 80054f4:	4621      	mov	r1, r4
 80054f6:	4628      	mov	r0, r5
 80054f8:	f000 f926 	bl	8005748 <_fflush_r>
 80054fc:	bb28      	cbnz	r0, 800554a <__swbuf_r+0x8e>
 80054fe:	68a3      	ldr	r3, [r4, #8]
 8005500:	3b01      	subs	r3, #1
 8005502:	60a3      	str	r3, [r4, #8]
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	6022      	str	r2, [r4, #0]
 800550a:	701e      	strb	r6, [r3, #0]
 800550c:	6963      	ldr	r3, [r4, #20]
 800550e:	3001      	adds	r0, #1
 8005510:	4283      	cmp	r3, r0
 8005512:	d004      	beq.n	800551e <__swbuf_r+0x62>
 8005514:	89a3      	ldrh	r3, [r4, #12]
 8005516:	07db      	lsls	r3, r3, #31
 8005518:	d519      	bpl.n	800554e <__swbuf_r+0x92>
 800551a:	2e0a      	cmp	r6, #10
 800551c:	d117      	bne.n	800554e <__swbuf_r+0x92>
 800551e:	4621      	mov	r1, r4
 8005520:	4628      	mov	r0, r5
 8005522:	f000 f911 	bl	8005748 <_fflush_r>
 8005526:	b190      	cbz	r0, 800554e <__swbuf_r+0x92>
 8005528:	e00f      	b.n	800554a <__swbuf_r+0x8e>
 800552a:	4b0b      	ldr	r3, [pc, #44]	; (8005558 <__swbuf_r+0x9c>)
 800552c:	429c      	cmp	r4, r3
 800552e:	d101      	bne.n	8005534 <__swbuf_r+0x78>
 8005530:	68ac      	ldr	r4, [r5, #8]
 8005532:	e7d0      	b.n	80054d6 <__swbuf_r+0x1a>
 8005534:	4b09      	ldr	r3, [pc, #36]	; (800555c <__swbuf_r+0xa0>)
 8005536:	429c      	cmp	r4, r3
 8005538:	bf08      	it	eq
 800553a:	68ec      	ldreq	r4, [r5, #12]
 800553c:	e7cb      	b.n	80054d6 <__swbuf_r+0x1a>
 800553e:	4621      	mov	r1, r4
 8005540:	4628      	mov	r0, r5
 8005542:	f000 f80d 	bl	8005560 <__swsetup_r>
 8005546:	2800      	cmp	r0, #0
 8005548:	d0cc      	beq.n	80054e4 <__swbuf_r+0x28>
 800554a:	f04f 37ff 	mov.w	r7, #4294967295
 800554e:	4638      	mov	r0, r7
 8005550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005552:	bf00      	nop
 8005554:	08005e1c 	.word	0x08005e1c
 8005558:	08005e3c 	.word	0x08005e3c
 800555c:	08005dfc 	.word	0x08005dfc

08005560 <__swsetup_r>:
 8005560:	4b32      	ldr	r3, [pc, #200]	; (800562c <__swsetup_r+0xcc>)
 8005562:	b570      	push	{r4, r5, r6, lr}
 8005564:	681d      	ldr	r5, [r3, #0]
 8005566:	4606      	mov	r6, r0
 8005568:	460c      	mov	r4, r1
 800556a:	b125      	cbz	r5, 8005576 <__swsetup_r+0x16>
 800556c:	69ab      	ldr	r3, [r5, #24]
 800556e:	b913      	cbnz	r3, 8005576 <__swsetup_r+0x16>
 8005570:	4628      	mov	r0, r5
 8005572:	f000 f953 	bl	800581c <__sinit>
 8005576:	4b2e      	ldr	r3, [pc, #184]	; (8005630 <__swsetup_r+0xd0>)
 8005578:	429c      	cmp	r4, r3
 800557a:	d10f      	bne.n	800559c <__swsetup_r+0x3c>
 800557c:	686c      	ldr	r4, [r5, #4]
 800557e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005582:	b29a      	uxth	r2, r3
 8005584:	0715      	lsls	r5, r2, #28
 8005586:	d42c      	bmi.n	80055e2 <__swsetup_r+0x82>
 8005588:	06d0      	lsls	r0, r2, #27
 800558a:	d411      	bmi.n	80055b0 <__swsetup_r+0x50>
 800558c:	2209      	movs	r2, #9
 800558e:	6032      	str	r2, [r6, #0]
 8005590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005594:	81a3      	strh	r3, [r4, #12]
 8005596:	f04f 30ff 	mov.w	r0, #4294967295
 800559a:	e03e      	b.n	800561a <__swsetup_r+0xba>
 800559c:	4b25      	ldr	r3, [pc, #148]	; (8005634 <__swsetup_r+0xd4>)
 800559e:	429c      	cmp	r4, r3
 80055a0:	d101      	bne.n	80055a6 <__swsetup_r+0x46>
 80055a2:	68ac      	ldr	r4, [r5, #8]
 80055a4:	e7eb      	b.n	800557e <__swsetup_r+0x1e>
 80055a6:	4b24      	ldr	r3, [pc, #144]	; (8005638 <__swsetup_r+0xd8>)
 80055a8:	429c      	cmp	r4, r3
 80055aa:	bf08      	it	eq
 80055ac:	68ec      	ldreq	r4, [r5, #12]
 80055ae:	e7e6      	b.n	800557e <__swsetup_r+0x1e>
 80055b0:	0751      	lsls	r1, r2, #29
 80055b2:	d512      	bpl.n	80055da <__swsetup_r+0x7a>
 80055b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055b6:	b141      	cbz	r1, 80055ca <__swsetup_r+0x6a>
 80055b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055bc:	4299      	cmp	r1, r3
 80055be:	d002      	beq.n	80055c6 <__swsetup_r+0x66>
 80055c0:	4630      	mov	r0, r6
 80055c2:	f000 fa19 	bl	80059f8 <_free_r>
 80055c6:	2300      	movs	r3, #0
 80055c8:	6363      	str	r3, [r4, #52]	; 0x34
 80055ca:	89a3      	ldrh	r3, [r4, #12]
 80055cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055d0:	81a3      	strh	r3, [r4, #12]
 80055d2:	2300      	movs	r3, #0
 80055d4:	6063      	str	r3, [r4, #4]
 80055d6:	6923      	ldr	r3, [r4, #16]
 80055d8:	6023      	str	r3, [r4, #0]
 80055da:	89a3      	ldrh	r3, [r4, #12]
 80055dc:	f043 0308 	orr.w	r3, r3, #8
 80055e0:	81a3      	strh	r3, [r4, #12]
 80055e2:	6923      	ldr	r3, [r4, #16]
 80055e4:	b94b      	cbnz	r3, 80055fa <__swsetup_r+0x9a>
 80055e6:	89a3      	ldrh	r3, [r4, #12]
 80055e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055f0:	d003      	beq.n	80055fa <__swsetup_r+0x9a>
 80055f2:	4621      	mov	r1, r4
 80055f4:	4630      	mov	r0, r6
 80055f6:	f000 f9bf 	bl	8005978 <__smakebuf_r>
 80055fa:	89a2      	ldrh	r2, [r4, #12]
 80055fc:	f012 0301 	ands.w	r3, r2, #1
 8005600:	d00c      	beq.n	800561c <__swsetup_r+0xbc>
 8005602:	2300      	movs	r3, #0
 8005604:	60a3      	str	r3, [r4, #8]
 8005606:	6963      	ldr	r3, [r4, #20]
 8005608:	425b      	negs	r3, r3
 800560a:	61a3      	str	r3, [r4, #24]
 800560c:	6923      	ldr	r3, [r4, #16]
 800560e:	b953      	cbnz	r3, 8005626 <__swsetup_r+0xc6>
 8005610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005614:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005618:	d1ba      	bne.n	8005590 <__swsetup_r+0x30>
 800561a:	bd70      	pop	{r4, r5, r6, pc}
 800561c:	0792      	lsls	r2, r2, #30
 800561e:	bf58      	it	pl
 8005620:	6963      	ldrpl	r3, [r4, #20]
 8005622:	60a3      	str	r3, [r4, #8]
 8005624:	e7f2      	b.n	800560c <__swsetup_r+0xac>
 8005626:	2000      	movs	r0, #0
 8005628:	e7f7      	b.n	800561a <__swsetup_r+0xba>
 800562a:	bf00      	nop
 800562c:	20000010 	.word	0x20000010
 8005630:	08005e1c 	.word	0x08005e1c
 8005634:	08005e3c 	.word	0x08005e3c
 8005638:	08005dfc 	.word	0x08005dfc

0800563c <__sflush_r>:
 800563c:	898a      	ldrh	r2, [r1, #12]
 800563e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005642:	4605      	mov	r5, r0
 8005644:	0710      	lsls	r0, r2, #28
 8005646:	460c      	mov	r4, r1
 8005648:	d458      	bmi.n	80056fc <__sflush_r+0xc0>
 800564a:	684b      	ldr	r3, [r1, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	dc05      	bgt.n	800565c <__sflush_r+0x20>
 8005650:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005652:	2b00      	cmp	r3, #0
 8005654:	dc02      	bgt.n	800565c <__sflush_r+0x20>
 8005656:	2000      	movs	r0, #0
 8005658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800565c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800565e:	2e00      	cmp	r6, #0
 8005660:	d0f9      	beq.n	8005656 <__sflush_r+0x1a>
 8005662:	2300      	movs	r3, #0
 8005664:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005668:	682f      	ldr	r7, [r5, #0]
 800566a:	6a21      	ldr	r1, [r4, #32]
 800566c:	602b      	str	r3, [r5, #0]
 800566e:	d032      	beq.n	80056d6 <__sflush_r+0x9a>
 8005670:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005672:	89a3      	ldrh	r3, [r4, #12]
 8005674:	075a      	lsls	r2, r3, #29
 8005676:	d505      	bpl.n	8005684 <__sflush_r+0x48>
 8005678:	6863      	ldr	r3, [r4, #4]
 800567a:	1ac0      	subs	r0, r0, r3
 800567c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800567e:	b10b      	cbz	r3, 8005684 <__sflush_r+0x48>
 8005680:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005682:	1ac0      	subs	r0, r0, r3
 8005684:	2300      	movs	r3, #0
 8005686:	4602      	mov	r2, r0
 8005688:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800568a:	6a21      	ldr	r1, [r4, #32]
 800568c:	4628      	mov	r0, r5
 800568e:	47b0      	blx	r6
 8005690:	1c43      	adds	r3, r0, #1
 8005692:	89a3      	ldrh	r3, [r4, #12]
 8005694:	d106      	bne.n	80056a4 <__sflush_r+0x68>
 8005696:	6829      	ldr	r1, [r5, #0]
 8005698:	291d      	cmp	r1, #29
 800569a:	d848      	bhi.n	800572e <__sflush_r+0xf2>
 800569c:	4a29      	ldr	r2, [pc, #164]	; (8005744 <__sflush_r+0x108>)
 800569e:	40ca      	lsrs	r2, r1
 80056a0:	07d6      	lsls	r6, r2, #31
 80056a2:	d544      	bpl.n	800572e <__sflush_r+0xf2>
 80056a4:	2200      	movs	r2, #0
 80056a6:	6062      	str	r2, [r4, #4]
 80056a8:	04d9      	lsls	r1, r3, #19
 80056aa:	6922      	ldr	r2, [r4, #16]
 80056ac:	6022      	str	r2, [r4, #0]
 80056ae:	d504      	bpl.n	80056ba <__sflush_r+0x7e>
 80056b0:	1c42      	adds	r2, r0, #1
 80056b2:	d101      	bne.n	80056b8 <__sflush_r+0x7c>
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	b903      	cbnz	r3, 80056ba <__sflush_r+0x7e>
 80056b8:	6560      	str	r0, [r4, #84]	; 0x54
 80056ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056bc:	602f      	str	r7, [r5, #0]
 80056be:	2900      	cmp	r1, #0
 80056c0:	d0c9      	beq.n	8005656 <__sflush_r+0x1a>
 80056c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056c6:	4299      	cmp	r1, r3
 80056c8:	d002      	beq.n	80056d0 <__sflush_r+0x94>
 80056ca:	4628      	mov	r0, r5
 80056cc:	f000 f994 	bl	80059f8 <_free_r>
 80056d0:	2000      	movs	r0, #0
 80056d2:	6360      	str	r0, [r4, #52]	; 0x34
 80056d4:	e7c0      	b.n	8005658 <__sflush_r+0x1c>
 80056d6:	2301      	movs	r3, #1
 80056d8:	4628      	mov	r0, r5
 80056da:	47b0      	blx	r6
 80056dc:	1c41      	adds	r1, r0, #1
 80056de:	d1c8      	bne.n	8005672 <__sflush_r+0x36>
 80056e0:	682b      	ldr	r3, [r5, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0c5      	beq.n	8005672 <__sflush_r+0x36>
 80056e6:	2b1d      	cmp	r3, #29
 80056e8:	d001      	beq.n	80056ee <__sflush_r+0xb2>
 80056ea:	2b16      	cmp	r3, #22
 80056ec:	d101      	bne.n	80056f2 <__sflush_r+0xb6>
 80056ee:	602f      	str	r7, [r5, #0]
 80056f0:	e7b1      	b.n	8005656 <__sflush_r+0x1a>
 80056f2:	89a3      	ldrh	r3, [r4, #12]
 80056f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056f8:	81a3      	strh	r3, [r4, #12]
 80056fa:	e7ad      	b.n	8005658 <__sflush_r+0x1c>
 80056fc:	690f      	ldr	r7, [r1, #16]
 80056fe:	2f00      	cmp	r7, #0
 8005700:	d0a9      	beq.n	8005656 <__sflush_r+0x1a>
 8005702:	0793      	lsls	r3, r2, #30
 8005704:	680e      	ldr	r6, [r1, #0]
 8005706:	bf08      	it	eq
 8005708:	694b      	ldreq	r3, [r1, #20]
 800570a:	600f      	str	r7, [r1, #0]
 800570c:	bf18      	it	ne
 800570e:	2300      	movne	r3, #0
 8005710:	eba6 0807 	sub.w	r8, r6, r7
 8005714:	608b      	str	r3, [r1, #8]
 8005716:	f1b8 0f00 	cmp.w	r8, #0
 800571a:	dd9c      	ble.n	8005656 <__sflush_r+0x1a>
 800571c:	4643      	mov	r3, r8
 800571e:	463a      	mov	r2, r7
 8005720:	6a21      	ldr	r1, [r4, #32]
 8005722:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005724:	4628      	mov	r0, r5
 8005726:	47b0      	blx	r6
 8005728:	2800      	cmp	r0, #0
 800572a:	dc06      	bgt.n	800573a <__sflush_r+0xfe>
 800572c:	89a3      	ldrh	r3, [r4, #12]
 800572e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005732:	81a3      	strh	r3, [r4, #12]
 8005734:	f04f 30ff 	mov.w	r0, #4294967295
 8005738:	e78e      	b.n	8005658 <__sflush_r+0x1c>
 800573a:	4407      	add	r7, r0
 800573c:	eba8 0800 	sub.w	r8, r8, r0
 8005740:	e7e9      	b.n	8005716 <__sflush_r+0xda>
 8005742:	bf00      	nop
 8005744:	20400001 	.word	0x20400001

08005748 <_fflush_r>:
 8005748:	b538      	push	{r3, r4, r5, lr}
 800574a:	690b      	ldr	r3, [r1, #16]
 800574c:	4605      	mov	r5, r0
 800574e:	460c      	mov	r4, r1
 8005750:	b1db      	cbz	r3, 800578a <_fflush_r+0x42>
 8005752:	b118      	cbz	r0, 800575c <_fflush_r+0x14>
 8005754:	6983      	ldr	r3, [r0, #24]
 8005756:	b90b      	cbnz	r3, 800575c <_fflush_r+0x14>
 8005758:	f000 f860 	bl	800581c <__sinit>
 800575c:	4b0c      	ldr	r3, [pc, #48]	; (8005790 <_fflush_r+0x48>)
 800575e:	429c      	cmp	r4, r3
 8005760:	d109      	bne.n	8005776 <_fflush_r+0x2e>
 8005762:	686c      	ldr	r4, [r5, #4]
 8005764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005768:	b17b      	cbz	r3, 800578a <_fflush_r+0x42>
 800576a:	4621      	mov	r1, r4
 800576c:	4628      	mov	r0, r5
 800576e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005772:	f7ff bf63 	b.w	800563c <__sflush_r>
 8005776:	4b07      	ldr	r3, [pc, #28]	; (8005794 <_fflush_r+0x4c>)
 8005778:	429c      	cmp	r4, r3
 800577a:	d101      	bne.n	8005780 <_fflush_r+0x38>
 800577c:	68ac      	ldr	r4, [r5, #8]
 800577e:	e7f1      	b.n	8005764 <_fflush_r+0x1c>
 8005780:	4b05      	ldr	r3, [pc, #20]	; (8005798 <_fflush_r+0x50>)
 8005782:	429c      	cmp	r4, r3
 8005784:	bf08      	it	eq
 8005786:	68ec      	ldreq	r4, [r5, #12]
 8005788:	e7ec      	b.n	8005764 <_fflush_r+0x1c>
 800578a:	2000      	movs	r0, #0
 800578c:	bd38      	pop	{r3, r4, r5, pc}
 800578e:	bf00      	nop
 8005790:	08005e1c 	.word	0x08005e1c
 8005794:	08005e3c 	.word	0x08005e3c
 8005798:	08005dfc 	.word	0x08005dfc

0800579c <std>:
 800579c:	2300      	movs	r3, #0
 800579e:	b510      	push	{r4, lr}
 80057a0:	4604      	mov	r4, r0
 80057a2:	e9c0 3300 	strd	r3, r3, [r0]
 80057a6:	6083      	str	r3, [r0, #8]
 80057a8:	8181      	strh	r1, [r0, #12]
 80057aa:	6643      	str	r3, [r0, #100]	; 0x64
 80057ac:	81c2      	strh	r2, [r0, #14]
 80057ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057b2:	6183      	str	r3, [r0, #24]
 80057b4:	4619      	mov	r1, r3
 80057b6:	2208      	movs	r2, #8
 80057b8:	305c      	adds	r0, #92	; 0x5c
 80057ba:	f7ff fe12 	bl	80053e2 <memset>
 80057be:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <std+0x38>)
 80057c0:	6263      	str	r3, [r4, #36]	; 0x24
 80057c2:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <std+0x3c>)
 80057c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80057c6:	4b05      	ldr	r3, [pc, #20]	; (80057dc <std+0x40>)
 80057c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057ca:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <std+0x44>)
 80057cc:	6224      	str	r4, [r4, #32]
 80057ce:	6323      	str	r3, [r4, #48]	; 0x30
 80057d0:	bd10      	pop	{r4, pc}
 80057d2:	bf00      	nop
 80057d4:	08005b69 	.word	0x08005b69
 80057d8:	08005b8b 	.word	0x08005b8b
 80057dc:	08005bc3 	.word	0x08005bc3
 80057e0:	08005be7 	.word	0x08005be7

080057e4 <_cleanup_r>:
 80057e4:	4901      	ldr	r1, [pc, #4]	; (80057ec <_cleanup_r+0x8>)
 80057e6:	f000 b885 	b.w	80058f4 <_fwalk_reent>
 80057ea:	bf00      	nop
 80057ec:	08005749 	.word	0x08005749

080057f0 <__sfmoreglue>:
 80057f0:	b570      	push	{r4, r5, r6, lr}
 80057f2:	1e4a      	subs	r2, r1, #1
 80057f4:	2568      	movs	r5, #104	; 0x68
 80057f6:	4355      	muls	r5, r2
 80057f8:	460e      	mov	r6, r1
 80057fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80057fe:	f000 f949 	bl	8005a94 <_malloc_r>
 8005802:	4604      	mov	r4, r0
 8005804:	b140      	cbz	r0, 8005818 <__sfmoreglue+0x28>
 8005806:	2100      	movs	r1, #0
 8005808:	e9c0 1600 	strd	r1, r6, [r0]
 800580c:	300c      	adds	r0, #12
 800580e:	60a0      	str	r0, [r4, #8]
 8005810:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005814:	f7ff fde5 	bl	80053e2 <memset>
 8005818:	4620      	mov	r0, r4
 800581a:	bd70      	pop	{r4, r5, r6, pc}

0800581c <__sinit>:
 800581c:	6983      	ldr	r3, [r0, #24]
 800581e:	b510      	push	{r4, lr}
 8005820:	4604      	mov	r4, r0
 8005822:	bb33      	cbnz	r3, 8005872 <__sinit+0x56>
 8005824:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005828:	6503      	str	r3, [r0, #80]	; 0x50
 800582a:	4b12      	ldr	r3, [pc, #72]	; (8005874 <__sinit+0x58>)
 800582c:	4a12      	ldr	r2, [pc, #72]	; (8005878 <__sinit+0x5c>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6282      	str	r2, [r0, #40]	; 0x28
 8005832:	4298      	cmp	r0, r3
 8005834:	bf04      	itt	eq
 8005836:	2301      	moveq	r3, #1
 8005838:	6183      	streq	r3, [r0, #24]
 800583a:	f000 f81f 	bl	800587c <__sfp>
 800583e:	6060      	str	r0, [r4, #4]
 8005840:	4620      	mov	r0, r4
 8005842:	f000 f81b 	bl	800587c <__sfp>
 8005846:	60a0      	str	r0, [r4, #8]
 8005848:	4620      	mov	r0, r4
 800584a:	f000 f817 	bl	800587c <__sfp>
 800584e:	2200      	movs	r2, #0
 8005850:	60e0      	str	r0, [r4, #12]
 8005852:	2104      	movs	r1, #4
 8005854:	6860      	ldr	r0, [r4, #4]
 8005856:	f7ff ffa1 	bl	800579c <std>
 800585a:	2201      	movs	r2, #1
 800585c:	2109      	movs	r1, #9
 800585e:	68a0      	ldr	r0, [r4, #8]
 8005860:	f7ff ff9c 	bl	800579c <std>
 8005864:	2202      	movs	r2, #2
 8005866:	2112      	movs	r1, #18
 8005868:	68e0      	ldr	r0, [r4, #12]
 800586a:	f7ff ff97 	bl	800579c <std>
 800586e:	2301      	movs	r3, #1
 8005870:	61a3      	str	r3, [r4, #24]
 8005872:	bd10      	pop	{r4, pc}
 8005874:	08005df8 	.word	0x08005df8
 8005878:	080057e5 	.word	0x080057e5

0800587c <__sfp>:
 800587c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587e:	4b1b      	ldr	r3, [pc, #108]	; (80058ec <__sfp+0x70>)
 8005880:	681e      	ldr	r6, [r3, #0]
 8005882:	69b3      	ldr	r3, [r6, #24]
 8005884:	4607      	mov	r7, r0
 8005886:	b913      	cbnz	r3, 800588e <__sfp+0x12>
 8005888:	4630      	mov	r0, r6
 800588a:	f7ff ffc7 	bl	800581c <__sinit>
 800588e:	3648      	adds	r6, #72	; 0x48
 8005890:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005894:	3b01      	subs	r3, #1
 8005896:	d503      	bpl.n	80058a0 <__sfp+0x24>
 8005898:	6833      	ldr	r3, [r6, #0]
 800589a:	b133      	cbz	r3, 80058aa <__sfp+0x2e>
 800589c:	6836      	ldr	r6, [r6, #0]
 800589e:	e7f7      	b.n	8005890 <__sfp+0x14>
 80058a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80058a4:	b16d      	cbz	r5, 80058c2 <__sfp+0x46>
 80058a6:	3468      	adds	r4, #104	; 0x68
 80058a8:	e7f4      	b.n	8005894 <__sfp+0x18>
 80058aa:	2104      	movs	r1, #4
 80058ac:	4638      	mov	r0, r7
 80058ae:	f7ff ff9f 	bl	80057f0 <__sfmoreglue>
 80058b2:	6030      	str	r0, [r6, #0]
 80058b4:	2800      	cmp	r0, #0
 80058b6:	d1f1      	bne.n	800589c <__sfp+0x20>
 80058b8:	230c      	movs	r3, #12
 80058ba:	603b      	str	r3, [r7, #0]
 80058bc:	4604      	mov	r4, r0
 80058be:	4620      	mov	r0, r4
 80058c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058c2:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <__sfp+0x74>)
 80058c4:	6665      	str	r5, [r4, #100]	; 0x64
 80058c6:	e9c4 5500 	strd	r5, r5, [r4]
 80058ca:	60a5      	str	r5, [r4, #8]
 80058cc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80058d0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80058d4:	2208      	movs	r2, #8
 80058d6:	4629      	mov	r1, r5
 80058d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80058dc:	f7ff fd81 	bl	80053e2 <memset>
 80058e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80058e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80058e8:	e7e9      	b.n	80058be <__sfp+0x42>
 80058ea:	bf00      	nop
 80058ec:	08005df8 	.word	0x08005df8
 80058f0:	ffff0001 	.word	0xffff0001

080058f4 <_fwalk_reent>:
 80058f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058f8:	4680      	mov	r8, r0
 80058fa:	4689      	mov	r9, r1
 80058fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005900:	2600      	movs	r6, #0
 8005902:	b914      	cbnz	r4, 800590a <_fwalk_reent+0x16>
 8005904:	4630      	mov	r0, r6
 8005906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800590a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800590e:	3f01      	subs	r7, #1
 8005910:	d501      	bpl.n	8005916 <_fwalk_reent+0x22>
 8005912:	6824      	ldr	r4, [r4, #0]
 8005914:	e7f5      	b.n	8005902 <_fwalk_reent+0xe>
 8005916:	89ab      	ldrh	r3, [r5, #12]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d907      	bls.n	800592c <_fwalk_reent+0x38>
 800591c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005920:	3301      	adds	r3, #1
 8005922:	d003      	beq.n	800592c <_fwalk_reent+0x38>
 8005924:	4629      	mov	r1, r5
 8005926:	4640      	mov	r0, r8
 8005928:	47c8      	blx	r9
 800592a:	4306      	orrs	r6, r0
 800592c:	3568      	adds	r5, #104	; 0x68
 800592e:	e7ee      	b.n	800590e <_fwalk_reent+0x1a>

08005930 <__swhatbuf_r>:
 8005930:	b570      	push	{r4, r5, r6, lr}
 8005932:	460e      	mov	r6, r1
 8005934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005938:	2900      	cmp	r1, #0
 800593a:	b096      	sub	sp, #88	; 0x58
 800593c:	4614      	mov	r4, r2
 800593e:	461d      	mov	r5, r3
 8005940:	da07      	bge.n	8005952 <__swhatbuf_r+0x22>
 8005942:	2300      	movs	r3, #0
 8005944:	602b      	str	r3, [r5, #0]
 8005946:	89b3      	ldrh	r3, [r6, #12]
 8005948:	061a      	lsls	r2, r3, #24
 800594a:	d410      	bmi.n	800596e <__swhatbuf_r+0x3e>
 800594c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005950:	e00e      	b.n	8005970 <__swhatbuf_r+0x40>
 8005952:	466a      	mov	r2, sp
 8005954:	f000 f96e 	bl	8005c34 <_fstat_r>
 8005958:	2800      	cmp	r0, #0
 800595a:	dbf2      	blt.n	8005942 <__swhatbuf_r+0x12>
 800595c:	9a01      	ldr	r2, [sp, #4]
 800595e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005962:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005966:	425a      	negs	r2, r3
 8005968:	415a      	adcs	r2, r3
 800596a:	602a      	str	r2, [r5, #0]
 800596c:	e7ee      	b.n	800594c <__swhatbuf_r+0x1c>
 800596e:	2340      	movs	r3, #64	; 0x40
 8005970:	2000      	movs	r0, #0
 8005972:	6023      	str	r3, [r4, #0]
 8005974:	b016      	add	sp, #88	; 0x58
 8005976:	bd70      	pop	{r4, r5, r6, pc}

08005978 <__smakebuf_r>:
 8005978:	898b      	ldrh	r3, [r1, #12]
 800597a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800597c:	079d      	lsls	r5, r3, #30
 800597e:	4606      	mov	r6, r0
 8005980:	460c      	mov	r4, r1
 8005982:	d507      	bpl.n	8005994 <__smakebuf_r+0x1c>
 8005984:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	6123      	str	r3, [r4, #16]
 800598c:	2301      	movs	r3, #1
 800598e:	6163      	str	r3, [r4, #20]
 8005990:	b002      	add	sp, #8
 8005992:	bd70      	pop	{r4, r5, r6, pc}
 8005994:	ab01      	add	r3, sp, #4
 8005996:	466a      	mov	r2, sp
 8005998:	f7ff ffca 	bl	8005930 <__swhatbuf_r>
 800599c:	9900      	ldr	r1, [sp, #0]
 800599e:	4605      	mov	r5, r0
 80059a0:	4630      	mov	r0, r6
 80059a2:	f000 f877 	bl	8005a94 <_malloc_r>
 80059a6:	b948      	cbnz	r0, 80059bc <__smakebuf_r+0x44>
 80059a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059ac:	059a      	lsls	r2, r3, #22
 80059ae:	d4ef      	bmi.n	8005990 <__smakebuf_r+0x18>
 80059b0:	f023 0303 	bic.w	r3, r3, #3
 80059b4:	f043 0302 	orr.w	r3, r3, #2
 80059b8:	81a3      	strh	r3, [r4, #12]
 80059ba:	e7e3      	b.n	8005984 <__smakebuf_r+0xc>
 80059bc:	4b0d      	ldr	r3, [pc, #52]	; (80059f4 <__smakebuf_r+0x7c>)
 80059be:	62b3      	str	r3, [r6, #40]	; 0x28
 80059c0:	89a3      	ldrh	r3, [r4, #12]
 80059c2:	6020      	str	r0, [r4, #0]
 80059c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059c8:	81a3      	strh	r3, [r4, #12]
 80059ca:	9b00      	ldr	r3, [sp, #0]
 80059cc:	6163      	str	r3, [r4, #20]
 80059ce:	9b01      	ldr	r3, [sp, #4]
 80059d0:	6120      	str	r0, [r4, #16]
 80059d2:	b15b      	cbz	r3, 80059ec <__smakebuf_r+0x74>
 80059d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059d8:	4630      	mov	r0, r6
 80059da:	f000 f93d 	bl	8005c58 <_isatty_r>
 80059de:	b128      	cbz	r0, 80059ec <__smakebuf_r+0x74>
 80059e0:	89a3      	ldrh	r3, [r4, #12]
 80059e2:	f023 0303 	bic.w	r3, r3, #3
 80059e6:	f043 0301 	orr.w	r3, r3, #1
 80059ea:	81a3      	strh	r3, [r4, #12]
 80059ec:	89a3      	ldrh	r3, [r4, #12]
 80059ee:	431d      	orrs	r5, r3
 80059f0:	81a5      	strh	r5, [r4, #12]
 80059f2:	e7cd      	b.n	8005990 <__smakebuf_r+0x18>
 80059f4:	080057e5 	.word	0x080057e5

080059f8 <_free_r>:
 80059f8:	b538      	push	{r3, r4, r5, lr}
 80059fa:	4605      	mov	r5, r0
 80059fc:	2900      	cmp	r1, #0
 80059fe:	d045      	beq.n	8005a8c <_free_r+0x94>
 8005a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a04:	1f0c      	subs	r4, r1, #4
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	bfb8      	it	lt
 8005a0a:	18e4      	addlt	r4, r4, r3
 8005a0c:	f000 f946 	bl	8005c9c <__malloc_lock>
 8005a10:	4a1f      	ldr	r2, [pc, #124]	; (8005a90 <_free_r+0x98>)
 8005a12:	6813      	ldr	r3, [r2, #0]
 8005a14:	4610      	mov	r0, r2
 8005a16:	b933      	cbnz	r3, 8005a26 <_free_r+0x2e>
 8005a18:	6063      	str	r3, [r4, #4]
 8005a1a:	6014      	str	r4, [r2, #0]
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a22:	f000 b93c 	b.w	8005c9e <__malloc_unlock>
 8005a26:	42a3      	cmp	r3, r4
 8005a28:	d90c      	bls.n	8005a44 <_free_r+0x4c>
 8005a2a:	6821      	ldr	r1, [r4, #0]
 8005a2c:	1862      	adds	r2, r4, r1
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	bf04      	itt	eq
 8005a32:	681a      	ldreq	r2, [r3, #0]
 8005a34:	685b      	ldreq	r3, [r3, #4]
 8005a36:	6063      	str	r3, [r4, #4]
 8005a38:	bf04      	itt	eq
 8005a3a:	1852      	addeq	r2, r2, r1
 8005a3c:	6022      	streq	r2, [r4, #0]
 8005a3e:	6004      	str	r4, [r0, #0]
 8005a40:	e7ec      	b.n	8005a1c <_free_r+0x24>
 8005a42:	4613      	mov	r3, r2
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	b10a      	cbz	r2, 8005a4c <_free_r+0x54>
 8005a48:	42a2      	cmp	r2, r4
 8005a4a:	d9fa      	bls.n	8005a42 <_free_r+0x4a>
 8005a4c:	6819      	ldr	r1, [r3, #0]
 8005a4e:	1858      	adds	r0, r3, r1
 8005a50:	42a0      	cmp	r0, r4
 8005a52:	d10b      	bne.n	8005a6c <_free_r+0x74>
 8005a54:	6820      	ldr	r0, [r4, #0]
 8005a56:	4401      	add	r1, r0
 8005a58:	1858      	adds	r0, r3, r1
 8005a5a:	4282      	cmp	r2, r0
 8005a5c:	6019      	str	r1, [r3, #0]
 8005a5e:	d1dd      	bne.n	8005a1c <_free_r+0x24>
 8005a60:	6810      	ldr	r0, [r2, #0]
 8005a62:	6852      	ldr	r2, [r2, #4]
 8005a64:	605a      	str	r2, [r3, #4]
 8005a66:	4401      	add	r1, r0
 8005a68:	6019      	str	r1, [r3, #0]
 8005a6a:	e7d7      	b.n	8005a1c <_free_r+0x24>
 8005a6c:	d902      	bls.n	8005a74 <_free_r+0x7c>
 8005a6e:	230c      	movs	r3, #12
 8005a70:	602b      	str	r3, [r5, #0]
 8005a72:	e7d3      	b.n	8005a1c <_free_r+0x24>
 8005a74:	6820      	ldr	r0, [r4, #0]
 8005a76:	1821      	adds	r1, r4, r0
 8005a78:	428a      	cmp	r2, r1
 8005a7a:	bf04      	itt	eq
 8005a7c:	6811      	ldreq	r1, [r2, #0]
 8005a7e:	6852      	ldreq	r2, [r2, #4]
 8005a80:	6062      	str	r2, [r4, #4]
 8005a82:	bf04      	itt	eq
 8005a84:	1809      	addeq	r1, r1, r0
 8005a86:	6021      	streq	r1, [r4, #0]
 8005a88:	605c      	str	r4, [r3, #4]
 8005a8a:	e7c7      	b.n	8005a1c <_free_r+0x24>
 8005a8c:	bd38      	pop	{r3, r4, r5, pc}
 8005a8e:	bf00      	nop
 8005a90:	20000fec 	.word	0x20000fec

08005a94 <_malloc_r>:
 8005a94:	b570      	push	{r4, r5, r6, lr}
 8005a96:	1ccd      	adds	r5, r1, #3
 8005a98:	f025 0503 	bic.w	r5, r5, #3
 8005a9c:	3508      	adds	r5, #8
 8005a9e:	2d0c      	cmp	r5, #12
 8005aa0:	bf38      	it	cc
 8005aa2:	250c      	movcc	r5, #12
 8005aa4:	2d00      	cmp	r5, #0
 8005aa6:	4606      	mov	r6, r0
 8005aa8:	db01      	blt.n	8005aae <_malloc_r+0x1a>
 8005aaa:	42a9      	cmp	r1, r5
 8005aac:	d903      	bls.n	8005ab6 <_malloc_r+0x22>
 8005aae:	230c      	movs	r3, #12
 8005ab0:	6033      	str	r3, [r6, #0]
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	bd70      	pop	{r4, r5, r6, pc}
 8005ab6:	f000 f8f1 	bl	8005c9c <__malloc_lock>
 8005aba:	4a21      	ldr	r2, [pc, #132]	; (8005b40 <_malloc_r+0xac>)
 8005abc:	6814      	ldr	r4, [r2, #0]
 8005abe:	4621      	mov	r1, r4
 8005ac0:	b991      	cbnz	r1, 8005ae8 <_malloc_r+0x54>
 8005ac2:	4c20      	ldr	r4, [pc, #128]	; (8005b44 <_malloc_r+0xb0>)
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	b91b      	cbnz	r3, 8005ad0 <_malloc_r+0x3c>
 8005ac8:	4630      	mov	r0, r6
 8005aca:	f000 f83d 	bl	8005b48 <_sbrk_r>
 8005ace:	6020      	str	r0, [r4, #0]
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	f000 f838 	bl	8005b48 <_sbrk_r>
 8005ad8:	1c43      	adds	r3, r0, #1
 8005ada:	d124      	bne.n	8005b26 <_malloc_r+0x92>
 8005adc:	230c      	movs	r3, #12
 8005ade:	6033      	str	r3, [r6, #0]
 8005ae0:	4630      	mov	r0, r6
 8005ae2:	f000 f8dc 	bl	8005c9e <__malloc_unlock>
 8005ae6:	e7e4      	b.n	8005ab2 <_malloc_r+0x1e>
 8005ae8:	680b      	ldr	r3, [r1, #0]
 8005aea:	1b5b      	subs	r3, r3, r5
 8005aec:	d418      	bmi.n	8005b20 <_malloc_r+0x8c>
 8005aee:	2b0b      	cmp	r3, #11
 8005af0:	d90f      	bls.n	8005b12 <_malloc_r+0x7e>
 8005af2:	600b      	str	r3, [r1, #0]
 8005af4:	50cd      	str	r5, [r1, r3]
 8005af6:	18cc      	adds	r4, r1, r3
 8005af8:	4630      	mov	r0, r6
 8005afa:	f000 f8d0 	bl	8005c9e <__malloc_unlock>
 8005afe:	f104 000b 	add.w	r0, r4, #11
 8005b02:	1d23      	adds	r3, r4, #4
 8005b04:	f020 0007 	bic.w	r0, r0, #7
 8005b08:	1ac3      	subs	r3, r0, r3
 8005b0a:	d0d3      	beq.n	8005ab4 <_malloc_r+0x20>
 8005b0c:	425a      	negs	r2, r3
 8005b0e:	50e2      	str	r2, [r4, r3]
 8005b10:	e7d0      	b.n	8005ab4 <_malloc_r+0x20>
 8005b12:	428c      	cmp	r4, r1
 8005b14:	684b      	ldr	r3, [r1, #4]
 8005b16:	bf16      	itet	ne
 8005b18:	6063      	strne	r3, [r4, #4]
 8005b1a:	6013      	streq	r3, [r2, #0]
 8005b1c:	460c      	movne	r4, r1
 8005b1e:	e7eb      	b.n	8005af8 <_malloc_r+0x64>
 8005b20:	460c      	mov	r4, r1
 8005b22:	6849      	ldr	r1, [r1, #4]
 8005b24:	e7cc      	b.n	8005ac0 <_malloc_r+0x2c>
 8005b26:	1cc4      	adds	r4, r0, #3
 8005b28:	f024 0403 	bic.w	r4, r4, #3
 8005b2c:	42a0      	cmp	r0, r4
 8005b2e:	d005      	beq.n	8005b3c <_malloc_r+0xa8>
 8005b30:	1a21      	subs	r1, r4, r0
 8005b32:	4630      	mov	r0, r6
 8005b34:	f000 f808 	bl	8005b48 <_sbrk_r>
 8005b38:	3001      	adds	r0, #1
 8005b3a:	d0cf      	beq.n	8005adc <_malloc_r+0x48>
 8005b3c:	6025      	str	r5, [r4, #0]
 8005b3e:	e7db      	b.n	8005af8 <_malloc_r+0x64>
 8005b40:	20000fec 	.word	0x20000fec
 8005b44:	20000ff0 	.word	0x20000ff0

08005b48 <_sbrk_r>:
 8005b48:	b538      	push	{r3, r4, r5, lr}
 8005b4a:	4c06      	ldr	r4, [pc, #24]	; (8005b64 <_sbrk_r+0x1c>)
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	4605      	mov	r5, r0
 8005b50:	4608      	mov	r0, r1
 8005b52:	6023      	str	r3, [r4, #0]
 8005b54:	f7fa ff54 	bl	8000a00 <_sbrk>
 8005b58:	1c43      	adds	r3, r0, #1
 8005b5a:	d102      	bne.n	8005b62 <_sbrk_r+0x1a>
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	b103      	cbz	r3, 8005b62 <_sbrk_r+0x1a>
 8005b60:	602b      	str	r3, [r5, #0]
 8005b62:	bd38      	pop	{r3, r4, r5, pc}
 8005b64:	200010cc 	.word	0x200010cc

08005b68 <__sread>:
 8005b68:	b510      	push	{r4, lr}
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b70:	f000 f896 	bl	8005ca0 <_read_r>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	bfab      	itete	ge
 8005b78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b7a:	89a3      	ldrhlt	r3, [r4, #12]
 8005b7c:	181b      	addge	r3, r3, r0
 8005b7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b82:	bfac      	ite	ge
 8005b84:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b86:	81a3      	strhlt	r3, [r4, #12]
 8005b88:	bd10      	pop	{r4, pc}

08005b8a <__swrite>:
 8005b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b8e:	461f      	mov	r7, r3
 8005b90:	898b      	ldrh	r3, [r1, #12]
 8005b92:	05db      	lsls	r3, r3, #23
 8005b94:	4605      	mov	r5, r0
 8005b96:	460c      	mov	r4, r1
 8005b98:	4616      	mov	r6, r2
 8005b9a:	d505      	bpl.n	8005ba8 <__swrite+0x1e>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ba4:	f000 f868 	bl	8005c78 <_lseek_r>
 8005ba8:	89a3      	ldrh	r3, [r4, #12]
 8005baa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bb2:	81a3      	strh	r3, [r4, #12]
 8005bb4:	4632      	mov	r2, r6
 8005bb6:	463b      	mov	r3, r7
 8005bb8:	4628      	mov	r0, r5
 8005bba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bbe:	f000 b817 	b.w	8005bf0 <_write_r>

08005bc2 <__sseek>:
 8005bc2:	b510      	push	{r4, lr}
 8005bc4:	460c      	mov	r4, r1
 8005bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bca:	f000 f855 	bl	8005c78 <_lseek_r>
 8005bce:	1c43      	adds	r3, r0, #1
 8005bd0:	89a3      	ldrh	r3, [r4, #12]
 8005bd2:	bf15      	itete	ne
 8005bd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005bd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bde:	81a3      	strheq	r3, [r4, #12]
 8005be0:	bf18      	it	ne
 8005be2:	81a3      	strhne	r3, [r4, #12]
 8005be4:	bd10      	pop	{r4, pc}

08005be6 <__sclose>:
 8005be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bea:	f000 b813 	b.w	8005c14 <_close_r>
	...

08005bf0 <_write_r>:
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	4c07      	ldr	r4, [pc, #28]	; (8005c10 <_write_r+0x20>)
 8005bf4:	4605      	mov	r5, r0
 8005bf6:	4608      	mov	r0, r1
 8005bf8:	4611      	mov	r1, r2
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	6022      	str	r2, [r4, #0]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f7fa fead 	bl	800095e <_write>
 8005c04:	1c43      	adds	r3, r0, #1
 8005c06:	d102      	bne.n	8005c0e <_write_r+0x1e>
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	b103      	cbz	r3, 8005c0e <_write_r+0x1e>
 8005c0c:	602b      	str	r3, [r5, #0]
 8005c0e:	bd38      	pop	{r3, r4, r5, pc}
 8005c10:	200010cc 	.word	0x200010cc

08005c14 <_close_r>:
 8005c14:	b538      	push	{r3, r4, r5, lr}
 8005c16:	4c06      	ldr	r4, [pc, #24]	; (8005c30 <_close_r+0x1c>)
 8005c18:	2300      	movs	r3, #0
 8005c1a:	4605      	mov	r5, r0
 8005c1c:	4608      	mov	r0, r1
 8005c1e:	6023      	str	r3, [r4, #0]
 8005c20:	f7fa feb9 	bl	8000996 <_close>
 8005c24:	1c43      	adds	r3, r0, #1
 8005c26:	d102      	bne.n	8005c2e <_close_r+0x1a>
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	b103      	cbz	r3, 8005c2e <_close_r+0x1a>
 8005c2c:	602b      	str	r3, [r5, #0]
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
 8005c30:	200010cc 	.word	0x200010cc

08005c34 <_fstat_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4c07      	ldr	r4, [pc, #28]	; (8005c54 <_fstat_r+0x20>)
 8005c38:	2300      	movs	r3, #0
 8005c3a:	4605      	mov	r5, r0
 8005c3c:	4608      	mov	r0, r1
 8005c3e:	4611      	mov	r1, r2
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	f7fa feb4 	bl	80009ae <_fstat>
 8005c46:	1c43      	adds	r3, r0, #1
 8005c48:	d102      	bne.n	8005c50 <_fstat_r+0x1c>
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	b103      	cbz	r3, 8005c50 <_fstat_r+0x1c>
 8005c4e:	602b      	str	r3, [r5, #0]
 8005c50:	bd38      	pop	{r3, r4, r5, pc}
 8005c52:	bf00      	nop
 8005c54:	200010cc 	.word	0x200010cc

08005c58 <_isatty_r>:
 8005c58:	b538      	push	{r3, r4, r5, lr}
 8005c5a:	4c06      	ldr	r4, [pc, #24]	; (8005c74 <_isatty_r+0x1c>)
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	4605      	mov	r5, r0
 8005c60:	4608      	mov	r0, r1
 8005c62:	6023      	str	r3, [r4, #0]
 8005c64:	f7fa feb3 	bl	80009ce <_isatty>
 8005c68:	1c43      	adds	r3, r0, #1
 8005c6a:	d102      	bne.n	8005c72 <_isatty_r+0x1a>
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	b103      	cbz	r3, 8005c72 <_isatty_r+0x1a>
 8005c70:	602b      	str	r3, [r5, #0]
 8005c72:	bd38      	pop	{r3, r4, r5, pc}
 8005c74:	200010cc 	.word	0x200010cc

08005c78 <_lseek_r>:
 8005c78:	b538      	push	{r3, r4, r5, lr}
 8005c7a:	4c07      	ldr	r4, [pc, #28]	; (8005c98 <_lseek_r+0x20>)
 8005c7c:	4605      	mov	r5, r0
 8005c7e:	4608      	mov	r0, r1
 8005c80:	4611      	mov	r1, r2
 8005c82:	2200      	movs	r2, #0
 8005c84:	6022      	str	r2, [r4, #0]
 8005c86:	461a      	mov	r2, r3
 8005c88:	f7fa feac 	bl	80009e4 <_lseek>
 8005c8c:	1c43      	adds	r3, r0, #1
 8005c8e:	d102      	bne.n	8005c96 <_lseek_r+0x1e>
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	b103      	cbz	r3, 8005c96 <_lseek_r+0x1e>
 8005c94:	602b      	str	r3, [r5, #0]
 8005c96:	bd38      	pop	{r3, r4, r5, pc}
 8005c98:	200010cc 	.word	0x200010cc

08005c9c <__malloc_lock>:
 8005c9c:	4770      	bx	lr

08005c9e <__malloc_unlock>:
 8005c9e:	4770      	bx	lr

08005ca0 <_read_r>:
 8005ca0:	b538      	push	{r3, r4, r5, lr}
 8005ca2:	4c07      	ldr	r4, [pc, #28]	; (8005cc0 <_read_r+0x20>)
 8005ca4:	4605      	mov	r5, r0
 8005ca6:	4608      	mov	r0, r1
 8005ca8:	4611      	mov	r1, r2
 8005caa:	2200      	movs	r2, #0
 8005cac:	6022      	str	r2, [r4, #0]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	f7fa fe38 	bl	8000924 <_read>
 8005cb4:	1c43      	adds	r3, r0, #1
 8005cb6:	d102      	bne.n	8005cbe <_read_r+0x1e>
 8005cb8:	6823      	ldr	r3, [r4, #0]
 8005cba:	b103      	cbz	r3, 8005cbe <_read_r+0x1e>
 8005cbc:	602b      	str	r3, [r5, #0]
 8005cbe:	bd38      	pop	{r3, r4, r5, pc}
 8005cc0:	200010cc 	.word	0x200010cc

08005cc4 <_init>:
 8005cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc6:	bf00      	nop
 8005cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cca:	bc08      	pop	{r3}
 8005ccc:	469e      	mov	lr, r3
 8005cce:	4770      	bx	lr

08005cd0 <_fini>:
 8005cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd2:	bf00      	nop
 8005cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd6:	bc08      	pop	{r3}
 8005cd8:	469e      	mov	lr, r3
 8005cda:	4770      	bx	lr
