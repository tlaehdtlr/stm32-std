
ADC_TemperatureSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007134  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  080072c8  080072c8  000172c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075f0  080075f0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080075f0  080075f0  000175f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075f8  080075f8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075f8  080075f8  000175f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075fc  080075fc  000175fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  200001dc  080077dc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  080077dc  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa6c  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002191  00000000  00000000  0002fc78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d50  00000000  00000000  00031e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c28  00000000  00000000  00032b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c9a0  00000000  00000000  00033788  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb24  00000000  00000000  00050128  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b400d  00000000  00000000  0005bc4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010fc59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000443c  00000000  00000000  0010fcd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080072ac 	.word	0x080072ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080072ac 	.word	0x080072ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
 8000ec8:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000eca:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <MX_ADC1_Init+0xe0>)
 8000ecc:	4a2f      	ldr	r2, [pc, #188]	; (8000f8c <MX_ADC1_Init+0xe4>)
 8000ece:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ed0:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <MX_ADC1_Init+0xe0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ed6:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <MX_ADC1_Init+0xe0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000edc:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <MX_ADC1_Init+0xe0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ee2:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <MX_ADC1_Init+0xe0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee8:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <MX_ADC1_Init+0xe0>)
 8000eea:	2204      	movs	r2, #4
 8000eec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000eee:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <MX_ADC1_Init+0xe0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ef4:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <MX_ADC1_Init+0xe0>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000efa:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <MX_ADC1_Init+0xe0>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <MX_ADC1_Init+0xe0>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f08:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <MX_ADC1_Init+0xe0>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <MX_ADC1_Init+0xe0>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f14:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <MX_ADC1_Init+0xe0>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <MX_ADC1_Init+0xe0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <MX_ADC1_Init+0xe0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f2a:	4817      	ldr	r0, [pc, #92]	; (8000f88 <MX_ADC1_Init+0xe0>)
 8000f2c:	f000 fe42 	bl	8001bb4 <HAL_ADC_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000f36:	f000 f9bb 	bl	80012b0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	4810      	ldr	r0, [pc, #64]	; (8000f88 <MX_ADC1_Init+0xe0>)
 8000f46:	f001 fe7b 	bl	8002c40 <HAL_ADCEx_MultiModeConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f50:	f000 f9ae 	bl	80012b0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_ADC1_Init+0xe8>)
 8000f56:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f58:	2306      	movs	r3, #6
 8000f5a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f60:	237f      	movs	r3, #127	; 0x7f
 8000f62:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f64:	2304      	movs	r3, #4
 8000f66:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_ADC1_Init+0xe0>)
 8000f72:	f001 f905 	bl	8002180 <HAL_ADC_ConfigChannel>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000f7c:	f000 f998 	bl	80012b0 <Error_Handler>
  }

}
 8000f80:	bf00      	nop
 8000f82:	3728      	adds	r7, #40	; 0x28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000204 	.word	0x20000204
 8000f8c:	50040000 	.word	0x50040000
 8000f90:	c7520000 	.word	0xc7520000

08000f94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <HAL_ADC_MspInit+0x38>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d10b      	bne.n	8000fbe <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_ADC_MspInit+0x3c>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	4a09      	ldr	r2, [pc, #36]	; (8000fd0 <HAL_ADC_MspInit+0x3c>)
 8000fac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <HAL_ADC_MspInit+0x3c>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	50040000 	.word	0x50040000
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fea:	4b3c      	ldr	r3, [pc, #240]	; (80010dc <MX_GPIO_Init+0x108>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	4a3b      	ldr	r2, [pc, #236]	; (80010dc <MX_GPIO_Init+0x108>)
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff6:	4b39      	ldr	r3, [pc, #228]	; (80010dc <MX_GPIO_Init+0x108>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	f003 0304 	and.w	r3, r3, #4
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001002:	4b36      	ldr	r3, [pc, #216]	; (80010dc <MX_GPIO_Init+0x108>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4a35      	ldr	r2, [pc, #212]	; (80010dc <MX_GPIO_Init+0x108>)
 8001008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4b33      	ldr	r3, [pc, #204]	; (80010dc <MX_GPIO_Init+0x108>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b30      	ldr	r3, [pc, #192]	; (80010dc <MX_GPIO_Init+0x108>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	4a2f      	ldr	r2, [pc, #188]	; (80010dc <MX_GPIO_Init+0x108>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001026:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <MX_GPIO_Init+0x108>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <MX_GPIO_Init+0x108>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	4a29      	ldr	r2, [pc, #164]	; (80010dc <MX_GPIO_Init+0x108>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103e:	4b27      	ldr	r3, [pc, #156]	; (80010dc <MX_GPIO_Init+0x108>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	21b0      	movs	r1, #176	; 0xb0
 800104e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001052:	f002 f8ed 	bl	8003230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105c:	4820      	ldr	r0, [pc, #128]	; (80010e0 <MX_GPIO_Init+0x10c>)
 800105e:	f002 f8e7 	bl	8003230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001062:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001068:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <MX_GPIO_Init+0x110>)
 800106a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	481c      	ldr	r0, [pc, #112]	; (80010e8 <MX_GPIO_Init+0x114>)
 8001078:	f001 ff68 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 800107c:	23b0      	movs	r3, #176	; 0xb0
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001096:	f001 ff59 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 800109a:	2340      	movs	r3, #64	; 0x40
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b0:	f001 ff4c 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80010b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4804      	ldr	r0, [pc, #16]	; (80010e0 <MX_GPIO_Init+0x10c>)
 80010ce:	f001 ff3d 	bl	8002f4c <HAL_GPIO_Init>

}
 80010d2:	bf00      	nop
 80010d4:	3728      	adds	r7, #40	; 0x28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000
 80010e0:	48000400 	.word	0x48000400
 80010e4:	10210000 	.word	0x10210000
 80010e8:	48000800 	.word	0x48000800

080010ec <__io_putchar>:
#else
    #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if (ch == '\n')
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b0a      	cmp	r3, #10
 80010f8:	d106      	bne.n	8001108 <__io_putchar+0x1c>
	  HAL_UART_Transmit(&huart2, (uint8_t *) "\r", 1, 0xFFFF);
 80010fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010fe:	2201      	movs	r2, #1
 8001100:	4907      	ldr	r1, [pc, #28]	; (8001120 <__io_putchar+0x34>)
 8001102:	4808      	ldr	r0, [pc, #32]	; (8001124 <__io_putchar+0x38>)
 8001104:	f003 f94e 	bl	80043a4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001108:	1d39      	adds	r1, r7, #4
 800110a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800110e:	2201      	movs	r2, #1
 8001110:	4804      	ldr	r0, [pc, #16]	; (8001124 <__io_putchar+0x38>)
 8001112:	f003 f947 	bl	80043a4 <HAL_UART_Transmit>
  return ch;
 8001116:	687b      	ldr	r3, [r7, #4]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	080072c8 	.word	0x080072c8
 8001124:	20000268 	.word	0x20000268

08001128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112e:	f000 fa87 	bl	8001640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001132:	f000 f853 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001136:	f7ff ff4d 	bl	8000fd4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800113a:	f000 f9af 	bl	800149c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800113e:	f7ff feb3 	bl	8000ea8 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* start calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8001142:	217f      	movs	r1, #127	; 0x7f
 8001144:	4820      	ldr	r0, [pc, #128]	; (80011c8 <main+0xa0>)
 8001146:	f001 fd1a 	bl	8002b7e <HAL_ADCEx_Calibration_Start>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <main+0x2c>
  {
	  Error_Handler();
 8001150:	f000 f8ae 	bl	80012b0 <Error_Handler>
  }
  /* start the conversion process */
  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8001154:	481c      	ldr	r0, [pc, #112]	; (80011c8 <main+0xa0>)
 8001156:	f000 fe7b 	bl	8001e50 <HAL_ADC_Start>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <main+0x3c>
  {
	  Error_Handler();
 8001160:	f000 f8a6 	bl	80012b0 <Error_Handler>

  float vSense, temp;

  while (1)
  {
    HAL_ADC_PollForConversion(&hadc1, 100);
 8001164:	2164      	movs	r1, #100	; 0x64
 8001166:	4818      	ldr	r0, [pc, #96]	; (80011c8 <main+0xa0>)
 8001168:	f000 ff2c 	bl	8001fc4 <HAL_ADC_PollForConversion>
    adc1 = HAL_ADC_GetValue(&hadc1);
 800116c:	4816      	ldr	r0, [pc, #88]	; (80011c8 <main+0xa0>)
 800116e:	f000 fff9 	bl	8002164 <HAL_ADC_GetValue>
 8001172:	4603      	mov	r3, r0
 8001174:	81fb      	strh	r3, [r7, #14]
    //printf("ADC1_Temperature : %d \n", adc1);

    vSense = adc1 * ADC_TO_VOLT;
 8001176:	89fb      	ldrh	r3, [r7, #14]
 8001178:	ee07 3a90 	vmov	s15, r3
 800117c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001180:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80011cc <main+0xa4>
 8001184:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001188:	edc7 7a02 	vstr	s15, [r7, #8]
    temp = (V30-vSense) / AVG_SLOPE + 25.0;
 800118c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80011d0 <main+0xa8>
 8001190:	edd7 7a02 	vldr	s15, [r7, #8]
 8001194:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001198:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80011d4 <main+0xac>
 800119c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80011a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011a8:	edc7 7a01 	vstr	s15, [r7, #4]
    printf("ADC1, Temp : %d , %f \n", adc1, temp);
 80011ac:	89fc      	ldrh	r4, [r7, #14]
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff f9ca 	bl	8000548 <__aeabi_f2d>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4621      	mov	r1, r4
 80011ba:	4807      	ldr	r0, [pc, #28]	; (80011d8 <main+0xb0>)
 80011bc:	f004 f9ac 	bl	8005518 <iprintf>
	  /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(100);
 80011c0:	2064      	movs	r0, #100	; 0x64
 80011c2:	f000 fab9 	bl	8001738 <HAL_Delay>
    HAL_ADC_PollForConversion(&hadc1, 100);
 80011c6:	e7cd      	b.n	8001164 <main+0x3c>
 80011c8:	20000204 	.word	0x20000204
 80011cc:	3a533333 	.word	0x3a533333
 80011d0:	3f428f5c 	.word	0x3f428f5c
 80011d4:	3b23d70a 	.word	0x3b23d70a
 80011d8:	080072cc 	.word	0x080072cc

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b0a4      	sub	sp, #144	; 0x90
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011e6:	2244      	movs	r2, #68	; 0x44
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f003 fd30 	bl	8004c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	2234      	movs	r2, #52	; 0x34
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f003 fd22 	bl	8004c50 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800120c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001210:	f002 f834 	bl	800327c <HAL_PWREx_ControlVoltageScaling>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0x42>
  {
    Error_Handler();
 800121a:	f000 f849 	bl	80012b0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800121e:	2310      	movs	r3, #16
 8001220:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001222:	2301      	movs	r3, #1
 8001224:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800122a:	2360      	movs	r3, #96	; 0x60
 800122c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122e:	2302      	movs	r3, #2
 8001230:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001232:	2301      	movs	r3, #1
 8001234:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001236:	2301      	movs	r3, #1
 8001238:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 40;
 800123c:	2328      	movs	r3, #40	; 0x28
 800123e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001242:	2302      	movs	r3, #2
 8001244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001248:	2302      	movs	r3, #2
 800124a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001252:	4618      	mov	r0, r3
 8001254:	f002 f868 	bl	8003328 <HAL_RCC_OscConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800125e:	f000 f827 	bl	80012b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001262:	230f      	movs	r3, #15
 8001264:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001266:	2303      	movs	r3, #3
 8001268:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001276:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800127a:	2104      	movs	r1, #4
 800127c:	4618      	mov	r0, r3
 800127e:	f002 fcb9 	bl	8003bf4 <HAL_RCC_ClockConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001288:	f000 f812 	bl	80012b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800128c:	f244 0302 	movw	r3, #16386	; 0x4002
 8001290:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	4618      	mov	r0, r3
 800129a:	f002 feaf 	bl	8003ffc <HAL_RCCEx_PeriphCLKConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80012a4:	f000 f804 	bl	80012b0 <Error_Handler>
  }
}
 80012a8:	bf00      	nop
 80012aa:	3790      	adds	r7, #144	; 0x90
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <Error_Handler+0x6>

080012b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <HAL_MspInit+0x44>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c2:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <HAL_MspInit+0x44>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6613      	str	r3, [r2, #96]	; 0x60
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <HAL_MspInit+0x44>)
 80012cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <HAL_MspInit+0x44>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012da:	4a08      	ldr	r2, [pc, #32]	; (80012fc <HAL_MspInit+0x44>)
 80012dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e0:	6593      	str	r3, [r2, #88]	; 0x58
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_MspInit+0x44>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000

08001300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <NMI_Handler+0x4>

08001306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800130a:	e7fe      	b.n	800130a <HardFault_Handler+0x4>

0800130c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <MemManage_Handler+0x4>

08001312 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001316:	e7fe      	b.n	8001316 <BusFault_Handler+0x4>

08001318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800131c:	e7fe      	b.n	800131c <UsageFault_Handler+0x4>

0800131e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134c:	f000 f9d4 	bl	80016f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}

08001354 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	e00a      	b.n	800137c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001366:	f3af 8000 	nop.w
 800136a:	4601      	mov	r1, r0
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	60ba      	str	r2, [r7, #8]
 8001372:	b2ca      	uxtb	r2, r1
 8001374:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	3301      	adds	r3, #1
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	429a      	cmp	r2, r3
 8001382:	dbf0      	blt.n	8001366 <_read+0x12>
	}

return len;
 8001384:	687b      	ldr	r3, [r7, #4]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	e009      	b.n	80013b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	60ba      	str	r2, [r7, #8]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fe9f 	bl	80010ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	dbf1      	blt.n	80013a0 <_write+0x12>
	}
	return len;
 80013bc:	687b      	ldr	r3, [r7, #4]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <_close>:

int _close(int file)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
	return -1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ee:	605a      	str	r2, [r3, #4]
	return 0;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <_isatty>:

int _isatty(int file)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
	return 1;
 8001406:	2301      	movs	r3, #1
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
	return 0;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001438:	4a14      	ldr	r2, [pc, #80]	; (800148c <_sbrk+0x5c>)
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <_sbrk+0x60>)
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <_sbrk+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <_sbrk+0x64>)
 800144e:	4a12      	ldr	r2, [pc, #72]	; (8001498 <_sbrk+0x68>)
 8001450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	429a      	cmp	r2, r3
 800145e:	d207      	bcs.n	8001470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001460:	f003 fbcc 	bl	8004bfc <__errno>
 8001464:	4602      	mov	r2, r0
 8001466:	230c      	movs	r3, #12
 8001468:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	e009      	b.n	8001484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <_sbrk+0x64>)
 8001480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001482:	68fb      	ldr	r3, [r7, #12]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	2000a000 	.word	0x2000a000
 8001490:	00000400 	.word	0x00000400
 8001494:	200001f8 	.word	0x200001f8
 8001498:	200002f0 	.word	0x200002f0

0800149c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MX_USART2_UART_Init+0x58>)
 80014a2:	4a15      	ldr	r2, [pc, #84]	; (80014f8 <MX_USART2_UART_Init+0x5c>)
 80014a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <MX_USART2_UART_Init+0x58>)
 80014a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_USART2_UART_Init+0x58>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_USART2_UART_Init+0x58>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_USART2_UART_Init+0x58>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_USART2_UART_Init+0x58>)
 80014c2:	220c      	movs	r2, #12
 80014c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <MX_USART2_UART_Init+0x58>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_USART2_UART_Init+0x58>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <MX_USART2_UART_Init+0x58>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_USART2_UART_Init+0x58>)
 80014da:	2200      	movs	r2, #0
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_USART2_UART_Init+0x58>)
 80014e0:	f002 ff12 	bl	8004308 <HAL_UART_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014ea:	f7ff fee1 	bl	80012b0 <Error_Handler>
  }

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000268 	.word	0x20000268
 80014f8:	40004400 	.word	0x40004400

080014fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a17      	ldr	r2, [pc, #92]	; (8001578 <HAL_UART_MspInit+0x7c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d128      	bne.n	8001570 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <HAL_UART_MspInit+0x80>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001522:	4a16      	ldr	r2, [pc, #88]	; (800157c <HAL_UART_MspInit+0x80>)
 8001524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001528:	6593      	str	r3, [r2, #88]	; 0x58
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <HAL_UART_MspInit+0x80>)
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <HAL_UART_MspInit+0x80>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <HAL_UART_MspInit+0x80>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <HAL_UART_MspInit+0x80>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800154e:	230c      	movs	r3, #12
 8001550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800155e:	2307      	movs	r3, #7
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156c:	f001 fcee 	bl	8002f4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	; 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40004400 	.word	0x40004400
 800157c:	40021000 	.word	0x40021000

08001580 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001584:	f000 f826 	bl	80015d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001588:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800158a:	e003      	b.n	8001594 <LoopCopyDataInit>

0800158c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800158e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001590:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001592:	3104      	adds	r1, #4

08001594 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001594:	480a      	ldr	r0, [pc, #40]	; (80015c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001598:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800159a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800159c:	d3f6      	bcc.n	800158c <CopyDataInit>
	ldr	r2, =_sbss
 800159e:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80015a0:	e002      	b.n	80015a8 <LoopFillZerobss>

080015a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80015a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80015a4:	f842 3b04 	str.w	r3, [r2], #4

080015a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <LoopForever+0x16>)
	cmp	r2, r3
 80015aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80015ac:	d3f9      	bcc.n	80015a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ae:	f003 fb2b 	bl	8004c08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015b2:	f7ff fdb9 	bl	8001128 <main>

080015b6 <LoopForever>:

LoopForever:
    b LoopForever
 80015b6:	e7fe      	b.n	80015b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015b8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80015bc:	08007600 	.word	0x08007600
	ldr	r0, =_sdata
 80015c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80015c4:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 80015c8:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 80015cc:	200002f0 	.word	0x200002f0

080015d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015d0:	e7fe      	b.n	80015d0 <ADC1_2_IRQHandler>
	...

080015d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d8:	4b17      	ldr	r3, [pc, #92]	; (8001638 <SystemInit+0x64>)
 80015da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015de:	4a16      	ldr	r2, [pc, #88]	; (8001638 <SystemInit+0x64>)
 80015e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <SystemInit+0x68>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a13      	ldr	r2, [pc, #76]	; (800163c <SystemInit+0x68>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <SystemInit+0x68>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <SystemInit+0x68>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a0f      	ldr	r2, [pc, #60]	; (800163c <SystemInit+0x68>)
 8001600:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001604:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001608:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <SystemInit+0x68>)
 800160c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001610:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <SystemInit+0x68>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <SystemInit+0x68>)
 8001618:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800161c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <SystemInit+0x68>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <SystemInit+0x64>)
 8001626:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800162a:	609a      	str	r2, [r3, #8]
#endif
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000ed00 	.word	0xe000ed00
 800163c:	40021000 	.word	0x40021000

08001640 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800164a:	4b0c      	ldr	r3, [pc, #48]	; (800167c <HAL_Init+0x3c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a0b      	ldr	r2, [pc, #44]	; (800167c <HAL_Init+0x3c>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001654:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001656:	2003      	movs	r0, #3
 8001658:	f001 fc44 	bl	8002ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800165c:	2000      	movs	r0, #0
 800165e:	f000 f80f 	bl	8001680 <HAL_InitTick>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	71fb      	strb	r3, [r7, #7]
 800166c:	e001      	b.n	8001672 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800166e:	f7ff fe23 	bl	80012b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001672:	79fb      	ldrb	r3, [r7, #7]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40022000 	.word	0x40022000

08001680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <HAL_InitTick+0x6c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d023      	beq.n	80016dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001694:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <HAL_InitTick+0x70>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <HAL_InitTick+0x6c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f001 fc41 	bl	8002f32 <HAL_SYSTICK_Config>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10f      	bne.n	80016d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b0f      	cmp	r3, #15
 80016ba:	d809      	bhi.n	80016d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016bc:	2200      	movs	r2, #0
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f001 fc19 	bl	8002efa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016c8:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <HAL_InitTick+0x74>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	e007      	b.n	80016e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	e004      	b.n	80016e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	73fb      	strb	r3, [r7, #15]
 80016da:	e001      	b.n	80016e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000008 	.word	0x20000008
 80016f0:	20000000 	.word	0x20000000
 80016f4:	20000004 	.word	0x20000004

080016f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_IncTick+0x20>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_IncTick+0x24>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4413      	add	r3, r2
 8001708:	4a04      	ldr	r2, [pc, #16]	; (800171c <HAL_IncTick+0x24>)
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000008 	.word	0x20000008
 800171c:	200002e8 	.word	0x200002e8

08001720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return uwTick;
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <HAL_GetTick+0x14>)
 8001726:	681b      	ldr	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	200002e8 	.word	0x200002e8

08001738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff ffee 	bl	8001720 <HAL_GetTick>
 8001744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001750:	d005      	beq.n	800175e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_Delay+0x40>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800175e:	bf00      	nop
 8001760:	f7ff ffde 	bl	8001720 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	429a      	cmp	r2, r3
 800176e:	d8f7      	bhi.n	8001760 <HAL_Delay+0x28>
  {
  }
}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000008 	.word	0x20000008

0800177c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	609a      	str	r2, [r3, #8]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	609a      	str	r2, [r3, #8]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3360      	adds	r3, #96	; 0x60
 80017f6:	461a      	mov	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <LL_ADC_SetOffset+0x44>)
 8001806:	4013      	ands	r3, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	4313      	orrs	r3, r2
 8001814:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800181c:	bf00      	nop
 800181e:	371c      	adds	r7, #28
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	03fff000 	.word	0x03fff000

0800182c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3360      	adds	r3, #96	; 0x60
 800183a:	461a      	mov	r2, r3
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800184c:	4618      	mov	r0, r3
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001858:	b480      	push	{r7}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	3360      	adds	r3, #96	; 0x60
 8001868:	461a      	mov	r2, r3
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	431a      	orrs	r2, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001882:	bf00      	nop
 8001884:	371c      	adds	r7, #28
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	615a      	str	r2, [r3, #20]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018da:	b480      	push	{r7}
 80018dc:	b087      	sub	sp, #28
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	3330      	adds	r3, #48	; 0x30
 80018ea:	461a      	mov	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	0a1b      	lsrs	r3, r3, #8
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	4413      	add	r3, r2
 80018f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	f003 031f 	and.w	r3, r3, #31
 8001904:	211f      	movs	r1, #31
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	401a      	ands	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	0e9b      	lsrs	r3, r3, #26
 8001912:	f003 011f 	and.w	r1, r3, #31
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	431a      	orrs	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001926:	bf00      	nop
 8001928:	371c      	adds	r7, #28
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001932:	b480      	push	{r7}
 8001934:	b087      	sub	sp, #28
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	3314      	adds	r3, #20
 8001942:	461a      	mov	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	0e5b      	lsrs	r3, r3, #25
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	4413      	add	r3, r2
 8001950:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	0d1b      	lsrs	r3, r3, #20
 800195a:	f003 031f 	and.w	r3, r3, #31
 800195e:	2107      	movs	r1, #7
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	401a      	ands	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	0d1b      	lsrs	r3, r3, #20
 800196c:	f003 031f 	and.w	r3, r3, #31
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	431a      	orrs	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800197c:	bf00      	nop
 800197e:	371c      	adds	r7, #28
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a0:	43db      	mvns	r3, r3
 80019a2:	401a      	ands	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f003 0318 	and.w	r3, r3, #24
 80019aa:	4908      	ldr	r1, [pc, #32]	; (80019cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80019ac:	40d9      	lsrs	r1, r3
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	400b      	ands	r3, r1
 80019b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b6:	431a      	orrs	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	0007ffff 	.word	0x0007ffff

080019d0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 031f 	and.w	r3, r3, #31
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6093      	str	r3, [r2, #8]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a40:	d101      	bne.n	8001a46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a90:	d101      	bne.n	8001a96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ab4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ab8:	f043 0201 	orr.w	r2, r3, #1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001adc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ae0:	f043 0202 	orr.w	r2, r3, #2
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d101      	bne.n	8001b0c <LL_ADC_IsEnabled+0x18>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <LL_ADC_IsEnabled+0x1a>
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d101      	bne.n	8001b32 <LL_ADC_IsDisableOngoing+0x18>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <LL_ADC_IsDisableOngoing+0x1a>
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b54:	f043 0204 	orr.w	r2, r3, #4
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d101      	bne.n	8001b80 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d101      	bne.n	8001ba6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b089      	sub	sp, #36	; 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e12f      	b.n	8001e2e <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff f9d9 	bl	8000f94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff19 	bl	8001a2c <LL_ADC_IsDeepPowerDownEnabled>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d004      	beq.n	8001c0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff feff 	bl	8001a08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ff34 	bl	8001a7c <LL_ADC_IsInternalRegulatorEnabled>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d113      	bne.n	8001c42 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff ff18 	bl	8001a54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001c24:	4b84      	ldr	r3, [pc, #528]	; (8001e38 <HAL_ADC_Init+0x284>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	099b      	lsrs	r3, r3, #6
 8001c2a:	4a84      	ldr	r2, [pc, #528]	; (8001e3c <HAL_ADC_Init+0x288>)
 8001c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c30:	099b      	lsrs	r3, r3, #6
 8001c32:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c34:	e002      	b.n	8001c3c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f9      	bne.n	8001c36 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ff18 	bl	8001a7c <LL_ADC_IsInternalRegulatorEnabled>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10d      	bne.n	8001c6e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c56:	f043 0210 	orr.w	r2, r3, #16
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c62:	f043 0201 	orr.w	r2, r3, #1
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff78 	bl	8001b68 <LL_ADC_REG_IsConversionOngoing>
 8001c78:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f040 80ca 	bne.w	8001e1c <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f040 80c6 	bne.w	8001e1c <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c94:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c98:	f043 0202 	orr.w	r2, r3, #2
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff25 	bl	8001af4 <LL_ADC_IsEnabled>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d110      	bne.n	8001cd2 <HAL_ADC_Init+0x11e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cb0:	4863      	ldr	r0, [pc, #396]	; (8001e40 <HAL_ADC_Init+0x28c>)
 8001cb2:	f7ff ff1f 	bl	8001af4 <LL_ADC_IsEnabled>
 8001cb6:	4604      	mov	r4, r0
 8001cb8:	4862      	ldr	r0, [pc, #392]	; (8001e44 <HAL_ADC_Init+0x290>)
 8001cba:	f7ff ff1b 	bl	8001af4 <LL_ADC_IsEnabled>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4323      	orrs	r3, r4
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d105      	bne.n	8001cd2 <HAL_ADC_Init+0x11e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	485e      	ldr	r0, [pc, #376]	; (8001e48 <HAL_ADC_Init+0x294>)
 8001cce:	f7ff fd55 	bl	800177c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7e5b      	ldrb	r3, [r3, #25]
 8001cd6:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cdc:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ce2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001ce8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf0:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d106      	bne.n	8001d0e <HAL_ADC_Init+0x15a>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	3b01      	subs	r3, #1
 8001d06:	045b      	lsls	r3, r3, #17
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d009      	beq.n	8001d2a <HAL_ADC_Init+0x176>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d22:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	4b46      	ldr	r3, [pc, #280]	; (8001e4c <HAL_ADC_Init+0x298>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	69b9      	ldr	r1, [r7, #24]
 8001d3a:	430b      	orrs	r3, r1
 8001d3c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff ff10 	bl	8001b68 <LL_ADC_REG_IsConversionOngoing>
 8001d48:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ff1d 	bl	8001b8e <LL_ADC_INJ_IsConversionOngoing>
 8001d54:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d13d      	bne.n	8001dd8 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d13a      	bne.n	8001dd8 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d66:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d6e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d7e:	f023 0302 	bic.w	r3, r3, #2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	69b9      	ldr	r1, [r7, #24]
 8001d88:	430b      	orrs	r3, r1
 8001d8a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d118      	bne.n	8001dc8 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001da0:	f023 0304 	bic.w	r3, r3, #4
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dac:	4311      	orrs	r1, r2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001db2:	4311      	orrs	r1, r2
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001db8:	430a      	orrs	r2, r1
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0201 	orr.w	r2, r2, #1
 8001dc4:	611a      	str	r2, [r3, #16]
 8001dc6:	e007      	b.n	8001dd8 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0201 	bic.w	r2, r2, #1
 8001dd6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d10c      	bne.n	8001dfa <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f023 010f 	bic.w	r1, r3, #15
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	1e5a      	subs	r2, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	631a      	str	r2, [r3, #48]	; 0x30
 8001df8:	e007      	b.n	8001e0a <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 020f 	bic.w	r2, r2, #15
 8001e08:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0e:	f023 0303 	bic.w	r3, r3, #3
 8001e12:	f043 0201 	orr.w	r2, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	655a      	str	r2, [r3, #84]	; 0x54
 8001e1a:	e007      	b.n	8001e2c <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e20:	f043 0210 	orr.w	r2, r3, #16
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3724      	adds	r7, #36	; 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd90      	pop	{r4, r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000000 	.word	0x20000000
 8001e3c:	053e2d63 	.word	0x053e2d63
 8001e40:	50040000 	.word	0x50040000
 8001e44:	50040100 	.word	0x50040100
 8001e48:	50040300 	.word	0x50040300
 8001e4c:	fff0c007 	.word	0xfff0c007

08001e50 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e58:	4857      	ldr	r0, [pc, #348]	; (8001fb8 <HAL_ADC_Start+0x168>)
 8001e5a:	f7ff fdb9 	bl	80019d0 <LL_ADC_GetMultimode>
 8001e5e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fe7f 	bl	8001b68 <LL_ADC_REG_IsConversionOngoing>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f040 809c 	bne.w	8001faa <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_ADC_Start+0x30>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e097      	b.n	8001fb0 <HAL_ADC_Start+0x160>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 fd73 	bl	8002974 <ADC_Enable>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e92:	7dfb      	ldrb	r3, [r7, #23]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f040 8083 	bne.w	8001fa0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ea2:	f023 0301 	bic.w	r3, r3, #1
 8001ea6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a42      	ldr	r2, [pc, #264]	; (8001fbc <HAL_ADC_Start+0x16c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d002      	beq.n	8001ebe <HAL_ADC_Start+0x6e>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	e000      	b.n	8001ec0 <HAL_ADC_Start+0x70>
 8001ebe:	4b40      	ldr	r3, [pc, #256]	; (8001fc0 <HAL_ADC_Start+0x170>)
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d002      	beq.n	8001ece <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d105      	bne.n	8001eda <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ee6:	d106      	bne.n	8001ef6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eec:	f023 0206 	bic.w	r2, r3, #6
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ef4:	e002      	b.n	8001efc <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	221c      	movs	r2, #28
 8001f02:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a2a      	ldr	r2, [pc, #168]	; (8001fbc <HAL_ADC_Start+0x16c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d002      	beq.n	8001f1c <HAL_ADC_Start+0xcc>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	e000      	b.n	8001f1e <HAL_ADC_Start+0xce>
 8001f1c:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <HAL_ADC_Start+0x170>)
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d008      	beq.n	8001f38 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	2b05      	cmp	r3, #5
 8001f30:	d002      	beq.n	8001f38 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	2b09      	cmp	r3, #9
 8001f36:	d114      	bne.n	8001f62 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d007      	beq.n	8001f56 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fdf0 	bl	8001b40 <LL_ADC_REG_StartConversion>
 8001f60:	e025      	b.n	8001fae <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <HAL_ADC_Start+0x16c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d002      	beq.n	8001f7e <HAL_ADC_Start+0x12e>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	e000      	b.n	8001f80 <HAL_ADC_Start+0x130>
 8001f7e:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <HAL_ADC_Start+0x170>)
 8001f80:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00f      	beq.n	8001fae <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54
 8001f9e:	e006      	b.n	8001fae <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001fa8:	e001      	b.n	8001fae <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001faa:	2302      	movs	r3, #2
 8001fac:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	50040300 	.word	0x50040300
 8001fbc:	50040100 	.word	0x50040100
 8001fc0:	50040000 	.word	0x50040000

08001fc4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fce:	4862      	ldr	r0, [pc, #392]	; (8002158 <HAL_ADC_PollForConversion+0x194>)
 8001fd0:	f7ff fcfe 	bl	80019d0 <LL_ADC_GetMultimode>
 8001fd4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d102      	bne.n	8001fe4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001fde:	2308      	movs	r3, #8
 8001fe0:	61fb      	str	r3, [r7, #28]
 8001fe2:	e02a      	b.n	800203a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d005      	beq.n	8001ff6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2b05      	cmp	r3, #5
 8001fee:	d002      	beq.n	8001ff6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2b09      	cmp	r3, #9
 8001ff4:	d111      	bne.n	800201a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d007      	beq.n	8002014 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002008:	f043 0220 	orr.w	r2, r3, #32
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e09d      	b.n	8002150 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002014:	2304      	movs	r3, #4
 8002016:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002018:	e00f      	b.n	800203a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800201a:	484f      	ldr	r0, [pc, #316]	; (8002158 <HAL_ADC_PollForConversion+0x194>)
 800201c:	f7ff fce6 	bl	80019ec <LL_ADC_GetMultiDMATransfer>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d007      	beq.n	8002036 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202a:	f043 0220 	orr.w	r2, r3, #32
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e08c      	b.n	8002150 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002036:	2304      	movs	r3, #4
 8002038:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800203a:	f7ff fb71 	bl	8001720 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002040:	e01a      	b.n	8002078 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002048:	d016      	beq.n	8002078 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800204a:	f7ff fb69 	bl	8001720 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d302      	bcc.n	8002060 <HAL_ADC_PollForConversion+0x9c>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10b      	bne.n	8002078 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002064:	f043 0204 	orr.w	r2, r3, #4
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e06b      	b.n	8002150 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	4013      	ands	r3, r2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0dd      	beq.n	8002042 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fc0c 	bl	80018b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d01c      	beq.n	80020dc <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	7e5b      	ldrb	r3, [r3, #25]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d118      	bne.n	80020dc <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d111      	bne.n	80020dc <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d105      	bne.n	80020dc <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d4:	f043 0201 	orr.w	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a1e      	ldr	r2, [pc, #120]	; (800215c <HAL_ADC_PollForConversion+0x198>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d002      	beq.n	80020ec <HAL_ADC_PollForConversion+0x128>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	e000      	b.n	80020ee <HAL_ADC_PollForConversion+0x12a>
 80020ec:	4b1c      	ldr	r3, [pc, #112]	; (8002160 <HAL_ADC_PollForConversion+0x19c>)
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d008      	beq.n	8002108 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2b05      	cmp	r3, #5
 8002100:	d002      	beq.n	8002108 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b09      	cmp	r3, #9
 8002106:	d104      	bne.n	8002112 <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	61bb      	str	r3, [r7, #24]
 8002110:	e00c      	b.n	800212c <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a11      	ldr	r2, [pc, #68]	; (800215c <HAL_ADC_PollForConversion+0x198>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d002      	beq.n	8002122 <HAL_ADC_PollForConversion+0x15e>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	e000      	b.n	8002124 <HAL_ADC_PollForConversion+0x160>
 8002122:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <HAL_ADC_PollForConversion+0x19c>)
 8002124:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	2b08      	cmp	r3, #8
 8002130:	d104      	bne.n	800213c <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2208      	movs	r2, #8
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	e008      	b.n	800214e <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d103      	bne.n	800214e <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	220c      	movs	r2, #12
 800214c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3720      	adds	r7, #32
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	50040300 	.word	0x50040300
 800215c:	50040100 	.word	0x50040100
 8002160:	50040000 	.word	0x50040000

08002164 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b0b6      	sub	sp, #216	; 0xd8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x22>
 800219e:	2302      	movs	r3, #2
 80021a0:	e3d4      	b.n	800294c <HAL_ADC_ConfigChannel+0x7cc>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fcda 	bl	8001b68 <LL_ADC_REG_IsConversionOngoing>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 83b9 	bne.w	800292e <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b05      	cmp	r3, #5
 80021c2:	d824      	bhi.n	800220e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	3b02      	subs	r3, #2
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d81b      	bhi.n	8002206 <HAL_ADC_ConfigChannel+0x86>
 80021ce:	a201      	add	r2, pc, #4	; (adr r2, 80021d4 <HAL_ADC_ConfigChannel+0x54>)
 80021d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d4:	080021e5 	.word	0x080021e5
 80021d8:	080021ed 	.word	0x080021ed
 80021dc:	080021f5 	.word	0x080021f5
 80021e0:	080021fd 	.word	0x080021fd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	220c      	movs	r2, #12
 80021e8:	605a      	str	r2, [r3, #4]
          break;
 80021ea:	e011      	b.n	8002210 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	2212      	movs	r2, #18
 80021f0:	605a      	str	r2, [r3, #4]
          break;
 80021f2:	e00d      	b.n	8002210 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	2218      	movs	r2, #24
 80021f8:	605a      	str	r2, [r3, #4]
          break;
 80021fa:	e009      	b.n	8002210 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002202:	605a      	str	r2, [r3, #4]
          break;
 8002204:	e004      	b.n	8002210 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2206      	movs	r2, #6
 800220a:	605a      	str	r2, [r3, #4]
          break;
 800220c:	e000      	b.n	8002210 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800220e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	6859      	ldr	r1, [r3, #4]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	f7ff fb5c 	bl	80018da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fc9e 	bl	8001b68 <LL_ADC_REG_IsConversionOngoing>
 800222c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fcaa 	bl	8001b8e <LL_ADC_INJ_IsConversionOngoing>
 800223a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800223e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002242:	2b00      	cmp	r3, #0
 8002244:	f040 81c1 	bne.w	80025ca <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002248:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800224c:	2b00      	cmp	r3, #0
 800224e:	f040 81bc 	bne.w	80025ca <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800225a:	d10f      	bne.n	800227c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2200      	movs	r2, #0
 8002266:	4619      	mov	r1, r3
 8002268:	f7ff fb63 	bl	8001932 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fb0a 	bl	800188e <LL_ADC_SetSamplingTimeCommonConfig>
 800227a:	e00e      	b.n	800229a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	6819      	ldr	r1, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	461a      	mov	r2, r3
 800228a:	f7ff fb52 	bl	8001932 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fafa 	bl	800188e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	08db      	lsrs	r3, r3, #3
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d00a      	beq.n	80022d2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	6919      	ldr	r1, [r3, #16]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80022cc:	f7ff fa8a 	bl	80017e4 <LL_ADC_SetOffset>
 80022d0:	e17b      	b.n	80025ca <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2100      	movs	r1, #0
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff faa7 	bl	800182c <LL_ADC_GetOffsetChannel>
 80022de:	4603      	mov	r3, r0
 80022e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10a      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x17e>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fa9c 	bl	800182c <LL_ADC_GetOffsetChannel>
 80022f4:	4603      	mov	r3, r0
 80022f6:	0e9b      	lsrs	r3, r3, #26
 80022f8:	f003 021f 	and.w	r2, r3, #31
 80022fc:	e01e      	b.n	800233c <HAL_ADC_ConfigChannel+0x1bc>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fa91 	bl	800182c <LL_ADC_GetOffsetChannel>
 800230a:	4603      	mov	r3, r0
 800230c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800231c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002320:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002324:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800232c:	2320      	movs	r3, #32
 800232e:	e004      	b.n	800233a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002330:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002344:	2b00      	cmp	r3, #0
 8002346:	d105      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x1d4>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	0e9b      	lsrs	r3, r3, #26
 800234e:	f003 031f 	and.w	r3, r3, #31
 8002352:	e018      	b.n	8002386 <HAL_ADC_ConfigChannel+0x206>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002368:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800236c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002370:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002378:	2320      	movs	r3, #32
 800237a:	e004      	b.n	8002386 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800237c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002386:	429a      	cmp	r2, r3
 8002388:	d106      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2200      	movs	r2, #0
 8002390:	2100      	movs	r1, #0
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fa60 	bl	8001858 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2101      	movs	r1, #1
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fa44 	bl	800182c <LL_ADC_GetOffsetChannel>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10a      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x244>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2101      	movs	r1, #1
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fa39 	bl	800182c <LL_ADC_GetOffsetChannel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	0e9b      	lsrs	r3, r3, #26
 80023be:	f003 021f 	and.w	r2, r3, #31
 80023c2:	e01e      	b.n	8002402 <HAL_ADC_ConfigChannel+0x282>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2101      	movs	r1, #1
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fa2e 	bl	800182c <LL_ADC_GetOffsetChannel>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80023e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80023ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80023f2:	2320      	movs	r3, #32
 80023f4:	e004      	b.n	8002400 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80023f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240a:	2b00      	cmp	r3, #0
 800240c:	d105      	bne.n	800241a <HAL_ADC_ConfigChannel+0x29a>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	0e9b      	lsrs	r3, r3, #26
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	e018      	b.n	800244c <HAL_ADC_ConfigChannel+0x2cc>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800242e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002432:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002436:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800243e:	2320      	movs	r3, #32
 8002440:	e004      	b.n	800244c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002442:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002446:	fab3 f383 	clz	r3, r3
 800244a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800244c:	429a      	cmp	r2, r3
 800244e:	d106      	bne.n	800245e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2200      	movs	r2, #0
 8002456:	2101      	movs	r1, #1
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff f9fd 	bl	8001858 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2102      	movs	r1, #2
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff f9e1 	bl	800182c <LL_ADC_GetOffsetChannel>
 800246a:	4603      	mov	r3, r0
 800246c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10a      	bne.n	800248a <HAL_ADC_ConfigChannel+0x30a>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2102      	movs	r1, #2
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff f9d6 	bl	800182c <LL_ADC_GetOffsetChannel>
 8002480:	4603      	mov	r3, r0
 8002482:	0e9b      	lsrs	r3, r3, #26
 8002484:	f003 021f 	and.w	r2, r3, #31
 8002488:	e01e      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x348>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2102      	movs	r1, #2
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff f9cb 	bl	800182c <LL_ADC_GetOffsetChannel>
 8002496:	4603      	mov	r3, r0
 8002498:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80024a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80024b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80024b8:	2320      	movs	r3, #32
 80024ba:	e004      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80024bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024c0:	fab3 f383 	clz	r3, r3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d105      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x360>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0e9b      	lsrs	r3, r3, #26
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	e016      	b.n	800250e <HAL_ADC_ConfigChannel+0x38e>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80024f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80024f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002500:	2320      	movs	r3, #32
 8002502:	e004      	b.n	800250e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002504:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002508:	fab3 f383 	clz	r3, r3
 800250c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800250e:	429a      	cmp	r2, r3
 8002510:	d106      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2200      	movs	r2, #0
 8002518:	2102      	movs	r1, #2
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff f99c 	bl	8001858 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2103      	movs	r1, #3
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff f980 	bl	800182c <LL_ADC_GetOffsetChannel>
 800252c:	4603      	mov	r3, r0
 800252e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10a      	bne.n	800254c <HAL_ADC_ConfigChannel+0x3cc>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2103      	movs	r1, #3
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff f975 	bl	800182c <LL_ADC_GetOffsetChannel>
 8002542:	4603      	mov	r3, r0
 8002544:	0e9b      	lsrs	r3, r3, #26
 8002546:	f003 021f 	and.w	r2, r3, #31
 800254a:	e017      	b.n	800257c <HAL_ADC_ConfigChannel+0x3fc>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2103      	movs	r1, #3
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff f96a 	bl	800182c <LL_ADC_GetOffsetChannel>
 8002558:	4603      	mov	r3, r0
 800255a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002564:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002566:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800256e:	2320      	movs	r3, #32
 8002570:	e003      	b.n	800257a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002572:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002574:	fab3 f383 	clz	r3, r3
 8002578:	b2db      	uxtb	r3, r3
 800257a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002584:	2b00      	cmp	r3, #0
 8002586:	d105      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x414>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	0e9b      	lsrs	r3, r3, #26
 800258e:	f003 031f 	and.w	r3, r3, #31
 8002592:	e011      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x438>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80025a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80025a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80025ac:	2320      	movs	r3, #32
 80025ae:	e003      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80025b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b2:	fab3 f383 	clz	r3, r3
 80025b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d106      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2200      	movs	r2, #0
 80025c2:	2103      	movs	r1, #3
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff f947 	bl	8001858 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fa90 	bl	8001af4 <LL_ADC_IsEnabled>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f040 8140 	bne.w	800285c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	6819      	ldr	r1, [r3, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	461a      	mov	r2, r3
 80025ea:	f7ff f9cd 	bl	8001988 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	4a8f      	ldr	r2, [pc, #572]	; (8002830 <HAL_ADC_ConfigChannel+0x6b0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	f040 8131 	bne.w	800285c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10b      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x4a2>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	0e9b      	lsrs	r3, r3, #26
 8002610:	3301      	adds	r3, #1
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	2b09      	cmp	r3, #9
 8002618:	bf94      	ite	ls
 800261a:	2301      	movls	r3, #1
 800261c:	2300      	movhi	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	e019      	b.n	8002656 <HAL_ADC_ConfigChannel+0x4d6>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002630:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002632:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002634:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800263a:	2320      	movs	r3, #32
 800263c:	e003      	b.n	8002646 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800263e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002640:	fab3 f383 	clz	r3, r3
 8002644:	b2db      	uxtb	r3, r3
 8002646:	3301      	adds	r3, #1
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	2b09      	cmp	r3, #9
 800264e:	bf94      	ite	ls
 8002650:	2301      	movls	r3, #1
 8002652:	2300      	movhi	r3, #0
 8002654:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002656:	2b00      	cmp	r3, #0
 8002658:	d079      	beq.n	800274e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002662:	2b00      	cmp	r3, #0
 8002664:	d107      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x4f6>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	0e9b      	lsrs	r3, r3, #26
 800266c:	3301      	adds	r3, #1
 800266e:	069b      	lsls	r3, r3, #26
 8002670:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002674:	e015      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x522>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002686:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800268e:	2320      	movs	r3, #32
 8002690:	e003      	b.n	800269a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	3301      	adds	r3, #1
 800269c:	069b      	lsls	r3, r3, #26
 800269e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d109      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x542>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	0e9b      	lsrs	r3, r3, #26
 80026b4:	3301      	adds	r3, #1
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	2101      	movs	r1, #1
 80026bc:	fa01 f303 	lsl.w	r3, r1, r3
 80026c0:	e017      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x572>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80026d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80026d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80026da:	2320      	movs	r3, #32
 80026dc:	e003      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80026de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026e0:	fab3 f383 	clz	r3, r3
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	3301      	adds	r3, #1
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	2101      	movs	r1, #1
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	ea42 0103 	orr.w	r1, r2, r3
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10a      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x598>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	0e9b      	lsrs	r3, r3, #26
 8002708:	3301      	adds	r3, #1
 800270a:	f003 021f 	and.w	r2, r3, #31
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	051b      	lsls	r3, r3, #20
 8002716:	e018      	b.n	800274a <HAL_ADC_ConfigChannel+0x5ca>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002720:	fa93 f3a3 	rbit	r3, r3
 8002724:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002728:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800272a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002730:	2320      	movs	r3, #32
 8002732:	e003      	b.n	800273c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002736:	fab3 f383 	clz	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	3301      	adds	r3, #1
 800273e:	f003 021f 	and.w	r2, r3, #31
 8002742:	4613      	mov	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4413      	add	r3, r2
 8002748:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800274a:	430b      	orrs	r3, r1
 800274c:	e081      	b.n	8002852 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002756:	2b00      	cmp	r3, #0
 8002758:	d107      	bne.n	800276a <HAL_ADC_ConfigChannel+0x5ea>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	0e9b      	lsrs	r3, r3, #26
 8002760:	3301      	adds	r3, #1
 8002762:	069b      	lsls	r3, r3, #26
 8002764:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002768:	e015      	b.n	8002796 <HAL_ADC_ConfigChannel+0x616>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002782:	2320      	movs	r3, #32
 8002784:	e003      	b.n	800278e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002788:	fab3 f383 	clz	r3, r3
 800278c:	b2db      	uxtb	r3, r3
 800278e:	3301      	adds	r3, #1
 8002790:	069b      	lsls	r3, r3, #26
 8002792:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x636>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	0e9b      	lsrs	r3, r3, #26
 80027a8:	3301      	adds	r3, #1
 80027aa:	f003 031f 	and.w	r3, r3, #31
 80027ae:	2101      	movs	r1, #1
 80027b0:	fa01 f303 	lsl.w	r3, r1, r3
 80027b4:	e017      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x666>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	61fb      	str	r3, [r7, #28]
  return result;
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80027ce:	2320      	movs	r3, #32
 80027d0:	e003      	b.n	80027da <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	fab3 f383 	clz	r3, r3
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	3301      	adds	r3, #1
 80027dc:	f003 031f 	and.w	r3, r3, #31
 80027e0:	2101      	movs	r1, #1
 80027e2:	fa01 f303 	lsl.w	r3, r1, r3
 80027e6:	ea42 0103 	orr.w	r1, r2, r3
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10d      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x692>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	0e9b      	lsrs	r3, r3, #26
 80027fc:	3301      	adds	r3, #1
 80027fe:	f003 021f 	and.w	r2, r3, #31
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	3b1e      	subs	r3, #30
 800280a:	051b      	lsls	r3, r3, #20
 800280c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002810:	e01e      	b.n	8002850 <HAL_ADC_ConfigChannel+0x6d0>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	fa93 f3a3 	rbit	r3, r3
 800281e:	613b      	str	r3, [r7, #16]
  return result;
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d104      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800282a:	2320      	movs	r3, #32
 800282c:	e006      	b.n	800283c <HAL_ADC_ConfigChannel+0x6bc>
 800282e:	bf00      	nop
 8002830:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	fab3 f383 	clz	r3, r3
 800283a:	b2db      	uxtb	r3, r3
 800283c:	3301      	adds	r3, #1
 800283e:	f003 021f 	and.w	r2, r3, #31
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	3b1e      	subs	r3, #30
 800284a:	051b      	lsls	r3, r3, #20
 800284c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002850:	430b      	orrs	r3, r1
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	6892      	ldr	r2, [r2, #8]
 8002856:	4619      	mov	r1, r3
 8002858:	f7ff f86b 	bl	8001932 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b3c      	ldr	r3, [pc, #240]	; (8002954 <HAL_ADC_ConfigChannel+0x7d4>)
 8002862:	4013      	ands	r3, r2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d06b      	beq.n	8002940 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002868:	483b      	ldr	r0, [pc, #236]	; (8002958 <HAL_ADC_ConfigChannel+0x7d8>)
 800286a:	f7fe ffad 	bl	80017c8 <LL_ADC_GetCommonPathInternalCh>
 800286e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a39      	ldr	r2, [pc, #228]	; (800295c <HAL_ADC_ConfigChannel+0x7dc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d126      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800287c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002880:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d120      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a34      	ldr	r2, [pc, #208]	; (8002960 <HAL_ADC_ConfigChannel+0x7e0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d156      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002892:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002896:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800289a:	4619      	mov	r1, r3
 800289c:	482e      	ldr	r0, [pc, #184]	; (8002958 <HAL_ADC_ConfigChannel+0x7d8>)
 800289e:	f7fe ff80 	bl	80017a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80028a2:	4b30      	ldr	r3, [pc, #192]	; (8002964 <HAL_ADC_ConfigChannel+0x7e4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	099b      	lsrs	r3, r3, #6
 80028a8:	4a2f      	ldr	r2, [pc, #188]	; (8002968 <HAL_ADC_ConfigChannel+0x7e8>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	099a      	lsrs	r2, r3, #6
 80028b0:	4613      	mov	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028ba:	e002      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3b01      	subs	r3, #1
 80028c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f9      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028c8:	e03a      	b.n	8002940 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a27      	ldr	r2, [pc, #156]	; (800296c <HAL_ADC_ConfigChannel+0x7ec>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d113      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x77c>
 80028d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10d      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a1e      	ldr	r2, [pc, #120]	; (8002960 <HAL_ADC_ConfigChannel+0x7e0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d12a      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028f2:	4619      	mov	r1, r3
 80028f4:	4818      	ldr	r0, [pc, #96]	; (8002958 <HAL_ADC_ConfigChannel+0x7d8>)
 80028f6:	f7fe ff54 	bl	80017a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028fa:	e021      	b.n	8002940 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1b      	ldr	r2, [pc, #108]	; (8002970 <HAL_ADC_ConfigChannel+0x7f0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d11c      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002906:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800290a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d116      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a12      	ldr	r2, [pc, #72]	; (8002960 <HAL_ADC_ConfigChannel+0x7e0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d111      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800291c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002920:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002924:	4619      	mov	r1, r3
 8002926:	480c      	ldr	r0, [pc, #48]	; (8002958 <HAL_ADC_ConfigChannel+0x7d8>)
 8002928:	f7fe ff3b 	bl	80017a2 <LL_ADC_SetCommonPathInternalCh>
 800292c:	e008      	b.n	8002940 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002932:	f043 0220 	orr.w	r2, r3, #32
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002948:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800294c:	4618      	mov	r0, r3
 800294e:	37d8      	adds	r7, #216	; 0xd8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	80080000 	.word	0x80080000
 8002958:	50040300 	.word	0x50040300
 800295c:	c7520000 	.word	0xc7520000
 8002960:	50040000 	.word	0x50040000
 8002964:	20000000 	.word	0x20000000
 8002968:	053e2d63 	.word	0x053e2d63
 800296c:	cb840000 	.word	0xcb840000
 8002970:	80000001 	.word	0x80000001

08002974 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff f8b7 	bl	8001af4 <LL_ADC_IsEnabled>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d146      	bne.n	8002a1a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <ADC_Enable+0xb0>)
 8002994:	4013      	ands	r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00d      	beq.n	80029b6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299e:	f043 0210 	orr.w	r2, r3, #16
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029aa:	f043 0201 	orr.w	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e032      	b.n	8002a1c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff f872 	bl	8001aa4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029c0:	f7fe feae 	bl	8001720 <HAL_GetTick>
 80029c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029c6:	e021      	b.n	8002a0c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff f891 	bl	8001af4 <LL_ADC_IsEnabled>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d104      	bne.n	80029e2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff f861 	bl	8001aa4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029e2:	f7fe fe9d 	bl	8001720 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d90d      	bls.n	8002a0c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f4:	f043 0210 	orr.w	r2, r3, #16
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a00:	f043 0201 	orr.w	r2, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e007      	b.n	8002a1c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d1d6      	bne.n	80029c8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	8000003f 	.word	0x8000003f

08002a28 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff f870 	bl	8001b1a <LL_ADC_IsDisableOngoing>
 8002a3a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff f857 	bl	8001af4 <LL_ADC_IsEnabled>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d040      	beq.n	8002ace <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d13d      	bne.n	8002ace <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 030d 	and.w	r3, r3, #13
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d10c      	bne.n	8002a7a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff f831 	bl	8001acc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2203      	movs	r2, #3
 8002a70:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a72:	f7fe fe55 	bl	8001720 <HAL_GetTick>
 8002a76:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a78:	e022      	b.n	8002ac0 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7e:	f043 0210 	orr.w	r2, r3, #16
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8a:	f043 0201 	orr.w	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e01c      	b.n	8002ad0 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a96:	f7fe fe43 	bl	8001720 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d90d      	bls.n	8002ac0 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa8:	f043 0210 	orr.w	r2, r3, #16
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab4:	f043 0201 	orr.w	r2, r3, #1
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e007      	b.n	8002ad0 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1e3      	bne.n	8002a96 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <LL_ADC_IsEnabled>:
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <LL_ADC_IsEnabled+0x18>
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <LL_ADC_IsEnabled+0x1a>
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <LL_ADC_StartCalibration>:
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002b10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	609a      	str	r2, [r3, #8]
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <LL_ADC_IsCalibrationOnGoing>:
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b44:	d101      	bne.n	8002b4a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <LL_ADC_REG_IsConversionOngoing>:
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d101      	bne.n	8002b70 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e000      	b.n	8002b72 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b084      	sub	sp, #16
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d101      	bne.n	8002b9a <HAL_ADCEx_Calibration_Start+0x1c>
 8002b96:	2302      	movs	r3, #2
 8002b98:	e04d      	b.n	8002c36 <HAL_ADCEx_Calibration_Start+0xb8>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff ff40 	bl	8002a28 <ADC_Disable>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d136      	bne.n	8002c20 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bba:	f023 0302 	bic.w	r3, r3, #2
 8002bbe:	f043 0202 	orr.w	r2, r3, #2
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6839      	ldr	r1, [r7, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff ff96 	bl	8002afe <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002bd2:	e014      	b.n	8002bfe <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002be0:	d30d      	bcc.n	8002bfe <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	f023 0312 	bic.w	r3, r3, #18
 8002bea:	f043 0210 	orr.w	r2, r3, #16
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e01b      	b.n	8002c36 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff ff94 	bl	8002b30 <LL_ADC_IsCalibrationOnGoing>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1e2      	bne.n	8002bd4 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c12:	f023 0303 	bic.w	r3, r3, #3
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	655a      	str	r2, [r3, #84]	; 0x54
 8002c1e:	e005      	b.n	8002c2c <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c24:	f043 0210 	orr.w	r2, r3, #16
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002c40:	b590      	push	{r4, r7, lr}
 8002c42:	b09f      	sub	sp, #124	; 0x7c
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e085      	b.n	8002d6a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a42      	ldr	r2, [pc, #264]	; (8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d102      	bne.n	8002c76 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002c70:	4b41      	ldr	r3, [pc, #260]	; (8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	e001      	b.n	8002c7a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10b      	bne.n	8002c98 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c84:	f043 0220 	orr.w	r2, r3, #32
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e068      	b.n	8002d6a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff ff5c 	bl	8002b58 <LL_ADC_REG_IsConversionOngoing>
 8002ca0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff ff56 	bl	8002b58 <LL_ADC_REG_IsConversionOngoing>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d14a      	bne.n	8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x108>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002cb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d147      	bne.n	8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x108>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002cb8:	4b30      	ldr	r3, [pc, #192]	; (8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002cba:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d027      	beq.n	8002d14 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	6859      	ldr	r1, [r3, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cd6:	035b      	lsls	r3, r3, #13
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cde:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ce0:	4824      	ldr	r0, [pc, #144]	; (8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002ce2:	f7ff fef9 	bl	8002ad8 <LL_ADC_IsEnabled>
 8002ce6:	4604      	mov	r4, r0
 8002ce8:	4823      	ldr	r0, [pc, #140]	; (8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8002cea:	f7ff fef5 	bl	8002ad8 <LL_ADC_IsEnabled>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4323      	orrs	r3, r4
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d132      	bne.n	8002d5c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cfe:	f023 030f 	bic.w	r3, r3, #15
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	6811      	ldr	r1, [r2, #0]
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	6892      	ldr	r2, [r2, #8]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d10:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d12:	e023      	b.n	8002d5c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d1e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d20:	4814      	ldr	r0, [pc, #80]	; (8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002d22:	f7ff fed9 	bl	8002ad8 <LL_ADC_IsEnabled>
 8002d26:	4604      	mov	r4, r0
 8002d28:	4813      	ldr	r0, [pc, #76]	; (8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8002d2a:	f7ff fed5 	bl	8002ad8 <LL_ADC_IsEnabled>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4323      	orrs	r3, r4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d112      	bne.n	8002d5c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d3e:	f023 030f 	bic.w	r3, r3, #15
 8002d42:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d44:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d46:	e009      	b.n	8002d5c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4c:	f043 0220 	orr.w	r2, r3, #32
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002d5a:	e000      	b.n	8002d5e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d66:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	377c      	adds	r7, #124	; 0x7c
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd90      	pop	{r4, r7, pc}
 8002d72:	bf00      	nop
 8002d74:	50040000 	.word	0x50040000
 8002d78:	50040100 	.word	0x50040100
 8002d7c:	50040300 	.word	0x50040300

08002d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002db2:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	60d3      	str	r3, [r2, #12]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dcc:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	f003 0307 	and.w	r3, r3, #7
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	6039      	str	r1, [r7, #0]
 8002dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	db0a      	blt.n	8002e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	490c      	ldr	r1, [pc, #48]	; (8002e30 <__NVIC_SetPriority+0x4c>)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	0112      	lsls	r2, r2, #4
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	440b      	add	r3, r1
 8002e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e0c:	e00a      	b.n	8002e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4908      	ldr	r1, [pc, #32]	; (8002e34 <__NVIC_SetPriority+0x50>)
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	3b04      	subs	r3, #4
 8002e1c:	0112      	lsls	r2, r2, #4
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	440b      	add	r3, r1
 8002e22:	761a      	strb	r2, [r3, #24]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	e000e100 	.word	0xe000e100
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	; 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f1c3 0307 	rsb	r3, r3, #7
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	bf28      	it	cs
 8002e56:	2304      	movcs	r3, #4
 8002e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d902      	bls.n	8002e68 <NVIC_EncodePriority+0x30>
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3b03      	subs	r3, #3
 8002e66:	e000      	b.n	8002e6a <NVIC_EncodePriority+0x32>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43da      	mvns	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e80:	f04f 31ff 	mov.w	r1, #4294967295
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	43d9      	mvns	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e90:	4313      	orrs	r3, r2
         );
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3724      	adds	r7, #36	; 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eb0:	d301      	bcc.n	8002eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e00f      	b.n	8002ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ee0 <SysTick_Config+0x40>)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ebe:	210f      	movs	r1, #15
 8002ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec4:	f7ff ff8e 	bl	8002de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <SysTick_Config+0x40>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ece:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <SysTick_Config+0x40>)
 8002ed0:	2207      	movs	r2, #7
 8002ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	e000e010 	.word	0xe000e010

08002ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff ff47 	bl	8002d80 <__NVIC_SetPriorityGrouping>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b086      	sub	sp, #24
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	4603      	mov	r3, r0
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f0c:	f7ff ff5c 	bl	8002dc8 <__NVIC_GetPriorityGrouping>
 8002f10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	6978      	ldr	r0, [r7, #20]
 8002f18:	f7ff ff8e 	bl	8002e38 <NVIC_EncodePriority>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff ff5d 	bl	8002de4 <__NVIC_SetPriority>
}
 8002f2a:	bf00      	nop
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff ffb0 	bl	8002ea0 <SysTick_Config>
 8002f40:	4603      	mov	r3, r0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f5a:	e14e      	b.n	80031fa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	2101      	movs	r1, #1
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8140 	beq.w	80031f4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d00b      	beq.n	8002f94 <HAL_GPIO_Init+0x48>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d007      	beq.n	8002f94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f88:	2b11      	cmp	r3, #17
 8002f8a:	d003      	beq.n	8002f94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b12      	cmp	r3, #18
 8002f92:	d130      	bne.n	8002ff6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fca:	2201      	movs	r2, #1
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	091b      	lsrs	r3, r3, #4
 8002fe0:	f003 0201 	and.w	r2, r3, #1
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	2203      	movs	r2, #3
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4013      	ands	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d003      	beq.n	8003036 <HAL_GPIO_Init+0xea>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b12      	cmp	r3, #18
 8003034:	d123      	bne.n	800307e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	08da      	lsrs	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3208      	adds	r2, #8
 800303e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003042:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	220f      	movs	r2, #15
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	4013      	ands	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	08da      	lsrs	r2, r3, #3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3208      	adds	r2, #8
 8003078:	6939      	ldr	r1, [r7, #16]
 800307a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	2203      	movs	r2, #3
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4013      	ands	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f003 0203 	and.w	r2, r3, #3
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 809a 	beq.w	80031f4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c0:	4b55      	ldr	r3, [pc, #340]	; (8003218 <HAL_GPIO_Init+0x2cc>)
 80030c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c4:	4a54      	ldr	r2, [pc, #336]	; (8003218 <HAL_GPIO_Init+0x2cc>)
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	6613      	str	r3, [r2, #96]	; 0x60
 80030cc:	4b52      	ldr	r3, [pc, #328]	; (8003218 <HAL_GPIO_Init+0x2cc>)
 80030ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030d8:	4a50      	ldr	r2, [pc, #320]	; (800321c <HAL_GPIO_Init+0x2d0>)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	089b      	lsrs	r3, r3, #2
 80030de:	3302      	adds	r3, #2
 80030e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	220f      	movs	r2, #15
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4013      	ands	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003102:	d013      	beq.n	800312c <HAL_GPIO_Init+0x1e0>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a46      	ldr	r2, [pc, #280]	; (8003220 <HAL_GPIO_Init+0x2d4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d00d      	beq.n	8003128 <HAL_GPIO_Init+0x1dc>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a45      	ldr	r2, [pc, #276]	; (8003224 <HAL_GPIO_Init+0x2d8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d007      	beq.n	8003124 <HAL_GPIO_Init+0x1d8>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a44      	ldr	r2, [pc, #272]	; (8003228 <HAL_GPIO_Init+0x2dc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d101      	bne.n	8003120 <HAL_GPIO_Init+0x1d4>
 800311c:	2303      	movs	r3, #3
 800311e:	e006      	b.n	800312e <HAL_GPIO_Init+0x1e2>
 8003120:	2307      	movs	r3, #7
 8003122:	e004      	b.n	800312e <HAL_GPIO_Init+0x1e2>
 8003124:	2302      	movs	r3, #2
 8003126:	e002      	b.n	800312e <HAL_GPIO_Init+0x1e2>
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <HAL_GPIO_Init+0x1e2>
 800312c:	2300      	movs	r3, #0
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	f002 0203 	and.w	r2, r2, #3
 8003134:	0092      	lsls	r2, r2, #2
 8003136:	4093      	lsls	r3, r2
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800313e:	4937      	ldr	r1, [pc, #220]	; (800321c <HAL_GPIO_Init+0x2d0>)
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	089b      	lsrs	r3, r3, #2
 8003144:	3302      	adds	r3, #2
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800314c:	4b37      	ldr	r3, [pc, #220]	; (800322c <HAL_GPIO_Init+0x2e0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	43db      	mvns	r3, r3
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4013      	ands	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003170:	4a2e      	ldr	r2, [pc, #184]	; (800322c <HAL_GPIO_Init+0x2e0>)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003176:	4b2d      	ldr	r3, [pc, #180]	; (800322c <HAL_GPIO_Init+0x2e0>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	43db      	mvns	r3, r3
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4013      	ands	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800319a:	4a24      	ldr	r2, [pc, #144]	; (800322c <HAL_GPIO_Init+0x2e0>)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031a0:	4b22      	ldr	r3, [pc, #136]	; (800322c <HAL_GPIO_Init+0x2e0>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4013      	ands	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031c4:	4a19      	ldr	r2, [pc, #100]	; (800322c <HAL_GPIO_Init+0x2e0>)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031ca:	4b18      	ldr	r3, [pc, #96]	; (800322c <HAL_GPIO_Init+0x2e0>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4013      	ands	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031ee:	4a0f      	ldr	r2, [pc, #60]	; (800322c <HAL_GPIO_Init+0x2e0>)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	3301      	adds	r3, #1
 80031f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	fa22 f303 	lsr.w	r3, r2, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	f47f aea9 	bne.w	8002f5c <HAL_GPIO_Init+0x10>
  }
}
 800320a:	bf00      	nop
 800320c:	371c      	adds	r7, #28
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000
 800321c:	40010000 	.word	0x40010000
 8003220:	48000400 	.word	0x48000400
 8003224:	48000800 	.word	0x48000800
 8003228:	48000c00 	.word	0x48000c00
 800322c:	40010400 	.word	0x40010400

08003230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	807b      	strh	r3, [r7, #2]
 800323c:	4613      	mov	r3, r2
 800323e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003240:	787b      	ldrb	r3, [r7, #1]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003246:	887a      	ldrh	r2, [r7, #2]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800324c:	e002      	b.n	8003254 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800324e:	887a      	ldrh	r2, [r7, #2]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003264:	4b04      	ldr	r3, [pc, #16]	; (8003278 <HAL_PWREx_GetVoltageRange+0x18>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40007000 	.word	0x40007000

0800327c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800328a:	d130      	bne.n	80032ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800328c:	4b23      	ldr	r3, [pc, #140]	; (800331c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003298:	d038      	beq.n	800330c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800329a:	4b20      	ldr	r3, [pc, #128]	; (800331c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032a2:	4a1e      	ldr	r2, [pc, #120]	; (800331c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032aa:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2232      	movs	r2, #50	; 0x32
 80032b0:	fb02 f303 	mul.w	r3, r2, r3
 80032b4:	4a1b      	ldr	r2, [pc, #108]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	0c9b      	lsrs	r3, r3, #18
 80032bc:	3301      	adds	r3, #1
 80032be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032c0:	e002      	b.n	80032c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032c8:	4b14      	ldr	r3, [pc, #80]	; (800331c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d4:	d102      	bne.n	80032dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1f2      	bne.n	80032c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032dc:	4b0f      	ldr	r3, [pc, #60]	; (800331c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e8:	d110      	bne.n	800330c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e00f      	b.n	800330e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032ee:	4b0b      	ldr	r3, [pc, #44]	; (800331c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fa:	d007      	beq.n	800330c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032fc:	4b07      	ldr	r3, [pc, #28]	; (800331c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003304:	4a05      	ldr	r2, [pc, #20]	; (800331c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800330a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40007000 	.word	0x40007000
 8003320:	20000000 	.word	0x20000000
 8003324:	431bde83 	.word	0x431bde83

08003328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d102      	bne.n	800333c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	f000 bc56 	b.w	8003be8 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800333c:	4ba1      	ldr	r3, [pc, #644]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 030c 	and.w	r3, r3, #12
 8003344:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003346:	4b9f      	ldr	r3, [pc, #636]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80e6 	beq.w	800352a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d007      	beq.n	8003374 <HAL_RCC_OscConfig+0x4c>
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	2b0c      	cmp	r3, #12
 8003368:	f040 808d 	bne.w	8003486 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	2b01      	cmp	r3, #1
 8003370:	f040 8089 	bne.w	8003486 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003374:	4b93      	ldr	r3, [pc, #588]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d006      	beq.n	800338e <HAL_RCC_OscConfig+0x66>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d102      	bne.n	800338e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	f000 bc2d 	b.w	8003be8 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003392:	4b8c      	ldr	r3, [pc, #560]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d004      	beq.n	80033a8 <HAL_RCC_OscConfig+0x80>
 800339e:	4b89      	ldr	r3, [pc, #548]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033a6:	e005      	b.n	80033b4 <HAL_RCC_OscConfig+0x8c>
 80033a8:	4b86      	ldr	r3, [pc, #536]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 80033aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ae:	091b      	lsrs	r3, r3, #4
 80033b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d224      	bcs.n	8003402 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fdbd 	bl	8003f3c <RCC_SetFlashLatencyFromMSIRange>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f000 bc0d 	b.w	8003be8 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033ce:	4b7d      	ldr	r3, [pc, #500]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a7c      	ldr	r2, [pc, #496]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 80033d4:	f043 0308 	orr.w	r3, r3, #8
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	4b7a      	ldr	r3, [pc, #488]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	4977      	ldr	r1, [pc, #476]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ec:	4b75      	ldr	r3, [pc, #468]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	021b      	lsls	r3, r3, #8
 80033fa:	4972      	ldr	r1, [pc, #456]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	604b      	str	r3, [r1, #4]
 8003400:	e025      	b.n	800344e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003402:	4b70      	ldr	r3, [pc, #448]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a6f      	ldr	r2, [pc, #444]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 8003408:	f043 0308 	orr.w	r3, r3, #8
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	4b6d      	ldr	r3, [pc, #436]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	496a      	ldr	r1, [pc, #424]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 800341c:	4313      	orrs	r3, r2
 800341e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003420:	4b68      	ldr	r3, [pc, #416]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	021b      	lsls	r3, r3, #8
 800342e:	4965      	ldr	r1, [pc, #404]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 8003430:	4313      	orrs	r3, r2
 8003432:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fd7c 	bl	8003f3c <RCC_SetFlashLatencyFromMSIRange>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e3cc      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800344e:	f000 fcb3 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 8003452:	4601      	mov	r1, r0
 8003454:	4b5b      	ldr	r3, [pc, #364]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	4a5a      	ldr	r2, [pc, #360]	; (80035c8 <HAL_RCC_OscConfig+0x2a0>)
 8003460:	5cd3      	ldrb	r3, [r2, r3]
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	fa21 f303 	lsr.w	r3, r1, r3
 800346a:	4a58      	ldr	r2, [pc, #352]	; (80035cc <HAL_RCC_OscConfig+0x2a4>)
 800346c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800346e:	4b58      	ldr	r3, [pc, #352]	; (80035d0 <HAL_RCC_OscConfig+0x2a8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fe f904 	bl	8001680 <HAL_InitTick>
 8003478:	4603      	mov	r3, r0
 800347a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800347c:	7dfb      	ldrb	r3, [r7, #23]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d052      	beq.n	8003528 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003482:	7dfb      	ldrb	r3, [r7, #23]
 8003484:	e3b0      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d032      	beq.n	80034f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800348e:	4b4d      	ldr	r3, [pc, #308]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a4c      	ldr	r2, [pc, #304]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800349a:	f7fe f941 	bl	8001720 <HAL_GetTick>
 800349e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034a2:	f7fe f93d 	bl	8001720 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e399      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034b4:	4b43      	ldr	r3, [pc, #268]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034c0:	4b40      	ldr	r3, [pc, #256]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a3f      	ldr	r2, [pc, #252]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 80034c6:	f043 0308 	orr.w	r3, r3, #8
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	4b3d      	ldr	r3, [pc, #244]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	493a      	ldr	r1, [pc, #232]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034de:	4b39      	ldr	r3, [pc, #228]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	021b      	lsls	r3, r3, #8
 80034ec:	4935      	ldr	r1, [pc, #212]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	604b      	str	r3, [r1, #4]
 80034f2:	e01a      	b.n	800352a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034f4:	4b33      	ldr	r3, [pc, #204]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a32      	ldr	r2, [pc, #200]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003500:	f7fe f90e 	bl	8001720 <HAL_GetTick>
 8003504:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003508:	f7fe f90a 	bl	8001720 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e366      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800351a:	4b2a      	ldr	r3, [pc, #168]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x1e0>
 8003526:	e000      	b.n	800352a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003528:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d073      	beq.n	800361e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	2b08      	cmp	r3, #8
 800353a:	d005      	beq.n	8003548 <HAL_RCC_OscConfig+0x220>
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	2b0c      	cmp	r3, #12
 8003540:	d10e      	bne.n	8003560 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	2b03      	cmp	r3, #3
 8003546:	d10b      	bne.n	8003560 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003548:	4b1e      	ldr	r3, [pc, #120]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d063      	beq.n	800361c <HAL_RCC_OscConfig+0x2f4>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d15f      	bne.n	800361c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e343      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003568:	d106      	bne.n	8003578 <HAL_RCC_OscConfig+0x250>
 800356a:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a15      	ldr	r2, [pc, #84]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 8003570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e01d      	b.n	80035b4 <HAL_RCC_OscConfig+0x28c>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003580:	d10c      	bne.n	800359c <HAL_RCC_OscConfig+0x274>
 8003582:	4b10      	ldr	r3, [pc, #64]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a0f      	ldr	r2, [pc, #60]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 8003588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a0c      	ldr	r2, [pc, #48]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 8003594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	e00b      	b.n	80035b4 <HAL_RCC_OscConfig+0x28c>
 800359c:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a08      	ldr	r2, [pc, #32]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 80035a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a05      	ldr	r2, [pc, #20]	; (80035c4 <HAL_RCC_OscConfig+0x29c>)
 80035ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01b      	beq.n	80035f4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7fe f8b0 	bl	8001720 <HAL_GetTick>
 80035c0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035c2:	e010      	b.n	80035e6 <HAL_RCC_OscConfig+0x2be>
 80035c4:	40021000 	.word	0x40021000
 80035c8:	080072e4 	.word	0x080072e4
 80035cc:	20000000 	.word	0x20000000
 80035d0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d4:	f7fe f8a4 	bl	8001720 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b64      	cmp	r3, #100	; 0x64
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e300      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035e6:	4ba0      	ldr	r3, [pc, #640]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0x2ac>
 80035f2:	e014      	b.n	800361e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fe f894 	bl	8001720 <HAL_GetTick>
 80035f8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035fc:	f7fe f890 	bl	8001720 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	; 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e2ec      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800360e:	4b96      	ldr	r3, [pc, #600]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x2d4>
 800361a:	e000      	b.n	800361e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d060      	beq.n	80036ec <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	2b04      	cmp	r3, #4
 800362e:	d005      	beq.n	800363c <HAL_RCC_OscConfig+0x314>
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	2b0c      	cmp	r3, #12
 8003634:	d119      	bne.n	800366a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d116      	bne.n	800366a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800363c:	4b8a      	ldr	r3, [pc, #552]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_RCC_OscConfig+0x32c>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e2c9      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003654:	4b84      	ldr	r3, [pc, #528]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	061b      	lsls	r3, r3, #24
 8003662:	4981      	ldr	r1, [pc, #516]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 8003664:	4313      	orrs	r3, r2
 8003666:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003668:	e040      	b.n	80036ec <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d023      	beq.n	80036ba <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003672:	4b7d      	ldr	r3, [pc, #500]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a7c      	ldr	r2, [pc, #496]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 8003678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800367c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367e:	f7fe f84f 	bl	8001720 <HAL_GetTick>
 8003682:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003686:	f7fe f84b 	bl	8001720 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e2a7      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003698:	4b73      	ldr	r3, [pc, #460]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a4:	4b70      	ldr	r3, [pc, #448]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	061b      	lsls	r3, r3, #24
 80036b2:	496d      	ldr	r1, [pc, #436]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	604b      	str	r3, [r1, #4]
 80036b8:	e018      	b.n	80036ec <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ba:	4b6b      	ldr	r3, [pc, #428]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a6a      	ldr	r2, [pc, #424]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 80036c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c6:	f7fe f82b 	bl	8001720 <HAL_GetTick>
 80036ca:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ce:	f7fe f827 	bl	8001720 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e283      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036e0:	4b61      	ldr	r3, [pc, #388]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1f0      	bne.n	80036ce <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d07f      	beq.n	80037f8 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d05f      	beq.n	80037c0 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003700:	4b59      	ldr	r3, [pc, #356]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 8003702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003706:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699a      	ldr	r2, [r3, #24]
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f003 0310 	and.w	r3, r3, #16
 8003712:	429a      	cmp	r2, r3
 8003714:	d037      	beq.n	8003786 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d006      	beq.n	800372e <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e25c      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d01b      	beq.n	8003770 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8003738:	4b4b      	ldr	r3, [pc, #300]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 800373a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800373e:	4a4a      	ldr	r2, [pc, #296]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 8003740:	f023 0301 	bic.w	r3, r3, #1
 8003744:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003748:	f7fd ffea 	bl	8001720 <HAL_GetTick>
 800374c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003750:	f7fd ffe6 	bl	8001720 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b11      	cmp	r3, #17
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e242      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003762:	4b41      	ldr	r3, [pc, #260]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 8003764:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1ef      	bne.n	8003750 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003770:	4b3d      	ldr	r3, [pc, #244]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 8003772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003776:	f023 0210 	bic.w	r2, r3, #16
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	493a      	ldr	r1, [pc, #232]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003786:	4b38      	ldr	r3, [pc, #224]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 8003788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800378c:	4a36      	ldr	r2, [pc, #216]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003796:	f7fd ffc3 	bl	8001720 <HAL_GetTick>
 800379a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800379e:	f7fd ffbf 	bl	8001720 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b11      	cmp	r3, #17
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e21b      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037b0:	4b2d      	ldr	r3, [pc, #180]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 80037b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0ef      	beq.n	800379e <HAL_RCC_OscConfig+0x476>
 80037be:	e01b      	b.n	80037f8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037c0:	4b29      	ldr	r3, [pc, #164]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 80037c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037c6:	4a28      	ldr	r2, [pc, #160]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d0:	f7fd ffa6 	bl	8001720 <HAL_GetTick>
 80037d4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d8:	f7fd ffa2 	bl	8001720 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b11      	cmp	r3, #17
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e1fe      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037ea:	4b1f      	ldr	r3, [pc, #124]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 80037ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1ef      	bne.n	80037d8 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80c1 	beq.w	8003988 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003806:	2300      	movs	r3, #0
 8003808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800380c:	4b16      	ldr	r3, [pc, #88]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 800380e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10e      	bne.n	8003836 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003818:	4b13      	ldr	r3, [pc, #76]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 800381a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381c:	4a12      	ldr	r2, [pc, #72]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 800381e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003822:	6593      	str	r3, [r2, #88]	; 0x58
 8003824:	4b10      	ldr	r3, [pc, #64]	; (8003868 <HAL_RCC_OscConfig+0x540>)
 8003826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003830:	2301      	movs	r3, #1
 8003832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003836:	4b0d      	ldr	r3, [pc, #52]	; (800386c <HAL_RCC_OscConfig+0x544>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383e:	2b00      	cmp	r3, #0
 8003840:	d11c      	bne.n	800387c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003842:	4b0a      	ldr	r3, [pc, #40]	; (800386c <HAL_RCC_OscConfig+0x544>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a09      	ldr	r2, [pc, #36]	; (800386c <HAL_RCC_OscConfig+0x544>)
 8003848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800384c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800384e:	f7fd ff67 	bl	8001720 <HAL_GetTick>
 8003852:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003854:	e00c      	b.n	8003870 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003856:	f7fd ff63 	bl	8001720 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d905      	bls.n	8003870 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e1bf      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
 8003868:	40021000 	.word	0x40021000
 800386c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003870:	4bb1      	ldr	r3, [pc, #708]	; (8003b38 <HAL_RCC_OscConfig+0x810>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0ec      	beq.n	8003856 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d02c      	beq.n	80038e2 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003888:	4bac      	ldr	r3, [pc, #688]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	49a8      	ldr	r1, [pc, #672]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d010      	beq.n	80038d0 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80038ae:	4ba3      	ldr	r3, [pc, #652]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 80038b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b4:	4aa1      	ldr	r2, [pc, #644]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 80038b6:	f043 0304 	orr.w	r3, r3, #4
 80038ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80038be:	4b9f      	ldr	r3, [pc, #636]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 80038c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c4:	4a9d      	ldr	r2, [pc, #628]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038ce:	e018      	b.n	8003902 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80038d0:	4b9a      	ldr	r3, [pc, #616]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d6:	4a99      	ldr	r2, [pc, #612]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 80038d8:	f043 0301 	orr.w	r3, r3, #1
 80038dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038e0:	e00f      	b.n	8003902 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80038e2:	4b96      	ldr	r3, [pc, #600]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 80038e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e8:	4a94      	ldr	r2, [pc, #592]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 80038ea:	f023 0301 	bic.w	r3, r3, #1
 80038ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80038f2:	4b92      	ldr	r3, [pc, #584]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 80038f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f8:	4a90      	ldr	r2, [pc, #576]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 80038fa:	f023 0304 	bic.w	r3, r3, #4
 80038fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d016      	beq.n	8003938 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390a:	f7fd ff09 	bl	8001720 <HAL_GetTick>
 800390e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003910:	e00a      	b.n	8003928 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003912:	f7fd ff05 	bl	8001720 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003920:	4293      	cmp	r3, r2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e15f      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003928:	4b84      	ldr	r3, [pc, #528]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0ed      	beq.n	8003912 <HAL_RCC_OscConfig+0x5ea>
 8003936:	e01d      	b.n	8003974 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003938:	f7fd fef2 	bl	8001720 <HAL_GetTick>
 800393c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800393e:	e00a      	b.n	8003956 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003940:	f7fd feee 	bl	8001720 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	f241 3288 	movw	r2, #5000	; 0x1388
 800394e:	4293      	cmp	r3, r2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e148      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003956:	4b79      	ldr	r3, [pc, #484]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 8003958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1ed      	bne.n	8003940 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003964:	4b75      	ldr	r3, [pc, #468]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396a:	4a74      	ldr	r2, [pc, #464]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 800396c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003978:	2b01      	cmp	r3, #1
 800397a:	d105      	bne.n	8003988 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800397c:	4b6f      	ldr	r3, [pc, #444]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 800397e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003980:	4a6e      	ldr	r2, [pc, #440]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 8003982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003986:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	2b00      	cmp	r3, #0
 8003992:	d03c      	beq.n	8003a0e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01c      	beq.n	80039d6 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800399c:	4b67      	ldr	r3, [pc, #412]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 800399e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039a2:	4a66      	ldr	r2, [pc, #408]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ac:	f7fd feb8 	bl	8001720 <HAL_GetTick>
 80039b0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039b4:	f7fd feb4 	bl	8001720 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e110      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039c6:	4b5d      	ldr	r3, [pc, #372]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 80039c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0ef      	beq.n	80039b4 <HAL_RCC_OscConfig+0x68c>
 80039d4:	e01b      	b.n	8003a0e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039d6:	4b59      	ldr	r3, [pc, #356]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 80039d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039dc:	4a57      	ldr	r2, [pc, #348]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 80039de:	f023 0301 	bic.w	r3, r3, #1
 80039e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e6:	f7fd fe9b 	bl	8001720 <HAL_GetTick>
 80039ea:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039ee:	f7fd fe97 	bl	8001720 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e0f3      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a00:	4b4e      	ldr	r3, [pc, #312]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 8003a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1ef      	bne.n	80039ee <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 80e7 	beq.w	8003be6 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	f040 80b7 	bne.w	8003b90 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a22:	4b46      	ldr	r3, [pc, #280]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f003 0203 	and.w	r2, r3, #3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d124      	bne.n	8003a80 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a40:	3b01      	subs	r3, #1
 8003a42:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d11b      	bne.n	8003a80 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d113      	bne.n	8003a80 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a62:	085b      	lsrs	r3, r3, #1
 8003a64:	3b01      	subs	r3, #1
 8003a66:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d109      	bne.n	8003a80 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	085b      	lsrs	r3, r3, #1
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d061      	beq.n	8003b44 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	2b0c      	cmp	r3, #12
 8003a84:	d056      	beq.n	8003b34 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a86:	4b2d      	ldr	r3, [pc, #180]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a2c      	ldr	r2, [pc, #176]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 8003a8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a90:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a92:	f7fd fe45 	bl	8001720 <HAL_GetTick>
 8003a96:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a9a:	f7fd fe41 	bl	8001720 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e09d      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aac:	4b23      	ldr	r3, [pc, #140]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1f0      	bne.n	8003a9a <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ab8:	4b20      	ldr	r3, [pc, #128]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <HAL_RCC_OscConfig+0x818>)
 8003abe:	4013      	ands	r3, r2
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ac8:	3a01      	subs	r2, #1
 8003aca:	0112      	lsls	r2, r2, #4
 8003acc:	4311      	orrs	r1, r2
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ad2:	0212      	lsls	r2, r2, #8
 8003ad4:	4311      	orrs	r1, r2
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ada:	0852      	lsrs	r2, r2, #1
 8003adc:	3a01      	subs	r2, #1
 8003ade:	0552      	lsls	r2, r2, #21
 8003ae0:	4311      	orrs	r1, r2
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ae6:	0852      	lsrs	r2, r2, #1
 8003ae8:	3a01      	subs	r2, #1
 8003aea:	0652      	lsls	r2, r2, #25
 8003aec:	430a      	orrs	r2, r1
 8003aee:	4913      	ldr	r1, [pc, #76]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003af4:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a10      	ldr	r2, [pc, #64]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 8003afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003afe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b00:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	4a0d      	ldr	r2, [pc, #52]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 8003b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b0c:	f7fd fe08 	bl	8001720 <HAL_GetTick>
 8003b10:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b14:	f7fd fe04 	bl	8001720 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e060      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b26:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <HAL_RCC_OscConfig+0x814>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b32:	e058      	b.n	8003be6 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e057      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
 8003b38:	40007000 	.word	0x40007000
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b44:	4b2a      	ldr	r3, [pc, #168]	; (8003bf0 <HAL_RCC_OscConfig+0x8c8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d14a      	bne.n	8003be6 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b50:	4b27      	ldr	r3, [pc, #156]	; (8003bf0 <HAL_RCC_OscConfig+0x8c8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a26      	ldr	r2, [pc, #152]	; (8003bf0 <HAL_RCC_OscConfig+0x8c8>)
 8003b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b5c:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <HAL_RCC_OscConfig+0x8c8>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4a23      	ldr	r2, [pc, #140]	; (8003bf0 <HAL_RCC_OscConfig+0x8c8>)
 8003b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b68:	f7fd fdda 	bl	8001720 <HAL_GetTick>
 8003b6c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b70:	f7fd fdd6 	bl	8001720 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e032      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b82:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <HAL_RCC_OscConfig+0x8c8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0x848>
 8003b8e:	e02a      	b.n	8003be6 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	2b0c      	cmp	r3, #12
 8003b94:	d025      	beq.n	8003be2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b96:	4b16      	ldr	r3, [pc, #88]	; (8003bf0 <HAL_RCC_OscConfig+0x8c8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a15      	ldr	r2, [pc, #84]	; (8003bf0 <HAL_RCC_OscConfig+0x8c8>)
 8003b9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ba0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ba2:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <HAL_RCC_OscConfig+0x8c8>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	4a12      	ldr	r2, [pc, #72]	; (8003bf0 <HAL_RCC_OscConfig+0x8c8>)
 8003ba8:	f023 0303 	bic.w	r3, r3, #3
 8003bac:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003bae:	4b10      	ldr	r3, [pc, #64]	; (8003bf0 <HAL_RCC_OscConfig+0x8c8>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	4a0f      	ldr	r2, [pc, #60]	; (8003bf0 <HAL_RCC_OscConfig+0x8c8>)
 8003bb4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003bb8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bba:	f7fd fdb1 	bl	8001720 <HAL_GetTick>
 8003bbe:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc2:	f7fd fdad 	bl	8001720 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e009      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bd4:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <HAL_RCC_OscConfig+0x8c8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1f0      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x89a>
 8003be0:	e001      	b.n	8003be6 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3728      	adds	r7, #40	; 0x28
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40021000 	.word	0x40021000

08003bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0c8      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c08:	4b66      	ldr	r3, [pc, #408]	; (8003da4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d910      	bls.n	8003c38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c16:	4b63      	ldr	r3, [pc, #396]	; (8003da4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 0207 	bic.w	r2, r3, #7
 8003c1e:	4961      	ldr	r1, [pc, #388]	; (8003da4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c26:	4b5f      	ldr	r3, [pc, #380]	; (8003da4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d001      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e0b0      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d04c      	beq.n	8003cde <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d107      	bne.n	8003c5c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c4c:	4b56      	ldr	r3, [pc, #344]	; (8003da8 <HAL_RCC_ClockConfig+0x1b4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d121      	bne.n	8003c9c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e09e      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d107      	bne.n	8003c74 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c64:	4b50      	ldr	r3, [pc, #320]	; (8003da8 <HAL_RCC_ClockConfig+0x1b4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d115      	bne.n	8003c9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e092      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d107      	bne.n	8003c8c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c7c:	4b4a      	ldr	r3, [pc, #296]	; (8003da8 <HAL_RCC_ClockConfig+0x1b4>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d109      	bne.n	8003c9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e086      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c8c:	4b46      	ldr	r3, [pc, #280]	; (8003da8 <HAL_RCC_ClockConfig+0x1b4>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e07e      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c9c:	4b42      	ldr	r3, [pc, #264]	; (8003da8 <HAL_RCC_ClockConfig+0x1b4>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f023 0203 	bic.w	r2, r3, #3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	493f      	ldr	r1, [pc, #252]	; (8003da8 <HAL_RCC_ClockConfig+0x1b4>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cae:	f7fd fd37 	bl	8001720 <HAL_GetTick>
 8003cb2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb4:	e00a      	b.n	8003ccc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb6:	f7fd fd33 	bl	8001720 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e066      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ccc:	4b36      	ldr	r3, [pc, #216]	; (8003da8 <HAL_RCC_ClockConfig+0x1b4>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 020c 	and.w	r2, r3, #12
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d1eb      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d008      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cea:	4b2f      	ldr	r3, [pc, #188]	; (8003da8 <HAL_RCC_ClockConfig+0x1b4>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	492c      	ldr	r1, [pc, #176]	; (8003da8 <HAL_RCC_ClockConfig+0x1b4>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cfc:	4b29      	ldr	r3, [pc, #164]	; (8003da4 <HAL_RCC_ClockConfig+0x1b0>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d210      	bcs.n	8003d2c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0a:	4b26      	ldr	r3, [pc, #152]	; (8003da4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f023 0207 	bic.w	r2, r3, #7
 8003d12:	4924      	ldr	r1, [pc, #144]	; (8003da4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1a:	4b22      	ldr	r3, [pc, #136]	; (8003da4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d001      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e036      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d38:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	4918      	ldr	r1, [pc, #96]	; (8003da8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0308 	and.w	r3, r3, #8
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d009      	beq.n	8003d6a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d56:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4910      	ldr	r1, [pc, #64]	; (8003da8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d6a:	f000 f825 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 8003d6e:	4601      	mov	r1, r0
 8003d70:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	091b      	lsrs	r3, r3, #4
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	4a0c      	ldr	r2, [pc, #48]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003d7c:	5cd3      	ldrb	r3, [r2, r3]
 8003d7e:	f003 031f 	and.w	r3, r3, #31
 8003d82:	fa21 f303 	lsr.w	r3, r1, r3
 8003d86:	4a0a      	ldr	r2, [pc, #40]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fd fc76 	bl	8001680 <HAL_InitTick>
 8003d94:	4603      	mov	r3, r0
 8003d96:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d98:	7afb      	ldrb	r3, [r7, #11]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40022000 	.word	0x40022000
 8003da8:	40021000 	.word	0x40021000
 8003dac:	080072e4 	.word	0x080072e4
 8003db0:	20000000 	.word	0x20000000
 8003db4:	20000004 	.word	0x20000004

08003db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b089      	sub	sp, #36	; 0x24
 8003dbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61fb      	str	r3, [r7, #28]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dc6:	4b3d      	ldr	r3, [pc, #244]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x104>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
 8003dce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dd0:	4b3a      	ldr	r3, [pc, #232]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x104>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f003 0303 	and.w	r3, r3, #3
 8003dd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d005      	beq.n	8003dec <HAL_RCC_GetSysClockFreq+0x34>
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	2b0c      	cmp	r3, #12
 8003de4:	d121      	bne.n	8003e2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d11e      	bne.n	8003e2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003dec:	4b33      	ldr	r3, [pc, #204]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x104>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d107      	bne.n	8003e08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003df8:	4b30      	ldr	r3, [pc, #192]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x104>)
 8003dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dfe:	0a1b      	lsrs	r3, r3, #8
 8003e00:	f003 030f 	and.w	r3, r3, #15
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	e005      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e08:	4b2c      	ldr	r3, [pc, #176]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x104>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	091b      	lsrs	r3, r3, #4
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e14:	4a2a      	ldr	r2, [pc, #168]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10d      	bne.n	8003e40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e28:	e00a      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d102      	bne.n	8003e36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e30:	4b24      	ldr	r3, [pc, #144]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e32:	61bb      	str	r3, [r7, #24]
 8003e34:	e004      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d101      	bne.n	8003e40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e3c:	4b22      	ldr	r3, [pc, #136]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	2b0c      	cmp	r3, #12
 8003e44:	d133      	bne.n	8003eae <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e46:	4b1d      	ldr	r3, [pc, #116]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x104>)
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d002      	beq.n	8003e5c <HAL_RCC_GetSysClockFreq+0xa4>
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d003      	beq.n	8003e62 <HAL_RCC_GetSysClockFreq+0xaa>
 8003e5a:	e005      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e5c:	4b19      	ldr	r3, [pc, #100]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e5e:	617b      	str	r3, [r7, #20]
      break;
 8003e60:	e005      	b.n	8003e6e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e62:	4b19      	ldr	r3, [pc, #100]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e64:	617b      	str	r3, [r7, #20]
      break;
 8003e66:	e002      	b.n	8003e6e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	617b      	str	r3, [r7, #20]
      break;
 8003e6c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e6e:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x104>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	091b      	lsrs	r3, r3, #4
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	3301      	adds	r3, #1
 8003e7a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e7c:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x104>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	0a1b      	lsrs	r3, r3, #8
 8003e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	fb02 f203 	mul.w	r2, r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e92:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e94:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x104>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	0e5b      	lsrs	r3, r3, #25
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eac:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003eae:	69bb      	ldr	r3, [r7, #24]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3724      	adds	r7, #36	; 0x24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	080072fc 	.word	0x080072fc
 8003ec4:	00f42400 	.word	0x00f42400
 8003ec8:	007a1200 	.word	0x007a1200

08003ecc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed0:	4b03      	ldr	r3, [pc, #12]	; (8003ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	20000000 	.word	0x20000000

08003ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ee8:	f7ff fff0 	bl	8003ecc <HAL_RCC_GetHCLKFreq>
 8003eec:	4601      	mov	r1, r0
 8003eee:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	0a1b      	lsrs	r3, r3, #8
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	4a04      	ldr	r2, [pc, #16]	; (8003f0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003efa:	5cd3      	ldrb	r3, [r2, r3]
 8003efc:	f003 031f 	and.w	r3, r3, #31
 8003f00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	080072f4 	.word	0x080072f4

08003f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f14:	f7ff ffda 	bl	8003ecc <HAL_RCC_GetHCLKFreq>
 8003f18:	4601      	mov	r1, r0
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	0adb      	lsrs	r3, r3, #11
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	4a04      	ldr	r2, [pc, #16]	; (8003f38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f26:	5cd3      	ldrb	r3, [r2, r3]
 8003f28:	f003 031f 	and.w	r3, r3, #31
 8003f2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40021000 	.word	0x40021000
 8003f38:	080072f4 	.word	0x080072f4

08003f3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f44:	2300      	movs	r3, #0
 8003f46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f48:	4b2a      	ldr	r3, [pc, #168]	; (8003ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f54:	f7ff f984 	bl	8003260 <HAL_PWREx_GetVoltageRange>
 8003f58:	6178      	str	r0, [r7, #20]
 8003f5a:	e014      	b.n	8003f86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f5c:	4b25      	ldr	r3, [pc, #148]	; (8003ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f60:	4a24      	ldr	r2, [pc, #144]	; (8003ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f66:	6593      	str	r3, [r2, #88]	; 0x58
 8003f68:	4b22      	ldr	r3, [pc, #136]	; (8003ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f74:	f7ff f974 	bl	8003260 <HAL_PWREx_GetVoltageRange>
 8003f78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f7a:	4b1e      	ldr	r3, [pc, #120]	; (8003ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7e:	4a1d      	ldr	r2, [pc, #116]	; (8003ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f8c:	d10b      	bne.n	8003fa6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b80      	cmp	r3, #128	; 0x80
 8003f92:	d919      	bls.n	8003fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2ba0      	cmp	r3, #160	; 0xa0
 8003f98:	d902      	bls.n	8003fa0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	e013      	b.n	8003fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	613b      	str	r3, [r7, #16]
 8003fa4:	e010      	b.n	8003fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b80      	cmp	r3, #128	; 0x80
 8003faa:	d902      	bls.n	8003fb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003fac:	2303      	movs	r3, #3
 8003fae:	613b      	str	r3, [r7, #16]
 8003fb0:	e00a      	b.n	8003fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b80      	cmp	r3, #128	; 0x80
 8003fb6:	d102      	bne.n	8003fbe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fb8:	2302      	movs	r3, #2
 8003fba:	613b      	str	r3, [r7, #16]
 8003fbc:	e004      	b.n	8003fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b70      	cmp	r3, #112	; 0x70
 8003fc2:	d101      	bne.n	8003fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f023 0207 	bic.w	r2, r3, #7
 8003fd0:	4909      	ldr	r1, [pc, #36]	; (8003ff8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fd8:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d001      	beq.n	8003fea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	40022000 	.word	0x40022000

08003ffc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004004:	2300      	movs	r3, #0
 8004006:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004008:	2300      	movs	r3, #0
 800400a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 809e 	beq.w	8004156 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800401a:	2300      	movs	r3, #0
 800401c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800401e:	4b46      	ldr	r3, [pc, #280]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800402e:	2300      	movs	r3, #0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00d      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004034:	4b40      	ldr	r3, [pc, #256]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004038:	4a3f      	ldr	r2, [pc, #252]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800403a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800403e:	6593      	str	r3, [r2, #88]	; 0x58
 8004040:	4b3d      	ldr	r3, [pc, #244]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800404c:	2301      	movs	r3, #1
 800404e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004050:	4b3a      	ldr	r3, [pc, #232]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a39      	ldr	r2, [pc, #228]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800405a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800405c:	f7fd fb60 	bl	8001720 <HAL_GetTick>
 8004060:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004062:	e009      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004064:	f7fd fb5c 	bl	8001720 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d902      	bls.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	74fb      	strb	r3, [r7, #19]
        break;
 8004076:	e005      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004078:	4b30      	ldr	r3, [pc, #192]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0ef      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8004084:	7cfb      	ldrb	r3, [r7, #19]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d15a      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800408a:	4b2b      	ldr	r3, [pc, #172]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800408c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004090:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004094:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d01e      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xde>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d019      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040a6:	4b24      	ldr	r3, [pc, #144]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040b2:	4b21      	ldr	r3, [pc, #132]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b8:	4a1f      	ldr	r2, [pc, #124]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040c2:	4b1d      	ldr	r3, [pc, #116]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c8:	4a1b      	ldr	r2, [pc, #108]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040d2:	4a19      	ldr	r2, [pc, #100]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d016      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e4:	f7fd fb1c 	bl	8001720 <HAL_GetTick>
 80040e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ea:	e00b      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ec:	f7fd fb18 	bl	8001720 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d902      	bls.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	74fb      	strb	r3, [r7, #19]
            break;
 8004102:	e006      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004104:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0ec      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8004112:	7cfb      	ldrb	r3, [r7, #19]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10b      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004118:	4b07      	ldr	r3, [pc, #28]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	4904      	ldr	r1, [pc, #16]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800412e:	e009      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004130:	7cfb      	ldrb	r3, [r7, #19]
 8004132:	74bb      	strb	r3, [r7, #18]
 8004134:	e006      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004136:	bf00      	nop
 8004138:	40021000 	.word	0x40021000
 800413c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004140:	7cfb      	ldrb	r3, [r7, #19]
 8004142:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004144:	7c7b      	ldrb	r3, [r7, #17]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d105      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800414a:	4b6e      	ldr	r3, [pc, #440]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800414c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414e:	4a6d      	ldr	r2, [pc, #436]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004154:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004162:	4b68      	ldr	r3, [pc, #416]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004168:	f023 0203 	bic.w	r2, r3, #3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	4964      	ldr	r1, [pc, #400]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004184:	4b5f      	ldr	r3, [pc, #380]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418a:	f023 020c 	bic.w	r2, r3, #12
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	495c      	ldr	r1, [pc, #368]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041a6:	4b57      	ldr	r3, [pc, #348]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	4953      	ldr	r1, [pc, #332]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0320 	and.w	r3, r3, #32
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041c8:	4b4e      	ldr	r3, [pc, #312]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	494b      	ldr	r1, [pc, #300]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041ea:	4b46      	ldr	r3, [pc, #280]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	4942      	ldr	r1, [pc, #264]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800420c:	4b3d      	ldr	r3, [pc, #244]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004212:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	493a      	ldr	r1, [pc, #232]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800422e:	4b35      	ldr	r3, [pc, #212]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004234:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	4931      	ldr	r1, [pc, #196]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004250:	4b2c      	ldr	r3, [pc, #176]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004256:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	4929      	ldr	r1, [pc, #164]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004272:	4b24      	ldr	r3, [pc, #144]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004278:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	4920      	ldr	r1, [pc, #128]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d015      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004294:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a2:	4918      	ldr	r1, [pc, #96]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042b2:	d105      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b4:	4b13      	ldr	r3, [pc, #76]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	4a12      	ldr	r2, [pc, #72]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042be:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d015      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042cc:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	490a      	ldr	r1, [pc, #40]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042ea:	d105      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042ec:	4b05      	ldr	r3, [pc, #20]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	4a04      	ldr	r2, [pc, #16]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40021000 	.word	0x40021000

08004308 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e040      	b.n	800439c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fd f8e6 	bl	80014fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2224      	movs	r2, #36	; 0x24
 8004334:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0201 	bic.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f8c0 	bl	80044cc <UART_SetConfig>
 800434c:	4603      	mov	r3, r0
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e022      	b.n	800439c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 faea 	bl	8004938 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004372:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004382:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fb71 	bl	8004a7c <UART_CheckIdleState>
 800439a:	4603      	mov	r3, r0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b08a      	sub	sp, #40	; 0x28
 80043a8:	af02      	add	r7, sp, #8
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	603b      	str	r3, [r7, #0]
 80043b0:	4613      	mov	r3, r2
 80043b2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	f040 8081 	bne.w	80044c0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <HAL_UART_Transmit+0x26>
 80043c4:	88fb      	ldrh	r3, [r7, #6]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e079      	b.n	80044c2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_UART_Transmit+0x38>
 80043d8:	2302      	movs	r3, #2
 80043da:	e072      	b.n	80044c2 <HAL_UART_Transmit+0x11e>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2221      	movs	r2, #33	; 0x21
 80043ee:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80043f0:	f7fd f996 	bl	8001720 <HAL_GetTick>
 80043f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	88fa      	ldrh	r2, [r7, #6]
 80043fa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	88fa      	ldrh	r2, [r7, #6]
 8004402:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800440e:	d108      	bne.n	8004422 <HAL_UART_Transmit+0x7e>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d104      	bne.n	8004422 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004418:	2300      	movs	r3, #0
 800441a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	61bb      	str	r3, [r7, #24]
 8004420:	e003      	b.n	800442a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004426:	2300      	movs	r3, #0
 8004428:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004432:	e02d      	b.n	8004490 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2200      	movs	r2, #0
 800443c:	2180      	movs	r1, #128	; 0x80
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 fb61 	bl	8004b06 <UART_WaitOnFlagUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e039      	b.n	80044c2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10b      	bne.n	800446c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	881a      	ldrh	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004460:	b292      	uxth	r2, r2
 8004462:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	3302      	adds	r3, #2
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	e008      	b.n	800447e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	781a      	ldrb	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	b292      	uxth	r2, r2
 8004476:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	3301      	adds	r3, #1
 800447c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004496:	b29b      	uxth	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1cb      	bne.n	8004434 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2200      	movs	r2, #0
 80044a4:	2140      	movs	r1, #64	; 0x40
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 fb2d 	bl	8004b06 <UART_WaitOnFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e005      	b.n	80044c2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2220      	movs	r2, #32
 80044ba:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80044bc:	2300      	movs	r3, #0
 80044be:	e000      	b.n	80044c2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80044c0:	2302      	movs	r3, #2
  }
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3720      	adds	r7, #32
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044cc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80044d0:	b088      	sub	sp, #32
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	4baa      	ldr	r3, [pc, #680]	; (80047a4 <UART_SetConfig+0x2d8>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	6812      	ldr	r2, [r2, #0]
 8004500:	69f9      	ldr	r1, [r7, #28]
 8004502:	430b      	orrs	r3, r1
 8004504:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68da      	ldr	r2, [r3, #12]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4aa0      	ldr	r2, [pc, #640]	; (80047a8 <UART_SetConfig+0x2dc>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d004      	beq.n	8004536 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	4313      	orrs	r3, r2
 8004534:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	430a      	orrs	r2, r1
 8004548:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a97      	ldr	r2, [pc, #604]	; (80047ac <UART_SetConfig+0x2e0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d121      	bne.n	8004598 <UART_SetConfig+0xcc>
 8004554:	4b96      	ldr	r3, [pc, #600]	; (80047b0 <UART_SetConfig+0x2e4>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	2b03      	cmp	r3, #3
 8004560:	d816      	bhi.n	8004590 <UART_SetConfig+0xc4>
 8004562:	a201      	add	r2, pc, #4	; (adr r2, 8004568 <UART_SetConfig+0x9c>)
 8004564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004568:	08004579 	.word	0x08004579
 800456c:	08004585 	.word	0x08004585
 8004570:	0800457f 	.word	0x0800457f
 8004574:	0800458b 	.word	0x0800458b
 8004578:	2301      	movs	r3, #1
 800457a:	76fb      	strb	r3, [r7, #27]
 800457c:	e098      	b.n	80046b0 <UART_SetConfig+0x1e4>
 800457e:	2302      	movs	r3, #2
 8004580:	76fb      	strb	r3, [r7, #27]
 8004582:	e095      	b.n	80046b0 <UART_SetConfig+0x1e4>
 8004584:	2304      	movs	r3, #4
 8004586:	76fb      	strb	r3, [r7, #27]
 8004588:	e092      	b.n	80046b0 <UART_SetConfig+0x1e4>
 800458a:	2308      	movs	r3, #8
 800458c:	76fb      	strb	r3, [r7, #27]
 800458e:	e08f      	b.n	80046b0 <UART_SetConfig+0x1e4>
 8004590:	2310      	movs	r3, #16
 8004592:	76fb      	strb	r3, [r7, #27]
 8004594:	bf00      	nop
 8004596:	e08b      	b.n	80046b0 <UART_SetConfig+0x1e4>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a85      	ldr	r2, [pc, #532]	; (80047b4 <UART_SetConfig+0x2e8>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d134      	bne.n	800460c <UART_SetConfig+0x140>
 80045a2:	4b83      	ldr	r3, [pc, #524]	; (80047b0 <UART_SetConfig+0x2e4>)
 80045a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a8:	f003 030c 	and.w	r3, r3, #12
 80045ac:	2b0c      	cmp	r3, #12
 80045ae:	d829      	bhi.n	8004604 <UART_SetConfig+0x138>
 80045b0:	a201      	add	r2, pc, #4	; (adr r2, 80045b8 <UART_SetConfig+0xec>)
 80045b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b6:	bf00      	nop
 80045b8:	080045ed 	.word	0x080045ed
 80045bc:	08004605 	.word	0x08004605
 80045c0:	08004605 	.word	0x08004605
 80045c4:	08004605 	.word	0x08004605
 80045c8:	080045f9 	.word	0x080045f9
 80045cc:	08004605 	.word	0x08004605
 80045d0:	08004605 	.word	0x08004605
 80045d4:	08004605 	.word	0x08004605
 80045d8:	080045f3 	.word	0x080045f3
 80045dc:	08004605 	.word	0x08004605
 80045e0:	08004605 	.word	0x08004605
 80045e4:	08004605 	.word	0x08004605
 80045e8:	080045ff 	.word	0x080045ff
 80045ec:	2300      	movs	r3, #0
 80045ee:	76fb      	strb	r3, [r7, #27]
 80045f0:	e05e      	b.n	80046b0 <UART_SetConfig+0x1e4>
 80045f2:	2302      	movs	r3, #2
 80045f4:	76fb      	strb	r3, [r7, #27]
 80045f6:	e05b      	b.n	80046b0 <UART_SetConfig+0x1e4>
 80045f8:	2304      	movs	r3, #4
 80045fa:	76fb      	strb	r3, [r7, #27]
 80045fc:	e058      	b.n	80046b0 <UART_SetConfig+0x1e4>
 80045fe:	2308      	movs	r3, #8
 8004600:	76fb      	strb	r3, [r7, #27]
 8004602:	e055      	b.n	80046b0 <UART_SetConfig+0x1e4>
 8004604:	2310      	movs	r3, #16
 8004606:	76fb      	strb	r3, [r7, #27]
 8004608:	bf00      	nop
 800460a:	e051      	b.n	80046b0 <UART_SetConfig+0x1e4>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a69      	ldr	r2, [pc, #420]	; (80047b8 <UART_SetConfig+0x2ec>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d120      	bne.n	8004658 <UART_SetConfig+0x18c>
 8004616:	4b66      	ldr	r3, [pc, #408]	; (80047b0 <UART_SetConfig+0x2e4>)
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004620:	2b10      	cmp	r3, #16
 8004622:	d00f      	beq.n	8004644 <UART_SetConfig+0x178>
 8004624:	2b10      	cmp	r3, #16
 8004626:	d802      	bhi.n	800462e <UART_SetConfig+0x162>
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <UART_SetConfig+0x16c>
 800462c:	e010      	b.n	8004650 <UART_SetConfig+0x184>
 800462e:	2b20      	cmp	r3, #32
 8004630:	d005      	beq.n	800463e <UART_SetConfig+0x172>
 8004632:	2b30      	cmp	r3, #48	; 0x30
 8004634:	d009      	beq.n	800464a <UART_SetConfig+0x17e>
 8004636:	e00b      	b.n	8004650 <UART_SetConfig+0x184>
 8004638:	2300      	movs	r3, #0
 800463a:	76fb      	strb	r3, [r7, #27]
 800463c:	e038      	b.n	80046b0 <UART_SetConfig+0x1e4>
 800463e:	2302      	movs	r3, #2
 8004640:	76fb      	strb	r3, [r7, #27]
 8004642:	e035      	b.n	80046b0 <UART_SetConfig+0x1e4>
 8004644:	2304      	movs	r3, #4
 8004646:	76fb      	strb	r3, [r7, #27]
 8004648:	e032      	b.n	80046b0 <UART_SetConfig+0x1e4>
 800464a:	2308      	movs	r3, #8
 800464c:	76fb      	strb	r3, [r7, #27]
 800464e:	e02f      	b.n	80046b0 <UART_SetConfig+0x1e4>
 8004650:	2310      	movs	r3, #16
 8004652:	76fb      	strb	r3, [r7, #27]
 8004654:	bf00      	nop
 8004656:	e02b      	b.n	80046b0 <UART_SetConfig+0x1e4>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a52      	ldr	r2, [pc, #328]	; (80047a8 <UART_SetConfig+0x2dc>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d124      	bne.n	80046ac <UART_SetConfig+0x1e0>
 8004662:	4b53      	ldr	r3, [pc, #332]	; (80047b0 <UART_SetConfig+0x2e4>)
 8004664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004668:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800466c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004670:	d012      	beq.n	8004698 <UART_SetConfig+0x1cc>
 8004672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004676:	d802      	bhi.n	800467e <UART_SetConfig+0x1b2>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d007      	beq.n	800468c <UART_SetConfig+0x1c0>
 800467c:	e012      	b.n	80046a4 <UART_SetConfig+0x1d8>
 800467e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004682:	d006      	beq.n	8004692 <UART_SetConfig+0x1c6>
 8004684:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004688:	d009      	beq.n	800469e <UART_SetConfig+0x1d2>
 800468a:	e00b      	b.n	80046a4 <UART_SetConfig+0x1d8>
 800468c:	2300      	movs	r3, #0
 800468e:	76fb      	strb	r3, [r7, #27]
 8004690:	e00e      	b.n	80046b0 <UART_SetConfig+0x1e4>
 8004692:	2302      	movs	r3, #2
 8004694:	76fb      	strb	r3, [r7, #27]
 8004696:	e00b      	b.n	80046b0 <UART_SetConfig+0x1e4>
 8004698:	2304      	movs	r3, #4
 800469a:	76fb      	strb	r3, [r7, #27]
 800469c:	e008      	b.n	80046b0 <UART_SetConfig+0x1e4>
 800469e:	2308      	movs	r3, #8
 80046a0:	76fb      	strb	r3, [r7, #27]
 80046a2:	e005      	b.n	80046b0 <UART_SetConfig+0x1e4>
 80046a4:	2310      	movs	r3, #16
 80046a6:	76fb      	strb	r3, [r7, #27]
 80046a8:	bf00      	nop
 80046aa:	e001      	b.n	80046b0 <UART_SetConfig+0x1e4>
 80046ac:	2310      	movs	r3, #16
 80046ae:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a3c      	ldr	r2, [pc, #240]	; (80047a8 <UART_SetConfig+0x2dc>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	f040 8082 	bne.w	80047c0 <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046bc:	7efb      	ldrb	r3, [r7, #27]
 80046be:	2b08      	cmp	r3, #8
 80046c0:	d823      	bhi.n	800470a <UART_SetConfig+0x23e>
 80046c2:	a201      	add	r2, pc, #4	; (adr r2, 80046c8 <UART_SetConfig+0x1fc>)
 80046c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c8:	080046ed 	.word	0x080046ed
 80046cc:	0800470b 	.word	0x0800470b
 80046d0:	080046f5 	.word	0x080046f5
 80046d4:	0800470b 	.word	0x0800470b
 80046d8:	080046fb 	.word	0x080046fb
 80046dc:	0800470b 	.word	0x0800470b
 80046e0:	0800470b 	.word	0x0800470b
 80046e4:	0800470b 	.word	0x0800470b
 80046e8:	08004703 	.word	0x08004703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046ec:	f7ff fbfa 	bl	8003ee4 <HAL_RCC_GetPCLK1Freq>
 80046f0:	6178      	str	r0, [r7, #20]
        break;
 80046f2:	e00f      	b.n	8004714 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046f4:	4b31      	ldr	r3, [pc, #196]	; (80047bc <UART_SetConfig+0x2f0>)
 80046f6:	617b      	str	r3, [r7, #20]
        break;
 80046f8:	e00c      	b.n	8004714 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046fa:	f7ff fb5d 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 80046fe:	6178      	str	r0, [r7, #20]
        break;
 8004700:	e008      	b.n	8004714 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004706:	617b      	str	r3, [r7, #20]
        break;
 8004708:	e004      	b.n	8004714 <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	76bb      	strb	r3, [r7, #26]
        break;
 8004712:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 8100 	beq.w	800491c <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	4613      	mov	r3, r2
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	4413      	add	r3, r2
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	429a      	cmp	r2, r3
 800472a:	d305      	bcc.n	8004738 <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	429a      	cmp	r2, r3
 8004736:	d902      	bls.n	800473e <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	76bb      	strb	r3, [r7, #26]
 800473c:	e0ee      	b.n	800491c <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	4619      	mov	r1, r3
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	f04f 0400 	mov.w	r4, #0
 800474e:	0214      	lsls	r4, r2, #8
 8004750:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004754:	020b      	lsls	r3, r1, #8
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6852      	ldr	r2, [r2, #4]
 800475a:	0852      	lsrs	r2, r2, #1
 800475c:	4611      	mov	r1, r2
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	eb13 0b01 	adds.w	fp, r3, r1
 8004766:	eb44 0c02 	adc.w	ip, r4, r2
 800476a:	4658      	mov	r0, fp
 800476c:	4661      	mov	r1, ip
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f04f 0400 	mov.w	r4, #0
 8004776:	461a      	mov	r2, r3
 8004778:	4623      	mov	r3, r4
 800477a:	f7fc fa15 	bl	8000ba8 <__aeabi_uldivmod>
 800477e:	4603      	mov	r3, r0
 8004780:	460c      	mov	r4, r1
 8004782:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800478a:	d308      	bcc.n	800479e <UART_SetConfig+0x2d2>
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004792:	d204      	bcs.n	800479e <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	60da      	str	r2, [r3, #12]
 800479c:	e0be      	b.n	800491c <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	76bb      	strb	r3, [r7, #26]
 80047a2:	e0bb      	b.n	800491c <UART_SetConfig+0x450>
 80047a4:	efff69f3 	.word	0xefff69f3
 80047a8:	40008000 	.word	0x40008000
 80047ac:	40013800 	.word	0x40013800
 80047b0:	40021000 	.word	0x40021000
 80047b4:	40004400 	.word	0x40004400
 80047b8:	40004800 	.word	0x40004800
 80047bc:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047c8:	d15c      	bne.n	8004884 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 80047ca:	7efb      	ldrb	r3, [r7, #27]
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d828      	bhi.n	8004822 <UART_SetConfig+0x356>
 80047d0:	a201      	add	r2, pc, #4	; (adr r2, 80047d8 <UART_SetConfig+0x30c>)
 80047d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d6:	bf00      	nop
 80047d8:	080047fd 	.word	0x080047fd
 80047dc:	08004805 	.word	0x08004805
 80047e0:	0800480d 	.word	0x0800480d
 80047e4:	08004823 	.word	0x08004823
 80047e8:	08004813 	.word	0x08004813
 80047ec:	08004823 	.word	0x08004823
 80047f0:	08004823 	.word	0x08004823
 80047f4:	08004823 	.word	0x08004823
 80047f8:	0800481b 	.word	0x0800481b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047fc:	f7ff fb72 	bl	8003ee4 <HAL_RCC_GetPCLK1Freq>
 8004800:	6178      	str	r0, [r7, #20]
        break;
 8004802:	e013      	b.n	800482c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004804:	f7ff fb84 	bl	8003f10 <HAL_RCC_GetPCLK2Freq>
 8004808:	6178      	str	r0, [r7, #20]
        break;
 800480a:	e00f      	b.n	800482c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800480c:	4b49      	ldr	r3, [pc, #292]	; (8004934 <UART_SetConfig+0x468>)
 800480e:	617b      	str	r3, [r7, #20]
        break;
 8004810:	e00c      	b.n	800482c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004812:	f7ff fad1 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 8004816:	6178      	str	r0, [r7, #20]
        break;
 8004818:	e008      	b.n	800482c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800481a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800481e:	617b      	str	r3, [r7, #20]
        break;
 8004820:	e004      	b.n	800482c <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 8004822:	2300      	movs	r3, #0
 8004824:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	76bb      	strb	r3, [r7, #26]
        break;
 800482a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d074      	beq.n	800491c <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	005a      	lsls	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	085b      	lsrs	r3, r3, #1
 800483c:	441a      	add	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	fbb2 f3f3 	udiv	r3, r2, r3
 8004846:	b29b      	uxth	r3, r3
 8004848:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	2b0f      	cmp	r3, #15
 800484e:	d916      	bls.n	800487e <UART_SetConfig+0x3b2>
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004856:	d212      	bcs.n	800487e <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	b29b      	uxth	r3, r3
 800485c:	f023 030f 	bic.w	r3, r3, #15
 8004860:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	085b      	lsrs	r3, r3, #1
 8004866:	b29b      	uxth	r3, r3
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	b29a      	uxth	r2, r3
 800486e:	89fb      	ldrh	r3, [r7, #14]
 8004870:	4313      	orrs	r3, r2
 8004872:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	89fa      	ldrh	r2, [r7, #14]
 800487a:	60da      	str	r2, [r3, #12]
 800487c:	e04e      	b.n	800491c <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	76bb      	strb	r3, [r7, #26]
 8004882:	e04b      	b.n	800491c <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004884:	7efb      	ldrb	r3, [r7, #27]
 8004886:	2b08      	cmp	r3, #8
 8004888:	d827      	bhi.n	80048da <UART_SetConfig+0x40e>
 800488a:	a201      	add	r2, pc, #4	; (adr r2, 8004890 <UART_SetConfig+0x3c4>)
 800488c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004890:	080048b5 	.word	0x080048b5
 8004894:	080048bd 	.word	0x080048bd
 8004898:	080048c5 	.word	0x080048c5
 800489c:	080048db 	.word	0x080048db
 80048a0:	080048cb 	.word	0x080048cb
 80048a4:	080048db 	.word	0x080048db
 80048a8:	080048db 	.word	0x080048db
 80048ac:	080048db 	.word	0x080048db
 80048b0:	080048d3 	.word	0x080048d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b4:	f7ff fb16 	bl	8003ee4 <HAL_RCC_GetPCLK1Freq>
 80048b8:	6178      	str	r0, [r7, #20]
        break;
 80048ba:	e013      	b.n	80048e4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048bc:	f7ff fb28 	bl	8003f10 <HAL_RCC_GetPCLK2Freq>
 80048c0:	6178      	str	r0, [r7, #20]
        break;
 80048c2:	e00f      	b.n	80048e4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048c4:	4b1b      	ldr	r3, [pc, #108]	; (8004934 <UART_SetConfig+0x468>)
 80048c6:	617b      	str	r3, [r7, #20]
        break;
 80048c8:	e00c      	b.n	80048e4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ca:	f7ff fa75 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 80048ce:	6178      	str	r0, [r7, #20]
        break;
 80048d0:	e008      	b.n	80048e4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048d6:	617b      	str	r3, [r7, #20]
        break;
 80048d8:	e004      	b.n	80048e4 <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	76bb      	strb	r3, [r7, #26]
        break;
 80048e2:	bf00      	nop
    }

    if (pclk != 0U)
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d018      	beq.n	800491c <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	085a      	lsrs	r2, r3, #1
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	441a      	add	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	2b0f      	cmp	r3, #15
 8004904:	d908      	bls.n	8004918 <UART_SetConfig+0x44c>
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490c:	d204      	bcs.n	8004918 <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	60da      	str	r2, [r3, #12]
 8004916:	e001      	b.n	800491c <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004928:	7ebb      	ldrb	r3, [r7, #26]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3720      	adds	r7, #32
 800492e:	46bd      	mov	sp, r7
 8004930:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004934:	00f42400 	.word	0x00f42400

08004938 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00a      	beq.n	8004962 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00a      	beq.n	80049a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	f003 0310 	and.w	r3, r3, #16
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	f003 0320 	and.w	r3, r3, #32
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00a      	beq.n	8004a0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d01a      	beq.n	8004a4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a36:	d10a      	bne.n	8004a4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	605a      	str	r2, [r3, #4]
  }
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af02      	add	r7, sp, #8
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004a8a:	f7fc fe49 	bl	8001720 <HAL_GetTick>
 8004a8e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d10e      	bne.n	8004abc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f82a 	bl	8004b06 <UART_WaitOnFlagUntilTimeout>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e020      	b.n	8004afe <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d10e      	bne.n	8004ae8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f814 	bl	8004b06 <UART_WaitOnFlagUntilTimeout>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e00a      	b.n	8004afe <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2220      	movs	r2, #32
 8004aec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	60f8      	str	r0, [r7, #12]
 8004b0e:	60b9      	str	r1, [r7, #8]
 8004b10:	603b      	str	r3, [r7, #0]
 8004b12:	4613      	mov	r3, r2
 8004b14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b16:	e05d      	b.n	8004bd4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1e:	d059      	beq.n	8004bd4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b20:	f7fc fdfe 	bl	8001720 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d302      	bcc.n	8004b36 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d11b      	bne.n	8004b6e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b44:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0201 	bic.w	r2, r2, #1
 8004b54:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e042      	b.n	8004bf4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d02b      	beq.n	8004bd4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b8a:	d123      	bne.n	8004bd4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ba4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0201 	bic.w	r2, r2, #1
 8004bb4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e00f      	b.n	8004bf4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	69da      	ldr	r2, [r3, #28]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	bf0c      	ite	eq
 8004be4:	2301      	moveq	r3, #1
 8004be6:	2300      	movne	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	461a      	mov	r2, r3
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d092      	beq.n	8004b18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <__errno>:
 8004bfc:	4b01      	ldr	r3, [pc, #4]	; (8004c04 <__errno+0x8>)
 8004bfe:	6818      	ldr	r0, [r3, #0]
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	2000000c 	.word	0x2000000c

08004c08 <__libc_init_array>:
 8004c08:	b570      	push	{r4, r5, r6, lr}
 8004c0a:	4e0d      	ldr	r6, [pc, #52]	; (8004c40 <__libc_init_array+0x38>)
 8004c0c:	4c0d      	ldr	r4, [pc, #52]	; (8004c44 <__libc_init_array+0x3c>)
 8004c0e:	1ba4      	subs	r4, r4, r6
 8004c10:	10a4      	asrs	r4, r4, #2
 8004c12:	2500      	movs	r5, #0
 8004c14:	42a5      	cmp	r5, r4
 8004c16:	d109      	bne.n	8004c2c <__libc_init_array+0x24>
 8004c18:	4e0b      	ldr	r6, [pc, #44]	; (8004c48 <__libc_init_array+0x40>)
 8004c1a:	4c0c      	ldr	r4, [pc, #48]	; (8004c4c <__libc_init_array+0x44>)
 8004c1c:	f002 fb46 	bl	80072ac <_init>
 8004c20:	1ba4      	subs	r4, r4, r6
 8004c22:	10a4      	asrs	r4, r4, #2
 8004c24:	2500      	movs	r5, #0
 8004c26:	42a5      	cmp	r5, r4
 8004c28:	d105      	bne.n	8004c36 <__libc_init_array+0x2e>
 8004c2a:	bd70      	pop	{r4, r5, r6, pc}
 8004c2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c30:	4798      	blx	r3
 8004c32:	3501      	adds	r5, #1
 8004c34:	e7ee      	b.n	8004c14 <__libc_init_array+0xc>
 8004c36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c3a:	4798      	blx	r3
 8004c3c:	3501      	adds	r5, #1
 8004c3e:	e7f2      	b.n	8004c26 <__libc_init_array+0x1e>
 8004c40:	080075f8 	.word	0x080075f8
 8004c44:	080075f8 	.word	0x080075f8
 8004c48:	080075f8 	.word	0x080075f8
 8004c4c:	080075fc 	.word	0x080075fc

08004c50 <memset>:
 8004c50:	4402      	add	r2, r0
 8004c52:	4603      	mov	r3, r0
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d100      	bne.n	8004c5a <memset+0xa>
 8004c58:	4770      	bx	lr
 8004c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c5e:	e7f9      	b.n	8004c54 <memset+0x4>

08004c60 <__cvt>:
 8004c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c64:	ec55 4b10 	vmov	r4, r5, d0
 8004c68:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004c6a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004c6e:	2d00      	cmp	r5, #0
 8004c70:	460e      	mov	r6, r1
 8004c72:	4691      	mov	r9, r2
 8004c74:	4619      	mov	r1, r3
 8004c76:	bfb8      	it	lt
 8004c78:	4622      	movlt	r2, r4
 8004c7a:	462b      	mov	r3, r5
 8004c7c:	f027 0720 	bic.w	r7, r7, #32
 8004c80:	bfbb      	ittet	lt
 8004c82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004c86:	461d      	movlt	r5, r3
 8004c88:	2300      	movge	r3, #0
 8004c8a:	232d      	movlt	r3, #45	; 0x2d
 8004c8c:	bfb8      	it	lt
 8004c8e:	4614      	movlt	r4, r2
 8004c90:	2f46      	cmp	r7, #70	; 0x46
 8004c92:	700b      	strb	r3, [r1, #0]
 8004c94:	d004      	beq.n	8004ca0 <__cvt+0x40>
 8004c96:	2f45      	cmp	r7, #69	; 0x45
 8004c98:	d100      	bne.n	8004c9c <__cvt+0x3c>
 8004c9a:	3601      	adds	r6, #1
 8004c9c:	2102      	movs	r1, #2
 8004c9e:	e000      	b.n	8004ca2 <__cvt+0x42>
 8004ca0:	2103      	movs	r1, #3
 8004ca2:	ab03      	add	r3, sp, #12
 8004ca4:	9301      	str	r3, [sp, #4]
 8004ca6:	ab02      	add	r3, sp, #8
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	4632      	mov	r2, r6
 8004cac:	4653      	mov	r3, sl
 8004cae:	ec45 4b10 	vmov	d0, r4, r5
 8004cb2:	f000 fcd5 	bl	8005660 <_dtoa_r>
 8004cb6:	2f47      	cmp	r7, #71	; 0x47
 8004cb8:	4680      	mov	r8, r0
 8004cba:	d102      	bne.n	8004cc2 <__cvt+0x62>
 8004cbc:	f019 0f01 	tst.w	r9, #1
 8004cc0:	d026      	beq.n	8004d10 <__cvt+0xb0>
 8004cc2:	2f46      	cmp	r7, #70	; 0x46
 8004cc4:	eb08 0906 	add.w	r9, r8, r6
 8004cc8:	d111      	bne.n	8004cee <__cvt+0x8e>
 8004cca:	f898 3000 	ldrb.w	r3, [r8]
 8004cce:	2b30      	cmp	r3, #48	; 0x30
 8004cd0:	d10a      	bne.n	8004ce8 <__cvt+0x88>
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	4629      	mov	r1, r5
 8004cda:	f7fb fef5 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cde:	b918      	cbnz	r0, 8004ce8 <__cvt+0x88>
 8004ce0:	f1c6 0601 	rsb	r6, r6, #1
 8004ce4:	f8ca 6000 	str.w	r6, [sl]
 8004ce8:	f8da 3000 	ldr.w	r3, [sl]
 8004cec:	4499      	add	r9, r3
 8004cee:	2200      	movs	r2, #0
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	4629      	mov	r1, r5
 8004cf6:	f7fb fee7 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cfa:	b938      	cbnz	r0, 8004d0c <__cvt+0xac>
 8004cfc:	2230      	movs	r2, #48	; 0x30
 8004cfe:	9b03      	ldr	r3, [sp, #12]
 8004d00:	454b      	cmp	r3, r9
 8004d02:	d205      	bcs.n	8004d10 <__cvt+0xb0>
 8004d04:	1c59      	adds	r1, r3, #1
 8004d06:	9103      	str	r1, [sp, #12]
 8004d08:	701a      	strb	r2, [r3, #0]
 8004d0a:	e7f8      	b.n	8004cfe <__cvt+0x9e>
 8004d0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d10:	9b03      	ldr	r3, [sp, #12]
 8004d12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d14:	eba3 0308 	sub.w	r3, r3, r8
 8004d18:	4640      	mov	r0, r8
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	b004      	add	sp, #16
 8004d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004d22 <__exponent>:
 8004d22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d24:	2900      	cmp	r1, #0
 8004d26:	4604      	mov	r4, r0
 8004d28:	bfba      	itte	lt
 8004d2a:	4249      	neglt	r1, r1
 8004d2c:	232d      	movlt	r3, #45	; 0x2d
 8004d2e:	232b      	movge	r3, #43	; 0x2b
 8004d30:	2909      	cmp	r1, #9
 8004d32:	f804 2b02 	strb.w	r2, [r4], #2
 8004d36:	7043      	strb	r3, [r0, #1]
 8004d38:	dd20      	ble.n	8004d7c <__exponent+0x5a>
 8004d3a:	f10d 0307 	add.w	r3, sp, #7
 8004d3e:	461f      	mov	r7, r3
 8004d40:	260a      	movs	r6, #10
 8004d42:	fb91 f5f6 	sdiv	r5, r1, r6
 8004d46:	fb06 1115 	mls	r1, r6, r5, r1
 8004d4a:	3130      	adds	r1, #48	; 0x30
 8004d4c:	2d09      	cmp	r5, #9
 8004d4e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004d52:	f103 32ff 	add.w	r2, r3, #4294967295
 8004d56:	4629      	mov	r1, r5
 8004d58:	dc09      	bgt.n	8004d6e <__exponent+0x4c>
 8004d5a:	3130      	adds	r1, #48	; 0x30
 8004d5c:	3b02      	subs	r3, #2
 8004d5e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004d62:	42bb      	cmp	r3, r7
 8004d64:	4622      	mov	r2, r4
 8004d66:	d304      	bcc.n	8004d72 <__exponent+0x50>
 8004d68:	1a10      	subs	r0, r2, r0
 8004d6a:	b003      	add	sp, #12
 8004d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d6e:	4613      	mov	r3, r2
 8004d70:	e7e7      	b.n	8004d42 <__exponent+0x20>
 8004d72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d76:	f804 2b01 	strb.w	r2, [r4], #1
 8004d7a:	e7f2      	b.n	8004d62 <__exponent+0x40>
 8004d7c:	2330      	movs	r3, #48	; 0x30
 8004d7e:	4419      	add	r1, r3
 8004d80:	7083      	strb	r3, [r0, #2]
 8004d82:	1d02      	adds	r2, r0, #4
 8004d84:	70c1      	strb	r1, [r0, #3]
 8004d86:	e7ef      	b.n	8004d68 <__exponent+0x46>

08004d88 <_printf_float>:
 8004d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8c:	b08d      	sub	sp, #52	; 0x34
 8004d8e:	460c      	mov	r4, r1
 8004d90:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004d94:	4616      	mov	r6, r2
 8004d96:	461f      	mov	r7, r3
 8004d98:	4605      	mov	r5, r0
 8004d9a:	f001 fae3 	bl	8006364 <_localeconv_r>
 8004d9e:	6803      	ldr	r3, [r0, #0]
 8004da0:	9304      	str	r3, [sp, #16]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fb fa14 	bl	80001d0 <strlen>
 8004da8:	2300      	movs	r3, #0
 8004daa:	930a      	str	r3, [sp, #40]	; 0x28
 8004dac:	f8d8 3000 	ldr.w	r3, [r8]
 8004db0:	9005      	str	r0, [sp, #20]
 8004db2:	3307      	adds	r3, #7
 8004db4:	f023 0307 	bic.w	r3, r3, #7
 8004db8:	f103 0208 	add.w	r2, r3, #8
 8004dbc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004dc0:	f8d4 b000 	ldr.w	fp, [r4]
 8004dc4:	f8c8 2000 	str.w	r2, [r8]
 8004dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dcc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004dd0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004dd4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004dd8:	9307      	str	r3, [sp, #28]
 8004dda:	f8cd 8018 	str.w	r8, [sp, #24]
 8004dde:	f04f 32ff 	mov.w	r2, #4294967295
 8004de2:	4ba7      	ldr	r3, [pc, #668]	; (8005080 <_printf_float+0x2f8>)
 8004de4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004de8:	f7fb fea0 	bl	8000b2c <__aeabi_dcmpun>
 8004dec:	bb70      	cbnz	r0, 8004e4c <_printf_float+0xc4>
 8004dee:	f04f 32ff 	mov.w	r2, #4294967295
 8004df2:	4ba3      	ldr	r3, [pc, #652]	; (8005080 <_printf_float+0x2f8>)
 8004df4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004df8:	f7fb fe7a 	bl	8000af0 <__aeabi_dcmple>
 8004dfc:	bb30      	cbnz	r0, 8004e4c <_printf_float+0xc4>
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2300      	movs	r3, #0
 8004e02:	4640      	mov	r0, r8
 8004e04:	4649      	mov	r1, r9
 8004e06:	f7fb fe69 	bl	8000adc <__aeabi_dcmplt>
 8004e0a:	b110      	cbz	r0, 8004e12 <_printf_float+0x8a>
 8004e0c:	232d      	movs	r3, #45	; 0x2d
 8004e0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e12:	4a9c      	ldr	r2, [pc, #624]	; (8005084 <_printf_float+0x2fc>)
 8004e14:	4b9c      	ldr	r3, [pc, #624]	; (8005088 <_printf_float+0x300>)
 8004e16:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004e1a:	bf8c      	ite	hi
 8004e1c:	4690      	movhi	r8, r2
 8004e1e:	4698      	movls	r8, r3
 8004e20:	2303      	movs	r3, #3
 8004e22:	f02b 0204 	bic.w	r2, fp, #4
 8004e26:	6123      	str	r3, [r4, #16]
 8004e28:	6022      	str	r2, [r4, #0]
 8004e2a:	f04f 0900 	mov.w	r9, #0
 8004e2e:	9700      	str	r7, [sp, #0]
 8004e30:	4633      	mov	r3, r6
 8004e32:	aa0b      	add	r2, sp, #44	; 0x2c
 8004e34:	4621      	mov	r1, r4
 8004e36:	4628      	mov	r0, r5
 8004e38:	f000 f9e6 	bl	8005208 <_printf_common>
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	f040 808d 	bne.w	8004f5c <_printf_float+0x1d4>
 8004e42:	f04f 30ff 	mov.w	r0, #4294967295
 8004e46:	b00d      	add	sp, #52	; 0x34
 8004e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e4c:	4642      	mov	r2, r8
 8004e4e:	464b      	mov	r3, r9
 8004e50:	4640      	mov	r0, r8
 8004e52:	4649      	mov	r1, r9
 8004e54:	f7fb fe6a 	bl	8000b2c <__aeabi_dcmpun>
 8004e58:	b110      	cbz	r0, 8004e60 <_printf_float+0xd8>
 8004e5a:	4a8c      	ldr	r2, [pc, #560]	; (800508c <_printf_float+0x304>)
 8004e5c:	4b8c      	ldr	r3, [pc, #560]	; (8005090 <_printf_float+0x308>)
 8004e5e:	e7da      	b.n	8004e16 <_printf_float+0x8e>
 8004e60:	6861      	ldr	r1, [r4, #4]
 8004e62:	1c4b      	adds	r3, r1, #1
 8004e64:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004e68:	a80a      	add	r0, sp, #40	; 0x28
 8004e6a:	d13e      	bne.n	8004eea <_printf_float+0x162>
 8004e6c:	2306      	movs	r3, #6
 8004e6e:	6063      	str	r3, [r4, #4]
 8004e70:	2300      	movs	r3, #0
 8004e72:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004e76:	ab09      	add	r3, sp, #36	; 0x24
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	ec49 8b10 	vmov	d0, r8, r9
 8004e7e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e82:	6022      	str	r2, [r4, #0]
 8004e84:	f8cd a004 	str.w	sl, [sp, #4]
 8004e88:	6861      	ldr	r1, [r4, #4]
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	f7ff fee8 	bl	8004c60 <__cvt>
 8004e90:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004e94:	2b47      	cmp	r3, #71	; 0x47
 8004e96:	4680      	mov	r8, r0
 8004e98:	d109      	bne.n	8004eae <_printf_float+0x126>
 8004e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e9c:	1cd8      	adds	r0, r3, #3
 8004e9e:	db02      	blt.n	8004ea6 <_printf_float+0x11e>
 8004ea0:	6862      	ldr	r2, [r4, #4]
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	dd47      	ble.n	8004f36 <_printf_float+0x1ae>
 8004ea6:	f1aa 0a02 	sub.w	sl, sl, #2
 8004eaa:	fa5f fa8a 	uxtb.w	sl, sl
 8004eae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004eb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004eb4:	d824      	bhi.n	8004f00 <_printf_float+0x178>
 8004eb6:	3901      	subs	r1, #1
 8004eb8:	4652      	mov	r2, sl
 8004eba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ebe:	9109      	str	r1, [sp, #36]	; 0x24
 8004ec0:	f7ff ff2f 	bl	8004d22 <__exponent>
 8004ec4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ec6:	1813      	adds	r3, r2, r0
 8004ec8:	2a01      	cmp	r2, #1
 8004eca:	4681      	mov	r9, r0
 8004ecc:	6123      	str	r3, [r4, #16]
 8004ece:	dc02      	bgt.n	8004ed6 <_printf_float+0x14e>
 8004ed0:	6822      	ldr	r2, [r4, #0]
 8004ed2:	07d1      	lsls	r1, r2, #31
 8004ed4:	d501      	bpl.n	8004eda <_printf_float+0x152>
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	6123      	str	r3, [r4, #16]
 8004eda:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0a5      	beq.n	8004e2e <_printf_float+0xa6>
 8004ee2:	232d      	movs	r3, #45	; 0x2d
 8004ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ee8:	e7a1      	b.n	8004e2e <_printf_float+0xa6>
 8004eea:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004eee:	f000 8177 	beq.w	80051e0 <_printf_float+0x458>
 8004ef2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004ef6:	d1bb      	bne.n	8004e70 <_printf_float+0xe8>
 8004ef8:	2900      	cmp	r1, #0
 8004efa:	d1b9      	bne.n	8004e70 <_printf_float+0xe8>
 8004efc:	2301      	movs	r3, #1
 8004efe:	e7b6      	b.n	8004e6e <_printf_float+0xe6>
 8004f00:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004f04:	d119      	bne.n	8004f3a <_printf_float+0x1b2>
 8004f06:	2900      	cmp	r1, #0
 8004f08:	6863      	ldr	r3, [r4, #4]
 8004f0a:	dd0c      	ble.n	8004f26 <_printf_float+0x19e>
 8004f0c:	6121      	str	r1, [r4, #16]
 8004f0e:	b913      	cbnz	r3, 8004f16 <_printf_float+0x18e>
 8004f10:	6822      	ldr	r2, [r4, #0]
 8004f12:	07d2      	lsls	r2, r2, #31
 8004f14:	d502      	bpl.n	8004f1c <_printf_float+0x194>
 8004f16:	3301      	adds	r3, #1
 8004f18:	440b      	add	r3, r1
 8004f1a:	6123      	str	r3, [r4, #16]
 8004f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f1e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004f20:	f04f 0900 	mov.w	r9, #0
 8004f24:	e7d9      	b.n	8004eda <_printf_float+0x152>
 8004f26:	b913      	cbnz	r3, 8004f2e <_printf_float+0x1a6>
 8004f28:	6822      	ldr	r2, [r4, #0]
 8004f2a:	07d0      	lsls	r0, r2, #31
 8004f2c:	d501      	bpl.n	8004f32 <_printf_float+0x1aa>
 8004f2e:	3302      	adds	r3, #2
 8004f30:	e7f3      	b.n	8004f1a <_printf_float+0x192>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e7f1      	b.n	8004f1a <_printf_float+0x192>
 8004f36:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004f3a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	db05      	blt.n	8004f4e <_printf_float+0x1c6>
 8004f42:	6822      	ldr	r2, [r4, #0]
 8004f44:	6123      	str	r3, [r4, #16]
 8004f46:	07d1      	lsls	r1, r2, #31
 8004f48:	d5e8      	bpl.n	8004f1c <_printf_float+0x194>
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	e7e5      	b.n	8004f1a <_printf_float+0x192>
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	bfd4      	ite	le
 8004f52:	f1c3 0302 	rsble	r3, r3, #2
 8004f56:	2301      	movgt	r3, #1
 8004f58:	4413      	add	r3, r2
 8004f5a:	e7de      	b.n	8004f1a <_printf_float+0x192>
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	055a      	lsls	r2, r3, #21
 8004f60:	d407      	bmi.n	8004f72 <_printf_float+0x1ea>
 8004f62:	6923      	ldr	r3, [r4, #16]
 8004f64:	4642      	mov	r2, r8
 8004f66:	4631      	mov	r1, r6
 8004f68:	4628      	mov	r0, r5
 8004f6a:	47b8      	blx	r7
 8004f6c:	3001      	adds	r0, #1
 8004f6e:	d12b      	bne.n	8004fc8 <_printf_float+0x240>
 8004f70:	e767      	b.n	8004e42 <_printf_float+0xba>
 8004f72:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004f76:	f240 80dc 	bls.w	8005132 <_printf_float+0x3aa>
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f82:	f7fb fda1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f86:	2800      	cmp	r0, #0
 8004f88:	d033      	beq.n	8004ff2 <_printf_float+0x26a>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	4a41      	ldr	r2, [pc, #260]	; (8005094 <_printf_float+0x30c>)
 8004f8e:	4631      	mov	r1, r6
 8004f90:	4628      	mov	r0, r5
 8004f92:	47b8      	blx	r7
 8004f94:	3001      	adds	r0, #1
 8004f96:	f43f af54 	beq.w	8004e42 <_printf_float+0xba>
 8004f9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	db02      	blt.n	8004fa8 <_printf_float+0x220>
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	07d8      	lsls	r0, r3, #31
 8004fa6:	d50f      	bpl.n	8004fc8 <_printf_float+0x240>
 8004fa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fac:	4631      	mov	r1, r6
 8004fae:	4628      	mov	r0, r5
 8004fb0:	47b8      	blx	r7
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	f43f af45 	beq.w	8004e42 <_printf_float+0xba>
 8004fb8:	f04f 0800 	mov.w	r8, #0
 8004fbc:	f104 091a 	add.w	r9, r4, #26
 8004fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	4543      	cmp	r3, r8
 8004fc6:	dc09      	bgt.n	8004fdc <_printf_float+0x254>
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	079b      	lsls	r3, r3, #30
 8004fcc:	f100 8103 	bmi.w	80051d6 <_printf_float+0x44e>
 8004fd0:	68e0      	ldr	r0, [r4, #12]
 8004fd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fd4:	4298      	cmp	r0, r3
 8004fd6:	bfb8      	it	lt
 8004fd8:	4618      	movlt	r0, r3
 8004fda:	e734      	b.n	8004e46 <_printf_float+0xbe>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	464a      	mov	r2, r9
 8004fe0:	4631      	mov	r1, r6
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	47b8      	blx	r7
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	f43f af2b 	beq.w	8004e42 <_printf_float+0xba>
 8004fec:	f108 0801 	add.w	r8, r8, #1
 8004ff0:	e7e6      	b.n	8004fc0 <_printf_float+0x238>
 8004ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	dc2b      	bgt.n	8005050 <_printf_float+0x2c8>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	4a26      	ldr	r2, [pc, #152]	; (8005094 <_printf_float+0x30c>)
 8004ffc:	4631      	mov	r1, r6
 8004ffe:	4628      	mov	r0, r5
 8005000:	47b8      	blx	r7
 8005002:	3001      	adds	r0, #1
 8005004:	f43f af1d 	beq.w	8004e42 <_printf_float+0xba>
 8005008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800500a:	b923      	cbnz	r3, 8005016 <_printf_float+0x28e>
 800500c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800500e:	b913      	cbnz	r3, 8005016 <_printf_float+0x28e>
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	07d9      	lsls	r1, r3, #31
 8005014:	d5d8      	bpl.n	8004fc8 <_printf_float+0x240>
 8005016:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800501a:	4631      	mov	r1, r6
 800501c:	4628      	mov	r0, r5
 800501e:	47b8      	blx	r7
 8005020:	3001      	adds	r0, #1
 8005022:	f43f af0e 	beq.w	8004e42 <_printf_float+0xba>
 8005026:	f04f 0900 	mov.w	r9, #0
 800502a:	f104 0a1a 	add.w	sl, r4, #26
 800502e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005030:	425b      	negs	r3, r3
 8005032:	454b      	cmp	r3, r9
 8005034:	dc01      	bgt.n	800503a <_printf_float+0x2b2>
 8005036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005038:	e794      	b.n	8004f64 <_printf_float+0x1dc>
 800503a:	2301      	movs	r3, #1
 800503c:	4652      	mov	r2, sl
 800503e:	4631      	mov	r1, r6
 8005040:	4628      	mov	r0, r5
 8005042:	47b8      	blx	r7
 8005044:	3001      	adds	r0, #1
 8005046:	f43f aefc 	beq.w	8004e42 <_printf_float+0xba>
 800504a:	f109 0901 	add.w	r9, r9, #1
 800504e:	e7ee      	b.n	800502e <_printf_float+0x2a6>
 8005050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005052:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005054:	429a      	cmp	r2, r3
 8005056:	bfa8      	it	ge
 8005058:	461a      	movge	r2, r3
 800505a:	2a00      	cmp	r2, #0
 800505c:	4691      	mov	r9, r2
 800505e:	dd07      	ble.n	8005070 <_printf_float+0x2e8>
 8005060:	4613      	mov	r3, r2
 8005062:	4631      	mov	r1, r6
 8005064:	4642      	mov	r2, r8
 8005066:	4628      	mov	r0, r5
 8005068:	47b8      	blx	r7
 800506a:	3001      	adds	r0, #1
 800506c:	f43f aee9 	beq.w	8004e42 <_printf_float+0xba>
 8005070:	f104 031a 	add.w	r3, r4, #26
 8005074:	f04f 0b00 	mov.w	fp, #0
 8005078:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800507c:	9306      	str	r3, [sp, #24]
 800507e:	e015      	b.n	80050ac <_printf_float+0x324>
 8005080:	7fefffff 	.word	0x7fefffff
 8005084:	08007334 	.word	0x08007334
 8005088:	08007330 	.word	0x08007330
 800508c:	0800733c 	.word	0x0800733c
 8005090:	08007338 	.word	0x08007338
 8005094:	08007340 	.word	0x08007340
 8005098:	2301      	movs	r3, #1
 800509a:	9a06      	ldr	r2, [sp, #24]
 800509c:	4631      	mov	r1, r6
 800509e:	4628      	mov	r0, r5
 80050a0:	47b8      	blx	r7
 80050a2:	3001      	adds	r0, #1
 80050a4:	f43f aecd 	beq.w	8004e42 <_printf_float+0xba>
 80050a8:	f10b 0b01 	add.w	fp, fp, #1
 80050ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80050b0:	ebaa 0309 	sub.w	r3, sl, r9
 80050b4:	455b      	cmp	r3, fp
 80050b6:	dcef      	bgt.n	8005098 <_printf_float+0x310>
 80050b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050bc:	429a      	cmp	r2, r3
 80050be:	44d0      	add	r8, sl
 80050c0:	db15      	blt.n	80050ee <_printf_float+0x366>
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	07da      	lsls	r2, r3, #31
 80050c6:	d412      	bmi.n	80050ee <_printf_float+0x366>
 80050c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050cc:	eba3 020a 	sub.w	r2, r3, sl
 80050d0:	eba3 0a01 	sub.w	sl, r3, r1
 80050d4:	4592      	cmp	sl, r2
 80050d6:	bfa8      	it	ge
 80050d8:	4692      	movge	sl, r2
 80050da:	f1ba 0f00 	cmp.w	sl, #0
 80050de:	dc0e      	bgt.n	80050fe <_printf_float+0x376>
 80050e0:	f04f 0800 	mov.w	r8, #0
 80050e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80050e8:	f104 091a 	add.w	r9, r4, #26
 80050ec:	e019      	b.n	8005122 <_printf_float+0x39a>
 80050ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050f2:	4631      	mov	r1, r6
 80050f4:	4628      	mov	r0, r5
 80050f6:	47b8      	blx	r7
 80050f8:	3001      	adds	r0, #1
 80050fa:	d1e5      	bne.n	80050c8 <_printf_float+0x340>
 80050fc:	e6a1      	b.n	8004e42 <_printf_float+0xba>
 80050fe:	4653      	mov	r3, sl
 8005100:	4642      	mov	r2, r8
 8005102:	4631      	mov	r1, r6
 8005104:	4628      	mov	r0, r5
 8005106:	47b8      	blx	r7
 8005108:	3001      	adds	r0, #1
 800510a:	d1e9      	bne.n	80050e0 <_printf_float+0x358>
 800510c:	e699      	b.n	8004e42 <_printf_float+0xba>
 800510e:	2301      	movs	r3, #1
 8005110:	464a      	mov	r2, r9
 8005112:	4631      	mov	r1, r6
 8005114:	4628      	mov	r0, r5
 8005116:	47b8      	blx	r7
 8005118:	3001      	adds	r0, #1
 800511a:	f43f ae92 	beq.w	8004e42 <_printf_float+0xba>
 800511e:	f108 0801 	add.w	r8, r8, #1
 8005122:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005126:	1a9b      	subs	r3, r3, r2
 8005128:	eba3 030a 	sub.w	r3, r3, sl
 800512c:	4543      	cmp	r3, r8
 800512e:	dcee      	bgt.n	800510e <_printf_float+0x386>
 8005130:	e74a      	b.n	8004fc8 <_printf_float+0x240>
 8005132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005134:	2a01      	cmp	r2, #1
 8005136:	dc01      	bgt.n	800513c <_printf_float+0x3b4>
 8005138:	07db      	lsls	r3, r3, #31
 800513a:	d53a      	bpl.n	80051b2 <_printf_float+0x42a>
 800513c:	2301      	movs	r3, #1
 800513e:	4642      	mov	r2, r8
 8005140:	4631      	mov	r1, r6
 8005142:	4628      	mov	r0, r5
 8005144:	47b8      	blx	r7
 8005146:	3001      	adds	r0, #1
 8005148:	f43f ae7b 	beq.w	8004e42 <_printf_float+0xba>
 800514c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005150:	4631      	mov	r1, r6
 8005152:	4628      	mov	r0, r5
 8005154:	47b8      	blx	r7
 8005156:	3001      	adds	r0, #1
 8005158:	f108 0801 	add.w	r8, r8, #1
 800515c:	f43f ae71 	beq.w	8004e42 <_printf_float+0xba>
 8005160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005162:	2200      	movs	r2, #0
 8005164:	f103 3aff 	add.w	sl, r3, #4294967295
 8005168:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800516c:	2300      	movs	r3, #0
 800516e:	f7fb fcab 	bl	8000ac8 <__aeabi_dcmpeq>
 8005172:	b9c8      	cbnz	r0, 80051a8 <_printf_float+0x420>
 8005174:	4653      	mov	r3, sl
 8005176:	4642      	mov	r2, r8
 8005178:	4631      	mov	r1, r6
 800517a:	4628      	mov	r0, r5
 800517c:	47b8      	blx	r7
 800517e:	3001      	adds	r0, #1
 8005180:	d10e      	bne.n	80051a0 <_printf_float+0x418>
 8005182:	e65e      	b.n	8004e42 <_printf_float+0xba>
 8005184:	2301      	movs	r3, #1
 8005186:	4652      	mov	r2, sl
 8005188:	4631      	mov	r1, r6
 800518a:	4628      	mov	r0, r5
 800518c:	47b8      	blx	r7
 800518e:	3001      	adds	r0, #1
 8005190:	f43f ae57 	beq.w	8004e42 <_printf_float+0xba>
 8005194:	f108 0801 	add.w	r8, r8, #1
 8005198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800519a:	3b01      	subs	r3, #1
 800519c:	4543      	cmp	r3, r8
 800519e:	dcf1      	bgt.n	8005184 <_printf_float+0x3fc>
 80051a0:	464b      	mov	r3, r9
 80051a2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80051a6:	e6de      	b.n	8004f66 <_printf_float+0x1de>
 80051a8:	f04f 0800 	mov.w	r8, #0
 80051ac:	f104 0a1a 	add.w	sl, r4, #26
 80051b0:	e7f2      	b.n	8005198 <_printf_float+0x410>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e7df      	b.n	8005176 <_printf_float+0x3ee>
 80051b6:	2301      	movs	r3, #1
 80051b8:	464a      	mov	r2, r9
 80051ba:	4631      	mov	r1, r6
 80051bc:	4628      	mov	r0, r5
 80051be:	47b8      	blx	r7
 80051c0:	3001      	adds	r0, #1
 80051c2:	f43f ae3e 	beq.w	8004e42 <_printf_float+0xba>
 80051c6:	f108 0801 	add.w	r8, r8, #1
 80051ca:	68e3      	ldr	r3, [r4, #12]
 80051cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051ce:	1a9b      	subs	r3, r3, r2
 80051d0:	4543      	cmp	r3, r8
 80051d2:	dcf0      	bgt.n	80051b6 <_printf_float+0x42e>
 80051d4:	e6fc      	b.n	8004fd0 <_printf_float+0x248>
 80051d6:	f04f 0800 	mov.w	r8, #0
 80051da:	f104 0919 	add.w	r9, r4, #25
 80051de:	e7f4      	b.n	80051ca <_printf_float+0x442>
 80051e0:	2900      	cmp	r1, #0
 80051e2:	f43f ae8b 	beq.w	8004efc <_printf_float+0x174>
 80051e6:	2300      	movs	r3, #0
 80051e8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80051ec:	ab09      	add	r3, sp, #36	; 0x24
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	ec49 8b10 	vmov	d0, r8, r9
 80051f4:	6022      	str	r2, [r4, #0]
 80051f6:	f8cd a004 	str.w	sl, [sp, #4]
 80051fa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80051fe:	4628      	mov	r0, r5
 8005200:	f7ff fd2e 	bl	8004c60 <__cvt>
 8005204:	4680      	mov	r8, r0
 8005206:	e648      	b.n	8004e9a <_printf_float+0x112>

08005208 <_printf_common>:
 8005208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800520c:	4691      	mov	r9, r2
 800520e:	461f      	mov	r7, r3
 8005210:	688a      	ldr	r2, [r1, #8]
 8005212:	690b      	ldr	r3, [r1, #16]
 8005214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005218:	4293      	cmp	r3, r2
 800521a:	bfb8      	it	lt
 800521c:	4613      	movlt	r3, r2
 800521e:	f8c9 3000 	str.w	r3, [r9]
 8005222:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005226:	4606      	mov	r6, r0
 8005228:	460c      	mov	r4, r1
 800522a:	b112      	cbz	r2, 8005232 <_printf_common+0x2a>
 800522c:	3301      	adds	r3, #1
 800522e:	f8c9 3000 	str.w	r3, [r9]
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	0699      	lsls	r1, r3, #26
 8005236:	bf42      	ittt	mi
 8005238:	f8d9 3000 	ldrmi.w	r3, [r9]
 800523c:	3302      	addmi	r3, #2
 800523e:	f8c9 3000 	strmi.w	r3, [r9]
 8005242:	6825      	ldr	r5, [r4, #0]
 8005244:	f015 0506 	ands.w	r5, r5, #6
 8005248:	d107      	bne.n	800525a <_printf_common+0x52>
 800524a:	f104 0a19 	add.w	sl, r4, #25
 800524e:	68e3      	ldr	r3, [r4, #12]
 8005250:	f8d9 2000 	ldr.w	r2, [r9]
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	42ab      	cmp	r3, r5
 8005258:	dc28      	bgt.n	80052ac <_printf_common+0xa4>
 800525a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800525e:	6822      	ldr	r2, [r4, #0]
 8005260:	3300      	adds	r3, #0
 8005262:	bf18      	it	ne
 8005264:	2301      	movne	r3, #1
 8005266:	0692      	lsls	r2, r2, #26
 8005268:	d42d      	bmi.n	80052c6 <_printf_common+0xbe>
 800526a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800526e:	4639      	mov	r1, r7
 8005270:	4630      	mov	r0, r6
 8005272:	47c0      	blx	r8
 8005274:	3001      	adds	r0, #1
 8005276:	d020      	beq.n	80052ba <_printf_common+0xb2>
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	68e5      	ldr	r5, [r4, #12]
 800527c:	f8d9 2000 	ldr.w	r2, [r9]
 8005280:	f003 0306 	and.w	r3, r3, #6
 8005284:	2b04      	cmp	r3, #4
 8005286:	bf08      	it	eq
 8005288:	1aad      	subeq	r5, r5, r2
 800528a:	68a3      	ldr	r3, [r4, #8]
 800528c:	6922      	ldr	r2, [r4, #16]
 800528e:	bf0c      	ite	eq
 8005290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005294:	2500      	movne	r5, #0
 8005296:	4293      	cmp	r3, r2
 8005298:	bfc4      	itt	gt
 800529a:	1a9b      	subgt	r3, r3, r2
 800529c:	18ed      	addgt	r5, r5, r3
 800529e:	f04f 0900 	mov.w	r9, #0
 80052a2:	341a      	adds	r4, #26
 80052a4:	454d      	cmp	r5, r9
 80052a6:	d11a      	bne.n	80052de <_printf_common+0xd6>
 80052a8:	2000      	movs	r0, #0
 80052aa:	e008      	b.n	80052be <_printf_common+0xb6>
 80052ac:	2301      	movs	r3, #1
 80052ae:	4652      	mov	r2, sl
 80052b0:	4639      	mov	r1, r7
 80052b2:	4630      	mov	r0, r6
 80052b4:	47c0      	blx	r8
 80052b6:	3001      	adds	r0, #1
 80052b8:	d103      	bne.n	80052c2 <_printf_common+0xba>
 80052ba:	f04f 30ff 	mov.w	r0, #4294967295
 80052be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052c2:	3501      	adds	r5, #1
 80052c4:	e7c3      	b.n	800524e <_printf_common+0x46>
 80052c6:	18e1      	adds	r1, r4, r3
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	2030      	movs	r0, #48	; 0x30
 80052cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052d0:	4422      	add	r2, r4
 80052d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052da:	3302      	adds	r3, #2
 80052dc:	e7c5      	b.n	800526a <_printf_common+0x62>
 80052de:	2301      	movs	r3, #1
 80052e0:	4622      	mov	r2, r4
 80052e2:	4639      	mov	r1, r7
 80052e4:	4630      	mov	r0, r6
 80052e6:	47c0      	blx	r8
 80052e8:	3001      	adds	r0, #1
 80052ea:	d0e6      	beq.n	80052ba <_printf_common+0xb2>
 80052ec:	f109 0901 	add.w	r9, r9, #1
 80052f0:	e7d8      	b.n	80052a4 <_printf_common+0x9c>
	...

080052f4 <_printf_i>:
 80052f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80052fc:	460c      	mov	r4, r1
 80052fe:	7e09      	ldrb	r1, [r1, #24]
 8005300:	b085      	sub	sp, #20
 8005302:	296e      	cmp	r1, #110	; 0x6e
 8005304:	4617      	mov	r7, r2
 8005306:	4606      	mov	r6, r0
 8005308:	4698      	mov	r8, r3
 800530a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800530c:	f000 80b3 	beq.w	8005476 <_printf_i+0x182>
 8005310:	d822      	bhi.n	8005358 <_printf_i+0x64>
 8005312:	2963      	cmp	r1, #99	; 0x63
 8005314:	d036      	beq.n	8005384 <_printf_i+0x90>
 8005316:	d80a      	bhi.n	800532e <_printf_i+0x3a>
 8005318:	2900      	cmp	r1, #0
 800531a:	f000 80b9 	beq.w	8005490 <_printf_i+0x19c>
 800531e:	2958      	cmp	r1, #88	; 0x58
 8005320:	f000 8083 	beq.w	800542a <_printf_i+0x136>
 8005324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005328:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800532c:	e032      	b.n	8005394 <_printf_i+0xa0>
 800532e:	2964      	cmp	r1, #100	; 0x64
 8005330:	d001      	beq.n	8005336 <_printf_i+0x42>
 8005332:	2969      	cmp	r1, #105	; 0x69
 8005334:	d1f6      	bne.n	8005324 <_printf_i+0x30>
 8005336:	6820      	ldr	r0, [r4, #0]
 8005338:	6813      	ldr	r3, [r2, #0]
 800533a:	0605      	lsls	r5, r0, #24
 800533c:	f103 0104 	add.w	r1, r3, #4
 8005340:	d52a      	bpl.n	8005398 <_printf_i+0xa4>
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6011      	str	r1, [r2, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	da03      	bge.n	8005352 <_printf_i+0x5e>
 800534a:	222d      	movs	r2, #45	; 0x2d
 800534c:	425b      	negs	r3, r3
 800534e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005352:	486f      	ldr	r0, [pc, #444]	; (8005510 <_printf_i+0x21c>)
 8005354:	220a      	movs	r2, #10
 8005356:	e039      	b.n	80053cc <_printf_i+0xd8>
 8005358:	2973      	cmp	r1, #115	; 0x73
 800535a:	f000 809d 	beq.w	8005498 <_printf_i+0x1a4>
 800535e:	d808      	bhi.n	8005372 <_printf_i+0x7e>
 8005360:	296f      	cmp	r1, #111	; 0x6f
 8005362:	d020      	beq.n	80053a6 <_printf_i+0xb2>
 8005364:	2970      	cmp	r1, #112	; 0x70
 8005366:	d1dd      	bne.n	8005324 <_printf_i+0x30>
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	f043 0320 	orr.w	r3, r3, #32
 800536e:	6023      	str	r3, [r4, #0]
 8005370:	e003      	b.n	800537a <_printf_i+0x86>
 8005372:	2975      	cmp	r1, #117	; 0x75
 8005374:	d017      	beq.n	80053a6 <_printf_i+0xb2>
 8005376:	2978      	cmp	r1, #120	; 0x78
 8005378:	d1d4      	bne.n	8005324 <_printf_i+0x30>
 800537a:	2378      	movs	r3, #120	; 0x78
 800537c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005380:	4864      	ldr	r0, [pc, #400]	; (8005514 <_printf_i+0x220>)
 8005382:	e055      	b.n	8005430 <_printf_i+0x13c>
 8005384:	6813      	ldr	r3, [r2, #0]
 8005386:	1d19      	adds	r1, r3, #4
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6011      	str	r1, [r2, #0]
 800538c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005394:	2301      	movs	r3, #1
 8005396:	e08c      	b.n	80054b2 <_printf_i+0x1be>
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6011      	str	r1, [r2, #0]
 800539c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053a0:	bf18      	it	ne
 80053a2:	b21b      	sxthne	r3, r3
 80053a4:	e7cf      	b.n	8005346 <_printf_i+0x52>
 80053a6:	6813      	ldr	r3, [r2, #0]
 80053a8:	6825      	ldr	r5, [r4, #0]
 80053aa:	1d18      	adds	r0, r3, #4
 80053ac:	6010      	str	r0, [r2, #0]
 80053ae:	0628      	lsls	r0, r5, #24
 80053b0:	d501      	bpl.n	80053b6 <_printf_i+0xc2>
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	e002      	b.n	80053bc <_printf_i+0xc8>
 80053b6:	0668      	lsls	r0, r5, #25
 80053b8:	d5fb      	bpl.n	80053b2 <_printf_i+0xbe>
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	4854      	ldr	r0, [pc, #336]	; (8005510 <_printf_i+0x21c>)
 80053be:	296f      	cmp	r1, #111	; 0x6f
 80053c0:	bf14      	ite	ne
 80053c2:	220a      	movne	r2, #10
 80053c4:	2208      	moveq	r2, #8
 80053c6:	2100      	movs	r1, #0
 80053c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053cc:	6865      	ldr	r5, [r4, #4]
 80053ce:	60a5      	str	r5, [r4, #8]
 80053d0:	2d00      	cmp	r5, #0
 80053d2:	f2c0 8095 	blt.w	8005500 <_printf_i+0x20c>
 80053d6:	6821      	ldr	r1, [r4, #0]
 80053d8:	f021 0104 	bic.w	r1, r1, #4
 80053dc:	6021      	str	r1, [r4, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d13d      	bne.n	800545e <_printf_i+0x16a>
 80053e2:	2d00      	cmp	r5, #0
 80053e4:	f040 808e 	bne.w	8005504 <_printf_i+0x210>
 80053e8:	4665      	mov	r5, ip
 80053ea:	2a08      	cmp	r2, #8
 80053ec:	d10b      	bne.n	8005406 <_printf_i+0x112>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	07db      	lsls	r3, r3, #31
 80053f2:	d508      	bpl.n	8005406 <_printf_i+0x112>
 80053f4:	6923      	ldr	r3, [r4, #16]
 80053f6:	6862      	ldr	r2, [r4, #4]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	bfde      	ittt	le
 80053fc:	2330      	movle	r3, #48	; 0x30
 80053fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005402:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005406:	ebac 0305 	sub.w	r3, ip, r5
 800540a:	6123      	str	r3, [r4, #16]
 800540c:	f8cd 8000 	str.w	r8, [sp]
 8005410:	463b      	mov	r3, r7
 8005412:	aa03      	add	r2, sp, #12
 8005414:	4621      	mov	r1, r4
 8005416:	4630      	mov	r0, r6
 8005418:	f7ff fef6 	bl	8005208 <_printf_common>
 800541c:	3001      	adds	r0, #1
 800541e:	d14d      	bne.n	80054bc <_printf_i+0x1c8>
 8005420:	f04f 30ff 	mov.w	r0, #4294967295
 8005424:	b005      	add	sp, #20
 8005426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800542a:	4839      	ldr	r0, [pc, #228]	; (8005510 <_printf_i+0x21c>)
 800542c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005430:	6813      	ldr	r3, [r2, #0]
 8005432:	6821      	ldr	r1, [r4, #0]
 8005434:	1d1d      	adds	r5, r3, #4
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6015      	str	r5, [r2, #0]
 800543a:	060a      	lsls	r2, r1, #24
 800543c:	d50b      	bpl.n	8005456 <_printf_i+0x162>
 800543e:	07ca      	lsls	r2, r1, #31
 8005440:	bf44      	itt	mi
 8005442:	f041 0120 	orrmi.w	r1, r1, #32
 8005446:	6021      	strmi	r1, [r4, #0]
 8005448:	b91b      	cbnz	r3, 8005452 <_printf_i+0x15e>
 800544a:	6822      	ldr	r2, [r4, #0]
 800544c:	f022 0220 	bic.w	r2, r2, #32
 8005450:	6022      	str	r2, [r4, #0]
 8005452:	2210      	movs	r2, #16
 8005454:	e7b7      	b.n	80053c6 <_printf_i+0xd2>
 8005456:	064d      	lsls	r5, r1, #25
 8005458:	bf48      	it	mi
 800545a:	b29b      	uxthmi	r3, r3
 800545c:	e7ef      	b.n	800543e <_printf_i+0x14a>
 800545e:	4665      	mov	r5, ip
 8005460:	fbb3 f1f2 	udiv	r1, r3, r2
 8005464:	fb02 3311 	mls	r3, r2, r1, r3
 8005468:	5cc3      	ldrb	r3, [r0, r3]
 800546a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800546e:	460b      	mov	r3, r1
 8005470:	2900      	cmp	r1, #0
 8005472:	d1f5      	bne.n	8005460 <_printf_i+0x16c>
 8005474:	e7b9      	b.n	80053ea <_printf_i+0xf6>
 8005476:	6813      	ldr	r3, [r2, #0]
 8005478:	6825      	ldr	r5, [r4, #0]
 800547a:	6961      	ldr	r1, [r4, #20]
 800547c:	1d18      	adds	r0, r3, #4
 800547e:	6010      	str	r0, [r2, #0]
 8005480:	0628      	lsls	r0, r5, #24
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	d501      	bpl.n	800548a <_printf_i+0x196>
 8005486:	6019      	str	r1, [r3, #0]
 8005488:	e002      	b.n	8005490 <_printf_i+0x19c>
 800548a:	066a      	lsls	r2, r5, #25
 800548c:	d5fb      	bpl.n	8005486 <_printf_i+0x192>
 800548e:	8019      	strh	r1, [r3, #0]
 8005490:	2300      	movs	r3, #0
 8005492:	6123      	str	r3, [r4, #16]
 8005494:	4665      	mov	r5, ip
 8005496:	e7b9      	b.n	800540c <_printf_i+0x118>
 8005498:	6813      	ldr	r3, [r2, #0]
 800549a:	1d19      	adds	r1, r3, #4
 800549c:	6011      	str	r1, [r2, #0]
 800549e:	681d      	ldr	r5, [r3, #0]
 80054a0:	6862      	ldr	r2, [r4, #4]
 80054a2:	2100      	movs	r1, #0
 80054a4:	4628      	mov	r0, r5
 80054a6:	f7fa fe9b 	bl	80001e0 <memchr>
 80054aa:	b108      	cbz	r0, 80054b0 <_printf_i+0x1bc>
 80054ac:	1b40      	subs	r0, r0, r5
 80054ae:	6060      	str	r0, [r4, #4]
 80054b0:	6863      	ldr	r3, [r4, #4]
 80054b2:	6123      	str	r3, [r4, #16]
 80054b4:	2300      	movs	r3, #0
 80054b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ba:	e7a7      	b.n	800540c <_printf_i+0x118>
 80054bc:	6923      	ldr	r3, [r4, #16]
 80054be:	462a      	mov	r2, r5
 80054c0:	4639      	mov	r1, r7
 80054c2:	4630      	mov	r0, r6
 80054c4:	47c0      	blx	r8
 80054c6:	3001      	adds	r0, #1
 80054c8:	d0aa      	beq.n	8005420 <_printf_i+0x12c>
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	079b      	lsls	r3, r3, #30
 80054ce:	d413      	bmi.n	80054f8 <_printf_i+0x204>
 80054d0:	68e0      	ldr	r0, [r4, #12]
 80054d2:	9b03      	ldr	r3, [sp, #12]
 80054d4:	4298      	cmp	r0, r3
 80054d6:	bfb8      	it	lt
 80054d8:	4618      	movlt	r0, r3
 80054da:	e7a3      	b.n	8005424 <_printf_i+0x130>
 80054dc:	2301      	movs	r3, #1
 80054de:	464a      	mov	r2, r9
 80054e0:	4639      	mov	r1, r7
 80054e2:	4630      	mov	r0, r6
 80054e4:	47c0      	blx	r8
 80054e6:	3001      	adds	r0, #1
 80054e8:	d09a      	beq.n	8005420 <_printf_i+0x12c>
 80054ea:	3501      	adds	r5, #1
 80054ec:	68e3      	ldr	r3, [r4, #12]
 80054ee:	9a03      	ldr	r2, [sp, #12]
 80054f0:	1a9b      	subs	r3, r3, r2
 80054f2:	42ab      	cmp	r3, r5
 80054f4:	dcf2      	bgt.n	80054dc <_printf_i+0x1e8>
 80054f6:	e7eb      	b.n	80054d0 <_printf_i+0x1dc>
 80054f8:	2500      	movs	r5, #0
 80054fa:	f104 0919 	add.w	r9, r4, #25
 80054fe:	e7f5      	b.n	80054ec <_printf_i+0x1f8>
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1ac      	bne.n	800545e <_printf_i+0x16a>
 8005504:	7803      	ldrb	r3, [r0, #0]
 8005506:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800550a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800550e:	e76c      	b.n	80053ea <_printf_i+0xf6>
 8005510:	08007342 	.word	0x08007342
 8005514:	08007353 	.word	0x08007353

08005518 <iprintf>:
 8005518:	b40f      	push	{r0, r1, r2, r3}
 800551a:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <iprintf+0x2c>)
 800551c:	b513      	push	{r0, r1, r4, lr}
 800551e:	681c      	ldr	r4, [r3, #0]
 8005520:	b124      	cbz	r4, 800552c <iprintf+0x14>
 8005522:	69a3      	ldr	r3, [r4, #24]
 8005524:	b913      	cbnz	r3, 800552c <iprintf+0x14>
 8005526:	4620      	mov	r0, r4
 8005528:	f000 fe92 	bl	8006250 <__sinit>
 800552c:	ab05      	add	r3, sp, #20
 800552e:	9a04      	ldr	r2, [sp, #16]
 8005530:	68a1      	ldr	r1, [r4, #8]
 8005532:	9301      	str	r3, [sp, #4]
 8005534:	4620      	mov	r0, r4
 8005536:	f001 faf1 	bl	8006b1c <_vfiprintf_r>
 800553a:	b002      	add	sp, #8
 800553c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005540:	b004      	add	sp, #16
 8005542:	4770      	bx	lr
 8005544:	2000000c 	.word	0x2000000c

08005548 <quorem>:
 8005548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800554c:	6903      	ldr	r3, [r0, #16]
 800554e:	690c      	ldr	r4, [r1, #16]
 8005550:	42a3      	cmp	r3, r4
 8005552:	4680      	mov	r8, r0
 8005554:	f2c0 8082 	blt.w	800565c <quorem+0x114>
 8005558:	3c01      	subs	r4, #1
 800555a:	f101 0714 	add.w	r7, r1, #20
 800555e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005562:	f100 0614 	add.w	r6, r0, #20
 8005566:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800556a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800556e:	eb06 030c 	add.w	r3, r6, ip
 8005572:	3501      	adds	r5, #1
 8005574:	eb07 090c 	add.w	r9, r7, ip
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	fbb0 f5f5 	udiv	r5, r0, r5
 800557e:	b395      	cbz	r5, 80055e6 <quorem+0x9e>
 8005580:	f04f 0a00 	mov.w	sl, #0
 8005584:	4638      	mov	r0, r7
 8005586:	46b6      	mov	lr, r6
 8005588:	46d3      	mov	fp, sl
 800558a:	f850 2b04 	ldr.w	r2, [r0], #4
 800558e:	b293      	uxth	r3, r2
 8005590:	fb05 a303 	mla	r3, r5, r3, sl
 8005594:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005598:	b29b      	uxth	r3, r3
 800559a:	ebab 0303 	sub.w	r3, fp, r3
 800559e:	0c12      	lsrs	r2, r2, #16
 80055a0:	f8de b000 	ldr.w	fp, [lr]
 80055a4:	fb05 a202 	mla	r2, r5, r2, sl
 80055a8:	fa13 f38b 	uxtah	r3, r3, fp
 80055ac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80055b0:	fa1f fb82 	uxth.w	fp, r2
 80055b4:	f8de 2000 	ldr.w	r2, [lr]
 80055b8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80055bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055c6:	4581      	cmp	r9, r0
 80055c8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80055cc:	f84e 3b04 	str.w	r3, [lr], #4
 80055d0:	d2db      	bcs.n	800558a <quorem+0x42>
 80055d2:	f856 300c 	ldr.w	r3, [r6, ip]
 80055d6:	b933      	cbnz	r3, 80055e6 <quorem+0x9e>
 80055d8:	9b01      	ldr	r3, [sp, #4]
 80055da:	3b04      	subs	r3, #4
 80055dc:	429e      	cmp	r6, r3
 80055de:	461a      	mov	r2, r3
 80055e0:	d330      	bcc.n	8005644 <quorem+0xfc>
 80055e2:	f8c8 4010 	str.w	r4, [r8, #16]
 80055e6:	4640      	mov	r0, r8
 80055e8:	f001 f8f2 	bl	80067d0 <__mcmp>
 80055ec:	2800      	cmp	r0, #0
 80055ee:	db25      	blt.n	800563c <quorem+0xf4>
 80055f0:	3501      	adds	r5, #1
 80055f2:	4630      	mov	r0, r6
 80055f4:	f04f 0c00 	mov.w	ip, #0
 80055f8:	f857 2b04 	ldr.w	r2, [r7], #4
 80055fc:	f8d0 e000 	ldr.w	lr, [r0]
 8005600:	b293      	uxth	r3, r2
 8005602:	ebac 0303 	sub.w	r3, ip, r3
 8005606:	0c12      	lsrs	r2, r2, #16
 8005608:	fa13 f38e 	uxtah	r3, r3, lr
 800560c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005610:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005614:	b29b      	uxth	r3, r3
 8005616:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800561a:	45b9      	cmp	r9, r7
 800561c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005620:	f840 3b04 	str.w	r3, [r0], #4
 8005624:	d2e8      	bcs.n	80055f8 <quorem+0xb0>
 8005626:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800562a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800562e:	b92a      	cbnz	r2, 800563c <quorem+0xf4>
 8005630:	3b04      	subs	r3, #4
 8005632:	429e      	cmp	r6, r3
 8005634:	461a      	mov	r2, r3
 8005636:	d30b      	bcc.n	8005650 <quorem+0x108>
 8005638:	f8c8 4010 	str.w	r4, [r8, #16]
 800563c:	4628      	mov	r0, r5
 800563e:	b003      	add	sp, #12
 8005640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005644:	6812      	ldr	r2, [r2, #0]
 8005646:	3b04      	subs	r3, #4
 8005648:	2a00      	cmp	r2, #0
 800564a:	d1ca      	bne.n	80055e2 <quorem+0x9a>
 800564c:	3c01      	subs	r4, #1
 800564e:	e7c5      	b.n	80055dc <quorem+0x94>
 8005650:	6812      	ldr	r2, [r2, #0]
 8005652:	3b04      	subs	r3, #4
 8005654:	2a00      	cmp	r2, #0
 8005656:	d1ef      	bne.n	8005638 <quorem+0xf0>
 8005658:	3c01      	subs	r4, #1
 800565a:	e7ea      	b.n	8005632 <quorem+0xea>
 800565c:	2000      	movs	r0, #0
 800565e:	e7ee      	b.n	800563e <quorem+0xf6>

08005660 <_dtoa_r>:
 8005660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005664:	ec57 6b10 	vmov	r6, r7, d0
 8005668:	b097      	sub	sp, #92	; 0x5c
 800566a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800566c:	9106      	str	r1, [sp, #24]
 800566e:	4604      	mov	r4, r0
 8005670:	920b      	str	r2, [sp, #44]	; 0x2c
 8005672:	9312      	str	r3, [sp, #72]	; 0x48
 8005674:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005678:	e9cd 6700 	strd	r6, r7, [sp]
 800567c:	b93d      	cbnz	r5, 800568e <_dtoa_r+0x2e>
 800567e:	2010      	movs	r0, #16
 8005680:	f000 fe7e 	bl	8006380 <malloc>
 8005684:	6260      	str	r0, [r4, #36]	; 0x24
 8005686:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800568a:	6005      	str	r5, [r0, #0]
 800568c:	60c5      	str	r5, [r0, #12]
 800568e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005690:	6819      	ldr	r1, [r3, #0]
 8005692:	b151      	cbz	r1, 80056aa <_dtoa_r+0x4a>
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	604a      	str	r2, [r1, #4]
 8005698:	2301      	movs	r3, #1
 800569a:	4093      	lsls	r3, r2
 800569c:	608b      	str	r3, [r1, #8]
 800569e:	4620      	mov	r0, r4
 80056a0:	f000 feb5 	bl	800640e <_Bfree>
 80056a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	1e3b      	subs	r3, r7, #0
 80056ac:	bfbb      	ittet	lt
 80056ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80056b2:	9301      	strlt	r3, [sp, #4]
 80056b4:	2300      	movge	r3, #0
 80056b6:	2201      	movlt	r2, #1
 80056b8:	bfac      	ite	ge
 80056ba:	f8c8 3000 	strge.w	r3, [r8]
 80056be:	f8c8 2000 	strlt.w	r2, [r8]
 80056c2:	4baf      	ldr	r3, [pc, #700]	; (8005980 <_dtoa_r+0x320>)
 80056c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80056c8:	ea33 0308 	bics.w	r3, r3, r8
 80056cc:	d114      	bne.n	80056f8 <_dtoa_r+0x98>
 80056ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80056d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	9b00      	ldr	r3, [sp, #0]
 80056d8:	b923      	cbnz	r3, 80056e4 <_dtoa_r+0x84>
 80056da:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80056de:	2800      	cmp	r0, #0
 80056e0:	f000 8542 	beq.w	8006168 <_dtoa_r+0xb08>
 80056e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056e6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005994 <_dtoa_r+0x334>
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 8544 	beq.w	8006178 <_dtoa_r+0xb18>
 80056f0:	f10b 0303 	add.w	r3, fp, #3
 80056f4:	f000 bd3e 	b.w	8006174 <_dtoa_r+0xb14>
 80056f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80056fc:	2200      	movs	r2, #0
 80056fe:	2300      	movs	r3, #0
 8005700:	4630      	mov	r0, r6
 8005702:	4639      	mov	r1, r7
 8005704:	f7fb f9e0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005708:	4681      	mov	r9, r0
 800570a:	b168      	cbz	r0, 8005728 <_dtoa_r+0xc8>
 800570c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800570e:	2301      	movs	r3, #1
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 8524 	beq.w	8006162 <_dtoa_r+0xb02>
 800571a:	4b9a      	ldr	r3, [pc, #616]	; (8005984 <_dtoa_r+0x324>)
 800571c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800571e:	f103 3bff 	add.w	fp, r3, #4294967295
 8005722:	6013      	str	r3, [r2, #0]
 8005724:	f000 bd28 	b.w	8006178 <_dtoa_r+0xb18>
 8005728:	aa14      	add	r2, sp, #80	; 0x50
 800572a:	a915      	add	r1, sp, #84	; 0x54
 800572c:	ec47 6b10 	vmov	d0, r6, r7
 8005730:	4620      	mov	r0, r4
 8005732:	f001 f8c4 	bl	80068be <__d2b>
 8005736:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800573a:	9004      	str	r0, [sp, #16]
 800573c:	2d00      	cmp	r5, #0
 800573e:	d07c      	beq.n	800583a <_dtoa_r+0x1da>
 8005740:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005744:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005748:	46b2      	mov	sl, r6
 800574a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800574e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005752:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005756:	2200      	movs	r2, #0
 8005758:	4b8b      	ldr	r3, [pc, #556]	; (8005988 <_dtoa_r+0x328>)
 800575a:	4650      	mov	r0, sl
 800575c:	4659      	mov	r1, fp
 800575e:	f7fa fd93 	bl	8000288 <__aeabi_dsub>
 8005762:	a381      	add	r3, pc, #516	; (adr r3, 8005968 <_dtoa_r+0x308>)
 8005764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005768:	f7fa ff46 	bl	80005f8 <__aeabi_dmul>
 800576c:	a380      	add	r3, pc, #512	; (adr r3, 8005970 <_dtoa_r+0x310>)
 800576e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005772:	f7fa fd8b 	bl	800028c <__adddf3>
 8005776:	4606      	mov	r6, r0
 8005778:	4628      	mov	r0, r5
 800577a:	460f      	mov	r7, r1
 800577c:	f7fa fed2 	bl	8000524 <__aeabi_i2d>
 8005780:	a37d      	add	r3, pc, #500	; (adr r3, 8005978 <_dtoa_r+0x318>)
 8005782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005786:	f7fa ff37 	bl	80005f8 <__aeabi_dmul>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	4630      	mov	r0, r6
 8005790:	4639      	mov	r1, r7
 8005792:	f7fa fd7b 	bl	800028c <__adddf3>
 8005796:	4606      	mov	r6, r0
 8005798:	460f      	mov	r7, r1
 800579a:	f7fb f9dd 	bl	8000b58 <__aeabi_d2iz>
 800579e:	2200      	movs	r2, #0
 80057a0:	4682      	mov	sl, r0
 80057a2:	2300      	movs	r3, #0
 80057a4:	4630      	mov	r0, r6
 80057a6:	4639      	mov	r1, r7
 80057a8:	f7fb f998 	bl	8000adc <__aeabi_dcmplt>
 80057ac:	b148      	cbz	r0, 80057c2 <_dtoa_r+0x162>
 80057ae:	4650      	mov	r0, sl
 80057b0:	f7fa feb8 	bl	8000524 <__aeabi_i2d>
 80057b4:	4632      	mov	r2, r6
 80057b6:	463b      	mov	r3, r7
 80057b8:	f7fb f986 	bl	8000ac8 <__aeabi_dcmpeq>
 80057bc:	b908      	cbnz	r0, 80057c2 <_dtoa_r+0x162>
 80057be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057c2:	f1ba 0f16 	cmp.w	sl, #22
 80057c6:	d859      	bhi.n	800587c <_dtoa_r+0x21c>
 80057c8:	4970      	ldr	r1, [pc, #448]	; (800598c <_dtoa_r+0x32c>)
 80057ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80057ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057d6:	f7fb f99f 	bl	8000b18 <__aeabi_dcmpgt>
 80057da:	2800      	cmp	r0, #0
 80057dc:	d050      	beq.n	8005880 <_dtoa_r+0x220>
 80057de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057e2:	2300      	movs	r3, #0
 80057e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80057e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80057e8:	1b5d      	subs	r5, r3, r5
 80057ea:	f1b5 0801 	subs.w	r8, r5, #1
 80057ee:	bf49      	itett	mi
 80057f0:	f1c5 0301 	rsbmi	r3, r5, #1
 80057f4:	2300      	movpl	r3, #0
 80057f6:	9305      	strmi	r3, [sp, #20]
 80057f8:	f04f 0800 	movmi.w	r8, #0
 80057fc:	bf58      	it	pl
 80057fe:	9305      	strpl	r3, [sp, #20]
 8005800:	f1ba 0f00 	cmp.w	sl, #0
 8005804:	db3e      	blt.n	8005884 <_dtoa_r+0x224>
 8005806:	2300      	movs	r3, #0
 8005808:	44d0      	add	r8, sl
 800580a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800580e:	9307      	str	r3, [sp, #28]
 8005810:	9b06      	ldr	r3, [sp, #24]
 8005812:	2b09      	cmp	r3, #9
 8005814:	f200 8090 	bhi.w	8005938 <_dtoa_r+0x2d8>
 8005818:	2b05      	cmp	r3, #5
 800581a:	bfc4      	itt	gt
 800581c:	3b04      	subgt	r3, #4
 800581e:	9306      	strgt	r3, [sp, #24]
 8005820:	9b06      	ldr	r3, [sp, #24]
 8005822:	f1a3 0302 	sub.w	r3, r3, #2
 8005826:	bfcc      	ite	gt
 8005828:	2500      	movgt	r5, #0
 800582a:	2501      	movle	r5, #1
 800582c:	2b03      	cmp	r3, #3
 800582e:	f200 808f 	bhi.w	8005950 <_dtoa_r+0x2f0>
 8005832:	e8df f003 	tbb	[pc, r3]
 8005836:	7f7d      	.short	0x7f7d
 8005838:	7131      	.short	0x7131
 800583a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800583e:	441d      	add	r5, r3
 8005840:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005844:	2820      	cmp	r0, #32
 8005846:	dd13      	ble.n	8005870 <_dtoa_r+0x210>
 8005848:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800584c:	9b00      	ldr	r3, [sp, #0]
 800584e:	fa08 f800 	lsl.w	r8, r8, r0
 8005852:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005856:	fa23 f000 	lsr.w	r0, r3, r0
 800585a:	ea48 0000 	orr.w	r0, r8, r0
 800585e:	f7fa fe51 	bl	8000504 <__aeabi_ui2d>
 8005862:	2301      	movs	r3, #1
 8005864:	4682      	mov	sl, r0
 8005866:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800586a:	3d01      	subs	r5, #1
 800586c:	9313      	str	r3, [sp, #76]	; 0x4c
 800586e:	e772      	b.n	8005756 <_dtoa_r+0xf6>
 8005870:	9b00      	ldr	r3, [sp, #0]
 8005872:	f1c0 0020 	rsb	r0, r0, #32
 8005876:	fa03 f000 	lsl.w	r0, r3, r0
 800587a:	e7f0      	b.n	800585e <_dtoa_r+0x1fe>
 800587c:	2301      	movs	r3, #1
 800587e:	e7b1      	b.n	80057e4 <_dtoa_r+0x184>
 8005880:	900f      	str	r0, [sp, #60]	; 0x3c
 8005882:	e7b0      	b.n	80057e6 <_dtoa_r+0x186>
 8005884:	9b05      	ldr	r3, [sp, #20]
 8005886:	eba3 030a 	sub.w	r3, r3, sl
 800588a:	9305      	str	r3, [sp, #20]
 800588c:	f1ca 0300 	rsb	r3, sl, #0
 8005890:	9307      	str	r3, [sp, #28]
 8005892:	2300      	movs	r3, #0
 8005894:	930e      	str	r3, [sp, #56]	; 0x38
 8005896:	e7bb      	b.n	8005810 <_dtoa_r+0x1b0>
 8005898:	2301      	movs	r3, #1
 800589a:	930a      	str	r3, [sp, #40]	; 0x28
 800589c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800589e:	2b00      	cmp	r3, #0
 80058a0:	dd59      	ble.n	8005956 <_dtoa_r+0x2f6>
 80058a2:	9302      	str	r3, [sp, #8]
 80058a4:	4699      	mov	r9, r3
 80058a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80058a8:	2200      	movs	r2, #0
 80058aa:	6072      	str	r2, [r6, #4]
 80058ac:	2204      	movs	r2, #4
 80058ae:	f102 0014 	add.w	r0, r2, #20
 80058b2:	4298      	cmp	r0, r3
 80058b4:	6871      	ldr	r1, [r6, #4]
 80058b6:	d953      	bls.n	8005960 <_dtoa_r+0x300>
 80058b8:	4620      	mov	r0, r4
 80058ba:	f000 fd74 	bl	80063a6 <_Balloc>
 80058be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058c0:	6030      	str	r0, [r6, #0]
 80058c2:	f1b9 0f0e 	cmp.w	r9, #14
 80058c6:	f8d3 b000 	ldr.w	fp, [r3]
 80058ca:	f200 80e6 	bhi.w	8005a9a <_dtoa_r+0x43a>
 80058ce:	2d00      	cmp	r5, #0
 80058d0:	f000 80e3 	beq.w	8005a9a <_dtoa_r+0x43a>
 80058d4:	ed9d 7b00 	vldr	d7, [sp]
 80058d8:	f1ba 0f00 	cmp.w	sl, #0
 80058dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80058e0:	dd74      	ble.n	80059cc <_dtoa_r+0x36c>
 80058e2:	4a2a      	ldr	r2, [pc, #168]	; (800598c <_dtoa_r+0x32c>)
 80058e4:	f00a 030f 	and.w	r3, sl, #15
 80058e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80058ec:	ed93 7b00 	vldr	d7, [r3]
 80058f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80058f4:	06f0      	lsls	r0, r6, #27
 80058f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80058fa:	d565      	bpl.n	80059c8 <_dtoa_r+0x368>
 80058fc:	4b24      	ldr	r3, [pc, #144]	; (8005990 <_dtoa_r+0x330>)
 80058fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005902:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005906:	f7fa ffa1 	bl	800084c <__aeabi_ddiv>
 800590a:	e9cd 0100 	strd	r0, r1, [sp]
 800590e:	f006 060f 	and.w	r6, r6, #15
 8005912:	2503      	movs	r5, #3
 8005914:	4f1e      	ldr	r7, [pc, #120]	; (8005990 <_dtoa_r+0x330>)
 8005916:	e04c      	b.n	80059b2 <_dtoa_r+0x352>
 8005918:	2301      	movs	r3, #1
 800591a:	930a      	str	r3, [sp, #40]	; 0x28
 800591c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800591e:	4453      	add	r3, sl
 8005920:	f103 0901 	add.w	r9, r3, #1
 8005924:	9302      	str	r3, [sp, #8]
 8005926:	464b      	mov	r3, r9
 8005928:	2b01      	cmp	r3, #1
 800592a:	bfb8      	it	lt
 800592c:	2301      	movlt	r3, #1
 800592e:	e7ba      	b.n	80058a6 <_dtoa_r+0x246>
 8005930:	2300      	movs	r3, #0
 8005932:	e7b2      	b.n	800589a <_dtoa_r+0x23a>
 8005934:	2300      	movs	r3, #0
 8005936:	e7f0      	b.n	800591a <_dtoa_r+0x2ba>
 8005938:	2501      	movs	r5, #1
 800593a:	2300      	movs	r3, #0
 800593c:	9306      	str	r3, [sp, #24]
 800593e:	950a      	str	r5, [sp, #40]	; 0x28
 8005940:	f04f 33ff 	mov.w	r3, #4294967295
 8005944:	9302      	str	r3, [sp, #8]
 8005946:	4699      	mov	r9, r3
 8005948:	2200      	movs	r2, #0
 800594a:	2312      	movs	r3, #18
 800594c:	920b      	str	r2, [sp, #44]	; 0x2c
 800594e:	e7aa      	b.n	80058a6 <_dtoa_r+0x246>
 8005950:	2301      	movs	r3, #1
 8005952:	930a      	str	r3, [sp, #40]	; 0x28
 8005954:	e7f4      	b.n	8005940 <_dtoa_r+0x2e0>
 8005956:	2301      	movs	r3, #1
 8005958:	9302      	str	r3, [sp, #8]
 800595a:	4699      	mov	r9, r3
 800595c:	461a      	mov	r2, r3
 800595e:	e7f5      	b.n	800594c <_dtoa_r+0x2ec>
 8005960:	3101      	adds	r1, #1
 8005962:	6071      	str	r1, [r6, #4]
 8005964:	0052      	lsls	r2, r2, #1
 8005966:	e7a2      	b.n	80058ae <_dtoa_r+0x24e>
 8005968:	636f4361 	.word	0x636f4361
 800596c:	3fd287a7 	.word	0x3fd287a7
 8005970:	8b60c8b3 	.word	0x8b60c8b3
 8005974:	3fc68a28 	.word	0x3fc68a28
 8005978:	509f79fb 	.word	0x509f79fb
 800597c:	3fd34413 	.word	0x3fd34413
 8005980:	7ff00000 	.word	0x7ff00000
 8005984:	08007341 	.word	0x08007341
 8005988:	3ff80000 	.word	0x3ff80000
 800598c:	08007400 	.word	0x08007400
 8005990:	080073d8 	.word	0x080073d8
 8005994:	0800736d 	.word	0x0800736d
 8005998:	07f1      	lsls	r1, r6, #31
 800599a:	d508      	bpl.n	80059ae <_dtoa_r+0x34e>
 800599c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80059a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059a4:	f7fa fe28 	bl	80005f8 <__aeabi_dmul>
 80059a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80059ac:	3501      	adds	r5, #1
 80059ae:	1076      	asrs	r6, r6, #1
 80059b0:	3708      	adds	r7, #8
 80059b2:	2e00      	cmp	r6, #0
 80059b4:	d1f0      	bne.n	8005998 <_dtoa_r+0x338>
 80059b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80059ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059be:	f7fa ff45 	bl	800084c <__aeabi_ddiv>
 80059c2:	e9cd 0100 	strd	r0, r1, [sp]
 80059c6:	e01a      	b.n	80059fe <_dtoa_r+0x39e>
 80059c8:	2502      	movs	r5, #2
 80059ca:	e7a3      	b.n	8005914 <_dtoa_r+0x2b4>
 80059cc:	f000 80a0 	beq.w	8005b10 <_dtoa_r+0x4b0>
 80059d0:	f1ca 0600 	rsb	r6, sl, #0
 80059d4:	4b9f      	ldr	r3, [pc, #636]	; (8005c54 <_dtoa_r+0x5f4>)
 80059d6:	4fa0      	ldr	r7, [pc, #640]	; (8005c58 <_dtoa_r+0x5f8>)
 80059d8:	f006 020f 	and.w	r2, r6, #15
 80059dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059e8:	f7fa fe06 	bl	80005f8 <__aeabi_dmul>
 80059ec:	e9cd 0100 	strd	r0, r1, [sp]
 80059f0:	1136      	asrs	r6, r6, #4
 80059f2:	2300      	movs	r3, #0
 80059f4:	2502      	movs	r5, #2
 80059f6:	2e00      	cmp	r6, #0
 80059f8:	d17f      	bne.n	8005afa <_dtoa_r+0x49a>
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1e1      	bne.n	80059c2 <_dtoa_r+0x362>
 80059fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 8087 	beq.w	8005b14 <_dtoa_r+0x4b4>
 8005a06:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	4b93      	ldr	r3, [pc, #588]	; (8005c5c <_dtoa_r+0x5fc>)
 8005a0e:	4630      	mov	r0, r6
 8005a10:	4639      	mov	r1, r7
 8005a12:	f7fb f863 	bl	8000adc <__aeabi_dcmplt>
 8005a16:	2800      	cmp	r0, #0
 8005a18:	d07c      	beq.n	8005b14 <_dtoa_r+0x4b4>
 8005a1a:	f1b9 0f00 	cmp.w	r9, #0
 8005a1e:	d079      	beq.n	8005b14 <_dtoa_r+0x4b4>
 8005a20:	9b02      	ldr	r3, [sp, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	dd35      	ble.n	8005a92 <_dtoa_r+0x432>
 8005a26:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005a2a:	9308      	str	r3, [sp, #32]
 8005a2c:	4639      	mov	r1, r7
 8005a2e:	2200      	movs	r2, #0
 8005a30:	4b8b      	ldr	r3, [pc, #556]	; (8005c60 <_dtoa_r+0x600>)
 8005a32:	4630      	mov	r0, r6
 8005a34:	f7fa fde0 	bl	80005f8 <__aeabi_dmul>
 8005a38:	e9cd 0100 	strd	r0, r1, [sp]
 8005a3c:	9f02      	ldr	r7, [sp, #8]
 8005a3e:	3501      	adds	r5, #1
 8005a40:	4628      	mov	r0, r5
 8005a42:	f7fa fd6f 	bl	8000524 <__aeabi_i2d>
 8005a46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a4a:	f7fa fdd5 	bl	80005f8 <__aeabi_dmul>
 8005a4e:	2200      	movs	r2, #0
 8005a50:	4b84      	ldr	r3, [pc, #528]	; (8005c64 <_dtoa_r+0x604>)
 8005a52:	f7fa fc1b 	bl	800028c <__adddf3>
 8005a56:	4605      	mov	r5, r0
 8005a58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005a5c:	2f00      	cmp	r7, #0
 8005a5e:	d15d      	bne.n	8005b1c <_dtoa_r+0x4bc>
 8005a60:	2200      	movs	r2, #0
 8005a62:	4b81      	ldr	r3, [pc, #516]	; (8005c68 <_dtoa_r+0x608>)
 8005a64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a68:	f7fa fc0e 	bl	8000288 <__aeabi_dsub>
 8005a6c:	462a      	mov	r2, r5
 8005a6e:	4633      	mov	r3, r6
 8005a70:	e9cd 0100 	strd	r0, r1, [sp]
 8005a74:	f7fb f850 	bl	8000b18 <__aeabi_dcmpgt>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	f040 8288 	bne.w	8005f8e <_dtoa_r+0x92e>
 8005a7e:	462a      	mov	r2, r5
 8005a80:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005a84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a88:	f7fb f828 	bl	8000adc <__aeabi_dcmplt>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	f040 827c 	bne.w	8005f8a <_dtoa_r+0x92a>
 8005a92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a96:	e9cd 2300 	strd	r2, r3, [sp]
 8005a9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f2c0 8150 	blt.w	8005d42 <_dtoa_r+0x6e2>
 8005aa2:	f1ba 0f0e 	cmp.w	sl, #14
 8005aa6:	f300 814c 	bgt.w	8005d42 <_dtoa_r+0x6e2>
 8005aaa:	4b6a      	ldr	r3, [pc, #424]	; (8005c54 <_dtoa_r+0x5f4>)
 8005aac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005ab0:	ed93 7b00 	vldr	d7, [r3]
 8005ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005abc:	f280 80d8 	bge.w	8005c70 <_dtoa_r+0x610>
 8005ac0:	f1b9 0f00 	cmp.w	r9, #0
 8005ac4:	f300 80d4 	bgt.w	8005c70 <_dtoa_r+0x610>
 8005ac8:	f040 825e 	bne.w	8005f88 <_dtoa_r+0x928>
 8005acc:	2200      	movs	r2, #0
 8005ace:	4b66      	ldr	r3, [pc, #408]	; (8005c68 <_dtoa_r+0x608>)
 8005ad0:	ec51 0b17 	vmov	r0, r1, d7
 8005ad4:	f7fa fd90 	bl	80005f8 <__aeabi_dmul>
 8005ad8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005adc:	f7fb f812 	bl	8000b04 <__aeabi_dcmpge>
 8005ae0:	464f      	mov	r7, r9
 8005ae2:	464e      	mov	r6, r9
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	f040 8234 	bne.w	8005f52 <_dtoa_r+0x8f2>
 8005aea:	2331      	movs	r3, #49	; 0x31
 8005aec:	f10b 0501 	add.w	r5, fp, #1
 8005af0:	f88b 3000 	strb.w	r3, [fp]
 8005af4:	f10a 0a01 	add.w	sl, sl, #1
 8005af8:	e22f      	b.n	8005f5a <_dtoa_r+0x8fa>
 8005afa:	07f2      	lsls	r2, r6, #31
 8005afc:	d505      	bpl.n	8005b0a <_dtoa_r+0x4aa>
 8005afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b02:	f7fa fd79 	bl	80005f8 <__aeabi_dmul>
 8005b06:	3501      	adds	r5, #1
 8005b08:	2301      	movs	r3, #1
 8005b0a:	1076      	asrs	r6, r6, #1
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	e772      	b.n	80059f6 <_dtoa_r+0x396>
 8005b10:	2502      	movs	r5, #2
 8005b12:	e774      	b.n	80059fe <_dtoa_r+0x39e>
 8005b14:	f8cd a020 	str.w	sl, [sp, #32]
 8005b18:	464f      	mov	r7, r9
 8005b1a:	e791      	b.n	8005a40 <_dtoa_r+0x3e0>
 8005b1c:	4b4d      	ldr	r3, [pc, #308]	; (8005c54 <_dtoa_r+0x5f4>)
 8005b1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b22:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d047      	beq.n	8005bbc <_dtoa_r+0x55c>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	2000      	movs	r0, #0
 8005b32:	494e      	ldr	r1, [pc, #312]	; (8005c6c <_dtoa_r+0x60c>)
 8005b34:	f7fa fe8a 	bl	800084c <__aeabi_ddiv>
 8005b38:	462a      	mov	r2, r5
 8005b3a:	4633      	mov	r3, r6
 8005b3c:	f7fa fba4 	bl	8000288 <__aeabi_dsub>
 8005b40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005b44:	465d      	mov	r5, fp
 8005b46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b4a:	f7fb f805 	bl	8000b58 <__aeabi_d2iz>
 8005b4e:	4606      	mov	r6, r0
 8005b50:	f7fa fce8 	bl	8000524 <__aeabi_i2d>
 8005b54:	4602      	mov	r2, r0
 8005b56:	460b      	mov	r3, r1
 8005b58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b5c:	f7fa fb94 	bl	8000288 <__aeabi_dsub>
 8005b60:	3630      	adds	r6, #48	; 0x30
 8005b62:	f805 6b01 	strb.w	r6, [r5], #1
 8005b66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005b6a:	e9cd 0100 	strd	r0, r1, [sp]
 8005b6e:	f7fa ffb5 	bl	8000adc <__aeabi_dcmplt>
 8005b72:	2800      	cmp	r0, #0
 8005b74:	d163      	bne.n	8005c3e <_dtoa_r+0x5de>
 8005b76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	4937      	ldr	r1, [pc, #220]	; (8005c5c <_dtoa_r+0x5fc>)
 8005b7e:	f7fa fb83 	bl	8000288 <__aeabi_dsub>
 8005b82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005b86:	f7fa ffa9 	bl	8000adc <__aeabi_dcmplt>
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	f040 80b7 	bne.w	8005cfe <_dtoa_r+0x69e>
 8005b90:	eba5 030b 	sub.w	r3, r5, fp
 8005b94:	429f      	cmp	r7, r3
 8005b96:	f77f af7c 	ble.w	8005a92 <_dtoa_r+0x432>
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	4b30      	ldr	r3, [pc, #192]	; (8005c60 <_dtoa_r+0x600>)
 8005b9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ba2:	f7fa fd29 	bl	80005f8 <__aeabi_dmul>
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005bac:	4b2c      	ldr	r3, [pc, #176]	; (8005c60 <_dtoa_r+0x600>)
 8005bae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bb2:	f7fa fd21 	bl	80005f8 <__aeabi_dmul>
 8005bb6:	e9cd 0100 	strd	r0, r1, [sp]
 8005bba:	e7c4      	b.n	8005b46 <_dtoa_r+0x4e6>
 8005bbc:	462a      	mov	r2, r5
 8005bbe:	4633      	mov	r3, r6
 8005bc0:	f7fa fd1a 	bl	80005f8 <__aeabi_dmul>
 8005bc4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005bc8:	eb0b 0507 	add.w	r5, fp, r7
 8005bcc:	465e      	mov	r6, fp
 8005bce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bd2:	f7fa ffc1 	bl	8000b58 <__aeabi_d2iz>
 8005bd6:	4607      	mov	r7, r0
 8005bd8:	f7fa fca4 	bl	8000524 <__aeabi_i2d>
 8005bdc:	3730      	adds	r7, #48	; 0x30
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005be6:	f7fa fb4f 	bl	8000288 <__aeabi_dsub>
 8005bea:	f806 7b01 	strb.w	r7, [r6], #1
 8005bee:	42ae      	cmp	r6, r5
 8005bf0:	e9cd 0100 	strd	r0, r1, [sp]
 8005bf4:	f04f 0200 	mov.w	r2, #0
 8005bf8:	d126      	bne.n	8005c48 <_dtoa_r+0x5e8>
 8005bfa:	4b1c      	ldr	r3, [pc, #112]	; (8005c6c <_dtoa_r+0x60c>)
 8005bfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c00:	f7fa fb44 	bl	800028c <__adddf3>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c0c:	f7fa ff84 	bl	8000b18 <__aeabi_dcmpgt>
 8005c10:	2800      	cmp	r0, #0
 8005c12:	d174      	bne.n	8005cfe <_dtoa_r+0x69e>
 8005c14:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005c18:	2000      	movs	r0, #0
 8005c1a:	4914      	ldr	r1, [pc, #80]	; (8005c6c <_dtoa_r+0x60c>)
 8005c1c:	f7fa fb34 	bl	8000288 <__aeabi_dsub>
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c28:	f7fa ff58 	bl	8000adc <__aeabi_dcmplt>
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	f43f af30 	beq.w	8005a92 <_dtoa_r+0x432>
 8005c32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c36:	2b30      	cmp	r3, #48	; 0x30
 8005c38:	f105 32ff 	add.w	r2, r5, #4294967295
 8005c3c:	d002      	beq.n	8005c44 <_dtoa_r+0x5e4>
 8005c3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005c42:	e04a      	b.n	8005cda <_dtoa_r+0x67a>
 8005c44:	4615      	mov	r5, r2
 8005c46:	e7f4      	b.n	8005c32 <_dtoa_r+0x5d2>
 8005c48:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <_dtoa_r+0x600>)
 8005c4a:	f7fa fcd5 	bl	80005f8 <__aeabi_dmul>
 8005c4e:	e9cd 0100 	strd	r0, r1, [sp]
 8005c52:	e7bc      	b.n	8005bce <_dtoa_r+0x56e>
 8005c54:	08007400 	.word	0x08007400
 8005c58:	080073d8 	.word	0x080073d8
 8005c5c:	3ff00000 	.word	0x3ff00000
 8005c60:	40240000 	.word	0x40240000
 8005c64:	401c0000 	.word	0x401c0000
 8005c68:	40140000 	.word	0x40140000
 8005c6c:	3fe00000 	.word	0x3fe00000
 8005c70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005c74:	465d      	mov	r5, fp
 8005c76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	4639      	mov	r1, r7
 8005c7e:	f7fa fde5 	bl	800084c <__aeabi_ddiv>
 8005c82:	f7fa ff69 	bl	8000b58 <__aeabi_d2iz>
 8005c86:	4680      	mov	r8, r0
 8005c88:	f7fa fc4c 	bl	8000524 <__aeabi_i2d>
 8005c8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c90:	f7fa fcb2 	bl	80005f8 <__aeabi_dmul>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4630      	mov	r0, r6
 8005c9a:	4639      	mov	r1, r7
 8005c9c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005ca0:	f7fa faf2 	bl	8000288 <__aeabi_dsub>
 8005ca4:	f805 6b01 	strb.w	r6, [r5], #1
 8005ca8:	eba5 060b 	sub.w	r6, r5, fp
 8005cac:	45b1      	cmp	r9, r6
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	d139      	bne.n	8005d28 <_dtoa_r+0x6c8>
 8005cb4:	f7fa faea 	bl	800028c <__adddf3>
 8005cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cbc:	4606      	mov	r6, r0
 8005cbe:	460f      	mov	r7, r1
 8005cc0:	f7fa ff2a 	bl	8000b18 <__aeabi_dcmpgt>
 8005cc4:	b9c8      	cbnz	r0, 8005cfa <_dtoa_r+0x69a>
 8005cc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cca:	4630      	mov	r0, r6
 8005ccc:	4639      	mov	r1, r7
 8005cce:	f7fa fefb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cd2:	b110      	cbz	r0, 8005cda <_dtoa_r+0x67a>
 8005cd4:	f018 0f01 	tst.w	r8, #1
 8005cd8:	d10f      	bne.n	8005cfa <_dtoa_r+0x69a>
 8005cda:	9904      	ldr	r1, [sp, #16]
 8005cdc:	4620      	mov	r0, r4
 8005cde:	f000 fb96 	bl	800640e <_Bfree>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ce6:	702b      	strb	r3, [r5, #0]
 8005ce8:	f10a 0301 	add.w	r3, sl, #1
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 8241 	beq.w	8006178 <_dtoa_r+0xb18>
 8005cf6:	601d      	str	r5, [r3, #0]
 8005cf8:	e23e      	b.n	8006178 <_dtoa_r+0xb18>
 8005cfa:	f8cd a020 	str.w	sl, [sp, #32]
 8005cfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005d02:	2a39      	cmp	r2, #57	; 0x39
 8005d04:	f105 33ff 	add.w	r3, r5, #4294967295
 8005d08:	d108      	bne.n	8005d1c <_dtoa_r+0x6bc>
 8005d0a:	459b      	cmp	fp, r3
 8005d0c:	d10a      	bne.n	8005d24 <_dtoa_r+0x6c4>
 8005d0e:	9b08      	ldr	r3, [sp, #32]
 8005d10:	3301      	adds	r3, #1
 8005d12:	9308      	str	r3, [sp, #32]
 8005d14:	2330      	movs	r3, #48	; 0x30
 8005d16:	f88b 3000 	strb.w	r3, [fp]
 8005d1a:	465b      	mov	r3, fp
 8005d1c:	781a      	ldrb	r2, [r3, #0]
 8005d1e:	3201      	adds	r2, #1
 8005d20:	701a      	strb	r2, [r3, #0]
 8005d22:	e78c      	b.n	8005c3e <_dtoa_r+0x5de>
 8005d24:	461d      	mov	r5, r3
 8005d26:	e7ea      	b.n	8005cfe <_dtoa_r+0x69e>
 8005d28:	2200      	movs	r2, #0
 8005d2a:	4b9b      	ldr	r3, [pc, #620]	; (8005f98 <_dtoa_r+0x938>)
 8005d2c:	f7fa fc64 	bl	80005f8 <__aeabi_dmul>
 8005d30:	2200      	movs	r2, #0
 8005d32:	2300      	movs	r3, #0
 8005d34:	4606      	mov	r6, r0
 8005d36:	460f      	mov	r7, r1
 8005d38:	f7fa fec6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	d09a      	beq.n	8005c76 <_dtoa_r+0x616>
 8005d40:	e7cb      	b.n	8005cda <_dtoa_r+0x67a>
 8005d42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d44:	2a00      	cmp	r2, #0
 8005d46:	f000 808b 	beq.w	8005e60 <_dtoa_r+0x800>
 8005d4a:	9a06      	ldr	r2, [sp, #24]
 8005d4c:	2a01      	cmp	r2, #1
 8005d4e:	dc6e      	bgt.n	8005e2e <_dtoa_r+0x7ce>
 8005d50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005d52:	2a00      	cmp	r2, #0
 8005d54:	d067      	beq.n	8005e26 <_dtoa_r+0x7c6>
 8005d56:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d5a:	9f07      	ldr	r7, [sp, #28]
 8005d5c:	9d05      	ldr	r5, [sp, #20]
 8005d5e:	9a05      	ldr	r2, [sp, #20]
 8005d60:	2101      	movs	r1, #1
 8005d62:	441a      	add	r2, r3
 8005d64:	4620      	mov	r0, r4
 8005d66:	9205      	str	r2, [sp, #20]
 8005d68:	4498      	add	r8, r3
 8005d6a:	f000 fbf0 	bl	800654e <__i2b>
 8005d6e:	4606      	mov	r6, r0
 8005d70:	2d00      	cmp	r5, #0
 8005d72:	dd0c      	ble.n	8005d8e <_dtoa_r+0x72e>
 8005d74:	f1b8 0f00 	cmp.w	r8, #0
 8005d78:	dd09      	ble.n	8005d8e <_dtoa_r+0x72e>
 8005d7a:	4545      	cmp	r5, r8
 8005d7c:	9a05      	ldr	r2, [sp, #20]
 8005d7e:	462b      	mov	r3, r5
 8005d80:	bfa8      	it	ge
 8005d82:	4643      	movge	r3, r8
 8005d84:	1ad2      	subs	r2, r2, r3
 8005d86:	9205      	str	r2, [sp, #20]
 8005d88:	1aed      	subs	r5, r5, r3
 8005d8a:	eba8 0803 	sub.w	r8, r8, r3
 8005d8e:	9b07      	ldr	r3, [sp, #28]
 8005d90:	b1eb      	cbz	r3, 8005dce <_dtoa_r+0x76e>
 8005d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d067      	beq.n	8005e68 <_dtoa_r+0x808>
 8005d98:	b18f      	cbz	r7, 8005dbe <_dtoa_r+0x75e>
 8005d9a:	4631      	mov	r1, r6
 8005d9c:	463a      	mov	r2, r7
 8005d9e:	4620      	mov	r0, r4
 8005da0:	f000 fc74 	bl	800668c <__pow5mult>
 8005da4:	9a04      	ldr	r2, [sp, #16]
 8005da6:	4601      	mov	r1, r0
 8005da8:	4606      	mov	r6, r0
 8005daa:	4620      	mov	r0, r4
 8005dac:	f000 fbd8 	bl	8006560 <__multiply>
 8005db0:	9904      	ldr	r1, [sp, #16]
 8005db2:	9008      	str	r0, [sp, #32]
 8005db4:	4620      	mov	r0, r4
 8005db6:	f000 fb2a 	bl	800640e <_Bfree>
 8005dba:	9b08      	ldr	r3, [sp, #32]
 8005dbc:	9304      	str	r3, [sp, #16]
 8005dbe:	9b07      	ldr	r3, [sp, #28]
 8005dc0:	1bda      	subs	r2, r3, r7
 8005dc2:	d004      	beq.n	8005dce <_dtoa_r+0x76e>
 8005dc4:	9904      	ldr	r1, [sp, #16]
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f000 fc60 	bl	800668c <__pow5mult>
 8005dcc:	9004      	str	r0, [sp, #16]
 8005dce:	2101      	movs	r1, #1
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f000 fbbc 	bl	800654e <__i2b>
 8005dd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dd8:	4607      	mov	r7, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 81d0 	beq.w	8006180 <_dtoa_r+0xb20>
 8005de0:	461a      	mov	r2, r3
 8005de2:	4601      	mov	r1, r0
 8005de4:	4620      	mov	r0, r4
 8005de6:	f000 fc51 	bl	800668c <__pow5mult>
 8005dea:	9b06      	ldr	r3, [sp, #24]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	4607      	mov	r7, r0
 8005df0:	dc40      	bgt.n	8005e74 <_dtoa_r+0x814>
 8005df2:	9b00      	ldr	r3, [sp, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d139      	bne.n	8005e6c <_dtoa_r+0x80c>
 8005df8:	9b01      	ldr	r3, [sp, #4]
 8005dfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d136      	bne.n	8005e70 <_dtoa_r+0x810>
 8005e02:	9b01      	ldr	r3, [sp, #4]
 8005e04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e08:	0d1b      	lsrs	r3, r3, #20
 8005e0a:	051b      	lsls	r3, r3, #20
 8005e0c:	b12b      	cbz	r3, 8005e1a <_dtoa_r+0x7ba>
 8005e0e:	9b05      	ldr	r3, [sp, #20]
 8005e10:	3301      	adds	r3, #1
 8005e12:	9305      	str	r3, [sp, #20]
 8005e14:	f108 0801 	add.w	r8, r8, #1
 8005e18:	2301      	movs	r3, #1
 8005e1a:	9307      	str	r3, [sp, #28]
 8005e1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d12a      	bne.n	8005e78 <_dtoa_r+0x818>
 8005e22:	2001      	movs	r0, #1
 8005e24:	e030      	b.n	8005e88 <_dtoa_r+0x828>
 8005e26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e28:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e2c:	e795      	b.n	8005d5a <_dtoa_r+0x6fa>
 8005e2e:	9b07      	ldr	r3, [sp, #28]
 8005e30:	f109 37ff 	add.w	r7, r9, #4294967295
 8005e34:	42bb      	cmp	r3, r7
 8005e36:	bfbf      	itttt	lt
 8005e38:	9b07      	ldrlt	r3, [sp, #28]
 8005e3a:	9707      	strlt	r7, [sp, #28]
 8005e3c:	1afa      	sublt	r2, r7, r3
 8005e3e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005e40:	bfbb      	ittet	lt
 8005e42:	189b      	addlt	r3, r3, r2
 8005e44:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005e46:	1bdf      	subge	r7, r3, r7
 8005e48:	2700      	movlt	r7, #0
 8005e4a:	f1b9 0f00 	cmp.w	r9, #0
 8005e4e:	bfb5      	itete	lt
 8005e50:	9b05      	ldrlt	r3, [sp, #20]
 8005e52:	9d05      	ldrge	r5, [sp, #20]
 8005e54:	eba3 0509 	sublt.w	r5, r3, r9
 8005e58:	464b      	movge	r3, r9
 8005e5a:	bfb8      	it	lt
 8005e5c:	2300      	movlt	r3, #0
 8005e5e:	e77e      	b.n	8005d5e <_dtoa_r+0x6fe>
 8005e60:	9f07      	ldr	r7, [sp, #28]
 8005e62:	9d05      	ldr	r5, [sp, #20]
 8005e64:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005e66:	e783      	b.n	8005d70 <_dtoa_r+0x710>
 8005e68:	9a07      	ldr	r2, [sp, #28]
 8005e6a:	e7ab      	b.n	8005dc4 <_dtoa_r+0x764>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	e7d4      	b.n	8005e1a <_dtoa_r+0x7ba>
 8005e70:	9b00      	ldr	r3, [sp, #0]
 8005e72:	e7d2      	b.n	8005e1a <_dtoa_r+0x7ba>
 8005e74:	2300      	movs	r3, #0
 8005e76:	9307      	str	r3, [sp, #28]
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005e7e:	6918      	ldr	r0, [r3, #16]
 8005e80:	f000 fb17 	bl	80064b2 <__hi0bits>
 8005e84:	f1c0 0020 	rsb	r0, r0, #32
 8005e88:	4440      	add	r0, r8
 8005e8a:	f010 001f 	ands.w	r0, r0, #31
 8005e8e:	d047      	beq.n	8005f20 <_dtoa_r+0x8c0>
 8005e90:	f1c0 0320 	rsb	r3, r0, #32
 8005e94:	2b04      	cmp	r3, #4
 8005e96:	dd3b      	ble.n	8005f10 <_dtoa_r+0x8b0>
 8005e98:	9b05      	ldr	r3, [sp, #20]
 8005e9a:	f1c0 001c 	rsb	r0, r0, #28
 8005e9e:	4403      	add	r3, r0
 8005ea0:	9305      	str	r3, [sp, #20]
 8005ea2:	4405      	add	r5, r0
 8005ea4:	4480      	add	r8, r0
 8005ea6:	9b05      	ldr	r3, [sp, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	dd05      	ble.n	8005eb8 <_dtoa_r+0x858>
 8005eac:	461a      	mov	r2, r3
 8005eae:	9904      	ldr	r1, [sp, #16]
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f000 fc39 	bl	8006728 <__lshift>
 8005eb6:	9004      	str	r0, [sp, #16]
 8005eb8:	f1b8 0f00 	cmp.w	r8, #0
 8005ebc:	dd05      	ble.n	8005eca <_dtoa_r+0x86a>
 8005ebe:	4639      	mov	r1, r7
 8005ec0:	4642      	mov	r2, r8
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	f000 fc30 	bl	8006728 <__lshift>
 8005ec8:	4607      	mov	r7, r0
 8005eca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ecc:	b353      	cbz	r3, 8005f24 <_dtoa_r+0x8c4>
 8005ece:	4639      	mov	r1, r7
 8005ed0:	9804      	ldr	r0, [sp, #16]
 8005ed2:	f000 fc7d 	bl	80067d0 <__mcmp>
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	da24      	bge.n	8005f24 <_dtoa_r+0x8c4>
 8005eda:	2300      	movs	r3, #0
 8005edc:	220a      	movs	r2, #10
 8005ede:	9904      	ldr	r1, [sp, #16]
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f000 faab 	bl	800643c <__multadd>
 8005ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ee8:	9004      	str	r0, [sp, #16]
 8005eea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 814d 	beq.w	800618e <_dtoa_r+0xb2e>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	220a      	movs	r2, #10
 8005efa:	4620      	mov	r0, r4
 8005efc:	f000 fa9e 	bl	800643c <__multadd>
 8005f00:	9b02      	ldr	r3, [sp, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	4606      	mov	r6, r0
 8005f06:	dc4f      	bgt.n	8005fa8 <_dtoa_r+0x948>
 8005f08:	9b06      	ldr	r3, [sp, #24]
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	dd4c      	ble.n	8005fa8 <_dtoa_r+0x948>
 8005f0e:	e011      	b.n	8005f34 <_dtoa_r+0x8d4>
 8005f10:	d0c9      	beq.n	8005ea6 <_dtoa_r+0x846>
 8005f12:	9a05      	ldr	r2, [sp, #20]
 8005f14:	331c      	adds	r3, #28
 8005f16:	441a      	add	r2, r3
 8005f18:	9205      	str	r2, [sp, #20]
 8005f1a:	441d      	add	r5, r3
 8005f1c:	4498      	add	r8, r3
 8005f1e:	e7c2      	b.n	8005ea6 <_dtoa_r+0x846>
 8005f20:	4603      	mov	r3, r0
 8005f22:	e7f6      	b.n	8005f12 <_dtoa_r+0x8b2>
 8005f24:	f1b9 0f00 	cmp.w	r9, #0
 8005f28:	dc38      	bgt.n	8005f9c <_dtoa_r+0x93c>
 8005f2a:	9b06      	ldr	r3, [sp, #24]
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	dd35      	ble.n	8005f9c <_dtoa_r+0x93c>
 8005f30:	f8cd 9008 	str.w	r9, [sp, #8]
 8005f34:	9b02      	ldr	r3, [sp, #8]
 8005f36:	b963      	cbnz	r3, 8005f52 <_dtoa_r+0x8f2>
 8005f38:	4639      	mov	r1, r7
 8005f3a:	2205      	movs	r2, #5
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f000 fa7d 	bl	800643c <__multadd>
 8005f42:	4601      	mov	r1, r0
 8005f44:	4607      	mov	r7, r0
 8005f46:	9804      	ldr	r0, [sp, #16]
 8005f48:	f000 fc42 	bl	80067d0 <__mcmp>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	f73f adcc 	bgt.w	8005aea <_dtoa_r+0x48a>
 8005f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f54:	465d      	mov	r5, fp
 8005f56:	ea6f 0a03 	mvn.w	sl, r3
 8005f5a:	f04f 0900 	mov.w	r9, #0
 8005f5e:	4639      	mov	r1, r7
 8005f60:	4620      	mov	r0, r4
 8005f62:	f000 fa54 	bl	800640e <_Bfree>
 8005f66:	2e00      	cmp	r6, #0
 8005f68:	f43f aeb7 	beq.w	8005cda <_dtoa_r+0x67a>
 8005f6c:	f1b9 0f00 	cmp.w	r9, #0
 8005f70:	d005      	beq.n	8005f7e <_dtoa_r+0x91e>
 8005f72:	45b1      	cmp	r9, r6
 8005f74:	d003      	beq.n	8005f7e <_dtoa_r+0x91e>
 8005f76:	4649      	mov	r1, r9
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f000 fa48 	bl	800640e <_Bfree>
 8005f7e:	4631      	mov	r1, r6
 8005f80:	4620      	mov	r0, r4
 8005f82:	f000 fa44 	bl	800640e <_Bfree>
 8005f86:	e6a8      	b.n	8005cda <_dtoa_r+0x67a>
 8005f88:	2700      	movs	r7, #0
 8005f8a:	463e      	mov	r6, r7
 8005f8c:	e7e1      	b.n	8005f52 <_dtoa_r+0x8f2>
 8005f8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005f92:	463e      	mov	r6, r7
 8005f94:	e5a9      	b.n	8005aea <_dtoa_r+0x48a>
 8005f96:	bf00      	nop
 8005f98:	40240000 	.word	0x40240000
 8005f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f9e:	f8cd 9008 	str.w	r9, [sp, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 80fa 	beq.w	800619c <_dtoa_r+0xb3c>
 8005fa8:	2d00      	cmp	r5, #0
 8005faa:	dd05      	ble.n	8005fb8 <_dtoa_r+0x958>
 8005fac:	4631      	mov	r1, r6
 8005fae:	462a      	mov	r2, r5
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f000 fbb9 	bl	8006728 <__lshift>
 8005fb6:	4606      	mov	r6, r0
 8005fb8:	9b07      	ldr	r3, [sp, #28]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d04c      	beq.n	8006058 <_dtoa_r+0x9f8>
 8005fbe:	6871      	ldr	r1, [r6, #4]
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f000 f9f0 	bl	80063a6 <_Balloc>
 8005fc6:	6932      	ldr	r2, [r6, #16]
 8005fc8:	3202      	adds	r2, #2
 8005fca:	4605      	mov	r5, r0
 8005fcc:	0092      	lsls	r2, r2, #2
 8005fce:	f106 010c 	add.w	r1, r6, #12
 8005fd2:	300c      	adds	r0, #12
 8005fd4:	f000 f9dc 	bl	8006390 <memcpy>
 8005fd8:	2201      	movs	r2, #1
 8005fda:	4629      	mov	r1, r5
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f000 fba3 	bl	8006728 <__lshift>
 8005fe2:	9b00      	ldr	r3, [sp, #0]
 8005fe4:	f8cd b014 	str.w	fp, [sp, #20]
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	46b1      	mov	r9, r6
 8005fee:	9307      	str	r3, [sp, #28]
 8005ff0:	4606      	mov	r6, r0
 8005ff2:	4639      	mov	r1, r7
 8005ff4:	9804      	ldr	r0, [sp, #16]
 8005ff6:	f7ff faa7 	bl	8005548 <quorem>
 8005ffa:	4649      	mov	r1, r9
 8005ffc:	4605      	mov	r5, r0
 8005ffe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006002:	9804      	ldr	r0, [sp, #16]
 8006004:	f000 fbe4 	bl	80067d0 <__mcmp>
 8006008:	4632      	mov	r2, r6
 800600a:	9000      	str	r0, [sp, #0]
 800600c:	4639      	mov	r1, r7
 800600e:	4620      	mov	r0, r4
 8006010:	f000 fbf8 	bl	8006804 <__mdiff>
 8006014:	68c3      	ldr	r3, [r0, #12]
 8006016:	4602      	mov	r2, r0
 8006018:	bb03      	cbnz	r3, 800605c <_dtoa_r+0x9fc>
 800601a:	4601      	mov	r1, r0
 800601c:	9008      	str	r0, [sp, #32]
 800601e:	9804      	ldr	r0, [sp, #16]
 8006020:	f000 fbd6 	bl	80067d0 <__mcmp>
 8006024:	9a08      	ldr	r2, [sp, #32]
 8006026:	4603      	mov	r3, r0
 8006028:	4611      	mov	r1, r2
 800602a:	4620      	mov	r0, r4
 800602c:	9308      	str	r3, [sp, #32]
 800602e:	f000 f9ee 	bl	800640e <_Bfree>
 8006032:	9b08      	ldr	r3, [sp, #32]
 8006034:	b9a3      	cbnz	r3, 8006060 <_dtoa_r+0xa00>
 8006036:	9a06      	ldr	r2, [sp, #24]
 8006038:	b992      	cbnz	r2, 8006060 <_dtoa_r+0xa00>
 800603a:	9a07      	ldr	r2, [sp, #28]
 800603c:	b982      	cbnz	r2, 8006060 <_dtoa_r+0xa00>
 800603e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006042:	d029      	beq.n	8006098 <_dtoa_r+0xa38>
 8006044:	9b00      	ldr	r3, [sp, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	dd01      	ble.n	800604e <_dtoa_r+0x9ee>
 800604a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800604e:	9b05      	ldr	r3, [sp, #20]
 8006050:	1c5d      	adds	r5, r3, #1
 8006052:	f883 8000 	strb.w	r8, [r3]
 8006056:	e782      	b.n	8005f5e <_dtoa_r+0x8fe>
 8006058:	4630      	mov	r0, r6
 800605a:	e7c2      	b.n	8005fe2 <_dtoa_r+0x982>
 800605c:	2301      	movs	r3, #1
 800605e:	e7e3      	b.n	8006028 <_dtoa_r+0x9c8>
 8006060:	9a00      	ldr	r2, [sp, #0]
 8006062:	2a00      	cmp	r2, #0
 8006064:	db04      	blt.n	8006070 <_dtoa_r+0xa10>
 8006066:	d125      	bne.n	80060b4 <_dtoa_r+0xa54>
 8006068:	9a06      	ldr	r2, [sp, #24]
 800606a:	bb1a      	cbnz	r2, 80060b4 <_dtoa_r+0xa54>
 800606c:	9a07      	ldr	r2, [sp, #28]
 800606e:	bb0a      	cbnz	r2, 80060b4 <_dtoa_r+0xa54>
 8006070:	2b00      	cmp	r3, #0
 8006072:	ddec      	ble.n	800604e <_dtoa_r+0x9ee>
 8006074:	2201      	movs	r2, #1
 8006076:	9904      	ldr	r1, [sp, #16]
 8006078:	4620      	mov	r0, r4
 800607a:	f000 fb55 	bl	8006728 <__lshift>
 800607e:	4639      	mov	r1, r7
 8006080:	9004      	str	r0, [sp, #16]
 8006082:	f000 fba5 	bl	80067d0 <__mcmp>
 8006086:	2800      	cmp	r0, #0
 8006088:	dc03      	bgt.n	8006092 <_dtoa_r+0xa32>
 800608a:	d1e0      	bne.n	800604e <_dtoa_r+0x9ee>
 800608c:	f018 0f01 	tst.w	r8, #1
 8006090:	d0dd      	beq.n	800604e <_dtoa_r+0x9ee>
 8006092:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006096:	d1d8      	bne.n	800604a <_dtoa_r+0x9ea>
 8006098:	9b05      	ldr	r3, [sp, #20]
 800609a:	9a05      	ldr	r2, [sp, #20]
 800609c:	1c5d      	adds	r5, r3, #1
 800609e:	2339      	movs	r3, #57	; 0x39
 80060a0:	7013      	strb	r3, [r2, #0]
 80060a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80060a6:	2b39      	cmp	r3, #57	; 0x39
 80060a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80060ac:	d04f      	beq.n	800614e <_dtoa_r+0xaee>
 80060ae:	3301      	adds	r3, #1
 80060b0:	7013      	strb	r3, [r2, #0]
 80060b2:	e754      	b.n	8005f5e <_dtoa_r+0x8fe>
 80060b4:	9a05      	ldr	r2, [sp, #20]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f102 0501 	add.w	r5, r2, #1
 80060bc:	dd06      	ble.n	80060cc <_dtoa_r+0xa6c>
 80060be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80060c2:	d0e9      	beq.n	8006098 <_dtoa_r+0xa38>
 80060c4:	f108 0801 	add.w	r8, r8, #1
 80060c8:	9b05      	ldr	r3, [sp, #20]
 80060ca:	e7c2      	b.n	8006052 <_dtoa_r+0x9f2>
 80060cc:	9a02      	ldr	r2, [sp, #8]
 80060ce:	f805 8c01 	strb.w	r8, [r5, #-1]
 80060d2:	eba5 030b 	sub.w	r3, r5, fp
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d021      	beq.n	800611e <_dtoa_r+0xabe>
 80060da:	2300      	movs	r3, #0
 80060dc:	220a      	movs	r2, #10
 80060de:	9904      	ldr	r1, [sp, #16]
 80060e0:	4620      	mov	r0, r4
 80060e2:	f000 f9ab 	bl	800643c <__multadd>
 80060e6:	45b1      	cmp	r9, r6
 80060e8:	9004      	str	r0, [sp, #16]
 80060ea:	f04f 0300 	mov.w	r3, #0
 80060ee:	f04f 020a 	mov.w	r2, #10
 80060f2:	4649      	mov	r1, r9
 80060f4:	4620      	mov	r0, r4
 80060f6:	d105      	bne.n	8006104 <_dtoa_r+0xaa4>
 80060f8:	f000 f9a0 	bl	800643c <__multadd>
 80060fc:	4681      	mov	r9, r0
 80060fe:	4606      	mov	r6, r0
 8006100:	9505      	str	r5, [sp, #20]
 8006102:	e776      	b.n	8005ff2 <_dtoa_r+0x992>
 8006104:	f000 f99a 	bl	800643c <__multadd>
 8006108:	4631      	mov	r1, r6
 800610a:	4681      	mov	r9, r0
 800610c:	2300      	movs	r3, #0
 800610e:	220a      	movs	r2, #10
 8006110:	4620      	mov	r0, r4
 8006112:	f000 f993 	bl	800643c <__multadd>
 8006116:	4606      	mov	r6, r0
 8006118:	e7f2      	b.n	8006100 <_dtoa_r+0xaa0>
 800611a:	f04f 0900 	mov.w	r9, #0
 800611e:	2201      	movs	r2, #1
 8006120:	9904      	ldr	r1, [sp, #16]
 8006122:	4620      	mov	r0, r4
 8006124:	f000 fb00 	bl	8006728 <__lshift>
 8006128:	4639      	mov	r1, r7
 800612a:	9004      	str	r0, [sp, #16]
 800612c:	f000 fb50 	bl	80067d0 <__mcmp>
 8006130:	2800      	cmp	r0, #0
 8006132:	dcb6      	bgt.n	80060a2 <_dtoa_r+0xa42>
 8006134:	d102      	bne.n	800613c <_dtoa_r+0xadc>
 8006136:	f018 0f01 	tst.w	r8, #1
 800613a:	d1b2      	bne.n	80060a2 <_dtoa_r+0xa42>
 800613c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006140:	2b30      	cmp	r3, #48	; 0x30
 8006142:	f105 32ff 	add.w	r2, r5, #4294967295
 8006146:	f47f af0a 	bne.w	8005f5e <_dtoa_r+0x8fe>
 800614a:	4615      	mov	r5, r2
 800614c:	e7f6      	b.n	800613c <_dtoa_r+0xadc>
 800614e:	4593      	cmp	fp, r2
 8006150:	d105      	bne.n	800615e <_dtoa_r+0xafe>
 8006152:	2331      	movs	r3, #49	; 0x31
 8006154:	f10a 0a01 	add.w	sl, sl, #1
 8006158:	f88b 3000 	strb.w	r3, [fp]
 800615c:	e6ff      	b.n	8005f5e <_dtoa_r+0x8fe>
 800615e:	4615      	mov	r5, r2
 8006160:	e79f      	b.n	80060a2 <_dtoa_r+0xa42>
 8006162:	f8df b064 	ldr.w	fp, [pc, #100]	; 80061c8 <_dtoa_r+0xb68>
 8006166:	e007      	b.n	8006178 <_dtoa_r+0xb18>
 8006168:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800616a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80061cc <_dtoa_r+0xb6c>
 800616e:	b11b      	cbz	r3, 8006178 <_dtoa_r+0xb18>
 8006170:	f10b 0308 	add.w	r3, fp, #8
 8006174:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006176:	6013      	str	r3, [r2, #0]
 8006178:	4658      	mov	r0, fp
 800617a:	b017      	add	sp, #92	; 0x5c
 800617c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006180:	9b06      	ldr	r3, [sp, #24]
 8006182:	2b01      	cmp	r3, #1
 8006184:	f77f ae35 	ble.w	8005df2 <_dtoa_r+0x792>
 8006188:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800618a:	9307      	str	r3, [sp, #28]
 800618c:	e649      	b.n	8005e22 <_dtoa_r+0x7c2>
 800618e:	9b02      	ldr	r3, [sp, #8]
 8006190:	2b00      	cmp	r3, #0
 8006192:	dc03      	bgt.n	800619c <_dtoa_r+0xb3c>
 8006194:	9b06      	ldr	r3, [sp, #24]
 8006196:	2b02      	cmp	r3, #2
 8006198:	f73f aecc 	bgt.w	8005f34 <_dtoa_r+0x8d4>
 800619c:	465d      	mov	r5, fp
 800619e:	4639      	mov	r1, r7
 80061a0:	9804      	ldr	r0, [sp, #16]
 80061a2:	f7ff f9d1 	bl	8005548 <quorem>
 80061a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80061aa:	f805 8b01 	strb.w	r8, [r5], #1
 80061ae:	9a02      	ldr	r2, [sp, #8]
 80061b0:	eba5 030b 	sub.w	r3, r5, fp
 80061b4:	429a      	cmp	r2, r3
 80061b6:	ddb0      	ble.n	800611a <_dtoa_r+0xaba>
 80061b8:	2300      	movs	r3, #0
 80061ba:	220a      	movs	r2, #10
 80061bc:	9904      	ldr	r1, [sp, #16]
 80061be:	4620      	mov	r0, r4
 80061c0:	f000 f93c 	bl	800643c <__multadd>
 80061c4:	9004      	str	r0, [sp, #16]
 80061c6:	e7ea      	b.n	800619e <_dtoa_r+0xb3e>
 80061c8:	08007340 	.word	0x08007340
 80061cc:	08007364 	.word	0x08007364

080061d0 <std>:
 80061d0:	2300      	movs	r3, #0
 80061d2:	b510      	push	{r4, lr}
 80061d4:	4604      	mov	r4, r0
 80061d6:	e9c0 3300 	strd	r3, r3, [r0]
 80061da:	6083      	str	r3, [r0, #8]
 80061dc:	8181      	strh	r1, [r0, #12]
 80061de:	6643      	str	r3, [r0, #100]	; 0x64
 80061e0:	81c2      	strh	r2, [r0, #14]
 80061e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061e6:	6183      	str	r3, [r0, #24]
 80061e8:	4619      	mov	r1, r3
 80061ea:	2208      	movs	r2, #8
 80061ec:	305c      	adds	r0, #92	; 0x5c
 80061ee:	f7fe fd2f 	bl	8004c50 <memset>
 80061f2:	4b05      	ldr	r3, [pc, #20]	; (8006208 <std+0x38>)
 80061f4:	6263      	str	r3, [r4, #36]	; 0x24
 80061f6:	4b05      	ldr	r3, [pc, #20]	; (800620c <std+0x3c>)
 80061f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80061fa:	4b05      	ldr	r3, [pc, #20]	; (8006210 <std+0x40>)
 80061fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061fe:	4b05      	ldr	r3, [pc, #20]	; (8006214 <std+0x44>)
 8006200:	6224      	str	r4, [r4, #32]
 8006202:	6323      	str	r3, [r4, #48]	; 0x30
 8006204:	bd10      	pop	{r4, pc}
 8006206:	bf00      	nop
 8006208:	08006d69 	.word	0x08006d69
 800620c:	08006d8b 	.word	0x08006d8b
 8006210:	08006dc3 	.word	0x08006dc3
 8006214:	08006de7 	.word	0x08006de7

08006218 <_cleanup_r>:
 8006218:	4901      	ldr	r1, [pc, #4]	; (8006220 <_cleanup_r+0x8>)
 800621a:	f000 b885 	b.w	8006328 <_fwalk_reent>
 800621e:	bf00      	nop
 8006220:	080070c1 	.word	0x080070c1

08006224 <__sfmoreglue>:
 8006224:	b570      	push	{r4, r5, r6, lr}
 8006226:	1e4a      	subs	r2, r1, #1
 8006228:	2568      	movs	r5, #104	; 0x68
 800622a:	4355      	muls	r5, r2
 800622c:	460e      	mov	r6, r1
 800622e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006232:	f000 fbef 	bl	8006a14 <_malloc_r>
 8006236:	4604      	mov	r4, r0
 8006238:	b140      	cbz	r0, 800624c <__sfmoreglue+0x28>
 800623a:	2100      	movs	r1, #0
 800623c:	e9c0 1600 	strd	r1, r6, [r0]
 8006240:	300c      	adds	r0, #12
 8006242:	60a0      	str	r0, [r4, #8]
 8006244:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006248:	f7fe fd02 	bl	8004c50 <memset>
 800624c:	4620      	mov	r0, r4
 800624e:	bd70      	pop	{r4, r5, r6, pc}

08006250 <__sinit>:
 8006250:	6983      	ldr	r3, [r0, #24]
 8006252:	b510      	push	{r4, lr}
 8006254:	4604      	mov	r4, r0
 8006256:	bb33      	cbnz	r3, 80062a6 <__sinit+0x56>
 8006258:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800625c:	6503      	str	r3, [r0, #80]	; 0x50
 800625e:	4b12      	ldr	r3, [pc, #72]	; (80062a8 <__sinit+0x58>)
 8006260:	4a12      	ldr	r2, [pc, #72]	; (80062ac <__sinit+0x5c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6282      	str	r2, [r0, #40]	; 0x28
 8006266:	4298      	cmp	r0, r3
 8006268:	bf04      	itt	eq
 800626a:	2301      	moveq	r3, #1
 800626c:	6183      	streq	r3, [r0, #24]
 800626e:	f000 f81f 	bl	80062b0 <__sfp>
 8006272:	6060      	str	r0, [r4, #4]
 8006274:	4620      	mov	r0, r4
 8006276:	f000 f81b 	bl	80062b0 <__sfp>
 800627a:	60a0      	str	r0, [r4, #8]
 800627c:	4620      	mov	r0, r4
 800627e:	f000 f817 	bl	80062b0 <__sfp>
 8006282:	2200      	movs	r2, #0
 8006284:	60e0      	str	r0, [r4, #12]
 8006286:	2104      	movs	r1, #4
 8006288:	6860      	ldr	r0, [r4, #4]
 800628a:	f7ff ffa1 	bl	80061d0 <std>
 800628e:	2201      	movs	r2, #1
 8006290:	2109      	movs	r1, #9
 8006292:	68a0      	ldr	r0, [r4, #8]
 8006294:	f7ff ff9c 	bl	80061d0 <std>
 8006298:	2202      	movs	r2, #2
 800629a:	2112      	movs	r1, #18
 800629c:	68e0      	ldr	r0, [r4, #12]
 800629e:	f7ff ff97 	bl	80061d0 <std>
 80062a2:	2301      	movs	r3, #1
 80062a4:	61a3      	str	r3, [r4, #24]
 80062a6:	bd10      	pop	{r4, pc}
 80062a8:	0800732c 	.word	0x0800732c
 80062ac:	08006219 	.word	0x08006219

080062b0 <__sfp>:
 80062b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b2:	4b1b      	ldr	r3, [pc, #108]	; (8006320 <__sfp+0x70>)
 80062b4:	681e      	ldr	r6, [r3, #0]
 80062b6:	69b3      	ldr	r3, [r6, #24]
 80062b8:	4607      	mov	r7, r0
 80062ba:	b913      	cbnz	r3, 80062c2 <__sfp+0x12>
 80062bc:	4630      	mov	r0, r6
 80062be:	f7ff ffc7 	bl	8006250 <__sinit>
 80062c2:	3648      	adds	r6, #72	; 0x48
 80062c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	d503      	bpl.n	80062d4 <__sfp+0x24>
 80062cc:	6833      	ldr	r3, [r6, #0]
 80062ce:	b133      	cbz	r3, 80062de <__sfp+0x2e>
 80062d0:	6836      	ldr	r6, [r6, #0]
 80062d2:	e7f7      	b.n	80062c4 <__sfp+0x14>
 80062d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80062d8:	b16d      	cbz	r5, 80062f6 <__sfp+0x46>
 80062da:	3468      	adds	r4, #104	; 0x68
 80062dc:	e7f4      	b.n	80062c8 <__sfp+0x18>
 80062de:	2104      	movs	r1, #4
 80062e0:	4638      	mov	r0, r7
 80062e2:	f7ff ff9f 	bl	8006224 <__sfmoreglue>
 80062e6:	6030      	str	r0, [r6, #0]
 80062e8:	2800      	cmp	r0, #0
 80062ea:	d1f1      	bne.n	80062d0 <__sfp+0x20>
 80062ec:	230c      	movs	r3, #12
 80062ee:	603b      	str	r3, [r7, #0]
 80062f0:	4604      	mov	r4, r0
 80062f2:	4620      	mov	r0, r4
 80062f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062f6:	4b0b      	ldr	r3, [pc, #44]	; (8006324 <__sfp+0x74>)
 80062f8:	6665      	str	r5, [r4, #100]	; 0x64
 80062fa:	e9c4 5500 	strd	r5, r5, [r4]
 80062fe:	60a5      	str	r5, [r4, #8]
 8006300:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006304:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006308:	2208      	movs	r2, #8
 800630a:	4629      	mov	r1, r5
 800630c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006310:	f7fe fc9e 	bl	8004c50 <memset>
 8006314:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006318:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800631c:	e7e9      	b.n	80062f2 <__sfp+0x42>
 800631e:	bf00      	nop
 8006320:	0800732c 	.word	0x0800732c
 8006324:	ffff0001 	.word	0xffff0001

08006328 <_fwalk_reent>:
 8006328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800632c:	4680      	mov	r8, r0
 800632e:	4689      	mov	r9, r1
 8006330:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006334:	2600      	movs	r6, #0
 8006336:	b914      	cbnz	r4, 800633e <_fwalk_reent+0x16>
 8006338:	4630      	mov	r0, r6
 800633a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800633e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006342:	3f01      	subs	r7, #1
 8006344:	d501      	bpl.n	800634a <_fwalk_reent+0x22>
 8006346:	6824      	ldr	r4, [r4, #0]
 8006348:	e7f5      	b.n	8006336 <_fwalk_reent+0xe>
 800634a:	89ab      	ldrh	r3, [r5, #12]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d907      	bls.n	8006360 <_fwalk_reent+0x38>
 8006350:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006354:	3301      	adds	r3, #1
 8006356:	d003      	beq.n	8006360 <_fwalk_reent+0x38>
 8006358:	4629      	mov	r1, r5
 800635a:	4640      	mov	r0, r8
 800635c:	47c8      	blx	r9
 800635e:	4306      	orrs	r6, r0
 8006360:	3568      	adds	r5, #104	; 0x68
 8006362:	e7ee      	b.n	8006342 <_fwalk_reent+0x1a>

08006364 <_localeconv_r>:
 8006364:	4b04      	ldr	r3, [pc, #16]	; (8006378 <_localeconv_r+0x14>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6a18      	ldr	r0, [r3, #32]
 800636a:	4b04      	ldr	r3, [pc, #16]	; (800637c <_localeconv_r+0x18>)
 800636c:	2800      	cmp	r0, #0
 800636e:	bf08      	it	eq
 8006370:	4618      	moveq	r0, r3
 8006372:	30f0      	adds	r0, #240	; 0xf0
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	2000000c 	.word	0x2000000c
 800637c:	20000070 	.word	0x20000070

08006380 <malloc>:
 8006380:	4b02      	ldr	r3, [pc, #8]	; (800638c <malloc+0xc>)
 8006382:	4601      	mov	r1, r0
 8006384:	6818      	ldr	r0, [r3, #0]
 8006386:	f000 bb45 	b.w	8006a14 <_malloc_r>
 800638a:	bf00      	nop
 800638c:	2000000c 	.word	0x2000000c

08006390 <memcpy>:
 8006390:	b510      	push	{r4, lr}
 8006392:	1e43      	subs	r3, r0, #1
 8006394:	440a      	add	r2, r1
 8006396:	4291      	cmp	r1, r2
 8006398:	d100      	bne.n	800639c <memcpy+0xc>
 800639a:	bd10      	pop	{r4, pc}
 800639c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063a4:	e7f7      	b.n	8006396 <memcpy+0x6>

080063a6 <_Balloc>:
 80063a6:	b570      	push	{r4, r5, r6, lr}
 80063a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80063aa:	4604      	mov	r4, r0
 80063ac:	460e      	mov	r6, r1
 80063ae:	b93d      	cbnz	r5, 80063c0 <_Balloc+0x1a>
 80063b0:	2010      	movs	r0, #16
 80063b2:	f7ff ffe5 	bl	8006380 <malloc>
 80063b6:	6260      	str	r0, [r4, #36]	; 0x24
 80063b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80063bc:	6005      	str	r5, [r0, #0]
 80063be:	60c5      	str	r5, [r0, #12]
 80063c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80063c2:	68eb      	ldr	r3, [r5, #12]
 80063c4:	b183      	cbz	r3, 80063e8 <_Balloc+0x42>
 80063c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80063ce:	b9b8      	cbnz	r0, 8006400 <_Balloc+0x5a>
 80063d0:	2101      	movs	r1, #1
 80063d2:	fa01 f506 	lsl.w	r5, r1, r6
 80063d6:	1d6a      	adds	r2, r5, #5
 80063d8:	0092      	lsls	r2, r2, #2
 80063da:	4620      	mov	r0, r4
 80063dc:	f000 fabe 	bl	800695c <_calloc_r>
 80063e0:	b160      	cbz	r0, 80063fc <_Balloc+0x56>
 80063e2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80063e6:	e00e      	b.n	8006406 <_Balloc+0x60>
 80063e8:	2221      	movs	r2, #33	; 0x21
 80063ea:	2104      	movs	r1, #4
 80063ec:	4620      	mov	r0, r4
 80063ee:	f000 fab5 	bl	800695c <_calloc_r>
 80063f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063f4:	60e8      	str	r0, [r5, #12]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e4      	bne.n	80063c6 <_Balloc+0x20>
 80063fc:	2000      	movs	r0, #0
 80063fe:	bd70      	pop	{r4, r5, r6, pc}
 8006400:	6802      	ldr	r2, [r0, #0]
 8006402:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006406:	2300      	movs	r3, #0
 8006408:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800640c:	e7f7      	b.n	80063fe <_Balloc+0x58>

0800640e <_Bfree>:
 800640e:	b570      	push	{r4, r5, r6, lr}
 8006410:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006412:	4606      	mov	r6, r0
 8006414:	460d      	mov	r5, r1
 8006416:	b93c      	cbnz	r4, 8006428 <_Bfree+0x1a>
 8006418:	2010      	movs	r0, #16
 800641a:	f7ff ffb1 	bl	8006380 <malloc>
 800641e:	6270      	str	r0, [r6, #36]	; 0x24
 8006420:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006424:	6004      	str	r4, [r0, #0]
 8006426:	60c4      	str	r4, [r0, #12]
 8006428:	b13d      	cbz	r5, 800643a <_Bfree+0x2c>
 800642a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800642c:	686a      	ldr	r2, [r5, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006434:	6029      	str	r1, [r5, #0]
 8006436:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800643a:	bd70      	pop	{r4, r5, r6, pc}

0800643c <__multadd>:
 800643c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006440:	690d      	ldr	r5, [r1, #16]
 8006442:	461f      	mov	r7, r3
 8006444:	4606      	mov	r6, r0
 8006446:	460c      	mov	r4, r1
 8006448:	f101 0c14 	add.w	ip, r1, #20
 800644c:	2300      	movs	r3, #0
 800644e:	f8dc 0000 	ldr.w	r0, [ip]
 8006452:	b281      	uxth	r1, r0
 8006454:	fb02 7101 	mla	r1, r2, r1, r7
 8006458:	0c0f      	lsrs	r7, r1, #16
 800645a:	0c00      	lsrs	r0, r0, #16
 800645c:	fb02 7000 	mla	r0, r2, r0, r7
 8006460:	b289      	uxth	r1, r1
 8006462:	3301      	adds	r3, #1
 8006464:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006468:	429d      	cmp	r5, r3
 800646a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800646e:	f84c 1b04 	str.w	r1, [ip], #4
 8006472:	dcec      	bgt.n	800644e <__multadd+0x12>
 8006474:	b1d7      	cbz	r7, 80064ac <__multadd+0x70>
 8006476:	68a3      	ldr	r3, [r4, #8]
 8006478:	42ab      	cmp	r3, r5
 800647a:	dc12      	bgt.n	80064a2 <__multadd+0x66>
 800647c:	6861      	ldr	r1, [r4, #4]
 800647e:	4630      	mov	r0, r6
 8006480:	3101      	adds	r1, #1
 8006482:	f7ff ff90 	bl	80063a6 <_Balloc>
 8006486:	6922      	ldr	r2, [r4, #16]
 8006488:	3202      	adds	r2, #2
 800648a:	f104 010c 	add.w	r1, r4, #12
 800648e:	4680      	mov	r8, r0
 8006490:	0092      	lsls	r2, r2, #2
 8006492:	300c      	adds	r0, #12
 8006494:	f7ff ff7c 	bl	8006390 <memcpy>
 8006498:	4621      	mov	r1, r4
 800649a:	4630      	mov	r0, r6
 800649c:	f7ff ffb7 	bl	800640e <_Bfree>
 80064a0:	4644      	mov	r4, r8
 80064a2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064a6:	3501      	adds	r5, #1
 80064a8:	615f      	str	r7, [r3, #20]
 80064aa:	6125      	str	r5, [r4, #16]
 80064ac:	4620      	mov	r0, r4
 80064ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080064b2 <__hi0bits>:
 80064b2:	0c02      	lsrs	r2, r0, #16
 80064b4:	0412      	lsls	r2, r2, #16
 80064b6:	4603      	mov	r3, r0
 80064b8:	b9b2      	cbnz	r2, 80064e8 <__hi0bits+0x36>
 80064ba:	0403      	lsls	r3, r0, #16
 80064bc:	2010      	movs	r0, #16
 80064be:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80064c2:	bf04      	itt	eq
 80064c4:	021b      	lsleq	r3, r3, #8
 80064c6:	3008      	addeq	r0, #8
 80064c8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80064cc:	bf04      	itt	eq
 80064ce:	011b      	lsleq	r3, r3, #4
 80064d0:	3004      	addeq	r0, #4
 80064d2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80064d6:	bf04      	itt	eq
 80064d8:	009b      	lsleq	r3, r3, #2
 80064da:	3002      	addeq	r0, #2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	db06      	blt.n	80064ee <__hi0bits+0x3c>
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	d503      	bpl.n	80064ec <__hi0bits+0x3a>
 80064e4:	3001      	adds	r0, #1
 80064e6:	4770      	bx	lr
 80064e8:	2000      	movs	r0, #0
 80064ea:	e7e8      	b.n	80064be <__hi0bits+0xc>
 80064ec:	2020      	movs	r0, #32
 80064ee:	4770      	bx	lr

080064f0 <__lo0bits>:
 80064f0:	6803      	ldr	r3, [r0, #0]
 80064f2:	f013 0207 	ands.w	r2, r3, #7
 80064f6:	4601      	mov	r1, r0
 80064f8:	d00b      	beq.n	8006512 <__lo0bits+0x22>
 80064fa:	07da      	lsls	r2, r3, #31
 80064fc:	d423      	bmi.n	8006546 <__lo0bits+0x56>
 80064fe:	0798      	lsls	r0, r3, #30
 8006500:	bf49      	itett	mi
 8006502:	085b      	lsrmi	r3, r3, #1
 8006504:	089b      	lsrpl	r3, r3, #2
 8006506:	2001      	movmi	r0, #1
 8006508:	600b      	strmi	r3, [r1, #0]
 800650a:	bf5c      	itt	pl
 800650c:	600b      	strpl	r3, [r1, #0]
 800650e:	2002      	movpl	r0, #2
 8006510:	4770      	bx	lr
 8006512:	b298      	uxth	r0, r3
 8006514:	b9a8      	cbnz	r0, 8006542 <__lo0bits+0x52>
 8006516:	0c1b      	lsrs	r3, r3, #16
 8006518:	2010      	movs	r0, #16
 800651a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800651e:	bf04      	itt	eq
 8006520:	0a1b      	lsreq	r3, r3, #8
 8006522:	3008      	addeq	r0, #8
 8006524:	071a      	lsls	r2, r3, #28
 8006526:	bf04      	itt	eq
 8006528:	091b      	lsreq	r3, r3, #4
 800652a:	3004      	addeq	r0, #4
 800652c:	079a      	lsls	r2, r3, #30
 800652e:	bf04      	itt	eq
 8006530:	089b      	lsreq	r3, r3, #2
 8006532:	3002      	addeq	r0, #2
 8006534:	07da      	lsls	r2, r3, #31
 8006536:	d402      	bmi.n	800653e <__lo0bits+0x4e>
 8006538:	085b      	lsrs	r3, r3, #1
 800653a:	d006      	beq.n	800654a <__lo0bits+0x5a>
 800653c:	3001      	adds	r0, #1
 800653e:	600b      	str	r3, [r1, #0]
 8006540:	4770      	bx	lr
 8006542:	4610      	mov	r0, r2
 8006544:	e7e9      	b.n	800651a <__lo0bits+0x2a>
 8006546:	2000      	movs	r0, #0
 8006548:	4770      	bx	lr
 800654a:	2020      	movs	r0, #32
 800654c:	4770      	bx	lr

0800654e <__i2b>:
 800654e:	b510      	push	{r4, lr}
 8006550:	460c      	mov	r4, r1
 8006552:	2101      	movs	r1, #1
 8006554:	f7ff ff27 	bl	80063a6 <_Balloc>
 8006558:	2201      	movs	r2, #1
 800655a:	6144      	str	r4, [r0, #20]
 800655c:	6102      	str	r2, [r0, #16]
 800655e:	bd10      	pop	{r4, pc}

08006560 <__multiply>:
 8006560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006564:	4614      	mov	r4, r2
 8006566:	690a      	ldr	r2, [r1, #16]
 8006568:	6923      	ldr	r3, [r4, #16]
 800656a:	429a      	cmp	r2, r3
 800656c:	bfb8      	it	lt
 800656e:	460b      	movlt	r3, r1
 8006570:	4688      	mov	r8, r1
 8006572:	bfbc      	itt	lt
 8006574:	46a0      	movlt	r8, r4
 8006576:	461c      	movlt	r4, r3
 8006578:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800657c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006580:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006584:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006588:	eb07 0609 	add.w	r6, r7, r9
 800658c:	42b3      	cmp	r3, r6
 800658e:	bfb8      	it	lt
 8006590:	3101      	addlt	r1, #1
 8006592:	f7ff ff08 	bl	80063a6 <_Balloc>
 8006596:	f100 0514 	add.w	r5, r0, #20
 800659a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800659e:	462b      	mov	r3, r5
 80065a0:	2200      	movs	r2, #0
 80065a2:	4573      	cmp	r3, lr
 80065a4:	d316      	bcc.n	80065d4 <__multiply+0x74>
 80065a6:	f104 0214 	add.w	r2, r4, #20
 80065aa:	f108 0114 	add.w	r1, r8, #20
 80065ae:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80065b2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	9b00      	ldr	r3, [sp, #0]
 80065ba:	9201      	str	r2, [sp, #4]
 80065bc:	4293      	cmp	r3, r2
 80065be:	d80c      	bhi.n	80065da <__multiply+0x7a>
 80065c0:	2e00      	cmp	r6, #0
 80065c2:	dd03      	ble.n	80065cc <__multiply+0x6c>
 80065c4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d05d      	beq.n	8006688 <__multiply+0x128>
 80065cc:	6106      	str	r6, [r0, #16]
 80065ce:	b003      	add	sp, #12
 80065d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d4:	f843 2b04 	str.w	r2, [r3], #4
 80065d8:	e7e3      	b.n	80065a2 <__multiply+0x42>
 80065da:	f8b2 b000 	ldrh.w	fp, [r2]
 80065de:	f1bb 0f00 	cmp.w	fp, #0
 80065e2:	d023      	beq.n	800662c <__multiply+0xcc>
 80065e4:	4689      	mov	r9, r1
 80065e6:	46ac      	mov	ip, r5
 80065e8:	f04f 0800 	mov.w	r8, #0
 80065ec:	f859 4b04 	ldr.w	r4, [r9], #4
 80065f0:	f8dc a000 	ldr.w	sl, [ip]
 80065f4:	b2a3      	uxth	r3, r4
 80065f6:	fa1f fa8a 	uxth.w	sl, sl
 80065fa:	fb0b a303 	mla	r3, fp, r3, sl
 80065fe:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006602:	f8dc 4000 	ldr.w	r4, [ip]
 8006606:	4443      	add	r3, r8
 8006608:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800660c:	fb0b 840a 	mla	r4, fp, sl, r8
 8006610:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006614:	46e2      	mov	sl, ip
 8006616:	b29b      	uxth	r3, r3
 8006618:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800661c:	454f      	cmp	r7, r9
 800661e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006622:	f84a 3b04 	str.w	r3, [sl], #4
 8006626:	d82b      	bhi.n	8006680 <__multiply+0x120>
 8006628:	f8cc 8004 	str.w	r8, [ip, #4]
 800662c:	9b01      	ldr	r3, [sp, #4]
 800662e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006632:	3204      	adds	r2, #4
 8006634:	f1ba 0f00 	cmp.w	sl, #0
 8006638:	d020      	beq.n	800667c <__multiply+0x11c>
 800663a:	682b      	ldr	r3, [r5, #0]
 800663c:	4689      	mov	r9, r1
 800663e:	46a8      	mov	r8, r5
 8006640:	f04f 0b00 	mov.w	fp, #0
 8006644:	f8b9 c000 	ldrh.w	ip, [r9]
 8006648:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800664c:	fb0a 440c 	mla	r4, sl, ip, r4
 8006650:	445c      	add	r4, fp
 8006652:	46c4      	mov	ip, r8
 8006654:	b29b      	uxth	r3, r3
 8006656:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800665a:	f84c 3b04 	str.w	r3, [ip], #4
 800665e:	f859 3b04 	ldr.w	r3, [r9], #4
 8006662:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006666:	0c1b      	lsrs	r3, r3, #16
 8006668:	fb0a b303 	mla	r3, sl, r3, fp
 800666c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006670:	454f      	cmp	r7, r9
 8006672:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006676:	d805      	bhi.n	8006684 <__multiply+0x124>
 8006678:	f8c8 3004 	str.w	r3, [r8, #4]
 800667c:	3504      	adds	r5, #4
 800667e:	e79b      	b.n	80065b8 <__multiply+0x58>
 8006680:	46d4      	mov	ip, sl
 8006682:	e7b3      	b.n	80065ec <__multiply+0x8c>
 8006684:	46e0      	mov	r8, ip
 8006686:	e7dd      	b.n	8006644 <__multiply+0xe4>
 8006688:	3e01      	subs	r6, #1
 800668a:	e799      	b.n	80065c0 <__multiply+0x60>

0800668c <__pow5mult>:
 800668c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006690:	4615      	mov	r5, r2
 8006692:	f012 0203 	ands.w	r2, r2, #3
 8006696:	4606      	mov	r6, r0
 8006698:	460f      	mov	r7, r1
 800669a:	d007      	beq.n	80066ac <__pow5mult+0x20>
 800669c:	3a01      	subs	r2, #1
 800669e:	4c21      	ldr	r4, [pc, #132]	; (8006724 <__pow5mult+0x98>)
 80066a0:	2300      	movs	r3, #0
 80066a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066a6:	f7ff fec9 	bl	800643c <__multadd>
 80066aa:	4607      	mov	r7, r0
 80066ac:	10ad      	asrs	r5, r5, #2
 80066ae:	d035      	beq.n	800671c <__pow5mult+0x90>
 80066b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80066b2:	b93c      	cbnz	r4, 80066c4 <__pow5mult+0x38>
 80066b4:	2010      	movs	r0, #16
 80066b6:	f7ff fe63 	bl	8006380 <malloc>
 80066ba:	6270      	str	r0, [r6, #36]	; 0x24
 80066bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80066c0:	6004      	str	r4, [r0, #0]
 80066c2:	60c4      	str	r4, [r0, #12]
 80066c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80066c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80066cc:	b94c      	cbnz	r4, 80066e2 <__pow5mult+0x56>
 80066ce:	f240 2171 	movw	r1, #625	; 0x271
 80066d2:	4630      	mov	r0, r6
 80066d4:	f7ff ff3b 	bl	800654e <__i2b>
 80066d8:	2300      	movs	r3, #0
 80066da:	f8c8 0008 	str.w	r0, [r8, #8]
 80066de:	4604      	mov	r4, r0
 80066e0:	6003      	str	r3, [r0, #0]
 80066e2:	f04f 0800 	mov.w	r8, #0
 80066e6:	07eb      	lsls	r3, r5, #31
 80066e8:	d50a      	bpl.n	8006700 <__pow5mult+0x74>
 80066ea:	4639      	mov	r1, r7
 80066ec:	4622      	mov	r2, r4
 80066ee:	4630      	mov	r0, r6
 80066f0:	f7ff ff36 	bl	8006560 <__multiply>
 80066f4:	4639      	mov	r1, r7
 80066f6:	4681      	mov	r9, r0
 80066f8:	4630      	mov	r0, r6
 80066fa:	f7ff fe88 	bl	800640e <_Bfree>
 80066fe:	464f      	mov	r7, r9
 8006700:	106d      	asrs	r5, r5, #1
 8006702:	d00b      	beq.n	800671c <__pow5mult+0x90>
 8006704:	6820      	ldr	r0, [r4, #0]
 8006706:	b938      	cbnz	r0, 8006718 <__pow5mult+0x8c>
 8006708:	4622      	mov	r2, r4
 800670a:	4621      	mov	r1, r4
 800670c:	4630      	mov	r0, r6
 800670e:	f7ff ff27 	bl	8006560 <__multiply>
 8006712:	6020      	str	r0, [r4, #0]
 8006714:	f8c0 8000 	str.w	r8, [r0]
 8006718:	4604      	mov	r4, r0
 800671a:	e7e4      	b.n	80066e6 <__pow5mult+0x5a>
 800671c:	4638      	mov	r0, r7
 800671e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006722:	bf00      	nop
 8006724:	080074c8 	.word	0x080074c8

08006728 <__lshift>:
 8006728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800672c:	460c      	mov	r4, r1
 800672e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006732:	6923      	ldr	r3, [r4, #16]
 8006734:	6849      	ldr	r1, [r1, #4]
 8006736:	eb0a 0903 	add.w	r9, sl, r3
 800673a:	68a3      	ldr	r3, [r4, #8]
 800673c:	4607      	mov	r7, r0
 800673e:	4616      	mov	r6, r2
 8006740:	f109 0501 	add.w	r5, r9, #1
 8006744:	42ab      	cmp	r3, r5
 8006746:	db32      	blt.n	80067ae <__lshift+0x86>
 8006748:	4638      	mov	r0, r7
 800674a:	f7ff fe2c 	bl	80063a6 <_Balloc>
 800674e:	2300      	movs	r3, #0
 8006750:	4680      	mov	r8, r0
 8006752:	f100 0114 	add.w	r1, r0, #20
 8006756:	461a      	mov	r2, r3
 8006758:	4553      	cmp	r3, sl
 800675a:	db2b      	blt.n	80067b4 <__lshift+0x8c>
 800675c:	6920      	ldr	r0, [r4, #16]
 800675e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006762:	f104 0314 	add.w	r3, r4, #20
 8006766:	f016 021f 	ands.w	r2, r6, #31
 800676a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800676e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006772:	d025      	beq.n	80067c0 <__lshift+0x98>
 8006774:	f1c2 0e20 	rsb	lr, r2, #32
 8006778:	2000      	movs	r0, #0
 800677a:	681e      	ldr	r6, [r3, #0]
 800677c:	468a      	mov	sl, r1
 800677e:	4096      	lsls	r6, r2
 8006780:	4330      	orrs	r0, r6
 8006782:	f84a 0b04 	str.w	r0, [sl], #4
 8006786:	f853 0b04 	ldr.w	r0, [r3], #4
 800678a:	459c      	cmp	ip, r3
 800678c:	fa20 f00e 	lsr.w	r0, r0, lr
 8006790:	d814      	bhi.n	80067bc <__lshift+0x94>
 8006792:	6048      	str	r0, [r1, #4]
 8006794:	b108      	cbz	r0, 800679a <__lshift+0x72>
 8006796:	f109 0502 	add.w	r5, r9, #2
 800679a:	3d01      	subs	r5, #1
 800679c:	4638      	mov	r0, r7
 800679e:	f8c8 5010 	str.w	r5, [r8, #16]
 80067a2:	4621      	mov	r1, r4
 80067a4:	f7ff fe33 	bl	800640e <_Bfree>
 80067a8:	4640      	mov	r0, r8
 80067aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ae:	3101      	adds	r1, #1
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	e7c7      	b.n	8006744 <__lshift+0x1c>
 80067b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80067b8:	3301      	adds	r3, #1
 80067ba:	e7cd      	b.n	8006758 <__lshift+0x30>
 80067bc:	4651      	mov	r1, sl
 80067be:	e7dc      	b.n	800677a <__lshift+0x52>
 80067c0:	3904      	subs	r1, #4
 80067c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80067c6:	f841 2f04 	str.w	r2, [r1, #4]!
 80067ca:	459c      	cmp	ip, r3
 80067cc:	d8f9      	bhi.n	80067c2 <__lshift+0x9a>
 80067ce:	e7e4      	b.n	800679a <__lshift+0x72>

080067d0 <__mcmp>:
 80067d0:	6903      	ldr	r3, [r0, #16]
 80067d2:	690a      	ldr	r2, [r1, #16]
 80067d4:	1a9b      	subs	r3, r3, r2
 80067d6:	b530      	push	{r4, r5, lr}
 80067d8:	d10c      	bne.n	80067f4 <__mcmp+0x24>
 80067da:	0092      	lsls	r2, r2, #2
 80067dc:	3014      	adds	r0, #20
 80067de:	3114      	adds	r1, #20
 80067e0:	1884      	adds	r4, r0, r2
 80067e2:	4411      	add	r1, r2
 80067e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80067e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80067ec:	4295      	cmp	r5, r2
 80067ee:	d003      	beq.n	80067f8 <__mcmp+0x28>
 80067f0:	d305      	bcc.n	80067fe <__mcmp+0x2e>
 80067f2:	2301      	movs	r3, #1
 80067f4:	4618      	mov	r0, r3
 80067f6:	bd30      	pop	{r4, r5, pc}
 80067f8:	42a0      	cmp	r0, r4
 80067fa:	d3f3      	bcc.n	80067e4 <__mcmp+0x14>
 80067fc:	e7fa      	b.n	80067f4 <__mcmp+0x24>
 80067fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006802:	e7f7      	b.n	80067f4 <__mcmp+0x24>

08006804 <__mdiff>:
 8006804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006808:	460d      	mov	r5, r1
 800680a:	4607      	mov	r7, r0
 800680c:	4611      	mov	r1, r2
 800680e:	4628      	mov	r0, r5
 8006810:	4614      	mov	r4, r2
 8006812:	f7ff ffdd 	bl	80067d0 <__mcmp>
 8006816:	1e06      	subs	r6, r0, #0
 8006818:	d108      	bne.n	800682c <__mdiff+0x28>
 800681a:	4631      	mov	r1, r6
 800681c:	4638      	mov	r0, r7
 800681e:	f7ff fdc2 	bl	80063a6 <_Balloc>
 8006822:	2301      	movs	r3, #1
 8006824:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800682c:	bfa4      	itt	ge
 800682e:	4623      	movge	r3, r4
 8006830:	462c      	movge	r4, r5
 8006832:	4638      	mov	r0, r7
 8006834:	6861      	ldr	r1, [r4, #4]
 8006836:	bfa6      	itte	ge
 8006838:	461d      	movge	r5, r3
 800683a:	2600      	movge	r6, #0
 800683c:	2601      	movlt	r6, #1
 800683e:	f7ff fdb2 	bl	80063a6 <_Balloc>
 8006842:	692b      	ldr	r3, [r5, #16]
 8006844:	60c6      	str	r6, [r0, #12]
 8006846:	6926      	ldr	r6, [r4, #16]
 8006848:	f105 0914 	add.w	r9, r5, #20
 800684c:	f104 0214 	add.w	r2, r4, #20
 8006850:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006854:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006858:	f100 0514 	add.w	r5, r0, #20
 800685c:	f04f 0e00 	mov.w	lr, #0
 8006860:	f852 ab04 	ldr.w	sl, [r2], #4
 8006864:	f859 4b04 	ldr.w	r4, [r9], #4
 8006868:	fa1e f18a 	uxtah	r1, lr, sl
 800686c:	b2a3      	uxth	r3, r4
 800686e:	1ac9      	subs	r1, r1, r3
 8006870:	0c23      	lsrs	r3, r4, #16
 8006872:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006876:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800687a:	b289      	uxth	r1, r1
 800687c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006880:	45c8      	cmp	r8, r9
 8006882:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006886:	4694      	mov	ip, r2
 8006888:	f845 3b04 	str.w	r3, [r5], #4
 800688c:	d8e8      	bhi.n	8006860 <__mdiff+0x5c>
 800688e:	45bc      	cmp	ip, r7
 8006890:	d304      	bcc.n	800689c <__mdiff+0x98>
 8006892:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006896:	b183      	cbz	r3, 80068ba <__mdiff+0xb6>
 8006898:	6106      	str	r6, [r0, #16]
 800689a:	e7c5      	b.n	8006828 <__mdiff+0x24>
 800689c:	f85c 1b04 	ldr.w	r1, [ip], #4
 80068a0:	fa1e f381 	uxtah	r3, lr, r1
 80068a4:	141a      	asrs	r2, r3, #16
 80068a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068b0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80068b4:	f845 3b04 	str.w	r3, [r5], #4
 80068b8:	e7e9      	b.n	800688e <__mdiff+0x8a>
 80068ba:	3e01      	subs	r6, #1
 80068bc:	e7e9      	b.n	8006892 <__mdiff+0x8e>

080068be <__d2b>:
 80068be:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80068c2:	460e      	mov	r6, r1
 80068c4:	2101      	movs	r1, #1
 80068c6:	ec59 8b10 	vmov	r8, r9, d0
 80068ca:	4615      	mov	r5, r2
 80068cc:	f7ff fd6b 	bl	80063a6 <_Balloc>
 80068d0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80068d4:	4607      	mov	r7, r0
 80068d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068da:	bb34      	cbnz	r4, 800692a <__d2b+0x6c>
 80068dc:	9301      	str	r3, [sp, #4]
 80068de:	f1b8 0300 	subs.w	r3, r8, #0
 80068e2:	d027      	beq.n	8006934 <__d2b+0x76>
 80068e4:	a802      	add	r0, sp, #8
 80068e6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80068ea:	f7ff fe01 	bl	80064f0 <__lo0bits>
 80068ee:	9900      	ldr	r1, [sp, #0]
 80068f0:	b1f0      	cbz	r0, 8006930 <__d2b+0x72>
 80068f2:	9a01      	ldr	r2, [sp, #4]
 80068f4:	f1c0 0320 	rsb	r3, r0, #32
 80068f8:	fa02 f303 	lsl.w	r3, r2, r3
 80068fc:	430b      	orrs	r3, r1
 80068fe:	40c2      	lsrs	r2, r0
 8006900:	617b      	str	r3, [r7, #20]
 8006902:	9201      	str	r2, [sp, #4]
 8006904:	9b01      	ldr	r3, [sp, #4]
 8006906:	61bb      	str	r3, [r7, #24]
 8006908:	2b00      	cmp	r3, #0
 800690a:	bf14      	ite	ne
 800690c:	2102      	movne	r1, #2
 800690e:	2101      	moveq	r1, #1
 8006910:	6139      	str	r1, [r7, #16]
 8006912:	b1c4      	cbz	r4, 8006946 <__d2b+0x88>
 8006914:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006918:	4404      	add	r4, r0
 800691a:	6034      	str	r4, [r6, #0]
 800691c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006920:	6028      	str	r0, [r5, #0]
 8006922:	4638      	mov	r0, r7
 8006924:	b003      	add	sp, #12
 8006926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800692a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800692e:	e7d5      	b.n	80068dc <__d2b+0x1e>
 8006930:	6179      	str	r1, [r7, #20]
 8006932:	e7e7      	b.n	8006904 <__d2b+0x46>
 8006934:	a801      	add	r0, sp, #4
 8006936:	f7ff fddb 	bl	80064f0 <__lo0bits>
 800693a:	9b01      	ldr	r3, [sp, #4]
 800693c:	617b      	str	r3, [r7, #20]
 800693e:	2101      	movs	r1, #1
 8006940:	6139      	str	r1, [r7, #16]
 8006942:	3020      	adds	r0, #32
 8006944:	e7e5      	b.n	8006912 <__d2b+0x54>
 8006946:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800694a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800694e:	6030      	str	r0, [r6, #0]
 8006950:	6918      	ldr	r0, [r3, #16]
 8006952:	f7ff fdae 	bl	80064b2 <__hi0bits>
 8006956:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800695a:	e7e1      	b.n	8006920 <__d2b+0x62>

0800695c <_calloc_r>:
 800695c:	b538      	push	{r3, r4, r5, lr}
 800695e:	fb02 f401 	mul.w	r4, r2, r1
 8006962:	4621      	mov	r1, r4
 8006964:	f000 f856 	bl	8006a14 <_malloc_r>
 8006968:	4605      	mov	r5, r0
 800696a:	b118      	cbz	r0, 8006974 <_calloc_r+0x18>
 800696c:	4622      	mov	r2, r4
 800696e:	2100      	movs	r1, #0
 8006970:	f7fe f96e 	bl	8004c50 <memset>
 8006974:	4628      	mov	r0, r5
 8006976:	bd38      	pop	{r3, r4, r5, pc}

08006978 <_free_r>:
 8006978:	b538      	push	{r3, r4, r5, lr}
 800697a:	4605      	mov	r5, r0
 800697c:	2900      	cmp	r1, #0
 800697e:	d045      	beq.n	8006a0c <_free_r+0x94>
 8006980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006984:	1f0c      	subs	r4, r1, #4
 8006986:	2b00      	cmp	r3, #0
 8006988:	bfb8      	it	lt
 800698a:	18e4      	addlt	r4, r4, r3
 800698c:	f000 fc4a 	bl	8007224 <__malloc_lock>
 8006990:	4a1f      	ldr	r2, [pc, #124]	; (8006a10 <_free_r+0x98>)
 8006992:	6813      	ldr	r3, [r2, #0]
 8006994:	4610      	mov	r0, r2
 8006996:	b933      	cbnz	r3, 80069a6 <_free_r+0x2e>
 8006998:	6063      	str	r3, [r4, #4]
 800699a:	6014      	str	r4, [r2, #0]
 800699c:	4628      	mov	r0, r5
 800699e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069a2:	f000 bc40 	b.w	8007226 <__malloc_unlock>
 80069a6:	42a3      	cmp	r3, r4
 80069a8:	d90c      	bls.n	80069c4 <_free_r+0x4c>
 80069aa:	6821      	ldr	r1, [r4, #0]
 80069ac:	1862      	adds	r2, r4, r1
 80069ae:	4293      	cmp	r3, r2
 80069b0:	bf04      	itt	eq
 80069b2:	681a      	ldreq	r2, [r3, #0]
 80069b4:	685b      	ldreq	r3, [r3, #4]
 80069b6:	6063      	str	r3, [r4, #4]
 80069b8:	bf04      	itt	eq
 80069ba:	1852      	addeq	r2, r2, r1
 80069bc:	6022      	streq	r2, [r4, #0]
 80069be:	6004      	str	r4, [r0, #0]
 80069c0:	e7ec      	b.n	800699c <_free_r+0x24>
 80069c2:	4613      	mov	r3, r2
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	b10a      	cbz	r2, 80069cc <_free_r+0x54>
 80069c8:	42a2      	cmp	r2, r4
 80069ca:	d9fa      	bls.n	80069c2 <_free_r+0x4a>
 80069cc:	6819      	ldr	r1, [r3, #0]
 80069ce:	1858      	adds	r0, r3, r1
 80069d0:	42a0      	cmp	r0, r4
 80069d2:	d10b      	bne.n	80069ec <_free_r+0x74>
 80069d4:	6820      	ldr	r0, [r4, #0]
 80069d6:	4401      	add	r1, r0
 80069d8:	1858      	adds	r0, r3, r1
 80069da:	4282      	cmp	r2, r0
 80069dc:	6019      	str	r1, [r3, #0]
 80069de:	d1dd      	bne.n	800699c <_free_r+0x24>
 80069e0:	6810      	ldr	r0, [r2, #0]
 80069e2:	6852      	ldr	r2, [r2, #4]
 80069e4:	605a      	str	r2, [r3, #4]
 80069e6:	4401      	add	r1, r0
 80069e8:	6019      	str	r1, [r3, #0]
 80069ea:	e7d7      	b.n	800699c <_free_r+0x24>
 80069ec:	d902      	bls.n	80069f4 <_free_r+0x7c>
 80069ee:	230c      	movs	r3, #12
 80069f0:	602b      	str	r3, [r5, #0]
 80069f2:	e7d3      	b.n	800699c <_free_r+0x24>
 80069f4:	6820      	ldr	r0, [r4, #0]
 80069f6:	1821      	adds	r1, r4, r0
 80069f8:	428a      	cmp	r2, r1
 80069fa:	bf04      	itt	eq
 80069fc:	6811      	ldreq	r1, [r2, #0]
 80069fe:	6852      	ldreq	r2, [r2, #4]
 8006a00:	6062      	str	r2, [r4, #4]
 8006a02:	bf04      	itt	eq
 8006a04:	1809      	addeq	r1, r1, r0
 8006a06:	6021      	streq	r1, [r4, #0]
 8006a08:	605c      	str	r4, [r3, #4]
 8006a0a:	e7c7      	b.n	800699c <_free_r+0x24>
 8006a0c:	bd38      	pop	{r3, r4, r5, pc}
 8006a0e:	bf00      	nop
 8006a10:	200001fc 	.word	0x200001fc

08006a14 <_malloc_r>:
 8006a14:	b570      	push	{r4, r5, r6, lr}
 8006a16:	1ccd      	adds	r5, r1, #3
 8006a18:	f025 0503 	bic.w	r5, r5, #3
 8006a1c:	3508      	adds	r5, #8
 8006a1e:	2d0c      	cmp	r5, #12
 8006a20:	bf38      	it	cc
 8006a22:	250c      	movcc	r5, #12
 8006a24:	2d00      	cmp	r5, #0
 8006a26:	4606      	mov	r6, r0
 8006a28:	db01      	blt.n	8006a2e <_malloc_r+0x1a>
 8006a2a:	42a9      	cmp	r1, r5
 8006a2c:	d903      	bls.n	8006a36 <_malloc_r+0x22>
 8006a2e:	230c      	movs	r3, #12
 8006a30:	6033      	str	r3, [r6, #0]
 8006a32:	2000      	movs	r0, #0
 8006a34:	bd70      	pop	{r4, r5, r6, pc}
 8006a36:	f000 fbf5 	bl	8007224 <__malloc_lock>
 8006a3a:	4a21      	ldr	r2, [pc, #132]	; (8006ac0 <_malloc_r+0xac>)
 8006a3c:	6814      	ldr	r4, [r2, #0]
 8006a3e:	4621      	mov	r1, r4
 8006a40:	b991      	cbnz	r1, 8006a68 <_malloc_r+0x54>
 8006a42:	4c20      	ldr	r4, [pc, #128]	; (8006ac4 <_malloc_r+0xb0>)
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	b91b      	cbnz	r3, 8006a50 <_malloc_r+0x3c>
 8006a48:	4630      	mov	r0, r6
 8006a4a:	f000 f97d 	bl	8006d48 <_sbrk_r>
 8006a4e:	6020      	str	r0, [r4, #0]
 8006a50:	4629      	mov	r1, r5
 8006a52:	4630      	mov	r0, r6
 8006a54:	f000 f978 	bl	8006d48 <_sbrk_r>
 8006a58:	1c43      	adds	r3, r0, #1
 8006a5a:	d124      	bne.n	8006aa6 <_malloc_r+0x92>
 8006a5c:	230c      	movs	r3, #12
 8006a5e:	6033      	str	r3, [r6, #0]
 8006a60:	4630      	mov	r0, r6
 8006a62:	f000 fbe0 	bl	8007226 <__malloc_unlock>
 8006a66:	e7e4      	b.n	8006a32 <_malloc_r+0x1e>
 8006a68:	680b      	ldr	r3, [r1, #0]
 8006a6a:	1b5b      	subs	r3, r3, r5
 8006a6c:	d418      	bmi.n	8006aa0 <_malloc_r+0x8c>
 8006a6e:	2b0b      	cmp	r3, #11
 8006a70:	d90f      	bls.n	8006a92 <_malloc_r+0x7e>
 8006a72:	600b      	str	r3, [r1, #0]
 8006a74:	50cd      	str	r5, [r1, r3]
 8006a76:	18cc      	adds	r4, r1, r3
 8006a78:	4630      	mov	r0, r6
 8006a7a:	f000 fbd4 	bl	8007226 <__malloc_unlock>
 8006a7e:	f104 000b 	add.w	r0, r4, #11
 8006a82:	1d23      	adds	r3, r4, #4
 8006a84:	f020 0007 	bic.w	r0, r0, #7
 8006a88:	1ac3      	subs	r3, r0, r3
 8006a8a:	d0d3      	beq.n	8006a34 <_malloc_r+0x20>
 8006a8c:	425a      	negs	r2, r3
 8006a8e:	50e2      	str	r2, [r4, r3]
 8006a90:	e7d0      	b.n	8006a34 <_malloc_r+0x20>
 8006a92:	428c      	cmp	r4, r1
 8006a94:	684b      	ldr	r3, [r1, #4]
 8006a96:	bf16      	itet	ne
 8006a98:	6063      	strne	r3, [r4, #4]
 8006a9a:	6013      	streq	r3, [r2, #0]
 8006a9c:	460c      	movne	r4, r1
 8006a9e:	e7eb      	b.n	8006a78 <_malloc_r+0x64>
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	6849      	ldr	r1, [r1, #4]
 8006aa4:	e7cc      	b.n	8006a40 <_malloc_r+0x2c>
 8006aa6:	1cc4      	adds	r4, r0, #3
 8006aa8:	f024 0403 	bic.w	r4, r4, #3
 8006aac:	42a0      	cmp	r0, r4
 8006aae:	d005      	beq.n	8006abc <_malloc_r+0xa8>
 8006ab0:	1a21      	subs	r1, r4, r0
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	f000 f948 	bl	8006d48 <_sbrk_r>
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d0cf      	beq.n	8006a5c <_malloc_r+0x48>
 8006abc:	6025      	str	r5, [r4, #0]
 8006abe:	e7db      	b.n	8006a78 <_malloc_r+0x64>
 8006ac0:	200001fc 	.word	0x200001fc
 8006ac4:	20000200 	.word	0x20000200

08006ac8 <__sfputc_r>:
 8006ac8:	6893      	ldr	r3, [r2, #8]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	b410      	push	{r4}
 8006ad0:	6093      	str	r3, [r2, #8]
 8006ad2:	da08      	bge.n	8006ae6 <__sfputc_r+0x1e>
 8006ad4:	6994      	ldr	r4, [r2, #24]
 8006ad6:	42a3      	cmp	r3, r4
 8006ad8:	db01      	blt.n	8006ade <__sfputc_r+0x16>
 8006ada:	290a      	cmp	r1, #10
 8006adc:	d103      	bne.n	8006ae6 <__sfputc_r+0x1e>
 8006ade:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ae2:	f000 b985 	b.w	8006df0 <__swbuf_r>
 8006ae6:	6813      	ldr	r3, [r2, #0]
 8006ae8:	1c58      	adds	r0, r3, #1
 8006aea:	6010      	str	r0, [r2, #0]
 8006aec:	7019      	strb	r1, [r3, #0]
 8006aee:	4608      	mov	r0, r1
 8006af0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <__sfputs_r>:
 8006af6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af8:	4606      	mov	r6, r0
 8006afa:	460f      	mov	r7, r1
 8006afc:	4614      	mov	r4, r2
 8006afe:	18d5      	adds	r5, r2, r3
 8006b00:	42ac      	cmp	r4, r5
 8006b02:	d101      	bne.n	8006b08 <__sfputs_r+0x12>
 8006b04:	2000      	movs	r0, #0
 8006b06:	e007      	b.n	8006b18 <__sfputs_r+0x22>
 8006b08:	463a      	mov	r2, r7
 8006b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b0e:	4630      	mov	r0, r6
 8006b10:	f7ff ffda 	bl	8006ac8 <__sfputc_r>
 8006b14:	1c43      	adds	r3, r0, #1
 8006b16:	d1f3      	bne.n	8006b00 <__sfputs_r+0xa>
 8006b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b1c <_vfiprintf_r>:
 8006b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b20:	460c      	mov	r4, r1
 8006b22:	b09d      	sub	sp, #116	; 0x74
 8006b24:	4617      	mov	r7, r2
 8006b26:	461d      	mov	r5, r3
 8006b28:	4606      	mov	r6, r0
 8006b2a:	b118      	cbz	r0, 8006b34 <_vfiprintf_r+0x18>
 8006b2c:	6983      	ldr	r3, [r0, #24]
 8006b2e:	b90b      	cbnz	r3, 8006b34 <_vfiprintf_r+0x18>
 8006b30:	f7ff fb8e 	bl	8006250 <__sinit>
 8006b34:	4b7c      	ldr	r3, [pc, #496]	; (8006d28 <_vfiprintf_r+0x20c>)
 8006b36:	429c      	cmp	r4, r3
 8006b38:	d158      	bne.n	8006bec <_vfiprintf_r+0xd0>
 8006b3a:	6874      	ldr	r4, [r6, #4]
 8006b3c:	89a3      	ldrh	r3, [r4, #12]
 8006b3e:	0718      	lsls	r0, r3, #28
 8006b40:	d55e      	bpl.n	8006c00 <_vfiprintf_r+0xe4>
 8006b42:	6923      	ldr	r3, [r4, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d05b      	beq.n	8006c00 <_vfiprintf_r+0xe4>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b4c:	2320      	movs	r3, #32
 8006b4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b52:	2330      	movs	r3, #48	; 0x30
 8006b54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b58:	9503      	str	r5, [sp, #12]
 8006b5a:	f04f 0b01 	mov.w	fp, #1
 8006b5e:	46b8      	mov	r8, r7
 8006b60:	4645      	mov	r5, r8
 8006b62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006b66:	b10b      	cbz	r3, 8006b6c <_vfiprintf_r+0x50>
 8006b68:	2b25      	cmp	r3, #37	; 0x25
 8006b6a:	d154      	bne.n	8006c16 <_vfiprintf_r+0xfa>
 8006b6c:	ebb8 0a07 	subs.w	sl, r8, r7
 8006b70:	d00b      	beq.n	8006b8a <_vfiprintf_r+0x6e>
 8006b72:	4653      	mov	r3, sl
 8006b74:	463a      	mov	r2, r7
 8006b76:	4621      	mov	r1, r4
 8006b78:	4630      	mov	r0, r6
 8006b7a:	f7ff ffbc 	bl	8006af6 <__sfputs_r>
 8006b7e:	3001      	adds	r0, #1
 8006b80:	f000 80c2 	beq.w	8006d08 <_vfiprintf_r+0x1ec>
 8006b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b86:	4453      	add	r3, sl
 8006b88:	9309      	str	r3, [sp, #36]	; 0x24
 8006b8a:	f898 3000 	ldrb.w	r3, [r8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 80ba 	beq.w	8006d08 <_vfiprintf_r+0x1ec>
 8006b94:	2300      	movs	r3, #0
 8006b96:	f04f 32ff 	mov.w	r2, #4294967295
 8006b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b9e:	9304      	str	r3, [sp, #16]
 8006ba0:	9307      	str	r3, [sp, #28]
 8006ba2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ba6:	931a      	str	r3, [sp, #104]	; 0x68
 8006ba8:	46a8      	mov	r8, r5
 8006baa:	2205      	movs	r2, #5
 8006bac:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006bb0:	485e      	ldr	r0, [pc, #376]	; (8006d2c <_vfiprintf_r+0x210>)
 8006bb2:	f7f9 fb15 	bl	80001e0 <memchr>
 8006bb6:	9b04      	ldr	r3, [sp, #16]
 8006bb8:	bb78      	cbnz	r0, 8006c1a <_vfiprintf_r+0xfe>
 8006bba:	06d9      	lsls	r1, r3, #27
 8006bbc:	bf44      	itt	mi
 8006bbe:	2220      	movmi	r2, #32
 8006bc0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006bc4:	071a      	lsls	r2, r3, #28
 8006bc6:	bf44      	itt	mi
 8006bc8:	222b      	movmi	r2, #43	; 0x2b
 8006bca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006bce:	782a      	ldrb	r2, [r5, #0]
 8006bd0:	2a2a      	cmp	r2, #42	; 0x2a
 8006bd2:	d02a      	beq.n	8006c2a <_vfiprintf_r+0x10e>
 8006bd4:	9a07      	ldr	r2, [sp, #28]
 8006bd6:	46a8      	mov	r8, r5
 8006bd8:	2000      	movs	r0, #0
 8006bda:	250a      	movs	r5, #10
 8006bdc:	4641      	mov	r1, r8
 8006bde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006be2:	3b30      	subs	r3, #48	; 0x30
 8006be4:	2b09      	cmp	r3, #9
 8006be6:	d969      	bls.n	8006cbc <_vfiprintf_r+0x1a0>
 8006be8:	b360      	cbz	r0, 8006c44 <_vfiprintf_r+0x128>
 8006bea:	e024      	b.n	8006c36 <_vfiprintf_r+0x11a>
 8006bec:	4b50      	ldr	r3, [pc, #320]	; (8006d30 <_vfiprintf_r+0x214>)
 8006bee:	429c      	cmp	r4, r3
 8006bf0:	d101      	bne.n	8006bf6 <_vfiprintf_r+0xda>
 8006bf2:	68b4      	ldr	r4, [r6, #8]
 8006bf4:	e7a2      	b.n	8006b3c <_vfiprintf_r+0x20>
 8006bf6:	4b4f      	ldr	r3, [pc, #316]	; (8006d34 <_vfiprintf_r+0x218>)
 8006bf8:	429c      	cmp	r4, r3
 8006bfa:	bf08      	it	eq
 8006bfc:	68f4      	ldreq	r4, [r6, #12]
 8006bfe:	e79d      	b.n	8006b3c <_vfiprintf_r+0x20>
 8006c00:	4621      	mov	r1, r4
 8006c02:	4630      	mov	r0, r6
 8006c04:	f000 f958 	bl	8006eb8 <__swsetup_r>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	d09d      	beq.n	8006b48 <_vfiprintf_r+0x2c>
 8006c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c10:	b01d      	add	sp, #116	; 0x74
 8006c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c16:	46a8      	mov	r8, r5
 8006c18:	e7a2      	b.n	8006b60 <_vfiprintf_r+0x44>
 8006c1a:	4a44      	ldr	r2, [pc, #272]	; (8006d2c <_vfiprintf_r+0x210>)
 8006c1c:	1a80      	subs	r0, r0, r2
 8006c1e:	fa0b f000 	lsl.w	r0, fp, r0
 8006c22:	4318      	orrs	r0, r3
 8006c24:	9004      	str	r0, [sp, #16]
 8006c26:	4645      	mov	r5, r8
 8006c28:	e7be      	b.n	8006ba8 <_vfiprintf_r+0x8c>
 8006c2a:	9a03      	ldr	r2, [sp, #12]
 8006c2c:	1d11      	adds	r1, r2, #4
 8006c2e:	6812      	ldr	r2, [r2, #0]
 8006c30:	9103      	str	r1, [sp, #12]
 8006c32:	2a00      	cmp	r2, #0
 8006c34:	db01      	blt.n	8006c3a <_vfiprintf_r+0x11e>
 8006c36:	9207      	str	r2, [sp, #28]
 8006c38:	e004      	b.n	8006c44 <_vfiprintf_r+0x128>
 8006c3a:	4252      	negs	r2, r2
 8006c3c:	f043 0302 	orr.w	r3, r3, #2
 8006c40:	9207      	str	r2, [sp, #28]
 8006c42:	9304      	str	r3, [sp, #16]
 8006c44:	f898 3000 	ldrb.w	r3, [r8]
 8006c48:	2b2e      	cmp	r3, #46	; 0x2e
 8006c4a:	d10e      	bne.n	8006c6a <_vfiprintf_r+0x14e>
 8006c4c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006c50:	2b2a      	cmp	r3, #42	; 0x2a
 8006c52:	d138      	bne.n	8006cc6 <_vfiprintf_r+0x1aa>
 8006c54:	9b03      	ldr	r3, [sp, #12]
 8006c56:	1d1a      	adds	r2, r3, #4
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	9203      	str	r2, [sp, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	bfb8      	it	lt
 8006c60:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c64:	f108 0802 	add.w	r8, r8, #2
 8006c68:	9305      	str	r3, [sp, #20]
 8006c6a:	4d33      	ldr	r5, [pc, #204]	; (8006d38 <_vfiprintf_r+0x21c>)
 8006c6c:	f898 1000 	ldrb.w	r1, [r8]
 8006c70:	2203      	movs	r2, #3
 8006c72:	4628      	mov	r0, r5
 8006c74:	f7f9 fab4 	bl	80001e0 <memchr>
 8006c78:	b140      	cbz	r0, 8006c8c <_vfiprintf_r+0x170>
 8006c7a:	2340      	movs	r3, #64	; 0x40
 8006c7c:	1b40      	subs	r0, r0, r5
 8006c7e:	fa03 f000 	lsl.w	r0, r3, r0
 8006c82:	9b04      	ldr	r3, [sp, #16]
 8006c84:	4303      	orrs	r3, r0
 8006c86:	f108 0801 	add.w	r8, r8, #1
 8006c8a:	9304      	str	r3, [sp, #16]
 8006c8c:	f898 1000 	ldrb.w	r1, [r8]
 8006c90:	482a      	ldr	r0, [pc, #168]	; (8006d3c <_vfiprintf_r+0x220>)
 8006c92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c96:	2206      	movs	r2, #6
 8006c98:	f108 0701 	add.w	r7, r8, #1
 8006c9c:	f7f9 faa0 	bl	80001e0 <memchr>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	d037      	beq.n	8006d14 <_vfiprintf_r+0x1f8>
 8006ca4:	4b26      	ldr	r3, [pc, #152]	; (8006d40 <_vfiprintf_r+0x224>)
 8006ca6:	bb1b      	cbnz	r3, 8006cf0 <_vfiprintf_r+0x1d4>
 8006ca8:	9b03      	ldr	r3, [sp, #12]
 8006caa:	3307      	adds	r3, #7
 8006cac:	f023 0307 	bic.w	r3, r3, #7
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	9303      	str	r3, [sp, #12]
 8006cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb6:	444b      	add	r3, r9
 8006cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cba:	e750      	b.n	8006b5e <_vfiprintf_r+0x42>
 8006cbc:	fb05 3202 	mla	r2, r5, r2, r3
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	4688      	mov	r8, r1
 8006cc4:	e78a      	b.n	8006bdc <_vfiprintf_r+0xc0>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	f108 0801 	add.w	r8, r8, #1
 8006ccc:	9305      	str	r3, [sp, #20]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	250a      	movs	r5, #10
 8006cd2:	4640      	mov	r0, r8
 8006cd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cd8:	3a30      	subs	r2, #48	; 0x30
 8006cda:	2a09      	cmp	r2, #9
 8006cdc:	d903      	bls.n	8006ce6 <_vfiprintf_r+0x1ca>
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0c3      	beq.n	8006c6a <_vfiprintf_r+0x14e>
 8006ce2:	9105      	str	r1, [sp, #20]
 8006ce4:	e7c1      	b.n	8006c6a <_vfiprintf_r+0x14e>
 8006ce6:	fb05 2101 	mla	r1, r5, r1, r2
 8006cea:	2301      	movs	r3, #1
 8006cec:	4680      	mov	r8, r0
 8006cee:	e7f0      	b.n	8006cd2 <_vfiprintf_r+0x1b6>
 8006cf0:	ab03      	add	r3, sp, #12
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	4622      	mov	r2, r4
 8006cf6:	4b13      	ldr	r3, [pc, #76]	; (8006d44 <_vfiprintf_r+0x228>)
 8006cf8:	a904      	add	r1, sp, #16
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	f7fe f844 	bl	8004d88 <_printf_float>
 8006d00:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006d04:	4681      	mov	r9, r0
 8006d06:	d1d5      	bne.n	8006cb4 <_vfiprintf_r+0x198>
 8006d08:	89a3      	ldrh	r3, [r4, #12]
 8006d0a:	065b      	lsls	r3, r3, #25
 8006d0c:	f53f af7e 	bmi.w	8006c0c <_vfiprintf_r+0xf0>
 8006d10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d12:	e77d      	b.n	8006c10 <_vfiprintf_r+0xf4>
 8006d14:	ab03      	add	r3, sp, #12
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	4622      	mov	r2, r4
 8006d1a:	4b0a      	ldr	r3, [pc, #40]	; (8006d44 <_vfiprintf_r+0x228>)
 8006d1c:	a904      	add	r1, sp, #16
 8006d1e:	4630      	mov	r0, r6
 8006d20:	f7fe fae8 	bl	80052f4 <_printf_i>
 8006d24:	e7ec      	b.n	8006d00 <_vfiprintf_r+0x1e4>
 8006d26:	bf00      	nop
 8006d28:	08007394 	.word	0x08007394
 8006d2c:	080074d4 	.word	0x080074d4
 8006d30:	080073b4 	.word	0x080073b4
 8006d34:	08007374 	.word	0x08007374
 8006d38:	080074da 	.word	0x080074da
 8006d3c:	080074de 	.word	0x080074de
 8006d40:	08004d89 	.word	0x08004d89
 8006d44:	08006af7 	.word	0x08006af7

08006d48 <_sbrk_r>:
 8006d48:	b538      	push	{r3, r4, r5, lr}
 8006d4a:	4c06      	ldr	r4, [pc, #24]	; (8006d64 <_sbrk_r+0x1c>)
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	4605      	mov	r5, r0
 8006d50:	4608      	mov	r0, r1
 8006d52:	6023      	str	r3, [r4, #0]
 8006d54:	f7fa fb6c 	bl	8001430 <_sbrk>
 8006d58:	1c43      	adds	r3, r0, #1
 8006d5a:	d102      	bne.n	8006d62 <_sbrk_r+0x1a>
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	b103      	cbz	r3, 8006d62 <_sbrk_r+0x1a>
 8006d60:	602b      	str	r3, [r5, #0]
 8006d62:	bd38      	pop	{r3, r4, r5, pc}
 8006d64:	200002ec 	.word	0x200002ec

08006d68 <__sread>:
 8006d68:	b510      	push	{r4, lr}
 8006d6a:	460c      	mov	r4, r1
 8006d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d70:	f000 fa5a 	bl	8007228 <_read_r>
 8006d74:	2800      	cmp	r0, #0
 8006d76:	bfab      	itete	ge
 8006d78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d7a:	89a3      	ldrhlt	r3, [r4, #12]
 8006d7c:	181b      	addge	r3, r3, r0
 8006d7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d82:	bfac      	ite	ge
 8006d84:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d86:	81a3      	strhlt	r3, [r4, #12]
 8006d88:	bd10      	pop	{r4, pc}

08006d8a <__swrite>:
 8006d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d8e:	461f      	mov	r7, r3
 8006d90:	898b      	ldrh	r3, [r1, #12]
 8006d92:	05db      	lsls	r3, r3, #23
 8006d94:	4605      	mov	r5, r0
 8006d96:	460c      	mov	r4, r1
 8006d98:	4616      	mov	r6, r2
 8006d9a:	d505      	bpl.n	8006da8 <__swrite+0x1e>
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da4:	f000 f9b6 	bl	8007114 <_lseek_r>
 8006da8:	89a3      	ldrh	r3, [r4, #12]
 8006daa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006db2:	81a3      	strh	r3, [r4, #12]
 8006db4:	4632      	mov	r2, r6
 8006db6:	463b      	mov	r3, r7
 8006db8:	4628      	mov	r0, r5
 8006dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dbe:	f000 b869 	b.w	8006e94 <_write_r>

08006dc2 <__sseek>:
 8006dc2:	b510      	push	{r4, lr}
 8006dc4:	460c      	mov	r4, r1
 8006dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dca:	f000 f9a3 	bl	8007114 <_lseek_r>
 8006dce:	1c43      	adds	r3, r0, #1
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	bf15      	itete	ne
 8006dd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006dd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006dda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006dde:	81a3      	strheq	r3, [r4, #12]
 8006de0:	bf18      	it	ne
 8006de2:	81a3      	strhne	r3, [r4, #12]
 8006de4:	bd10      	pop	{r4, pc}

08006de6 <__sclose>:
 8006de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dea:	f000 b8d3 	b.w	8006f94 <_close_r>
	...

08006df0 <__swbuf_r>:
 8006df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df2:	460e      	mov	r6, r1
 8006df4:	4614      	mov	r4, r2
 8006df6:	4605      	mov	r5, r0
 8006df8:	b118      	cbz	r0, 8006e02 <__swbuf_r+0x12>
 8006dfa:	6983      	ldr	r3, [r0, #24]
 8006dfc:	b90b      	cbnz	r3, 8006e02 <__swbuf_r+0x12>
 8006dfe:	f7ff fa27 	bl	8006250 <__sinit>
 8006e02:	4b21      	ldr	r3, [pc, #132]	; (8006e88 <__swbuf_r+0x98>)
 8006e04:	429c      	cmp	r4, r3
 8006e06:	d12a      	bne.n	8006e5e <__swbuf_r+0x6e>
 8006e08:	686c      	ldr	r4, [r5, #4]
 8006e0a:	69a3      	ldr	r3, [r4, #24]
 8006e0c:	60a3      	str	r3, [r4, #8]
 8006e0e:	89a3      	ldrh	r3, [r4, #12]
 8006e10:	071a      	lsls	r2, r3, #28
 8006e12:	d52e      	bpl.n	8006e72 <__swbuf_r+0x82>
 8006e14:	6923      	ldr	r3, [r4, #16]
 8006e16:	b363      	cbz	r3, 8006e72 <__swbuf_r+0x82>
 8006e18:	6923      	ldr	r3, [r4, #16]
 8006e1a:	6820      	ldr	r0, [r4, #0]
 8006e1c:	1ac0      	subs	r0, r0, r3
 8006e1e:	6963      	ldr	r3, [r4, #20]
 8006e20:	b2f6      	uxtb	r6, r6
 8006e22:	4283      	cmp	r3, r0
 8006e24:	4637      	mov	r7, r6
 8006e26:	dc04      	bgt.n	8006e32 <__swbuf_r+0x42>
 8006e28:	4621      	mov	r1, r4
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	f000 f948 	bl	80070c0 <_fflush_r>
 8006e30:	bb28      	cbnz	r0, 8006e7e <__swbuf_r+0x8e>
 8006e32:	68a3      	ldr	r3, [r4, #8]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	60a3      	str	r3, [r4, #8]
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	1c5a      	adds	r2, r3, #1
 8006e3c:	6022      	str	r2, [r4, #0]
 8006e3e:	701e      	strb	r6, [r3, #0]
 8006e40:	6963      	ldr	r3, [r4, #20]
 8006e42:	3001      	adds	r0, #1
 8006e44:	4283      	cmp	r3, r0
 8006e46:	d004      	beq.n	8006e52 <__swbuf_r+0x62>
 8006e48:	89a3      	ldrh	r3, [r4, #12]
 8006e4a:	07db      	lsls	r3, r3, #31
 8006e4c:	d519      	bpl.n	8006e82 <__swbuf_r+0x92>
 8006e4e:	2e0a      	cmp	r6, #10
 8006e50:	d117      	bne.n	8006e82 <__swbuf_r+0x92>
 8006e52:	4621      	mov	r1, r4
 8006e54:	4628      	mov	r0, r5
 8006e56:	f000 f933 	bl	80070c0 <_fflush_r>
 8006e5a:	b190      	cbz	r0, 8006e82 <__swbuf_r+0x92>
 8006e5c:	e00f      	b.n	8006e7e <__swbuf_r+0x8e>
 8006e5e:	4b0b      	ldr	r3, [pc, #44]	; (8006e8c <__swbuf_r+0x9c>)
 8006e60:	429c      	cmp	r4, r3
 8006e62:	d101      	bne.n	8006e68 <__swbuf_r+0x78>
 8006e64:	68ac      	ldr	r4, [r5, #8]
 8006e66:	e7d0      	b.n	8006e0a <__swbuf_r+0x1a>
 8006e68:	4b09      	ldr	r3, [pc, #36]	; (8006e90 <__swbuf_r+0xa0>)
 8006e6a:	429c      	cmp	r4, r3
 8006e6c:	bf08      	it	eq
 8006e6e:	68ec      	ldreq	r4, [r5, #12]
 8006e70:	e7cb      	b.n	8006e0a <__swbuf_r+0x1a>
 8006e72:	4621      	mov	r1, r4
 8006e74:	4628      	mov	r0, r5
 8006e76:	f000 f81f 	bl	8006eb8 <__swsetup_r>
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	d0cc      	beq.n	8006e18 <__swbuf_r+0x28>
 8006e7e:	f04f 37ff 	mov.w	r7, #4294967295
 8006e82:	4638      	mov	r0, r7
 8006e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e86:	bf00      	nop
 8006e88:	08007394 	.word	0x08007394
 8006e8c:	080073b4 	.word	0x080073b4
 8006e90:	08007374 	.word	0x08007374

08006e94 <_write_r>:
 8006e94:	b538      	push	{r3, r4, r5, lr}
 8006e96:	4c07      	ldr	r4, [pc, #28]	; (8006eb4 <_write_r+0x20>)
 8006e98:	4605      	mov	r5, r0
 8006e9a:	4608      	mov	r0, r1
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	6022      	str	r2, [r4, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f7fa fa73 	bl	800138e <_write>
 8006ea8:	1c43      	adds	r3, r0, #1
 8006eaa:	d102      	bne.n	8006eb2 <_write_r+0x1e>
 8006eac:	6823      	ldr	r3, [r4, #0]
 8006eae:	b103      	cbz	r3, 8006eb2 <_write_r+0x1e>
 8006eb0:	602b      	str	r3, [r5, #0]
 8006eb2:	bd38      	pop	{r3, r4, r5, pc}
 8006eb4:	200002ec 	.word	0x200002ec

08006eb8 <__swsetup_r>:
 8006eb8:	4b32      	ldr	r3, [pc, #200]	; (8006f84 <__swsetup_r+0xcc>)
 8006eba:	b570      	push	{r4, r5, r6, lr}
 8006ebc:	681d      	ldr	r5, [r3, #0]
 8006ebe:	4606      	mov	r6, r0
 8006ec0:	460c      	mov	r4, r1
 8006ec2:	b125      	cbz	r5, 8006ece <__swsetup_r+0x16>
 8006ec4:	69ab      	ldr	r3, [r5, #24]
 8006ec6:	b913      	cbnz	r3, 8006ece <__swsetup_r+0x16>
 8006ec8:	4628      	mov	r0, r5
 8006eca:	f7ff f9c1 	bl	8006250 <__sinit>
 8006ece:	4b2e      	ldr	r3, [pc, #184]	; (8006f88 <__swsetup_r+0xd0>)
 8006ed0:	429c      	cmp	r4, r3
 8006ed2:	d10f      	bne.n	8006ef4 <__swsetup_r+0x3c>
 8006ed4:	686c      	ldr	r4, [r5, #4]
 8006ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	0715      	lsls	r5, r2, #28
 8006ede:	d42c      	bmi.n	8006f3a <__swsetup_r+0x82>
 8006ee0:	06d0      	lsls	r0, r2, #27
 8006ee2:	d411      	bmi.n	8006f08 <__swsetup_r+0x50>
 8006ee4:	2209      	movs	r2, #9
 8006ee6:	6032      	str	r2, [r6, #0]
 8006ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eec:	81a3      	strh	r3, [r4, #12]
 8006eee:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef2:	e03e      	b.n	8006f72 <__swsetup_r+0xba>
 8006ef4:	4b25      	ldr	r3, [pc, #148]	; (8006f8c <__swsetup_r+0xd4>)
 8006ef6:	429c      	cmp	r4, r3
 8006ef8:	d101      	bne.n	8006efe <__swsetup_r+0x46>
 8006efa:	68ac      	ldr	r4, [r5, #8]
 8006efc:	e7eb      	b.n	8006ed6 <__swsetup_r+0x1e>
 8006efe:	4b24      	ldr	r3, [pc, #144]	; (8006f90 <__swsetup_r+0xd8>)
 8006f00:	429c      	cmp	r4, r3
 8006f02:	bf08      	it	eq
 8006f04:	68ec      	ldreq	r4, [r5, #12]
 8006f06:	e7e6      	b.n	8006ed6 <__swsetup_r+0x1e>
 8006f08:	0751      	lsls	r1, r2, #29
 8006f0a:	d512      	bpl.n	8006f32 <__swsetup_r+0x7a>
 8006f0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f0e:	b141      	cbz	r1, 8006f22 <__swsetup_r+0x6a>
 8006f10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f14:	4299      	cmp	r1, r3
 8006f16:	d002      	beq.n	8006f1e <__swsetup_r+0x66>
 8006f18:	4630      	mov	r0, r6
 8006f1a:	f7ff fd2d 	bl	8006978 <_free_r>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	6363      	str	r3, [r4, #52]	; 0x34
 8006f22:	89a3      	ldrh	r3, [r4, #12]
 8006f24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f28:	81a3      	strh	r3, [r4, #12]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	6063      	str	r3, [r4, #4]
 8006f2e:	6923      	ldr	r3, [r4, #16]
 8006f30:	6023      	str	r3, [r4, #0]
 8006f32:	89a3      	ldrh	r3, [r4, #12]
 8006f34:	f043 0308 	orr.w	r3, r3, #8
 8006f38:	81a3      	strh	r3, [r4, #12]
 8006f3a:	6923      	ldr	r3, [r4, #16]
 8006f3c:	b94b      	cbnz	r3, 8006f52 <__swsetup_r+0x9a>
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f48:	d003      	beq.n	8006f52 <__swsetup_r+0x9a>
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	f000 f917 	bl	8007180 <__smakebuf_r>
 8006f52:	89a2      	ldrh	r2, [r4, #12]
 8006f54:	f012 0301 	ands.w	r3, r2, #1
 8006f58:	d00c      	beq.n	8006f74 <__swsetup_r+0xbc>
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60a3      	str	r3, [r4, #8]
 8006f5e:	6963      	ldr	r3, [r4, #20]
 8006f60:	425b      	negs	r3, r3
 8006f62:	61a3      	str	r3, [r4, #24]
 8006f64:	6923      	ldr	r3, [r4, #16]
 8006f66:	b953      	cbnz	r3, 8006f7e <__swsetup_r+0xc6>
 8006f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f6c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006f70:	d1ba      	bne.n	8006ee8 <__swsetup_r+0x30>
 8006f72:	bd70      	pop	{r4, r5, r6, pc}
 8006f74:	0792      	lsls	r2, r2, #30
 8006f76:	bf58      	it	pl
 8006f78:	6963      	ldrpl	r3, [r4, #20]
 8006f7a:	60a3      	str	r3, [r4, #8]
 8006f7c:	e7f2      	b.n	8006f64 <__swsetup_r+0xac>
 8006f7e:	2000      	movs	r0, #0
 8006f80:	e7f7      	b.n	8006f72 <__swsetup_r+0xba>
 8006f82:	bf00      	nop
 8006f84:	2000000c 	.word	0x2000000c
 8006f88:	08007394 	.word	0x08007394
 8006f8c:	080073b4 	.word	0x080073b4
 8006f90:	08007374 	.word	0x08007374

08006f94 <_close_r>:
 8006f94:	b538      	push	{r3, r4, r5, lr}
 8006f96:	4c06      	ldr	r4, [pc, #24]	; (8006fb0 <_close_r+0x1c>)
 8006f98:	2300      	movs	r3, #0
 8006f9a:	4605      	mov	r5, r0
 8006f9c:	4608      	mov	r0, r1
 8006f9e:	6023      	str	r3, [r4, #0]
 8006fa0:	f7fa fa11 	bl	80013c6 <_close>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	d102      	bne.n	8006fae <_close_r+0x1a>
 8006fa8:	6823      	ldr	r3, [r4, #0]
 8006faa:	b103      	cbz	r3, 8006fae <_close_r+0x1a>
 8006fac:	602b      	str	r3, [r5, #0]
 8006fae:	bd38      	pop	{r3, r4, r5, pc}
 8006fb0:	200002ec 	.word	0x200002ec

08006fb4 <__sflush_r>:
 8006fb4:	898a      	ldrh	r2, [r1, #12]
 8006fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fba:	4605      	mov	r5, r0
 8006fbc:	0710      	lsls	r0, r2, #28
 8006fbe:	460c      	mov	r4, r1
 8006fc0:	d458      	bmi.n	8007074 <__sflush_r+0xc0>
 8006fc2:	684b      	ldr	r3, [r1, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	dc05      	bgt.n	8006fd4 <__sflush_r+0x20>
 8006fc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	dc02      	bgt.n	8006fd4 <__sflush_r+0x20>
 8006fce:	2000      	movs	r0, #0
 8006fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fd6:	2e00      	cmp	r6, #0
 8006fd8:	d0f9      	beq.n	8006fce <__sflush_r+0x1a>
 8006fda:	2300      	movs	r3, #0
 8006fdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006fe0:	682f      	ldr	r7, [r5, #0]
 8006fe2:	6a21      	ldr	r1, [r4, #32]
 8006fe4:	602b      	str	r3, [r5, #0]
 8006fe6:	d032      	beq.n	800704e <__sflush_r+0x9a>
 8006fe8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006fea:	89a3      	ldrh	r3, [r4, #12]
 8006fec:	075a      	lsls	r2, r3, #29
 8006fee:	d505      	bpl.n	8006ffc <__sflush_r+0x48>
 8006ff0:	6863      	ldr	r3, [r4, #4]
 8006ff2:	1ac0      	subs	r0, r0, r3
 8006ff4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ff6:	b10b      	cbz	r3, 8006ffc <__sflush_r+0x48>
 8006ff8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ffa:	1ac0      	subs	r0, r0, r3
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	4602      	mov	r2, r0
 8007000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007002:	6a21      	ldr	r1, [r4, #32]
 8007004:	4628      	mov	r0, r5
 8007006:	47b0      	blx	r6
 8007008:	1c43      	adds	r3, r0, #1
 800700a:	89a3      	ldrh	r3, [r4, #12]
 800700c:	d106      	bne.n	800701c <__sflush_r+0x68>
 800700e:	6829      	ldr	r1, [r5, #0]
 8007010:	291d      	cmp	r1, #29
 8007012:	d848      	bhi.n	80070a6 <__sflush_r+0xf2>
 8007014:	4a29      	ldr	r2, [pc, #164]	; (80070bc <__sflush_r+0x108>)
 8007016:	40ca      	lsrs	r2, r1
 8007018:	07d6      	lsls	r6, r2, #31
 800701a:	d544      	bpl.n	80070a6 <__sflush_r+0xf2>
 800701c:	2200      	movs	r2, #0
 800701e:	6062      	str	r2, [r4, #4]
 8007020:	04d9      	lsls	r1, r3, #19
 8007022:	6922      	ldr	r2, [r4, #16]
 8007024:	6022      	str	r2, [r4, #0]
 8007026:	d504      	bpl.n	8007032 <__sflush_r+0x7e>
 8007028:	1c42      	adds	r2, r0, #1
 800702a:	d101      	bne.n	8007030 <__sflush_r+0x7c>
 800702c:	682b      	ldr	r3, [r5, #0]
 800702e:	b903      	cbnz	r3, 8007032 <__sflush_r+0x7e>
 8007030:	6560      	str	r0, [r4, #84]	; 0x54
 8007032:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007034:	602f      	str	r7, [r5, #0]
 8007036:	2900      	cmp	r1, #0
 8007038:	d0c9      	beq.n	8006fce <__sflush_r+0x1a>
 800703a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800703e:	4299      	cmp	r1, r3
 8007040:	d002      	beq.n	8007048 <__sflush_r+0x94>
 8007042:	4628      	mov	r0, r5
 8007044:	f7ff fc98 	bl	8006978 <_free_r>
 8007048:	2000      	movs	r0, #0
 800704a:	6360      	str	r0, [r4, #52]	; 0x34
 800704c:	e7c0      	b.n	8006fd0 <__sflush_r+0x1c>
 800704e:	2301      	movs	r3, #1
 8007050:	4628      	mov	r0, r5
 8007052:	47b0      	blx	r6
 8007054:	1c41      	adds	r1, r0, #1
 8007056:	d1c8      	bne.n	8006fea <__sflush_r+0x36>
 8007058:	682b      	ldr	r3, [r5, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d0c5      	beq.n	8006fea <__sflush_r+0x36>
 800705e:	2b1d      	cmp	r3, #29
 8007060:	d001      	beq.n	8007066 <__sflush_r+0xb2>
 8007062:	2b16      	cmp	r3, #22
 8007064:	d101      	bne.n	800706a <__sflush_r+0xb6>
 8007066:	602f      	str	r7, [r5, #0]
 8007068:	e7b1      	b.n	8006fce <__sflush_r+0x1a>
 800706a:	89a3      	ldrh	r3, [r4, #12]
 800706c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007070:	81a3      	strh	r3, [r4, #12]
 8007072:	e7ad      	b.n	8006fd0 <__sflush_r+0x1c>
 8007074:	690f      	ldr	r7, [r1, #16]
 8007076:	2f00      	cmp	r7, #0
 8007078:	d0a9      	beq.n	8006fce <__sflush_r+0x1a>
 800707a:	0793      	lsls	r3, r2, #30
 800707c:	680e      	ldr	r6, [r1, #0]
 800707e:	bf08      	it	eq
 8007080:	694b      	ldreq	r3, [r1, #20]
 8007082:	600f      	str	r7, [r1, #0]
 8007084:	bf18      	it	ne
 8007086:	2300      	movne	r3, #0
 8007088:	eba6 0807 	sub.w	r8, r6, r7
 800708c:	608b      	str	r3, [r1, #8]
 800708e:	f1b8 0f00 	cmp.w	r8, #0
 8007092:	dd9c      	ble.n	8006fce <__sflush_r+0x1a>
 8007094:	4643      	mov	r3, r8
 8007096:	463a      	mov	r2, r7
 8007098:	6a21      	ldr	r1, [r4, #32]
 800709a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800709c:	4628      	mov	r0, r5
 800709e:	47b0      	blx	r6
 80070a0:	2800      	cmp	r0, #0
 80070a2:	dc06      	bgt.n	80070b2 <__sflush_r+0xfe>
 80070a4:	89a3      	ldrh	r3, [r4, #12]
 80070a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070aa:	81a3      	strh	r3, [r4, #12]
 80070ac:	f04f 30ff 	mov.w	r0, #4294967295
 80070b0:	e78e      	b.n	8006fd0 <__sflush_r+0x1c>
 80070b2:	4407      	add	r7, r0
 80070b4:	eba8 0800 	sub.w	r8, r8, r0
 80070b8:	e7e9      	b.n	800708e <__sflush_r+0xda>
 80070ba:	bf00      	nop
 80070bc:	20400001 	.word	0x20400001

080070c0 <_fflush_r>:
 80070c0:	b538      	push	{r3, r4, r5, lr}
 80070c2:	690b      	ldr	r3, [r1, #16]
 80070c4:	4605      	mov	r5, r0
 80070c6:	460c      	mov	r4, r1
 80070c8:	b1db      	cbz	r3, 8007102 <_fflush_r+0x42>
 80070ca:	b118      	cbz	r0, 80070d4 <_fflush_r+0x14>
 80070cc:	6983      	ldr	r3, [r0, #24]
 80070ce:	b90b      	cbnz	r3, 80070d4 <_fflush_r+0x14>
 80070d0:	f7ff f8be 	bl	8006250 <__sinit>
 80070d4:	4b0c      	ldr	r3, [pc, #48]	; (8007108 <_fflush_r+0x48>)
 80070d6:	429c      	cmp	r4, r3
 80070d8:	d109      	bne.n	80070ee <_fflush_r+0x2e>
 80070da:	686c      	ldr	r4, [r5, #4]
 80070dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070e0:	b17b      	cbz	r3, 8007102 <_fflush_r+0x42>
 80070e2:	4621      	mov	r1, r4
 80070e4:	4628      	mov	r0, r5
 80070e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070ea:	f7ff bf63 	b.w	8006fb4 <__sflush_r>
 80070ee:	4b07      	ldr	r3, [pc, #28]	; (800710c <_fflush_r+0x4c>)
 80070f0:	429c      	cmp	r4, r3
 80070f2:	d101      	bne.n	80070f8 <_fflush_r+0x38>
 80070f4:	68ac      	ldr	r4, [r5, #8]
 80070f6:	e7f1      	b.n	80070dc <_fflush_r+0x1c>
 80070f8:	4b05      	ldr	r3, [pc, #20]	; (8007110 <_fflush_r+0x50>)
 80070fa:	429c      	cmp	r4, r3
 80070fc:	bf08      	it	eq
 80070fe:	68ec      	ldreq	r4, [r5, #12]
 8007100:	e7ec      	b.n	80070dc <_fflush_r+0x1c>
 8007102:	2000      	movs	r0, #0
 8007104:	bd38      	pop	{r3, r4, r5, pc}
 8007106:	bf00      	nop
 8007108:	08007394 	.word	0x08007394
 800710c:	080073b4 	.word	0x080073b4
 8007110:	08007374 	.word	0x08007374

08007114 <_lseek_r>:
 8007114:	b538      	push	{r3, r4, r5, lr}
 8007116:	4c07      	ldr	r4, [pc, #28]	; (8007134 <_lseek_r+0x20>)
 8007118:	4605      	mov	r5, r0
 800711a:	4608      	mov	r0, r1
 800711c:	4611      	mov	r1, r2
 800711e:	2200      	movs	r2, #0
 8007120:	6022      	str	r2, [r4, #0]
 8007122:	461a      	mov	r2, r3
 8007124:	f7fa f976 	bl	8001414 <_lseek>
 8007128:	1c43      	adds	r3, r0, #1
 800712a:	d102      	bne.n	8007132 <_lseek_r+0x1e>
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	b103      	cbz	r3, 8007132 <_lseek_r+0x1e>
 8007130:	602b      	str	r3, [r5, #0]
 8007132:	bd38      	pop	{r3, r4, r5, pc}
 8007134:	200002ec 	.word	0x200002ec

08007138 <__swhatbuf_r>:
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	460e      	mov	r6, r1
 800713c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007140:	2900      	cmp	r1, #0
 8007142:	b096      	sub	sp, #88	; 0x58
 8007144:	4614      	mov	r4, r2
 8007146:	461d      	mov	r5, r3
 8007148:	da07      	bge.n	800715a <__swhatbuf_r+0x22>
 800714a:	2300      	movs	r3, #0
 800714c:	602b      	str	r3, [r5, #0]
 800714e:	89b3      	ldrh	r3, [r6, #12]
 8007150:	061a      	lsls	r2, r3, #24
 8007152:	d410      	bmi.n	8007176 <__swhatbuf_r+0x3e>
 8007154:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007158:	e00e      	b.n	8007178 <__swhatbuf_r+0x40>
 800715a:	466a      	mov	r2, sp
 800715c:	f000 f884 	bl	8007268 <_fstat_r>
 8007160:	2800      	cmp	r0, #0
 8007162:	dbf2      	blt.n	800714a <__swhatbuf_r+0x12>
 8007164:	9a01      	ldr	r2, [sp, #4]
 8007166:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800716a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800716e:	425a      	negs	r2, r3
 8007170:	415a      	adcs	r2, r3
 8007172:	602a      	str	r2, [r5, #0]
 8007174:	e7ee      	b.n	8007154 <__swhatbuf_r+0x1c>
 8007176:	2340      	movs	r3, #64	; 0x40
 8007178:	2000      	movs	r0, #0
 800717a:	6023      	str	r3, [r4, #0]
 800717c:	b016      	add	sp, #88	; 0x58
 800717e:	bd70      	pop	{r4, r5, r6, pc}

08007180 <__smakebuf_r>:
 8007180:	898b      	ldrh	r3, [r1, #12]
 8007182:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007184:	079d      	lsls	r5, r3, #30
 8007186:	4606      	mov	r6, r0
 8007188:	460c      	mov	r4, r1
 800718a:	d507      	bpl.n	800719c <__smakebuf_r+0x1c>
 800718c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007190:	6023      	str	r3, [r4, #0]
 8007192:	6123      	str	r3, [r4, #16]
 8007194:	2301      	movs	r3, #1
 8007196:	6163      	str	r3, [r4, #20]
 8007198:	b002      	add	sp, #8
 800719a:	bd70      	pop	{r4, r5, r6, pc}
 800719c:	ab01      	add	r3, sp, #4
 800719e:	466a      	mov	r2, sp
 80071a0:	f7ff ffca 	bl	8007138 <__swhatbuf_r>
 80071a4:	9900      	ldr	r1, [sp, #0]
 80071a6:	4605      	mov	r5, r0
 80071a8:	4630      	mov	r0, r6
 80071aa:	f7ff fc33 	bl	8006a14 <_malloc_r>
 80071ae:	b948      	cbnz	r0, 80071c4 <__smakebuf_r+0x44>
 80071b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071b4:	059a      	lsls	r2, r3, #22
 80071b6:	d4ef      	bmi.n	8007198 <__smakebuf_r+0x18>
 80071b8:	f023 0303 	bic.w	r3, r3, #3
 80071bc:	f043 0302 	orr.w	r3, r3, #2
 80071c0:	81a3      	strh	r3, [r4, #12]
 80071c2:	e7e3      	b.n	800718c <__smakebuf_r+0xc>
 80071c4:	4b0d      	ldr	r3, [pc, #52]	; (80071fc <__smakebuf_r+0x7c>)
 80071c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80071c8:	89a3      	ldrh	r3, [r4, #12]
 80071ca:	6020      	str	r0, [r4, #0]
 80071cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d0:	81a3      	strh	r3, [r4, #12]
 80071d2:	9b00      	ldr	r3, [sp, #0]
 80071d4:	6163      	str	r3, [r4, #20]
 80071d6:	9b01      	ldr	r3, [sp, #4]
 80071d8:	6120      	str	r0, [r4, #16]
 80071da:	b15b      	cbz	r3, 80071f4 <__smakebuf_r+0x74>
 80071dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071e0:	4630      	mov	r0, r6
 80071e2:	f000 f853 	bl	800728c <_isatty_r>
 80071e6:	b128      	cbz	r0, 80071f4 <__smakebuf_r+0x74>
 80071e8:	89a3      	ldrh	r3, [r4, #12]
 80071ea:	f023 0303 	bic.w	r3, r3, #3
 80071ee:	f043 0301 	orr.w	r3, r3, #1
 80071f2:	81a3      	strh	r3, [r4, #12]
 80071f4:	89a3      	ldrh	r3, [r4, #12]
 80071f6:	431d      	orrs	r5, r3
 80071f8:	81a5      	strh	r5, [r4, #12]
 80071fa:	e7cd      	b.n	8007198 <__smakebuf_r+0x18>
 80071fc:	08006219 	.word	0x08006219

08007200 <__ascii_mbtowc>:
 8007200:	b082      	sub	sp, #8
 8007202:	b901      	cbnz	r1, 8007206 <__ascii_mbtowc+0x6>
 8007204:	a901      	add	r1, sp, #4
 8007206:	b142      	cbz	r2, 800721a <__ascii_mbtowc+0x1a>
 8007208:	b14b      	cbz	r3, 800721e <__ascii_mbtowc+0x1e>
 800720a:	7813      	ldrb	r3, [r2, #0]
 800720c:	600b      	str	r3, [r1, #0]
 800720e:	7812      	ldrb	r2, [r2, #0]
 8007210:	1c10      	adds	r0, r2, #0
 8007212:	bf18      	it	ne
 8007214:	2001      	movne	r0, #1
 8007216:	b002      	add	sp, #8
 8007218:	4770      	bx	lr
 800721a:	4610      	mov	r0, r2
 800721c:	e7fb      	b.n	8007216 <__ascii_mbtowc+0x16>
 800721e:	f06f 0001 	mvn.w	r0, #1
 8007222:	e7f8      	b.n	8007216 <__ascii_mbtowc+0x16>

08007224 <__malloc_lock>:
 8007224:	4770      	bx	lr

08007226 <__malloc_unlock>:
 8007226:	4770      	bx	lr

08007228 <_read_r>:
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	4c07      	ldr	r4, [pc, #28]	; (8007248 <_read_r+0x20>)
 800722c:	4605      	mov	r5, r0
 800722e:	4608      	mov	r0, r1
 8007230:	4611      	mov	r1, r2
 8007232:	2200      	movs	r2, #0
 8007234:	6022      	str	r2, [r4, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	f7fa f88c 	bl	8001354 <_read>
 800723c:	1c43      	adds	r3, r0, #1
 800723e:	d102      	bne.n	8007246 <_read_r+0x1e>
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	b103      	cbz	r3, 8007246 <_read_r+0x1e>
 8007244:	602b      	str	r3, [r5, #0]
 8007246:	bd38      	pop	{r3, r4, r5, pc}
 8007248:	200002ec 	.word	0x200002ec

0800724c <__ascii_wctomb>:
 800724c:	b149      	cbz	r1, 8007262 <__ascii_wctomb+0x16>
 800724e:	2aff      	cmp	r2, #255	; 0xff
 8007250:	bf85      	ittet	hi
 8007252:	238a      	movhi	r3, #138	; 0x8a
 8007254:	6003      	strhi	r3, [r0, #0]
 8007256:	700a      	strbls	r2, [r1, #0]
 8007258:	f04f 30ff 	movhi.w	r0, #4294967295
 800725c:	bf98      	it	ls
 800725e:	2001      	movls	r0, #1
 8007260:	4770      	bx	lr
 8007262:	4608      	mov	r0, r1
 8007264:	4770      	bx	lr
	...

08007268 <_fstat_r>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	4c07      	ldr	r4, [pc, #28]	; (8007288 <_fstat_r+0x20>)
 800726c:	2300      	movs	r3, #0
 800726e:	4605      	mov	r5, r0
 8007270:	4608      	mov	r0, r1
 8007272:	4611      	mov	r1, r2
 8007274:	6023      	str	r3, [r4, #0]
 8007276:	f7fa f8b2 	bl	80013de <_fstat>
 800727a:	1c43      	adds	r3, r0, #1
 800727c:	d102      	bne.n	8007284 <_fstat_r+0x1c>
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	b103      	cbz	r3, 8007284 <_fstat_r+0x1c>
 8007282:	602b      	str	r3, [r5, #0]
 8007284:	bd38      	pop	{r3, r4, r5, pc}
 8007286:	bf00      	nop
 8007288:	200002ec 	.word	0x200002ec

0800728c <_isatty_r>:
 800728c:	b538      	push	{r3, r4, r5, lr}
 800728e:	4c06      	ldr	r4, [pc, #24]	; (80072a8 <_isatty_r+0x1c>)
 8007290:	2300      	movs	r3, #0
 8007292:	4605      	mov	r5, r0
 8007294:	4608      	mov	r0, r1
 8007296:	6023      	str	r3, [r4, #0]
 8007298:	f7fa f8b1 	bl	80013fe <_isatty>
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	d102      	bne.n	80072a6 <_isatty_r+0x1a>
 80072a0:	6823      	ldr	r3, [r4, #0]
 80072a2:	b103      	cbz	r3, 80072a6 <_isatty_r+0x1a>
 80072a4:	602b      	str	r3, [r5, #0]
 80072a6:	bd38      	pop	{r3, r4, r5, pc}
 80072a8:	200002ec 	.word	0x200002ec

080072ac <_init>:
 80072ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ae:	bf00      	nop
 80072b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072b2:	bc08      	pop	{r3}
 80072b4:	469e      	mov	lr, r3
 80072b6:	4770      	bx	lr

080072b8 <_fini>:
 80072b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ba:	bf00      	nop
 80072bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072be:	bc08      	pop	{r3}
 80072c0:	469e      	mov	lr, r3
 80072c2:	4770      	bx	lr
