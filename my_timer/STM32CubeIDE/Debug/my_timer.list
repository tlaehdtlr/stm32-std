
my_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004954  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004ae4  08004ae4  00014ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b64  08004b64  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004b64  08004b64  00014b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b6c  08004b6c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b6c  08004b6c  00014b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b70  08004b70  00014b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000109c  20000014  08004b88  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010b0  08004b88  000210b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c8a  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000362a  00000000  00000000  00039cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  0003d2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  0003e710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cbf6  00000000  00000000  0003f9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001663e  00000000  00000000  0005c596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3970  00000000  00000000  00072bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00126544  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052d8  00000000  00000000  00126598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004acc 	.word	0x08004acc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08004acc 	.word	0x08004acc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <vApplicationGetIdleTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	20000038 	.word	0x20000038
 80004f8:	2000008c 	.word	0x2000008c

080004fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004fc:	b5b0      	push	{r4, r5, r7, lr}
 80004fe:	b08a      	sub	sp, #40	; 0x28
 8000500:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <MX_FREERTOS_Init+0x54>)
 8000504:	1d3c      	adds	r4, r7, #4
 8000506:	461d      	mov	r5, r3
 8000508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800050a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800050c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000510:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	2100      	movs	r1, #0
 8000518:	4618      	mov	r0, r3
 800051a:	f002 fd1c 	bl	8002f56 <osThreadCreate>
 800051e:	4603      	mov	r3, r0
 8000520:	4a0c      	ldr	r2, [pc, #48]	; (8000554 <MX_FREERTOS_Init+0x58>)
 8000522:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */


  myQueueHandle = xQueueCreate(4, sizeof(uint8_t));
 8000524:	2200      	movs	r2, #0
 8000526:	2101      	movs	r1, #1
 8000528:	2004      	movs	r0, #4
 800052a:	f003 fa7d 	bl	8003a28 <xQueueGenericCreate>
 800052e:	4603      	mov	r3, r0
 8000530:	4a09      	ldr	r2, [pc, #36]	; (8000558 <MX_FREERTOS_Init+0x5c>)
 8000532:	6013      	str	r3, [r2, #0]

  xTaskCreate(my_Task, "myTask", configMINIMAL_STACK_SIZE, NULL, 1, &myTaskHandle);
 8000534:	4b09      	ldr	r3, [pc, #36]	; (800055c <MX_FREERTOS_Init+0x60>)
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	2301      	movs	r3, #1
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	2300      	movs	r3, #0
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	4907      	ldr	r1, [pc, #28]	; (8000560 <MX_FREERTOS_Init+0x64>)
 8000542:	4808      	ldr	r0, [pc, #32]	; (8000564 <MX_FREERTOS_Init+0x68>)
 8000544:	f003 fc9b 	bl	8003e7e <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

}
 8000548:	bf00      	nop
 800054a:	3720      	adds	r7, #32
 800054c:	46bd      	mov	sp, r7
 800054e:	bdb0      	pop	{r4, r5, r7, pc}
 8000550:	08004af8 	.word	0x08004af8
 8000554:	20000f90 	.word	0x20000f90
 8000558:	20000034 	.word	0x20000034
 800055c:	20000030 	.word	0x20000030
 8000560:	08004af0 	.word	0x08004af0
 8000564:	08000579 	.word	0x08000579

08000568 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000570:	2001      	movs	r0, #1
 8000572:	f002 fd3c 	bl	8002fee <osDelay>
 8000576:	e7fb      	b.n	8000570 <StartDefaultTask+0x8>

08000578 <my_Task>:
  }
}


void my_Task()
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
	uint8_t * quqMSG;
	for (;;)
	{
		if (xQueueReceive(myQueueHandle, &quqMSG, 1)==pdTRUE)
 800057e:	4b17      	ldr	r3, [pc, #92]	; (80005dc <my_Task+0x64>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	1d39      	adds	r1, r7, #4
 8000584:	2201      	movs	r2, #1
 8000586:	4618      	mov	r0, r3
 8000588:	f003 faae 	bl	8003ae8 <xQueueReceive>
 800058c:	4603      	mov	r3, r0
 800058e:	2b01      	cmp	r3, #1
 8000590:	d10b      	bne.n	80005aa <my_Task+0x32>
		{
			my_arr++;
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <my_Task+0x68>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	3301      	adds	r3, #1
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <my_Task+0x68>)
 800059c:	701a      	strb	r2, [r3, #0]
			ignore_arr++;
 800059e:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <my_Task+0x6c>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	3301      	adds	r3, #1
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <my_Task+0x6c>)
 80005a8:	801a      	strh	r2, [r3, #0]
		}
		if (my_arr<3)
 80005aa:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <my_Task+0x68>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d806      	bhi.n	80005c0 <my_Task+0x48>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b8:	480b      	ldr	r0, [pc, #44]	; (80005e8 <my_Task+0x70>)
 80005ba:	f000 fd4d 	bl	8001058 <HAL_GPIO_WritePin>
 80005be:	e7de      	b.n	800057e <my_Task+0x6>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c6:	4808      	ldr	r0, [pc, #32]	; (80005e8 <my_Task+0x70>)
 80005c8:	f000 fd46 	bl	8001058 <HAL_GPIO_WritePin>
			if (my_arr==10)
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <my_Task+0x68>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b0a      	cmp	r3, #10
 80005d2:	d1d4      	bne.n	800057e <my_Task+0x6>
			{
				my_arr = 1;
 80005d4:	4b02      	ldr	r3, [pc, #8]	; (80005e0 <my_Task+0x68>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
		if (xQueueReceive(myQueueHandle, &quqMSG, 1)==pdTRUE)
 80005da:	e7d0      	b.n	800057e <my_Task+0x6>
 80005dc:	20000034 	.word	0x20000034
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000002 	.word	0x20000002
 80005e8:	48000400 	.word	0x48000400

080005ec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_GPIO_Init+0x78>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	4a17      	ldr	r2, [pc, #92]	; (8000664 <MX_GPIO_Init+0x78>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_GPIO_Init+0x78>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_GPIO_Init+0x78>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	4a11      	ldr	r2, [pc, #68]	; (8000664 <MX_GPIO_Init+0x78>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_GPIO_Init+0x78>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000638:	480b      	ldr	r0, [pc, #44]	; (8000668 <MX_GPIO_Init+0x7c>)
 800063a:	f000 fd0d 	bl	8001058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800063e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000642:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	4619      	mov	r1, r3
 8000656:	4804      	ldr	r0, [pc, #16]	; (8000668 <MX_GPIO_Init+0x7c>)
 8000658:	f000 fb8c 	bl	8000d74 <HAL_GPIO_Init>

}
 800065c:	bf00      	nop
 800065e:	3720      	adds	r7, #32
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000
 8000668:	48000400 	.word	0x48000400

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f000 fa66 	bl	8000b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000674:	f000 f810 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000678:	f7ff ffb8 	bl	80005ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800067c:	f000 f98e 	bl	800099c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000680:	f000 f930 	bl	80008e4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000684:	4803      	ldr	r0, [pc, #12]	; (8000694 <main+0x28>)
 8000686:	f001 fddf 	bl	8002248 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800068a:	f7ff ff37 	bl	80004fc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800068e:	f002 fc5b 	bl	8002f48 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8000692:	e7fe      	b.n	8000692 <main+0x26>
 8000694:	20000fe0 	.word	0x20000fe0

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b0a4      	sub	sp, #144	; 0x90
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006a2:	2244      	movs	r2, #68	; 0x44
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f004 fa08 	bl	8004abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2234      	movs	r2, #52	; 0x34
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 f9fa 	bl	8004abc <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006c8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006cc:	f000 fcea 	bl	80010a4 <HAL_PWREx_ControlVoltageScaling>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x42>
  {
    Error_Handler();
 80006d6:	f000 f857 	bl	8000788 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006da:	2310      	movs	r3, #16
 80006dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006de:	2301      	movs	r3, #1
 80006e0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006e6:	2360      	movs	r3, #96	; 0x60
 80006e8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006ee:	2301      	movs	r3, #1
 80006f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f2:	2301      	movs	r3, #1
 80006f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006f8:	2328      	movs	r3, #40	; 0x28
 80006fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fd1e 	bl	8001150 <HAL_RCC_OscConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800071a:	f000 f835 	bl	8000788 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	230f      	movs	r3, #15
 8000720:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000722:	2303      	movs	r3, #3
 8000724:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000732:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000736:	2104      	movs	r1, #4
 8000738:	4618      	mov	r0, r3
 800073a:	f001 f96f 	bl	8001a1c <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000744:	f000 f820 	bl	8000788 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000748:	2302      	movs	r3, #2
 800074a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fb9a 	bl	8001e8c <HAL_RCCEx_PeriphCLKConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800075e:	f000 f813 	bl	8000788 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3790      	adds	r7, #144	; 0x90
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800077a:	d101      	bne.n	8000780 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800077c:	f000 f9f8 	bl	8000b70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
}
 800078e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000790:	e7fe      	b.n	8000790 <Error_Handler+0x8>
	...

08000794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_MspInit+0x4c>)
 800079c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800079e:	4a10      	ldr	r2, [pc, #64]	; (80007e0 <HAL_MspInit+0x4c>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6613      	str	r3, [r2, #96]	; 0x60
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <HAL_MspInit+0x4c>)
 80007a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <HAL_MspInit+0x4c>)
 80007b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <HAL_MspInit+0x4c>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007bc:	6593      	str	r3, [r2, #88]	; 0x58
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <HAL_MspInit+0x4c>)
 80007c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	210f      	movs	r1, #15
 80007ce:	f06f 0001 	mvn.w	r0, #1
 80007d2:	f000 faa5 	bl	8000d20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000

080007e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08c      	sub	sp, #48	; 0x30
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	201c      	movs	r0, #28
 80007fa:	f000 fa91 	bl	8000d20 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007fe:	201c      	movs	r0, #28
 8000800:	f000 faaa 	bl	8000d58 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <HAL_InitTick+0xa0>)
 8000806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000808:	4a1e      	ldr	r2, [pc, #120]	; (8000884 <HAL_InitTick+0xa0>)
 800080a:	f043 0301 	orr.w	r3, r3, #1
 800080e:	6593      	str	r3, [r2, #88]	; 0x58
 8000810:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <HAL_InitTick+0xa0>)
 8000812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800081c:	f107 0210 	add.w	r2, r7, #16
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4611      	mov	r1, r2
 8000826:	4618      	mov	r0, r3
 8000828:	f001 fa9e 	bl	8001d68 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800082c:	f001 fa70 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 8000830:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000834:	4a14      	ldr	r2, [pc, #80]	; (8000888 <HAL_InitTick+0xa4>)
 8000836:	fba2 2303 	umull	r2, r3, r2, r3
 800083a:	0c9b      	lsrs	r3, r3, #18
 800083c:	3b01      	subs	r3, #1
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <HAL_InitTick+0xa8>)
 8000842:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000846:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <HAL_InitTick+0xa8>)
 800084a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800084e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000850:	4a0e      	ldr	r2, [pc, #56]	; (800088c <HAL_InitTick+0xa8>)
 8000852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000854:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <HAL_InitTick+0xa8>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085c:	4b0b      	ldr	r3, [pc, #44]	; (800088c <HAL_InitTick+0xa8>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000862:	480a      	ldr	r0, [pc, #40]	; (800088c <HAL_InitTick+0xa8>)
 8000864:	f001 fc98 	bl	8002198 <HAL_TIM_Base_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d104      	bne.n	8000878 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800086e:	4807      	ldr	r0, [pc, #28]	; (800088c <HAL_InitTick+0xa8>)
 8000870:	f001 fcea 	bl	8002248 <HAL_TIM_Base_Start_IT>
 8000874:	4603      	mov	r3, r0
 8000876:	e000      	b.n	800087a <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 8000878:	2301      	movs	r3, #1
}
 800087a:	4618      	mov	r0, r3
 800087c:	3730      	adds	r7, #48	; 0x30
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40021000 	.word	0x40021000
 8000888:	431bde83 	.word	0x431bde83
 800088c:	20000f94 	.word	0x20000f94

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <NMI_Handler+0x4>

08000896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <HardFault_Handler+0x4>

0800089c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <MemManage_Handler+0x4>

080008a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <BusFault_Handler+0x4>

080008a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <UsageFault_Handler+0x4>

080008ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008c0:	4802      	ldr	r0, [pc, #8]	; (80008cc <TIM2_IRQHandler+0x10>)
 80008c2:	f001 fd15 	bl	80022f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000f94 	.word	0x20000f94

080008d0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008d4:	4802      	ldr	r0, [pc, #8]	; (80008e0 <TIM6_IRQHandler+0x10>)
 80008d6:	f001 fd0b 	bl	80022f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000fe0 	.word	0x20000fe0

080008e4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_TIM6_Init+0x64>)
 80008f6:	4a15      	ldr	r2, [pc, #84]	; (800094c <MX_TIM6_Init+0x68>)
 80008f8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_TIM6_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_TIM6_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8000-1;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_TIM6_Init+0x64>)
 8000908:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800090c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_TIM6_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <MX_TIM6_Init+0x64>)
 8000916:	f001 fc3f 	bl	8002198 <HAL_TIM_Base_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000920:	f7ff ff32 	bl	8000788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000924:	2300      	movs	r3, #0
 8000926:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	4619      	mov	r1, r3
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_TIM6_Init+0x64>)
 8000932:	f001 fe89 	bl	8002648 <HAL_TIMEx_MasterConfigSynchronization>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800093c:	f7ff ff24 	bl	8000788 <Error_Handler>
  }

}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000fe0 	.word	0x20000fe0
 800094c:	40001000 	.word	0x40001000

08000950 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <HAL_TIM_Base_MspInit+0x44>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d113      	bne.n	800098a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <HAL_TIM_Base_MspInit+0x48>)
 8000964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000966:	4a0c      	ldr	r2, [pc, #48]	; (8000998 <HAL_TIM_Base_MspInit+0x48>)
 8000968:	f043 0310 	orr.w	r3, r3, #16
 800096c:	6593      	str	r3, [r2, #88]	; 0x58
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <HAL_TIM_Base_MspInit+0x48>)
 8000970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000972:	f003 0310 	and.w	r3, r3, #16
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2105      	movs	r1, #5
 800097e:	2036      	movs	r0, #54	; 0x36
 8000980:	f000 f9ce 	bl	8000d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000984:	2036      	movs	r0, #54	; 0x36
 8000986:	f000 f9e7 	bl	8000d58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40001000 	.word	0x40001000
 8000998:	40021000 	.word	0x40021000

0800099c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009a2:	4a15      	ldr	r2, [pc, #84]	; (80009f8 <MX_USART2_UART_Init+0x5c>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_USART2_UART_Init+0x58>)
 80009e0:	f001 feb6 	bl	8002750 <HAL_UART_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ea:	f7ff fecd 	bl	8000788 <Error_Handler>
  }

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	2000102c 	.word	0x2000102c
 80009f8:	40004400 	.word	0x40004400

080009fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a17      	ldr	r2, [pc, #92]	; (8000a78 <HAL_UART_MspInit+0x7c>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d128      	bne.n	8000a70 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <HAL_UART_MspInit+0x80>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a22:	4a16      	ldr	r2, [pc, #88]	; (8000a7c <HAL_UART_MspInit+0x80>)
 8000a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a28:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <HAL_UART_MspInit+0x80>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <HAL_UART_MspInit+0x80>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	4a10      	ldr	r2, [pc, #64]	; (8000a7c <HAL_UART_MspInit+0x80>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <HAL_UART_MspInit+0x80>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a4e:	230c      	movs	r3, #12
 8000a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a5e:	2307      	movs	r3, #7
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4619      	mov	r1, r3
 8000a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6c:	f000 f982 	bl	8000d74 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a70:	bf00      	nop
 8000a72:	3728      	adds	r7, #40	; 0x28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40004400 	.word	0x40004400
 8000a7c:	40021000 	.word	0x40021000

08000a80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a84:	f000 f826 	bl	8000ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a88:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a8a:	e003      	b.n	8000a94 <LoopCopyDataInit>

08000a8c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a8e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a90:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a92:	3104      	adds	r1, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a94:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a98:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a9a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a9c:	d3f6      	bcc.n	8000a8c <CopyDataInit>
	ldr	r2, =_sbss
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000aa0:	e002      	b.n	8000aa8 <LoopFillZerobss>

08000aa2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000aa2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000aa4:	f842 3b04 	str.w	r3, [r2], #4

08000aa8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <LoopForever+0x16>)
	cmp	r2, r3
 8000aaa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000aac:	d3f9      	bcc.n	8000aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aae:	f003 ffd3 	bl	8004a58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ab2:	f7ff fddb 	bl	800066c <main>

08000ab6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ab6:	e7fe      	b.n	8000ab6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ab8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000abc:	08004b74 	.word	0x08004b74
	ldr	r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ac4:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8000ac8:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8000acc:	200010b0 	.word	0x200010b0

08000ad0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC1_2_IRQHandler>
	...

08000ad4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad8:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <SystemInit+0x64>)
 8000ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ade:	4a16      	ldr	r2, [pc, #88]	; (8000b38 <SystemInit+0x64>)
 8000ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <SystemInit+0x68>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a13      	ldr	r2, [pc, #76]	; (8000b3c <SystemInit+0x68>)
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <SystemInit+0x68>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <SystemInit+0x68>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <SystemInit+0x68>)
 8000b00:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b04:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <SystemInit+0x68>)
 8000b0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b10:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <SystemInit+0x68>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a09      	ldr	r2, [pc, #36]	; (8000b3c <SystemInit+0x68>)
 8000b18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <SystemInit+0x68>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <SystemInit+0x64>)
 8000b26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b2a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00
 8000b3c:	40021000 	.word	0x40021000

08000b40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4a:	2003      	movs	r0, #3
 8000b4c:	f000 f8dd 	bl	8000d0a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff fe47 	bl	80007e4 <HAL_InitTick>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d002      	beq.n	8000b62 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	71fb      	strb	r3, [r7, #7]
 8000b60:	e001      	b.n	8000b66 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b62:	f7ff fe17 	bl	8000794 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b66:	79fb      	ldrb	r3, [r7, #7]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_IncTick+0x20>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x24>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <HAL_IncTick+0x24>)
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	2000000c 	.word	0x2000000c
 8000b94:	200010ac 	.word	0x200010ac

08000b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <HAL_GetTick+0x14>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	200010ac 	.word	0x200010ac

08000bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	db0b      	blt.n	8000c3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f003 021f 	and.w	r2, r3, #31
 8000c2c:	4907      	ldr	r1, [pc, #28]	; (8000c4c <__NVIC_EnableIRQ+0x38>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	2001      	movs	r0, #1
 8000c36:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	; (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	; (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	; 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	; 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ff4c 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d32:	f7ff ff61 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	68b9      	ldr	r1, [r7, #8]
 8000d3c:	6978      	ldr	r0, [r7, #20]
 8000d3e:	f7ff ffb1 	bl	8000ca4 <NVIC_EncodePriority>
 8000d42:	4602      	mov	r2, r0
 8000d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff80 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d50:	bf00      	nop
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff54 	bl	8000c14 <__NVIC_EnableIRQ>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d82:	e14e      	b.n	8001022 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	2101      	movs	r1, #1
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d90:	4013      	ands	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 8140 	beq.w	800101c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d00b      	beq.n	8000dbc <HAL_GPIO_Init+0x48>
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d007      	beq.n	8000dbc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db0:	2b11      	cmp	r3, #17
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2b12      	cmp	r3, #18
 8000dba:	d130      	bne.n	8000e1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	68da      	ldr	r2, [r3, #12]
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000df2:	2201      	movs	r2, #1
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	091b      	lsrs	r3, r3, #4
 8000e08:	f003 0201 	and.w	r2, r3, #1
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	2203      	movs	r2, #3
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_Init+0xea>
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2b12      	cmp	r3, #18
 8000e5c:	d123      	bne.n	8000ea6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	08da      	lsrs	r2, r3, #3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3208      	adds	r2, #8
 8000e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	220f      	movs	r2, #15
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	691a      	ldr	r2, [r3, #16]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	08da      	lsrs	r2, r3, #3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3208      	adds	r2, #8
 8000ea0:	6939      	ldr	r1, [r7, #16]
 8000ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0203 	and.w	r2, r3, #3
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 809a 	beq.w	800101c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee8:	4b55      	ldr	r3, [pc, #340]	; (8001040 <HAL_GPIO_Init+0x2cc>)
 8000eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eec:	4a54      	ldr	r2, [pc, #336]	; (8001040 <HAL_GPIO_Init+0x2cc>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ef4:	4b52      	ldr	r3, [pc, #328]	; (8001040 <HAL_GPIO_Init+0x2cc>)
 8000ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f00:	4a50      	ldr	r2, [pc, #320]	; (8001044 <HAL_GPIO_Init+0x2d0>)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	089b      	lsrs	r3, r3, #2
 8000f06:	3302      	adds	r3, #2
 8000f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	220f      	movs	r2, #15
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f2a:	d013      	beq.n	8000f54 <HAL_GPIO_Init+0x1e0>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a46      	ldr	r2, [pc, #280]	; (8001048 <HAL_GPIO_Init+0x2d4>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d00d      	beq.n	8000f50 <HAL_GPIO_Init+0x1dc>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a45      	ldr	r2, [pc, #276]	; (800104c <HAL_GPIO_Init+0x2d8>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d007      	beq.n	8000f4c <HAL_GPIO_Init+0x1d8>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a44      	ldr	r2, [pc, #272]	; (8001050 <HAL_GPIO_Init+0x2dc>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d101      	bne.n	8000f48 <HAL_GPIO_Init+0x1d4>
 8000f44:	2303      	movs	r3, #3
 8000f46:	e006      	b.n	8000f56 <HAL_GPIO_Init+0x1e2>
 8000f48:	2307      	movs	r3, #7
 8000f4a:	e004      	b.n	8000f56 <HAL_GPIO_Init+0x1e2>
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	e002      	b.n	8000f56 <HAL_GPIO_Init+0x1e2>
 8000f50:	2301      	movs	r3, #1
 8000f52:	e000      	b.n	8000f56 <HAL_GPIO_Init+0x1e2>
 8000f54:	2300      	movs	r3, #0
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	f002 0203 	and.w	r2, r2, #3
 8000f5c:	0092      	lsls	r2, r2, #2
 8000f5e:	4093      	lsls	r3, r2
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f66:	4937      	ldr	r1, [pc, #220]	; (8001044 <HAL_GPIO_Init+0x2d0>)
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f74:	4b37      	ldr	r3, [pc, #220]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f98:	4a2e      	ldr	r2, [pc, #184]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000f9e:	4b2d      	ldr	r3, [pc, #180]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fc2:	4a24      	ldr	r2, [pc, #144]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fc8:	4b22      	ldr	r3, [pc, #136]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fec:	4a19      	ldr	r2, [pc, #100]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001016:	4a0f      	ldr	r2, [pc, #60]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	3301      	adds	r3, #1
 8001020:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	fa22 f303 	lsr.w	r3, r2, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	f47f aea9 	bne.w	8000d84 <HAL_GPIO_Init+0x10>
  }
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	371c      	adds	r7, #28
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	40021000 	.word	0x40021000
 8001044:	40010000 	.word	0x40010000
 8001048:	48000400 	.word	0x48000400
 800104c:	48000800 	.word	0x48000800
 8001050:	48000c00 	.word	0x48000c00
 8001054:	40010400 	.word	0x40010400

08001058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
 8001064:	4613      	mov	r3, r2
 8001066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001068:	787b      	ldrb	r3, [r7, #1]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800106e:	887a      	ldrh	r2, [r7, #2]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001074:	e002      	b.n	800107c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001076:	887a      	ldrh	r2, [r7, #2]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40007000 	.word	0x40007000

080010a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010b2:	d130      	bne.n	8001116 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010b4:	4b23      	ldr	r3, [pc, #140]	; (8001144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010c0:	d038      	beq.n	8001134 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c2:	4b20      	ldr	r3, [pc, #128]	; (8001144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010ca:	4a1e      	ldr	r2, [pc, #120]	; (8001144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2232      	movs	r2, #50	; 0x32
 80010d8:	fb02 f303 	mul.w	r3, r2, r3
 80010dc:	4a1b      	ldr	r2, [pc, #108]	; (800114c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010de:	fba2 2303 	umull	r2, r3, r2, r3
 80010e2:	0c9b      	lsrs	r3, r3, #18
 80010e4:	3301      	adds	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010e8:	e002      	b.n	80010f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010fc:	d102      	bne.n	8001104 <HAL_PWREx_ControlVoltageScaling+0x60>
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1f2      	bne.n	80010ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800110c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001110:	d110      	bne.n	8001134 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e00f      	b.n	8001136 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800111e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001122:	d007      	beq.n	8001134 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800112c:	4a05      	ldr	r2, [pc, #20]	; (8001144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001132:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40007000 	.word	0x40007000
 8001148:	20000004 	.word	0x20000004
 800114c:	431bde83 	.word	0x431bde83

08001150 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d102      	bne.n	8001164 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	f000 bc56 	b.w	8001a10 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001164:	4ba1      	ldr	r3, [pc, #644]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f003 030c 	and.w	r3, r3, #12
 800116c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800116e:	4b9f      	ldr	r3, [pc, #636]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0310 	and.w	r3, r3, #16
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 80e6 	beq.w	8001352 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001186:	6a3b      	ldr	r3, [r7, #32]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d007      	beq.n	800119c <HAL_RCC_OscConfig+0x4c>
 800118c:	6a3b      	ldr	r3, [r7, #32]
 800118e:	2b0c      	cmp	r3, #12
 8001190:	f040 808d 	bne.w	80012ae <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	2b01      	cmp	r3, #1
 8001198:	f040 8089 	bne.w	80012ae <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800119c:	4b93      	ldr	r3, [pc, #588]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d006      	beq.n	80011b6 <HAL_RCC_OscConfig+0x66>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69db      	ldr	r3, [r3, #28]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	f000 bc2d 	b.w	8001a10 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011ba:	4b8c      	ldr	r3, [pc, #560]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d004      	beq.n	80011d0 <HAL_RCC_OscConfig+0x80>
 80011c6:	4b89      	ldr	r3, [pc, #548]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011ce:	e005      	b.n	80011dc <HAL_RCC_OscConfig+0x8c>
 80011d0:	4b86      	ldr	r3, [pc, #536]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 80011d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011d6:	091b      	lsrs	r3, r3, #4
 80011d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011dc:	4293      	cmp	r3, r2
 80011de:	d224      	bcs.n	800122a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 fdf1 	bl	8001dcc <RCC_SetFlashLatencyFromMSIRange>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d002      	beq.n	80011f6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	f000 bc0d 	b.w	8001a10 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011f6:	4b7d      	ldr	r3, [pc, #500]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a7c      	ldr	r2, [pc, #496]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	4b7a      	ldr	r3, [pc, #488]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	4977      	ldr	r1, [pc, #476]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 8001210:	4313      	orrs	r3, r2
 8001212:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001214:	4b75      	ldr	r3, [pc, #468]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	4972      	ldr	r1, [pc, #456]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 8001224:	4313      	orrs	r3, r2
 8001226:	604b      	str	r3, [r1, #4]
 8001228:	e025      	b.n	8001276 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800122a:	4b70      	ldr	r3, [pc, #448]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a6f      	ldr	r2, [pc, #444]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 8001230:	f043 0308 	orr.w	r3, r3, #8
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	4b6d      	ldr	r3, [pc, #436]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	496a      	ldr	r1, [pc, #424]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 8001244:	4313      	orrs	r3, r2
 8001246:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001248:	4b68      	ldr	r3, [pc, #416]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	4965      	ldr	r1, [pc, #404]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 8001258:	4313      	orrs	r3, r2
 800125a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800125c:	6a3b      	ldr	r3, [r7, #32]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d109      	bne.n	8001276 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fdb0 	bl	8001dcc <RCC_SetFlashLatencyFromMSIRange>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e3cc      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001276:	f000 fcb3 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 800127a:	4602      	mov	r2, r0
 800127c:	4b5b      	ldr	r3, [pc, #364]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	495a      	ldr	r1, [pc, #360]	; (80013f0 <HAL_RCC_OscConfig+0x2a0>)
 8001288:	5ccb      	ldrb	r3, [r1, r3]
 800128a:	f003 031f 	and.w	r3, r3, #31
 800128e:	fa22 f303 	lsr.w	r3, r2, r3
 8001292:	4a58      	ldr	r2, [pc, #352]	; (80013f4 <HAL_RCC_OscConfig+0x2a4>)
 8001294:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001296:	4b58      	ldr	r3, [pc, #352]	; (80013f8 <HAL_RCC_OscConfig+0x2a8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff faa2 	bl	80007e4 <HAL_InitTick>
 80012a0:	4603      	mov	r3, r0
 80012a2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80012a4:	7dfb      	ldrb	r3, [r7, #23]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d052      	beq.n	8001350 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80012aa:	7dfb      	ldrb	r3, [r7, #23]
 80012ac:	e3b0      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d032      	beq.n	800131c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012b6:	4b4d      	ldr	r3, [pc, #308]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a4c      	ldr	r2, [pc, #304]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012c2:	f7ff fc69 	bl	8000b98 <HAL_GetTick>
 80012c6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012ca:	f7ff fc65 	bl	8000b98 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e399      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012dc:	4b43      	ldr	r3, [pc, #268]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0f0      	beq.n	80012ca <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e8:	4b40      	ldr	r3, [pc, #256]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a3f      	ldr	r2, [pc, #252]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b3d      	ldr	r3, [pc, #244]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001300:	493a      	ldr	r1, [pc, #232]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 8001302:	4313      	orrs	r3, r2
 8001304:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001306:	4b39      	ldr	r3, [pc, #228]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	4935      	ldr	r1, [pc, #212]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 8001316:	4313      	orrs	r3, r2
 8001318:	604b      	str	r3, [r1, #4]
 800131a:	e01a      	b.n	8001352 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800131c:	4b33      	ldr	r3, [pc, #204]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a32      	ldr	r2, [pc, #200]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 8001322:	f023 0301 	bic.w	r3, r3, #1
 8001326:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001328:	f7ff fc36 	bl	8000b98 <HAL_GetTick>
 800132c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001330:	f7ff fc32 	bl	8000b98 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e366      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001342:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x1e0>
 800134e:	e000      	b.n	8001352 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001350:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d073      	beq.n	8001446 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	2b08      	cmp	r3, #8
 8001362:	d005      	beq.n	8001370 <HAL_RCC_OscConfig+0x220>
 8001364:	6a3b      	ldr	r3, [r7, #32]
 8001366:	2b0c      	cmp	r3, #12
 8001368:	d10e      	bne.n	8001388 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	2b03      	cmp	r3, #3
 800136e:	d10b      	bne.n	8001388 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001370:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d063      	beq.n	8001444 <HAL_RCC_OscConfig+0x2f4>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d15f      	bne.n	8001444 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e343      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001390:	d106      	bne.n	80013a0 <HAL_RCC_OscConfig+0x250>
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a15      	ldr	r2, [pc, #84]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 8001398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	e01d      	b.n	80013dc <HAL_RCC_OscConfig+0x28c>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013a8:	d10c      	bne.n	80013c4 <HAL_RCC_OscConfig+0x274>
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 80013b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a0c      	ldr	r2, [pc, #48]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 80013bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	e00b      	b.n	80013dc <HAL_RCC_OscConfig+0x28c>
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a08      	ldr	r2, [pc, #32]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 80013ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a05      	ldr	r2, [pc, #20]	; (80013ec <HAL_RCC_OscConfig+0x29c>)
 80013d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d01b      	beq.n	800141c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e4:	f7ff fbd8 	bl	8000b98 <HAL_GetTick>
 80013e8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ea:	e010      	b.n	800140e <HAL_RCC_OscConfig+0x2be>
 80013ec:	40021000 	.word	0x40021000
 80013f0:	08004b1c 	.word	0x08004b1c
 80013f4:	20000004 	.word	0x20000004
 80013f8:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013fc:	f7ff fbcc 	bl	8000b98 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b64      	cmp	r3, #100	; 0x64
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e300      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800140e:	4ba0      	ldr	r3, [pc, #640]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f0      	beq.n	80013fc <HAL_RCC_OscConfig+0x2ac>
 800141a:	e014      	b.n	8001446 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141c:	f7ff fbbc 	bl	8000b98 <HAL_GetTick>
 8001420:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff fbb8 	bl	8000b98 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	; 0x64
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e2ec      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001436:	4b96      	ldr	r3, [pc, #600]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x2d4>
 8001442:	e000      	b.n	8001446 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d060      	beq.n	8001514 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001452:	6a3b      	ldr	r3, [r7, #32]
 8001454:	2b04      	cmp	r3, #4
 8001456:	d005      	beq.n	8001464 <HAL_RCC_OscConfig+0x314>
 8001458:	6a3b      	ldr	r3, [r7, #32]
 800145a:	2b0c      	cmp	r3, #12
 800145c:	d119      	bne.n	8001492 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d116      	bne.n	8001492 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001464:	4b8a      	ldr	r3, [pc, #552]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_RCC_OscConfig+0x32c>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e2c9      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147c:	4b84      	ldr	r3, [pc, #528]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	061b      	lsls	r3, r3, #24
 800148a:	4981      	ldr	r1, [pc, #516]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 800148c:	4313      	orrs	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001490:	e040      	b.n	8001514 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d023      	beq.n	80014e2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800149a:	4b7d      	ldr	r3, [pc, #500]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a7c      	ldr	r2, [pc, #496]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 80014a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a6:	f7ff fb77 	bl	8000b98 <HAL_GetTick>
 80014aa:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ae:	f7ff fb73 	bl	8000b98 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e2a7      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c0:	4b73      	ldr	r3, [pc, #460]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014cc:	4b70      	ldr	r3, [pc, #448]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	061b      	lsls	r3, r3, #24
 80014da:	496d      	ldr	r1, [pc, #436]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
 80014e0:	e018      	b.n	8001514 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e2:	4b6b      	ldr	r3, [pc, #428]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a6a      	ldr	r2, [pc, #424]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 80014e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ee:	f7ff fb53 	bl	8000b98 <HAL_GetTick>
 80014f2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f6:	f7ff fb4f 	bl	8000b98 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e283      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001508:	4b61      	ldr	r3, [pc, #388]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f0      	bne.n	80014f6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	2b00      	cmp	r3, #0
 800151e:	d07f      	beq.n	8001620 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d05f      	beq.n	80015e8 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001528:	4b59      	ldr	r3, [pc, #356]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 800152a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800152e:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	699a      	ldr	r2, [r3, #24]
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	429a      	cmp	r2, r3
 800153c:	d037      	beq.n	80015ae <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d006      	beq.n	8001556 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e25c      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b00      	cmp	r3, #0
 800155e:	d01b      	beq.n	8001598 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8001560:	4b4b      	ldr	r3, [pc, #300]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 8001562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001566:	4a4a      	ldr	r2, [pc, #296]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 8001568:	f023 0301 	bic.w	r3, r3, #1
 800156c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001570:	f7ff fb12 	bl	8000b98 <HAL_GetTick>
 8001574:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001578:	f7ff fb0e 	bl	8000b98 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b11      	cmp	r3, #17
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e242      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800158a:	4b41      	ldr	r3, [pc, #260]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 800158c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1ef      	bne.n	8001578 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001598:	4b3d      	ldr	r3, [pc, #244]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 800159a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800159e:	f023 0210 	bic.w	r2, r3, #16
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	493a      	ldr	r1, [pc, #232]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ae:	4b38      	ldr	r3, [pc, #224]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 80015b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b4:	4a36      	ldr	r2, [pc, #216]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015be:	f7ff faeb 	bl	8000b98 <HAL_GetTick>
 80015c2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c6:	f7ff fae7 	bl	8000b98 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b11      	cmp	r3, #17
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e21b      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015d8:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 80015da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0ef      	beq.n	80015c6 <HAL_RCC_OscConfig+0x476>
 80015e6:	e01b      	b.n	8001620 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e8:	4b29      	ldr	r3, [pc, #164]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 80015ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ee:	4a28      	ldr	r2, [pc, #160]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 80015f0:	f023 0301 	bic.w	r3, r3, #1
 80015f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f8:	f7ff face 	bl	8000b98 <HAL_GetTick>
 80015fc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001600:	f7ff faca 	bl	8000b98 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b11      	cmp	r3, #17
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e1fe      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001612:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 8001614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1ef      	bne.n	8001600 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 80c1 	beq.w	80017b0 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 800162e:	2300      	movs	r3, #0
 8001630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 8001636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d10e      	bne.n	800165e <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 8001642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001644:	4a12      	ldr	r2, [pc, #72]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 8001646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800164a:	6593      	str	r3, [r2, #88]	; 0x58
 800164c:	4b10      	ldr	r3, [pc, #64]	; (8001690 <HAL_RCC_OscConfig+0x540>)
 800164e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001658:	2301      	movs	r3, #1
 800165a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <HAL_RCC_OscConfig+0x544>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001666:	2b00      	cmp	r3, #0
 8001668:	d11c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_RCC_OscConfig+0x544>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a09      	ldr	r2, [pc, #36]	; (8001694 <HAL_RCC_OscConfig+0x544>)
 8001670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001676:	f7ff fa8f 	bl	8000b98 <HAL_GetTick>
 800167a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800167c:	e00c      	b.n	8001698 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800167e:	f7ff fa8b 	bl	8000b98 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d905      	bls.n	8001698 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e1bf      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
 8001690:	40021000 	.word	0x40021000
 8001694:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001698:	4bb1      	ldr	r3, [pc, #708]	; (8001960 <HAL_RCC_OscConfig+0x810>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0ec      	beq.n	800167e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d02c      	beq.n	800170a <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80016b0:	4bac      	ldr	r3, [pc, #688]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 80016b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c2:	49a8      	ldr	r1, [pc, #672]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d010      	beq.n	80016f8 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80016d6:	4ba3      	ldr	r3, [pc, #652]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 80016d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016dc:	4aa1      	ldr	r2, [pc, #644]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80016e6:	4b9f      	ldr	r3, [pc, #636]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 80016e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ec:	4a9d      	ldr	r2, [pc, #628]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016f6:	e018      	b.n	800172a <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80016f8:	4b9a      	ldr	r3, [pc, #616]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 80016fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fe:	4a99      	ldr	r2, [pc, #612]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001708:	e00f      	b.n	800172a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800170a:	4b96      	ldr	r3, [pc, #600]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 800170c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001710:	4a94      	ldr	r2, [pc, #592]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 8001712:	f023 0301 	bic.w	r3, r3, #1
 8001716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800171a:	4b92      	ldr	r3, [pc, #584]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 800171c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001720:	4a90      	ldr	r2, [pc, #576]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 8001722:	f023 0304 	bic.w	r3, r3, #4
 8001726:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d016      	beq.n	8001760 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001732:	f7ff fa31 	bl	8000b98 <HAL_GetTick>
 8001736:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001738:	e00a      	b.n	8001750 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173a:	f7ff fa2d 	bl	8000b98 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	f241 3288 	movw	r2, #5000	; 0x1388
 8001748:	4293      	cmp	r3, r2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e15f      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001750:	4b84      	ldr	r3, [pc, #528]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 8001752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0ed      	beq.n	800173a <HAL_RCC_OscConfig+0x5ea>
 800175e:	e01d      	b.n	800179c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001760:	f7ff fa1a 	bl	8000b98 <HAL_GetTick>
 8001764:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001766:	e00a      	b.n	800177e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001768:	f7ff fa16 	bl	8000b98 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f241 3288 	movw	r2, #5000	; 0x1388
 8001776:	4293      	cmp	r3, r2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e148      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800177e:	4b79      	ldr	r3, [pc, #484]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 8001780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1ed      	bne.n	8001768 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800178c:	4b75      	ldr	r3, [pc, #468]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 800178e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001792:	4a74      	ldr	r2, [pc, #464]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 8001794:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800179c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d105      	bne.n	80017b0 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a4:	4b6f      	ldr	r3, [pc, #444]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 80017a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a8:	4a6e      	ldr	r2, [pc, #440]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 80017aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0320 	and.w	r3, r3, #32
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d03c      	beq.n	8001836 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d01c      	beq.n	80017fe <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017c4:	4b67      	ldr	r3, [pc, #412]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 80017c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017ca:	4a66      	ldr	r2, [pc, #408]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d4:	f7ff f9e0 	bl	8000b98 <HAL_GetTick>
 80017d8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017dc:	f7ff f9dc 	bl	8000b98 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e110      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017ee:	4b5d      	ldr	r3, [pc, #372]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 80017f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0ef      	beq.n	80017dc <HAL_RCC_OscConfig+0x68c>
 80017fc:	e01b      	b.n	8001836 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017fe:	4b59      	ldr	r3, [pc, #356]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 8001800:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001804:	4a57      	ldr	r2, [pc, #348]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 8001806:	f023 0301 	bic.w	r3, r3, #1
 800180a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180e:	f7ff f9c3 	bl	8000b98 <HAL_GetTick>
 8001812:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001816:	f7ff f9bf 	bl	8000b98 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e0f3      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001828:	4b4e      	ldr	r3, [pc, #312]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 800182a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1ef      	bne.n	8001816 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80e7 	beq.w	8001a0e <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	2b02      	cmp	r3, #2
 8001846:	f040 80b7 	bne.w	80019b8 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800184a:	4b46      	ldr	r3, [pc, #280]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f003 0203 	and.w	r2, r3, #3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	429a      	cmp	r2, r3
 800185c:	d124      	bne.n	80018a8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001868:	3b01      	subs	r3, #1
 800186a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800186c:	429a      	cmp	r2, r3
 800186e:	d11b      	bne.n	80018a8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d113      	bne.n	80018a8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188a:	085b      	lsrs	r3, r3, #1
 800188c:	3b01      	subs	r3, #1
 800188e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001890:	429a      	cmp	r2, r3
 8001892:	d109      	bne.n	80018a8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	085b      	lsrs	r3, r3, #1
 80018a0:	3b01      	subs	r3, #1
 80018a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d061      	beq.n	800196c <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	2b0c      	cmp	r3, #12
 80018ac:	d056      	beq.n	800195c <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018ae:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a2c      	ldr	r2, [pc, #176]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 80018b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018ba:	f7ff f96d 	bl	8000b98 <HAL_GetTick>
 80018be:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c2:	f7ff f969 	bl	8000b98 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e09d      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d4:	4b23      	ldr	r3, [pc, #140]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1f0      	bne.n	80018c2 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e0:	4b20      	ldr	r3, [pc, #128]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	4b20      	ldr	r3, [pc, #128]	; (8001968 <HAL_RCC_OscConfig+0x818>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018f0:	3a01      	subs	r2, #1
 80018f2:	0112      	lsls	r2, r2, #4
 80018f4:	4311      	orrs	r1, r2
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018fa:	0212      	lsls	r2, r2, #8
 80018fc:	4311      	orrs	r1, r2
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001902:	0852      	lsrs	r2, r2, #1
 8001904:	3a01      	subs	r2, #1
 8001906:	0552      	lsls	r2, r2, #21
 8001908:	4311      	orrs	r1, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800190e:	0852      	lsrs	r2, r2, #1
 8001910:	3a01      	subs	r2, #1
 8001912:	0652      	lsls	r2, r2, #25
 8001914:	430a      	orrs	r2, r1
 8001916:	4913      	ldr	r1, [pc, #76]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 8001918:	4313      	orrs	r3, r2
 800191a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a10      	ldr	r2, [pc, #64]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 8001922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001926:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001928:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 800192e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001932:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001934:	f7ff f930 	bl	8000b98 <HAL_GetTick>
 8001938:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff f92c 	bl	8000b98 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e060      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_RCC_OscConfig+0x814>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800195a:	e058      	b.n	8001a0e <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e057      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
 8001960:	40007000 	.word	0x40007000
 8001964:	40021000 	.word	0x40021000
 8001968:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800196c:	4b2a      	ldr	r3, [pc, #168]	; (8001a18 <HAL_RCC_OscConfig+0x8c8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d14a      	bne.n	8001a0e <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001978:	4b27      	ldr	r3, [pc, #156]	; (8001a18 <HAL_RCC_OscConfig+0x8c8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a26      	ldr	r2, [pc, #152]	; (8001a18 <HAL_RCC_OscConfig+0x8c8>)
 800197e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001982:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001984:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <HAL_RCC_OscConfig+0x8c8>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4a23      	ldr	r2, [pc, #140]	; (8001a18 <HAL_RCC_OscConfig+0x8c8>)
 800198a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800198e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001990:	f7ff f902 	bl	8000b98 <HAL_GetTick>
 8001994:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001998:	f7ff f8fe 	bl	8000b98 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e032      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019aa:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_RCC_OscConfig+0x8c8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x848>
 80019b6:	e02a      	b.n	8001a0e <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	2b0c      	cmp	r3, #12
 80019bc:	d025      	beq.n	8001a0a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019be:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <HAL_RCC_OscConfig+0x8c8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a15      	ldr	r2, [pc, #84]	; (8001a18 <HAL_RCC_OscConfig+0x8c8>)
 80019c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019c8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80019ca:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <HAL_RCC_OscConfig+0x8c8>)
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <HAL_RCC_OscConfig+0x8c8>)
 80019d0:	f023 0303 	bic.w	r3, r3, #3
 80019d4:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <HAL_RCC_OscConfig+0x8c8>)
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <HAL_RCC_OscConfig+0x8c8>)
 80019dc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80019e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e2:	f7ff f8d9 	bl	8000b98 <HAL_GetTick>
 80019e6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ea:	f7ff f8d5 	bl	8000b98 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e009      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_RCC_OscConfig+0x8c8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f0      	bne.n	80019ea <HAL_RCC_OscConfig+0x89a>
 8001a08:	e001      	b.n	8001a0e <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3728      	adds	r7, #40	; 0x28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40021000 	.word	0x40021000

08001a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e0c8      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a30:	4b66      	ldr	r3, [pc, #408]	; (8001bcc <HAL_RCC_ClockConfig+0x1b0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d910      	bls.n	8001a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3e:	4b63      	ldr	r3, [pc, #396]	; (8001bcc <HAL_RCC_ClockConfig+0x1b0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 0207 	bic.w	r2, r3, #7
 8001a46:	4961      	ldr	r1, [pc, #388]	; (8001bcc <HAL_RCC_ClockConfig+0x1b0>)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4e:	4b5f      	ldr	r3, [pc, #380]	; (8001bcc <HAL_RCC_ClockConfig+0x1b0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e0b0      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d04c      	beq.n	8001b06 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d107      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a74:	4b56      	ldr	r3, [pc, #344]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d121      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e09e      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d107      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a8c:	4b50      	ldr	r3, [pc, #320]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d115      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e092      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d107      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aa4:	4b4a      	ldr	r3, [pc, #296]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d109      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e086      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab4:	4b46      	ldr	r3, [pc, #280]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e07e      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ac4:	4b42      	ldr	r3, [pc, #264]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f023 0203 	bic.w	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	493f      	ldr	r1, [pc, #252]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ad6:	f7ff f85f 	bl	8000b98 <HAL_GetTick>
 8001ada:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001adc:	e00a      	b.n	8001af4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ade:	f7ff f85b 	bl	8000b98 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e066      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af4:	4b36      	ldr	r3, [pc, #216]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 020c 	and.w	r2, r3, #12
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d1eb      	bne.n	8001ade <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d008      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b12:	4b2f      	ldr	r3, [pc, #188]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	492c      	ldr	r1, [pc, #176]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b24:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <HAL_RCC_ClockConfig+0x1b0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d210      	bcs.n	8001b54 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b32:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <HAL_RCC_ClockConfig+0x1b0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f023 0207 	bic.w	r2, r3, #7
 8001b3a:	4924      	ldr	r1, [pc, #144]	; (8001bcc <HAL_RCC_ClockConfig+0x1b0>)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b42:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <HAL_RCC_ClockConfig+0x1b0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e036      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	4918      	ldr	r1, [pc, #96]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d009      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b7e:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	4910      	ldr	r1, [pc, #64]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b92:	f000 f825 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8001b96:	4602      	mov	r2, r0
 8001b98:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	490c      	ldr	r1, [pc, #48]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba4:	5ccb      	ldrb	r3, [r1, r3]
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bae:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <HAL_RCC_ClockConfig+0x1c0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fe14 	bl	80007e4 <HAL_InitTick>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bc0:	7afb      	ldrb	r3, [r7, #11]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40022000 	.word	0x40022000
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	08004b1c 	.word	0x08004b1c
 8001bd8:	20000004 	.word	0x20000004
 8001bdc:	20000008 	.word	0x20000008

08001be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	; 0x24
 8001be4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	2300      	movs	r3, #0
 8001bec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bee:	4b3e      	ldr	r3, [pc, #248]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bf8:	4b3b      	ldr	r3, [pc, #236]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0x34>
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	d121      	bne.n	8001c52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d11e      	bne.n	8001c52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c14:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d107      	bne.n	8001c30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c20:	4b31      	ldr	r3, [pc, #196]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c26:	0a1b      	lsrs	r3, r3, #8
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	e005      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c30:	4b2d      	ldr	r3, [pc, #180]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c3c:	4a2b      	ldr	r2, [pc, #172]	; (8001cec <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10d      	bne.n	8001c68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c50:	e00a      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d102      	bne.n	8001c5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c58:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c5a:	61bb      	str	r3, [r7, #24]
 8001c5c:	e004      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d101      	bne.n	8001c68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c64:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	2b0c      	cmp	r3, #12
 8001c6c:	d134      	bne.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d003      	beq.n	8001c86 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d003      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0xac>
 8001c84:	e005      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c86:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c88:	617b      	str	r3, [r7, #20]
      break;
 8001c8a:	e005      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c8c:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c8e:	617b      	str	r3, [r7, #20]
      break;
 8001c90:	e002      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	617b      	str	r3, [r7, #20]
      break;
 8001c96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	0a1b      	lsrs	r3, r3, #8
 8001cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	fb02 f203 	mul.w	r2, r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	0e5b      	lsrs	r3, r3, #25
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	3301      	adds	r3, #1
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cd8:	69bb      	ldr	r3, [r7, #24]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	08004b34 	.word	0x08004b34
 8001cf0:	00f42400 	.word	0x00f42400
 8001cf4:	007a1200 	.word	0x007a1200

08001cf8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000004 	.word	0x20000004

08001d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d14:	f7ff fff0 	bl	8001cf8 <HAL_RCC_GetHCLKFreq>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	0a1b      	lsrs	r3, r3, #8
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	4904      	ldr	r1, [pc, #16]	; (8001d38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	f003 031f 	and.w	r3, r3, #31
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40021000 	.word	0x40021000
 8001d38:	08004b2c 	.word	0x08004b2c

08001d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d40:	f7ff ffda 	bl	8001cf8 <HAL_RCC_GetHCLKFreq>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	0adb      	lsrs	r3, r3, #11
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	4904      	ldr	r1, [pc, #16]	; (8001d64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000
 8001d64:	08004b2c 	.word	0x08004b2c

08001d68 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	220f      	movs	r2, #15
 8001d76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 0203 	and.w	r2, r3, #3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001d84:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	08db      	lsrs	r3, r3, #3
 8001da2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <HAL_RCC_GetClockConfig+0x60>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0207 	and.w	r2, r3, #7
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	601a      	str	r2, [r3, #0]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40022000 	.word	0x40022000

08001dcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001de4:	f7ff f950 	bl	8001088 <HAL_PWREx_GetVoltageRange>
 8001de8:	6178      	str	r0, [r7, #20]
 8001dea:	e014      	b.n	8001e16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dec:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df0:	4a24      	ldr	r2, [pc, #144]	; (8001e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df6:	6593      	str	r3, [r2, #88]	; 0x58
 8001df8:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e04:	f7ff f940 	bl	8001088 <HAL_PWREx_GetVoltageRange>
 8001e08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	4a1d      	ldr	r2, [pc, #116]	; (8001e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e1c:	d10b      	bne.n	8001e36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b80      	cmp	r3, #128	; 0x80
 8001e22:	d919      	bls.n	8001e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2ba0      	cmp	r3, #160	; 0xa0
 8001e28:	d902      	bls.n	8001e30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	e013      	b.n	8001e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e30:	2301      	movs	r3, #1
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	e010      	b.n	8001e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b80      	cmp	r3, #128	; 0x80
 8001e3a:	d902      	bls.n	8001e42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	e00a      	b.n	8001e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b80      	cmp	r3, #128	; 0x80
 8001e46:	d102      	bne.n	8001e4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e48:	2302      	movs	r3, #2
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	e004      	b.n	8001e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b70      	cmp	r3, #112	; 0x70
 8001e52:	d101      	bne.n	8001e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e54:	2301      	movs	r3, #1
 8001e56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f023 0207 	bic.w	r2, r3, #7
 8001e60:	4909      	ldr	r1, [pc, #36]	; (8001e88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d001      	beq.n	8001e7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40022000 	.word	0x40022000

08001e8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e94:	2300      	movs	r3, #0
 8001e96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e98:	2300      	movs	r3, #0
 8001e9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 809e 	beq.w	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001eae:	4b46      	ldr	r3, [pc, #280]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00d      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec4:	4b40      	ldr	r3, [pc, #256]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	4a3f      	ldr	r2, [pc, #252]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ece:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed0:	4b3d      	ldr	r3, [pc, #244]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001edc:	2301      	movs	r3, #1
 8001ede:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ee0:	4b3a      	ldr	r3, [pc, #232]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a39      	ldr	r2, [pc, #228]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eec:	f7fe fe54 	bl	8000b98 <HAL_GetTick>
 8001ef0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ef2:	e009      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef4:	f7fe fe50 	bl	8000b98 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d902      	bls.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	74fb      	strb	r3, [r7, #19]
        break;
 8001f06:	e005      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f08:	4b30      	ldr	r3, [pc, #192]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0ef      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8001f14:	7cfb      	ldrb	r3, [r7, #19]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d15a      	bne.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f1a:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d01e      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d019      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f36:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f40:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f42:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f48:	4a1f      	ldr	r2, [pc, #124]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f52:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f58:	4a1b      	ldr	r2, [pc, #108]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f62:	4a19      	ldr	r2, [pc, #100]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d016      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7fe fe10 	bl	8000b98 <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f7a:	e00b      	b.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7c:	f7fe fe0c 	bl	8000b98 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d902      	bls.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	74fb      	strb	r3, [r7, #19]
            break;
 8001f92:	e006      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0ec      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8001fa2:	7cfb      	ldrb	r3, [r7, #19]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10b      	bne.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4904      	ldr	r1, [pc, #16]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fbe:	e009      	b.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fc0:	7cfb      	ldrb	r3, [r7, #19]
 8001fc2:	74bb      	strb	r3, [r7, #18]
 8001fc4:	e006      	b.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fd0:	7cfb      	ldrb	r3, [r7, #19]
 8001fd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fd4:	7c7b      	ldrb	r3, [r7, #17]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d105      	bne.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fda:	4b6e      	ldr	r3, [pc, #440]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fde:	4a6d      	ldr	r2, [pc, #436]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00a      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ff2:	4b68      	ldr	r3, [pc, #416]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff8:	f023 0203 	bic.w	r2, r3, #3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4964      	ldr	r1, [pc, #400]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002002:	4313      	orrs	r3, r2
 8002004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00a      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002014:	4b5f      	ldr	r3, [pc, #380]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201a:	f023 020c 	bic.w	r2, r3, #12
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	495c      	ldr	r1, [pc, #368]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002024:	4313      	orrs	r3, r2
 8002026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00a      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002036:	4b57      	ldr	r3, [pc, #348]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4953      	ldr	r1, [pc, #332]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002046:	4313      	orrs	r3, r2
 8002048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0320 	and.w	r3, r3, #32
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00a      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002058:	4b4e      	ldr	r3, [pc, #312]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800205a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	494b      	ldr	r1, [pc, #300]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00a      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800207a:	4b46      	ldr	r3, [pc, #280]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800207c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002080:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4942      	ldr	r1, [pc, #264]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00a      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800209c:	4b3d      	ldr	r3, [pc, #244]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	493a      	ldr	r1, [pc, #232]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00a      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020be:	4b35      	ldr	r3, [pc, #212]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	4931      	ldr	r1, [pc, #196]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00a      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020e0:	4b2c      	ldr	r3, [pc, #176]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	4929      	ldr	r1, [pc, #164]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002102:	4b24      	ldr	r3, [pc, #144]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002108:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	4920      	ldr	r1, [pc, #128]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002112:	4313      	orrs	r3, r2
 8002114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d015      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002124:	4b1b      	ldr	r3, [pc, #108]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002132:	4918      	ldr	r1, [pc, #96]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002142:	d105      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002144:	4b13      	ldr	r3, [pc, #76]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4a12      	ldr	r2, [pc, #72]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800214a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800214e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d015      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800215c:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216a:	490a      	ldr	r1, [pc, #40]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002176:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800217a:	d105      	bne.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4a04      	ldr	r2, [pc, #16]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002182:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002186:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002188:	7cbb      	ldrb	r3, [r7, #18]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40021000 	.word	0x40021000

08002198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e049      	b.n	800223e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe fbc6 	bl	8000950 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3304      	adds	r3, #4
 80021d4:	4619      	mov	r1, r3
 80021d6:	4610      	mov	r0, r2
 80021d8:	f000 f9d2 	bl	8002580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b01      	cmp	r3, #1
 800225a:	d001      	beq.n	8002260 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e03b      	b.n	80022d8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a19      	ldr	r2, [pc, #100]	; (80022e4 <HAL_TIM_Base_Start_IT+0x9c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d009      	beq.n	8002296 <HAL_TIM_Base_Start_IT+0x4e>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800228a:	d004      	beq.n	8002296 <HAL_TIM_Base_Start_IT+0x4e>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a15      	ldr	r2, [pc, #84]	; (80022e8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d115      	bne.n	80022c2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	4b13      	ldr	r3, [pc, #76]	; (80022ec <HAL_TIM_Base_Start_IT+0xa4>)
 800229e:	4013      	ands	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b06      	cmp	r3, #6
 80022a6:	d015      	beq.n	80022d4 <HAL_TIM_Base_Start_IT+0x8c>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ae:	d011      	beq.n	80022d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0201 	orr.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c0:	e008      	b.n	80022d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 0201 	orr.w	r2, r2, #1
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	e000      	b.n	80022d6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40012c00 	.word	0x40012c00
 80022e8:	40014000 	.word	0x40014000
 80022ec:	00010007 	.word	0x00010007

080022f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b02      	cmp	r3, #2
 8002304:	d122      	bne.n	800234c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b02      	cmp	r3, #2
 8002312:	d11b      	bne.n	800234c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0202 	mvn.w	r2, #2
 800231c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f905 	bl	8002542 <HAL_TIM_IC_CaptureCallback>
 8002338:	e005      	b.n	8002346 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f8f7 	bl	800252e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f908 	bl	8002556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	2b04      	cmp	r3, #4
 8002358:	d122      	bne.n	80023a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b04      	cmp	r3, #4
 8002366:	d11b      	bne.n	80023a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0204 	mvn.w	r2, #4
 8002370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2202      	movs	r2, #2
 8002376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f8db 	bl	8002542 <HAL_TIM_IC_CaptureCallback>
 800238c:	e005      	b.n	800239a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f8cd 	bl	800252e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f8de 	bl	8002556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d122      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d11b      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f06f 0208 	mvn.w	r2, #8
 80023c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2204      	movs	r2, #4
 80023ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f8b1 	bl	8002542 <HAL_TIM_IC_CaptureCallback>
 80023e0:	e005      	b.n	80023ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f8a3 	bl	800252e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f8b4 	bl	8002556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	2b10      	cmp	r3, #16
 8002400:	d122      	bne.n	8002448 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b10      	cmp	r3, #16
 800240e:	d11b      	bne.n	8002448 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 0210 	mvn.w	r2, #16
 8002418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2208      	movs	r2, #8
 800241e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f887 	bl	8002542 <HAL_TIM_IC_CaptureCallback>
 8002434:	e005      	b.n	8002442 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f879 	bl	800252e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f88a 	bl	8002556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b01      	cmp	r3, #1
 8002454:	d10e      	bne.n	8002474 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b01      	cmp	r3, #1
 8002462:	d107      	bne.n	8002474 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f06f 0201 	mvn.w	r2, #1
 800246c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe f97b 	bl	800076a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247e:	2b80      	cmp	r3, #128	; 0x80
 8002480:	d10e      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248c:	2b80      	cmp	r3, #128	; 0x80
 800248e:	d107      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f944 	bl	8002728 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ae:	d10e      	bne.n	80024ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ba:	2b80      	cmp	r3, #128	; 0x80
 80024bc:	d107      	bne.n	80024ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80024c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f937 	bl	800273c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d8:	2b40      	cmp	r3, #64	; 0x40
 80024da:	d10e      	bne.n	80024fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e6:	2b40      	cmp	r3, #64	; 0x40
 80024e8:	d107      	bne.n	80024fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f838 	bl	800256a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	2b20      	cmp	r3, #32
 8002506:	d10e      	bne.n	8002526 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f003 0320 	and.w	r3, r3, #32
 8002512:	2b20      	cmp	r3, #32
 8002514:	d107      	bne.n	8002526 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f06f 0220 	mvn.w	r2, #32
 800251e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f8f7 	bl	8002714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
	...

08002580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a2a      	ldr	r2, [pc, #168]	; (800263c <TIM_Base_SetConfig+0xbc>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d003      	beq.n	80025a0 <TIM_Base_SetConfig+0x20>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800259e:	d108      	bne.n	80025b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a21      	ldr	r2, [pc, #132]	; (800263c <TIM_Base_SetConfig+0xbc>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00b      	beq.n	80025d2 <TIM_Base_SetConfig+0x52>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c0:	d007      	beq.n	80025d2 <TIM_Base_SetConfig+0x52>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a1e      	ldr	r2, [pc, #120]	; (8002640 <TIM_Base_SetConfig+0xc0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d003      	beq.n	80025d2 <TIM_Base_SetConfig+0x52>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a1d      	ldr	r2, [pc, #116]	; (8002644 <TIM_Base_SetConfig+0xc4>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d108      	bne.n	80025e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a0c      	ldr	r2, [pc, #48]	; (800263c <TIM_Base_SetConfig+0xbc>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d007      	beq.n	8002620 <TIM_Base_SetConfig+0xa0>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a0b      	ldr	r2, [pc, #44]	; (8002640 <TIM_Base_SetConfig+0xc0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d003      	beq.n	8002620 <TIM_Base_SetConfig+0xa0>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <TIM_Base_SetConfig+0xc4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d103      	bne.n	8002628 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	615a      	str	r2, [r3, #20]
}
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40012c00 	.word	0x40012c00
 8002640:	40014000 	.word	0x40014000
 8002644:	40014400 	.word	0x40014400

08002648 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800265c:	2302      	movs	r3, #2
 800265e:	e04f      	b.n	8002700 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2202      	movs	r2, #2
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a21      	ldr	r2, [pc, #132]	; (800270c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d108      	bne.n	800269c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002690:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a14      	ldr	r2, [pc, #80]	; (800270c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d009      	beq.n	80026d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c8:	d004      	beq.n	80026d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a10      	ldr	r2, [pc, #64]	; (8002710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d10c      	bne.n	80026ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	40012c00 	.word	0x40012c00
 8002710:	40014000 	.word	0x40014000

08002714 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e040      	b.n	80027e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fe f942 	bl	80009fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2224      	movs	r2, #36	; 0x24
 800277c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0201 	bic.w	r2, r2, #1
 800278c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f82c 	bl	80027ec <UART_SetConfig>
 8002794:	4603      	mov	r3, r0
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e022      	b.n	80027e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fa54 	bl	8002c54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 fadb 	bl	8002d98 <UART_CheckIdleState>
 80027e2:	4603      	mov	r3, r0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027ec:	b5b0      	push	{r4, r5, r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	4313      	orrs	r3, r2
 800280e:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	4baa      	ldr	r3, [pc, #680]	; (8002ac0 <UART_SetConfig+0x2d4>)
 8002818:	4013      	ands	r3, r2
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	69f9      	ldr	r1, [r7, #28]
 8002820:	430b      	orrs	r3, r1
 8002822:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a9f      	ldr	r2, [pc, #636]	; (8002ac4 <UART_SetConfig+0x2d8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d004      	beq.n	8002854 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	4313      	orrs	r3, r2
 8002852:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	69fa      	ldr	r2, [r7, #28]
 8002864:	430a      	orrs	r2, r1
 8002866:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a96      	ldr	r2, [pc, #600]	; (8002ac8 <UART_SetConfig+0x2dc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d121      	bne.n	80028b6 <UART_SetConfig+0xca>
 8002872:	4b96      	ldr	r3, [pc, #600]	; (8002acc <UART_SetConfig+0x2e0>)
 8002874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	2b03      	cmp	r3, #3
 800287e:	d817      	bhi.n	80028b0 <UART_SetConfig+0xc4>
 8002880:	a201      	add	r2, pc, #4	; (adr r2, 8002888 <UART_SetConfig+0x9c>)
 8002882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002886:	bf00      	nop
 8002888:	08002899 	.word	0x08002899
 800288c:	080028a5 	.word	0x080028a5
 8002890:	0800289f 	.word	0x0800289f
 8002894:	080028ab 	.word	0x080028ab
 8002898:	2301      	movs	r3, #1
 800289a:	76fb      	strb	r3, [r7, #27]
 800289c:	e096      	b.n	80029cc <UART_SetConfig+0x1e0>
 800289e:	2302      	movs	r3, #2
 80028a0:	76fb      	strb	r3, [r7, #27]
 80028a2:	e093      	b.n	80029cc <UART_SetConfig+0x1e0>
 80028a4:	2304      	movs	r3, #4
 80028a6:	76fb      	strb	r3, [r7, #27]
 80028a8:	e090      	b.n	80029cc <UART_SetConfig+0x1e0>
 80028aa:	2308      	movs	r3, #8
 80028ac:	76fb      	strb	r3, [r7, #27]
 80028ae:	e08d      	b.n	80029cc <UART_SetConfig+0x1e0>
 80028b0:	2310      	movs	r3, #16
 80028b2:	76fb      	strb	r3, [r7, #27]
 80028b4:	e08a      	b.n	80029cc <UART_SetConfig+0x1e0>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a85      	ldr	r2, [pc, #532]	; (8002ad0 <UART_SetConfig+0x2e4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d132      	bne.n	8002926 <UART_SetConfig+0x13a>
 80028c0:	4b82      	ldr	r3, [pc, #520]	; (8002acc <UART_SetConfig+0x2e0>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b0c      	cmp	r3, #12
 80028cc:	d828      	bhi.n	8002920 <UART_SetConfig+0x134>
 80028ce:	a201      	add	r2, pc, #4	; (adr r2, 80028d4 <UART_SetConfig+0xe8>)
 80028d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d4:	08002909 	.word	0x08002909
 80028d8:	08002921 	.word	0x08002921
 80028dc:	08002921 	.word	0x08002921
 80028e0:	08002921 	.word	0x08002921
 80028e4:	08002915 	.word	0x08002915
 80028e8:	08002921 	.word	0x08002921
 80028ec:	08002921 	.word	0x08002921
 80028f0:	08002921 	.word	0x08002921
 80028f4:	0800290f 	.word	0x0800290f
 80028f8:	08002921 	.word	0x08002921
 80028fc:	08002921 	.word	0x08002921
 8002900:	08002921 	.word	0x08002921
 8002904:	0800291b 	.word	0x0800291b
 8002908:	2300      	movs	r3, #0
 800290a:	76fb      	strb	r3, [r7, #27]
 800290c:	e05e      	b.n	80029cc <UART_SetConfig+0x1e0>
 800290e:	2302      	movs	r3, #2
 8002910:	76fb      	strb	r3, [r7, #27]
 8002912:	e05b      	b.n	80029cc <UART_SetConfig+0x1e0>
 8002914:	2304      	movs	r3, #4
 8002916:	76fb      	strb	r3, [r7, #27]
 8002918:	e058      	b.n	80029cc <UART_SetConfig+0x1e0>
 800291a:	2308      	movs	r3, #8
 800291c:	76fb      	strb	r3, [r7, #27]
 800291e:	e055      	b.n	80029cc <UART_SetConfig+0x1e0>
 8002920:	2310      	movs	r3, #16
 8002922:	76fb      	strb	r3, [r7, #27]
 8002924:	e052      	b.n	80029cc <UART_SetConfig+0x1e0>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a6a      	ldr	r2, [pc, #424]	; (8002ad4 <UART_SetConfig+0x2e8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d120      	bne.n	8002972 <UART_SetConfig+0x186>
 8002930:	4b66      	ldr	r3, [pc, #408]	; (8002acc <UART_SetConfig+0x2e0>)
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002936:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800293a:	2b30      	cmp	r3, #48	; 0x30
 800293c:	d013      	beq.n	8002966 <UART_SetConfig+0x17a>
 800293e:	2b30      	cmp	r3, #48	; 0x30
 8002940:	d814      	bhi.n	800296c <UART_SetConfig+0x180>
 8002942:	2b20      	cmp	r3, #32
 8002944:	d009      	beq.n	800295a <UART_SetConfig+0x16e>
 8002946:	2b20      	cmp	r3, #32
 8002948:	d810      	bhi.n	800296c <UART_SetConfig+0x180>
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <UART_SetConfig+0x168>
 800294e:	2b10      	cmp	r3, #16
 8002950:	d006      	beq.n	8002960 <UART_SetConfig+0x174>
 8002952:	e00b      	b.n	800296c <UART_SetConfig+0x180>
 8002954:	2300      	movs	r3, #0
 8002956:	76fb      	strb	r3, [r7, #27]
 8002958:	e038      	b.n	80029cc <UART_SetConfig+0x1e0>
 800295a:	2302      	movs	r3, #2
 800295c:	76fb      	strb	r3, [r7, #27]
 800295e:	e035      	b.n	80029cc <UART_SetConfig+0x1e0>
 8002960:	2304      	movs	r3, #4
 8002962:	76fb      	strb	r3, [r7, #27]
 8002964:	e032      	b.n	80029cc <UART_SetConfig+0x1e0>
 8002966:	2308      	movs	r3, #8
 8002968:	76fb      	strb	r3, [r7, #27]
 800296a:	e02f      	b.n	80029cc <UART_SetConfig+0x1e0>
 800296c:	2310      	movs	r3, #16
 800296e:	76fb      	strb	r3, [r7, #27]
 8002970:	e02c      	b.n	80029cc <UART_SetConfig+0x1e0>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a53      	ldr	r2, [pc, #332]	; (8002ac4 <UART_SetConfig+0x2d8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d125      	bne.n	80029c8 <UART_SetConfig+0x1dc>
 800297c:	4b53      	ldr	r3, [pc, #332]	; (8002acc <UART_SetConfig+0x2e0>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002982:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002986:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800298a:	d017      	beq.n	80029bc <UART_SetConfig+0x1d0>
 800298c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002990:	d817      	bhi.n	80029c2 <UART_SetConfig+0x1d6>
 8002992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002996:	d00b      	beq.n	80029b0 <UART_SetConfig+0x1c4>
 8002998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800299c:	d811      	bhi.n	80029c2 <UART_SetConfig+0x1d6>
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <UART_SetConfig+0x1be>
 80029a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a6:	d006      	beq.n	80029b6 <UART_SetConfig+0x1ca>
 80029a8:	e00b      	b.n	80029c2 <UART_SetConfig+0x1d6>
 80029aa:	2300      	movs	r3, #0
 80029ac:	76fb      	strb	r3, [r7, #27]
 80029ae:	e00d      	b.n	80029cc <UART_SetConfig+0x1e0>
 80029b0:	2302      	movs	r3, #2
 80029b2:	76fb      	strb	r3, [r7, #27]
 80029b4:	e00a      	b.n	80029cc <UART_SetConfig+0x1e0>
 80029b6:	2304      	movs	r3, #4
 80029b8:	76fb      	strb	r3, [r7, #27]
 80029ba:	e007      	b.n	80029cc <UART_SetConfig+0x1e0>
 80029bc:	2308      	movs	r3, #8
 80029be:	76fb      	strb	r3, [r7, #27]
 80029c0:	e004      	b.n	80029cc <UART_SetConfig+0x1e0>
 80029c2:	2310      	movs	r3, #16
 80029c4:	76fb      	strb	r3, [r7, #27]
 80029c6:	e001      	b.n	80029cc <UART_SetConfig+0x1e0>
 80029c8:	2310      	movs	r3, #16
 80029ca:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a3c      	ldr	r2, [pc, #240]	; (8002ac4 <UART_SetConfig+0x2d8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	f040 8082 	bne.w	8002adc <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80029d8:	7efb      	ldrb	r3, [r7, #27]
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d823      	bhi.n	8002a26 <UART_SetConfig+0x23a>
 80029de:	a201      	add	r2, pc, #4	; (adr r2, 80029e4 <UART_SetConfig+0x1f8>)
 80029e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e4:	08002a09 	.word	0x08002a09
 80029e8:	08002a27 	.word	0x08002a27
 80029ec:	08002a11 	.word	0x08002a11
 80029f0:	08002a27 	.word	0x08002a27
 80029f4:	08002a17 	.word	0x08002a17
 80029f8:	08002a27 	.word	0x08002a27
 80029fc:	08002a27 	.word	0x08002a27
 8002a00:	08002a27 	.word	0x08002a27
 8002a04:	08002a1f 	.word	0x08002a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a08:	f7ff f982 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 8002a0c:	6178      	str	r0, [r7, #20]
        break;
 8002a0e:	e00f      	b.n	8002a30 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a10:	4b31      	ldr	r3, [pc, #196]	; (8002ad8 <UART_SetConfig+0x2ec>)
 8002a12:	617b      	str	r3, [r7, #20]
        break;
 8002a14:	e00c      	b.n	8002a30 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a16:	f7ff f8e3 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8002a1a:	6178      	str	r0, [r7, #20]
        break;
 8002a1c:	e008      	b.n	8002a30 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a22:	617b      	str	r3, [r7, #20]
        break;
 8002a24:	e004      	b.n	8002a30 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	76bb      	strb	r3, [r7, #26]
        break;
 8002a2e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 8100 	beq.w	8002c38 <UART_SetConfig+0x44c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d305      	bcc.n	8002a54 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d902      	bls.n	8002a5a <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	76bb      	strb	r3, [r7, #26]
 8002a58:	e0ee      	b.n	8002c38 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f04f 0100 	mov.w	r1, #0
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	020b      	lsls	r3, r1, #8
 8002a6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002a70:	0202      	lsls	r2, r0, #8
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	6849      	ldr	r1, [r1, #4]
 8002a76:	0849      	lsrs	r1, r1, #1
 8002a78:	4608      	mov	r0, r1
 8002a7a:	f04f 0100 	mov.w	r1, #0
 8002a7e:	1814      	adds	r4, r2, r0
 8002a80:	eb43 0501 	adc.w	r5, r3, r1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	4620      	mov	r0, r4
 8002a90:	4629      	mov	r1, r5
 8002a92:	f7fd fb9d 	bl	80001d0 <__aeabi_uldivmod>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002aa4:	d308      	bcc.n	8002ab8 <UART_SetConfig+0x2cc>
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aac:	d204      	bcs.n	8002ab8 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	e0bf      	b.n	8002c38 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	76bb      	strb	r3, [r7, #26]
 8002abc:	e0bc      	b.n	8002c38 <UART_SetConfig+0x44c>
 8002abe:	bf00      	nop
 8002ac0:	efff69f3 	.word	0xefff69f3
 8002ac4:	40008000 	.word	0x40008000
 8002ac8:	40013800 	.word	0x40013800
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40004400 	.word	0x40004400
 8002ad4:	40004800 	.word	0x40004800
 8002ad8:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ae4:	d15c      	bne.n	8002ba0 <UART_SetConfig+0x3b4>
  {
    switch (clocksource)
 8002ae6:	7efb      	ldrb	r3, [r7, #27]
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d828      	bhi.n	8002b3e <UART_SetConfig+0x352>
 8002aec:	a201      	add	r2, pc, #4	; (adr r2, 8002af4 <UART_SetConfig+0x308>)
 8002aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af2:	bf00      	nop
 8002af4:	08002b19 	.word	0x08002b19
 8002af8:	08002b21 	.word	0x08002b21
 8002afc:	08002b29 	.word	0x08002b29
 8002b00:	08002b3f 	.word	0x08002b3f
 8002b04:	08002b2f 	.word	0x08002b2f
 8002b08:	08002b3f 	.word	0x08002b3f
 8002b0c:	08002b3f 	.word	0x08002b3f
 8002b10:	08002b3f 	.word	0x08002b3f
 8002b14:	08002b37 	.word	0x08002b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b18:	f7ff f8fa 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 8002b1c:	6178      	str	r0, [r7, #20]
        break;
 8002b1e:	e013      	b.n	8002b48 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b20:	f7ff f90c 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 8002b24:	6178      	str	r0, [r7, #20]
        break;
 8002b26:	e00f      	b.n	8002b48 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b28:	4b49      	ldr	r3, [pc, #292]	; (8002c50 <UART_SetConfig+0x464>)
 8002b2a:	617b      	str	r3, [r7, #20]
        break;
 8002b2c:	e00c      	b.n	8002b48 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b2e:	f7ff f857 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8002b32:	6178      	str	r0, [r7, #20]
        break;
 8002b34:	e008      	b.n	8002b48 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b3a:	617b      	str	r3, [r7, #20]
        break;
 8002b3c:	e004      	b.n	8002b48 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	76bb      	strb	r3, [r7, #26]
        break;
 8002b46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d074      	beq.n	8002c38 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	005a      	lsls	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	085b      	lsrs	r3, r3, #1
 8002b58:	441a      	add	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	2b0f      	cmp	r3, #15
 8002b6a:	d916      	bls.n	8002b9a <UART_SetConfig+0x3ae>
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b72:	d212      	bcs.n	8002b9a <UART_SetConfig+0x3ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	f023 030f 	bic.w	r3, r3, #15
 8002b7c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	085b      	lsrs	r3, r3, #1
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	89fb      	ldrh	r3, [r7, #14]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	89fa      	ldrh	r2, [r7, #14]
 8002b96:	60da      	str	r2, [r3, #12]
 8002b98:	e04e      	b.n	8002c38 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	76bb      	strb	r3, [r7, #26]
 8002b9e:	e04b      	b.n	8002c38 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ba0:	7efb      	ldrb	r3, [r7, #27]
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d827      	bhi.n	8002bf6 <UART_SetConfig+0x40a>
 8002ba6:	a201      	add	r2, pc, #4	; (adr r2, 8002bac <UART_SetConfig+0x3c0>)
 8002ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bac:	08002bd1 	.word	0x08002bd1
 8002bb0:	08002bd9 	.word	0x08002bd9
 8002bb4:	08002be1 	.word	0x08002be1
 8002bb8:	08002bf7 	.word	0x08002bf7
 8002bbc:	08002be7 	.word	0x08002be7
 8002bc0:	08002bf7 	.word	0x08002bf7
 8002bc4:	08002bf7 	.word	0x08002bf7
 8002bc8:	08002bf7 	.word	0x08002bf7
 8002bcc:	08002bef 	.word	0x08002bef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bd0:	f7ff f89e 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 8002bd4:	6178      	str	r0, [r7, #20]
        break;
 8002bd6:	e013      	b.n	8002c00 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bd8:	f7ff f8b0 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 8002bdc:	6178      	str	r0, [r7, #20]
        break;
 8002bde:	e00f      	b.n	8002c00 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002be0:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <UART_SetConfig+0x464>)
 8002be2:	617b      	str	r3, [r7, #20]
        break;
 8002be4:	e00c      	b.n	8002c00 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002be6:	f7fe fffb 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8002bea:	6178      	str	r0, [r7, #20]
        break;
 8002bec:	e008      	b.n	8002c00 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bf2:	617b      	str	r3, [r7, #20]
        break;
 8002bf4:	e004      	b.n	8002c00 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	76bb      	strb	r3, [r7, #26]
        break;
 8002bfe:	bf00      	nop
    }

    if (pclk != 0U)
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d018      	beq.n	8002c38 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	085a      	lsrs	r2, r3, #1
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	441a      	add	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	2b0f      	cmp	r3, #15
 8002c20:	d908      	bls.n	8002c34 <UART_SetConfig+0x448>
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c28:	d204      	bcs.n	8002c34 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = usartdiv;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	e001      	b.n	8002c38 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002c44:	7ebb      	ldrb	r3, [r7, #26]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	00f42400 	.word	0x00f42400

08002c54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00a      	beq.n	8002cc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	f003 0320 	and.w	r3, r3, #32
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d01a      	beq.n	8002d6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d52:	d10a      	bne.n	8002d6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	605a      	str	r2, [r3, #4]
  }
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af02      	add	r7, sp, #8
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002da6:	f7fd fef7 	bl	8000b98 <HAL_GetTick>
 8002daa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d10e      	bne.n	8002dd8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f82a 	bl	8002e22 <UART_WaitOnFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e020      	b.n	8002e1a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d10e      	bne.n	8002e04 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002de6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f814 	bl	8002e22 <UART_WaitOnFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e00a      	b.n	8002e1a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2220      	movs	r2, #32
 8002e08:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	603b      	str	r3, [r7, #0]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e32:	e05d      	b.n	8002ef0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3a:	d059      	beq.n	8002ef0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e3c:	f7fd feac 	bl	8000b98 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d302      	bcc.n	8002e52 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d11b      	bne.n	8002e8a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e60:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0201 	bic.w	r2, r2, #1
 8002e70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e042      	b.n	8002f10 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d02b      	beq.n	8002ef0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ea6:	d123      	bne.n	8002ef0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eb0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ec0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0201 	bic.w	r2, r2, #1
 8002ed0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2220      	movs	r2, #32
 8002edc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e00f      	b.n	8002f10 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	69da      	ldr	r2, [r3, #28]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	bf0c      	ite	eq
 8002f00:	2301      	moveq	r3, #1
 8002f02:	2300      	movne	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	461a      	mov	r2, r3
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d092      	beq.n	8002e34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f2a:	2b84      	cmp	r3, #132	; 0x84
 8002f2c:	d005      	beq.n	8002f3a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002f2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4413      	add	r3, r2
 8002f36:	3303      	adds	r3, #3
 8002f38:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002f4c:	f001 f902 	bl	8004154 <vTaskStartScheduler>
  
  return osOK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002f56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f58:	b089      	sub	sp, #36	; 0x24
 8002f5a:	af04      	add	r7, sp, #16
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d020      	beq.n	8002faa <osThreadCreate+0x54>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d01c      	beq.n	8002faa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685c      	ldr	r4, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681d      	ldr	r5, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691e      	ldr	r6, [r3, #16]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff ffc8 	bl	8002f18 <makeFreeRtosPriority>
 8002f88:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f92:	9202      	str	r2, [sp, #8]
 8002f94:	9301      	str	r3, [sp, #4]
 8002f96:	9100      	str	r1, [sp, #0]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	4632      	mov	r2, r6
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f000 ff10 	bl	8003dc4 <xTaskCreateStatic>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	e01c      	b.n	8002fe4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685c      	ldr	r4, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fb6:	b29e      	uxth	r6, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff ffaa 	bl	8002f18 <makeFreeRtosPriority>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	f107 030c 	add.w	r3, r7, #12
 8002fca:	9301      	str	r3, [sp, #4]
 8002fcc:	9200      	str	r2, [sp, #0]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	4632      	mov	r2, r6
 8002fd2:	4629      	mov	r1, r5
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	f000 ff52 	bl	8003e7e <xTaskCreate>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d001      	beq.n	8002fe4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	e000      	b.n	8002fe6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <osDelay+0x16>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	e000      	b.n	8003006 <osDelay+0x18>
 8003004:	2301      	movs	r3, #1
 8003006:	4618      	mov	r0, r3
 8003008:	f001 f870 	bl	80040ec <vTaskDelay>
  
  return osOK;
 800300c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08a      	sub	sp, #40	; 0x28
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003020:	2300      	movs	r3, #0
 8003022:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003024:	f001 f8f6 	bl	8004214 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003028:	4b58      	ldr	r3, [pc, #352]	; (800318c <pvPortMalloc+0x174>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003030:	f000 f910 	bl	8003254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003034:	4b56      	ldr	r3, [pc, #344]	; (8003190 <pvPortMalloc+0x178>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4013      	ands	r3, r2
 800303c:	2b00      	cmp	r3, #0
 800303e:	f040 808e 	bne.w	800315e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d01d      	beq.n	8003084 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003048:	2208      	movs	r2, #8
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	2b00      	cmp	r3, #0
 8003058:	d014      	beq.n	8003084 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f023 0307 	bic.w	r3, r3, #7
 8003060:	3308      	adds	r3, #8
 8003062:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800306e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003072:	f383 8811 	msr	BASEPRI, r3
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	f3bf 8f4f 	dsb	sy
 800307e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003080:	bf00      	nop
 8003082:	e7fe      	b.n	8003082 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d069      	beq.n	800315e <pvPortMalloc+0x146>
 800308a:	4b42      	ldr	r3, [pc, #264]	; (8003194 <pvPortMalloc+0x17c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	429a      	cmp	r2, r3
 8003092:	d864      	bhi.n	800315e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003094:	4b40      	ldr	r3, [pc, #256]	; (8003198 <pvPortMalloc+0x180>)
 8003096:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003098:	4b3f      	ldr	r3, [pc, #252]	; (8003198 <pvPortMalloc+0x180>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800309e:	e004      	b.n	80030aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d903      	bls.n	80030bc <pvPortMalloc+0xa4>
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1f1      	bne.n	80030a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80030bc:	4b33      	ldr	r3, [pc, #204]	; (800318c <pvPortMalloc+0x174>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d04b      	beq.n	800315e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2208      	movs	r2, #8
 80030cc:	4413      	add	r3, r2
 80030ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	1ad2      	subs	r2, r2, r3
 80030e0:	2308      	movs	r3, #8
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d91f      	bls.n	8003128 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80030e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4413      	add	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <pvPortMalloc+0xf8>
	__asm volatile
 80030fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fe:	f383 8811 	msr	BASEPRI, r3
 8003102:	f3bf 8f6f 	isb	sy
 8003106:	f3bf 8f4f 	dsb	sy
 800310a:	613b      	str	r3, [r7, #16]
}
 800310c:	bf00      	nop
 800310e:	e7fe      	b.n	800310e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	1ad2      	subs	r2, r2, r3
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003122:	69b8      	ldr	r0, [r7, #24]
 8003124:	f000 f8f8 	bl	8003318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003128:	4b1a      	ldr	r3, [pc, #104]	; (8003194 <pvPortMalloc+0x17c>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	4a18      	ldr	r2, [pc, #96]	; (8003194 <pvPortMalloc+0x17c>)
 8003134:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003136:	4b17      	ldr	r3, [pc, #92]	; (8003194 <pvPortMalloc+0x17c>)
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	4b18      	ldr	r3, [pc, #96]	; (800319c <pvPortMalloc+0x184>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d203      	bcs.n	800314a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003142:	4b14      	ldr	r3, [pc, #80]	; (8003194 <pvPortMalloc+0x17c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a15      	ldr	r2, [pc, #84]	; (800319c <pvPortMalloc+0x184>)
 8003148:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <pvPortMalloc+0x178>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	431a      	orrs	r2, r3
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800315e:	f001 f867 	bl	8004230 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <pvPortMalloc+0x16a>
	__asm volatile
 800316c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003170:	f383 8811 	msr	BASEPRI, r3
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	60fb      	str	r3, [r7, #12]
}
 800317e:	bf00      	nop
 8003180:	e7fe      	b.n	8003180 <pvPortMalloc+0x168>
	return pvReturn;
 8003182:	69fb      	ldr	r3, [r7, #28]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3728      	adds	r7, #40	; 0x28
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	20000e4c 	.word	0x20000e4c
 8003190:	20000e58 	.word	0x20000e58
 8003194:	20000e50 	.word	0x20000e50
 8003198:	20000e44 	.word	0x20000e44
 800319c:	20000e54 	.word	0x20000e54

080031a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d048      	beq.n	8003244 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80031b2:	2308      	movs	r3, #8
 80031b4:	425b      	negs	r3, r3
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4413      	add	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	4b21      	ldr	r3, [pc, #132]	; (800324c <vPortFree+0xac>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10a      	bne.n	80031e4 <vPortFree+0x44>
	__asm volatile
 80031ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	60fb      	str	r3, [r7, #12]
}
 80031e0:	bf00      	nop
 80031e2:	e7fe      	b.n	80031e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00a      	beq.n	8003202 <vPortFree+0x62>
	__asm volatile
 80031ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f0:	f383 8811 	msr	BASEPRI, r3
 80031f4:	f3bf 8f6f 	isb	sy
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	60bb      	str	r3, [r7, #8]
}
 80031fe:	bf00      	nop
 8003200:	e7fe      	b.n	8003200 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	4b11      	ldr	r3, [pc, #68]	; (800324c <vPortFree+0xac>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4013      	ands	r3, r2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d019      	beq.n	8003244 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d115      	bne.n	8003244 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <vPortFree+0xac>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	43db      	mvns	r3, r3
 8003222:	401a      	ands	r2, r3
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003228:	f000 fff4 	bl	8004214 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	4b07      	ldr	r3, [pc, #28]	; (8003250 <vPortFree+0xb0>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4413      	add	r3, r2
 8003236:	4a06      	ldr	r2, [pc, #24]	; (8003250 <vPortFree+0xb0>)
 8003238:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800323a:	6938      	ldr	r0, [r7, #16]
 800323c:	f000 f86c 	bl	8003318 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003240:	f000 fff6 	bl	8004230 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003244:	bf00      	nop
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	20000e58 	.word	0x20000e58
 8003250:	20000e50 	.word	0x20000e50

08003254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800325a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800325e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003260:	4b27      	ldr	r3, [pc, #156]	; (8003300 <prvHeapInit+0xac>)
 8003262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00c      	beq.n	8003288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	3307      	adds	r3, #7
 8003272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f023 0307 	bic.w	r3, r3, #7
 800327a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	4a1f      	ldr	r2, [pc, #124]	; (8003300 <prvHeapInit+0xac>)
 8003284:	4413      	add	r3, r2
 8003286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800328c:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <prvHeapInit+0xb0>)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003292:	4b1c      	ldr	r3, [pc, #112]	; (8003304 <prvHeapInit+0xb0>)
 8003294:	2200      	movs	r2, #0
 8003296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	4413      	add	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80032a0:	2208      	movs	r2, #8
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1a9b      	subs	r3, r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0307 	bic.w	r3, r3, #7
 80032ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4a15      	ldr	r2, [pc, #84]	; (8003308 <prvHeapInit+0xb4>)
 80032b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80032b6:	4b14      	ldr	r3, [pc, #80]	; (8003308 <prvHeapInit+0xb4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2200      	movs	r2, #0
 80032bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80032be:	4b12      	ldr	r3, [pc, #72]	; (8003308 <prvHeapInit+0xb4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	1ad2      	subs	r2, r2, r3
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80032d4:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <prvHeapInit+0xb4>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	4a0a      	ldr	r2, [pc, #40]	; (800330c <prvHeapInit+0xb8>)
 80032e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	4a09      	ldr	r2, [pc, #36]	; (8003310 <prvHeapInit+0xbc>)
 80032ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80032ec:	4b09      	ldr	r3, [pc, #36]	; (8003314 <prvHeapInit+0xc0>)
 80032ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80032f2:	601a      	str	r2, [r3, #0]
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	2000028c 	.word	0x2000028c
 8003304:	20000e44 	.word	0x20000e44
 8003308:	20000e4c 	.word	0x20000e4c
 800330c:	20000e54 	.word	0x20000e54
 8003310:	20000e50 	.word	0x20000e50
 8003314:	20000e58 	.word	0x20000e58

08003318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003320:	4b28      	ldr	r3, [pc, #160]	; (80033c4 <prvInsertBlockIntoFreeList+0xac>)
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	e002      	b.n	800332c <prvInsertBlockIntoFreeList+0x14>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	429a      	cmp	r2, r3
 8003334:	d8f7      	bhi.n	8003326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	4413      	add	r3, r2
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	429a      	cmp	r2, r3
 8003346:	d108      	bne.n	800335a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	441a      	add	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	441a      	add	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d118      	bne.n	80033a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	4b15      	ldr	r3, [pc, #84]	; (80033c8 <prvInsertBlockIntoFreeList+0xb0>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d00d      	beq.n	8003396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	441a      	add	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	e008      	b.n	80033a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003396:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <prvInsertBlockIntoFreeList+0xb0>)
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	e003      	b.n	80033a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d002      	beq.n	80033b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033b6:	bf00      	nop
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20000e44 	.word	0x20000e44
 80033c8:	20000e4c 	.word	0x20000e4c

080033cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f103 0208 	add.w	r2, r3, #8
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f04f 32ff 	mov.w	r2, #4294967295
 80033e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f103 0208 	add.w	r2, r3, #8
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f103 0208 	add.w	r2, r3, #8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003426:	b480      	push	{r7}
 8003428:	b085      	sub	sp, #20
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	601a      	str	r2, [r3, #0]
}
 8003462:	bf00      	nop
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800346e:	b480      	push	{r7}
 8003470:	b085      	sub	sp, #20
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003484:	d103      	bne.n	800348e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e00c      	b.n	80034a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3308      	adds	r3, #8
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	e002      	b.n	800349c <vListInsert+0x2e>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d2f6      	bcs.n	8003496 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	601a      	str	r2, [r3, #0]
}
 80034d4:	bf00      	nop
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6892      	ldr	r2, [r2, #8]
 80034f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6852      	ldr	r2, [r2, #4]
 8003500:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	429a      	cmp	r2, r3
 800350a:	d103      	bne.n	8003514 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	1e5a      	subs	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	3b04      	subs	r3, #4
 8003544:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800354c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3b04      	subs	r3, #4
 8003552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f023 0201 	bic.w	r2, r3, #1
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	3b04      	subs	r3, #4
 8003562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003564:	4a0c      	ldr	r2, [pc, #48]	; (8003598 <pxPortInitialiseStack+0x64>)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	3b14      	subs	r3, #20
 800356e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3b04      	subs	r3, #4
 800357a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f06f 0202 	mvn.w	r2, #2
 8003582:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	3b20      	subs	r3, #32
 8003588:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800358a:	68fb      	ldr	r3, [r7, #12]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	0800359d 	.word	0x0800359d

0800359c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80035a6:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <prvTaskExitError+0x54>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ae:	d00a      	beq.n	80035c6 <prvTaskExitError+0x2a>
	__asm volatile
 80035b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	60fb      	str	r3, [r7, #12]
}
 80035c2:	bf00      	nop
 80035c4:	e7fe      	b.n	80035c4 <prvTaskExitError+0x28>
	__asm volatile
 80035c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	60bb      	str	r3, [r7, #8]
}
 80035d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80035da:	bf00      	nop
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0fc      	beq.n	80035dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80035e2:	bf00      	nop
 80035e4:	bf00      	nop
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	20000010 	.word	0x20000010
	...

08003600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003600:	4b07      	ldr	r3, [pc, #28]	; (8003620 <pxCurrentTCBConst2>)
 8003602:	6819      	ldr	r1, [r3, #0]
 8003604:	6808      	ldr	r0, [r1, #0]
 8003606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800360a:	f380 8809 	msr	PSP, r0
 800360e:	f3bf 8f6f 	isb	sy
 8003612:	f04f 0000 	mov.w	r0, #0
 8003616:	f380 8811 	msr	BASEPRI, r0
 800361a:	4770      	bx	lr
 800361c:	f3af 8000 	nop.w

08003620 <pxCurrentTCBConst2>:
 8003620:	20000e64 	.word	0x20000e64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003624:	bf00      	nop
 8003626:	bf00      	nop

08003628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003628:	4808      	ldr	r0, [pc, #32]	; (800364c <prvPortStartFirstTask+0x24>)
 800362a:	6800      	ldr	r0, [r0, #0]
 800362c:	6800      	ldr	r0, [r0, #0]
 800362e:	f380 8808 	msr	MSP, r0
 8003632:	f04f 0000 	mov.w	r0, #0
 8003636:	f380 8814 	msr	CONTROL, r0
 800363a:	b662      	cpsie	i
 800363c:	b661      	cpsie	f
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	df00      	svc	0
 8003648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800364a:	bf00      	nop
 800364c:	e000ed08 	.word	0xe000ed08

08003650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003656:	4b46      	ldr	r3, [pc, #280]	; (8003770 <xPortStartScheduler+0x120>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a46      	ldr	r2, [pc, #280]	; (8003774 <xPortStartScheduler+0x124>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d10a      	bne.n	8003676 <xPortStartScheduler+0x26>
	__asm volatile
 8003660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	613b      	str	r3, [r7, #16]
}
 8003672:	bf00      	nop
 8003674:	e7fe      	b.n	8003674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003676:	4b3e      	ldr	r3, [pc, #248]	; (8003770 <xPortStartScheduler+0x120>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a3f      	ldr	r2, [pc, #252]	; (8003778 <xPortStartScheduler+0x128>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d10a      	bne.n	8003696 <xPortStartScheduler+0x46>
	__asm volatile
 8003680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	60fb      	str	r3, [r7, #12]
}
 8003692:	bf00      	nop
 8003694:	e7fe      	b.n	8003694 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003696:	4b39      	ldr	r3, [pc, #228]	; (800377c <xPortStartScheduler+0x12c>)
 8003698:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	22ff      	movs	r2, #255	; 0xff
 80036a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	4b31      	ldr	r3, [pc, #196]	; (8003780 <xPortStartScheduler+0x130>)
 80036bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80036be:	4b31      	ldr	r3, [pc, #196]	; (8003784 <xPortStartScheduler+0x134>)
 80036c0:	2207      	movs	r2, #7
 80036c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036c4:	e009      	b.n	80036da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80036c6:	4b2f      	ldr	r3, [pc, #188]	; (8003784 <xPortStartScheduler+0x134>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	4a2d      	ldr	r2, [pc, #180]	; (8003784 <xPortStartScheduler+0x134>)
 80036ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036da:	78fb      	ldrb	r3, [r7, #3]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e2:	2b80      	cmp	r3, #128	; 0x80
 80036e4:	d0ef      	beq.n	80036c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80036e6:	4b27      	ldr	r3, [pc, #156]	; (8003784 <xPortStartScheduler+0x134>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f1c3 0307 	rsb	r3, r3, #7
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d00a      	beq.n	8003708 <xPortStartScheduler+0xb8>
	__asm volatile
 80036f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	60bb      	str	r3, [r7, #8]
}
 8003704:	bf00      	nop
 8003706:	e7fe      	b.n	8003706 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003708:	4b1e      	ldr	r3, [pc, #120]	; (8003784 <xPortStartScheduler+0x134>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	021b      	lsls	r3, r3, #8
 800370e:	4a1d      	ldr	r2, [pc, #116]	; (8003784 <xPortStartScheduler+0x134>)
 8003710:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003712:	4b1c      	ldr	r3, [pc, #112]	; (8003784 <xPortStartScheduler+0x134>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800371a:	4a1a      	ldr	r2, [pc, #104]	; (8003784 <xPortStartScheduler+0x134>)
 800371c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	b2da      	uxtb	r2, r3
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003726:	4b18      	ldr	r3, [pc, #96]	; (8003788 <xPortStartScheduler+0x138>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a17      	ldr	r2, [pc, #92]	; (8003788 <xPortStartScheduler+0x138>)
 800372c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003730:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003732:	4b15      	ldr	r3, [pc, #84]	; (8003788 <xPortStartScheduler+0x138>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a14      	ldr	r2, [pc, #80]	; (8003788 <xPortStartScheduler+0x138>)
 8003738:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800373c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800373e:	f000 f8dd 	bl	80038fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003742:	4b12      	ldr	r3, [pc, #72]	; (800378c <xPortStartScheduler+0x13c>)
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003748:	f000 f8fc 	bl	8003944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800374c:	4b10      	ldr	r3, [pc, #64]	; (8003790 <xPortStartScheduler+0x140>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a0f      	ldr	r2, [pc, #60]	; (8003790 <xPortStartScheduler+0x140>)
 8003752:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003756:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003758:	f7ff ff66 	bl	8003628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800375c:	f000 febc 	bl	80044d8 <vTaskSwitchContext>
	prvTaskExitError();
 8003760:	f7ff ff1c 	bl	800359c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	e000ed00 	.word	0xe000ed00
 8003774:	410fc271 	.word	0x410fc271
 8003778:	410fc270 	.word	0x410fc270
 800377c:	e000e400 	.word	0xe000e400
 8003780:	20000e5c 	.word	0x20000e5c
 8003784:	20000e60 	.word	0x20000e60
 8003788:	e000ed20 	.word	0xe000ed20
 800378c:	20000010 	.word	0x20000010
 8003790:	e000ef34 	.word	0xe000ef34

08003794 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
	__asm volatile
 800379a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379e:	f383 8811 	msr	BASEPRI, r3
 80037a2:	f3bf 8f6f 	isb	sy
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	607b      	str	r3, [r7, #4]
}
 80037ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80037ae:	4b0f      	ldr	r3, [pc, #60]	; (80037ec <vPortEnterCritical+0x58>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3301      	adds	r3, #1
 80037b4:	4a0d      	ldr	r2, [pc, #52]	; (80037ec <vPortEnterCritical+0x58>)
 80037b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80037b8:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <vPortEnterCritical+0x58>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d10f      	bne.n	80037e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <vPortEnterCritical+0x5c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80037ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ce:	f383 8811 	msr	BASEPRI, r3
 80037d2:	f3bf 8f6f 	isb	sy
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	603b      	str	r3, [r7, #0]
}
 80037dc:	bf00      	nop
 80037de:	e7fe      	b.n	80037de <vPortEnterCritical+0x4a>
	}
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	20000010 	.word	0x20000010
 80037f0:	e000ed04 	.word	0xe000ed04

080037f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80037fa:	4b12      	ldr	r3, [pc, #72]	; (8003844 <vPortExitCritical+0x50>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10a      	bne.n	8003818 <vPortExitCritical+0x24>
	__asm volatile
 8003802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	607b      	str	r3, [r7, #4]
}
 8003814:	bf00      	nop
 8003816:	e7fe      	b.n	8003816 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003818:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <vPortExitCritical+0x50>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3b01      	subs	r3, #1
 800381e:	4a09      	ldr	r2, [pc, #36]	; (8003844 <vPortExitCritical+0x50>)
 8003820:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003822:	4b08      	ldr	r3, [pc, #32]	; (8003844 <vPortExitCritical+0x50>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d105      	bne.n	8003836 <vPortExitCritical+0x42>
 800382a:	2300      	movs	r3, #0
 800382c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003834:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000010 	.word	0x20000010
	...

08003850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003850:	f3ef 8009 	mrs	r0, PSP
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <pxCurrentTCBConst>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	f01e 0f10 	tst.w	lr, #16
 8003860:	bf08      	it	eq
 8003862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800386a:	6010      	str	r0, [r2, #0]
 800386c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003870:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003874:	f380 8811 	msr	BASEPRI, r0
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	f3bf 8f6f 	isb	sy
 8003880:	f000 fe2a 	bl	80044d8 <vTaskSwitchContext>
 8003884:	f04f 0000 	mov.w	r0, #0
 8003888:	f380 8811 	msr	BASEPRI, r0
 800388c:	bc09      	pop	{r0, r3}
 800388e:	6819      	ldr	r1, [r3, #0]
 8003890:	6808      	ldr	r0, [r1, #0]
 8003892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003896:	f01e 0f10 	tst.w	lr, #16
 800389a:	bf08      	it	eq
 800389c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80038a0:	f380 8809 	msr	PSP, r0
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	f3af 8000 	nop.w

080038b0 <pxCurrentTCBConst>:
 80038b0:	20000e64 	.word	0x20000e64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80038b4:	bf00      	nop
 80038b6:	bf00      	nop

080038b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
	__asm volatile
 80038be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	607b      	str	r3, [r7, #4]
}
 80038d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80038d2:	f000 fd49 	bl	8004368 <xTaskIncrementTick>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <SysTick_Handler+0x40>)
 80038de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	2300      	movs	r3, #0
 80038e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	f383 8811 	msr	BASEPRI, r3
}
 80038ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80038f0:	bf00      	nop
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	e000ed04 	.word	0xe000ed04

080038fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003900:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <vPortSetupTimerInterrupt+0x34>)
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003906:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <vPortSetupTimerInterrupt+0x38>)
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800390c:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <vPortSetupTimerInterrupt+0x3c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a0a      	ldr	r2, [pc, #40]	; (800393c <vPortSetupTimerInterrupt+0x40>)
 8003912:	fba2 2303 	umull	r2, r3, r2, r3
 8003916:	099b      	lsrs	r3, r3, #6
 8003918:	4a09      	ldr	r2, [pc, #36]	; (8003940 <vPortSetupTimerInterrupt+0x44>)
 800391a:	3b01      	subs	r3, #1
 800391c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800391e:	4b04      	ldr	r3, [pc, #16]	; (8003930 <vPortSetupTimerInterrupt+0x34>)
 8003920:	2207      	movs	r2, #7
 8003922:	601a      	str	r2, [r3, #0]
}
 8003924:	bf00      	nop
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	e000e010 	.word	0xe000e010
 8003934:	e000e018 	.word	0xe000e018
 8003938:	20000004 	.word	0x20000004
 800393c:	10624dd3 	.word	0x10624dd3
 8003940:	e000e014 	.word	0xe000e014

08003944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003944:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003954 <vPortEnableVFP+0x10>
 8003948:	6801      	ldr	r1, [r0, #0]
 800394a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800394e:	6001      	str	r1, [r0, #0]
 8003950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003952:	bf00      	nop
 8003954:	e000ed88 	.word	0xe000ed88

08003958 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10a      	bne.n	8003982 <xQueueGenericReset+0x2a>
	__asm volatile
 800396c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003970:	f383 8811 	msr	BASEPRI, r3
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	60bb      	str	r3, [r7, #8]
}
 800397e:	bf00      	nop
 8003980:	e7fe      	b.n	8003980 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003982:	f7ff ff07 	bl	8003794 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398e:	68f9      	ldr	r1, [r7, #12]
 8003990:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003992:	fb01 f303 	mul.w	r3, r1, r3
 8003996:	441a      	add	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b2:	3b01      	subs	r3, #1
 80039b4:	68f9      	ldr	r1, [r7, #12]
 80039b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039b8:	fb01 f303 	mul.w	r3, r1, r3
 80039bc:	441a      	add	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	22ff      	movs	r2, #255	; 0xff
 80039c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	22ff      	movs	r2, #255	; 0xff
 80039ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d114      	bne.n	8003a02 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d01a      	beq.n	8003a16 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	3310      	adds	r3, #16
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fdf7 	bl	80045d8 <xTaskRemoveFromEventList>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d012      	beq.n	8003a16 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80039f0:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <xQueueGenericReset+0xcc>)
 80039f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	e009      	b.n	8003a16 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3310      	adds	r3, #16
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff fce0 	bl	80033cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	3324      	adds	r3, #36	; 0x24
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff fcdb 	bl	80033cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a16:	f7ff feed 	bl	80037f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a1a:	2301      	movs	r3, #1
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	e000ed04 	.word	0xe000ed04

08003a28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08a      	sub	sp, #40	; 0x28
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	4613      	mov	r3, r2
 8003a34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10a      	bne.n	8003a52 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	613b      	str	r3, [r7, #16]
}
 8003a4e:	bf00      	nop
 8003a50:	e7fe      	b.n	8003a50 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d102      	bne.n	8003a5e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61fb      	str	r3, [r7, #28]
 8003a5c:	e004      	b.n	8003a68 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	fb02 f303 	mul.w	r3, r2, r3
 8003a66:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	3348      	adds	r3, #72	; 0x48
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff fad3 	bl	8003018 <pvPortMalloc>
 8003a72:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d011      	beq.n	8003a9e <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	3348      	adds	r3, #72	; 0x48
 8003a82:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a8c:	79fa      	ldrb	r2, [r7, #7]
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	4613      	mov	r3, r2
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f805 	bl	8003aa8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a9e:	69bb      	ldr	r3, [r7, #24]
	}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3720      	adds	r7, #32
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d103      	bne.n	8003ac4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	e002      	b.n	8003aca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	69b8      	ldr	r0, [r7, #24]
 8003ada:	f7ff ff3d 	bl	8003958 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ade:	bf00      	nop
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08c      	sub	sp, #48	; 0x30
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003af4:	2300      	movs	r3, #0
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10a      	bne.n	8003b18 <xQueueReceive+0x30>
	__asm volatile
 8003b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	623b      	str	r3, [r7, #32]
}
 8003b14:	bf00      	nop
 8003b16:	e7fe      	b.n	8003b16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d103      	bne.n	8003b26 <xQueueReceive+0x3e>
 8003b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <xQueueReceive+0x42>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <xQueueReceive+0x44>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <xQueueReceive+0x5e>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	61fb      	str	r3, [r7, #28]
}
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b46:	f000 ff03 	bl	8004950 <xTaskGetSchedulerState>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d102      	bne.n	8003b56 <xQueueReceive+0x6e>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <xQueueReceive+0x72>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <xQueueReceive+0x74>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10a      	bne.n	8003b76 <xQueueReceive+0x8e>
	__asm volatile
 8003b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b64:	f383 8811 	msr	BASEPRI, r3
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	61bb      	str	r3, [r7, #24]
}
 8003b72:	bf00      	nop
 8003b74:	e7fe      	b.n	8003b74 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b76:	f7ff fe0d 	bl	8003794 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d01f      	beq.n	8003bc6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b8a:	f000 f88d 	bl	8003ca8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	1e5a      	subs	r2, r3, #1
 8003b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00f      	beq.n	8003bbe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	3310      	adds	r3, #16
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fd18 	bl	80045d8 <xTaskRemoveFromEventList>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d007      	beq.n	8003bbe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003bae:	4b3d      	ldr	r3, [pc, #244]	; (8003ca4 <xQueueReceive+0x1bc>)
 8003bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003bbe:	f7ff fe19 	bl	80037f4 <vPortExitCritical>
				return pdPASS;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e069      	b.n	8003c9a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d103      	bne.n	8003bd4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bcc:	f7ff fe12 	bl	80037f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e062      	b.n	8003c9a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bda:	f107 0310 	add.w	r3, r7, #16
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fd5c 	bl	800469c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003be4:	2301      	movs	r3, #1
 8003be6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003be8:	f7ff fe04 	bl	80037f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bec:	f000 fb12 	bl	8004214 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bf0:	f7ff fdd0 	bl	8003794 <vPortEnterCritical>
 8003bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bfa:	b25b      	sxtb	r3, r3
 8003bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c00:	d103      	bne.n	8003c0a <xQueueReceive+0x122>
 8003c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c10:	b25b      	sxtb	r3, r3
 8003c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c16:	d103      	bne.n	8003c20 <xQueueReceive+0x138>
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c20:	f7ff fde8 	bl	80037f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c24:	1d3a      	adds	r2, r7, #4
 8003c26:	f107 0310 	add.w	r3, r7, #16
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fd4b 	bl	80046c8 <xTaskCheckForTimeOut>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d123      	bne.n	8003c80 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c3a:	f000 f8ad 	bl	8003d98 <prvIsQueueEmpty>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d017      	beq.n	8003c74 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	3324      	adds	r3, #36	; 0x24
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 fc9f 	bl	8004590 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c54:	f000 f84e 	bl	8003cf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c58:	f000 faea 	bl	8004230 <xTaskResumeAll>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d189      	bne.n	8003b76 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003c62:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <xQueueReceive+0x1bc>)
 8003c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	e780      	b.n	8003b76 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c76:	f000 f83d 	bl	8003cf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c7a:	f000 fad9 	bl	8004230 <xTaskResumeAll>
 8003c7e:	e77a      	b.n	8003b76 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c82:	f000 f837 	bl	8003cf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c86:	f000 fad3 	bl	8004230 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c8c:	f000 f884 	bl	8003d98 <prvIsQueueEmpty>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f43f af6f 	beq.w	8003b76 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3730      	adds	r7, #48	; 0x30
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	e000ed04 	.word	0xe000ed04

08003ca8 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d018      	beq.n	8003cec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	441a      	add	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d303      	bcc.n	8003cdc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68d9      	ldr	r1, [r3, #12]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	6838      	ldr	r0, [r7, #0]
 8003ce8:	f000 feda 	bl	8004aa0 <memcpy>
	}
}
 8003cec:	bf00      	nop
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003cfc:	f7ff fd4a 	bl	8003794 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d08:	e011      	b.n	8003d2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d012      	beq.n	8003d38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3324      	adds	r3, #36	; 0x24
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 fc5e 	bl	80045d8 <xTaskRemoveFromEventList>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d22:	f000 fd33 	bl	800478c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d26:	7bfb      	ldrb	r3, [r7, #15]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	dce9      	bgt.n	8003d0a <prvUnlockQueue+0x16>
 8003d36:	e000      	b.n	8003d3a <prvUnlockQueue+0x46>
					break;
 8003d38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	22ff      	movs	r2, #255	; 0xff
 8003d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003d42:	f7ff fd57 	bl	80037f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d46:	f7ff fd25 	bl	8003794 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d52:	e011      	b.n	8003d78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d012      	beq.n	8003d82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3310      	adds	r3, #16
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 fc39 	bl	80045d8 <xTaskRemoveFromEventList>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d6c:	f000 fd0e 	bl	800478c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d70:	7bbb      	ldrb	r3, [r7, #14]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	dce9      	bgt.n	8003d54 <prvUnlockQueue+0x60>
 8003d80:	e000      	b.n	8003d84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	22ff      	movs	r2, #255	; 0xff
 8003d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003d8c:	f7ff fd32 	bl	80037f4 <vPortExitCritical>
}
 8003d90:	bf00      	nop
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003da0:	f7ff fcf8 	bl	8003794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d102      	bne.n	8003db2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003dac:	2301      	movs	r3, #1
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	e001      	b.n	8003db6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003db6:	f7ff fd1d 	bl	80037f4 <vPortExitCritical>

	return xReturn;
 8003dba:	68fb      	ldr	r3, [r7, #12]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08e      	sub	sp, #56	; 0x38
 8003dc8:	af04      	add	r7, sp, #16
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10a      	bne.n	8003dee <xTaskCreateStatic+0x2a>
	__asm volatile
 8003dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	623b      	str	r3, [r7, #32]
}
 8003dea:	bf00      	nop
 8003dec:	e7fe      	b.n	8003dec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10a      	bne.n	8003e0a <xTaskCreateStatic+0x46>
	__asm volatile
 8003df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	61fb      	str	r3, [r7, #28]
}
 8003e06:	bf00      	nop
 8003e08:	e7fe      	b.n	8003e08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e0a:	2354      	movs	r3, #84	; 0x54
 8003e0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b54      	cmp	r3, #84	; 0x54
 8003e12:	d00a      	beq.n	8003e2a <xTaskCreateStatic+0x66>
	__asm volatile
 8003e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e18:	f383 8811 	msr	BASEPRI, r3
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	61bb      	str	r3, [r7, #24]
}
 8003e26:	bf00      	nop
 8003e28:	e7fe      	b.n	8003e28 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d01e      	beq.n	8003e70 <xTaskCreateStatic+0xac>
 8003e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d01b      	beq.n	8003e70 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	2202      	movs	r2, #2
 8003e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	9303      	str	r3, [sp, #12]
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	9302      	str	r3, [sp, #8]
 8003e52:	f107 0314 	add.w	r3, r7, #20
 8003e56:	9301      	str	r3, [sp, #4]
 8003e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	68b9      	ldr	r1, [r7, #8]
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 f850 	bl	8003f08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e6a:	f000 f8d5 	bl	8004018 <prvAddNewTaskToReadyList>
 8003e6e:	e001      	b.n	8003e74 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e74:	697b      	ldr	r3, [r7, #20]
	}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3728      	adds	r7, #40	; 0x28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b08c      	sub	sp, #48	; 0x30
 8003e82:	af04      	add	r7, sp, #16
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	603b      	str	r3, [r7, #0]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e8e:	88fb      	ldrh	r3, [r7, #6]
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff f8c0 	bl	8003018 <pvPortMalloc>
 8003e98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00e      	beq.n	8003ebe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ea0:	2054      	movs	r0, #84	; 0x54
 8003ea2:	f7ff f8b9 	bl	8003018 <pvPortMalloc>
 8003ea6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
 8003eb4:	e005      	b.n	8003ec2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003eb6:	6978      	ldr	r0, [r7, #20]
 8003eb8:	f7ff f972 	bl	80031a0 <vPortFree>
 8003ebc:	e001      	b.n	8003ec2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d017      	beq.n	8003ef8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ed0:	88fa      	ldrh	r2, [r7, #6]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	9303      	str	r3, [sp, #12]
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	9302      	str	r3, [sp, #8]
 8003eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003edc:	9301      	str	r3, [sp, #4]
 8003ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68b9      	ldr	r1, [r7, #8]
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 f80e 	bl	8003f08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003eec:	69f8      	ldr	r0, [r7, #28]
 8003eee:	f000 f893 	bl	8004018 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	61bb      	str	r3, [r7, #24]
 8003ef6:	e002      	b.n	8003efe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8003efc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003efe:	69bb      	ldr	r3, [r7, #24]
	}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3720      	adds	r7, #32
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b088      	sub	sp, #32
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f20:	3b01      	subs	r3, #1
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	f023 0307 	bic.w	r3, r3, #7
 8003f2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	617b      	str	r3, [r7, #20]
}
 8003f4c:	bf00      	nop
 8003f4e:	e7fe      	b.n	8003f4e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d01f      	beq.n	8003f96 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f56:	2300      	movs	r3, #0
 8003f58:	61fb      	str	r3, [r7, #28]
 8003f5a:	e012      	b.n	8003f82 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	4413      	add	r3, r2
 8003f62:	7819      	ldrb	r1, [r3, #0]
 8003f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	4413      	add	r3, r2
 8003f6a:	3334      	adds	r3, #52	; 0x34
 8003f6c:	460a      	mov	r2, r1
 8003f6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	4413      	add	r3, r2
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d006      	beq.n	8003f8a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	2b0f      	cmp	r3, #15
 8003f86:	d9e9      	bls.n	8003f5c <prvInitialiseNewTask+0x54>
 8003f88:	e000      	b.n	8003f8c <prvInitialiseNewTask+0x84>
			{
				break;
 8003f8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f94:	e003      	b.n	8003f9e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa0:	2b06      	cmp	r3, #6
 8003fa2:	d901      	bls.n	8003fa8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003fa4:	2306      	movs	r3, #6
 8003fa6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fb2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff fa24 	bl	800340c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc6:	3318      	adds	r3, #24
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff fa1f 	bl	800340c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd6:	f1c3 0207 	rsb	r2, r3, #7
 8003fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fdc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fe2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	68f9      	ldr	r1, [r7, #12]
 8003ff6:	69b8      	ldr	r0, [r7, #24]
 8003ff8:	f7ff fa9c 	bl	8003534 <pxPortInitialiseStack>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004000:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800400c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800400e:	bf00      	nop
 8004010:	3720      	adds	r7, #32
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004020:	f7ff fbb8 	bl	8003794 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004024:	4b2a      	ldr	r3, [pc, #168]	; (80040d0 <prvAddNewTaskToReadyList+0xb8>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3301      	adds	r3, #1
 800402a:	4a29      	ldr	r2, [pc, #164]	; (80040d0 <prvAddNewTaskToReadyList+0xb8>)
 800402c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800402e:	4b29      	ldr	r3, [pc, #164]	; (80040d4 <prvAddNewTaskToReadyList+0xbc>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d109      	bne.n	800404a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004036:	4a27      	ldr	r2, [pc, #156]	; (80040d4 <prvAddNewTaskToReadyList+0xbc>)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800403c:	4b24      	ldr	r3, [pc, #144]	; (80040d0 <prvAddNewTaskToReadyList+0xb8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d110      	bne.n	8004066 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004044:	f000 fbc6 	bl	80047d4 <prvInitialiseTaskLists>
 8004048:	e00d      	b.n	8004066 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800404a:	4b23      	ldr	r3, [pc, #140]	; (80040d8 <prvAddNewTaskToReadyList+0xc0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d109      	bne.n	8004066 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004052:	4b20      	ldr	r3, [pc, #128]	; (80040d4 <prvAddNewTaskToReadyList+0xbc>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	429a      	cmp	r2, r3
 800405e:	d802      	bhi.n	8004066 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004060:	4a1c      	ldr	r2, [pc, #112]	; (80040d4 <prvAddNewTaskToReadyList+0xbc>)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004066:	4b1d      	ldr	r3, [pc, #116]	; (80040dc <prvAddNewTaskToReadyList+0xc4>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3301      	adds	r3, #1
 800406c:	4a1b      	ldr	r2, [pc, #108]	; (80040dc <prvAddNewTaskToReadyList+0xc4>)
 800406e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004074:	2201      	movs	r2, #1
 8004076:	409a      	lsls	r2, r3
 8004078:	4b19      	ldr	r3, [pc, #100]	; (80040e0 <prvAddNewTaskToReadyList+0xc8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4313      	orrs	r3, r2
 800407e:	4a18      	ldr	r2, [pc, #96]	; (80040e0 <prvAddNewTaskToReadyList+0xc8>)
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4a15      	ldr	r2, [pc, #84]	; (80040e4 <prvAddNewTaskToReadyList+0xcc>)
 8004090:	441a      	add	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	3304      	adds	r3, #4
 8004096:	4619      	mov	r1, r3
 8004098:	4610      	mov	r0, r2
 800409a:	f7ff f9c4 	bl	8003426 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800409e:	f7ff fba9 	bl	80037f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040a2:	4b0d      	ldr	r3, [pc, #52]	; (80040d8 <prvAddNewTaskToReadyList+0xc0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00e      	beq.n	80040c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040aa:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <prvAddNewTaskToReadyList+0xbc>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d207      	bcs.n	80040c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80040b8:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <prvAddNewTaskToReadyList+0xd0>)
 80040ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040c8:	bf00      	nop
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	20000f64 	.word	0x20000f64
 80040d4:	20000e64 	.word	0x20000e64
 80040d8:	20000f70 	.word	0x20000f70
 80040dc:	20000f80 	.word	0x20000f80
 80040e0:	20000f6c 	.word	0x20000f6c
 80040e4:	20000e68 	.word	0x20000e68
 80040e8:	e000ed04 	.word	0xe000ed04

080040ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80040f4:	2300      	movs	r3, #0
 80040f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d017      	beq.n	800412e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80040fe:	4b13      	ldr	r3, [pc, #76]	; (800414c <vTaskDelay+0x60>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <vTaskDelay+0x30>
	__asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	60bb      	str	r3, [r7, #8]
}
 8004118:	bf00      	nop
 800411a:	e7fe      	b.n	800411a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800411c:	f000 f87a 	bl	8004214 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004120:	2100      	movs	r1, #0
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fc32 	bl	800498c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004128:	f000 f882 	bl	8004230 <xTaskResumeAll>
 800412c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d107      	bne.n	8004144 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004134:	4b06      	ldr	r3, [pc, #24]	; (8004150 <vTaskDelay+0x64>)
 8004136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004144:	bf00      	nop
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	20000f8c 	.word	0x20000f8c
 8004150:	e000ed04 	.word	0xe000ed04

08004154 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b08a      	sub	sp, #40	; 0x28
 8004158:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800415a:	2300      	movs	r3, #0
 800415c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800415e:	2300      	movs	r3, #0
 8004160:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004162:	463a      	mov	r2, r7
 8004164:	1d39      	adds	r1, r7, #4
 8004166:	f107 0308 	add.w	r3, r7, #8
 800416a:	4618      	mov	r0, r3
 800416c:	f7fc f9ac 	bl	80004c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004170:	6839      	ldr	r1, [r7, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	9202      	str	r2, [sp, #8]
 8004178:	9301      	str	r3, [sp, #4]
 800417a:	2300      	movs	r3, #0
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	2300      	movs	r3, #0
 8004180:	460a      	mov	r2, r1
 8004182:	491e      	ldr	r1, [pc, #120]	; (80041fc <vTaskStartScheduler+0xa8>)
 8004184:	481e      	ldr	r0, [pc, #120]	; (8004200 <vTaskStartScheduler+0xac>)
 8004186:	f7ff fe1d 	bl	8003dc4 <xTaskCreateStatic>
 800418a:	4603      	mov	r3, r0
 800418c:	4a1d      	ldr	r2, [pc, #116]	; (8004204 <vTaskStartScheduler+0xb0>)
 800418e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004190:	4b1c      	ldr	r3, [pc, #112]	; (8004204 <vTaskStartScheduler+0xb0>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004198:	2301      	movs	r3, #1
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	e001      	b.n	80041a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d116      	bne.n	80041d6 <vTaskStartScheduler+0x82>
	__asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	613b      	str	r3, [r7, #16]
}
 80041ba:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80041bc:	4b12      	ldr	r3, [pc, #72]	; (8004208 <vTaskStartScheduler+0xb4>)
 80041be:	f04f 32ff 	mov.w	r2, #4294967295
 80041c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041c4:	4b11      	ldr	r3, [pc, #68]	; (800420c <vTaskStartScheduler+0xb8>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80041ca:	4b11      	ldr	r3, [pc, #68]	; (8004210 <vTaskStartScheduler+0xbc>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041d0:	f7ff fa3e 	bl	8003650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041d4:	e00e      	b.n	80041f4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041dc:	d10a      	bne.n	80041f4 <vTaskStartScheduler+0xa0>
	__asm volatile
 80041de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e2:	f383 8811 	msr	BASEPRI, r3
 80041e6:	f3bf 8f6f 	isb	sy
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	60fb      	str	r3, [r7, #12]
}
 80041f0:	bf00      	nop
 80041f2:	e7fe      	b.n	80041f2 <vTaskStartScheduler+0x9e>
}
 80041f4:	bf00      	nop
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	08004b14 	.word	0x08004b14
 8004200:	080047a5 	.word	0x080047a5
 8004204:	20000f88 	.word	0x20000f88
 8004208:	20000f84 	.word	0x20000f84
 800420c:	20000f70 	.word	0x20000f70
 8004210:	20000f68 	.word	0x20000f68

08004214 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004218:	4b04      	ldr	r3, [pc, #16]	; (800422c <vTaskSuspendAll+0x18>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	3301      	adds	r3, #1
 800421e:	4a03      	ldr	r2, [pc, #12]	; (800422c <vTaskSuspendAll+0x18>)
 8004220:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004222:	bf00      	nop
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	20000f8c 	.word	0x20000f8c

08004230 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004236:	2300      	movs	r3, #0
 8004238:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800423a:	2300      	movs	r3, #0
 800423c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800423e:	4b41      	ldr	r3, [pc, #260]	; (8004344 <xTaskResumeAll+0x114>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10a      	bne.n	800425c <xTaskResumeAll+0x2c>
	__asm volatile
 8004246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424a:	f383 8811 	msr	BASEPRI, r3
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	603b      	str	r3, [r7, #0]
}
 8004258:	bf00      	nop
 800425a:	e7fe      	b.n	800425a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800425c:	f7ff fa9a 	bl	8003794 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004260:	4b38      	ldr	r3, [pc, #224]	; (8004344 <xTaskResumeAll+0x114>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3b01      	subs	r3, #1
 8004266:	4a37      	ldr	r2, [pc, #220]	; (8004344 <xTaskResumeAll+0x114>)
 8004268:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800426a:	4b36      	ldr	r3, [pc, #216]	; (8004344 <xTaskResumeAll+0x114>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d161      	bne.n	8004336 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004272:	4b35      	ldr	r3, [pc, #212]	; (8004348 <xTaskResumeAll+0x118>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d05d      	beq.n	8004336 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800427a:	e02e      	b.n	80042da <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800427c:	4b33      	ldr	r3, [pc, #204]	; (800434c <xTaskResumeAll+0x11c>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	3318      	adds	r3, #24
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff f929 	bl	80034e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	3304      	adds	r3, #4
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff f924 	bl	80034e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	2201      	movs	r2, #1
 800429e:	409a      	lsls	r2, r3
 80042a0:	4b2b      	ldr	r3, [pc, #172]	; (8004350 <xTaskResumeAll+0x120>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	4a2a      	ldr	r2, [pc, #168]	; (8004350 <xTaskResumeAll+0x120>)
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ae:	4613      	mov	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4a27      	ldr	r2, [pc, #156]	; (8004354 <xTaskResumeAll+0x124>)
 80042b8:	441a      	add	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	3304      	adds	r3, #4
 80042be:	4619      	mov	r1, r3
 80042c0:	4610      	mov	r0, r2
 80042c2:	f7ff f8b0 	bl	8003426 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ca:	4b23      	ldr	r3, [pc, #140]	; (8004358 <xTaskResumeAll+0x128>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d302      	bcc.n	80042da <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80042d4:	4b21      	ldr	r3, [pc, #132]	; (800435c <xTaskResumeAll+0x12c>)
 80042d6:	2201      	movs	r2, #1
 80042d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042da:	4b1c      	ldr	r3, [pc, #112]	; (800434c <xTaskResumeAll+0x11c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1cc      	bne.n	800427c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80042e8:	f000 fb12 	bl	8004910 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80042ec:	4b1c      	ldr	r3, [pc, #112]	; (8004360 <xTaskResumeAll+0x130>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d010      	beq.n	800431a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80042f8:	f000 f836 	bl	8004368 <xTaskIncrementTick>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004302:	4b16      	ldr	r3, [pc, #88]	; (800435c <xTaskResumeAll+0x12c>)
 8004304:	2201      	movs	r2, #1
 8004306:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3b01      	subs	r3, #1
 800430c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1f1      	bne.n	80042f8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004314:	4b12      	ldr	r3, [pc, #72]	; (8004360 <xTaskResumeAll+0x130>)
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800431a:	4b10      	ldr	r3, [pc, #64]	; (800435c <xTaskResumeAll+0x12c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d009      	beq.n	8004336 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004322:	2301      	movs	r3, #1
 8004324:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004326:	4b0f      	ldr	r3, [pc, #60]	; (8004364 <xTaskResumeAll+0x134>)
 8004328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004336:	f7ff fa5d 	bl	80037f4 <vPortExitCritical>

	return xAlreadyYielded;
 800433a:	68bb      	ldr	r3, [r7, #8]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20000f8c 	.word	0x20000f8c
 8004348:	20000f64 	.word	0x20000f64
 800434c:	20000f24 	.word	0x20000f24
 8004350:	20000f6c 	.word	0x20000f6c
 8004354:	20000e68 	.word	0x20000e68
 8004358:	20000e64 	.word	0x20000e64
 800435c:	20000f78 	.word	0x20000f78
 8004360:	20000f74 	.word	0x20000f74
 8004364:	e000ed04 	.word	0xe000ed04

08004368 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004372:	4b4e      	ldr	r3, [pc, #312]	; (80044ac <xTaskIncrementTick+0x144>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	f040 8088 	bne.w	800448c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800437c:	4b4c      	ldr	r3, [pc, #304]	; (80044b0 <xTaskIncrementTick+0x148>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3301      	adds	r3, #1
 8004382:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004384:	4a4a      	ldr	r2, [pc, #296]	; (80044b0 <xTaskIncrementTick+0x148>)
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d120      	bne.n	80043d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004390:	4b48      	ldr	r3, [pc, #288]	; (80044b4 <xTaskIncrementTick+0x14c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	603b      	str	r3, [r7, #0]
}
 80043ac:	bf00      	nop
 80043ae:	e7fe      	b.n	80043ae <xTaskIncrementTick+0x46>
 80043b0:	4b40      	ldr	r3, [pc, #256]	; (80044b4 <xTaskIncrementTick+0x14c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	4b40      	ldr	r3, [pc, #256]	; (80044b8 <xTaskIncrementTick+0x150>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a3e      	ldr	r2, [pc, #248]	; (80044b4 <xTaskIncrementTick+0x14c>)
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	4a3e      	ldr	r2, [pc, #248]	; (80044b8 <xTaskIncrementTick+0x150>)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	4b3d      	ldr	r3, [pc, #244]	; (80044bc <xTaskIncrementTick+0x154>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3301      	adds	r3, #1
 80043ca:	4a3c      	ldr	r2, [pc, #240]	; (80044bc <xTaskIncrementTick+0x154>)
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	f000 fa9f 	bl	8004910 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043d2:	4b3b      	ldr	r3, [pc, #236]	; (80044c0 <xTaskIncrementTick+0x158>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d348      	bcc.n	800446e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043dc:	4b35      	ldr	r3, [pc, #212]	; (80044b4 <xTaskIncrementTick+0x14c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d104      	bne.n	80043f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043e6:	4b36      	ldr	r3, [pc, #216]	; (80044c0 <xTaskIncrementTick+0x158>)
 80043e8:	f04f 32ff 	mov.w	r2, #4294967295
 80043ec:	601a      	str	r2, [r3, #0]
					break;
 80043ee:	e03e      	b.n	800446e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043f0:	4b30      	ldr	r3, [pc, #192]	; (80044b4 <xTaskIncrementTick+0x14c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	429a      	cmp	r2, r3
 8004406:	d203      	bcs.n	8004410 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004408:	4a2d      	ldr	r2, [pc, #180]	; (80044c0 <xTaskIncrementTick+0x158>)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800440e:	e02e      	b.n	800446e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	3304      	adds	r3, #4
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff f863 	bl	80034e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441e:	2b00      	cmp	r3, #0
 8004420:	d004      	beq.n	800442c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	3318      	adds	r3, #24
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff f85a 	bl	80034e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	2201      	movs	r2, #1
 8004432:	409a      	lsls	r2, r3
 8004434:	4b23      	ldr	r3, [pc, #140]	; (80044c4 <xTaskIncrementTick+0x15c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4313      	orrs	r3, r2
 800443a:	4a22      	ldr	r2, [pc, #136]	; (80044c4 <xTaskIncrementTick+0x15c>)
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4a1f      	ldr	r2, [pc, #124]	; (80044c8 <xTaskIncrementTick+0x160>)
 800444c:	441a      	add	r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	3304      	adds	r3, #4
 8004452:	4619      	mov	r1, r3
 8004454:	4610      	mov	r0, r2
 8004456:	f7fe ffe6 	bl	8003426 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445e:	4b1b      	ldr	r3, [pc, #108]	; (80044cc <xTaskIncrementTick+0x164>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	429a      	cmp	r2, r3
 8004466:	d3b9      	bcc.n	80043dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004468:	2301      	movs	r3, #1
 800446a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800446c:	e7b6      	b.n	80043dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800446e:	4b17      	ldr	r3, [pc, #92]	; (80044cc <xTaskIncrementTick+0x164>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004474:	4914      	ldr	r1, [pc, #80]	; (80044c8 <xTaskIncrementTick+0x160>)
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	440b      	add	r3, r1
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d907      	bls.n	8004496 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004486:	2301      	movs	r3, #1
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	e004      	b.n	8004496 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800448c:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <xTaskIncrementTick+0x168>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3301      	adds	r3, #1
 8004492:	4a0f      	ldr	r2, [pc, #60]	; (80044d0 <xTaskIncrementTick+0x168>)
 8004494:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004496:	4b0f      	ldr	r3, [pc, #60]	; (80044d4 <xTaskIncrementTick+0x16c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800449e:	2301      	movs	r3, #1
 80044a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80044a2:	697b      	ldr	r3, [r7, #20]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20000f8c 	.word	0x20000f8c
 80044b0:	20000f68 	.word	0x20000f68
 80044b4:	20000f1c 	.word	0x20000f1c
 80044b8:	20000f20 	.word	0x20000f20
 80044bc:	20000f7c 	.word	0x20000f7c
 80044c0:	20000f84 	.word	0x20000f84
 80044c4:	20000f6c 	.word	0x20000f6c
 80044c8:	20000e68 	.word	0x20000e68
 80044cc:	20000e64 	.word	0x20000e64
 80044d0:	20000f74 	.word	0x20000f74
 80044d4:	20000f78 	.word	0x20000f78

080044d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044de:	4b27      	ldr	r3, [pc, #156]	; (800457c <vTaskSwitchContext+0xa4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80044e6:	4b26      	ldr	r3, [pc, #152]	; (8004580 <vTaskSwitchContext+0xa8>)
 80044e8:	2201      	movs	r2, #1
 80044ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80044ec:	e03f      	b.n	800456e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80044ee:	4b24      	ldr	r3, [pc, #144]	; (8004580 <vTaskSwitchContext+0xa8>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044f4:	4b23      	ldr	r3, [pc, #140]	; (8004584 <vTaskSwitchContext+0xac>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	fab3 f383 	clz	r3, r3
 8004500:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004502:	7afb      	ldrb	r3, [r7, #11]
 8004504:	f1c3 031f 	rsb	r3, r3, #31
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	491f      	ldr	r1, [pc, #124]	; (8004588 <vTaskSwitchContext+0xb0>)
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	440b      	add	r3, r1
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10a      	bne.n	8004534 <vTaskSwitchContext+0x5c>
	__asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	607b      	str	r3, [r7, #4]
}
 8004530:	bf00      	nop
 8004532:	e7fe      	b.n	8004532 <vTaskSwitchContext+0x5a>
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	4613      	mov	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4a12      	ldr	r2, [pc, #72]	; (8004588 <vTaskSwitchContext+0xb0>)
 8004540:	4413      	add	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	605a      	str	r2, [r3, #4]
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	3308      	adds	r3, #8
 8004556:	429a      	cmp	r2, r3
 8004558:	d104      	bne.n	8004564 <vTaskSwitchContext+0x8c>
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	605a      	str	r2, [r3, #4]
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	4a08      	ldr	r2, [pc, #32]	; (800458c <vTaskSwitchContext+0xb4>)
 800456c:	6013      	str	r3, [r2, #0]
}
 800456e:	bf00      	nop
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	20000f8c 	.word	0x20000f8c
 8004580:	20000f78 	.word	0x20000f78
 8004584:	20000f6c 	.word	0x20000f6c
 8004588:	20000e68 	.word	0x20000e68
 800458c:	20000e64 	.word	0x20000e64

08004590 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10a      	bne.n	80045b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80045a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	60fb      	str	r3, [r7, #12]
}
 80045b2:	bf00      	nop
 80045b4:	e7fe      	b.n	80045b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045b6:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <vTaskPlaceOnEventList+0x44>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	3318      	adds	r3, #24
 80045bc:	4619      	mov	r1, r3
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7fe ff55 	bl	800346e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045c4:	2101      	movs	r1, #1
 80045c6:	6838      	ldr	r0, [r7, #0]
 80045c8:	f000 f9e0 	bl	800498c <prvAddCurrentTaskToDelayedList>
}
 80045cc:	bf00      	nop
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20000e64 	.word	0x20000e64

080045d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10a      	bne.n	8004604 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	60fb      	str	r3, [r7, #12]
}
 8004600:	bf00      	nop
 8004602:	e7fe      	b.n	8004602 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	3318      	adds	r3, #24
 8004608:	4618      	mov	r0, r3
 800460a:	f7fe ff69 	bl	80034e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800460e:	4b1d      	ldr	r3, [pc, #116]	; (8004684 <xTaskRemoveFromEventList+0xac>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d11c      	bne.n	8004650 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	3304      	adds	r3, #4
 800461a:	4618      	mov	r0, r3
 800461c:	f7fe ff60 	bl	80034e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	2201      	movs	r2, #1
 8004626:	409a      	lsls	r2, r3
 8004628:	4b17      	ldr	r3, [pc, #92]	; (8004688 <xTaskRemoveFromEventList+0xb0>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4313      	orrs	r3, r2
 800462e:	4a16      	ldr	r2, [pc, #88]	; (8004688 <xTaskRemoveFromEventList+0xb0>)
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4a13      	ldr	r2, [pc, #76]	; (800468c <xTaskRemoveFromEventList+0xb4>)
 8004640:	441a      	add	r2, r3
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	3304      	adds	r3, #4
 8004646:	4619      	mov	r1, r3
 8004648:	4610      	mov	r0, r2
 800464a:	f7fe feec 	bl	8003426 <vListInsertEnd>
 800464e:	e005      	b.n	800465c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	3318      	adds	r3, #24
 8004654:	4619      	mov	r1, r3
 8004656:	480e      	ldr	r0, [pc, #56]	; (8004690 <xTaskRemoveFromEventList+0xb8>)
 8004658:	f7fe fee5 	bl	8003426 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004660:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <xTaskRemoveFromEventList+0xbc>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004666:	429a      	cmp	r2, r3
 8004668:	d905      	bls.n	8004676 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800466a:	2301      	movs	r3, #1
 800466c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800466e:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <xTaskRemoveFromEventList+0xc0>)
 8004670:	2201      	movs	r2, #1
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	e001      	b.n	800467a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800467a:	697b      	ldr	r3, [r7, #20]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	20000f8c 	.word	0x20000f8c
 8004688:	20000f6c 	.word	0x20000f6c
 800468c:	20000e68 	.word	0x20000e68
 8004690:	20000f24 	.word	0x20000f24
 8004694:	20000e64 	.word	0x20000e64
 8004698:	20000f78 	.word	0x20000f78

0800469c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046a4:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <vTaskInternalSetTimeOutState+0x24>)
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <vTaskInternalSetTimeOutState+0x28>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	605a      	str	r2, [r3, #4]
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	20000f7c 	.word	0x20000f7c
 80046c4:	20000f68 	.word	0x20000f68

080046c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10a      	bne.n	80046ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	613b      	str	r3, [r7, #16]
}
 80046ea:	bf00      	nop
 80046ec:	e7fe      	b.n	80046ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10a      	bne.n	800470a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	60fb      	str	r3, [r7, #12]
}
 8004706:	bf00      	nop
 8004708:	e7fe      	b.n	8004708 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800470a:	f7ff f843 	bl	8003794 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800470e:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <xTaskCheckForTimeOut+0xbc>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004726:	d102      	bne.n	800472e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004728:	2300      	movs	r3, #0
 800472a:	61fb      	str	r3, [r7, #28]
 800472c:	e023      	b.n	8004776 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	4b15      	ldr	r3, [pc, #84]	; (8004788 <xTaskCheckForTimeOut+0xc0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d007      	beq.n	800474a <xTaskCheckForTimeOut+0x82>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	429a      	cmp	r2, r3
 8004742:	d302      	bcc.n	800474a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004744:	2301      	movs	r3, #1
 8004746:	61fb      	str	r3, [r7, #28]
 8004748:	e015      	b.n	8004776 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	429a      	cmp	r2, r3
 8004752:	d20b      	bcs.n	800476c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	1ad2      	subs	r2, r2, r3
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7ff ff9b 	bl	800469c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004766:	2300      	movs	r3, #0
 8004768:	61fb      	str	r3, [r7, #28]
 800476a:	e004      	b.n	8004776 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004772:	2301      	movs	r3, #1
 8004774:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004776:	f7ff f83d 	bl	80037f4 <vPortExitCritical>

	return xReturn;
 800477a:	69fb      	ldr	r3, [r7, #28]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3720      	adds	r7, #32
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	20000f68 	.word	0x20000f68
 8004788:	20000f7c 	.word	0x20000f7c

0800478c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004790:	4b03      	ldr	r3, [pc, #12]	; (80047a0 <vTaskMissedYield+0x14>)
 8004792:	2201      	movs	r2, #1
 8004794:	601a      	str	r2, [r3, #0]
}
 8004796:	bf00      	nop
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	20000f78 	.word	0x20000f78

080047a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047ac:	f000 f852 	bl	8004854 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047b0:	4b06      	ldr	r3, [pc, #24]	; (80047cc <prvIdleTask+0x28>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d9f9      	bls.n	80047ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80047b8:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <prvIdleTask+0x2c>)
 80047ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	f3bf 8f4f 	dsb	sy
 80047c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80047c8:	e7f0      	b.n	80047ac <prvIdleTask+0x8>
 80047ca:	bf00      	nop
 80047cc:	20000e68 	.word	0x20000e68
 80047d0:	e000ed04 	.word	0xe000ed04

080047d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047da:	2300      	movs	r3, #0
 80047dc:	607b      	str	r3, [r7, #4]
 80047de:	e00c      	b.n	80047fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4a12      	ldr	r2, [pc, #72]	; (8004834 <prvInitialiseTaskLists+0x60>)
 80047ec:	4413      	add	r3, r2
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fe fdec 	bl	80033cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3301      	adds	r3, #1
 80047f8:	607b      	str	r3, [r7, #4]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b06      	cmp	r3, #6
 80047fe:	d9ef      	bls.n	80047e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004800:	480d      	ldr	r0, [pc, #52]	; (8004838 <prvInitialiseTaskLists+0x64>)
 8004802:	f7fe fde3 	bl	80033cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004806:	480d      	ldr	r0, [pc, #52]	; (800483c <prvInitialiseTaskLists+0x68>)
 8004808:	f7fe fde0 	bl	80033cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800480c:	480c      	ldr	r0, [pc, #48]	; (8004840 <prvInitialiseTaskLists+0x6c>)
 800480e:	f7fe fddd 	bl	80033cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004812:	480c      	ldr	r0, [pc, #48]	; (8004844 <prvInitialiseTaskLists+0x70>)
 8004814:	f7fe fdda 	bl	80033cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004818:	480b      	ldr	r0, [pc, #44]	; (8004848 <prvInitialiseTaskLists+0x74>)
 800481a:	f7fe fdd7 	bl	80033cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800481e:	4b0b      	ldr	r3, [pc, #44]	; (800484c <prvInitialiseTaskLists+0x78>)
 8004820:	4a05      	ldr	r2, [pc, #20]	; (8004838 <prvInitialiseTaskLists+0x64>)
 8004822:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004824:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <prvInitialiseTaskLists+0x7c>)
 8004826:	4a05      	ldr	r2, [pc, #20]	; (800483c <prvInitialiseTaskLists+0x68>)
 8004828:	601a      	str	r2, [r3, #0]
}
 800482a:	bf00      	nop
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	20000e68 	.word	0x20000e68
 8004838:	20000ef4 	.word	0x20000ef4
 800483c:	20000f08 	.word	0x20000f08
 8004840:	20000f24 	.word	0x20000f24
 8004844:	20000f38 	.word	0x20000f38
 8004848:	20000f50 	.word	0x20000f50
 800484c:	20000f1c 	.word	0x20000f1c
 8004850:	20000f20 	.word	0x20000f20

08004854 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800485a:	e019      	b.n	8004890 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800485c:	f7fe ff9a 	bl	8003794 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004860:	4b10      	ldr	r3, [pc, #64]	; (80048a4 <prvCheckTasksWaitingTermination+0x50>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3304      	adds	r3, #4
 800486c:	4618      	mov	r0, r3
 800486e:	f7fe fe37 	bl	80034e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004872:	4b0d      	ldr	r3, [pc, #52]	; (80048a8 <prvCheckTasksWaitingTermination+0x54>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3b01      	subs	r3, #1
 8004878:	4a0b      	ldr	r2, [pc, #44]	; (80048a8 <prvCheckTasksWaitingTermination+0x54>)
 800487a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800487c:	4b0b      	ldr	r3, [pc, #44]	; (80048ac <prvCheckTasksWaitingTermination+0x58>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3b01      	subs	r3, #1
 8004882:	4a0a      	ldr	r2, [pc, #40]	; (80048ac <prvCheckTasksWaitingTermination+0x58>)
 8004884:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004886:	f7fe ffb5 	bl	80037f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f810 	bl	80048b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004890:	4b06      	ldr	r3, [pc, #24]	; (80048ac <prvCheckTasksWaitingTermination+0x58>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e1      	bne.n	800485c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004898:	bf00      	nop
 800489a:	bf00      	nop
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20000f38 	.word	0x20000f38
 80048a8:	20000f64 	.word	0x20000f64
 80048ac:	20000f4c 	.word	0x20000f4c

080048b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d108      	bne.n	80048d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fe fc6a 	bl	80031a0 <vPortFree>
				vPortFree( pxTCB );
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7fe fc67 	bl	80031a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80048d2:	e018      	b.n	8004906 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d103      	bne.n	80048e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7fe fc5e 	bl	80031a0 <vPortFree>
	}
 80048e4:	e00f      	b.n	8004906 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d00a      	beq.n	8004906 <prvDeleteTCB+0x56>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	60fb      	str	r3, [r7, #12]
}
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <prvDeleteTCB+0x54>
	}
 8004906:	bf00      	nop
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
	...

08004910 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004916:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <prvResetNextTaskUnblockTime+0x38>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d104      	bne.n	800492a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004920:	4b0a      	ldr	r3, [pc, #40]	; (800494c <prvResetNextTaskUnblockTime+0x3c>)
 8004922:	f04f 32ff 	mov.w	r2, #4294967295
 8004926:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004928:	e008      	b.n	800493c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800492a:	4b07      	ldr	r3, [pc, #28]	; (8004948 <prvResetNextTaskUnblockTime+0x38>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	4a04      	ldr	r2, [pc, #16]	; (800494c <prvResetNextTaskUnblockTime+0x3c>)
 800493a:	6013      	str	r3, [r2, #0]
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	20000f1c 	.word	0x20000f1c
 800494c:	20000f84 	.word	0x20000f84

08004950 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004956:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <xTaskGetSchedulerState+0x34>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d102      	bne.n	8004964 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800495e:	2301      	movs	r3, #1
 8004960:	607b      	str	r3, [r7, #4]
 8004962:	e008      	b.n	8004976 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004964:	4b08      	ldr	r3, [pc, #32]	; (8004988 <xTaskGetSchedulerState+0x38>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d102      	bne.n	8004972 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800496c:	2302      	movs	r3, #2
 800496e:	607b      	str	r3, [r7, #4]
 8004970:	e001      	b.n	8004976 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004972:	2300      	movs	r3, #0
 8004974:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004976:	687b      	ldr	r3, [r7, #4]
	}
 8004978:	4618      	mov	r0, r3
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	20000f70 	.word	0x20000f70
 8004988:	20000f8c 	.word	0x20000f8c

0800498c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004996:	4b29      	ldr	r3, [pc, #164]	; (8004a3c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800499c:	4b28      	ldr	r3, [pc, #160]	; (8004a40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3304      	adds	r3, #4
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fe fd9c 	bl	80034e0 <uxListRemove>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10b      	bne.n	80049c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80049ae:	4b24      	ldr	r3, [pc, #144]	; (8004a40 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b4:	2201      	movs	r2, #1
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	43da      	mvns	r2, r3
 80049bc:	4b21      	ldr	r3, [pc, #132]	; (8004a44 <prvAddCurrentTaskToDelayedList+0xb8>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4013      	ands	r3, r2
 80049c2:	4a20      	ldr	r2, [pc, #128]	; (8004a44 <prvAddCurrentTaskToDelayedList+0xb8>)
 80049c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049cc:	d10a      	bne.n	80049e4 <prvAddCurrentTaskToDelayedList+0x58>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d007      	beq.n	80049e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049d4:	4b1a      	ldr	r3, [pc, #104]	; (8004a40 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3304      	adds	r3, #4
 80049da:	4619      	mov	r1, r3
 80049dc:	481a      	ldr	r0, [pc, #104]	; (8004a48 <prvAddCurrentTaskToDelayedList+0xbc>)
 80049de:	f7fe fd22 	bl	8003426 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80049e2:	e026      	b.n	8004a32 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4413      	add	r3, r2
 80049ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80049ec:	4b14      	ldr	r3, [pc, #80]	; (8004a40 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d209      	bcs.n	8004a10 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049fc:	4b13      	ldr	r3, [pc, #76]	; (8004a4c <prvAddCurrentTaskToDelayedList+0xc0>)
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	4b0f      	ldr	r3, [pc, #60]	; (8004a40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3304      	adds	r3, #4
 8004a06:	4619      	mov	r1, r3
 8004a08:	4610      	mov	r0, r2
 8004a0a:	f7fe fd30 	bl	800346e <vListInsert>
}
 8004a0e:	e010      	b.n	8004a32 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a10:	4b0f      	ldr	r3, [pc, #60]	; (8004a50 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	f7fe fd26 	bl	800346e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a22:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d202      	bcs.n	8004a32 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004a2c:	4a09      	ldr	r2, [pc, #36]	; (8004a54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	6013      	str	r3, [r2, #0]
}
 8004a32:	bf00      	nop
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	20000f68 	.word	0x20000f68
 8004a40:	20000e64 	.word	0x20000e64
 8004a44:	20000f6c 	.word	0x20000f6c
 8004a48:	20000f50 	.word	0x20000f50
 8004a4c:	20000f20 	.word	0x20000f20
 8004a50:	20000f1c 	.word	0x20000f1c
 8004a54:	20000f84 	.word	0x20000f84

08004a58 <__libc_init_array>:
 8004a58:	b570      	push	{r4, r5, r6, lr}
 8004a5a:	4d0d      	ldr	r5, [pc, #52]	; (8004a90 <__libc_init_array+0x38>)
 8004a5c:	4c0d      	ldr	r4, [pc, #52]	; (8004a94 <__libc_init_array+0x3c>)
 8004a5e:	1b64      	subs	r4, r4, r5
 8004a60:	10a4      	asrs	r4, r4, #2
 8004a62:	2600      	movs	r6, #0
 8004a64:	42a6      	cmp	r6, r4
 8004a66:	d109      	bne.n	8004a7c <__libc_init_array+0x24>
 8004a68:	4d0b      	ldr	r5, [pc, #44]	; (8004a98 <__libc_init_array+0x40>)
 8004a6a:	4c0c      	ldr	r4, [pc, #48]	; (8004a9c <__libc_init_array+0x44>)
 8004a6c:	f000 f82e 	bl	8004acc <_init>
 8004a70:	1b64      	subs	r4, r4, r5
 8004a72:	10a4      	asrs	r4, r4, #2
 8004a74:	2600      	movs	r6, #0
 8004a76:	42a6      	cmp	r6, r4
 8004a78:	d105      	bne.n	8004a86 <__libc_init_array+0x2e>
 8004a7a:	bd70      	pop	{r4, r5, r6, pc}
 8004a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a80:	4798      	blx	r3
 8004a82:	3601      	adds	r6, #1
 8004a84:	e7ee      	b.n	8004a64 <__libc_init_array+0xc>
 8004a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a8a:	4798      	blx	r3
 8004a8c:	3601      	adds	r6, #1
 8004a8e:	e7f2      	b.n	8004a76 <__libc_init_array+0x1e>
 8004a90:	08004b6c 	.word	0x08004b6c
 8004a94:	08004b6c 	.word	0x08004b6c
 8004a98:	08004b6c 	.word	0x08004b6c
 8004a9c:	08004b70 	.word	0x08004b70

08004aa0 <memcpy>:
 8004aa0:	440a      	add	r2, r1
 8004aa2:	4291      	cmp	r1, r2
 8004aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004aa8:	d100      	bne.n	8004aac <memcpy+0xc>
 8004aaa:	4770      	bx	lr
 8004aac:	b510      	push	{r4, lr}
 8004aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ab2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ab6:	4291      	cmp	r1, r2
 8004ab8:	d1f9      	bne.n	8004aae <memcpy+0xe>
 8004aba:	bd10      	pop	{r4, pc}

08004abc <memset>:
 8004abc:	4402      	add	r2, r0
 8004abe:	4603      	mov	r3, r0
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d100      	bne.n	8004ac6 <memset+0xa>
 8004ac4:	4770      	bx	lr
 8004ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8004aca:	e7f9      	b.n	8004ac0 <memset+0x4>

08004acc <_init>:
 8004acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ace:	bf00      	nop
 8004ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad2:	bc08      	pop	{r3}
 8004ad4:	469e      	mov	lr, r3
 8004ad6:	4770      	bx	lr

08004ad8 <_fini>:
 8004ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ada:	bf00      	nop
 8004adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ade:	bc08      	pop	{r3}
 8004ae0:	469e      	mov	lr, r3
 8004ae2:	4770      	bx	lr
