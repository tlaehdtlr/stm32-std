
timer_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004eb8  08004eb8  00014eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f38  08004f38  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08004f38  08004f38  00014f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f40  08004f40  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f40  08004f40  00014f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f44  08004f44  00014f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000109c  20000018  08004f60  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010b4  08004f60  000210b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c8a  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000362a  00000000  00000000  00039cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  0003d300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  0003e718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc00  00000000  00000000  0003f9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160f2  00000000  00000000  0005c5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3595  00000000  00000000  0007269a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00125c2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052d8  00000000  00000000  00125c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ea0 	.word	0x08004ea0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08004ea0 	.word	0x08004ea0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <vApplicationGetIdleTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	2000003c 	.word	0x2000003c
 80004f8:	20000090 	.word	0x20000090

080004fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004fc:	b5b0      	push	{r4, r5, r7, lr}
 80004fe:	b08a      	sub	sp, #40	; 0x28
 8000500:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <MX_FREERTOS_Init+0x54>)
 8000504:	1d3c      	adds	r4, r7, #4
 8000506:	461d      	mov	r5, r3
 8000508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800050a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800050c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000510:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	2100      	movs	r1, #0
 8000518:	4618      	mov	r0, r3
 800051a:	f002 fd42 	bl	8002fa2 <osThreadCreate>
 800051e:	4603      	mov	r3, r0
 8000520:	4a0c      	ldr	r2, [pc, #48]	; (8000554 <MX_FREERTOS_Init+0x58>)
 8000522:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  myQueueHandle = xQueueCreate(4, sizeof(uint8_t));
 8000524:	2200      	movs	r2, #0
 8000526:	2101      	movs	r1, #1
 8000528:	2004      	movs	r0, #4
 800052a:	f002 feb7 	bl	800329c <xQueueGenericCreate>
 800052e:	4603      	mov	r3, r0
 8000530:	4a09      	ldr	r2, [pc, #36]	; (8000558 <MX_FREERTOS_Init+0x5c>)
 8000532:	6013      	str	r3, [r2, #0]

  xTaskCreate(my_Task, "myTask", configMINIMAL_STACK_SIZE, NULL, 1, &myTaskHandle);
 8000534:	4b09      	ldr	r3, [pc, #36]	; (800055c <MX_FREERTOS_Init+0x60>)
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	2301      	movs	r3, #1
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	2300      	movs	r3, #0
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	4907      	ldr	r1, [pc, #28]	; (8000560 <MX_FREERTOS_Init+0x64>)
 8000542:	4808      	ldr	r0, [pc, #32]	; (8000564 <MX_FREERTOS_Init+0x68>)
 8000544:	f003 f9d7 	bl	80038f6 <xTaskCreate>


  /* USER CODE END RTOS_THREADS */

}
 8000548:	bf00      	nop
 800054a:	3720      	adds	r7, #32
 800054c:	46bd      	mov	sp, r7
 800054e:	bdb0      	pop	{r4, r5, r7, pc}
 8000550:	08004ecc 	.word	0x08004ecc
 8000554:	20000f94 	.word	0x20000f94
 8000558:	20000038 	.word	0x20000038
 800055c:	20000034 	.word	0x20000034
 8000560:	08004ec4 	.word	0x08004ec4
 8000564:	080005a9 	.word	0x080005a9

08000568 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000570:	2001      	movs	r0, #1
 8000572:	f002 fd62 	bl	800303a <osDelay>
 8000576:	e7fb      	b.n	8000570 <StartDefaultTask+0x8>

08000578 <myQueueSendFromISR>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void myQueueSendFromISR(uint8_t* queMSG)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
  if (myQueueHandle != NULL)
 8000584:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <myQueueSendFromISR+0x2c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d007      	beq.n	800059c <myQueueSendFromISR+0x24>
  {
    xQueueSendFromISR(myQueueHandle, queMSG, &xHigherPriorityTaskWoken);
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <myQueueSendFromISR+0x2c>)
 800058e:	6818      	ldr	r0, [r3, #0]
 8000590:	f107 020c 	add.w	r2, r7, #12
 8000594:	2300      	movs	r3, #0
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	f002 fedf 	bl	800335a <xQueueGenericSendFromISR>
  }
}
 800059c:	bf00      	nop
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000038 	.word	0x20000038

080005a8 <my_Task>:


void my_Task()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
    uint8_t * quqMSG;
    for (;;)
    {
        if (xQueueReceive(myQueueHandle, &quqMSG, 1)==pdTRUE)
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <my_Task+0x64>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	1d39      	adds	r1, r7, #4
 80005b4:	2201      	movs	r2, #1
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 ff68 	bl	800348c <xQueueReceive>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d10b      	bne.n	80005da <my_Task+0x32>
        {
            my_arr++;
 80005c2:	4b13      	ldr	r3, [pc, #76]	; (8000610 <my_Task+0x68>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	3301      	adds	r3, #1
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <my_Task+0x68>)
 80005cc:	701a      	strb	r2, [r3, #0]
            ignore_arr++;
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <my_Task+0x6c>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	3301      	adds	r3, #1
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <my_Task+0x6c>)
 80005d8:	801a      	strh	r2, [r3, #0]
        }
        if (my_arr<3)
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <my_Task+0x68>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d806      	bhi.n	80005f0 <my_Task+0x48>
        {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e8:	480b      	ldr	r0, [pc, #44]	; (8000618 <my_Task+0x70>)
 80005ea:	f000 fd5b 	bl	80010a4 <HAL_GPIO_WritePin>
 80005ee:	e7de      	b.n	80005ae <my_Task+0x6>
        }
        else
        {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f6:	4808      	ldr	r0, [pc, #32]	; (8000618 <my_Task+0x70>)
 80005f8:	f000 fd54 	bl	80010a4 <HAL_GPIO_WritePin>
            if (my_arr==10)
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <my_Task+0x68>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b0a      	cmp	r3, #10
 8000602:	d1d4      	bne.n	80005ae <my_Task+0x6>
            {
                my_arr = 1;
 8000604:	4b02      	ldr	r3, [pc, #8]	; (8000610 <my_Task+0x68>)
 8000606:	2201      	movs	r2, #1
 8000608:	701a      	strb	r2, [r3, #0]
        if (xQueueReceive(myQueueHandle, &quqMSG, 1)==pdTRUE)
 800060a:	e7d0      	b.n	80005ae <my_Task+0x6>
 800060c:	20000038 	.word	0x20000038
 8000610:	20000000 	.word	0x20000000
 8000614:	20000002 	.word	0x20000002
 8000618:	48000400 	.word	0x48000400

0800061c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	4b18      	ldr	r3, [pc, #96]	; (8000694 <MX_GPIO_Init+0x78>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	4a17      	ldr	r2, [pc, #92]	; (8000694 <MX_GPIO_Init+0x78>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <MX_GPIO_Init+0x78>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_GPIO_Init+0x78>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	4a11      	ldr	r2, [pc, #68]	; (8000694 <MX_GPIO_Init+0x78>)
 8000650:	f043 0302 	orr.w	r3, r3, #2
 8000654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_GPIO_Init+0x78>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000668:	480b      	ldr	r0, [pc, #44]	; (8000698 <MX_GPIO_Init+0x7c>)
 800066a:	f000 fd1b 	bl	80010a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800066e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000672:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000674:	2301      	movs	r3, #1
 8000676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	4619      	mov	r1, r3
 8000686:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_GPIO_Init+0x7c>)
 8000688:	f000 fb9a 	bl	8000dc0 <HAL_GPIO_Init>

}
 800068c:	bf00      	nop
 800068e:	3720      	adds	r7, #32
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40021000 	.word	0x40021000
 8000698:	48000400 	.word	0x48000400

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a0:	f000 fa73 	bl	8000b8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a4:	f000 f810 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a8:	f7ff ffb8 	bl	800061c <MX_GPIO_Init>
  MX_TIM6_Init();
 80006ac:	f000 f976 	bl	800099c <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80006b0:	f000 f9d0 	bl	8000a54 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <main+0x28>)
 80006b6:	f001 fded 	bl	8002294 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80006ba:	f7ff ff1f 	bl	80004fc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80006be:	f002 fc69 	bl	8002f94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <main+0x26>
 80006c4:	20000fe4 	.word	0x20000fe4

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b0a4      	sub	sp, #144	; 0x90
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006d2:	2244      	movs	r2, #68	; 0x44
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f004 fbda 	bl	8004e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2234      	movs	r2, #52	; 0x34
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f004 fbcc 	bl	8004e90 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006fc:	f000 fcf8 	bl	80010f0 <HAL_PWREx_ControlVoltageScaling>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000706:	f000 f865 	bl	80007d4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800070a:	2310      	movs	r3, #16
 800070c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800070e:	2301      	movs	r3, #1
 8000710:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000716:	2360      	movs	r3, #96	; 0x60
 8000718:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800071e:	2301      	movs	r3, #1
 8000720:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000722:	2301      	movs	r3, #1
 8000724:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000728:	2328      	movs	r3, #40	; 0x28
 800072a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800073e:	4618      	mov	r0, r3
 8000740:	f000 fd2c 	bl	800119c <HAL_RCC_OscConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800074a:	f000 f843 	bl	80007d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074e:	230f      	movs	r3, #15
 8000750:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000752:	2303      	movs	r3, #3
 8000754:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000762:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000766:	2104      	movs	r1, #4
 8000768:	4618      	mov	r0, r3
 800076a:	f001 f97d 	bl	8001a68 <HAL_RCC_ClockConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000774:	f000 f82e 	bl	80007d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000778:	2302      	movs	r3, #2
 800077a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	4618      	mov	r0, r3
 8000784:	f001 fba8 	bl	8001ed8 <HAL_RCCEx_PeriphCLKConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800078e:	f000 f821 	bl	80007d4 <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	3790      	adds	r7, #144	; 0x90
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007ac:	d101      	bne.n	80007b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ae:	f000 fa05 	bl	8000bbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a05      	ldr	r2, [pc, #20]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d102      	bne.n	80007c2 <HAL_TIM_PeriodElapsedCallback+0x26>
  {
    myQueueSendFromISR(&queTrue);
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80007be:	f7ff fedb 	bl	8000578 <myQueueSendFromISR>
  }


  /* USER CODE END Callback 1 */
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40001000 	.word	0x40001000
 80007d0:	20000004 	.word	0x20000004

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007dc:	e7fe      	b.n	80007dc <Error_Handler+0x8>
	...

080007e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <HAL_MspInit+0x4c>)
 80007e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ea:	4a10      	ldr	r2, [pc, #64]	; (800082c <HAL_MspInit+0x4c>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6613      	str	r3, [r2, #96]	; 0x60
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <HAL_MspInit+0x4c>)
 80007f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <HAL_MspInit+0x4c>)
 8000800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <HAL_MspInit+0x4c>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	6593      	str	r3, [r2, #88]	; 0x58
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <HAL_MspInit+0x4c>)
 800080c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	210f      	movs	r1, #15
 800081a:	f06f 0001 	mvn.w	r0, #1
 800081e:	f000 faa5 	bl	8000d6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000

08000830 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	; 0x30
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000840:	2200      	movs	r2, #0
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	201c      	movs	r0, #28
 8000846:	f000 fa91 	bl	8000d6c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800084a:	201c      	movs	r0, #28
 800084c:	f000 faaa 	bl	8000da4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <HAL_InitTick+0xa0>)
 8000852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000854:	4a1e      	ldr	r2, [pc, #120]	; (80008d0 <HAL_InitTick+0xa0>)
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	6593      	str	r3, [r2, #88]	; 0x58
 800085c:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <HAL_InitTick+0xa0>)
 800085e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000868:	f107 0210 	add.w	r2, r7, #16
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4611      	mov	r1, r2
 8000872:	4618      	mov	r0, r3
 8000874:	f001 fa9e 	bl	8001db4 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000878:	f001 fa70 	bl	8001d5c <HAL_RCC_GetPCLK1Freq>
 800087c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800087e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000880:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <HAL_InitTick+0xa4>)
 8000882:	fba2 2303 	umull	r2, r3, r2, r3
 8000886:	0c9b      	lsrs	r3, r3, #18
 8000888:	3b01      	subs	r3, #1
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_InitTick+0xa8>)
 800088e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000892:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000894:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <HAL_InitTick+0xa8>)
 8000896:	f240 32e7 	movw	r2, #999	; 0x3e7
 800089a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800089c:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <HAL_InitTick+0xa8>)
 800089e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <HAL_InitTick+0xa8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <HAL_InitTick+0xa8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80008ae:	480a      	ldr	r0, [pc, #40]	; (80008d8 <HAL_InitTick+0xa8>)
 80008b0:	f001 fc98 	bl	80021e4 <HAL_TIM_Base_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d104      	bne.n	80008c4 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80008ba:	4807      	ldr	r0, [pc, #28]	; (80008d8 <HAL_InitTick+0xa8>)
 80008bc:	f001 fcea 	bl	8002294 <HAL_TIM_Base_Start_IT>
 80008c0:	4603      	mov	r3, r0
 80008c2:	e000      	b.n	80008c6 <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 80008c4:	2301      	movs	r3, #1
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3730      	adds	r7, #48	; 0x30
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000
 80008d4:	431bde83 	.word	0x431bde83
 80008d8:	20000f98 	.word	0x20000f98

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <NMI_Handler+0x4>

080008e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <HardFault_Handler+0x4>

080008e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <MemManage_Handler+0x4>

080008ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <BusFault_Handler+0x4>

080008f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <UsageFault_Handler+0x4>

080008fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <TIM2_IRQHandler+0x10>)
 800090e:	f001 fd15 	bl	800233c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000f98 	.word	0x20000f98

0800091c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <TIM6_IRQHandler+0x10>)
 8000922:	f001 fd0b 	bl	800233c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000fe4 	.word	0x20000fe4

08000930 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <SystemInit+0x64>)
 8000936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093a:	4a16      	ldr	r2, [pc, #88]	; (8000994 <SystemInit+0x64>)
 800093c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <SystemInit+0x68>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a13      	ldr	r2, [pc, #76]	; (8000998 <SystemInit+0x68>)
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <SystemInit+0x68>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <SystemInit+0x68>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0f      	ldr	r2, [pc, #60]	; (8000998 <SystemInit+0x68>)
 800095c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000960:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000964:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <SystemInit+0x68>)
 8000968:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800096c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <SystemInit+0x68>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a09      	ldr	r2, [pc, #36]	; (8000998 <SystemInit+0x68>)
 8000974:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000978:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800097a:	4b07      	ldr	r3, [pc, #28]	; (8000998 <SystemInit+0x68>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <SystemInit+0x64>)
 8000982:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000986:	609a      	str	r2, [r3, #8]
#endif
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00
 8000998:	40021000 	.word	0x40021000

0800099c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_TIM6_Init+0x64>)
 80009ae:	4a15      	ldr	r2, [pc, #84]	; (8000a04 <MX_TIM6_Init+0x68>)
 80009b0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1-1;
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <MX_TIM6_Init+0x64>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_TIM6_Init+0x64>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 800-1;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <MX_TIM6_Init+0x64>)
 80009c0:	f240 321f 	movw	r2, #799	; 0x31f
 80009c4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_TIM6_Init+0x64>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009cc:	480c      	ldr	r0, [pc, #48]	; (8000a00 <MX_TIM6_Init+0x64>)
 80009ce:	f001 fc09 	bl	80021e4 <HAL_TIM_Base_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80009d8:	f7ff fefc 	bl	80007d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009dc:	2300      	movs	r3, #0
 80009de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_TIM6_Init+0x64>)
 80009ea:	f001 fe53 	bl	8002694 <HAL_TIMEx_MasterConfigSynchronization>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80009f4:	f7ff feee 	bl	80007d4 <Error_Handler>
  }

}
 80009f8:	bf00      	nop
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000fe4 	.word	0x20000fe4
 8000a04:	40001000 	.word	0x40001000

08000a08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <HAL_TIM_Base_MspInit+0x44>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d113      	bne.n	8000a42 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <HAL_TIM_Base_MspInit+0x48>)
 8000a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1e:	4a0c      	ldr	r2, [pc, #48]	; (8000a50 <HAL_TIM_Base_MspInit+0x48>)
 8000a20:	f043 0310 	orr.w	r3, r3, #16
 8000a24:	6593      	str	r3, [r2, #88]	; 0x58
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <HAL_TIM_Base_MspInit+0x48>)
 8000a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2a:	f003 0310 	and.w	r3, r3, #16
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2105      	movs	r1, #5
 8000a36:	2036      	movs	r0, #54	; 0x36
 8000a38:	f000 f998 	bl	8000d6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000a3c:	2036      	movs	r0, #54	; 0x36
 8000a3e:	f000 f9b1 	bl	8000da4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40001000 	.word	0x40001000
 8000a50:	40021000 	.word	0x40021000

08000a54 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_USART2_UART_Init+0x58>)
 8000a5a:	4a15      	ldr	r2, [pc, #84]	; (8000ab0 <MX_USART2_UART_Init+0x5c>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_USART2_UART_Init+0x58>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_USART2_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_USART2_UART_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_USART2_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_USART2_UART_Init+0x58>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_USART2_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_USART2_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_USART2_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_USART2_UART_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_USART2_UART_Init+0x58>)
 8000a98:	f001 fe80 	bl	800279c <HAL_UART_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aa2:	f7ff fe97 	bl	80007d4 <Error_Handler>
  }

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20001030 	.word	0x20001030
 8000ab0:	40004400 	.word	0x40004400

08000ab4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a17      	ldr	r2, [pc, #92]	; (8000b30 <HAL_UART_MspInit+0x7c>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d128      	bne.n	8000b28 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <HAL_UART_MspInit+0x80>)
 8000ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ada:	4a16      	ldr	r2, [pc, #88]	; (8000b34 <HAL_UART_MspInit+0x80>)
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <HAL_UART_MspInit+0x80>)
 8000ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <HAL_UART_MspInit+0x80>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <HAL_UART_MspInit+0x80>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <HAL_UART_MspInit+0x80>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b06:	230c      	movs	r3, #12
 8000b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b16:	2307      	movs	r3, #7
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b24:	f000 f94c 	bl	8000dc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b28:	bf00      	nop
 8000b2a:	3728      	adds	r7, #40	; 0x28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40004400 	.word	0x40004400
 8000b34:	40021000 	.word	0x40021000

08000b38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b3c:	f7ff fef8 	bl	8000930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b40:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b42:	e003      	b.n	8000b4c <LoopCopyDataInit>

08000b44 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b46:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b48:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b4a:	3104      	adds	r1, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b4c:	480a      	ldr	r0, [pc, #40]	; (8000b78 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b50:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b52:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b54:	d3f6      	bcc.n	8000b44 <CopyDataInit>
	ldr	r2, =_sbss
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b58:	e002      	b.n	8000b60 <LoopFillZerobss>

08000b5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b5a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b5c:	f842 3b04 	str.w	r3, [r2], #4

08000b60 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <LoopForever+0x16>)
	cmp	r2, r3
 8000b62:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b64:	d3f9      	bcc.n	8000b5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b66:	f004 f961 	bl	8004e2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b6a:	f7ff fd97 	bl	800069c <main>

08000b6e <LoopForever>:

LoopForever:
    b LoopForever
 8000b6e:	e7fe      	b.n	8000b6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b70:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000b74:	08004f48 	.word	0x08004f48
	ldr	r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b7c:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8000b80:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8000b84:	200010b4 	.word	0x200010b4

08000b88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC1_2_IRQHandler>

08000b8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b90:	2300      	movs	r3, #0
 8000b92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b94:	2003      	movs	r0, #3
 8000b96:	f000 f8de 	bl	8000d56 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f7ff fe48 	bl	8000830 <HAL_InitTick>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d002      	beq.n	8000bac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	71fb      	strb	r3, [r7, #7]
 8000baa:	e001      	b.n	8000bb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bac:	f7ff fe18 	bl	80007e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_IncTick+0x20>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_IncTick+0x24>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <HAL_IncTick+0x24>)
 8000bce:	6013      	str	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20000010 	.word	0x20000010
 8000be0:	200010b0 	.word	0x200010b0

08000be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return uwTick;
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <HAL_GetTick+0x14>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	200010b0 	.word	0x200010b0

08000bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2e:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	60d3      	str	r3, [r2, #12]
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <__NVIC_GetPriorityGrouping+0x18>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	f003 0307 	and.w	r3, r3, #7
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	db0b      	blt.n	8000c8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 021f 	and.w	r2, r3, #31
 8000c78:	4907      	ldr	r1, [pc, #28]	; (8000c98 <__NVIC_EnableIRQ+0x38>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	095b      	lsrs	r3, r3, #5
 8000c80:	2001      	movs	r0, #1
 8000c82:	fa00 f202 	lsl.w	r2, r0, r2
 8000c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000e100 	.word	0xe000e100

08000c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	db0a      	blt.n	8000cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	490c      	ldr	r1, [pc, #48]	; (8000ce8 <__NVIC_SetPriority+0x4c>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	0112      	lsls	r2, r2, #4
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	440b      	add	r3, r1
 8000cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc4:	e00a      	b.n	8000cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4908      	ldr	r1, [pc, #32]	; (8000cec <__NVIC_SetPriority+0x50>)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f003 030f 	and.w	r3, r3, #15
 8000cd2:	3b04      	subs	r3, #4
 8000cd4:	0112      	lsls	r2, r2, #4
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	440b      	add	r3, r1
 8000cda:	761a      	strb	r2, [r3, #24]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000e100 	.word	0xe000e100
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	; 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f1c3 0307 	rsb	r3, r3, #7
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	bf28      	it	cs
 8000d0e:	2304      	movcs	r3, #4
 8000d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3304      	adds	r3, #4
 8000d16:	2b06      	cmp	r3, #6
 8000d18:	d902      	bls.n	8000d20 <NVIC_EncodePriority+0x30>
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3b03      	subs	r3, #3
 8000d1e:	e000      	b.n	8000d22 <NVIC_EncodePriority+0x32>
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	401a      	ands	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d38:	f04f 31ff 	mov.w	r1, #4294967295
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	43d9      	mvns	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	4313      	orrs	r3, r2
         );
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3724      	adds	r7, #36	; 0x24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ff4c 	bl	8000bfc <__NVIC_SetPriorityGrouping>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7e:	f7ff ff61 	bl	8000c44 <__NVIC_GetPriorityGrouping>
 8000d82:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	68b9      	ldr	r1, [r7, #8]
 8000d88:	6978      	ldr	r0, [r7, #20]
 8000d8a:	f7ff ffb1 	bl	8000cf0 <NVIC_EncodePriority>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d94:	4611      	mov	r1, r2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ff80 	bl	8000c9c <__NVIC_SetPriority>
}
 8000d9c:	bf00      	nop
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff ff54 	bl	8000c60 <__NVIC_EnableIRQ>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dce:	e14e      	b.n	800106e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 8140 	beq.w	8001068 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d00b      	beq.n	8000e08 <HAL_GPIO_Init+0x48>
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d007      	beq.n	8000e08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dfc:	2b11      	cmp	r3, #17
 8000dfe:	d003      	beq.n	8000e08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b12      	cmp	r3, #18
 8000e06:	d130      	bne.n	8000e6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2203      	movs	r2, #3
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e3e:	2201      	movs	r2, #1
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	091b      	lsrs	r3, r3, #4
 8000e54:	f003 0201 	and.w	r2, r3, #1
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d003      	beq.n	8000eaa <HAL_GPIO_Init+0xea>
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2b12      	cmp	r3, #18
 8000ea8:	d123      	bne.n	8000ef2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	08da      	lsrs	r2, r3, #3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3208      	adds	r2, #8
 8000eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	220f      	movs	r2, #15
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	691a      	ldr	r2, [r3, #16]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	f003 0307 	and.w	r3, r3, #7
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	08da      	lsrs	r2, r3, #3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3208      	adds	r2, #8
 8000eec:	6939      	ldr	r1, [r7, #16]
 8000eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	2203      	movs	r2, #3
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0203 	and.w	r2, r3, #3
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 809a 	beq.w	8001068 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f34:	4b55      	ldr	r3, [pc, #340]	; (800108c <HAL_GPIO_Init+0x2cc>)
 8000f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f38:	4a54      	ldr	r2, [pc, #336]	; (800108c <HAL_GPIO_Init+0x2cc>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	6613      	str	r3, [r2, #96]	; 0x60
 8000f40:	4b52      	ldr	r3, [pc, #328]	; (800108c <HAL_GPIO_Init+0x2cc>)
 8000f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f4c:	4a50      	ldr	r2, [pc, #320]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	089b      	lsrs	r3, r3, #2
 8000f52:	3302      	adds	r3, #2
 8000f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	220f      	movs	r2, #15
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f76:	d013      	beq.n	8000fa0 <HAL_GPIO_Init+0x1e0>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a46      	ldr	r2, [pc, #280]	; (8001094 <HAL_GPIO_Init+0x2d4>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d00d      	beq.n	8000f9c <HAL_GPIO_Init+0x1dc>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a45      	ldr	r2, [pc, #276]	; (8001098 <HAL_GPIO_Init+0x2d8>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d007      	beq.n	8000f98 <HAL_GPIO_Init+0x1d8>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a44      	ldr	r2, [pc, #272]	; (800109c <HAL_GPIO_Init+0x2dc>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d101      	bne.n	8000f94 <HAL_GPIO_Init+0x1d4>
 8000f90:	2303      	movs	r3, #3
 8000f92:	e006      	b.n	8000fa2 <HAL_GPIO_Init+0x1e2>
 8000f94:	2307      	movs	r3, #7
 8000f96:	e004      	b.n	8000fa2 <HAL_GPIO_Init+0x1e2>
 8000f98:	2302      	movs	r3, #2
 8000f9a:	e002      	b.n	8000fa2 <HAL_GPIO_Init+0x1e2>
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e000      	b.n	8000fa2 <HAL_GPIO_Init+0x1e2>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	f002 0203 	and.w	r2, r2, #3
 8000fa8:	0092      	lsls	r2, r2, #2
 8000faa:	4093      	lsls	r3, r2
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fb2:	4937      	ldr	r1, [pc, #220]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	089b      	lsrs	r3, r3, #2
 8000fb8:	3302      	adds	r3, #2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fc0:	4b37      	ldr	r3, [pc, #220]	; (80010a0 <HAL_GPIO_Init+0x2e0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fe4:	4a2e      	ldr	r2, [pc, #184]	; (80010a0 <HAL_GPIO_Init+0x2e0>)
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000fea:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <HAL_GPIO_Init+0x2e0>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4313      	orrs	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800100e:	4a24      	ldr	r2, [pc, #144]	; (80010a0 <HAL_GPIO_Init+0x2e0>)
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <HAL_GPIO_Init+0x2e0>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	43db      	mvns	r3, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001038:	4a19      	ldr	r2, [pc, #100]	; (80010a0 <HAL_GPIO_Init+0x2e0>)
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <HAL_GPIO_Init+0x2e0>)
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001062:	4a0f      	ldr	r2, [pc, #60]	; (80010a0 <HAL_GPIO_Init+0x2e0>)
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	3301      	adds	r3, #1
 800106c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	fa22 f303 	lsr.w	r3, r2, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	f47f aea9 	bne.w	8000dd0 <HAL_GPIO_Init+0x10>
  }
}
 800107e:	bf00      	nop
 8001080:	bf00      	nop
 8001082:	371c      	adds	r7, #28
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	40021000 	.word	0x40021000
 8001090:	40010000 	.word	0x40010000
 8001094:	48000400 	.word	0x48000400
 8001098:	48000800 	.word	0x48000800
 800109c:	48000c00 	.word	0x48000c00
 80010a0:	40010400 	.word	0x40010400

080010a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	807b      	strh	r3, [r7, #2]
 80010b0:	4613      	mov	r3, r2
 80010b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b4:	787b      	ldrb	r3, [r7, #1]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ba:	887a      	ldrh	r2, [r7, #2]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010c0:	e002      	b.n	80010c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010c2:	887a      	ldrh	r2, [r7, #2]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <HAL_PWREx_GetVoltageRange+0x18>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40007000 	.word	0x40007000

080010f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010fe:	d130      	bne.n	8001162 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001100:	4b23      	ldr	r3, [pc, #140]	; (8001190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800110c:	d038      	beq.n	8001180 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800110e:	4b20      	ldr	r3, [pc, #128]	; (8001190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001116:	4a1e      	ldr	r2, [pc, #120]	; (8001190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001118:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800111c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800111e:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2232      	movs	r2, #50	; 0x32
 8001124:	fb02 f303 	mul.w	r3, r2, r3
 8001128:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800112a:	fba2 2303 	umull	r2, r3, r2, r3
 800112e:	0c9b      	lsrs	r3, r3, #18
 8001130:	3301      	adds	r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001134:	e002      	b.n	800113c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	3b01      	subs	r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001148:	d102      	bne.n	8001150 <HAL_PWREx_ControlVoltageScaling+0x60>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1f2      	bne.n	8001136 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800115c:	d110      	bne.n	8001180 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e00f      	b.n	8001182 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800116a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800116e:	d007      	beq.n	8001180 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001170:	4b07      	ldr	r3, [pc, #28]	; (8001190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001178:	4a05      	ldr	r2, [pc, #20]	; (8001190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800117a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800117e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40007000 	.word	0x40007000
 8001194:	20000008 	.word	0x20000008
 8001198:	431bde83 	.word	0x431bde83

0800119c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d102      	bne.n	80011b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	f000 bc56 	b.w	8001a5c <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011b0:	4ba1      	ldr	r3, [pc, #644]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f003 030c 	and.w	r3, r3, #12
 80011b8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011ba:	4b9f      	ldr	r3, [pc, #636]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0310 	and.w	r3, r3, #16
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f000 80e6 	beq.w	800139e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011d2:	6a3b      	ldr	r3, [r7, #32]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d007      	beq.n	80011e8 <HAL_RCC_OscConfig+0x4c>
 80011d8:	6a3b      	ldr	r3, [r7, #32]
 80011da:	2b0c      	cmp	r3, #12
 80011dc:	f040 808d 	bne.w	80012fa <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	f040 8089 	bne.w	80012fa <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011e8:	4b93      	ldr	r3, [pc, #588]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d006      	beq.n	8001202 <HAL_RCC_OscConfig+0x66>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69db      	ldr	r3, [r3, #28]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	f000 bc2d 	b.w	8001a5c <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001206:	4b8c      	ldr	r3, [pc, #560]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	2b00      	cmp	r3, #0
 8001210:	d004      	beq.n	800121c <HAL_RCC_OscConfig+0x80>
 8001212:	4b89      	ldr	r3, [pc, #548]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800121a:	e005      	b.n	8001228 <HAL_RCC_OscConfig+0x8c>
 800121c:	4b86      	ldr	r3, [pc, #536]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 800121e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001222:	091b      	lsrs	r3, r3, #4
 8001224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001228:	4293      	cmp	r3, r2
 800122a:	d224      	bcs.n	8001276 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	4618      	mov	r0, r3
 8001232:	f000 fdf1 	bl	8001e18 <RCC_SetFlashLatencyFromMSIRange>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	f000 bc0d 	b.w	8001a5c <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001242:	4b7d      	ldr	r3, [pc, #500]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a7c      	ldr	r2, [pc, #496]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 8001248:	f043 0308 	orr.w	r3, r3, #8
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	4b7a      	ldr	r3, [pc, #488]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125a:	4977      	ldr	r1, [pc, #476]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 800125c:	4313      	orrs	r3, r2
 800125e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001260:	4b75      	ldr	r3, [pc, #468]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	4972      	ldr	r1, [pc, #456]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 8001270:	4313      	orrs	r3, r2
 8001272:	604b      	str	r3, [r1, #4]
 8001274:	e025      	b.n	80012c2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001276:	4b70      	ldr	r3, [pc, #448]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a6f      	ldr	r2, [pc, #444]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	4b6d      	ldr	r3, [pc, #436]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	496a      	ldr	r1, [pc, #424]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 8001290:	4313      	orrs	r3, r2
 8001292:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001294:	4b68      	ldr	r3, [pc, #416]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	4965      	ldr	r1, [pc, #404]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012a8:	6a3b      	ldr	r3, [r7, #32]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d109      	bne.n	80012c2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fdb0 	bl	8001e18 <RCC_SetFlashLatencyFromMSIRange>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e3cc      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012c2:	f000 fcb3 	bl	8001c2c <HAL_RCC_GetSysClockFreq>
 80012c6:	4602      	mov	r2, r0
 80012c8:	4b5b      	ldr	r3, [pc, #364]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	091b      	lsrs	r3, r3, #4
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	495a      	ldr	r1, [pc, #360]	; (800143c <HAL_RCC_OscConfig+0x2a0>)
 80012d4:	5ccb      	ldrb	r3, [r1, r3]
 80012d6:	f003 031f 	and.w	r3, r3, #31
 80012da:	fa22 f303 	lsr.w	r3, r2, r3
 80012de:	4a58      	ldr	r2, [pc, #352]	; (8001440 <HAL_RCC_OscConfig+0x2a4>)
 80012e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012e2:	4b58      	ldr	r3, [pc, #352]	; (8001444 <HAL_RCC_OscConfig+0x2a8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff faa2 	bl	8000830 <HAL_InitTick>
 80012ec:	4603      	mov	r3, r0
 80012ee:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d052      	beq.n	800139c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80012f6:	7dfb      	ldrb	r3, [r7, #23]
 80012f8:	e3b0      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d032      	beq.n	8001368 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001302:	4b4d      	ldr	r3, [pc, #308]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a4c      	ldr	r2, [pc, #304]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800130e:	f7ff fc69 	bl	8000be4 <HAL_GetTick>
 8001312:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001316:	f7ff fc65 	bl	8000be4 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e399      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001328:	4b43      	ldr	r3, [pc, #268]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001334:	4b40      	ldr	r3, [pc, #256]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a3f      	ldr	r2, [pc, #252]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	4b3d      	ldr	r3, [pc, #244]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	493a      	ldr	r1, [pc, #232]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 800134e:	4313      	orrs	r3, r2
 8001350:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001352:	4b39      	ldr	r3, [pc, #228]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	4935      	ldr	r1, [pc, #212]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 8001362:	4313      	orrs	r3, r2
 8001364:	604b      	str	r3, [r1, #4]
 8001366:	e01a      	b.n	800139e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001368:	4b33      	ldr	r3, [pc, #204]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a32      	ldr	r2, [pc, #200]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 800136e:	f023 0301 	bic.w	r3, r3, #1
 8001372:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001374:	f7ff fc36 	bl	8000be4 <HAL_GetTick>
 8001378:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800137c:	f7ff fc32 	bl	8000be4 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e366      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800138e:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0x1e0>
 800139a:	e000      	b.n	800139e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800139c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d073      	beq.n	8001492 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	d005      	beq.n	80013bc <HAL_RCC_OscConfig+0x220>
 80013b0:	6a3b      	ldr	r3, [r7, #32]
 80013b2:	2b0c      	cmp	r3, #12
 80013b4:	d10e      	bne.n	80013d4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d10b      	bne.n	80013d4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013bc:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d063      	beq.n	8001490 <HAL_RCC_OscConfig+0x2f4>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d15f      	bne.n	8001490 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e343      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013dc:	d106      	bne.n	80013ec <HAL_RCC_OscConfig+0x250>
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a15      	ldr	r2, [pc, #84]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 80013e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	e01d      	b.n	8001428 <HAL_RCC_OscConfig+0x28c>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0x274>
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a0f      	ldr	r2, [pc, #60]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 80013fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a0c      	ldr	r2, [pc, #48]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 8001408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e00b      	b.n	8001428 <HAL_RCC_OscConfig+0x28c>
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a08      	ldr	r2, [pc, #32]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 8001416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a05      	ldr	r2, [pc, #20]	; (8001438 <HAL_RCC_OscConfig+0x29c>)
 8001422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d01b      	beq.n	8001468 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001430:	f7ff fbd8 	bl	8000be4 <HAL_GetTick>
 8001434:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001436:	e010      	b.n	800145a <HAL_RCC_OscConfig+0x2be>
 8001438:	40021000 	.word	0x40021000
 800143c:	08004ef0 	.word	0x08004ef0
 8001440:	20000008 	.word	0x20000008
 8001444:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001448:	f7ff fbcc 	bl	8000be4 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b64      	cmp	r3, #100	; 0x64
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e300      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800145a:	4ba0      	ldr	r3, [pc, #640]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0x2ac>
 8001466:	e014      	b.n	8001492 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001468:	f7ff fbbc 	bl	8000be4 <HAL_GetTick>
 800146c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff fbb8 	bl	8000be4 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	; 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e2ec      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001482:	4b96      	ldr	r3, [pc, #600]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x2d4>
 800148e:	e000      	b.n	8001492 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d060      	beq.n	8001560 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800149e:	6a3b      	ldr	r3, [r7, #32]
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	d005      	beq.n	80014b0 <HAL_RCC_OscConfig+0x314>
 80014a4:	6a3b      	ldr	r3, [r7, #32]
 80014a6:	2b0c      	cmp	r3, #12
 80014a8:	d119      	bne.n	80014de <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d116      	bne.n	80014de <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014b0:	4b8a      	ldr	r3, [pc, #552]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <HAL_RCC_OscConfig+0x32c>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e2c9      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c8:	4b84      	ldr	r3, [pc, #528]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	061b      	lsls	r3, r3, #24
 80014d6:	4981      	ldr	r1, [pc, #516]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014dc:	e040      	b.n	8001560 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d023      	beq.n	800152e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e6:	4b7d      	ldr	r3, [pc, #500]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a7c      	ldr	r2, [pc, #496]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 80014ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f2:	f7ff fb77 	bl	8000be4 <HAL_GetTick>
 80014f6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fa:	f7ff fb73 	bl	8000be4 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e2a7      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800150c:	4b73      	ldr	r3, [pc, #460]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001518:	4b70      	ldr	r3, [pc, #448]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	061b      	lsls	r3, r3, #24
 8001526:	496d      	ldr	r1, [pc, #436]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
 800152c:	e018      	b.n	8001560 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800152e:	4b6b      	ldr	r3, [pc, #428]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a6a      	ldr	r2, [pc, #424]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 8001534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153a:	f7ff fb53 	bl	8000be4 <HAL_GetTick>
 800153e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001542:	f7ff fb4f 	bl	8000be4 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e283      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001554:	4b61      	ldr	r3, [pc, #388]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f0      	bne.n	8001542 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	2b00      	cmp	r3, #0
 800156a:	d07f      	beq.n	800166c <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d05f      	beq.n	8001634 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001574:	4b59      	ldr	r3, [pc, #356]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 8001576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800157a:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	699a      	ldr	r2, [r3, #24]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	429a      	cmp	r2, r3
 8001588:	d037      	beq.n	80015fa <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d006      	beq.n	80015a2 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e25c      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d01b      	beq.n	80015e4 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80015ac:	4b4b      	ldr	r3, [pc, #300]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 80015ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b2:	4a4a      	ldr	r2, [pc, #296]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 80015b4:	f023 0301 	bic.w	r3, r3, #1
 80015b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015bc:	f7ff fb12 	bl	8000be4 <HAL_GetTick>
 80015c0:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c4:	f7ff fb0e 	bl	8000be4 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b11      	cmp	r3, #17
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e242      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015d6:	4b41      	ldr	r3, [pc, #260]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 80015d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1ef      	bne.n	80015c4 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80015e4:	4b3d      	ldr	r3, [pc, #244]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 80015e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ea:	f023 0210 	bic.w	r2, r3, #16
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	493a      	ldr	r1, [pc, #232]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015fa:	4b38      	ldr	r3, [pc, #224]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 80015fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001600:	4a36      	ldr	r2, [pc, #216]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160a:	f7ff faeb 	bl	8000be4 <HAL_GetTick>
 800160e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001612:	f7ff fae7 	bl	8000be4 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b11      	cmp	r3, #17
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e21b      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001624:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 8001626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0ef      	beq.n	8001612 <HAL_RCC_OscConfig+0x476>
 8001632:	e01b      	b.n	800166c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001634:	4b29      	ldr	r3, [pc, #164]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 8001636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163a:	4a28      	ldr	r2, [pc, #160]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 800163c:	f023 0301 	bic.w	r3, r3, #1
 8001640:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001644:	f7ff face 	bl	8000be4 <HAL_GetTick>
 8001648:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164c:	f7ff faca 	bl	8000be4 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b11      	cmp	r3, #17
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e1fe      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800165e:	4b1f      	ldr	r3, [pc, #124]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 8001660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1ef      	bne.n	800164c <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 80c1 	beq.w	80017fc <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 8001682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10e      	bne.n	80016aa <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 800168e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001690:	4a12      	ldr	r2, [pc, #72]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 8001692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001696:	6593      	str	r3, [r2, #88]	; 0x58
 8001698:	4b10      	ldr	r3, [pc, #64]	; (80016dc <HAL_RCC_OscConfig+0x540>)
 800169a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016a4:	2301      	movs	r3, #1
 80016a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016aa:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <HAL_RCC_OscConfig+0x544>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d11c      	bne.n	80016f0 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_RCC_OscConfig+0x544>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a09      	ldr	r2, [pc, #36]	; (80016e0 <HAL_RCC_OscConfig+0x544>)
 80016bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c2:	f7ff fa8f 	bl	8000be4 <HAL_GetTick>
 80016c6:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c8:	e00c      	b.n	80016e4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ca:	f7ff fa8b 	bl	8000be4 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d905      	bls.n	80016e4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e1bf      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e4:	4bb1      	ldr	r3, [pc, #708]	; (80019ac <HAL_RCC_OscConfig+0x810>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0ec      	beq.n	80016ca <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d02c      	beq.n	8001756 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80016fc:	4bac      	ldr	r3, [pc, #688]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 80016fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170e:	49a8      	ldr	r1, [pc, #672]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 8001710:	4313      	orrs	r3, r2
 8001712:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	2b00      	cmp	r3, #0
 8001720:	d010      	beq.n	8001744 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001722:	4ba3      	ldr	r3, [pc, #652]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 8001724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001728:	4aa1      	ldr	r2, [pc, #644]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 800172a:	f043 0304 	orr.w	r3, r3, #4
 800172e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001732:	4b9f      	ldr	r3, [pc, #636]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 8001734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001738:	4a9d      	ldr	r2, [pc, #628]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001742:	e018      	b.n	8001776 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001744:	4b9a      	ldr	r3, [pc, #616]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 8001746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174a:	4a99      	ldr	r2, [pc, #612]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001754:	e00f      	b.n	8001776 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001756:	4b96      	ldr	r3, [pc, #600]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 8001758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800175c:	4a94      	ldr	r2, [pc, #592]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 800175e:	f023 0301 	bic.w	r3, r3, #1
 8001762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001766:	4b92      	ldr	r3, [pc, #584]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 8001768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800176c:	4a90      	ldr	r2, [pc, #576]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 800176e:	f023 0304 	bic.w	r3, r3, #4
 8001772:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d016      	beq.n	80017ac <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177e:	f7ff fa31 	bl	8000be4 <HAL_GetTick>
 8001782:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001784:	e00a      	b.n	800179c <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001786:	f7ff fa2d 	bl	8000be4 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	f241 3288 	movw	r2, #5000	; 0x1388
 8001794:	4293      	cmp	r3, r2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e15f      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800179c:	4b84      	ldr	r3, [pc, #528]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 800179e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0ed      	beq.n	8001786 <HAL_RCC_OscConfig+0x5ea>
 80017aa:	e01d      	b.n	80017e8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ac:	f7ff fa1a 	bl	8000be4 <HAL_GetTick>
 80017b0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b4:	f7ff fa16 	bl	8000be4 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e148      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ca:	4b79      	ldr	r3, [pc, #484]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 80017cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1ed      	bne.n	80017b4 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80017d8:	4b75      	ldr	r3, [pc, #468]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 80017da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017de:	4a74      	ldr	r2, [pc, #464]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 80017e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d105      	bne.n	80017fc <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f0:	4b6f      	ldr	r3, [pc, #444]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 80017f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f4:	4a6e      	ldr	r2, [pc, #440]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 80017f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0320 	and.w	r3, r3, #32
 8001804:	2b00      	cmp	r3, #0
 8001806:	d03c      	beq.n	8001882 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	2b00      	cmp	r3, #0
 800180e:	d01c      	beq.n	800184a <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001810:	4b67      	ldr	r3, [pc, #412]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 8001812:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001816:	4a66      	ldr	r2, [pc, #408]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001820:	f7ff f9e0 	bl	8000be4 <HAL_GetTick>
 8001824:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001828:	f7ff f9dc 	bl	8000be4 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e110      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800183a:	4b5d      	ldr	r3, [pc, #372]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 800183c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0ef      	beq.n	8001828 <HAL_RCC_OscConfig+0x68c>
 8001848:	e01b      	b.n	8001882 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800184a:	4b59      	ldr	r3, [pc, #356]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 800184c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001850:	4a57      	ldr	r2, [pc, #348]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 8001852:	f023 0301 	bic.w	r3, r3, #1
 8001856:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185a:	f7ff f9c3 	bl	8000be4 <HAL_GetTick>
 800185e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001862:	f7ff f9bf 	bl	8000be4 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e0f3      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001874:	4b4e      	ldr	r3, [pc, #312]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 8001876:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1ef      	bne.n	8001862 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 80e7 	beq.w	8001a5a <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	2b02      	cmp	r3, #2
 8001892:	f040 80b7 	bne.w	8001a04 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001896:	4b46      	ldr	r3, [pc, #280]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f003 0203 	and.w	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d124      	bne.n	80018f4 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b4:	3b01      	subs	r3, #1
 80018b6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d11b      	bne.n	80018f4 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d113      	bne.n	80018f4 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d6:	085b      	lsrs	r3, r3, #1
 80018d8:	3b01      	subs	r3, #1
 80018da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018dc:	429a      	cmp	r2, r3
 80018de:	d109      	bne.n	80018f4 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	085b      	lsrs	r3, r3, #1
 80018ec:	3b01      	subs	r3, #1
 80018ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d061      	beq.n	80019b8 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	2b0c      	cmp	r3, #12
 80018f8:	d056      	beq.n	80019a8 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018fa:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a2c      	ldr	r2, [pc, #176]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 8001900:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001904:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001906:	f7ff f96d 	bl	8000be4 <HAL_GetTick>
 800190a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190e:	f7ff f969 	bl	8000be4 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e09d      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001920:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f0      	bne.n	800190e <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800192c:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <HAL_RCC_OscConfig+0x818>)
 8001932:	4013      	ands	r3, r2
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800193c:	3a01      	subs	r2, #1
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	4311      	orrs	r1, r2
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001946:	0212      	lsls	r2, r2, #8
 8001948:	4311      	orrs	r1, r2
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800194e:	0852      	lsrs	r2, r2, #1
 8001950:	3a01      	subs	r2, #1
 8001952:	0552      	lsls	r2, r2, #21
 8001954:	4311      	orrs	r1, r2
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800195a:	0852      	lsrs	r2, r2, #1
 800195c:	3a01      	subs	r2, #1
 800195e:	0652      	lsls	r2, r2, #25
 8001960:	430a      	orrs	r2, r1
 8001962:	4913      	ldr	r1, [pc, #76]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 8001964:	4313      	orrs	r3, r2
 8001966:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a10      	ldr	r2, [pc, #64]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 800196e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001972:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001974:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 800197a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800197e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001980:	f7ff f930 	bl	8000be4 <HAL_GetTick>
 8001984:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001988:	f7ff f92c 	bl	8000be4 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e060      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_RCC_OscConfig+0x814>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019a6:	e058      	b.n	8001a5a <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e057      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
 80019ac:	40007000 	.word	0x40007000
 80019b0:	40021000 	.word	0x40021000
 80019b4:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b8:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <HAL_RCC_OscConfig+0x8c8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d14a      	bne.n	8001a5a <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019c4:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <HAL_RCC_OscConfig+0x8c8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a26      	ldr	r2, [pc, #152]	; (8001a64 <HAL_RCC_OscConfig+0x8c8>)
 80019ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019d0:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <HAL_RCC_OscConfig+0x8c8>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <HAL_RCC_OscConfig+0x8c8>)
 80019d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019dc:	f7ff f902 	bl	8000be4 <HAL_GetTick>
 80019e0:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e4:	f7ff f8fe 	bl	8000be4 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e032      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f6:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <HAL_RCC_OscConfig+0x8c8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x848>
 8001a02:	e02a      	b.n	8001a5a <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	2b0c      	cmp	r3, #12
 8001a08:	d025      	beq.n	8001a56 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0a:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <HAL_RCC_OscConfig+0x8c8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a15      	ldr	r2, [pc, #84]	; (8001a64 <HAL_RCC_OscConfig+0x8c8>)
 8001a10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a14:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <HAL_RCC_OscConfig+0x8c8>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <HAL_RCC_OscConfig+0x8c8>)
 8001a1c:	f023 0303 	bic.w	r3, r3, #3
 8001a20:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <HAL_RCC_OscConfig+0x8c8>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	4a0f      	ldr	r2, [pc, #60]	; (8001a64 <HAL_RCC_OscConfig+0x8c8>)
 8001a28:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a2c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2e:	f7ff f8d9 	bl	8000be4 <HAL_GetTick>
 8001a32:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a36:	f7ff f8d5 	bl	8000be4 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e009      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_RCC_OscConfig+0x8c8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1f0      	bne.n	8001a36 <HAL_RCC_OscConfig+0x89a>
 8001a54:	e001      	b.n	8001a5a <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3728      	adds	r7, #40	; 0x28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40021000 	.word	0x40021000

08001a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0c8      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a7c:	4b66      	ldr	r3, [pc, #408]	; (8001c18 <HAL_RCC_ClockConfig+0x1b0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d910      	bls.n	8001aac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	4b63      	ldr	r3, [pc, #396]	; (8001c18 <HAL_RCC_ClockConfig+0x1b0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 0207 	bic.w	r2, r3, #7
 8001a92:	4961      	ldr	r1, [pc, #388]	; (8001c18 <HAL_RCC_ClockConfig+0x1b0>)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9a:	4b5f      	ldr	r3, [pc, #380]	; (8001c18 <HAL_RCC_ClockConfig+0x1b0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0b0      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d04c      	beq.n	8001b52 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d107      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac0:	4b56      	ldr	r3, [pc, #344]	; (8001c1c <HAL_RCC_ClockConfig+0x1b4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d121      	bne.n	8001b10 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e09e      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d107      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ad8:	4b50      	ldr	r3, [pc, #320]	; (8001c1c <HAL_RCC_ClockConfig+0x1b4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d115      	bne.n	8001b10 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e092      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d107      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001af0:	4b4a      	ldr	r3, [pc, #296]	; (8001c1c <HAL_RCC_ClockConfig+0x1b4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d109      	bne.n	8001b10 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e086      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b00:	4b46      	ldr	r3, [pc, #280]	; (8001c1c <HAL_RCC_ClockConfig+0x1b4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e07e      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b10:	4b42      	ldr	r3, [pc, #264]	; (8001c1c <HAL_RCC_ClockConfig+0x1b4>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f023 0203 	bic.w	r2, r3, #3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	493f      	ldr	r1, [pc, #252]	; (8001c1c <HAL_RCC_ClockConfig+0x1b4>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b22:	f7ff f85f 	bl	8000be4 <HAL_GetTick>
 8001b26:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b28:	e00a      	b.n	8001b40 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b2a:	f7ff f85b 	bl	8000be4 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e066      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b40:	4b36      	ldr	r3, [pc, #216]	; (8001c1c <HAL_RCC_ClockConfig+0x1b4>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 020c 	and.w	r2, r3, #12
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d1eb      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d008      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b5e:	4b2f      	ldr	r3, [pc, #188]	; (8001c1c <HAL_RCC_ClockConfig+0x1b4>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	492c      	ldr	r1, [pc, #176]	; (8001c1c <HAL_RCC_ClockConfig+0x1b4>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b70:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <HAL_RCC_ClockConfig+0x1b0>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d210      	bcs.n	8001ba0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <HAL_RCC_ClockConfig+0x1b0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 0207 	bic.w	r2, r3, #7
 8001b86:	4924      	ldr	r1, [pc, #144]	; (8001c18 <HAL_RCC_ClockConfig+0x1b0>)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <HAL_RCC_ClockConfig+0x1b0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e036      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bac:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <HAL_RCC_ClockConfig+0x1b4>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4918      	ldr	r1, [pc, #96]	; (8001c1c <HAL_RCC_ClockConfig+0x1b4>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d009      	beq.n	8001bde <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bca:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <HAL_RCC_ClockConfig+0x1b4>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	4910      	ldr	r1, [pc, #64]	; (8001c1c <HAL_RCC_ClockConfig+0x1b4>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bde:	f000 f825 	bl	8001c2c <HAL_RCC_GetSysClockFreq>
 8001be2:	4602      	mov	r2, r0
 8001be4:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <HAL_RCC_ClockConfig+0x1b4>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	490c      	ldr	r1, [pc, #48]	; (8001c20 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf0:	5ccb      	ldrb	r3, [r1, r3]
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fe14 	bl	8000830 <HAL_InitTick>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c0c:	7afb      	ldrb	r3, [r7, #11]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40022000 	.word	0x40022000
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	08004ef0 	.word	0x08004ef0
 8001c24:	20000008 	.word	0x20000008
 8001c28:	2000000c 	.word	0x2000000c

08001c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	; 0x24
 8001c30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c3a:	4b3e      	ldr	r3, [pc, #248]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c44:	4b3b      	ldr	r3, [pc, #236]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d005      	beq.n	8001c60 <HAL_RCC_GetSysClockFreq+0x34>
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	2b0c      	cmp	r3, #12
 8001c58:	d121      	bne.n	8001c9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d11e      	bne.n	8001c9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c60:	4b34      	ldr	r3, [pc, #208]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d107      	bne.n	8001c7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c6c:	4b31      	ldr	r3, [pc, #196]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c72:	0a1b      	lsrs	r3, r3, #8
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	e005      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c88:	4a2b      	ldr	r2, [pc, #172]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10d      	bne.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c9c:	e00a      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d102      	bne.n	8001caa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ca4:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ca6:	61bb      	str	r3, [r7, #24]
 8001ca8:	e004      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cb0:	4b23      	ldr	r3, [pc, #140]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	2b0c      	cmp	r3, #12
 8001cb8:	d134      	bne.n	8001d24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cba:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d003      	beq.n	8001cd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d003      	beq.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xac>
 8001cd0:	e005      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x110>)
 8001cd4:	617b      	str	r3, [r7, #20]
      break;
 8001cd6:	e005      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cd8:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cda:	617b      	str	r3, [r7, #20]
      break;
 8001cdc:	e002      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	617b      	str	r3, [r7, #20]
      break;
 8001ce2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ce4:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	091b      	lsrs	r3, r3, #4
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	3301      	adds	r3, #1
 8001cf0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	0a1b      	lsrs	r3, r3, #8
 8001cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	fb02 f203 	mul.w	r2, r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	0e5b      	lsrs	r3, r3, #25
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	3301      	adds	r3, #1
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d24:	69bb      	ldr	r3, [r7, #24]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3724      	adds	r7, #36	; 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000
 8001d38:	08004f08 	.word	0x08004f08
 8001d3c:	00f42400 	.word	0x00f42400
 8001d40:	007a1200 	.word	0x007a1200

08001d44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000008 	.word	0x20000008

08001d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d60:	f7ff fff0 	bl	8001d44 <HAL_RCC_GetHCLKFreq>
 8001d64:	4602      	mov	r2, r0
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	0a1b      	lsrs	r3, r3, #8
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	4904      	ldr	r1, [pc, #16]	; (8001d84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d72:	5ccb      	ldrb	r3, [r1, r3]
 8001d74:	f003 031f 	and.w	r3, r3, #31
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40021000 	.word	0x40021000
 8001d84:	08004f00 	.word	0x08004f00

08001d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d8c:	f7ff ffda 	bl	8001d44 <HAL_RCC_GetHCLKFreq>
 8001d90:	4602      	mov	r2, r0
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	0adb      	lsrs	r3, r3, #11
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	4904      	ldr	r1, [pc, #16]	; (8001db0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d9e:	5ccb      	ldrb	r3, [r1, r3]
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40021000 	.word	0x40021000
 8001db0:	08004f00 	.word	0x08004f00

08001db4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	220f      	movs	r2, #15
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_RCC_GetClockConfig+0x5c>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 0203 	and.w	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <HAL_RCC_GetClockConfig+0x5c>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <HAL_RCC_GetClockConfig+0x5c>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_RCC_GetClockConfig+0x5c>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	08db      	lsrs	r3, r3, #3
 8001dee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001df6:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <HAL_RCC_GetClockConfig+0x60>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0207 	and.w	r2, r3, #7
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	601a      	str	r2, [r3, #0]
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40022000 	.word	0x40022000

08001e18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e24:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e30:	f7ff f950 	bl	80010d4 <HAL_PWREx_GetVoltageRange>
 8001e34:	6178      	str	r0, [r7, #20]
 8001e36:	e014      	b.n	8001e62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e38:	4b25      	ldr	r3, [pc, #148]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3c:	4a24      	ldr	r2, [pc, #144]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e42:	6593      	str	r3, [r2, #88]	; 0x58
 8001e44:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e50:	f7ff f940 	bl	80010d4 <HAL_PWREx_GetVoltageRange>
 8001e54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e56:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5a:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e68:	d10b      	bne.n	8001e82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b80      	cmp	r3, #128	; 0x80
 8001e6e:	d919      	bls.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2ba0      	cmp	r3, #160	; 0xa0
 8001e74:	d902      	bls.n	8001e7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e76:	2302      	movs	r3, #2
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	e013      	b.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	e010      	b.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b80      	cmp	r3, #128	; 0x80
 8001e86:	d902      	bls.n	8001e8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e88:	2303      	movs	r3, #3
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	e00a      	b.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b80      	cmp	r3, #128	; 0x80
 8001e92:	d102      	bne.n	8001e9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e94:	2302      	movs	r3, #2
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	e004      	b.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b70      	cmp	r3, #112	; 0x70
 8001e9e:	d101      	bne.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 0207 	bic.w	r2, r3, #7
 8001eac:	4909      	ldr	r1, [pc, #36]	; (8001ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001eb4:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d001      	beq.n	8001ec6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40022000 	.word	0x40022000

08001ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 809e 	beq.w	8002032 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001efa:	4b46      	ldr	r3, [pc, #280]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00d      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f10:	4b40      	ldr	r3, [pc, #256]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	4a3f      	ldr	r2, [pc, #252]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f1c:	4b3d      	ldr	r3, [pc, #244]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f2c:	4b3a      	ldr	r3, [pc, #232]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a39      	ldr	r2, [pc, #228]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f38:	f7fe fe54 	bl	8000be4 <HAL_GetTick>
 8001f3c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f3e:	e009      	b.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f40:	f7fe fe50 	bl	8000be4 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d902      	bls.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	74fb      	strb	r3, [r7, #19]
        break;
 8001f52:	e005      	b.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f54:	4b30      	ldr	r3, [pc, #192]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0ef      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8001f60:	7cfb      	ldrb	r3, [r7, #19]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d15a      	bne.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f66:	4b2b      	ldr	r3, [pc, #172]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f70:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d01e      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d019      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f82:	4b24      	ldr	r3, [pc, #144]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f8c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f8e:	4b21      	ldr	r3, [pc, #132]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f94:	4a1f      	ldr	r2, [pc, #124]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa4:	4a1b      	ldr	r2, [pc, #108]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001faa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fae:	4a19      	ldr	r2, [pc, #100]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d016      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7fe fe10 	bl	8000be4 <HAL_GetTick>
 8001fc4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc6:	e00b      	b.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc8:	f7fe fe0c 	bl	8000be4 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d902      	bls.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	74fb      	strb	r3, [r7, #19]
            break;
 8001fde:	e006      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0ec      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8001fee:	7cfb      	ldrb	r3, [r7, #19]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10b      	bne.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ff4:	4b07      	ldr	r3, [pc, #28]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4904      	ldr	r1, [pc, #16]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002004:	4313      	orrs	r3, r2
 8002006:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800200a:	e009      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800200c:	7cfb      	ldrb	r3, [r7, #19]
 800200e:	74bb      	strb	r3, [r7, #18]
 8002010:	e006      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800201c:	7cfb      	ldrb	r3, [r7, #19]
 800201e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002020:	7c7b      	ldrb	r3, [r7, #17]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d105      	bne.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002026:	4b6e      	ldr	r3, [pc, #440]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202a:	4a6d      	ldr	r2, [pc, #436]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800202c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002030:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00a      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800203e:	4b68      	ldr	r3, [pc, #416]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002044:	f023 0203 	bic.w	r2, r3, #3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	4964      	ldr	r1, [pc, #400]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00a      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002060:	4b5f      	ldr	r3, [pc, #380]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002066:	f023 020c 	bic.w	r2, r3, #12
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	495c      	ldr	r1, [pc, #368]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00a      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002082:	4b57      	ldr	r3, [pc, #348]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002088:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	4953      	ldr	r1, [pc, #332]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002092:	4313      	orrs	r3, r2
 8002094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0320 	and.w	r3, r3, #32
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00a      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020a4:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	494b      	ldr	r1, [pc, #300]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00a      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020c6:	4b46      	ldr	r3, [pc, #280]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	4942      	ldr	r1, [pc, #264]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00a      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	493a      	ldr	r1, [pc, #232]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00a      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800210a:	4b35      	ldr	r3, [pc, #212]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800210c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002110:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	4931      	ldr	r1, [pc, #196]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800211a:	4313      	orrs	r3, r2
 800211c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00a      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800212c:	4b2c      	ldr	r3, [pc, #176]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002132:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	4929      	ldr	r1, [pc, #164]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00a      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002154:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	4920      	ldr	r1, [pc, #128]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800215e:	4313      	orrs	r3, r2
 8002160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d015      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002170:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002176:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217e:	4918      	ldr	r1, [pc, #96]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002180:	4313      	orrs	r3, r2
 8002182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800218e:	d105      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002190:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4a12      	ldr	r2, [pc, #72]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800219a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d015      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021a8:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	490a      	ldr	r1, [pc, #40]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021c6:	d105      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000

080021e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e049      	b.n	800228a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d106      	bne.n	8002210 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7fe fbfc 	bl	8000a08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3304      	adds	r3, #4
 8002220:	4619      	mov	r1, r3
 8002222:	4610      	mov	r0, r2
 8002224:	f000 f9d2 	bl	80025cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d001      	beq.n	80022ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e03b      	b.n	8002324 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a19      	ldr	r2, [pc, #100]	; (8002330 <HAL_TIM_Base_Start_IT+0x9c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d009      	beq.n	80022e2 <HAL_TIM_Base_Start_IT+0x4e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d6:	d004      	beq.n	80022e2 <HAL_TIM_Base_Start_IT+0x4e>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a15      	ldr	r2, [pc, #84]	; (8002334 <HAL_TIM_Base_Start_IT+0xa0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d115      	bne.n	800230e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	4b13      	ldr	r3, [pc, #76]	; (8002338 <HAL_TIM_Base_Start_IT+0xa4>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2b06      	cmp	r3, #6
 80022f2:	d015      	beq.n	8002320 <HAL_TIM_Base_Start_IT+0x8c>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fa:	d011      	beq.n	8002320 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800230c:	e008      	b.n	8002320 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0201 	orr.w	r2, r2, #1
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	e000      	b.n	8002322 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002320:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	40012c00 	.word	0x40012c00
 8002334:	40014000 	.word	0x40014000
 8002338:	00010007 	.word	0x00010007

0800233c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b02      	cmp	r3, #2
 8002350:	d122      	bne.n	8002398 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b02      	cmp	r3, #2
 800235e:	d11b      	bne.n	8002398 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0202 	mvn.w	r2, #2
 8002368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f905 	bl	800258e <HAL_TIM_IC_CaptureCallback>
 8002384:	e005      	b.n	8002392 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f8f7 	bl	800257a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f908 	bl	80025a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d122      	bne.n	80023ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d11b      	bne.n	80023ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f06f 0204 	mvn.w	r2, #4
 80023bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2202      	movs	r2, #2
 80023c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f8db 	bl	800258e <HAL_TIM_IC_CaptureCallback>
 80023d8:	e005      	b.n	80023e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f8cd 	bl	800257a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f8de 	bl	80025a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d122      	bne.n	8002440 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b08      	cmp	r3, #8
 8002406:	d11b      	bne.n	8002440 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f06f 0208 	mvn.w	r2, #8
 8002410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2204      	movs	r2, #4
 8002416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f8b1 	bl	800258e <HAL_TIM_IC_CaptureCallback>
 800242c:	e005      	b.n	800243a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f8a3 	bl	800257a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f8b4 	bl	80025a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	2b10      	cmp	r3, #16
 800244c:	d122      	bne.n	8002494 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	2b10      	cmp	r3, #16
 800245a:	d11b      	bne.n	8002494 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f06f 0210 	mvn.w	r2, #16
 8002464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2208      	movs	r2, #8
 800246a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f887 	bl	800258e <HAL_TIM_IC_CaptureCallback>
 8002480:	e005      	b.n	800248e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f879 	bl	800257a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f88a 	bl	80025a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d10e      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d107      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 0201 	mvn.w	r2, #1
 80024b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7fe f96e 	bl	800079c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ca:	2b80      	cmp	r3, #128	; 0x80
 80024cc:	d10e      	bne.n	80024ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d8:	2b80      	cmp	r3, #128	; 0x80
 80024da:	d107      	bne.n	80024ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f944 	bl	8002774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024fa:	d10e      	bne.n	800251a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002506:	2b80      	cmp	r3, #128	; 0x80
 8002508:	d107      	bne.n	800251a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f937 	bl	8002788 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002524:	2b40      	cmp	r3, #64	; 0x40
 8002526:	d10e      	bne.n	8002546 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002532:	2b40      	cmp	r3, #64	; 0x40
 8002534:	d107      	bne.n	8002546 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800253e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f838 	bl	80025b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b20      	cmp	r3, #32
 8002552:	d10e      	bne.n	8002572 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f003 0320 	and.w	r3, r3, #32
 800255e:	2b20      	cmp	r3, #32
 8002560:	d107      	bne.n	8002572 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f06f 0220 	mvn.w	r2, #32
 800256a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f8f7 	bl	8002760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a2a      	ldr	r2, [pc, #168]	; (8002688 <TIM_Base_SetConfig+0xbc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d003      	beq.n	80025ec <TIM_Base_SetConfig+0x20>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ea:	d108      	bne.n	80025fe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a21      	ldr	r2, [pc, #132]	; (8002688 <TIM_Base_SetConfig+0xbc>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d00b      	beq.n	800261e <TIM_Base_SetConfig+0x52>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800260c:	d007      	beq.n	800261e <TIM_Base_SetConfig+0x52>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a1e      	ldr	r2, [pc, #120]	; (800268c <TIM_Base_SetConfig+0xc0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d003      	beq.n	800261e <TIM_Base_SetConfig+0x52>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a1d      	ldr	r2, [pc, #116]	; (8002690 <TIM_Base_SetConfig+0xc4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d108      	bne.n	8002630 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4313      	orrs	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	4313      	orrs	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a0c      	ldr	r2, [pc, #48]	; (8002688 <TIM_Base_SetConfig+0xbc>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d007      	beq.n	800266c <TIM_Base_SetConfig+0xa0>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a0b      	ldr	r2, [pc, #44]	; (800268c <TIM_Base_SetConfig+0xc0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d003      	beq.n	800266c <TIM_Base_SetConfig+0xa0>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <TIM_Base_SetConfig+0xc4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d103      	bne.n	8002674 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	615a      	str	r2, [r3, #20]
}
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40012c00 	.word	0x40012c00
 800268c:	40014000 	.word	0x40014000
 8002690:	40014400 	.word	0x40014400

08002694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e04f      	b.n	800274c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a21      	ldr	r2, [pc, #132]	; (8002758 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d108      	bne.n	80026e8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80026dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a14      	ldr	r2, [pc, #80]	; (8002758 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d009      	beq.n	8002720 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002714:	d004      	beq.n	8002720 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a10      	ldr	r2, [pc, #64]	; (800275c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d10c      	bne.n	800273a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002726:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	4313      	orrs	r3, r2
 8002730:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	40012c00 	.word	0x40012c00
 800275c:	40014000 	.word	0x40014000

08002760 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e040      	b.n	8002830 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fe f978 	bl	8000ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2224      	movs	r2, #36	; 0x24
 80027c8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0201 	bic.w	r2, r2, #1
 80027d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f82c 	bl	8002838 <UART_SetConfig>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e022      	b.n	8002830 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fa54 	bl	8002ca0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002806:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002816:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 fadb 	bl	8002de4 <UART_CheckIdleState>
 800282e:	4603      	mov	r3, r0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002838:	b5b0      	push	{r4, r5, r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	4313      	orrs	r3, r2
 800285a:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	4baa      	ldr	r3, [pc, #680]	; (8002b0c <UART_SetConfig+0x2d4>)
 8002864:	4013      	ands	r3, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	69f9      	ldr	r1, [r7, #28]
 800286c:	430b      	orrs	r3, r1
 800286e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a9f      	ldr	r2, [pc, #636]	; (8002b10 <UART_SetConfig+0x2d8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d004      	beq.n	80028a0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	69fa      	ldr	r2, [r7, #28]
 800289c:	4313      	orrs	r3, r2
 800289e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a96      	ldr	r2, [pc, #600]	; (8002b14 <UART_SetConfig+0x2dc>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d121      	bne.n	8002902 <UART_SetConfig+0xca>
 80028be:	4b96      	ldr	r3, [pc, #600]	; (8002b18 <UART_SetConfig+0x2e0>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d817      	bhi.n	80028fc <UART_SetConfig+0xc4>
 80028cc:	a201      	add	r2, pc, #4	; (adr r2, 80028d4 <UART_SetConfig+0x9c>)
 80028ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d2:	bf00      	nop
 80028d4:	080028e5 	.word	0x080028e5
 80028d8:	080028f1 	.word	0x080028f1
 80028dc:	080028eb 	.word	0x080028eb
 80028e0:	080028f7 	.word	0x080028f7
 80028e4:	2301      	movs	r3, #1
 80028e6:	76fb      	strb	r3, [r7, #27]
 80028e8:	e096      	b.n	8002a18 <UART_SetConfig+0x1e0>
 80028ea:	2302      	movs	r3, #2
 80028ec:	76fb      	strb	r3, [r7, #27]
 80028ee:	e093      	b.n	8002a18 <UART_SetConfig+0x1e0>
 80028f0:	2304      	movs	r3, #4
 80028f2:	76fb      	strb	r3, [r7, #27]
 80028f4:	e090      	b.n	8002a18 <UART_SetConfig+0x1e0>
 80028f6:	2308      	movs	r3, #8
 80028f8:	76fb      	strb	r3, [r7, #27]
 80028fa:	e08d      	b.n	8002a18 <UART_SetConfig+0x1e0>
 80028fc:	2310      	movs	r3, #16
 80028fe:	76fb      	strb	r3, [r7, #27]
 8002900:	e08a      	b.n	8002a18 <UART_SetConfig+0x1e0>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a85      	ldr	r2, [pc, #532]	; (8002b1c <UART_SetConfig+0x2e4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d132      	bne.n	8002972 <UART_SetConfig+0x13a>
 800290c:	4b82      	ldr	r3, [pc, #520]	; (8002b18 <UART_SetConfig+0x2e0>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b0c      	cmp	r3, #12
 8002918:	d828      	bhi.n	800296c <UART_SetConfig+0x134>
 800291a:	a201      	add	r2, pc, #4	; (adr r2, 8002920 <UART_SetConfig+0xe8>)
 800291c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002920:	08002955 	.word	0x08002955
 8002924:	0800296d 	.word	0x0800296d
 8002928:	0800296d 	.word	0x0800296d
 800292c:	0800296d 	.word	0x0800296d
 8002930:	08002961 	.word	0x08002961
 8002934:	0800296d 	.word	0x0800296d
 8002938:	0800296d 	.word	0x0800296d
 800293c:	0800296d 	.word	0x0800296d
 8002940:	0800295b 	.word	0x0800295b
 8002944:	0800296d 	.word	0x0800296d
 8002948:	0800296d 	.word	0x0800296d
 800294c:	0800296d 	.word	0x0800296d
 8002950:	08002967 	.word	0x08002967
 8002954:	2300      	movs	r3, #0
 8002956:	76fb      	strb	r3, [r7, #27]
 8002958:	e05e      	b.n	8002a18 <UART_SetConfig+0x1e0>
 800295a:	2302      	movs	r3, #2
 800295c:	76fb      	strb	r3, [r7, #27]
 800295e:	e05b      	b.n	8002a18 <UART_SetConfig+0x1e0>
 8002960:	2304      	movs	r3, #4
 8002962:	76fb      	strb	r3, [r7, #27]
 8002964:	e058      	b.n	8002a18 <UART_SetConfig+0x1e0>
 8002966:	2308      	movs	r3, #8
 8002968:	76fb      	strb	r3, [r7, #27]
 800296a:	e055      	b.n	8002a18 <UART_SetConfig+0x1e0>
 800296c:	2310      	movs	r3, #16
 800296e:	76fb      	strb	r3, [r7, #27]
 8002970:	e052      	b.n	8002a18 <UART_SetConfig+0x1e0>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a6a      	ldr	r2, [pc, #424]	; (8002b20 <UART_SetConfig+0x2e8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d120      	bne.n	80029be <UART_SetConfig+0x186>
 800297c:	4b66      	ldr	r3, [pc, #408]	; (8002b18 <UART_SetConfig+0x2e0>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002982:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002986:	2b30      	cmp	r3, #48	; 0x30
 8002988:	d013      	beq.n	80029b2 <UART_SetConfig+0x17a>
 800298a:	2b30      	cmp	r3, #48	; 0x30
 800298c:	d814      	bhi.n	80029b8 <UART_SetConfig+0x180>
 800298e:	2b20      	cmp	r3, #32
 8002990:	d009      	beq.n	80029a6 <UART_SetConfig+0x16e>
 8002992:	2b20      	cmp	r3, #32
 8002994:	d810      	bhi.n	80029b8 <UART_SetConfig+0x180>
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <UART_SetConfig+0x168>
 800299a:	2b10      	cmp	r3, #16
 800299c:	d006      	beq.n	80029ac <UART_SetConfig+0x174>
 800299e:	e00b      	b.n	80029b8 <UART_SetConfig+0x180>
 80029a0:	2300      	movs	r3, #0
 80029a2:	76fb      	strb	r3, [r7, #27]
 80029a4:	e038      	b.n	8002a18 <UART_SetConfig+0x1e0>
 80029a6:	2302      	movs	r3, #2
 80029a8:	76fb      	strb	r3, [r7, #27]
 80029aa:	e035      	b.n	8002a18 <UART_SetConfig+0x1e0>
 80029ac:	2304      	movs	r3, #4
 80029ae:	76fb      	strb	r3, [r7, #27]
 80029b0:	e032      	b.n	8002a18 <UART_SetConfig+0x1e0>
 80029b2:	2308      	movs	r3, #8
 80029b4:	76fb      	strb	r3, [r7, #27]
 80029b6:	e02f      	b.n	8002a18 <UART_SetConfig+0x1e0>
 80029b8:	2310      	movs	r3, #16
 80029ba:	76fb      	strb	r3, [r7, #27]
 80029bc:	e02c      	b.n	8002a18 <UART_SetConfig+0x1e0>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a53      	ldr	r2, [pc, #332]	; (8002b10 <UART_SetConfig+0x2d8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d125      	bne.n	8002a14 <UART_SetConfig+0x1dc>
 80029c8:	4b53      	ldr	r3, [pc, #332]	; (8002b18 <UART_SetConfig+0x2e0>)
 80029ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029d6:	d017      	beq.n	8002a08 <UART_SetConfig+0x1d0>
 80029d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029dc:	d817      	bhi.n	8002a0e <UART_SetConfig+0x1d6>
 80029de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029e2:	d00b      	beq.n	80029fc <UART_SetConfig+0x1c4>
 80029e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029e8:	d811      	bhi.n	8002a0e <UART_SetConfig+0x1d6>
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <UART_SetConfig+0x1be>
 80029ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f2:	d006      	beq.n	8002a02 <UART_SetConfig+0x1ca>
 80029f4:	e00b      	b.n	8002a0e <UART_SetConfig+0x1d6>
 80029f6:	2300      	movs	r3, #0
 80029f8:	76fb      	strb	r3, [r7, #27]
 80029fa:	e00d      	b.n	8002a18 <UART_SetConfig+0x1e0>
 80029fc:	2302      	movs	r3, #2
 80029fe:	76fb      	strb	r3, [r7, #27]
 8002a00:	e00a      	b.n	8002a18 <UART_SetConfig+0x1e0>
 8002a02:	2304      	movs	r3, #4
 8002a04:	76fb      	strb	r3, [r7, #27]
 8002a06:	e007      	b.n	8002a18 <UART_SetConfig+0x1e0>
 8002a08:	2308      	movs	r3, #8
 8002a0a:	76fb      	strb	r3, [r7, #27]
 8002a0c:	e004      	b.n	8002a18 <UART_SetConfig+0x1e0>
 8002a0e:	2310      	movs	r3, #16
 8002a10:	76fb      	strb	r3, [r7, #27]
 8002a12:	e001      	b.n	8002a18 <UART_SetConfig+0x1e0>
 8002a14:	2310      	movs	r3, #16
 8002a16:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a3c      	ldr	r2, [pc, #240]	; (8002b10 <UART_SetConfig+0x2d8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	f040 8082 	bne.w	8002b28 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a24:	7efb      	ldrb	r3, [r7, #27]
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d823      	bhi.n	8002a72 <UART_SetConfig+0x23a>
 8002a2a:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <UART_SetConfig+0x1f8>)
 8002a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a30:	08002a55 	.word	0x08002a55
 8002a34:	08002a73 	.word	0x08002a73
 8002a38:	08002a5d 	.word	0x08002a5d
 8002a3c:	08002a73 	.word	0x08002a73
 8002a40:	08002a63 	.word	0x08002a63
 8002a44:	08002a73 	.word	0x08002a73
 8002a48:	08002a73 	.word	0x08002a73
 8002a4c:	08002a73 	.word	0x08002a73
 8002a50:	08002a6b 	.word	0x08002a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a54:	f7ff f982 	bl	8001d5c <HAL_RCC_GetPCLK1Freq>
 8002a58:	6178      	str	r0, [r7, #20]
        break;
 8002a5a:	e00f      	b.n	8002a7c <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a5c:	4b31      	ldr	r3, [pc, #196]	; (8002b24 <UART_SetConfig+0x2ec>)
 8002a5e:	617b      	str	r3, [r7, #20]
        break;
 8002a60:	e00c      	b.n	8002a7c <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a62:	f7ff f8e3 	bl	8001c2c <HAL_RCC_GetSysClockFreq>
 8002a66:	6178      	str	r0, [r7, #20]
        break;
 8002a68:	e008      	b.n	8002a7c <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a6e:	617b      	str	r3, [r7, #20]
        break;
 8002a70:	e004      	b.n	8002a7c <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	76bb      	strb	r3, [r7, #26]
        break;
 8002a7a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 8100 	beq.w	8002c84 <UART_SetConfig+0x44c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	4413      	add	r3, r2
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d305      	bcc.n	8002aa0 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d902      	bls.n	8002aa6 <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	76bb      	strb	r3, [r7, #26]
 8002aa4:	e0ee      	b.n	8002c84 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f04f 0100 	mov.w	r1, #0
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	020b      	lsls	r3, r1, #8
 8002ab8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002abc:	0202      	lsls	r2, r0, #8
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	6849      	ldr	r1, [r1, #4]
 8002ac2:	0849      	lsrs	r1, r1, #1
 8002ac4:	4608      	mov	r0, r1
 8002ac6:	f04f 0100 	mov.w	r1, #0
 8002aca:	1814      	adds	r4, r2, r0
 8002acc:	eb43 0501 	adc.w	r5, r3, r1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	4620      	mov	r0, r4
 8002adc:	4629      	mov	r1, r5
 8002ade:	f7fd fb77 	bl	80001d0 <__aeabi_uldivmod>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002af0:	d308      	bcc.n	8002b04 <UART_SetConfig+0x2cc>
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002af8:	d204      	bcs.n	8002b04 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	e0bf      	b.n	8002c84 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	76bb      	strb	r3, [r7, #26]
 8002b08:	e0bc      	b.n	8002c84 <UART_SetConfig+0x44c>
 8002b0a:	bf00      	nop
 8002b0c:	efff69f3 	.word	0xefff69f3
 8002b10:	40008000 	.word	0x40008000
 8002b14:	40013800 	.word	0x40013800
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40004400 	.word	0x40004400
 8002b20:	40004800 	.word	0x40004800
 8002b24:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b30:	d15c      	bne.n	8002bec <UART_SetConfig+0x3b4>
  {
    switch (clocksource)
 8002b32:	7efb      	ldrb	r3, [r7, #27]
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d828      	bhi.n	8002b8a <UART_SetConfig+0x352>
 8002b38:	a201      	add	r2, pc, #4	; (adr r2, 8002b40 <UART_SetConfig+0x308>)
 8002b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3e:	bf00      	nop
 8002b40:	08002b65 	.word	0x08002b65
 8002b44:	08002b6d 	.word	0x08002b6d
 8002b48:	08002b75 	.word	0x08002b75
 8002b4c:	08002b8b 	.word	0x08002b8b
 8002b50:	08002b7b 	.word	0x08002b7b
 8002b54:	08002b8b 	.word	0x08002b8b
 8002b58:	08002b8b 	.word	0x08002b8b
 8002b5c:	08002b8b 	.word	0x08002b8b
 8002b60:	08002b83 	.word	0x08002b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b64:	f7ff f8fa 	bl	8001d5c <HAL_RCC_GetPCLK1Freq>
 8002b68:	6178      	str	r0, [r7, #20]
        break;
 8002b6a:	e013      	b.n	8002b94 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b6c:	f7ff f90c 	bl	8001d88 <HAL_RCC_GetPCLK2Freq>
 8002b70:	6178      	str	r0, [r7, #20]
        break;
 8002b72:	e00f      	b.n	8002b94 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b74:	4b49      	ldr	r3, [pc, #292]	; (8002c9c <UART_SetConfig+0x464>)
 8002b76:	617b      	str	r3, [r7, #20]
        break;
 8002b78:	e00c      	b.n	8002b94 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b7a:	f7ff f857 	bl	8001c2c <HAL_RCC_GetSysClockFreq>
 8002b7e:	6178      	str	r0, [r7, #20]
        break;
 8002b80:	e008      	b.n	8002b94 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b86:	617b      	str	r3, [r7, #20]
        break;
 8002b88:	e004      	b.n	8002b94 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	76bb      	strb	r3, [r7, #26]
        break;
 8002b92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d074      	beq.n	8002c84 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	005a      	lsls	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	085b      	lsrs	r3, r3, #1
 8002ba4:	441a      	add	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2b0f      	cmp	r3, #15
 8002bb6:	d916      	bls.n	8002be6 <UART_SetConfig+0x3ae>
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bbe:	d212      	bcs.n	8002be6 <UART_SetConfig+0x3ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	f023 030f 	bic.w	r3, r3, #15
 8002bc8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	085b      	lsrs	r3, r3, #1
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	89fb      	ldrh	r3, [r7, #14]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	89fa      	ldrh	r2, [r7, #14]
 8002be2:	60da      	str	r2, [r3, #12]
 8002be4:	e04e      	b.n	8002c84 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	76bb      	strb	r3, [r7, #26]
 8002bea:	e04b      	b.n	8002c84 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bec:	7efb      	ldrb	r3, [r7, #27]
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d827      	bhi.n	8002c42 <UART_SetConfig+0x40a>
 8002bf2:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <UART_SetConfig+0x3c0>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002c1d 	.word	0x08002c1d
 8002bfc:	08002c25 	.word	0x08002c25
 8002c00:	08002c2d 	.word	0x08002c2d
 8002c04:	08002c43 	.word	0x08002c43
 8002c08:	08002c33 	.word	0x08002c33
 8002c0c:	08002c43 	.word	0x08002c43
 8002c10:	08002c43 	.word	0x08002c43
 8002c14:	08002c43 	.word	0x08002c43
 8002c18:	08002c3b 	.word	0x08002c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c1c:	f7ff f89e 	bl	8001d5c <HAL_RCC_GetPCLK1Freq>
 8002c20:	6178      	str	r0, [r7, #20]
        break;
 8002c22:	e013      	b.n	8002c4c <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c24:	f7ff f8b0 	bl	8001d88 <HAL_RCC_GetPCLK2Freq>
 8002c28:	6178      	str	r0, [r7, #20]
        break;
 8002c2a:	e00f      	b.n	8002c4c <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c2c:	4b1b      	ldr	r3, [pc, #108]	; (8002c9c <UART_SetConfig+0x464>)
 8002c2e:	617b      	str	r3, [r7, #20]
        break;
 8002c30:	e00c      	b.n	8002c4c <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c32:	f7fe fffb 	bl	8001c2c <HAL_RCC_GetSysClockFreq>
 8002c36:	6178      	str	r0, [r7, #20]
        break;
 8002c38:	e008      	b.n	8002c4c <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c3e:	617b      	str	r3, [r7, #20]
        break;
 8002c40:	e004      	b.n	8002c4c <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	76bb      	strb	r3, [r7, #26]
        break;
 8002c4a:	bf00      	nop
    }

    if (pclk != 0U)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d018      	beq.n	8002c84 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	085a      	lsrs	r2, r3, #1
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	441a      	add	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	2b0f      	cmp	r3, #15
 8002c6c:	d908      	bls.n	8002c80 <UART_SetConfig+0x448>
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c74:	d204      	bcs.n	8002c80 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = usartdiv;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	e001      	b.n	8002c84 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002c90:	7ebb      	ldrb	r3, [r7, #26]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3720      	adds	r7, #32
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bdb0      	pop	{r4, r5, r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	00f42400 	.word	0x00f42400

08002ca0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00a      	beq.n	8002cca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00a      	beq.n	8002d52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00a      	beq.n	8002d74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01a      	beq.n	8002db6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d9e:	d10a      	bne.n	8002db6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	605a      	str	r2, [r3, #4]
  }
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002df2:	f7fd fef7 	bl	8000be4 <HAL_GetTick>
 8002df6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d10e      	bne.n	8002e24 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f82a 	bl	8002e6e <UART_WaitOnFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e020      	b.n	8002e66 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d10e      	bne.n	8002e50 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f814 	bl	8002e6e <UART_WaitOnFlagUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e00a      	b.n	8002e66 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2220      	movs	r2, #32
 8002e54:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	603b      	str	r3, [r7, #0]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e7e:	e05d      	b.n	8002f3c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e86:	d059      	beq.n	8002f3c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e88:	f7fd feac 	bl	8000be4 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d302      	bcc.n	8002e9e <UART_WaitOnFlagUntilTimeout+0x30>
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d11b      	bne.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002eac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0201 	bic.w	r2, r2, #1
 8002ebc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e042      	b.n	8002f5c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d02b      	beq.n	8002f3c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ef2:	d123      	bne.n	8002f3c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002efc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f0c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0201 	bic.w	r2, r2, #1
 8002f1c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e00f      	b.n	8002f5c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	69da      	ldr	r2, [r3, #28]
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	4013      	ands	r3, r2
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	bf0c      	ite	eq
 8002f4c:	2301      	moveq	r3, #1
 8002f4e:	2300      	movne	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	461a      	mov	r2, r3
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d092      	beq.n	8002e80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f76:	2b84      	cmp	r3, #132	; 0x84
 8002f78:	d005      	beq.n	8002f86 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002f7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4413      	add	r3, r2
 8002f82:	3303      	adds	r3, #3
 8002f84:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002f86:	68fb      	ldr	r3, [r7, #12]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002f98:	f000 fe18 	bl	8003bcc <vTaskStartScheduler>
  
  return osOK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fa4:	b089      	sub	sp, #36	; 0x24
 8002fa6:	af04      	add	r7, sp, #16
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d020      	beq.n	8002ff6 <osThreadCreate+0x54>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01c      	beq.n	8002ff6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685c      	ldr	r4, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681d      	ldr	r5, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691e      	ldr	r6, [r3, #16]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff ffc8 	bl	8002f64 <makeFreeRtosPriority>
 8002fd4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fde:	9202      	str	r2, [sp, #8]
 8002fe0:	9301      	str	r3, [sp, #4]
 8002fe2:	9100      	str	r1, [sp, #0]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	4632      	mov	r2, r6
 8002fe8:	4629      	mov	r1, r5
 8002fea:	4620      	mov	r0, r4
 8002fec:	f000 fc26 	bl	800383c <xTaskCreateStatic>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	e01c      	b.n	8003030 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685c      	ldr	r4, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003002:	b29e      	uxth	r6, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff ffaa 	bl	8002f64 <makeFreeRtosPriority>
 8003010:	4602      	mov	r2, r0
 8003012:	f107 030c 	add.w	r3, r7, #12
 8003016:	9301      	str	r3, [sp, #4]
 8003018:	9200      	str	r2, [sp, #0]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	4632      	mov	r2, r6
 800301e:	4629      	mov	r1, r5
 8003020:	4620      	mov	r0, r4
 8003022:	f000 fc68 	bl	80038f6 <xTaskCreate>
 8003026:	4603      	mov	r3, r0
 8003028:	2b01      	cmp	r3, #1
 800302a:	d001      	beq.n	8003030 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800302c:	2300      	movs	r3, #0
 800302e:	e000      	b.n	8003032 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003030:	68fb      	ldr	r3, [r7, #12]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800303a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <osDelay+0x16>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	e000      	b.n	8003052 <osDelay+0x18>
 8003050:	2301      	movs	r3, #1
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fd86 	bl	8003b64 <vTaskDelay>
  
  return osOK;
 8003058:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f103 0208 	add.w	r2, r3, #8
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f04f 32ff 	mov.w	r2, #4294967295
 800307a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f103 0208 	add.w	r2, r3, #8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f103 0208 	add.w	r2, r3, #8
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	601a      	str	r2, [r3, #0]
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311a:	d103      	bne.n	8003124 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	e00c      	b.n	800313e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3308      	adds	r3, #8
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	e002      	b.n	8003132 <vListInsert+0x2e>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	429a      	cmp	r2, r3
 800313c:	d2f6      	bcs.n	800312c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	601a      	str	r2, [r3, #0]
}
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003176:	b480      	push	{r7}
 8003178:	b085      	sub	sp, #20
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6892      	ldr	r2, [r2, #8]
 800318c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6852      	ldr	r2, [r2, #4]
 8003196:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d103      	bne.n	80031aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	1e5a      	subs	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10a      	bne.n	80031f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e4:	f383 8811 	msr	BASEPRI, r3
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	f3bf 8f4f 	dsb	sy
 80031f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80031f2:	bf00      	nop
 80031f4:	e7fe      	b.n	80031f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80031f6:	f001 fb1d 	bl	8004834 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003202:	68f9      	ldr	r1, [r7, #12]
 8003204:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003206:	fb01 f303 	mul.w	r3, r1, r3
 800320a:	441a      	add	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003226:	3b01      	subs	r3, #1
 8003228:	68f9      	ldr	r1, [r7, #12]
 800322a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	441a      	add	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	22ff      	movs	r2, #255	; 0xff
 800323a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	22ff      	movs	r2, #255	; 0xff
 8003242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d114      	bne.n	8003276 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d01a      	beq.n	800328a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3310      	adds	r3, #16
 8003258:	4618      	mov	r0, r3
 800325a:	f000 fef9 	bl	8004050 <xTaskRemoveFromEventList>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d012      	beq.n	800328a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <xQueueGenericReset+0xcc>)
 8003266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	e009      	b.n	800328a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3310      	adds	r3, #16
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fef1 	bl	8003062 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3324      	adds	r3, #36	; 0x24
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff feec 	bl	8003062 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800328a:	f001 fb03 	bl	8004894 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800328e:	2301      	movs	r3, #1
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	e000ed04 	.word	0xe000ed04

0800329c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08a      	sub	sp, #40	; 0x28
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	4613      	mov	r3, r2
 80032a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80032b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b4:	f383 8811 	msr	BASEPRI, r3
 80032b8:	f3bf 8f6f 	isb	sy
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	613b      	str	r3, [r7, #16]
}
 80032c2:	bf00      	nop
 80032c4:	e7fe      	b.n	80032c4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d102      	bne.n	80032d2 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	61fb      	str	r3, [r7, #28]
 80032d0:	e004      	b.n	80032dc <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	fb02 f303 	mul.w	r3, r2, r3
 80032da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	3348      	adds	r3, #72	; 0x48
 80032e0:	4618      	mov	r0, r3
 80032e2:	f001 fbc9 	bl	8004a78 <pvPortMalloc>
 80032e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d011      	beq.n	8003312 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	3348      	adds	r3, #72	; 0x48
 80032f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003300:	79fa      	ldrb	r2, [r7, #7]
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	4613      	mov	r3, r2
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f805 	bl	800331c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003312:	69bb      	ldr	r3, [r7, #24]
	}
 8003314:	4618      	mov	r0, r3
 8003316:	3720      	adds	r7, #32
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
 8003328:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d103      	bne.n	8003338 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	e002      	b.n	800333e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800334a:	2101      	movs	r1, #1
 800334c:	69b8      	ldr	r0, [r7, #24]
 800334e:	f7ff ff3d 	bl	80031cc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003352:	bf00      	nop
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b08e      	sub	sp, #56	; 0x38
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10a      	bne.n	8003388 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003384:	bf00      	nop
 8003386:	e7fe      	b.n	8003386 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d103      	bne.n	8003396 <xQueueGenericSendFromISR+0x3c>
 800338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <xQueueGenericSendFromISR+0x40>
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <xQueueGenericSendFromISR+0x42>
 800339a:	2300      	movs	r3, #0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10a      	bne.n	80033b6 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80033a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	623b      	str	r3, [r7, #32]
}
 80033b2:	bf00      	nop
 80033b4:	e7fe      	b.n	80033b4 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d103      	bne.n	80033c4 <xQueueGenericSendFromISR+0x6a>
 80033bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <xQueueGenericSendFromISR+0x6e>
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <xQueueGenericSendFromISR+0x70>
 80033c8:	2300      	movs	r3, #0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10a      	bne.n	80033e4 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80033ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d2:	f383 8811 	msr	BASEPRI, r3
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	61fb      	str	r3, [r7, #28]
}
 80033e0:	bf00      	nop
 80033e2:	e7fe      	b.n	80033e2 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033e4:	f001 fb08 	bl	80049f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80033e8:	f3ef 8211 	mrs	r2, BASEPRI
 80033ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f0:	f383 8811 	msr	BASEPRI, r3
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	61ba      	str	r2, [r7, #24]
 80033fe:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003400:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003402:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340c:	429a      	cmp	r2, r3
 800340e:	d302      	bcc.n	8003416 <xQueueGenericSendFromISR+0xbc>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d12c      	bne.n	8003470 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003418:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800341c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	68b9      	ldr	r1, [r7, #8]
 8003424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003426:	f000 f911 	bl	800364c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800342a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800342e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003432:	d112      	bne.n	800345a <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	2b00      	cmp	r3, #0
 800343a:	d016      	beq.n	800346a <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800343c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343e:	3324      	adds	r3, #36	; 0x24
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fe05 	bl	8004050 <xTaskRemoveFromEventList>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00e      	beq.n	800346a <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00b      	beq.n	800346a <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	e007      	b.n	800346a <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800345a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800345e:	3301      	adds	r3, #1
 8003460:	b2db      	uxtb	r3, r3
 8003462:	b25a      	sxtb	r2, r3
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800346a:	2301      	movs	r3, #1
 800346c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800346e:	e001      	b.n	8003474 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003470:	2300      	movs	r3, #0
 8003472:	637b      	str	r3, [r7, #52]	; 0x34
 8003474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003476:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800347e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003482:	4618      	mov	r0, r3
 8003484:	3738      	adds	r7, #56	; 0x38
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08c      	sub	sp, #48	; 0x30
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003498:	2300      	movs	r3, #0
 800349a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10a      	bne.n	80034bc <xQueueReceive+0x30>
	__asm volatile
 80034a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034aa:	f383 8811 	msr	BASEPRI, r3
 80034ae:	f3bf 8f6f 	isb	sy
 80034b2:	f3bf 8f4f 	dsb	sy
 80034b6:	623b      	str	r3, [r7, #32]
}
 80034b8:	bf00      	nop
 80034ba:	e7fe      	b.n	80034ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d103      	bne.n	80034ca <xQueueReceive+0x3e>
 80034c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <xQueueReceive+0x42>
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <xQueueReceive+0x44>
 80034ce:	2300      	movs	r3, #0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10a      	bne.n	80034ea <xQueueReceive+0x5e>
	__asm volatile
 80034d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d8:	f383 8811 	msr	BASEPRI, r3
 80034dc:	f3bf 8f6f 	isb	sy
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	61fb      	str	r3, [r7, #28]
}
 80034e6:	bf00      	nop
 80034e8:	e7fe      	b.n	80034e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034ea:	f000 ff6d 	bl	80043c8 <xTaskGetSchedulerState>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d102      	bne.n	80034fa <xQueueReceive+0x6e>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <xQueueReceive+0x72>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <xQueueReceive+0x74>
 80034fe:	2300      	movs	r3, #0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10a      	bne.n	800351a <xQueueReceive+0x8e>
	__asm volatile
 8003504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003508:	f383 8811 	msr	BASEPRI, r3
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	61bb      	str	r3, [r7, #24]
}
 8003516:	bf00      	nop
 8003518:	e7fe      	b.n	8003518 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800351a:	f001 f98b 	bl	8004834 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800351e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003522:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	2b00      	cmp	r3, #0
 8003528:	d01f      	beq.n	800356a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800352e:	f000 f8f7 	bl	8003720 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	1e5a      	subs	r2, r3, #1
 8003536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003538:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800353a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00f      	beq.n	8003562 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	3310      	adds	r3, #16
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fd82 	bl	8004050 <xTaskRemoveFromEventList>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003552:	4b3d      	ldr	r3, [pc, #244]	; (8003648 <xQueueReceive+0x1bc>)
 8003554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003562:	f001 f997 	bl	8004894 <vPortExitCritical>
				return pdPASS;
 8003566:	2301      	movs	r3, #1
 8003568:	e069      	b.n	800363e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d103      	bne.n	8003578 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003570:	f001 f990 	bl	8004894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003574:	2300      	movs	r3, #0
 8003576:	e062      	b.n	800363e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800357e:	f107 0310 	add.w	r3, r7, #16
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fdc6 	bl	8004114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003588:	2301      	movs	r3, #1
 800358a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800358c:	f001 f982 	bl	8004894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003590:	f000 fb7c 	bl	8003c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003594:	f001 f94e 	bl	8004834 <vPortEnterCritical>
 8003598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800359e:	b25b      	sxtb	r3, r3
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a4:	d103      	bne.n	80035ae <xQueueReceive+0x122>
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035b4:	b25b      	sxtb	r3, r3
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ba:	d103      	bne.n	80035c4 <xQueueReceive+0x138>
 80035bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035c4:	f001 f966 	bl	8004894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035c8:	1d3a      	adds	r2, r7, #4
 80035ca:	f107 0310 	add.w	r3, r7, #16
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fdb5 	bl	8004140 <xTaskCheckForTimeOut>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d123      	bne.n	8003624 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035de:	f000 f917 	bl	8003810 <prvIsQueueEmpty>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d017      	beq.n	8003618 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ea:	3324      	adds	r3, #36	; 0x24
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	4611      	mov	r1, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 fd09 	bl	8004008 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035f8:	f000 f8b8 	bl	800376c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035fc:	f000 fb54 	bl	8003ca8 <xTaskResumeAll>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d189      	bne.n	800351a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003606:	4b10      	ldr	r3, [pc, #64]	; (8003648 <xQueueReceive+0x1bc>)
 8003608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	e780      	b.n	800351a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800361a:	f000 f8a7 	bl	800376c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800361e:	f000 fb43 	bl	8003ca8 <xTaskResumeAll>
 8003622:	e77a      	b.n	800351a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003626:	f000 f8a1 	bl	800376c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800362a:	f000 fb3d 	bl	8003ca8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800362e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003630:	f000 f8ee 	bl	8003810 <prvIsQueueEmpty>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	f43f af6f 	beq.w	800351a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800363c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800363e:	4618      	mov	r0, r3
 8003640:	3730      	adds	r7, #48	; 0x30
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	e000ed04 	.word	0xe000ed04

0800364c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003660:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10d      	bne.n	8003686 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d14d      	bne.n	800370e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fec4 	bl	8004404 <xTaskPriorityDisinherit>
 800367c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	e043      	b.n	800370e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d119      	bne.n	80036c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6858      	ldr	r0, [r3, #4]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	461a      	mov	r2, r3
 8003696:	68b9      	ldr	r1, [r7, #8]
 8003698:	f001 fbec 	bl	8004e74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	441a      	add	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d32b      	bcc.n	800370e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	605a      	str	r2, [r3, #4]
 80036be:	e026      	b.n	800370e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	68d8      	ldr	r0, [r3, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	461a      	mov	r2, r3
 80036ca:	68b9      	ldr	r1, [r7, #8]
 80036cc:	f001 fbd2 	bl	8004e74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	425b      	negs	r3, r3
 80036da:	441a      	add	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d207      	bcs.n	80036fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	425b      	negs	r3, r3
 80036f6:	441a      	add	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d105      	bne.n	800370e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	3b01      	subs	r3, #1
 800370c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003716:	697b      	ldr	r3, [r7, #20]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	d018      	beq.n	8003764 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	441a      	add	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	429a      	cmp	r2, r3
 800374a:	d303      	bcc.n	8003754 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68d9      	ldr	r1, [r3, #12]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	461a      	mov	r2, r3
 800375e:	6838      	ldr	r0, [r7, #0]
 8003760:	f001 fb88 	bl	8004e74 <memcpy>
	}
}
 8003764:	bf00      	nop
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003774:	f001 f85e 	bl	8004834 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800377e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003780:	e011      	b.n	80037a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	2b00      	cmp	r3, #0
 8003788:	d012      	beq.n	80037b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3324      	adds	r3, #36	; 0x24
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fc5e 	bl	8004050 <xTaskRemoveFromEventList>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800379a:	f000 fd33 	bl	8004204 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	dce9      	bgt.n	8003782 <prvUnlockQueue+0x16>
 80037ae:	e000      	b.n	80037b2 <prvUnlockQueue+0x46>
					break;
 80037b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	22ff      	movs	r2, #255	; 0xff
 80037b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80037ba:	f001 f86b 	bl	8004894 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037be:	f001 f839 	bl	8004834 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037ca:	e011      	b.n	80037f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d012      	beq.n	80037fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3310      	adds	r3, #16
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fc39 	bl	8004050 <xTaskRemoveFromEventList>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037e4:	f000 fd0e 	bl	8004204 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037e8:	7bbb      	ldrb	r3, [r7, #14]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	dce9      	bgt.n	80037cc <prvUnlockQueue+0x60>
 80037f8:	e000      	b.n	80037fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	22ff      	movs	r2, #255	; 0xff
 8003800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003804:	f001 f846 	bl	8004894 <vPortExitCritical>
}
 8003808:	bf00      	nop
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003818:	f001 f80c 	bl	8004834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	2b00      	cmp	r3, #0
 8003822:	d102      	bne.n	800382a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003824:	2301      	movs	r3, #1
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	e001      	b.n	800382e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800382e:	f001 f831 	bl	8004894 <vPortExitCritical>

	return xReturn;
 8003832:	68fb      	ldr	r3, [r7, #12]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08e      	sub	sp, #56	; 0x38
 8003840:	af04      	add	r7, sp, #16
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800384a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10a      	bne.n	8003866 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	623b      	str	r3, [r7, #32]
}
 8003862:	bf00      	nop
 8003864:	e7fe      	b.n	8003864 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10a      	bne.n	8003882 <xTaskCreateStatic+0x46>
	__asm volatile
 800386c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003870:	f383 8811 	msr	BASEPRI, r3
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	61fb      	str	r3, [r7, #28]
}
 800387e:	bf00      	nop
 8003880:	e7fe      	b.n	8003880 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003882:	2354      	movs	r3, #84	; 0x54
 8003884:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	2b54      	cmp	r3, #84	; 0x54
 800388a:	d00a      	beq.n	80038a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800388c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003890:	f383 8811 	msr	BASEPRI, r3
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	61bb      	str	r3, [r7, #24]
}
 800389e:	bf00      	nop
 80038a0:	e7fe      	b.n	80038a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80038a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80038a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d01e      	beq.n	80038e8 <xTaskCreateStatic+0xac>
 80038aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d01b      	beq.n	80038e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	2202      	movs	r2, #2
 80038be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038c2:	2300      	movs	r3, #0
 80038c4:	9303      	str	r3, [sp, #12]
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	9302      	str	r3, [sp, #8]
 80038ca:	f107 0314 	add.w	r3, r7, #20
 80038ce:	9301      	str	r3, [sp, #4]
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 f850 	bl	8003980 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038e2:	f000 f8d5 	bl	8003a90 <prvAddNewTaskToReadyList>
 80038e6:	e001      	b.n	80038ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038ec:	697b      	ldr	r3, [r7, #20]
	}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3728      	adds	r7, #40	; 0x28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b08c      	sub	sp, #48	; 0x30
 80038fa:	af04      	add	r7, sp, #16
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	603b      	str	r3, [r7, #0]
 8003902:	4613      	mov	r3, r2
 8003904:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003906:	88fb      	ldrh	r3, [r7, #6]
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4618      	mov	r0, r3
 800390c:	f001 f8b4 	bl	8004a78 <pvPortMalloc>
 8003910:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00e      	beq.n	8003936 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003918:	2054      	movs	r0, #84	; 0x54
 800391a:	f001 f8ad 	bl	8004a78 <pvPortMalloc>
 800391e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	631a      	str	r2, [r3, #48]	; 0x30
 800392c:	e005      	b.n	800393a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800392e:	6978      	ldr	r0, [r7, #20]
 8003930:	f001 f966 	bl	8004c00 <vPortFree>
 8003934:	e001      	b.n	800393a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d017      	beq.n	8003970 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003948:	88fa      	ldrh	r2, [r7, #6]
 800394a:	2300      	movs	r3, #0
 800394c:	9303      	str	r3, [sp, #12]
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	9302      	str	r3, [sp, #8]
 8003952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003954:	9301      	str	r3, [sp, #4]
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f80e 	bl	8003980 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003964:	69f8      	ldr	r0, [r7, #28]
 8003966:	f000 f893 	bl	8003a90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800396a:	2301      	movs	r3, #1
 800396c:	61bb      	str	r3, [r7, #24]
 800396e:	e002      	b.n	8003976 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003970:	f04f 33ff 	mov.w	r3, #4294967295
 8003974:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003976:	69bb      	ldr	r3, [r7, #24]
	}
 8003978:	4618      	mov	r0, r3
 800397a:	3720      	adds	r7, #32
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
 800398c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003998:	3b01      	subs	r3, #1
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	f023 0307 	bic.w	r3, r3, #7
 80039a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	617b      	str	r3, [r7, #20]
}
 80039c4:	bf00      	nop
 80039c6:	e7fe      	b.n	80039c6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d01f      	beq.n	8003a0e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039ce:	2300      	movs	r3, #0
 80039d0:	61fb      	str	r3, [r7, #28]
 80039d2:	e012      	b.n	80039fa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	4413      	add	r3, r2
 80039da:	7819      	ldrb	r1, [r3, #0]
 80039dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	4413      	add	r3, r2
 80039e2:	3334      	adds	r3, #52	; 0x34
 80039e4:	460a      	mov	r2, r1
 80039e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	4413      	add	r3, r2
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d006      	beq.n	8003a02 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	3301      	adds	r3, #1
 80039f8:	61fb      	str	r3, [r7, #28]
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	2b0f      	cmp	r3, #15
 80039fe:	d9e9      	bls.n	80039d4 <prvInitialiseNewTask+0x54>
 8003a00:	e000      	b.n	8003a04 <prvInitialiseNewTask+0x84>
			{
				break;
 8003a02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a0c:	e003      	b.n	8003a16 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a18:	2b06      	cmp	r3, #6
 8003a1a:	d901      	bls.n	8003a20 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a1c:	2306      	movs	r3, #6
 8003a1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a2a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	2200      	movs	r2, #0
 8003a30:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a34:	3304      	adds	r3, #4
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff fb33 	bl	80030a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	3318      	adds	r3, #24
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff fb2e 	bl	80030a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4e:	f1c3 0207 	rsb	r2, r3, #7
 8003a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5e:	2200      	movs	r2, #0
 8003a60:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	68f9      	ldr	r1, [r7, #12]
 8003a6e:	69b8      	ldr	r0, [r7, #24]
 8003a70:	f000 fdb4 	bl	80045dc <pxPortInitialiseStack>
 8003a74:	4602      	mov	r2, r0
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a86:	bf00      	nop
 8003a88:	3720      	adds	r7, #32
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a98:	f000 fecc 	bl	8004834 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a9c:	4b2a      	ldr	r3, [pc, #168]	; (8003b48 <prvAddNewTaskToReadyList+0xb8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	4a29      	ldr	r2, [pc, #164]	; (8003b48 <prvAddNewTaskToReadyList+0xb8>)
 8003aa4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003aa6:	4b29      	ldr	r3, [pc, #164]	; (8003b4c <prvAddNewTaskToReadyList+0xbc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003aae:	4a27      	ldr	r2, [pc, #156]	; (8003b4c <prvAddNewTaskToReadyList+0xbc>)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ab4:	4b24      	ldr	r3, [pc, #144]	; (8003b48 <prvAddNewTaskToReadyList+0xb8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d110      	bne.n	8003ade <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003abc:	f000 fbc6 	bl	800424c <prvInitialiseTaskLists>
 8003ac0:	e00d      	b.n	8003ade <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ac2:	4b23      	ldr	r3, [pc, #140]	; (8003b50 <prvAddNewTaskToReadyList+0xc0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003aca:	4b20      	ldr	r3, [pc, #128]	; (8003b4c <prvAddNewTaskToReadyList+0xbc>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d802      	bhi.n	8003ade <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ad8:	4a1c      	ldr	r2, [pc, #112]	; (8003b4c <prvAddNewTaskToReadyList+0xbc>)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ade:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <prvAddNewTaskToReadyList+0xc4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	4a1b      	ldr	r2, [pc, #108]	; (8003b54 <prvAddNewTaskToReadyList+0xc4>)
 8003ae6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	2201      	movs	r2, #1
 8003aee:	409a      	lsls	r2, r3
 8003af0:	4b19      	ldr	r3, [pc, #100]	; (8003b58 <prvAddNewTaskToReadyList+0xc8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	4a18      	ldr	r2, [pc, #96]	; (8003b58 <prvAddNewTaskToReadyList+0xc8>)
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4a15      	ldr	r2, [pc, #84]	; (8003b5c <prvAddNewTaskToReadyList+0xcc>)
 8003b08:	441a      	add	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4610      	mov	r0, r2
 8003b12:	f7ff fad3 	bl	80030bc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b16:	f000 febd 	bl	8004894 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b1a:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <prvAddNewTaskToReadyList+0xc0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00e      	beq.n	8003b40 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b22:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <prvAddNewTaskToReadyList+0xbc>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d207      	bcs.n	8003b40 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <prvAddNewTaskToReadyList+0xd0>)
 8003b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20000390 	.word	0x20000390
 8003b4c:	20000290 	.word	0x20000290
 8003b50:	2000039c 	.word	0x2000039c
 8003b54:	200003ac 	.word	0x200003ac
 8003b58:	20000398 	.word	0x20000398
 8003b5c:	20000294 	.word	0x20000294
 8003b60:	e000ed04 	.word	0xe000ed04

08003b64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d017      	beq.n	8003ba6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b76:	4b13      	ldr	r3, [pc, #76]	; (8003bc4 <vTaskDelay+0x60>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <vTaskDelay+0x30>
	__asm volatile
 8003b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	60bb      	str	r3, [r7, #8]
}
 8003b90:	bf00      	nop
 8003b92:	e7fe      	b.n	8003b92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b94:	f000 f87a 	bl	8003c8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b98:	2100      	movs	r1, #0
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fcb8 	bl	8004510 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ba0:	f000 f882 	bl	8003ca8 <xTaskResumeAll>
 8003ba4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d107      	bne.n	8003bbc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003bac:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <vTaskDelay+0x64>)
 8003bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bbc:	bf00      	nop
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	200003b8 	.word	0x200003b8
 8003bc8:	e000ed04 	.word	0xe000ed04

08003bcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	; 0x28
 8003bd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003bda:	463a      	mov	r2, r7
 8003bdc:	1d39      	adds	r1, r7, #4
 8003bde:	f107 0308 	add.w	r3, r7, #8
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fc fc70 	bl	80004c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003be8:	6839      	ldr	r1, [r7, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	9202      	str	r2, [sp, #8]
 8003bf0:	9301      	str	r3, [sp, #4]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	460a      	mov	r2, r1
 8003bfa:	491e      	ldr	r1, [pc, #120]	; (8003c74 <vTaskStartScheduler+0xa8>)
 8003bfc:	481e      	ldr	r0, [pc, #120]	; (8003c78 <vTaskStartScheduler+0xac>)
 8003bfe:	f7ff fe1d 	bl	800383c <xTaskCreateStatic>
 8003c02:	4603      	mov	r3, r0
 8003c04:	4a1d      	ldr	r2, [pc, #116]	; (8003c7c <vTaskStartScheduler+0xb0>)
 8003c06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c08:	4b1c      	ldr	r3, [pc, #112]	; (8003c7c <vTaskStartScheduler+0xb0>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c10:	2301      	movs	r3, #1
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	e001      	b.n	8003c1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d116      	bne.n	8003c4e <vTaskStartScheduler+0x82>
	__asm volatile
 8003c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	613b      	str	r3, [r7, #16]
}
 8003c32:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c34:	4b12      	ldr	r3, [pc, #72]	; (8003c80 <vTaskStartScheduler+0xb4>)
 8003c36:	f04f 32ff 	mov.w	r2, #4294967295
 8003c3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c3c:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <vTaskStartScheduler+0xb8>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c42:	4b11      	ldr	r3, [pc, #68]	; (8003c88 <vTaskStartScheduler+0xbc>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c48:	f000 fd52 	bl	80046f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c4c:	e00e      	b.n	8003c6c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c54:	d10a      	bne.n	8003c6c <vTaskStartScheduler+0xa0>
	__asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	60fb      	str	r3, [r7, #12]
}
 8003c68:	bf00      	nop
 8003c6a:	e7fe      	b.n	8003c6a <vTaskStartScheduler+0x9e>
}
 8003c6c:	bf00      	nop
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	08004ee8 	.word	0x08004ee8
 8003c78:	0800421d 	.word	0x0800421d
 8003c7c:	200003b4 	.word	0x200003b4
 8003c80:	200003b0 	.word	0x200003b0
 8003c84:	2000039c 	.word	0x2000039c
 8003c88:	20000394 	.word	0x20000394

08003c8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003c90:	4b04      	ldr	r3, [pc, #16]	; (8003ca4 <vTaskSuspendAll+0x18>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3301      	adds	r3, #1
 8003c96:	4a03      	ldr	r2, [pc, #12]	; (8003ca4 <vTaskSuspendAll+0x18>)
 8003c98:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003c9a:	bf00      	nop
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	200003b8 	.word	0x200003b8

08003ca8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003cb6:	4b41      	ldr	r3, [pc, #260]	; (8003dbc <xTaskResumeAll+0x114>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10a      	bne.n	8003cd4 <xTaskResumeAll+0x2c>
	__asm volatile
 8003cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc2:	f383 8811 	msr	BASEPRI, r3
 8003cc6:	f3bf 8f6f 	isb	sy
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	603b      	str	r3, [r7, #0]
}
 8003cd0:	bf00      	nop
 8003cd2:	e7fe      	b.n	8003cd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003cd4:	f000 fdae 	bl	8004834 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003cd8:	4b38      	ldr	r3, [pc, #224]	; (8003dbc <xTaskResumeAll+0x114>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	4a37      	ldr	r2, [pc, #220]	; (8003dbc <xTaskResumeAll+0x114>)
 8003ce0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ce2:	4b36      	ldr	r3, [pc, #216]	; (8003dbc <xTaskResumeAll+0x114>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d161      	bne.n	8003dae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003cea:	4b35      	ldr	r3, [pc, #212]	; (8003dc0 <xTaskResumeAll+0x118>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d05d      	beq.n	8003dae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cf2:	e02e      	b.n	8003d52 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cf4:	4b33      	ldr	r3, [pc, #204]	; (8003dc4 <xTaskResumeAll+0x11c>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3318      	adds	r3, #24
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fa38 	bl	8003176 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff fa33 	bl	8003176 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	2201      	movs	r2, #1
 8003d16:	409a      	lsls	r2, r3
 8003d18:	4b2b      	ldr	r3, [pc, #172]	; (8003dc8 <xTaskResumeAll+0x120>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	4a2a      	ldr	r2, [pc, #168]	; (8003dc8 <xTaskResumeAll+0x120>)
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d26:	4613      	mov	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4a27      	ldr	r2, [pc, #156]	; (8003dcc <xTaskResumeAll+0x124>)
 8003d30:	441a      	add	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	3304      	adds	r3, #4
 8003d36:	4619      	mov	r1, r3
 8003d38:	4610      	mov	r0, r2
 8003d3a:	f7ff f9bf 	bl	80030bc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d42:	4b23      	ldr	r3, [pc, #140]	; (8003dd0 <xTaskResumeAll+0x128>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d302      	bcc.n	8003d52 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003d4c:	4b21      	ldr	r3, [pc, #132]	; (8003dd4 <xTaskResumeAll+0x12c>)
 8003d4e:	2201      	movs	r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d52:	4b1c      	ldr	r3, [pc, #112]	; (8003dc4 <xTaskResumeAll+0x11c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1cc      	bne.n	8003cf4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d60:	f000 fb12 	bl	8004388 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003d64:	4b1c      	ldr	r3, [pc, #112]	; (8003dd8 <xTaskResumeAll+0x130>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d010      	beq.n	8003d92 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d70:	f000 f836 	bl	8003de0 <xTaskIncrementTick>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003d7a:	4b16      	ldr	r3, [pc, #88]	; (8003dd4 <xTaskResumeAll+0x12c>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1f1      	bne.n	8003d70 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003d8c:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <xTaskResumeAll+0x130>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d92:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <xTaskResumeAll+0x12c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d9e:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <xTaskResumeAll+0x134>)
 8003da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003dae:	f000 fd71 	bl	8004894 <vPortExitCritical>

	return xAlreadyYielded;
 8003db2:	68bb      	ldr	r3, [r7, #8]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	200003b8 	.word	0x200003b8
 8003dc0:	20000390 	.word	0x20000390
 8003dc4:	20000350 	.word	0x20000350
 8003dc8:	20000398 	.word	0x20000398
 8003dcc:	20000294 	.word	0x20000294
 8003dd0:	20000290 	.word	0x20000290
 8003dd4:	200003a4 	.word	0x200003a4
 8003dd8:	200003a0 	.word	0x200003a0
 8003ddc:	e000ed04 	.word	0xe000ed04

08003de0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dea:	4b4e      	ldr	r3, [pc, #312]	; (8003f24 <xTaskIncrementTick+0x144>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f040 8088 	bne.w	8003f04 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003df4:	4b4c      	ldr	r3, [pc, #304]	; (8003f28 <xTaskIncrementTick+0x148>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003dfc:	4a4a      	ldr	r2, [pc, #296]	; (8003f28 <xTaskIncrementTick+0x148>)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d120      	bne.n	8003e4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e08:	4b48      	ldr	r3, [pc, #288]	; (8003f2c <xTaskIncrementTick+0x14c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <xTaskIncrementTick+0x48>
	__asm volatile
 8003e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	603b      	str	r3, [r7, #0]
}
 8003e24:	bf00      	nop
 8003e26:	e7fe      	b.n	8003e26 <xTaskIncrementTick+0x46>
 8003e28:	4b40      	ldr	r3, [pc, #256]	; (8003f2c <xTaskIncrementTick+0x14c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	4b40      	ldr	r3, [pc, #256]	; (8003f30 <xTaskIncrementTick+0x150>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a3e      	ldr	r2, [pc, #248]	; (8003f2c <xTaskIncrementTick+0x14c>)
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	4a3e      	ldr	r2, [pc, #248]	; (8003f30 <xTaskIncrementTick+0x150>)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	4b3d      	ldr	r3, [pc, #244]	; (8003f34 <xTaskIncrementTick+0x154>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3301      	adds	r3, #1
 8003e42:	4a3c      	ldr	r2, [pc, #240]	; (8003f34 <xTaskIncrementTick+0x154>)
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	f000 fa9f 	bl	8004388 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e4a:	4b3b      	ldr	r3, [pc, #236]	; (8003f38 <xTaskIncrementTick+0x158>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d348      	bcc.n	8003ee6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e54:	4b35      	ldr	r3, [pc, #212]	; (8003f2c <xTaskIncrementTick+0x14c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d104      	bne.n	8003e68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e5e:	4b36      	ldr	r3, [pc, #216]	; (8003f38 <xTaskIncrementTick+0x158>)
 8003e60:	f04f 32ff 	mov.w	r2, #4294967295
 8003e64:	601a      	str	r2, [r3, #0]
					break;
 8003e66:	e03e      	b.n	8003ee6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e68:	4b30      	ldr	r3, [pc, #192]	; (8003f2c <xTaskIncrementTick+0x14c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d203      	bcs.n	8003e88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e80:	4a2d      	ldr	r2, [pc, #180]	; (8003f38 <xTaskIncrementTick+0x158>)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e86:	e02e      	b.n	8003ee6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff f972 	bl	8003176 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d004      	beq.n	8003ea4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	3318      	adds	r3, #24
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff f969 	bl	8003176 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	4b23      	ldr	r3, [pc, #140]	; (8003f3c <xTaskIncrementTick+0x15c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	4a22      	ldr	r2, [pc, #136]	; (8003f3c <xTaskIncrementTick+0x15c>)
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4a1f      	ldr	r2, [pc, #124]	; (8003f40 <xTaskIncrementTick+0x160>)
 8003ec4:	441a      	add	r2, r3
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4610      	mov	r0, r2
 8003ece:	f7ff f8f5 	bl	80030bc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed6:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <xTaskIncrementTick+0x164>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d3b9      	bcc.n	8003e54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ee4:	e7b6      	b.n	8003e54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ee6:	4b17      	ldr	r3, [pc, #92]	; (8003f44 <xTaskIncrementTick+0x164>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eec:	4914      	ldr	r1, [pc, #80]	; (8003f40 <xTaskIncrementTick+0x160>)
 8003eee:	4613      	mov	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d907      	bls.n	8003f0e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003efe:	2301      	movs	r3, #1
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	e004      	b.n	8003f0e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003f04:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <xTaskIncrementTick+0x168>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	4a0f      	ldr	r2, [pc, #60]	; (8003f48 <xTaskIncrementTick+0x168>)
 8003f0c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003f0e:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <xTaskIncrementTick+0x16c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003f16:	2301      	movs	r3, #1
 8003f18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003f1a:	697b      	ldr	r3, [r7, #20]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3718      	adds	r7, #24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	200003b8 	.word	0x200003b8
 8003f28:	20000394 	.word	0x20000394
 8003f2c:	20000348 	.word	0x20000348
 8003f30:	2000034c 	.word	0x2000034c
 8003f34:	200003a8 	.word	0x200003a8
 8003f38:	200003b0 	.word	0x200003b0
 8003f3c:	20000398 	.word	0x20000398
 8003f40:	20000294 	.word	0x20000294
 8003f44:	20000290 	.word	0x20000290
 8003f48:	200003a0 	.word	0x200003a0
 8003f4c:	200003a4 	.word	0x200003a4

08003f50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f56:	4b27      	ldr	r3, [pc, #156]	; (8003ff4 <vTaskSwitchContext+0xa4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f5e:	4b26      	ldr	r3, [pc, #152]	; (8003ff8 <vTaskSwitchContext+0xa8>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f64:	e03f      	b.n	8003fe6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003f66:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <vTaskSwitchContext+0xa8>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f6c:	4b23      	ldr	r3, [pc, #140]	; (8003ffc <vTaskSwitchContext+0xac>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	fab3 f383 	clz	r3, r3
 8003f78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f7a:	7afb      	ldrb	r3, [r7, #11]
 8003f7c:	f1c3 031f 	rsb	r3, r3, #31
 8003f80:	617b      	str	r3, [r7, #20]
 8003f82:	491f      	ldr	r1, [pc, #124]	; (8004000 <vTaskSwitchContext+0xb0>)
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10a      	bne.n	8003fac <vTaskSwitchContext+0x5c>
	__asm volatile
 8003f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9a:	f383 8811 	msr	BASEPRI, r3
 8003f9e:	f3bf 8f6f 	isb	sy
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	607b      	str	r3, [r7, #4]
}
 8003fa8:	bf00      	nop
 8003faa:	e7fe      	b.n	8003faa <vTaskSwitchContext+0x5a>
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4a12      	ldr	r2, [pc, #72]	; (8004000 <vTaskSwitchContext+0xb0>)
 8003fb8:	4413      	add	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	605a      	str	r2, [r3, #4]
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	3308      	adds	r3, #8
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d104      	bne.n	8003fdc <vTaskSwitchContext+0x8c>
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	605a      	str	r2, [r3, #4]
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	4a08      	ldr	r2, [pc, #32]	; (8004004 <vTaskSwitchContext+0xb4>)
 8003fe4:	6013      	str	r3, [r2, #0]
}
 8003fe6:	bf00      	nop
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	200003b8 	.word	0x200003b8
 8003ff8:	200003a4 	.word	0x200003a4
 8003ffc:	20000398 	.word	0x20000398
 8004000:	20000294 	.word	0x20000294
 8004004:	20000290 	.word	0x20000290

08004008 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10a      	bne.n	800402e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	60fb      	str	r3, [r7, #12]
}
 800402a:	bf00      	nop
 800402c:	e7fe      	b.n	800402c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800402e:	4b07      	ldr	r3, [pc, #28]	; (800404c <vTaskPlaceOnEventList+0x44>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3318      	adds	r3, #24
 8004034:	4619      	mov	r1, r3
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff f864 	bl	8003104 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800403c:	2101      	movs	r1, #1
 800403e:	6838      	ldr	r0, [r7, #0]
 8004040:	f000 fa66 	bl	8004510 <prvAddCurrentTaskToDelayedList>
}
 8004044:	bf00      	nop
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	20000290 	.word	0x20000290

08004050 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10a      	bne.n	800407c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	60fb      	str	r3, [r7, #12]
}
 8004078:	bf00      	nop
 800407a:	e7fe      	b.n	800407a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	3318      	adds	r3, #24
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff f878 	bl	8003176 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004086:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <xTaskRemoveFromEventList+0xac>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d11c      	bne.n	80040c8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	3304      	adds	r3, #4
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff f86f 	bl	8003176 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	2201      	movs	r2, #1
 800409e:	409a      	lsls	r2, r3
 80040a0:	4b17      	ldr	r3, [pc, #92]	; (8004100 <xTaskRemoveFromEventList+0xb0>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	4a16      	ldr	r2, [pc, #88]	; (8004100 <xTaskRemoveFromEventList+0xb0>)
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4a13      	ldr	r2, [pc, #76]	; (8004104 <xTaskRemoveFromEventList+0xb4>)
 80040b8:	441a      	add	r2, r3
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	3304      	adds	r3, #4
 80040be:	4619      	mov	r1, r3
 80040c0:	4610      	mov	r0, r2
 80040c2:	f7fe fffb 	bl	80030bc <vListInsertEnd>
 80040c6:	e005      	b.n	80040d4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	3318      	adds	r3, #24
 80040cc:	4619      	mov	r1, r3
 80040ce:	480e      	ldr	r0, [pc, #56]	; (8004108 <xTaskRemoveFromEventList+0xb8>)
 80040d0:	f7fe fff4 	bl	80030bc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d8:	4b0c      	ldr	r3, [pc, #48]	; (800410c <xTaskRemoveFromEventList+0xbc>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	429a      	cmp	r2, r3
 80040e0:	d905      	bls.n	80040ee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040e2:	2301      	movs	r3, #1
 80040e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040e6:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <xTaskRemoveFromEventList+0xc0>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	e001      	b.n	80040f2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80040f2:	697b      	ldr	r3, [r7, #20]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	200003b8 	.word	0x200003b8
 8004100:	20000398 	.word	0x20000398
 8004104:	20000294 	.word	0x20000294
 8004108:	20000350 	.word	0x20000350
 800410c:	20000290 	.word	0x20000290
 8004110:	200003a4 	.word	0x200003a4

08004114 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800411c:	4b06      	ldr	r3, [pc, #24]	; (8004138 <vTaskInternalSetTimeOutState+0x24>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004124:	4b05      	ldr	r3, [pc, #20]	; (800413c <vTaskInternalSetTimeOutState+0x28>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	605a      	str	r2, [r3, #4]
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	200003a8 	.word	0x200003a8
 800413c:	20000394 	.word	0x20000394

08004140 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10a      	bne.n	8004166 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	613b      	str	r3, [r7, #16]
}
 8004162:	bf00      	nop
 8004164:	e7fe      	b.n	8004164 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10a      	bne.n	8004182 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	60fb      	str	r3, [r7, #12]
}
 800417e:	bf00      	nop
 8004180:	e7fe      	b.n	8004180 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004182:	f000 fb57 	bl	8004834 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004186:	4b1d      	ldr	r3, [pc, #116]	; (80041fc <xTaskCheckForTimeOut+0xbc>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419e:	d102      	bne.n	80041a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61fb      	str	r3, [r7, #28]
 80041a4:	e023      	b.n	80041ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	4b15      	ldr	r3, [pc, #84]	; (8004200 <xTaskCheckForTimeOut+0xc0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d007      	beq.n	80041c2 <xTaskCheckForTimeOut+0x82>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d302      	bcc.n	80041c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80041bc:	2301      	movs	r3, #1
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	e015      	b.n	80041ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d20b      	bcs.n	80041e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	1ad2      	subs	r2, r2, r3
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7ff ff9b 	bl	8004114 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80041de:	2300      	movs	r3, #0
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	e004      	b.n	80041ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80041ea:	2301      	movs	r3, #1
 80041ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80041ee:	f000 fb51 	bl	8004894 <vPortExitCritical>

	return xReturn;
 80041f2:	69fb      	ldr	r3, [r7, #28]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3720      	adds	r7, #32
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	20000394 	.word	0x20000394
 8004200:	200003a8 	.word	0x200003a8

08004204 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004208:	4b03      	ldr	r3, [pc, #12]	; (8004218 <vTaskMissedYield+0x14>)
 800420a:	2201      	movs	r2, #1
 800420c:	601a      	str	r2, [r3, #0]
}
 800420e:	bf00      	nop
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	200003a4 	.word	0x200003a4

0800421c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004224:	f000 f852 	bl	80042cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004228:	4b06      	ldr	r3, [pc, #24]	; (8004244 <prvIdleTask+0x28>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d9f9      	bls.n	8004224 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004230:	4b05      	ldr	r3, [pc, #20]	; (8004248 <prvIdleTask+0x2c>)
 8004232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004240:	e7f0      	b.n	8004224 <prvIdleTask+0x8>
 8004242:	bf00      	nop
 8004244:	20000294 	.word	0x20000294
 8004248:	e000ed04 	.word	0xe000ed04

0800424c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004252:	2300      	movs	r3, #0
 8004254:	607b      	str	r3, [r7, #4]
 8004256:	e00c      	b.n	8004272 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	4613      	mov	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4a12      	ldr	r2, [pc, #72]	; (80042ac <prvInitialiseTaskLists+0x60>)
 8004264:	4413      	add	r3, r2
 8004266:	4618      	mov	r0, r3
 8004268:	f7fe fefb 	bl	8003062 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3301      	adds	r3, #1
 8004270:	607b      	str	r3, [r7, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b06      	cmp	r3, #6
 8004276:	d9ef      	bls.n	8004258 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004278:	480d      	ldr	r0, [pc, #52]	; (80042b0 <prvInitialiseTaskLists+0x64>)
 800427a:	f7fe fef2 	bl	8003062 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800427e:	480d      	ldr	r0, [pc, #52]	; (80042b4 <prvInitialiseTaskLists+0x68>)
 8004280:	f7fe feef 	bl	8003062 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004284:	480c      	ldr	r0, [pc, #48]	; (80042b8 <prvInitialiseTaskLists+0x6c>)
 8004286:	f7fe feec 	bl	8003062 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800428a:	480c      	ldr	r0, [pc, #48]	; (80042bc <prvInitialiseTaskLists+0x70>)
 800428c:	f7fe fee9 	bl	8003062 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004290:	480b      	ldr	r0, [pc, #44]	; (80042c0 <prvInitialiseTaskLists+0x74>)
 8004292:	f7fe fee6 	bl	8003062 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004296:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <prvInitialiseTaskLists+0x78>)
 8004298:	4a05      	ldr	r2, [pc, #20]	; (80042b0 <prvInitialiseTaskLists+0x64>)
 800429a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800429c:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <prvInitialiseTaskLists+0x7c>)
 800429e:	4a05      	ldr	r2, [pc, #20]	; (80042b4 <prvInitialiseTaskLists+0x68>)
 80042a0:	601a      	str	r2, [r3, #0]
}
 80042a2:	bf00      	nop
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000294 	.word	0x20000294
 80042b0:	20000320 	.word	0x20000320
 80042b4:	20000334 	.word	0x20000334
 80042b8:	20000350 	.word	0x20000350
 80042bc:	20000364 	.word	0x20000364
 80042c0:	2000037c 	.word	0x2000037c
 80042c4:	20000348 	.word	0x20000348
 80042c8:	2000034c 	.word	0x2000034c

080042cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042d2:	e019      	b.n	8004308 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042d4:	f000 faae 	bl	8004834 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042d8:	4b10      	ldr	r3, [pc, #64]	; (800431c <prvCheckTasksWaitingTermination+0x50>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3304      	adds	r3, #4
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fe ff46 	bl	8003176 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042ea:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <prvCheckTasksWaitingTermination+0x54>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	4a0b      	ldr	r2, [pc, #44]	; (8004320 <prvCheckTasksWaitingTermination+0x54>)
 80042f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042f4:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <prvCheckTasksWaitingTermination+0x58>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3b01      	subs	r3, #1
 80042fa:	4a0a      	ldr	r2, [pc, #40]	; (8004324 <prvCheckTasksWaitingTermination+0x58>)
 80042fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042fe:	f000 fac9 	bl	8004894 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f810 	bl	8004328 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004308:	4b06      	ldr	r3, [pc, #24]	; (8004324 <prvCheckTasksWaitingTermination+0x58>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1e1      	bne.n	80042d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004310:	bf00      	nop
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20000364 	.word	0x20000364
 8004320:	20000390 	.word	0x20000390
 8004324:	20000378 	.word	0x20000378

08004328 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004336:	2b00      	cmp	r3, #0
 8004338:	d108      	bne.n	800434c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fc5e 	bl	8004c00 <vPortFree>
				vPortFree( pxTCB );
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fc5b 	bl	8004c00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800434a:	e018      	b.n	800437e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004352:	2b01      	cmp	r3, #1
 8004354:	d103      	bne.n	800435e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fc52 	bl	8004c00 <vPortFree>
	}
 800435c:	e00f      	b.n	800437e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004364:	2b02      	cmp	r3, #2
 8004366:	d00a      	beq.n	800437e <prvDeleteTCB+0x56>
	__asm volatile
 8004368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	60fb      	str	r3, [r7, #12]
}
 800437a:	bf00      	nop
 800437c:	e7fe      	b.n	800437c <prvDeleteTCB+0x54>
	}
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800438e:	4b0c      	ldr	r3, [pc, #48]	; (80043c0 <prvResetNextTaskUnblockTime+0x38>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d104      	bne.n	80043a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004398:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <prvResetNextTaskUnblockTime+0x3c>)
 800439a:	f04f 32ff 	mov.w	r2, #4294967295
 800439e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043a0:	e008      	b.n	80043b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043a2:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <prvResetNextTaskUnblockTime+0x38>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	4a04      	ldr	r2, [pc, #16]	; (80043c4 <prvResetNextTaskUnblockTime+0x3c>)
 80043b2:	6013      	str	r3, [r2, #0]
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	20000348 	.word	0x20000348
 80043c4:	200003b0 	.word	0x200003b0

080043c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043ce:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <xTaskGetSchedulerState+0x34>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d102      	bne.n	80043dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043d6:	2301      	movs	r3, #1
 80043d8:	607b      	str	r3, [r7, #4]
 80043da:	e008      	b.n	80043ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043dc:	4b08      	ldr	r3, [pc, #32]	; (8004400 <xTaskGetSchedulerState+0x38>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d102      	bne.n	80043ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043e4:	2302      	movs	r3, #2
 80043e6:	607b      	str	r3, [r7, #4]
 80043e8:	e001      	b.n	80043ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80043ea:	2300      	movs	r3, #0
 80043ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80043ee:	687b      	ldr	r3, [r7, #4]
	}
 80043f0:	4618      	mov	r0, r3
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	2000039c 	.word	0x2000039c
 8004400:	200003b8 	.word	0x200003b8

08004404 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d06e      	beq.n	80044f8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800441a:	4b3a      	ldr	r3, [pc, #232]	; (8004504 <xTaskPriorityDisinherit+0x100>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	429a      	cmp	r2, r3
 8004422:	d00a      	beq.n	800443a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	60fb      	str	r3, [r7, #12]
}
 8004436:	bf00      	nop
 8004438:	e7fe      	b.n	8004438 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10a      	bne.n	8004458 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	60bb      	str	r3, [r7, #8]
}
 8004454:	bf00      	nop
 8004456:	e7fe      	b.n	8004456 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800445c:	1e5a      	subs	r2, r3, #1
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446a:	429a      	cmp	r2, r3
 800446c:	d044      	beq.n	80044f8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004472:	2b00      	cmp	r3, #0
 8004474:	d140      	bne.n	80044f8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	3304      	adds	r3, #4
 800447a:	4618      	mov	r0, r3
 800447c:	f7fe fe7b 	bl	8003176 <uxListRemove>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d115      	bne.n	80044b2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448a:	491f      	ldr	r1, [pc, #124]	; (8004508 <xTaskPriorityDisinherit+0x104>)
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10a      	bne.n	80044b2 <xTaskPriorityDisinherit+0xae>
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	2201      	movs	r2, #1
 80044a2:	fa02 f303 	lsl.w	r3, r2, r3
 80044a6:	43da      	mvns	r2, r3
 80044a8:	4b18      	ldr	r3, [pc, #96]	; (800450c <xTaskPriorityDisinherit+0x108>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4013      	ands	r3, r2
 80044ae:	4a17      	ldr	r2, [pc, #92]	; (800450c <xTaskPriorityDisinherit+0x108>)
 80044b0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	f1c3 0207 	rsb	r2, r3, #7
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ca:	2201      	movs	r2, #1
 80044cc:	409a      	lsls	r2, r3
 80044ce:	4b0f      	ldr	r3, [pc, #60]	; (800450c <xTaskPriorityDisinherit+0x108>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	4a0d      	ldr	r2, [pc, #52]	; (800450c <xTaskPriorityDisinherit+0x108>)
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4a08      	ldr	r2, [pc, #32]	; (8004508 <xTaskPriorityDisinherit+0x104>)
 80044e6:	441a      	add	r2, r3
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	3304      	adds	r3, #4
 80044ec:	4619      	mov	r1, r3
 80044ee:	4610      	mov	r0, r2
 80044f0:	f7fe fde4 	bl	80030bc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80044f4:	2301      	movs	r3, #1
 80044f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044f8:	697b      	ldr	r3, [r7, #20]
	}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000290 	.word	0x20000290
 8004508:	20000294 	.word	0x20000294
 800450c:	20000398 	.word	0x20000398

08004510 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800451a:	4b29      	ldr	r3, [pc, #164]	; (80045c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004520:	4b28      	ldr	r3, [pc, #160]	; (80045c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3304      	adds	r3, #4
 8004526:	4618      	mov	r0, r3
 8004528:	f7fe fe25 	bl	8003176 <uxListRemove>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10b      	bne.n	800454a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004532:	4b24      	ldr	r3, [pc, #144]	; (80045c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	2201      	movs	r2, #1
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	43da      	mvns	r2, r3
 8004540:	4b21      	ldr	r3, [pc, #132]	; (80045c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4013      	ands	r3, r2
 8004546:	4a20      	ldr	r2, [pc, #128]	; (80045c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004548:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004550:	d10a      	bne.n	8004568 <prvAddCurrentTaskToDelayedList+0x58>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d007      	beq.n	8004568 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004558:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3304      	adds	r3, #4
 800455e:	4619      	mov	r1, r3
 8004560:	481a      	ldr	r0, [pc, #104]	; (80045cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004562:	f7fe fdab 	bl	80030bc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004566:	e026      	b.n	80045b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4413      	add	r3, r2
 800456e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004570:	4b14      	ldr	r3, [pc, #80]	; (80045c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	429a      	cmp	r2, r3
 800457e:	d209      	bcs.n	8004594 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004580:	4b13      	ldr	r3, [pc, #76]	; (80045d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3304      	adds	r3, #4
 800458a:	4619      	mov	r1, r3
 800458c:	4610      	mov	r0, r2
 800458e:	f7fe fdb9 	bl	8003104 <vListInsert>
}
 8004592:	e010      	b.n	80045b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004594:	4b0f      	ldr	r3, [pc, #60]	; (80045d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3304      	adds	r3, #4
 800459e:	4619      	mov	r1, r3
 80045a0:	4610      	mov	r0, r2
 80045a2:	f7fe fdaf 	bl	8003104 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045a6:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d202      	bcs.n	80045b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80045b0:	4a09      	ldr	r2, [pc, #36]	; (80045d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	6013      	str	r3, [r2, #0]
}
 80045b6:	bf00      	nop
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	20000394 	.word	0x20000394
 80045c4:	20000290 	.word	0x20000290
 80045c8:	20000398 	.word	0x20000398
 80045cc:	2000037c 	.word	0x2000037c
 80045d0:	2000034c 	.word	0x2000034c
 80045d4:	20000348 	.word	0x20000348
 80045d8:	200003b0 	.word	0x200003b0

080045dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	3b04      	subs	r3, #4
 80045ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3b04      	subs	r3, #4
 80045fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f023 0201 	bic.w	r2, r3, #1
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3b04      	subs	r3, #4
 800460a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800460c:	4a0c      	ldr	r2, [pc, #48]	; (8004640 <pxPortInitialiseStack+0x64>)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3b14      	subs	r3, #20
 8004616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3b04      	subs	r3, #4
 8004622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f06f 0202 	mvn.w	r2, #2
 800462a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	3b20      	subs	r3, #32
 8004630:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004632:	68fb      	ldr	r3, [r7, #12]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	08004645 	.word	0x08004645

08004644 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800464a:	2300      	movs	r3, #0
 800464c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800464e:	4b12      	ldr	r3, [pc, #72]	; (8004698 <prvTaskExitError+0x54>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004656:	d00a      	beq.n	800466e <prvTaskExitError+0x2a>
	__asm volatile
 8004658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	60fb      	str	r3, [r7, #12]
}
 800466a:	bf00      	nop
 800466c:	e7fe      	b.n	800466c <prvTaskExitError+0x28>
	__asm volatile
 800466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	60bb      	str	r3, [r7, #8]
}
 8004680:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004682:	bf00      	nop
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0fc      	beq.n	8004684 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800468a:	bf00      	nop
 800468c:	bf00      	nop
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	20000014 	.word	0x20000014
 800469c:	00000000 	.word	0x00000000

080046a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80046a0:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <pxCurrentTCBConst2>)
 80046a2:	6819      	ldr	r1, [r3, #0]
 80046a4:	6808      	ldr	r0, [r1, #0]
 80046a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046aa:	f380 8809 	msr	PSP, r0
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f04f 0000 	mov.w	r0, #0
 80046b6:	f380 8811 	msr	BASEPRI, r0
 80046ba:	4770      	bx	lr
 80046bc:	f3af 8000 	nop.w

080046c0 <pxCurrentTCBConst2>:
 80046c0:	20000290 	.word	0x20000290
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80046c4:	bf00      	nop
 80046c6:	bf00      	nop

080046c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80046c8:	4808      	ldr	r0, [pc, #32]	; (80046ec <prvPortStartFirstTask+0x24>)
 80046ca:	6800      	ldr	r0, [r0, #0]
 80046cc:	6800      	ldr	r0, [r0, #0]
 80046ce:	f380 8808 	msr	MSP, r0
 80046d2:	f04f 0000 	mov.w	r0, #0
 80046d6:	f380 8814 	msr	CONTROL, r0
 80046da:	b662      	cpsie	i
 80046dc:	b661      	cpsie	f
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	df00      	svc	0
 80046e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046ea:	bf00      	nop
 80046ec:	e000ed08 	.word	0xe000ed08

080046f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046f6:	4b46      	ldr	r3, [pc, #280]	; (8004810 <xPortStartScheduler+0x120>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a46      	ldr	r2, [pc, #280]	; (8004814 <xPortStartScheduler+0x124>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d10a      	bne.n	8004716 <xPortStartScheduler+0x26>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	613b      	str	r3, [r7, #16]
}
 8004712:	bf00      	nop
 8004714:	e7fe      	b.n	8004714 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004716:	4b3e      	ldr	r3, [pc, #248]	; (8004810 <xPortStartScheduler+0x120>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a3f      	ldr	r2, [pc, #252]	; (8004818 <xPortStartScheduler+0x128>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d10a      	bne.n	8004736 <xPortStartScheduler+0x46>
	__asm volatile
 8004720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	60fb      	str	r3, [r7, #12]
}
 8004732:	bf00      	nop
 8004734:	e7fe      	b.n	8004734 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004736:	4b39      	ldr	r3, [pc, #228]	; (800481c <xPortStartScheduler+0x12c>)
 8004738:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	22ff      	movs	r2, #255	; 0xff
 8004746:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	b2db      	uxtb	r3, r3
 8004754:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004758:	b2da      	uxtb	r2, r3
 800475a:	4b31      	ldr	r3, [pc, #196]	; (8004820 <xPortStartScheduler+0x130>)
 800475c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800475e:	4b31      	ldr	r3, [pc, #196]	; (8004824 <xPortStartScheduler+0x134>)
 8004760:	2207      	movs	r2, #7
 8004762:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004764:	e009      	b.n	800477a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004766:	4b2f      	ldr	r3, [pc, #188]	; (8004824 <xPortStartScheduler+0x134>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3b01      	subs	r3, #1
 800476c:	4a2d      	ldr	r2, [pc, #180]	; (8004824 <xPortStartScheduler+0x134>)
 800476e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	b2db      	uxtb	r3, r3
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	b2db      	uxtb	r3, r3
 8004778:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800477a:	78fb      	ldrb	r3, [r7, #3]
 800477c:	b2db      	uxtb	r3, r3
 800477e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004782:	2b80      	cmp	r3, #128	; 0x80
 8004784:	d0ef      	beq.n	8004766 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004786:	4b27      	ldr	r3, [pc, #156]	; (8004824 <xPortStartScheduler+0x134>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f1c3 0307 	rsb	r3, r3, #7
 800478e:	2b04      	cmp	r3, #4
 8004790:	d00a      	beq.n	80047a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	60bb      	str	r3, [r7, #8]
}
 80047a4:	bf00      	nop
 80047a6:	e7fe      	b.n	80047a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047a8:	4b1e      	ldr	r3, [pc, #120]	; (8004824 <xPortStartScheduler+0x134>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	021b      	lsls	r3, r3, #8
 80047ae:	4a1d      	ldr	r2, [pc, #116]	; (8004824 <xPortStartScheduler+0x134>)
 80047b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047b2:	4b1c      	ldr	r3, [pc, #112]	; (8004824 <xPortStartScheduler+0x134>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047ba:	4a1a      	ldr	r2, [pc, #104]	; (8004824 <xPortStartScheduler+0x134>)
 80047bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80047c6:	4b18      	ldr	r3, [pc, #96]	; (8004828 <xPortStartScheduler+0x138>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a17      	ldr	r2, [pc, #92]	; (8004828 <xPortStartScheduler+0x138>)
 80047cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80047d2:	4b15      	ldr	r3, [pc, #84]	; (8004828 <xPortStartScheduler+0x138>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a14      	ldr	r2, [pc, #80]	; (8004828 <xPortStartScheduler+0x138>)
 80047d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047de:	f000 f8dd 	bl	800499c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047e2:	4b12      	ldr	r3, [pc, #72]	; (800482c <xPortStartScheduler+0x13c>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80047e8:	f000 f8fc 	bl	80049e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80047ec:	4b10      	ldr	r3, [pc, #64]	; (8004830 <xPortStartScheduler+0x140>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a0f      	ldr	r2, [pc, #60]	; (8004830 <xPortStartScheduler+0x140>)
 80047f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80047f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80047f8:	f7ff ff66 	bl	80046c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047fc:	f7ff fba8 	bl	8003f50 <vTaskSwitchContext>
	prvTaskExitError();
 8004800:	f7ff ff20 	bl	8004644 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	e000ed00 	.word	0xe000ed00
 8004814:	410fc271 	.word	0x410fc271
 8004818:	410fc270 	.word	0x410fc270
 800481c:	e000e400 	.word	0xe000e400
 8004820:	200003bc 	.word	0x200003bc
 8004824:	200003c0 	.word	0x200003c0
 8004828:	e000ed20 	.word	0xe000ed20
 800482c:	20000014 	.word	0x20000014
 8004830:	e000ef34 	.word	0xe000ef34

08004834 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
	__asm volatile
 800483a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	607b      	str	r3, [r7, #4]
}
 800484c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800484e:	4b0f      	ldr	r3, [pc, #60]	; (800488c <vPortEnterCritical+0x58>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3301      	adds	r3, #1
 8004854:	4a0d      	ldr	r2, [pc, #52]	; (800488c <vPortEnterCritical+0x58>)
 8004856:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004858:	4b0c      	ldr	r3, [pc, #48]	; (800488c <vPortEnterCritical+0x58>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d10f      	bne.n	8004880 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004860:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <vPortEnterCritical+0x5c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <vPortEnterCritical+0x4c>
	__asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	603b      	str	r3, [r7, #0]
}
 800487c:	bf00      	nop
 800487e:	e7fe      	b.n	800487e <vPortEnterCritical+0x4a>
	}
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	20000014 	.word	0x20000014
 8004890:	e000ed04 	.word	0xe000ed04

08004894 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800489a:	4b12      	ldr	r3, [pc, #72]	; (80048e4 <vPortExitCritical+0x50>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10a      	bne.n	80048b8 <vPortExitCritical+0x24>
	__asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	607b      	str	r3, [r7, #4]
}
 80048b4:	bf00      	nop
 80048b6:	e7fe      	b.n	80048b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80048b8:	4b0a      	ldr	r3, [pc, #40]	; (80048e4 <vPortExitCritical+0x50>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3b01      	subs	r3, #1
 80048be:	4a09      	ldr	r2, [pc, #36]	; (80048e4 <vPortExitCritical+0x50>)
 80048c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80048c2:	4b08      	ldr	r3, [pc, #32]	; (80048e4 <vPortExitCritical+0x50>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d105      	bne.n	80048d6 <vPortExitCritical+0x42>
 80048ca:	2300      	movs	r3, #0
 80048cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	f383 8811 	msr	BASEPRI, r3
}
 80048d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	20000014 	.word	0x20000014
	...

080048f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048f0:	f3ef 8009 	mrs	r0, PSP
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	4b15      	ldr	r3, [pc, #84]	; (8004950 <pxCurrentTCBConst>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	f01e 0f10 	tst.w	lr, #16
 8004900:	bf08      	it	eq
 8004902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800490a:	6010      	str	r0, [r2, #0]
 800490c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004910:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004914:	f380 8811 	msr	BASEPRI, r0
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f7ff fb16 	bl	8003f50 <vTaskSwitchContext>
 8004924:	f04f 0000 	mov.w	r0, #0
 8004928:	f380 8811 	msr	BASEPRI, r0
 800492c:	bc09      	pop	{r0, r3}
 800492e:	6819      	ldr	r1, [r3, #0]
 8004930:	6808      	ldr	r0, [r1, #0]
 8004932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004936:	f01e 0f10 	tst.w	lr, #16
 800493a:	bf08      	it	eq
 800493c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004940:	f380 8809 	msr	PSP, r0
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	f3af 8000 	nop.w

08004950 <pxCurrentTCBConst>:
 8004950:	20000290 	.word	0x20000290
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop

08004958 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
	__asm volatile
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	607b      	str	r3, [r7, #4]
}
 8004970:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004972:	f7ff fa35 	bl	8003de0 <xTaskIncrementTick>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800497c:	4b06      	ldr	r3, [pc, #24]	; (8004998 <SysTick_Handler+0x40>)
 800497e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	2300      	movs	r3, #0
 8004986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	f383 8811 	msr	BASEPRI, r3
}
 800498e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004990:	bf00      	nop
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	e000ed04 	.word	0xe000ed04

0800499c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049a0:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <vPortSetupTimerInterrupt+0x34>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <vPortSetupTimerInterrupt+0x38>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049ac:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <vPortSetupTimerInterrupt+0x3c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a0a      	ldr	r2, [pc, #40]	; (80049dc <vPortSetupTimerInterrupt+0x40>)
 80049b2:	fba2 2303 	umull	r2, r3, r2, r3
 80049b6:	099b      	lsrs	r3, r3, #6
 80049b8:	4a09      	ldr	r2, [pc, #36]	; (80049e0 <vPortSetupTimerInterrupt+0x44>)
 80049ba:	3b01      	subs	r3, #1
 80049bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80049be:	4b04      	ldr	r3, [pc, #16]	; (80049d0 <vPortSetupTimerInterrupt+0x34>)
 80049c0:	2207      	movs	r2, #7
 80049c2:	601a      	str	r2, [r3, #0]
}
 80049c4:	bf00      	nop
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	e000e010 	.word	0xe000e010
 80049d4:	e000e018 	.word	0xe000e018
 80049d8:	20000008 	.word	0x20000008
 80049dc:	10624dd3 	.word	0x10624dd3
 80049e0:	e000e014 	.word	0xe000e014

080049e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80049e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80049f4 <vPortEnableVFP+0x10>
 80049e8:	6801      	ldr	r1, [r0, #0]
 80049ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80049ee:	6001      	str	r1, [r0, #0]
 80049f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80049f2:	bf00      	nop
 80049f4:	e000ed88 	.word	0xe000ed88

080049f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80049fe:	f3ef 8305 	mrs	r3, IPSR
 8004a02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b0f      	cmp	r3, #15
 8004a08:	d914      	bls.n	8004a34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a0a:	4a17      	ldr	r2, [pc, #92]	; (8004a68 <vPortValidateInterruptPriority+0x70>)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4413      	add	r3, r2
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a14:	4b15      	ldr	r3, [pc, #84]	; (8004a6c <vPortValidateInterruptPriority+0x74>)
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	7afa      	ldrb	r2, [r7, #11]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d20a      	bcs.n	8004a34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	607b      	str	r3, [r7, #4]
}
 8004a30:	bf00      	nop
 8004a32:	e7fe      	b.n	8004a32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a34:	4b0e      	ldr	r3, [pc, #56]	; (8004a70 <vPortValidateInterruptPriority+0x78>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a3c:	4b0d      	ldr	r3, [pc, #52]	; (8004a74 <vPortValidateInterruptPriority+0x7c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d90a      	bls.n	8004a5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	603b      	str	r3, [r7, #0]
}
 8004a56:	bf00      	nop
 8004a58:	e7fe      	b.n	8004a58 <vPortValidateInterruptPriority+0x60>
	}
 8004a5a:	bf00      	nop
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	e000e3f0 	.word	0xe000e3f0
 8004a6c:	200003bc 	.word	0x200003bc
 8004a70:	e000ed0c 	.word	0xe000ed0c
 8004a74:	200003c0 	.word	0x200003c0

08004a78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08a      	sub	sp, #40	; 0x28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a80:	2300      	movs	r3, #0
 8004a82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a84:	f7ff f902 	bl	8003c8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a88:	4b58      	ldr	r3, [pc, #352]	; (8004bec <pvPortMalloc+0x174>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a90:	f000 f910 	bl	8004cb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a94:	4b56      	ldr	r3, [pc, #344]	; (8004bf0 <pvPortMalloc+0x178>)
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f040 808e 	bne.w	8004bbe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01d      	beq.n	8004ae4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004aa8:	2208      	movs	r2, #8
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4413      	add	r3, r2
 8004aae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d014      	beq.n	8004ae4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f023 0307 	bic.w	r3, r3, #7
 8004ac0:	3308      	adds	r3, #8
 8004ac2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <pvPortMalloc+0x6c>
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	617b      	str	r3, [r7, #20]
}
 8004ae0:	bf00      	nop
 8004ae2:	e7fe      	b.n	8004ae2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d069      	beq.n	8004bbe <pvPortMalloc+0x146>
 8004aea:	4b42      	ldr	r3, [pc, #264]	; (8004bf4 <pvPortMalloc+0x17c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d864      	bhi.n	8004bbe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004af4:	4b40      	ldr	r3, [pc, #256]	; (8004bf8 <pvPortMalloc+0x180>)
 8004af6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004af8:	4b3f      	ldr	r3, [pc, #252]	; (8004bf8 <pvPortMalloc+0x180>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004afe:	e004      	b.n	8004b0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d903      	bls.n	8004b1c <pvPortMalloc+0xa4>
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1f1      	bne.n	8004b00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b1c:	4b33      	ldr	r3, [pc, #204]	; (8004bec <pvPortMalloc+0x174>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d04b      	beq.n	8004bbe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2208      	movs	r2, #8
 8004b2c:	4413      	add	r3, r2
 8004b2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	1ad2      	subs	r2, r2, r3
 8004b40:	2308      	movs	r3, #8
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d91f      	bls.n	8004b88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <pvPortMalloc+0xf8>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	613b      	str	r3, [r7, #16]
}
 8004b6c:	bf00      	nop
 8004b6e:	e7fe      	b.n	8004b6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	1ad2      	subs	r2, r2, r3
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b82:	69b8      	ldr	r0, [r7, #24]
 8004b84:	f000 f8f8 	bl	8004d78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b88:	4b1a      	ldr	r3, [pc, #104]	; (8004bf4 <pvPortMalloc+0x17c>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	4a18      	ldr	r2, [pc, #96]	; (8004bf4 <pvPortMalloc+0x17c>)
 8004b94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b96:	4b17      	ldr	r3, [pc, #92]	; (8004bf4 <pvPortMalloc+0x17c>)
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	4b18      	ldr	r3, [pc, #96]	; (8004bfc <pvPortMalloc+0x184>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d203      	bcs.n	8004baa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ba2:	4b14      	ldr	r3, [pc, #80]	; (8004bf4 <pvPortMalloc+0x17c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a15      	ldr	r2, [pc, #84]	; (8004bfc <pvPortMalloc+0x184>)
 8004ba8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	4b10      	ldr	r3, [pc, #64]	; (8004bf0 <pvPortMalloc+0x178>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	2200      	movs	r2, #0
 8004bbc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004bbe:	f7ff f873 	bl	8003ca8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00a      	beq.n	8004be2 <pvPortMalloc+0x16a>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	60fb      	str	r3, [r7, #12]
}
 8004bde:	bf00      	nop
 8004be0:	e7fe      	b.n	8004be0 <pvPortMalloc+0x168>
	return pvReturn;
 8004be2:	69fb      	ldr	r3, [r7, #28]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3728      	adds	r7, #40	; 0x28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	20000f84 	.word	0x20000f84
 8004bf0:	20000f90 	.word	0x20000f90
 8004bf4:	20000f88 	.word	0x20000f88
 8004bf8:	20000f7c 	.word	0x20000f7c
 8004bfc:	20000f8c 	.word	0x20000f8c

08004c00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d048      	beq.n	8004ca4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c12:	2308      	movs	r3, #8
 8004c14:	425b      	negs	r3, r3
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	4413      	add	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	4b21      	ldr	r3, [pc, #132]	; (8004cac <vPortFree+0xac>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <vPortFree+0x44>
	__asm volatile
 8004c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	60fb      	str	r3, [r7, #12]
}
 8004c40:	bf00      	nop
 8004c42:	e7fe      	b.n	8004c42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00a      	beq.n	8004c62 <vPortFree+0x62>
	__asm volatile
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	60bb      	str	r3, [r7, #8]
}
 8004c5e:	bf00      	nop
 8004c60:	e7fe      	b.n	8004c60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	4b11      	ldr	r3, [pc, #68]	; (8004cac <vPortFree+0xac>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d019      	beq.n	8004ca4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d115      	bne.n	8004ca4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	4b0b      	ldr	r3, [pc, #44]	; (8004cac <vPortFree+0xac>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	43db      	mvns	r3, r3
 8004c82:	401a      	ands	r2, r3
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c88:	f7ff f800 	bl	8003c8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <vPortFree+0xb0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4413      	add	r3, r2
 8004c96:	4a06      	ldr	r2, [pc, #24]	; (8004cb0 <vPortFree+0xb0>)
 8004c98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c9a:	6938      	ldr	r0, [r7, #16]
 8004c9c:	f000 f86c 	bl	8004d78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ca0:	f7ff f802 	bl	8003ca8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ca4:	bf00      	nop
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	20000f90 	.word	0x20000f90
 8004cb0:	20000f88 	.word	0x20000f88

08004cb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004cbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cc0:	4b27      	ldr	r3, [pc, #156]	; (8004d60 <prvHeapInit+0xac>)
 8004cc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00c      	beq.n	8004ce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	3307      	adds	r3, #7
 8004cd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0307 	bic.w	r3, r3, #7
 8004cda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	4a1f      	ldr	r2, [pc, #124]	; (8004d60 <prvHeapInit+0xac>)
 8004ce4:	4413      	add	r3, r2
 8004ce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cec:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <prvHeapInit+0xb0>)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cf2:	4b1c      	ldr	r3, [pc, #112]	; (8004d64 <prvHeapInit+0xb0>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d00:	2208      	movs	r2, #8
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1a9b      	subs	r3, r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0307 	bic.w	r3, r3, #7
 8004d0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4a15      	ldr	r2, [pc, #84]	; (8004d68 <prvHeapInit+0xb4>)
 8004d14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d16:	4b14      	ldr	r3, [pc, #80]	; (8004d68 <prvHeapInit+0xb4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d1e:	4b12      	ldr	r3, [pc, #72]	; (8004d68 <prvHeapInit+0xb4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	1ad2      	subs	r2, r2, r3
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d34:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <prvHeapInit+0xb4>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	4a0a      	ldr	r2, [pc, #40]	; (8004d6c <prvHeapInit+0xb8>)
 8004d42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	4a09      	ldr	r2, [pc, #36]	; (8004d70 <prvHeapInit+0xbc>)
 8004d4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d4c:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <prvHeapInit+0xc0>)
 8004d4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d52:	601a      	str	r2, [r3, #0]
}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	200003c4 	.word	0x200003c4
 8004d64:	20000f7c 	.word	0x20000f7c
 8004d68:	20000f84 	.word	0x20000f84
 8004d6c:	20000f8c 	.word	0x20000f8c
 8004d70:	20000f88 	.word	0x20000f88
 8004d74:	20000f90 	.word	0x20000f90

08004d78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d80:	4b28      	ldr	r3, [pc, #160]	; (8004e24 <prvInsertBlockIntoFreeList+0xac>)
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	e002      	b.n	8004d8c <prvInsertBlockIntoFreeList+0x14>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d8f7      	bhi.n	8004d86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	4413      	add	r3, r2
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d108      	bne.n	8004dba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	441a      	add	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	441a      	add	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d118      	bne.n	8004e00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	4b15      	ldr	r3, [pc, #84]	; (8004e28 <prvInsertBlockIntoFreeList+0xb0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d00d      	beq.n	8004df6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	441a      	add	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	e008      	b.n	8004e08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004df6:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <prvInsertBlockIntoFreeList+0xb0>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	e003      	b.n	8004e08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d002      	beq.n	8004e16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e16:	bf00      	nop
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	20000f7c 	.word	0x20000f7c
 8004e28:	20000f84 	.word	0x20000f84

08004e2c <__libc_init_array>:
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	4d0d      	ldr	r5, [pc, #52]	; (8004e64 <__libc_init_array+0x38>)
 8004e30:	4c0d      	ldr	r4, [pc, #52]	; (8004e68 <__libc_init_array+0x3c>)
 8004e32:	1b64      	subs	r4, r4, r5
 8004e34:	10a4      	asrs	r4, r4, #2
 8004e36:	2600      	movs	r6, #0
 8004e38:	42a6      	cmp	r6, r4
 8004e3a:	d109      	bne.n	8004e50 <__libc_init_array+0x24>
 8004e3c:	4d0b      	ldr	r5, [pc, #44]	; (8004e6c <__libc_init_array+0x40>)
 8004e3e:	4c0c      	ldr	r4, [pc, #48]	; (8004e70 <__libc_init_array+0x44>)
 8004e40:	f000 f82e 	bl	8004ea0 <_init>
 8004e44:	1b64      	subs	r4, r4, r5
 8004e46:	10a4      	asrs	r4, r4, #2
 8004e48:	2600      	movs	r6, #0
 8004e4a:	42a6      	cmp	r6, r4
 8004e4c:	d105      	bne.n	8004e5a <__libc_init_array+0x2e>
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}
 8004e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e54:	4798      	blx	r3
 8004e56:	3601      	adds	r6, #1
 8004e58:	e7ee      	b.n	8004e38 <__libc_init_array+0xc>
 8004e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5e:	4798      	blx	r3
 8004e60:	3601      	adds	r6, #1
 8004e62:	e7f2      	b.n	8004e4a <__libc_init_array+0x1e>
 8004e64:	08004f40 	.word	0x08004f40
 8004e68:	08004f40 	.word	0x08004f40
 8004e6c:	08004f40 	.word	0x08004f40
 8004e70:	08004f44 	.word	0x08004f44

08004e74 <memcpy>:
 8004e74:	440a      	add	r2, r1
 8004e76:	4291      	cmp	r1, r2
 8004e78:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e7c:	d100      	bne.n	8004e80 <memcpy+0xc>
 8004e7e:	4770      	bx	lr
 8004e80:	b510      	push	{r4, lr}
 8004e82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e8a:	4291      	cmp	r1, r2
 8004e8c:	d1f9      	bne.n	8004e82 <memcpy+0xe>
 8004e8e:	bd10      	pop	{r4, pc}

08004e90 <memset>:
 8004e90:	4402      	add	r2, r0
 8004e92:	4603      	mov	r3, r0
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d100      	bne.n	8004e9a <memset+0xa>
 8004e98:	4770      	bx	lr
 8004e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e9e:	e7f9      	b.n	8004e94 <memset+0x4>

08004ea0 <_init>:
 8004ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea2:	bf00      	nop
 8004ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ea6:	bc08      	pop	{r3}
 8004ea8:	469e      	mov	lr, r3
 8004eaa:	4770      	bx	lr

08004eac <_fini>:
 8004eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eae:	bf00      	nop
 8004eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eb2:	bc08      	pop	{r3}
 8004eb4:	469e      	mov	lr, r3
 8004eb6:	4770      	bx	lr
