
stm_custom_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .fw_info      00000260  080201c4  080201c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         000034ec  08020430  08020430  00010430  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000d4  0802391c  0802391c  0001391c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080239f0  080239f0  00020070  2**0
                  CONTENTS
  5 .ARM          00000008  080239f0  080239f0  000139f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080239f8  080239f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080239f8  080239f8  000139f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080239fc  080239fc  000139fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .dfu_section  00000004  0807fc00  0807fc00  0001fc00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000070  20000000  0807fc04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000070  20000070  0807fc74  00020070  2**2
                  ALLOC
 12 ._user_heap_stack 00001400  200000e0  0807fc74  000200e0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009823  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00001b8e  00000000  00000000  000298c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000007d0  00000000  00000000  0002b458  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000006d8  00000000  00000000  0002bc28  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0001fe5d  00000000  00000000  0002c300  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00007f8f  00000000  00000000  0004c15d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000bb215  00000000  00000000  000540ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0010f301  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000024a0  00000000  00000000  0010f37c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08020430 <__do_global_dtors_aux>:
 8020430:	b510      	push	{r4, lr}
 8020432:	4c05      	ldr	r4, [pc, #20]	; (8020448 <__do_global_dtors_aux+0x18>)
 8020434:	7823      	ldrb	r3, [r4, #0]
 8020436:	b933      	cbnz	r3, 8020446 <__do_global_dtors_aux+0x16>
 8020438:	4b04      	ldr	r3, [pc, #16]	; (802044c <__do_global_dtors_aux+0x1c>)
 802043a:	b113      	cbz	r3, 8020442 <__do_global_dtors_aux+0x12>
 802043c:	4804      	ldr	r0, [pc, #16]	; (8020450 <__do_global_dtors_aux+0x20>)
 802043e:	f3af 8000 	nop.w
 8020442:	2301      	movs	r3, #1
 8020444:	7023      	strb	r3, [r4, #0]
 8020446:	bd10      	pop	{r4, pc}
 8020448:	20000070 	.word	0x20000070
 802044c:	00000000 	.word	0x00000000
 8020450:	08023904 	.word	0x08023904

08020454 <frame_dummy>:
 8020454:	b508      	push	{r3, lr}
 8020456:	4b03      	ldr	r3, [pc, #12]	; (8020464 <frame_dummy+0x10>)
 8020458:	b11b      	cbz	r3, 8020462 <frame_dummy+0xe>
 802045a:	4903      	ldr	r1, [pc, #12]	; (8020468 <frame_dummy+0x14>)
 802045c:	4803      	ldr	r0, [pc, #12]	; (802046c <frame_dummy+0x18>)
 802045e:	f3af 8000 	nop.w
 8020462:	bd08      	pop	{r3, pc}
 8020464:	00000000 	.word	0x00000000
 8020468:	20000074 	.word	0x20000074
 802046c:	08023904 	.word	0x08023904

08020470 <memchr>:
 8020470:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8020474:	2a10      	cmp	r2, #16
 8020476:	db2b      	blt.n	80204d0 <memchr+0x60>
 8020478:	f010 0f07 	tst.w	r0, #7
 802047c:	d008      	beq.n	8020490 <memchr+0x20>
 802047e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020482:	3a01      	subs	r2, #1
 8020484:	428b      	cmp	r3, r1
 8020486:	d02d      	beq.n	80204e4 <memchr+0x74>
 8020488:	f010 0f07 	tst.w	r0, #7
 802048c:	b342      	cbz	r2, 80204e0 <memchr+0x70>
 802048e:	d1f6      	bne.n	802047e <memchr+0xe>
 8020490:	b4f0      	push	{r4, r5, r6, r7}
 8020492:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020496:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802049a:	f022 0407 	bic.w	r4, r2, #7
 802049e:	f07f 0700 	mvns.w	r7, #0
 80204a2:	2300      	movs	r3, #0
 80204a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80204a8:	3c08      	subs	r4, #8
 80204aa:	ea85 0501 	eor.w	r5, r5, r1
 80204ae:	ea86 0601 	eor.w	r6, r6, r1
 80204b2:	fa85 f547 	uadd8	r5, r5, r7
 80204b6:	faa3 f587 	sel	r5, r3, r7
 80204ba:	fa86 f647 	uadd8	r6, r6, r7
 80204be:	faa5 f687 	sel	r6, r5, r7
 80204c2:	b98e      	cbnz	r6, 80204e8 <memchr+0x78>
 80204c4:	d1ee      	bne.n	80204a4 <memchr+0x34>
 80204c6:	bcf0      	pop	{r4, r5, r6, r7}
 80204c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80204cc:	f002 0207 	and.w	r2, r2, #7
 80204d0:	b132      	cbz	r2, 80204e0 <memchr+0x70>
 80204d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80204d6:	3a01      	subs	r2, #1
 80204d8:	ea83 0301 	eor.w	r3, r3, r1
 80204dc:	b113      	cbz	r3, 80204e4 <memchr+0x74>
 80204de:	d1f8      	bne.n	80204d2 <memchr+0x62>
 80204e0:	2000      	movs	r0, #0
 80204e2:	4770      	bx	lr
 80204e4:	3801      	subs	r0, #1
 80204e6:	4770      	bx	lr
 80204e8:	2d00      	cmp	r5, #0
 80204ea:	bf06      	itte	eq
 80204ec:	4635      	moveq	r5, r6
 80204ee:	3803      	subeq	r0, #3
 80204f0:	3807      	subne	r0, #7
 80204f2:	f015 0f01 	tst.w	r5, #1
 80204f6:	d107      	bne.n	8020508 <memchr+0x98>
 80204f8:	3001      	adds	r0, #1
 80204fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80204fe:	bf02      	ittt	eq
 8020500:	3001      	addeq	r0, #1
 8020502:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020506:	3001      	addeq	r0, #1
 8020508:	bcf0      	pop	{r4, r5, r6, r7}
 802050a:	3801      	subs	r0, #1
 802050c:	4770      	bx	lr
 802050e:	bf00      	nop

08020510 <__aeabi_uldivmod>:
 8020510:	b953      	cbnz	r3, 8020528 <__aeabi_uldivmod+0x18>
 8020512:	b94a      	cbnz	r2, 8020528 <__aeabi_uldivmod+0x18>
 8020514:	2900      	cmp	r1, #0
 8020516:	bf08      	it	eq
 8020518:	2800      	cmpeq	r0, #0
 802051a:	bf1c      	itt	ne
 802051c:	f04f 31ff 	movne.w	r1, #4294967295
 8020520:	f04f 30ff 	movne.w	r0, #4294967295
 8020524:	f000 b972 	b.w	802080c <__aeabi_idiv0>
 8020528:	f1ad 0c08 	sub.w	ip, sp, #8
 802052c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020530:	f000 f806 	bl	8020540 <__udivmoddi4>
 8020534:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020538:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802053c:	b004      	add	sp, #16
 802053e:	4770      	bx	lr

08020540 <__udivmoddi4>:
 8020540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020544:	9e08      	ldr	r6, [sp, #32]
 8020546:	4604      	mov	r4, r0
 8020548:	4688      	mov	r8, r1
 802054a:	2b00      	cmp	r3, #0
 802054c:	d14b      	bne.n	80205e6 <__udivmoddi4+0xa6>
 802054e:	428a      	cmp	r2, r1
 8020550:	4615      	mov	r5, r2
 8020552:	d967      	bls.n	8020624 <__udivmoddi4+0xe4>
 8020554:	fab2 f282 	clz	r2, r2
 8020558:	b14a      	cbz	r2, 802056e <__udivmoddi4+0x2e>
 802055a:	f1c2 0720 	rsb	r7, r2, #32
 802055e:	fa01 f302 	lsl.w	r3, r1, r2
 8020562:	fa20 f707 	lsr.w	r7, r0, r7
 8020566:	4095      	lsls	r5, r2
 8020568:	ea47 0803 	orr.w	r8, r7, r3
 802056c:	4094      	lsls	r4, r2
 802056e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020572:	0c23      	lsrs	r3, r4, #16
 8020574:	fbb8 f7fe 	udiv	r7, r8, lr
 8020578:	fa1f fc85 	uxth.w	ip, r5
 802057c:	fb0e 8817 	mls	r8, lr, r7, r8
 8020580:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020584:	fb07 f10c 	mul.w	r1, r7, ip
 8020588:	4299      	cmp	r1, r3
 802058a:	d909      	bls.n	80205a0 <__udivmoddi4+0x60>
 802058c:	18eb      	adds	r3, r5, r3
 802058e:	f107 30ff 	add.w	r0, r7, #4294967295
 8020592:	f080 811b 	bcs.w	80207cc <__udivmoddi4+0x28c>
 8020596:	4299      	cmp	r1, r3
 8020598:	f240 8118 	bls.w	80207cc <__udivmoddi4+0x28c>
 802059c:	3f02      	subs	r7, #2
 802059e:	442b      	add	r3, r5
 80205a0:	1a5b      	subs	r3, r3, r1
 80205a2:	b2a4      	uxth	r4, r4
 80205a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80205a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80205ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80205b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80205b4:	45a4      	cmp	ip, r4
 80205b6:	d909      	bls.n	80205cc <__udivmoddi4+0x8c>
 80205b8:	192c      	adds	r4, r5, r4
 80205ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80205be:	f080 8107 	bcs.w	80207d0 <__udivmoddi4+0x290>
 80205c2:	45a4      	cmp	ip, r4
 80205c4:	f240 8104 	bls.w	80207d0 <__udivmoddi4+0x290>
 80205c8:	3802      	subs	r0, #2
 80205ca:	442c      	add	r4, r5
 80205cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80205d0:	eba4 040c 	sub.w	r4, r4, ip
 80205d4:	2700      	movs	r7, #0
 80205d6:	b11e      	cbz	r6, 80205e0 <__udivmoddi4+0xa0>
 80205d8:	40d4      	lsrs	r4, r2
 80205da:	2300      	movs	r3, #0
 80205dc:	e9c6 4300 	strd	r4, r3, [r6]
 80205e0:	4639      	mov	r1, r7
 80205e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80205e6:	428b      	cmp	r3, r1
 80205e8:	d909      	bls.n	80205fe <__udivmoddi4+0xbe>
 80205ea:	2e00      	cmp	r6, #0
 80205ec:	f000 80eb 	beq.w	80207c6 <__udivmoddi4+0x286>
 80205f0:	2700      	movs	r7, #0
 80205f2:	e9c6 0100 	strd	r0, r1, [r6]
 80205f6:	4638      	mov	r0, r7
 80205f8:	4639      	mov	r1, r7
 80205fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80205fe:	fab3 f783 	clz	r7, r3
 8020602:	2f00      	cmp	r7, #0
 8020604:	d147      	bne.n	8020696 <__udivmoddi4+0x156>
 8020606:	428b      	cmp	r3, r1
 8020608:	d302      	bcc.n	8020610 <__udivmoddi4+0xd0>
 802060a:	4282      	cmp	r2, r0
 802060c:	f200 80fa 	bhi.w	8020804 <__udivmoddi4+0x2c4>
 8020610:	1a84      	subs	r4, r0, r2
 8020612:	eb61 0303 	sbc.w	r3, r1, r3
 8020616:	2001      	movs	r0, #1
 8020618:	4698      	mov	r8, r3
 802061a:	2e00      	cmp	r6, #0
 802061c:	d0e0      	beq.n	80205e0 <__udivmoddi4+0xa0>
 802061e:	e9c6 4800 	strd	r4, r8, [r6]
 8020622:	e7dd      	b.n	80205e0 <__udivmoddi4+0xa0>
 8020624:	b902      	cbnz	r2, 8020628 <__udivmoddi4+0xe8>
 8020626:	deff      	udf	#255	; 0xff
 8020628:	fab2 f282 	clz	r2, r2
 802062c:	2a00      	cmp	r2, #0
 802062e:	f040 808f 	bne.w	8020750 <__udivmoddi4+0x210>
 8020632:	1b49      	subs	r1, r1, r5
 8020634:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020638:	fa1f f885 	uxth.w	r8, r5
 802063c:	2701      	movs	r7, #1
 802063e:	fbb1 fcfe 	udiv	ip, r1, lr
 8020642:	0c23      	lsrs	r3, r4, #16
 8020644:	fb0e 111c 	mls	r1, lr, ip, r1
 8020648:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 802064c:	fb08 f10c 	mul.w	r1, r8, ip
 8020650:	4299      	cmp	r1, r3
 8020652:	d907      	bls.n	8020664 <__udivmoddi4+0x124>
 8020654:	18eb      	adds	r3, r5, r3
 8020656:	f10c 30ff 	add.w	r0, ip, #4294967295
 802065a:	d202      	bcs.n	8020662 <__udivmoddi4+0x122>
 802065c:	4299      	cmp	r1, r3
 802065e:	f200 80cd 	bhi.w	80207fc <__udivmoddi4+0x2bc>
 8020662:	4684      	mov	ip, r0
 8020664:	1a59      	subs	r1, r3, r1
 8020666:	b2a3      	uxth	r3, r4
 8020668:	fbb1 f0fe 	udiv	r0, r1, lr
 802066c:	fb0e 1410 	mls	r4, lr, r0, r1
 8020670:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8020674:	fb08 f800 	mul.w	r8, r8, r0
 8020678:	45a0      	cmp	r8, r4
 802067a:	d907      	bls.n	802068c <__udivmoddi4+0x14c>
 802067c:	192c      	adds	r4, r5, r4
 802067e:	f100 33ff 	add.w	r3, r0, #4294967295
 8020682:	d202      	bcs.n	802068a <__udivmoddi4+0x14a>
 8020684:	45a0      	cmp	r8, r4
 8020686:	f200 80b6 	bhi.w	80207f6 <__udivmoddi4+0x2b6>
 802068a:	4618      	mov	r0, r3
 802068c:	eba4 0408 	sub.w	r4, r4, r8
 8020690:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020694:	e79f      	b.n	80205d6 <__udivmoddi4+0x96>
 8020696:	f1c7 0c20 	rsb	ip, r7, #32
 802069a:	40bb      	lsls	r3, r7
 802069c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80206a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80206a4:	fa01 f407 	lsl.w	r4, r1, r7
 80206a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80206ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80206b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80206b4:	4325      	orrs	r5, r4
 80206b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80206ba:	0c2c      	lsrs	r4, r5, #16
 80206bc:	fb08 3319 	mls	r3, r8, r9, r3
 80206c0:	fa1f fa8e 	uxth.w	sl, lr
 80206c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80206c8:	fb09 f40a 	mul.w	r4, r9, sl
 80206cc:	429c      	cmp	r4, r3
 80206ce:	fa02 f207 	lsl.w	r2, r2, r7
 80206d2:	fa00 f107 	lsl.w	r1, r0, r7
 80206d6:	d90b      	bls.n	80206f0 <__udivmoddi4+0x1b0>
 80206d8:	eb1e 0303 	adds.w	r3, lr, r3
 80206dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80206e0:	f080 8087 	bcs.w	80207f2 <__udivmoddi4+0x2b2>
 80206e4:	429c      	cmp	r4, r3
 80206e6:	f240 8084 	bls.w	80207f2 <__udivmoddi4+0x2b2>
 80206ea:	f1a9 0902 	sub.w	r9, r9, #2
 80206ee:	4473      	add	r3, lr
 80206f0:	1b1b      	subs	r3, r3, r4
 80206f2:	b2ad      	uxth	r5, r5
 80206f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80206f8:	fb08 3310 	mls	r3, r8, r0, r3
 80206fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8020700:	fb00 fa0a 	mul.w	sl, r0, sl
 8020704:	45a2      	cmp	sl, r4
 8020706:	d908      	bls.n	802071a <__udivmoddi4+0x1da>
 8020708:	eb1e 0404 	adds.w	r4, lr, r4
 802070c:	f100 33ff 	add.w	r3, r0, #4294967295
 8020710:	d26b      	bcs.n	80207ea <__udivmoddi4+0x2aa>
 8020712:	45a2      	cmp	sl, r4
 8020714:	d969      	bls.n	80207ea <__udivmoddi4+0x2aa>
 8020716:	3802      	subs	r0, #2
 8020718:	4474      	add	r4, lr
 802071a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 802071e:	fba0 8902 	umull	r8, r9, r0, r2
 8020722:	eba4 040a 	sub.w	r4, r4, sl
 8020726:	454c      	cmp	r4, r9
 8020728:	46c2      	mov	sl, r8
 802072a:	464b      	mov	r3, r9
 802072c:	d354      	bcc.n	80207d8 <__udivmoddi4+0x298>
 802072e:	d051      	beq.n	80207d4 <__udivmoddi4+0x294>
 8020730:	2e00      	cmp	r6, #0
 8020732:	d069      	beq.n	8020808 <__udivmoddi4+0x2c8>
 8020734:	ebb1 050a 	subs.w	r5, r1, sl
 8020738:	eb64 0403 	sbc.w	r4, r4, r3
 802073c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8020740:	40fd      	lsrs	r5, r7
 8020742:	40fc      	lsrs	r4, r7
 8020744:	ea4c 0505 	orr.w	r5, ip, r5
 8020748:	e9c6 5400 	strd	r5, r4, [r6]
 802074c:	2700      	movs	r7, #0
 802074e:	e747      	b.n	80205e0 <__udivmoddi4+0xa0>
 8020750:	f1c2 0320 	rsb	r3, r2, #32
 8020754:	fa20 f703 	lsr.w	r7, r0, r3
 8020758:	4095      	lsls	r5, r2
 802075a:	fa01 f002 	lsl.w	r0, r1, r2
 802075e:	fa21 f303 	lsr.w	r3, r1, r3
 8020762:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020766:	4338      	orrs	r0, r7
 8020768:	0c01      	lsrs	r1, r0, #16
 802076a:	fbb3 f7fe 	udiv	r7, r3, lr
 802076e:	fa1f f885 	uxth.w	r8, r5
 8020772:	fb0e 3317 	mls	r3, lr, r7, r3
 8020776:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 802077a:	fb07 f308 	mul.w	r3, r7, r8
 802077e:	428b      	cmp	r3, r1
 8020780:	fa04 f402 	lsl.w	r4, r4, r2
 8020784:	d907      	bls.n	8020796 <__udivmoddi4+0x256>
 8020786:	1869      	adds	r1, r5, r1
 8020788:	f107 3cff 	add.w	ip, r7, #4294967295
 802078c:	d22f      	bcs.n	80207ee <__udivmoddi4+0x2ae>
 802078e:	428b      	cmp	r3, r1
 8020790:	d92d      	bls.n	80207ee <__udivmoddi4+0x2ae>
 8020792:	3f02      	subs	r7, #2
 8020794:	4429      	add	r1, r5
 8020796:	1acb      	subs	r3, r1, r3
 8020798:	b281      	uxth	r1, r0
 802079a:	fbb3 f0fe 	udiv	r0, r3, lr
 802079e:	fb0e 3310 	mls	r3, lr, r0, r3
 80207a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80207a6:	fb00 f308 	mul.w	r3, r0, r8
 80207aa:	428b      	cmp	r3, r1
 80207ac:	d907      	bls.n	80207be <__udivmoddi4+0x27e>
 80207ae:	1869      	adds	r1, r5, r1
 80207b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80207b4:	d217      	bcs.n	80207e6 <__udivmoddi4+0x2a6>
 80207b6:	428b      	cmp	r3, r1
 80207b8:	d915      	bls.n	80207e6 <__udivmoddi4+0x2a6>
 80207ba:	3802      	subs	r0, #2
 80207bc:	4429      	add	r1, r5
 80207be:	1ac9      	subs	r1, r1, r3
 80207c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80207c4:	e73b      	b.n	802063e <__udivmoddi4+0xfe>
 80207c6:	4637      	mov	r7, r6
 80207c8:	4630      	mov	r0, r6
 80207ca:	e709      	b.n	80205e0 <__udivmoddi4+0xa0>
 80207cc:	4607      	mov	r7, r0
 80207ce:	e6e7      	b.n	80205a0 <__udivmoddi4+0x60>
 80207d0:	4618      	mov	r0, r3
 80207d2:	e6fb      	b.n	80205cc <__udivmoddi4+0x8c>
 80207d4:	4541      	cmp	r1, r8
 80207d6:	d2ab      	bcs.n	8020730 <__udivmoddi4+0x1f0>
 80207d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80207dc:	eb69 020e 	sbc.w	r2, r9, lr
 80207e0:	3801      	subs	r0, #1
 80207e2:	4613      	mov	r3, r2
 80207e4:	e7a4      	b.n	8020730 <__udivmoddi4+0x1f0>
 80207e6:	4660      	mov	r0, ip
 80207e8:	e7e9      	b.n	80207be <__udivmoddi4+0x27e>
 80207ea:	4618      	mov	r0, r3
 80207ec:	e795      	b.n	802071a <__udivmoddi4+0x1da>
 80207ee:	4667      	mov	r7, ip
 80207f0:	e7d1      	b.n	8020796 <__udivmoddi4+0x256>
 80207f2:	4681      	mov	r9, r0
 80207f4:	e77c      	b.n	80206f0 <__udivmoddi4+0x1b0>
 80207f6:	3802      	subs	r0, #2
 80207f8:	442c      	add	r4, r5
 80207fa:	e747      	b.n	802068c <__udivmoddi4+0x14c>
 80207fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8020800:	442b      	add	r3, r5
 8020802:	e72f      	b.n	8020664 <__udivmoddi4+0x124>
 8020804:	4638      	mov	r0, r7
 8020806:	e708      	b.n	802061a <__udivmoddi4+0xda>
 8020808:	4637      	mov	r7, r6
 802080a:	e6e9      	b.n	80205e0 <__udivmoddi4+0xa0>

0802080c <__aeabi_idiv0>:
 802080c:	4770      	bx	lr
 802080e:	bf00      	nop

08020810 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8020810:	b580      	push	{r7, lr}
 8020812:	b088      	sub	sp, #32
 8020814:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020816:	f107 030c 	add.w	r3, r7, #12
 802081a:	2200      	movs	r2, #0
 802081c:	601a      	str	r2, [r3, #0]
 802081e:	605a      	str	r2, [r3, #4]
 8020820:	609a      	str	r2, [r3, #8]
 8020822:	60da      	str	r2, [r3, #12]
 8020824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8020826:	2300      	movs	r3, #0
 8020828:	60bb      	str	r3, [r7, #8]
 802082a:	4b20      	ldr	r3, [pc, #128]	; (80208ac <MX_GPIO_Init+0x9c>)
 802082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802082e:	4a1f      	ldr	r2, [pc, #124]	; (80208ac <MX_GPIO_Init+0x9c>)
 8020830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020834:	6313      	str	r3, [r2, #48]	; 0x30
 8020836:	4b1d      	ldr	r3, [pc, #116]	; (80208ac <MX_GPIO_Init+0x9c>)
 8020838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802083a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802083e:	60bb      	str	r3, [r7, #8]
 8020840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8020842:	2300      	movs	r3, #0
 8020844:	607b      	str	r3, [r7, #4]
 8020846:	4b19      	ldr	r3, [pc, #100]	; (80208ac <MX_GPIO_Init+0x9c>)
 8020848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802084a:	4a18      	ldr	r2, [pc, #96]	; (80208ac <MX_GPIO_Init+0x9c>)
 802084c:	f043 0301 	orr.w	r3, r3, #1
 8020850:	6313      	str	r3, [r2, #48]	; 0x30
 8020852:	4b16      	ldr	r3, [pc, #88]	; (80208ac <MX_GPIO_Init+0x9c>)
 8020854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020856:	f003 0301 	and.w	r3, r3, #1
 802085a:	607b      	str	r3, [r7, #4]
 802085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802085e:	2300      	movs	r3, #0
 8020860:	603b      	str	r3, [r7, #0]
 8020862:	4b12      	ldr	r3, [pc, #72]	; (80208ac <MX_GPIO_Init+0x9c>)
 8020864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020866:	4a11      	ldr	r2, [pc, #68]	; (80208ac <MX_GPIO_Init+0x9c>)
 8020868:	f043 0302 	orr.w	r3, r3, #2
 802086c:	6313      	str	r3, [r2, #48]	; 0x30
 802086e:	4b0f      	ldr	r3, [pc, #60]	; (80208ac <MX_GPIO_Init+0x9c>)
 8020870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020872:	f003 0302 	and.w	r3, r3, #2
 8020876:	603b      	str	r3, [r7, #0]
 8020878:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_SET);
 802087a:	2201      	movs	r2, #1
 802087c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8020880:	480b      	ldr	r0, [pc, #44]	; (80208b0 <MX_GPIO_Init+0xa0>)
 8020882:	f000 fdd5 	bl	8021430 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 8020886:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 802088a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802088c:	2301      	movs	r3, #1
 802088e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020890:	2300      	movs	r3, #0
 8020892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020894:	2300      	movs	r3, #0
 8020896:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8020898:	f107 030c 	add.w	r3, r7, #12
 802089c:	4619      	mov	r1, r3
 802089e:	4804      	ldr	r0, [pc, #16]	; (80208b0 <MX_GPIO_Init+0xa0>)
 80208a0:	f000 fc34 	bl	802110c <HAL_GPIO_Init>

}
 80208a4:	bf00      	nop
 80208a6:	3720      	adds	r7, #32
 80208a8:	46bd      	mov	sp, r7
 80208aa:	bd80      	pop	{r7, pc}
 80208ac:	40023800 	.word	0x40023800
 80208b0:	40020400 	.word	0x40020400

080208b4 <__io_putchar>:
//   HAL_UART_Transmit_IT(&huart2, (uint8_t*)&p, len);
//   return len;
// }

int __io_putchar(int ch)
{
 80208b4:	b580      	push	{r7, lr}
 80208b6:	b082      	sub	sp, #8
 80208b8:	af00      	add	r7, sp, #0
 80208ba:	6078      	str	r0, [r7, #4]
	// if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) != HAL_OK)
	// 	return -1;
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10);
 80208bc:	1d39      	adds	r1, r7, #4
 80208be:	230a      	movs	r3, #10
 80208c0:	2201      	movs	r2, #1
 80208c2:	4804      	ldr	r0, [pc, #16]	; (80208d4 <__io_putchar+0x20>)
 80208c4:	f001 fa69 	bl	8021d9a <HAL_UART_Transmit>
	return ch;
 80208c8:	687b      	ldr	r3, [r7, #4]
}
 80208ca:	4618      	mov	r0, r3
 80208cc:	3708      	adds	r7, #8
 80208ce:	46bd      	mov	sp, r7
 80208d0:	bd80      	pop	{r7, pc}
 80208d2:	bf00      	nop
 80208d4:	20000098 	.word	0x20000098

080208d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80208d8:	b580      	push	{r7, lr}
 80208da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80208dc:	f000 fa4e 	bl	8020d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80208e0:	f000 f824 	bl	802092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80208e4:	f7ff ff94 	bl	8020810 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80208e8:	f000 f98e 	bl	8020c08 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("app main code start version : %d \r\n", fw_info_sim.version);
 80208ec:	4b0c      	ldr	r3, [pc, #48]	; (8020920 <main+0x48>)
 80208ee:	8c1b      	ldrh	r3, [r3, #32]
 80208f0:	4619      	mov	r1, r3
 80208f2:	480c      	ldr	r0, [pc, #48]	; (8020924 <main+0x4c>)
 80208f4:	f002 f922 	bl	8022b3c <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80208f8:	2200      	movs	r2, #0
 80208fa:	2180      	movs	r1, #128	; 0x80
 80208fc:	480a      	ldr	r0, [pc, #40]	; (8020928 <main+0x50>)
 80208fe:	f000 fd97 	bl	8021430 <HAL_GPIO_WritePin>

  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8020902:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020906:	4808      	ldr	r0, [pc, #32]	; (8020928 <main+0x50>)
 8020908:	f000 fdab 	bl	8021462 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 802090c:	2180      	movs	r1, #128	; 0x80
 802090e:	4806      	ldr	r0, [pc, #24]	; (8020928 <main+0x50>)
 8020910:	f000 fda7 	bl	8021462 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8020914:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8020918:	f000 faa2 	bl	8020e60 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 802091c:	e7f1      	b.n	8020902 <main+0x2a>
 802091e:	bf00      	nop
 8020920:	08020400 	.word	0x08020400
 8020924:	0802391c 	.word	0x0802391c
 8020928:	40020400 	.word	0x40020400

0802092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 802092c:	b580      	push	{r7, lr}
 802092e:	b094      	sub	sp, #80	; 0x50
 8020930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8020932:	f107 031c 	add.w	r3, r7, #28
 8020936:	2234      	movs	r2, #52	; 0x34
 8020938:	2100      	movs	r1, #0
 802093a:	4618      	mov	r0, r3
 802093c:	f002 f8f6 	bl	8022b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8020940:	f107 0308 	add.w	r3, r7, #8
 8020944:	2200      	movs	r2, #0
 8020946:	601a      	str	r2, [r3, #0]
 8020948:	605a      	str	r2, [r3, #4]
 802094a:	609a      	str	r2, [r3, #8]
 802094c:	60da      	str	r2, [r3, #12]
 802094e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8020950:	2300      	movs	r3, #0
 8020952:	607b      	str	r3, [r7, #4]
 8020954:	4b28      	ldr	r3, [pc, #160]	; (80209f8 <SystemClock_Config+0xcc>)
 8020956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020958:	4a27      	ldr	r2, [pc, #156]	; (80209f8 <SystemClock_Config+0xcc>)
 802095a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802095e:	6413      	str	r3, [r2, #64]	; 0x40
 8020960:	4b25      	ldr	r3, [pc, #148]	; (80209f8 <SystemClock_Config+0xcc>)
 8020962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020968:	607b      	str	r3, [r7, #4]
 802096a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 802096c:	2300      	movs	r3, #0
 802096e:	603b      	str	r3, [r7, #0]
 8020970:	4b22      	ldr	r3, [pc, #136]	; (80209fc <SystemClock_Config+0xd0>)
 8020972:	681b      	ldr	r3, [r3, #0]
 8020974:	4a21      	ldr	r2, [pc, #132]	; (80209fc <SystemClock_Config+0xd0>)
 8020976:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 802097a:	6013      	str	r3, [r2, #0]
 802097c:	4b1f      	ldr	r3, [pc, #124]	; (80209fc <SystemClock_Config+0xd0>)
 802097e:	681b      	ldr	r3, [r3, #0]
 8020980:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8020984:	603b      	str	r3, [r7, #0]
 8020986:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8020988:	2301      	movs	r3, #1
 802098a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 802098c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8020990:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020992:	2302      	movs	r3, #2
 8020994:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8020996:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802099a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 802099c:	2304      	movs	r3, #4
 802099e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80209a0:	2360      	movs	r3, #96	; 0x60
 80209a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80209a4:	2302      	movs	r3, #2
 80209a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80209a8:	2302      	movs	r3, #2
 80209aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80209ac:	2302      	movs	r3, #2
 80209ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80209b0:	f107 031c 	add.w	r3, r7, #28
 80209b4:	4618      	mov	r0, r3
 80209b6:	f000 ff61 	bl	802187c <HAL_RCC_OscConfig>
 80209ba:	4603      	mov	r3, r0
 80209bc:	2b00      	cmp	r3, #0
 80209be:	d001      	beq.n	80209c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80209c0:	f000 f81e 	bl	8020a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80209c4:	230f      	movs	r3, #15
 80209c6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80209c8:	2302      	movs	r3, #2
 80209ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80209cc:	2300      	movs	r3, #0
 80209ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80209d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80209d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80209d6:	2300      	movs	r3, #0
 80209d8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80209da:	f107 0308 	add.w	r3, r7, #8
 80209de:	2103      	movs	r1, #3
 80209e0:	4618      	mov	r0, r3
 80209e2:	f000 fd59 	bl	8021498 <HAL_RCC_ClockConfig>
 80209e6:	4603      	mov	r3, r0
 80209e8:	2b00      	cmp	r3, #0
 80209ea:	d001      	beq.n	80209f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80209ec:	f000 f808 	bl	8020a00 <Error_Handler>
  }
}
 80209f0:	bf00      	nop
 80209f2:	3750      	adds	r7, #80	; 0x50
 80209f4:	46bd      	mov	sp, r7
 80209f6:	bd80      	pop	{r7, pc}
 80209f8:	40023800 	.word	0x40023800
 80209fc:	40007000 	.word	0x40007000

08020a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020a00:	b480      	push	{r7}
 8020a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8020a04:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8020a06:	e7fe      	b.n	8020a06 <Error_Handler+0x6>

08020a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020a08:	b480      	push	{r7}
 8020a0a:	b083      	sub	sp, #12
 8020a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020a0e:	2300      	movs	r3, #0
 8020a10:	607b      	str	r3, [r7, #4]
 8020a12:	4b10      	ldr	r3, [pc, #64]	; (8020a54 <HAL_MspInit+0x4c>)
 8020a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020a16:	4a0f      	ldr	r2, [pc, #60]	; (8020a54 <HAL_MspInit+0x4c>)
 8020a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8020a1e:	4b0d      	ldr	r3, [pc, #52]	; (8020a54 <HAL_MspInit+0x4c>)
 8020a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020a26:	607b      	str	r3, [r7, #4]
 8020a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8020a2a:	2300      	movs	r3, #0
 8020a2c:	603b      	str	r3, [r7, #0]
 8020a2e:	4b09      	ldr	r3, [pc, #36]	; (8020a54 <HAL_MspInit+0x4c>)
 8020a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020a32:	4a08      	ldr	r2, [pc, #32]	; (8020a54 <HAL_MspInit+0x4c>)
 8020a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020a38:	6413      	str	r3, [r2, #64]	; 0x40
 8020a3a:	4b06      	ldr	r3, [pc, #24]	; (8020a54 <HAL_MspInit+0x4c>)
 8020a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020a42:	603b      	str	r3, [r7, #0]
 8020a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8020a46:	bf00      	nop
 8020a48:	370c      	adds	r7, #12
 8020a4a:	46bd      	mov	sp, r7
 8020a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a50:	4770      	bx	lr
 8020a52:	bf00      	nop
 8020a54:	40023800 	.word	0x40023800

08020a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8020a58:	b480      	push	{r7}
 8020a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8020a5c:	e7fe      	b.n	8020a5c <NMI_Handler+0x4>

08020a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8020a5e:	b480      	push	{r7}
 8020a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8020a62:	e7fe      	b.n	8020a62 <HardFault_Handler+0x4>

08020a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8020a64:	b480      	push	{r7}
 8020a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8020a68:	e7fe      	b.n	8020a68 <MemManage_Handler+0x4>

08020a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8020a6a:	b480      	push	{r7}
 8020a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8020a6e:	e7fe      	b.n	8020a6e <BusFault_Handler+0x4>

08020a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8020a70:	b480      	push	{r7}
 8020a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8020a74:	e7fe      	b.n	8020a74 <UsageFault_Handler+0x4>

08020a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8020a76:	b480      	push	{r7}
 8020a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8020a7a:	bf00      	nop
 8020a7c:	46bd      	mov	sp, r7
 8020a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a82:	4770      	bx	lr

08020a84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8020a84:	b480      	push	{r7}
 8020a86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8020a88:	bf00      	nop
 8020a8a:	46bd      	mov	sp, r7
 8020a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a90:	4770      	bx	lr

08020a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8020a92:	b480      	push	{r7}
 8020a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8020a96:	bf00      	nop
 8020a98:	46bd      	mov	sp, r7
 8020a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a9e:	4770      	bx	lr

08020aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8020aa0:	b580      	push	{r7, lr}
 8020aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8020aa4:	f000 f9bc 	bl	8020e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8020aa8:	bf00      	nop
 8020aaa:	bd80      	pop	{r7, pc}

08020aac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8020aac:	b580      	push	{r7, lr}
 8020aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8020ab0:	4802      	ldr	r0, [pc, #8]	; (8020abc <USART2_IRQHandler+0x10>)
 8020ab2:	f001 fa0b 	bl	8021ecc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8020ab6:	bf00      	nop
 8020ab8:	bd80      	pop	{r7, pc}
 8020aba:	bf00      	nop
 8020abc:	20000098 	.word	0x20000098

08020ac0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8020ac0:	b580      	push	{r7, lr}
 8020ac2:	b086      	sub	sp, #24
 8020ac4:	af00      	add	r7, sp, #0
 8020ac6:	60f8      	str	r0, [r7, #12]
 8020ac8:	60b9      	str	r1, [r7, #8]
 8020aca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020acc:	2300      	movs	r3, #0
 8020ace:	617b      	str	r3, [r7, #20]
 8020ad0:	e00a      	b.n	8020ae8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8020ad2:	f3af 8000 	nop.w
 8020ad6:	4601      	mov	r1, r0
 8020ad8:	68bb      	ldr	r3, [r7, #8]
 8020ada:	1c5a      	adds	r2, r3, #1
 8020adc:	60ba      	str	r2, [r7, #8]
 8020ade:	b2ca      	uxtb	r2, r1
 8020ae0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020ae2:	697b      	ldr	r3, [r7, #20]
 8020ae4:	3301      	adds	r3, #1
 8020ae6:	617b      	str	r3, [r7, #20]
 8020ae8:	697a      	ldr	r2, [r7, #20]
 8020aea:	687b      	ldr	r3, [r7, #4]
 8020aec:	429a      	cmp	r2, r3
 8020aee:	dbf0      	blt.n	8020ad2 <_read+0x12>
	}

return len;
 8020af0:	687b      	ldr	r3, [r7, #4]
}
 8020af2:	4618      	mov	r0, r3
 8020af4:	3718      	adds	r7, #24
 8020af6:	46bd      	mov	sp, r7
 8020af8:	bd80      	pop	{r7, pc}

08020afa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8020afa:	b580      	push	{r7, lr}
 8020afc:	b086      	sub	sp, #24
 8020afe:	af00      	add	r7, sp, #0
 8020b00:	60f8      	str	r0, [r7, #12]
 8020b02:	60b9      	str	r1, [r7, #8]
 8020b04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020b06:	2300      	movs	r3, #0
 8020b08:	617b      	str	r3, [r7, #20]
 8020b0a:	e009      	b.n	8020b20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8020b0c:	68bb      	ldr	r3, [r7, #8]
 8020b0e:	1c5a      	adds	r2, r3, #1
 8020b10:	60ba      	str	r2, [r7, #8]
 8020b12:	781b      	ldrb	r3, [r3, #0]
 8020b14:	4618      	mov	r0, r3
 8020b16:	f7ff fecd 	bl	80208b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020b1a:	697b      	ldr	r3, [r7, #20]
 8020b1c:	3301      	adds	r3, #1
 8020b1e:	617b      	str	r3, [r7, #20]
 8020b20:	697a      	ldr	r2, [r7, #20]
 8020b22:	687b      	ldr	r3, [r7, #4]
 8020b24:	429a      	cmp	r2, r3
 8020b26:	dbf1      	blt.n	8020b0c <_write+0x12>
	}
	return len;
 8020b28:	687b      	ldr	r3, [r7, #4]
}
 8020b2a:	4618      	mov	r0, r3
 8020b2c:	3718      	adds	r7, #24
 8020b2e:	46bd      	mov	sp, r7
 8020b30:	bd80      	pop	{r7, pc}

08020b32 <_close>:

int _close(int file)
{
 8020b32:	b480      	push	{r7}
 8020b34:	b083      	sub	sp, #12
 8020b36:	af00      	add	r7, sp, #0
 8020b38:	6078      	str	r0, [r7, #4]
	return -1;
 8020b3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8020b3e:	4618      	mov	r0, r3
 8020b40:	370c      	adds	r7, #12
 8020b42:	46bd      	mov	sp, r7
 8020b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b48:	4770      	bx	lr

08020b4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8020b4a:	b480      	push	{r7}
 8020b4c:	b083      	sub	sp, #12
 8020b4e:	af00      	add	r7, sp, #0
 8020b50:	6078      	str	r0, [r7, #4]
 8020b52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8020b54:	683b      	ldr	r3, [r7, #0]
 8020b56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8020b5a:	605a      	str	r2, [r3, #4]
	return 0;
 8020b5c:	2300      	movs	r3, #0
}
 8020b5e:	4618      	mov	r0, r3
 8020b60:	370c      	adds	r7, #12
 8020b62:	46bd      	mov	sp, r7
 8020b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b68:	4770      	bx	lr

08020b6a <_isatty>:

int _isatty(int file)
{
 8020b6a:	b480      	push	{r7}
 8020b6c:	b083      	sub	sp, #12
 8020b6e:	af00      	add	r7, sp, #0
 8020b70:	6078      	str	r0, [r7, #4]
	return 1;
 8020b72:	2301      	movs	r3, #1
}
 8020b74:	4618      	mov	r0, r3
 8020b76:	370c      	adds	r7, #12
 8020b78:	46bd      	mov	sp, r7
 8020b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b7e:	4770      	bx	lr

08020b80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8020b80:	b480      	push	{r7}
 8020b82:	b085      	sub	sp, #20
 8020b84:	af00      	add	r7, sp, #0
 8020b86:	60f8      	str	r0, [r7, #12]
 8020b88:	60b9      	str	r1, [r7, #8]
 8020b8a:	607a      	str	r2, [r7, #4]
	return 0;
 8020b8c:	2300      	movs	r3, #0
}
 8020b8e:	4618      	mov	r0, r3
 8020b90:	3714      	adds	r7, #20
 8020b92:	46bd      	mov	sp, r7
 8020b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b98:	4770      	bx	lr
	...

08020b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8020b9c:	b580      	push	{r7, lr}
 8020b9e:	b086      	sub	sp, #24
 8020ba0:	af00      	add	r7, sp, #0
 8020ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8020ba4:	4a14      	ldr	r2, [pc, #80]	; (8020bf8 <_sbrk+0x5c>)
 8020ba6:	4b15      	ldr	r3, [pc, #84]	; (8020bfc <_sbrk+0x60>)
 8020ba8:	1ad3      	subs	r3, r2, r3
 8020baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8020bac:	697b      	ldr	r3, [r7, #20]
 8020bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8020bb0:	4b13      	ldr	r3, [pc, #76]	; (8020c00 <_sbrk+0x64>)
 8020bb2:	681b      	ldr	r3, [r3, #0]
 8020bb4:	2b00      	cmp	r3, #0
 8020bb6:	d102      	bne.n	8020bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8020bb8:	4b11      	ldr	r3, [pc, #68]	; (8020c00 <_sbrk+0x64>)
 8020bba:	4a12      	ldr	r2, [pc, #72]	; (8020c04 <_sbrk+0x68>)
 8020bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8020bbe:	4b10      	ldr	r3, [pc, #64]	; (8020c00 <_sbrk+0x64>)
 8020bc0:	681a      	ldr	r2, [r3, #0]
 8020bc2:	687b      	ldr	r3, [r7, #4]
 8020bc4:	4413      	add	r3, r2
 8020bc6:	693a      	ldr	r2, [r7, #16]
 8020bc8:	429a      	cmp	r2, r3
 8020bca:	d207      	bcs.n	8020bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8020bcc:	f001 ff84 	bl	8022ad8 <__errno>
 8020bd0:	4602      	mov	r2, r0
 8020bd2:	230c      	movs	r3, #12
 8020bd4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8020bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8020bda:	e009      	b.n	8020bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8020bdc:	4b08      	ldr	r3, [pc, #32]	; (8020c00 <_sbrk+0x64>)
 8020bde:	681b      	ldr	r3, [r3, #0]
 8020be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8020be2:	4b07      	ldr	r3, [pc, #28]	; (8020c00 <_sbrk+0x64>)
 8020be4:	681a      	ldr	r2, [r3, #0]
 8020be6:	687b      	ldr	r3, [r7, #4]
 8020be8:	4413      	add	r3, r2
 8020bea:	4a05      	ldr	r2, [pc, #20]	; (8020c00 <_sbrk+0x64>)
 8020bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8020bee:	68fb      	ldr	r3, [r7, #12]
}
 8020bf0:	4618      	mov	r0, r3
 8020bf2:	3718      	adds	r7, #24
 8020bf4:	46bd      	mov	sp, r7
 8020bf6:	bd80      	pop	{r7, pc}
 8020bf8:	20040000 	.word	0x20040000
 8020bfc:	00000400 	.word	0x00000400
 8020c00:	2000008c 	.word	0x2000008c
 8020c04:	200000e0 	.word	0x200000e0

08020c08 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8020c08:	b580      	push	{r7, lr}
 8020c0a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8020c0c:	4b11      	ldr	r3, [pc, #68]	; (8020c54 <MX_USART2_UART_Init+0x4c>)
 8020c0e:	4a12      	ldr	r2, [pc, #72]	; (8020c58 <MX_USART2_UART_Init+0x50>)
 8020c10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8020c12:	4b10      	ldr	r3, [pc, #64]	; (8020c54 <MX_USART2_UART_Init+0x4c>)
 8020c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020c18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8020c1a:	4b0e      	ldr	r3, [pc, #56]	; (8020c54 <MX_USART2_UART_Init+0x4c>)
 8020c1c:	2200      	movs	r2, #0
 8020c1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8020c20:	4b0c      	ldr	r3, [pc, #48]	; (8020c54 <MX_USART2_UART_Init+0x4c>)
 8020c22:	2200      	movs	r2, #0
 8020c24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8020c26:	4b0b      	ldr	r3, [pc, #44]	; (8020c54 <MX_USART2_UART_Init+0x4c>)
 8020c28:	2200      	movs	r2, #0
 8020c2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8020c2c:	4b09      	ldr	r3, [pc, #36]	; (8020c54 <MX_USART2_UART_Init+0x4c>)
 8020c2e:	220c      	movs	r2, #12
 8020c30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020c32:	4b08      	ldr	r3, [pc, #32]	; (8020c54 <MX_USART2_UART_Init+0x4c>)
 8020c34:	2200      	movs	r2, #0
 8020c36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8020c38:	4b06      	ldr	r3, [pc, #24]	; (8020c54 <MX_USART2_UART_Init+0x4c>)
 8020c3a:	2200      	movs	r2, #0
 8020c3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8020c3e:	4805      	ldr	r0, [pc, #20]	; (8020c54 <MX_USART2_UART_Init+0x4c>)
 8020c40:	f001 f85e 	bl	8021d00 <HAL_UART_Init>
 8020c44:	4603      	mov	r3, r0
 8020c46:	2b00      	cmp	r3, #0
 8020c48:	d001      	beq.n	8020c4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8020c4a:	f7ff fed9 	bl	8020a00 <Error_Handler>
  }

}
 8020c4e:	bf00      	nop
 8020c50:	bd80      	pop	{r7, pc}
 8020c52:	bf00      	nop
 8020c54:	20000098 	.word	0x20000098
 8020c58:	40004400 	.word	0x40004400

08020c5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8020c5c:	b580      	push	{r7, lr}
 8020c5e:	b08a      	sub	sp, #40	; 0x28
 8020c60:	af00      	add	r7, sp, #0
 8020c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020c64:	f107 0314 	add.w	r3, r7, #20
 8020c68:	2200      	movs	r2, #0
 8020c6a:	601a      	str	r2, [r3, #0]
 8020c6c:	605a      	str	r2, [r3, #4]
 8020c6e:	609a      	str	r2, [r3, #8]
 8020c70:	60da      	str	r2, [r3, #12]
 8020c72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8020c74:	687b      	ldr	r3, [r7, #4]
 8020c76:	681b      	ldr	r3, [r3, #0]
 8020c78:	4a1d      	ldr	r2, [pc, #116]	; (8020cf0 <HAL_UART_MspInit+0x94>)
 8020c7a:	4293      	cmp	r3, r2
 8020c7c:	d133      	bne.n	8020ce6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8020c7e:	2300      	movs	r3, #0
 8020c80:	613b      	str	r3, [r7, #16]
 8020c82:	4b1c      	ldr	r3, [pc, #112]	; (8020cf4 <HAL_UART_MspInit+0x98>)
 8020c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020c86:	4a1b      	ldr	r2, [pc, #108]	; (8020cf4 <HAL_UART_MspInit+0x98>)
 8020c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8020c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8020c8e:	4b19      	ldr	r3, [pc, #100]	; (8020cf4 <HAL_UART_MspInit+0x98>)
 8020c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020c96:	613b      	str	r3, [r7, #16]
 8020c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020c9a:	2300      	movs	r3, #0
 8020c9c:	60fb      	str	r3, [r7, #12]
 8020c9e:	4b15      	ldr	r3, [pc, #84]	; (8020cf4 <HAL_UART_MspInit+0x98>)
 8020ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ca2:	4a14      	ldr	r2, [pc, #80]	; (8020cf4 <HAL_UART_MspInit+0x98>)
 8020ca4:	f043 0301 	orr.w	r3, r3, #1
 8020ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8020caa:	4b12      	ldr	r3, [pc, #72]	; (8020cf4 <HAL_UART_MspInit+0x98>)
 8020cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cae:	f003 0301 	and.w	r3, r3, #1
 8020cb2:	60fb      	str	r3, [r7, #12]
 8020cb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8020cb6:	230c      	movs	r3, #12
 8020cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020cba:	2302      	movs	r3, #2
 8020cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020cbe:	2300      	movs	r3, #0
 8020cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020cc2:	2303      	movs	r3, #3
 8020cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8020cc6:	2307      	movs	r3, #7
 8020cc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020cca:	f107 0314 	add.w	r3, r7, #20
 8020cce:	4619      	mov	r1, r3
 8020cd0:	4809      	ldr	r0, [pc, #36]	; (8020cf8 <HAL_UART_MspInit+0x9c>)
 8020cd2:	f000 fa1b 	bl	802110c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8020cd6:	2200      	movs	r2, #0
 8020cd8:	2100      	movs	r1, #0
 8020cda:	2026      	movs	r0, #38	; 0x26
 8020cdc:	f000 f9bd 	bl	802105a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8020ce0:	2026      	movs	r0, #38	; 0x26
 8020ce2:	f000 f9d6 	bl	8021092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8020ce6:	bf00      	nop
 8020ce8:	3728      	adds	r7, #40	; 0x28
 8020cea:	46bd      	mov	sp, r7
 8020cec:	bd80      	pop	{r7, pc}
 8020cee:	bf00      	nop
 8020cf0:	40004400 	.word	0x40004400
 8020cf4:	40023800 	.word	0x40023800
 8020cf8:	40020000 	.word	0x40020000

08020cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8020cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8020d34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8020d00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8020d02:	e003      	b.n	8020d0c <LoopCopyDataInit>

08020d04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8020d04:	4b0c      	ldr	r3, [pc, #48]	; (8020d38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8020d06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8020d08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8020d0a:	3104      	adds	r1, #4

08020d0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8020d0c:	480b      	ldr	r0, [pc, #44]	; (8020d3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8020d0e:	4b0c      	ldr	r3, [pc, #48]	; (8020d40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8020d10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8020d12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8020d14:	d3f6      	bcc.n	8020d04 <CopyDataInit>
  ldr  r2, =_sbss
 8020d16:	4a0b      	ldr	r2, [pc, #44]	; (8020d44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8020d18:	e002      	b.n	8020d20 <LoopFillZerobss>

08020d1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8020d1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8020d1c:	f842 3b04 	str.w	r3, [r2], #4

08020d20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8020d20:	4b09      	ldr	r3, [pc, #36]	; (8020d48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8020d22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8020d24:	d3f9      	bcc.n	8020d1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8020d26:	f000 f813 	bl	8020d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8020d2a:	f001 fedb 	bl	8022ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8020d2e:	f7ff fdd3 	bl	80208d8 <main>
  bx  lr    
 8020d32:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8020d34:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8020d38:	0807fc04 	.word	0x0807fc04
  ldr  r0, =_sdata
 8020d3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8020d40:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8020d44:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8020d48:	200000e0 	.word	0x200000e0

08020d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8020d4c:	e7fe      	b.n	8020d4c <ADC_IRQHandler>
	...

08020d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8020d50:	b480      	push	{r7}
 8020d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8020d54:	4b07      	ldr	r3, [pc, #28]	; (8020d74 <SystemInit+0x24>)
 8020d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020d5a:	4a06      	ldr	r2, [pc, #24]	; (8020d74 <SystemInit+0x24>)
 8020d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8020d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8020d64:	4b03      	ldr	r3, [pc, #12]	; (8020d74 <SystemInit+0x24>)
 8020d66:	4a04      	ldr	r2, [pc, #16]	; (8020d78 <SystemInit+0x28>)
 8020d68:	609a      	str	r2, [r3, #8]
#endif
}
 8020d6a:	bf00      	nop
 8020d6c:	46bd      	mov	sp, r7
 8020d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d72:	4770      	bx	lr
 8020d74:	e000ed00 	.word	0xe000ed00
 8020d78:	08020000 	.word	0x08020000

08020d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8020d7c:	b580      	push	{r7, lr}
 8020d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8020d80:	4b0e      	ldr	r3, [pc, #56]	; (8020dbc <HAL_Init+0x40>)
 8020d82:	681b      	ldr	r3, [r3, #0]
 8020d84:	4a0d      	ldr	r2, [pc, #52]	; (8020dbc <HAL_Init+0x40>)
 8020d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8020d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8020d8c:	4b0b      	ldr	r3, [pc, #44]	; (8020dbc <HAL_Init+0x40>)
 8020d8e:	681b      	ldr	r3, [r3, #0]
 8020d90:	4a0a      	ldr	r2, [pc, #40]	; (8020dbc <HAL_Init+0x40>)
 8020d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8020d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8020d98:	4b08      	ldr	r3, [pc, #32]	; (8020dbc <HAL_Init+0x40>)
 8020d9a:	681b      	ldr	r3, [r3, #0]
 8020d9c:	4a07      	ldr	r2, [pc, #28]	; (8020dbc <HAL_Init+0x40>)
 8020d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8020da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8020da4:	2003      	movs	r0, #3
 8020da6:	f000 f94d 	bl	8021044 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8020daa:	2000      	movs	r0, #0
 8020dac:	f000 f808 	bl	8020dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8020db0:	f7ff fe2a 	bl	8020a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8020db4:	2300      	movs	r3, #0
}
 8020db6:	4618      	mov	r0, r3
 8020db8:	bd80      	pop	{r7, pc}
 8020dba:	bf00      	nop
 8020dbc:	40023c00 	.word	0x40023c00

08020dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020dc0:	b580      	push	{r7, lr}
 8020dc2:	b082      	sub	sp, #8
 8020dc4:	af00      	add	r7, sp, #0
 8020dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8020dc8:	4b12      	ldr	r3, [pc, #72]	; (8020e14 <HAL_InitTick+0x54>)
 8020dca:	681a      	ldr	r2, [r3, #0]
 8020dcc:	4b12      	ldr	r3, [pc, #72]	; (8020e18 <HAL_InitTick+0x58>)
 8020dce:	781b      	ldrb	r3, [r3, #0]
 8020dd0:	4619      	mov	r1, r3
 8020dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8020dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8020dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8020dde:	4618      	mov	r0, r3
 8020de0:	f000 f965 	bl	80210ae <HAL_SYSTICK_Config>
 8020de4:	4603      	mov	r3, r0
 8020de6:	2b00      	cmp	r3, #0
 8020de8:	d001      	beq.n	8020dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8020dea:	2301      	movs	r3, #1
 8020dec:	e00e      	b.n	8020e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020dee:	687b      	ldr	r3, [r7, #4]
 8020df0:	2b0f      	cmp	r3, #15
 8020df2:	d80a      	bhi.n	8020e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020df4:	2200      	movs	r2, #0
 8020df6:	6879      	ldr	r1, [r7, #4]
 8020df8:	f04f 30ff 	mov.w	r0, #4294967295
 8020dfc:	f000 f92d 	bl	802105a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8020e00:	4a06      	ldr	r2, [pc, #24]	; (8020e1c <HAL_InitTick+0x5c>)
 8020e02:	687b      	ldr	r3, [r7, #4]
 8020e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8020e06:	2300      	movs	r3, #0
 8020e08:	e000      	b.n	8020e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8020e0a:	2301      	movs	r3, #1
}
 8020e0c:	4618      	mov	r0, r3
 8020e0e:	3708      	adds	r7, #8
 8020e10:	46bd      	mov	sp, r7
 8020e12:	bd80      	pop	{r7, pc}
 8020e14:	20000000 	.word	0x20000000
 8020e18:	20000008 	.word	0x20000008
 8020e1c:	20000004 	.word	0x20000004

08020e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8020e20:	b480      	push	{r7}
 8020e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8020e24:	4b06      	ldr	r3, [pc, #24]	; (8020e40 <HAL_IncTick+0x20>)
 8020e26:	781b      	ldrb	r3, [r3, #0]
 8020e28:	461a      	mov	r2, r3
 8020e2a:	4b06      	ldr	r3, [pc, #24]	; (8020e44 <HAL_IncTick+0x24>)
 8020e2c:	681b      	ldr	r3, [r3, #0]
 8020e2e:	4413      	add	r3, r2
 8020e30:	4a04      	ldr	r2, [pc, #16]	; (8020e44 <HAL_IncTick+0x24>)
 8020e32:	6013      	str	r3, [r2, #0]
}
 8020e34:	bf00      	nop
 8020e36:	46bd      	mov	sp, r7
 8020e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e3c:	4770      	bx	lr
 8020e3e:	bf00      	nop
 8020e40:	20000008 	.word	0x20000008
 8020e44:	200000d8 	.word	0x200000d8

08020e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8020e48:	b480      	push	{r7}
 8020e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8020e4c:	4b03      	ldr	r3, [pc, #12]	; (8020e5c <HAL_GetTick+0x14>)
 8020e4e:	681b      	ldr	r3, [r3, #0]
}
 8020e50:	4618      	mov	r0, r3
 8020e52:	46bd      	mov	sp, r7
 8020e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e58:	4770      	bx	lr
 8020e5a:	bf00      	nop
 8020e5c:	200000d8 	.word	0x200000d8

08020e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8020e60:	b580      	push	{r7, lr}
 8020e62:	b084      	sub	sp, #16
 8020e64:	af00      	add	r7, sp, #0
 8020e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8020e68:	f7ff ffee 	bl	8020e48 <HAL_GetTick>
 8020e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8020e6e:	687b      	ldr	r3, [r7, #4]
 8020e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8020e72:	68fb      	ldr	r3, [r7, #12]
 8020e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020e78:	d005      	beq.n	8020e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8020e7a:	4b09      	ldr	r3, [pc, #36]	; (8020ea0 <HAL_Delay+0x40>)
 8020e7c:	781b      	ldrb	r3, [r3, #0]
 8020e7e:	461a      	mov	r2, r3
 8020e80:	68fb      	ldr	r3, [r7, #12]
 8020e82:	4413      	add	r3, r2
 8020e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8020e86:	bf00      	nop
 8020e88:	f7ff ffde 	bl	8020e48 <HAL_GetTick>
 8020e8c:	4602      	mov	r2, r0
 8020e8e:	68bb      	ldr	r3, [r7, #8]
 8020e90:	1ad3      	subs	r3, r2, r3
 8020e92:	68fa      	ldr	r2, [r7, #12]
 8020e94:	429a      	cmp	r2, r3
 8020e96:	d8f7      	bhi.n	8020e88 <HAL_Delay+0x28>
  {
  }
}
 8020e98:	bf00      	nop
 8020e9a:	3710      	adds	r7, #16
 8020e9c:	46bd      	mov	sp, r7
 8020e9e:	bd80      	pop	{r7, pc}
 8020ea0:	20000008 	.word	0x20000008

08020ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020ea4:	b480      	push	{r7}
 8020ea6:	b085      	sub	sp, #20
 8020ea8:	af00      	add	r7, sp, #0
 8020eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8020eac:	687b      	ldr	r3, [r7, #4]
 8020eae:	f003 0307 	and.w	r3, r3, #7
 8020eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8020eb4:	4b0c      	ldr	r3, [pc, #48]	; (8020ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8020eb6:	68db      	ldr	r3, [r3, #12]
 8020eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8020eba:	68ba      	ldr	r2, [r7, #8]
 8020ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8020ec0:	4013      	ands	r3, r2
 8020ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020ec4:	68fb      	ldr	r3, [r7, #12]
 8020ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8020ec8:	68bb      	ldr	r3, [r7, #8]
 8020eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8020ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8020ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8020ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8020ed6:	4a04      	ldr	r2, [pc, #16]	; (8020ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8020ed8:	68bb      	ldr	r3, [r7, #8]
 8020eda:	60d3      	str	r3, [r2, #12]
}
 8020edc:	bf00      	nop
 8020ede:	3714      	adds	r7, #20
 8020ee0:	46bd      	mov	sp, r7
 8020ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ee6:	4770      	bx	lr
 8020ee8:	e000ed00 	.word	0xe000ed00

08020eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8020eec:	b480      	push	{r7}
 8020eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020ef0:	4b04      	ldr	r3, [pc, #16]	; (8020f04 <__NVIC_GetPriorityGrouping+0x18>)
 8020ef2:	68db      	ldr	r3, [r3, #12]
 8020ef4:	0a1b      	lsrs	r3, r3, #8
 8020ef6:	f003 0307 	and.w	r3, r3, #7
}
 8020efa:	4618      	mov	r0, r3
 8020efc:	46bd      	mov	sp, r7
 8020efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f02:	4770      	bx	lr
 8020f04:	e000ed00 	.word	0xe000ed00

08020f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8020f08:	b480      	push	{r7}
 8020f0a:	b083      	sub	sp, #12
 8020f0c:	af00      	add	r7, sp, #0
 8020f0e:	4603      	mov	r3, r0
 8020f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020f16:	2b00      	cmp	r3, #0
 8020f18:	db0b      	blt.n	8020f32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8020f1a:	79fb      	ldrb	r3, [r7, #7]
 8020f1c:	f003 021f 	and.w	r2, r3, #31
 8020f20:	4907      	ldr	r1, [pc, #28]	; (8020f40 <__NVIC_EnableIRQ+0x38>)
 8020f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020f26:	095b      	lsrs	r3, r3, #5
 8020f28:	2001      	movs	r0, #1
 8020f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8020f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8020f32:	bf00      	nop
 8020f34:	370c      	adds	r7, #12
 8020f36:	46bd      	mov	sp, r7
 8020f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f3c:	4770      	bx	lr
 8020f3e:	bf00      	nop
 8020f40:	e000e100 	.word	0xe000e100

08020f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8020f44:	b480      	push	{r7}
 8020f46:	b083      	sub	sp, #12
 8020f48:	af00      	add	r7, sp, #0
 8020f4a:	4603      	mov	r3, r0
 8020f4c:	6039      	str	r1, [r7, #0]
 8020f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020f54:	2b00      	cmp	r3, #0
 8020f56:	db0a      	blt.n	8020f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020f58:	683b      	ldr	r3, [r7, #0]
 8020f5a:	b2da      	uxtb	r2, r3
 8020f5c:	490c      	ldr	r1, [pc, #48]	; (8020f90 <__NVIC_SetPriority+0x4c>)
 8020f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020f62:	0112      	lsls	r2, r2, #4
 8020f64:	b2d2      	uxtb	r2, r2
 8020f66:	440b      	add	r3, r1
 8020f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8020f6c:	e00a      	b.n	8020f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020f6e:	683b      	ldr	r3, [r7, #0]
 8020f70:	b2da      	uxtb	r2, r3
 8020f72:	4908      	ldr	r1, [pc, #32]	; (8020f94 <__NVIC_SetPriority+0x50>)
 8020f74:	79fb      	ldrb	r3, [r7, #7]
 8020f76:	f003 030f 	and.w	r3, r3, #15
 8020f7a:	3b04      	subs	r3, #4
 8020f7c:	0112      	lsls	r2, r2, #4
 8020f7e:	b2d2      	uxtb	r2, r2
 8020f80:	440b      	add	r3, r1
 8020f82:	761a      	strb	r2, [r3, #24]
}
 8020f84:	bf00      	nop
 8020f86:	370c      	adds	r7, #12
 8020f88:	46bd      	mov	sp, r7
 8020f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f8e:	4770      	bx	lr
 8020f90:	e000e100 	.word	0xe000e100
 8020f94:	e000ed00 	.word	0xe000ed00

08020f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020f98:	b480      	push	{r7}
 8020f9a:	b089      	sub	sp, #36	; 0x24
 8020f9c:	af00      	add	r7, sp, #0
 8020f9e:	60f8      	str	r0, [r7, #12]
 8020fa0:	60b9      	str	r1, [r7, #8]
 8020fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8020fa4:	68fb      	ldr	r3, [r7, #12]
 8020fa6:	f003 0307 	and.w	r3, r3, #7
 8020faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020fac:	69fb      	ldr	r3, [r7, #28]
 8020fae:	f1c3 0307 	rsb	r3, r3, #7
 8020fb2:	2b04      	cmp	r3, #4
 8020fb4:	bf28      	it	cs
 8020fb6:	2304      	movcs	r3, #4
 8020fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020fba:	69fb      	ldr	r3, [r7, #28]
 8020fbc:	3304      	adds	r3, #4
 8020fbe:	2b06      	cmp	r3, #6
 8020fc0:	d902      	bls.n	8020fc8 <NVIC_EncodePriority+0x30>
 8020fc2:	69fb      	ldr	r3, [r7, #28]
 8020fc4:	3b03      	subs	r3, #3
 8020fc6:	e000      	b.n	8020fca <NVIC_EncodePriority+0x32>
 8020fc8:	2300      	movs	r3, #0
 8020fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8020fd0:	69bb      	ldr	r3, [r7, #24]
 8020fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8020fd6:	43da      	mvns	r2, r3
 8020fd8:	68bb      	ldr	r3, [r7, #8]
 8020fda:	401a      	ands	r2, r3
 8020fdc:	697b      	ldr	r3, [r7, #20]
 8020fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8020fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8020fe4:	697b      	ldr	r3, [r7, #20]
 8020fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8020fea:	43d9      	mvns	r1, r3
 8020fec:	687b      	ldr	r3, [r7, #4]
 8020fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020ff0:	4313      	orrs	r3, r2
         );
}
 8020ff2:	4618      	mov	r0, r3
 8020ff4:	3724      	adds	r7, #36	; 0x24
 8020ff6:	46bd      	mov	sp, r7
 8020ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ffc:	4770      	bx	lr
	...

08021000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8021000:	b580      	push	{r7, lr}
 8021002:	b082      	sub	sp, #8
 8021004:	af00      	add	r7, sp, #0
 8021006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8021008:	687b      	ldr	r3, [r7, #4]
 802100a:	3b01      	subs	r3, #1
 802100c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8021010:	d301      	bcc.n	8021016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8021012:	2301      	movs	r3, #1
 8021014:	e00f      	b.n	8021036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8021016:	4a0a      	ldr	r2, [pc, #40]	; (8021040 <SysTick_Config+0x40>)
 8021018:	687b      	ldr	r3, [r7, #4]
 802101a:	3b01      	subs	r3, #1
 802101c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 802101e:	210f      	movs	r1, #15
 8021020:	f04f 30ff 	mov.w	r0, #4294967295
 8021024:	f7ff ff8e 	bl	8020f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8021028:	4b05      	ldr	r3, [pc, #20]	; (8021040 <SysTick_Config+0x40>)
 802102a:	2200      	movs	r2, #0
 802102c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802102e:	4b04      	ldr	r3, [pc, #16]	; (8021040 <SysTick_Config+0x40>)
 8021030:	2207      	movs	r2, #7
 8021032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8021034:	2300      	movs	r3, #0
}
 8021036:	4618      	mov	r0, r3
 8021038:	3708      	adds	r7, #8
 802103a:	46bd      	mov	sp, r7
 802103c:	bd80      	pop	{r7, pc}
 802103e:	bf00      	nop
 8021040:	e000e010 	.word	0xe000e010

08021044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8021044:	b580      	push	{r7, lr}
 8021046:	b082      	sub	sp, #8
 8021048:	af00      	add	r7, sp, #0
 802104a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802104c:	6878      	ldr	r0, [r7, #4]
 802104e:	f7ff ff29 	bl	8020ea4 <__NVIC_SetPriorityGrouping>
}
 8021052:	bf00      	nop
 8021054:	3708      	adds	r7, #8
 8021056:	46bd      	mov	sp, r7
 8021058:	bd80      	pop	{r7, pc}

0802105a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 802105a:	b580      	push	{r7, lr}
 802105c:	b086      	sub	sp, #24
 802105e:	af00      	add	r7, sp, #0
 8021060:	4603      	mov	r3, r0
 8021062:	60b9      	str	r1, [r7, #8]
 8021064:	607a      	str	r2, [r7, #4]
 8021066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8021068:	2300      	movs	r3, #0
 802106a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 802106c:	f7ff ff3e 	bl	8020eec <__NVIC_GetPriorityGrouping>
 8021070:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8021072:	687a      	ldr	r2, [r7, #4]
 8021074:	68b9      	ldr	r1, [r7, #8]
 8021076:	6978      	ldr	r0, [r7, #20]
 8021078:	f7ff ff8e 	bl	8020f98 <NVIC_EncodePriority>
 802107c:	4602      	mov	r2, r0
 802107e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021082:	4611      	mov	r1, r2
 8021084:	4618      	mov	r0, r3
 8021086:	f7ff ff5d 	bl	8020f44 <__NVIC_SetPriority>
}
 802108a:	bf00      	nop
 802108c:	3718      	adds	r7, #24
 802108e:	46bd      	mov	sp, r7
 8021090:	bd80      	pop	{r7, pc}

08021092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8021092:	b580      	push	{r7, lr}
 8021094:	b082      	sub	sp, #8
 8021096:	af00      	add	r7, sp, #0
 8021098:	4603      	mov	r3, r0
 802109a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80210a0:	4618      	mov	r0, r3
 80210a2:	f7ff ff31 	bl	8020f08 <__NVIC_EnableIRQ>
}
 80210a6:	bf00      	nop
 80210a8:	3708      	adds	r7, #8
 80210aa:	46bd      	mov	sp, r7
 80210ac:	bd80      	pop	{r7, pc}

080210ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80210ae:	b580      	push	{r7, lr}
 80210b0:	b082      	sub	sp, #8
 80210b2:	af00      	add	r7, sp, #0
 80210b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80210b6:	6878      	ldr	r0, [r7, #4]
 80210b8:	f7ff ffa2 	bl	8021000 <SysTick_Config>
 80210bc:	4603      	mov	r3, r0
}
 80210be:	4618      	mov	r0, r3
 80210c0:	3708      	adds	r7, #8
 80210c2:	46bd      	mov	sp, r7
 80210c4:	bd80      	pop	{r7, pc}

080210c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80210c6:	b480      	push	{r7}
 80210c8:	b083      	sub	sp, #12
 80210ca:	af00      	add	r7, sp, #0
 80210cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80210ce:	687b      	ldr	r3, [r7, #4]
 80210d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80210d4:	b2db      	uxtb	r3, r3
 80210d6:	2b02      	cmp	r3, #2
 80210d8:	d004      	beq.n	80210e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80210da:	687b      	ldr	r3, [r7, #4]
 80210dc:	2280      	movs	r2, #128	; 0x80
 80210de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80210e0:	2301      	movs	r3, #1
 80210e2:	e00c      	b.n	80210fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80210e4:	687b      	ldr	r3, [r7, #4]
 80210e6:	2205      	movs	r2, #5
 80210e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80210ec:	687b      	ldr	r3, [r7, #4]
 80210ee:	681b      	ldr	r3, [r3, #0]
 80210f0:	681a      	ldr	r2, [r3, #0]
 80210f2:	687b      	ldr	r3, [r7, #4]
 80210f4:	681b      	ldr	r3, [r3, #0]
 80210f6:	f022 0201 	bic.w	r2, r2, #1
 80210fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80210fc:	2300      	movs	r3, #0
}
 80210fe:	4618      	mov	r0, r3
 8021100:	370c      	adds	r7, #12
 8021102:	46bd      	mov	sp, r7
 8021104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021108:	4770      	bx	lr
	...

0802110c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802110c:	b480      	push	{r7}
 802110e:	b089      	sub	sp, #36	; 0x24
 8021110:	af00      	add	r7, sp, #0
 8021112:	6078      	str	r0, [r7, #4]
 8021114:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8021116:	2300      	movs	r3, #0
 8021118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 802111a:	2300      	movs	r3, #0
 802111c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 802111e:	2300      	movs	r3, #0
 8021120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8021122:	2300      	movs	r3, #0
 8021124:	61fb      	str	r3, [r7, #28]
 8021126:	e165      	b.n	80213f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8021128:	2201      	movs	r2, #1
 802112a:	69fb      	ldr	r3, [r7, #28]
 802112c:	fa02 f303 	lsl.w	r3, r2, r3
 8021130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8021132:	683b      	ldr	r3, [r7, #0]
 8021134:	681b      	ldr	r3, [r3, #0]
 8021136:	697a      	ldr	r2, [r7, #20]
 8021138:	4013      	ands	r3, r2
 802113a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 802113c:	693a      	ldr	r2, [r7, #16]
 802113e:	697b      	ldr	r3, [r7, #20]
 8021140:	429a      	cmp	r2, r3
 8021142:	f040 8154 	bne.w	80213ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8021146:	683b      	ldr	r3, [r7, #0]
 8021148:	685b      	ldr	r3, [r3, #4]
 802114a:	2b01      	cmp	r3, #1
 802114c:	d00b      	beq.n	8021166 <HAL_GPIO_Init+0x5a>
 802114e:	683b      	ldr	r3, [r7, #0]
 8021150:	685b      	ldr	r3, [r3, #4]
 8021152:	2b02      	cmp	r3, #2
 8021154:	d007      	beq.n	8021166 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8021156:	683b      	ldr	r3, [r7, #0]
 8021158:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 802115a:	2b11      	cmp	r3, #17
 802115c:	d003      	beq.n	8021166 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 802115e:	683b      	ldr	r3, [r7, #0]
 8021160:	685b      	ldr	r3, [r3, #4]
 8021162:	2b12      	cmp	r3, #18
 8021164:	d130      	bne.n	80211c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8021166:	687b      	ldr	r3, [r7, #4]
 8021168:	689b      	ldr	r3, [r3, #8]
 802116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 802116c:	69fb      	ldr	r3, [r7, #28]
 802116e:	005b      	lsls	r3, r3, #1
 8021170:	2203      	movs	r2, #3
 8021172:	fa02 f303 	lsl.w	r3, r2, r3
 8021176:	43db      	mvns	r3, r3
 8021178:	69ba      	ldr	r2, [r7, #24]
 802117a:	4013      	ands	r3, r2
 802117c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 802117e:	683b      	ldr	r3, [r7, #0]
 8021180:	68da      	ldr	r2, [r3, #12]
 8021182:	69fb      	ldr	r3, [r7, #28]
 8021184:	005b      	lsls	r3, r3, #1
 8021186:	fa02 f303 	lsl.w	r3, r2, r3
 802118a:	69ba      	ldr	r2, [r7, #24]
 802118c:	4313      	orrs	r3, r2
 802118e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8021190:	687b      	ldr	r3, [r7, #4]
 8021192:	69ba      	ldr	r2, [r7, #24]
 8021194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8021196:	687b      	ldr	r3, [r7, #4]
 8021198:	685b      	ldr	r3, [r3, #4]
 802119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 802119c:	2201      	movs	r2, #1
 802119e:	69fb      	ldr	r3, [r7, #28]
 80211a0:	fa02 f303 	lsl.w	r3, r2, r3
 80211a4:	43db      	mvns	r3, r3
 80211a6:	69ba      	ldr	r2, [r7, #24]
 80211a8:	4013      	ands	r3, r2
 80211aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80211ac:	683b      	ldr	r3, [r7, #0]
 80211ae:	685b      	ldr	r3, [r3, #4]
 80211b0:	091b      	lsrs	r3, r3, #4
 80211b2:	f003 0201 	and.w	r2, r3, #1
 80211b6:	69fb      	ldr	r3, [r7, #28]
 80211b8:	fa02 f303 	lsl.w	r3, r2, r3
 80211bc:	69ba      	ldr	r2, [r7, #24]
 80211be:	4313      	orrs	r3, r2
 80211c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80211c2:	687b      	ldr	r3, [r7, #4]
 80211c4:	69ba      	ldr	r2, [r7, #24]
 80211c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80211c8:	687b      	ldr	r3, [r7, #4]
 80211ca:	68db      	ldr	r3, [r3, #12]
 80211cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80211ce:	69fb      	ldr	r3, [r7, #28]
 80211d0:	005b      	lsls	r3, r3, #1
 80211d2:	2203      	movs	r2, #3
 80211d4:	fa02 f303 	lsl.w	r3, r2, r3
 80211d8:	43db      	mvns	r3, r3
 80211da:	69ba      	ldr	r2, [r7, #24]
 80211dc:	4013      	ands	r3, r2
 80211de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80211e0:	683b      	ldr	r3, [r7, #0]
 80211e2:	689a      	ldr	r2, [r3, #8]
 80211e4:	69fb      	ldr	r3, [r7, #28]
 80211e6:	005b      	lsls	r3, r3, #1
 80211e8:	fa02 f303 	lsl.w	r3, r2, r3
 80211ec:	69ba      	ldr	r2, [r7, #24]
 80211ee:	4313      	orrs	r3, r2
 80211f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80211f2:	687b      	ldr	r3, [r7, #4]
 80211f4:	69ba      	ldr	r2, [r7, #24]
 80211f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80211f8:	683b      	ldr	r3, [r7, #0]
 80211fa:	685b      	ldr	r3, [r3, #4]
 80211fc:	2b02      	cmp	r3, #2
 80211fe:	d003      	beq.n	8021208 <HAL_GPIO_Init+0xfc>
 8021200:	683b      	ldr	r3, [r7, #0]
 8021202:	685b      	ldr	r3, [r3, #4]
 8021204:	2b12      	cmp	r3, #18
 8021206:	d123      	bne.n	8021250 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8021208:	69fb      	ldr	r3, [r7, #28]
 802120a:	08da      	lsrs	r2, r3, #3
 802120c:	687b      	ldr	r3, [r7, #4]
 802120e:	3208      	adds	r2, #8
 8021210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021214:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8021216:	69fb      	ldr	r3, [r7, #28]
 8021218:	f003 0307 	and.w	r3, r3, #7
 802121c:	009b      	lsls	r3, r3, #2
 802121e:	220f      	movs	r2, #15
 8021220:	fa02 f303 	lsl.w	r3, r2, r3
 8021224:	43db      	mvns	r3, r3
 8021226:	69ba      	ldr	r2, [r7, #24]
 8021228:	4013      	ands	r3, r2
 802122a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 802122c:	683b      	ldr	r3, [r7, #0]
 802122e:	691a      	ldr	r2, [r3, #16]
 8021230:	69fb      	ldr	r3, [r7, #28]
 8021232:	f003 0307 	and.w	r3, r3, #7
 8021236:	009b      	lsls	r3, r3, #2
 8021238:	fa02 f303 	lsl.w	r3, r2, r3
 802123c:	69ba      	ldr	r2, [r7, #24]
 802123e:	4313      	orrs	r3, r2
 8021240:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8021242:	69fb      	ldr	r3, [r7, #28]
 8021244:	08da      	lsrs	r2, r3, #3
 8021246:	687b      	ldr	r3, [r7, #4]
 8021248:	3208      	adds	r2, #8
 802124a:	69b9      	ldr	r1, [r7, #24]
 802124c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8021250:	687b      	ldr	r3, [r7, #4]
 8021252:	681b      	ldr	r3, [r3, #0]
 8021254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8021256:	69fb      	ldr	r3, [r7, #28]
 8021258:	005b      	lsls	r3, r3, #1
 802125a:	2203      	movs	r2, #3
 802125c:	fa02 f303 	lsl.w	r3, r2, r3
 8021260:	43db      	mvns	r3, r3
 8021262:	69ba      	ldr	r2, [r7, #24]
 8021264:	4013      	ands	r3, r2
 8021266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8021268:	683b      	ldr	r3, [r7, #0]
 802126a:	685b      	ldr	r3, [r3, #4]
 802126c:	f003 0203 	and.w	r2, r3, #3
 8021270:	69fb      	ldr	r3, [r7, #28]
 8021272:	005b      	lsls	r3, r3, #1
 8021274:	fa02 f303 	lsl.w	r3, r2, r3
 8021278:	69ba      	ldr	r2, [r7, #24]
 802127a:	4313      	orrs	r3, r2
 802127c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802127e:	687b      	ldr	r3, [r7, #4]
 8021280:	69ba      	ldr	r2, [r7, #24]
 8021282:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8021284:	683b      	ldr	r3, [r7, #0]
 8021286:	685b      	ldr	r3, [r3, #4]
 8021288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802128c:	2b00      	cmp	r3, #0
 802128e:	f000 80ae 	beq.w	80213ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021292:	2300      	movs	r3, #0
 8021294:	60fb      	str	r3, [r7, #12]
 8021296:	4b5c      	ldr	r3, [pc, #368]	; (8021408 <HAL_GPIO_Init+0x2fc>)
 8021298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802129a:	4a5b      	ldr	r2, [pc, #364]	; (8021408 <HAL_GPIO_Init+0x2fc>)
 802129c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80212a0:	6453      	str	r3, [r2, #68]	; 0x44
 80212a2:	4b59      	ldr	r3, [pc, #356]	; (8021408 <HAL_GPIO_Init+0x2fc>)
 80212a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80212a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80212aa:	60fb      	str	r3, [r7, #12]
 80212ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80212ae:	4a57      	ldr	r2, [pc, #348]	; (802140c <HAL_GPIO_Init+0x300>)
 80212b0:	69fb      	ldr	r3, [r7, #28]
 80212b2:	089b      	lsrs	r3, r3, #2
 80212b4:	3302      	adds	r3, #2
 80212b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80212ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80212bc:	69fb      	ldr	r3, [r7, #28]
 80212be:	f003 0303 	and.w	r3, r3, #3
 80212c2:	009b      	lsls	r3, r3, #2
 80212c4:	220f      	movs	r2, #15
 80212c6:	fa02 f303 	lsl.w	r3, r2, r3
 80212ca:	43db      	mvns	r3, r3
 80212cc:	69ba      	ldr	r2, [r7, #24]
 80212ce:	4013      	ands	r3, r2
 80212d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80212d2:	687b      	ldr	r3, [r7, #4]
 80212d4:	4a4e      	ldr	r2, [pc, #312]	; (8021410 <HAL_GPIO_Init+0x304>)
 80212d6:	4293      	cmp	r3, r2
 80212d8:	d025      	beq.n	8021326 <HAL_GPIO_Init+0x21a>
 80212da:	687b      	ldr	r3, [r7, #4]
 80212dc:	4a4d      	ldr	r2, [pc, #308]	; (8021414 <HAL_GPIO_Init+0x308>)
 80212de:	4293      	cmp	r3, r2
 80212e0:	d01f      	beq.n	8021322 <HAL_GPIO_Init+0x216>
 80212e2:	687b      	ldr	r3, [r7, #4]
 80212e4:	4a4c      	ldr	r2, [pc, #304]	; (8021418 <HAL_GPIO_Init+0x30c>)
 80212e6:	4293      	cmp	r3, r2
 80212e8:	d019      	beq.n	802131e <HAL_GPIO_Init+0x212>
 80212ea:	687b      	ldr	r3, [r7, #4]
 80212ec:	4a4b      	ldr	r2, [pc, #300]	; (802141c <HAL_GPIO_Init+0x310>)
 80212ee:	4293      	cmp	r3, r2
 80212f0:	d013      	beq.n	802131a <HAL_GPIO_Init+0x20e>
 80212f2:	687b      	ldr	r3, [r7, #4]
 80212f4:	4a4a      	ldr	r2, [pc, #296]	; (8021420 <HAL_GPIO_Init+0x314>)
 80212f6:	4293      	cmp	r3, r2
 80212f8:	d00d      	beq.n	8021316 <HAL_GPIO_Init+0x20a>
 80212fa:	687b      	ldr	r3, [r7, #4]
 80212fc:	4a49      	ldr	r2, [pc, #292]	; (8021424 <HAL_GPIO_Init+0x318>)
 80212fe:	4293      	cmp	r3, r2
 8021300:	d007      	beq.n	8021312 <HAL_GPIO_Init+0x206>
 8021302:	687b      	ldr	r3, [r7, #4]
 8021304:	4a48      	ldr	r2, [pc, #288]	; (8021428 <HAL_GPIO_Init+0x31c>)
 8021306:	4293      	cmp	r3, r2
 8021308:	d101      	bne.n	802130e <HAL_GPIO_Init+0x202>
 802130a:	2306      	movs	r3, #6
 802130c:	e00c      	b.n	8021328 <HAL_GPIO_Init+0x21c>
 802130e:	2307      	movs	r3, #7
 8021310:	e00a      	b.n	8021328 <HAL_GPIO_Init+0x21c>
 8021312:	2305      	movs	r3, #5
 8021314:	e008      	b.n	8021328 <HAL_GPIO_Init+0x21c>
 8021316:	2304      	movs	r3, #4
 8021318:	e006      	b.n	8021328 <HAL_GPIO_Init+0x21c>
 802131a:	2303      	movs	r3, #3
 802131c:	e004      	b.n	8021328 <HAL_GPIO_Init+0x21c>
 802131e:	2302      	movs	r3, #2
 8021320:	e002      	b.n	8021328 <HAL_GPIO_Init+0x21c>
 8021322:	2301      	movs	r3, #1
 8021324:	e000      	b.n	8021328 <HAL_GPIO_Init+0x21c>
 8021326:	2300      	movs	r3, #0
 8021328:	69fa      	ldr	r2, [r7, #28]
 802132a:	f002 0203 	and.w	r2, r2, #3
 802132e:	0092      	lsls	r2, r2, #2
 8021330:	4093      	lsls	r3, r2
 8021332:	69ba      	ldr	r2, [r7, #24]
 8021334:	4313      	orrs	r3, r2
 8021336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8021338:	4934      	ldr	r1, [pc, #208]	; (802140c <HAL_GPIO_Init+0x300>)
 802133a:	69fb      	ldr	r3, [r7, #28]
 802133c:	089b      	lsrs	r3, r3, #2
 802133e:	3302      	adds	r3, #2
 8021340:	69ba      	ldr	r2, [r7, #24]
 8021342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8021346:	4b39      	ldr	r3, [pc, #228]	; (802142c <HAL_GPIO_Init+0x320>)
 8021348:	681b      	ldr	r3, [r3, #0]
 802134a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802134c:	693b      	ldr	r3, [r7, #16]
 802134e:	43db      	mvns	r3, r3
 8021350:	69ba      	ldr	r2, [r7, #24]
 8021352:	4013      	ands	r3, r2
 8021354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8021356:	683b      	ldr	r3, [r7, #0]
 8021358:	685b      	ldr	r3, [r3, #4]
 802135a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802135e:	2b00      	cmp	r3, #0
 8021360:	d003      	beq.n	802136a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8021362:	69ba      	ldr	r2, [r7, #24]
 8021364:	693b      	ldr	r3, [r7, #16]
 8021366:	4313      	orrs	r3, r2
 8021368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 802136a:	4a30      	ldr	r2, [pc, #192]	; (802142c <HAL_GPIO_Init+0x320>)
 802136c:	69bb      	ldr	r3, [r7, #24]
 802136e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8021370:	4b2e      	ldr	r3, [pc, #184]	; (802142c <HAL_GPIO_Init+0x320>)
 8021372:	685b      	ldr	r3, [r3, #4]
 8021374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8021376:	693b      	ldr	r3, [r7, #16]
 8021378:	43db      	mvns	r3, r3
 802137a:	69ba      	ldr	r2, [r7, #24]
 802137c:	4013      	ands	r3, r2
 802137e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8021380:	683b      	ldr	r3, [r7, #0]
 8021382:	685b      	ldr	r3, [r3, #4]
 8021384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021388:	2b00      	cmp	r3, #0
 802138a:	d003      	beq.n	8021394 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 802138c:	69ba      	ldr	r2, [r7, #24]
 802138e:	693b      	ldr	r3, [r7, #16]
 8021390:	4313      	orrs	r3, r2
 8021392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8021394:	4a25      	ldr	r2, [pc, #148]	; (802142c <HAL_GPIO_Init+0x320>)
 8021396:	69bb      	ldr	r3, [r7, #24]
 8021398:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 802139a:	4b24      	ldr	r3, [pc, #144]	; (802142c <HAL_GPIO_Init+0x320>)
 802139c:	689b      	ldr	r3, [r3, #8]
 802139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80213a0:	693b      	ldr	r3, [r7, #16]
 80213a2:	43db      	mvns	r3, r3
 80213a4:	69ba      	ldr	r2, [r7, #24]
 80213a6:	4013      	ands	r3, r2
 80213a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80213aa:	683b      	ldr	r3, [r7, #0]
 80213ac:	685b      	ldr	r3, [r3, #4]
 80213ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80213b2:	2b00      	cmp	r3, #0
 80213b4:	d003      	beq.n	80213be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80213b6:	69ba      	ldr	r2, [r7, #24]
 80213b8:	693b      	ldr	r3, [r7, #16]
 80213ba:	4313      	orrs	r3, r2
 80213bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80213be:	4a1b      	ldr	r2, [pc, #108]	; (802142c <HAL_GPIO_Init+0x320>)
 80213c0:	69bb      	ldr	r3, [r7, #24]
 80213c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80213c4:	4b19      	ldr	r3, [pc, #100]	; (802142c <HAL_GPIO_Init+0x320>)
 80213c6:	68db      	ldr	r3, [r3, #12]
 80213c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80213ca:	693b      	ldr	r3, [r7, #16]
 80213cc:	43db      	mvns	r3, r3
 80213ce:	69ba      	ldr	r2, [r7, #24]
 80213d0:	4013      	ands	r3, r2
 80213d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80213d4:	683b      	ldr	r3, [r7, #0]
 80213d6:	685b      	ldr	r3, [r3, #4]
 80213d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80213dc:	2b00      	cmp	r3, #0
 80213de:	d003      	beq.n	80213e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80213e0:	69ba      	ldr	r2, [r7, #24]
 80213e2:	693b      	ldr	r3, [r7, #16]
 80213e4:	4313      	orrs	r3, r2
 80213e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80213e8:	4a10      	ldr	r2, [pc, #64]	; (802142c <HAL_GPIO_Init+0x320>)
 80213ea:	69bb      	ldr	r3, [r7, #24]
 80213ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80213ee:	69fb      	ldr	r3, [r7, #28]
 80213f0:	3301      	adds	r3, #1
 80213f2:	61fb      	str	r3, [r7, #28]
 80213f4:	69fb      	ldr	r3, [r7, #28]
 80213f6:	2b0f      	cmp	r3, #15
 80213f8:	f67f ae96 	bls.w	8021128 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80213fc:	bf00      	nop
 80213fe:	3724      	adds	r7, #36	; 0x24
 8021400:	46bd      	mov	sp, r7
 8021402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021406:	4770      	bx	lr
 8021408:	40023800 	.word	0x40023800
 802140c:	40013800 	.word	0x40013800
 8021410:	40020000 	.word	0x40020000
 8021414:	40020400 	.word	0x40020400
 8021418:	40020800 	.word	0x40020800
 802141c:	40020c00 	.word	0x40020c00
 8021420:	40021000 	.word	0x40021000
 8021424:	40021400 	.word	0x40021400
 8021428:	40021800 	.word	0x40021800
 802142c:	40013c00 	.word	0x40013c00

08021430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8021430:	b480      	push	{r7}
 8021432:	b083      	sub	sp, #12
 8021434:	af00      	add	r7, sp, #0
 8021436:	6078      	str	r0, [r7, #4]
 8021438:	460b      	mov	r3, r1
 802143a:	807b      	strh	r3, [r7, #2]
 802143c:	4613      	mov	r3, r2
 802143e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8021440:	787b      	ldrb	r3, [r7, #1]
 8021442:	2b00      	cmp	r3, #0
 8021444:	d003      	beq.n	802144e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8021446:	887a      	ldrh	r2, [r7, #2]
 8021448:	687b      	ldr	r3, [r7, #4]
 802144a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 802144c:	e003      	b.n	8021456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 802144e:	887b      	ldrh	r3, [r7, #2]
 8021450:	041a      	lsls	r2, r3, #16
 8021452:	687b      	ldr	r3, [r7, #4]
 8021454:	619a      	str	r2, [r3, #24]
}
 8021456:	bf00      	nop
 8021458:	370c      	adds	r7, #12
 802145a:	46bd      	mov	sp, r7
 802145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021460:	4770      	bx	lr

08021462 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8021462:	b480      	push	{r7}
 8021464:	b083      	sub	sp, #12
 8021466:	af00      	add	r7, sp, #0
 8021468:	6078      	str	r0, [r7, #4]
 802146a:	460b      	mov	r3, r1
 802146c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 802146e:	687b      	ldr	r3, [r7, #4]
 8021470:	695a      	ldr	r2, [r3, #20]
 8021472:	887b      	ldrh	r3, [r7, #2]
 8021474:	401a      	ands	r2, r3
 8021476:	887b      	ldrh	r3, [r7, #2]
 8021478:	429a      	cmp	r2, r3
 802147a:	d104      	bne.n	8021486 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 802147c:	887b      	ldrh	r3, [r7, #2]
 802147e:	041a      	lsls	r2, r3, #16
 8021480:	687b      	ldr	r3, [r7, #4]
 8021482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8021484:	e002      	b.n	802148c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8021486:	887a      	ldrh	r2, [r7, #2]
 8021488:	687b      	ldr	r3, [r7, #4]
 802148a:	619a      	str	r2, [r3, #24]
}
 802148c:	bf00      	nop
 802148e:	370c      	adds	r7, #12
 8021490:	46bd      	mov	sp, r7
 8021492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021496:	4770      	bx	lr

08021498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8021498:	b580      	push	{r7, lr}
 802149a:	b084      	sub	sp, #16
 802149c:	af00      	add	r7, sp, #0
 802149e:	6078      	str	r0, [r7, #4]
 80214a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80214a2:	687b      	ldr	r3, [r7, #4]
 80214a4:	2b00      	cmp	r3, #0
 80214a6:	d101      	bne.n	80214ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80214a8:	2301      	movs	r3, #1
 80214aa:	e0cc      	b.n	8021646 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80214ac:	4b68      	ldr	r3, [pc, #416]	; (8021650 <HAL_RCC_ClockConfig+0x1b8>)
 80214ae:	681b      	ldr	r3, [r3, #0]
 80214b0:	f003 030f 	and.w	r3, r3, #15
 80214b4:	683a      	ldr	r2, [r7, #0]
 80214b6:	429a      	cmp	r2, r3
 80214b8:	d90c      	bls.n	80214d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80214ba:	4b65      	ldr	r3, [pc, #404]	; (8021650 <HAL_RCC_ClockConfig+0x1b8>)
 80214bc:	683a      	ldr	r2, [r7, #0]
 80214be:	b2d2      	uxtb	r2, r2
 80214c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80214c2:	4b63      	ldr	r3, [pc, #396]	; (8021650 <HAL_RCC_ClockConfig+0x1b8>)
 80214c4:	681b      	ldr	r3, [r3, #0]
 80214c6:	f003 030f 	and.w	r3, r3, #15
 80214ca:	683a      	ldr	r2, [r7, #0]
 80214cc:	429a      	cmp	r2, r3
 80214ce:	d001      	beq.n	80214d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80214d0:	2301      	movs	r3, #1
 80214d2:	e0b8      	b.n	8021646 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80214d4:	687b      	ldr	r3, [r7, #4]
 80214d6:	681b      	ldr	r3, [r3, #0]
 80214d8:	f003 0302 	and.w	r3, r3, #2
 80214dc:	2b00      	cmp	r3, #0
 80214de:	d020      	beq.n	8021522 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80214e0:	687b      	ldr	r3, [r7, #4]
 80214e2:	681b      	ldr	r3, [r3, #0]
 80214e4:	f003 0304 	and.w	r3, r3, #4
 80214e8:	2b00      	cmp	r3, #0
 80214ea:	d005      	beq.n	80214f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80214ec:	4b59      	ldr	r3, [pc, #356]	; (8021654 <HAL_RCC_ClockConfig+0x1bc>)
 80214ee:	689b      	ldr	r3, [r3, #8]
 80214f0:	4a58      	ldr	r2, [pc, #352]	; (8021654 <HAL_RCC_ClockConfig+0x1bc>)
 80214f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80214f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80214f8:	687b      	ldr	r3, [r7, #4]
 80214fa:	681b      	ldr	r3, [r3, #0]
 80214fc:	f003 0308 	and.w	r3, r3, #8
 8021500:	2b00      	cmp	r3, #0
 8021502:	d005      	beq.n	8021510 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8021504:	4b53      	ldr	r3, [pc, #332]	; (8021654 <HAL_RCC_ClockConfig+0x1bc>)
 8021506:	689b      	ldr	r3, [r3, #8]
 8021508:	4a52      	ldr	r2, [pc, #328]	; (8021654 <HAL_RCC_ClockConfig+0x1bc>)
 802150a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802150e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8021510:	4b50      	ldr	r3, [pc, #320]	; (8021654 <HAL_RCC_ClockConfig+0x1bc>)
 8021512:	689b      	ldr	r3, [r3, #8]
 8021514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8021518:	687b      	ldr	r3, [r7, #4]
 802151a:	689b      	ldr	r3, [r3, #8]
 802151c:	494d      	ldr	r1, [pc, #308]	; (8021654 <HAL_RCC_ClockConfig+0x1bc>)
 802151e:	4313      	orrs	r3, r2
 8021520:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8021522:	687b      	ldr	r3, [r7, #4]
 8021524:	681b      	ldr	r3, [r3, #0]
 8021526:	f003 0301 	and.w	r3, r3, #1
 802152a:	2b00      	cmp	r3, #0
 802152c:	d044      	beq.n	80215b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802152e:	687b      	ldr	r3, [r7, #4]
 8021530:	685b      	ldr	r3, [r3, #4]
 8021532:	2b01      	cmp	r3, #1
 8021534:	d107      	bne.n	8021546 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8021536:	4b47      	ldr	r3, [pc, #284]	; (8021654 <HAL_RCC_ClockConfig+0x1bc>)
 8021538:	681b      	ldr	r3, [r3, #0]
 802153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802153e:	2b00      	cmp	r3, #0
 8021540:	d119      	bne.n	8021576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8021542:	2301      	movs	r3, #1
 8021544:	e07f      	b.n	8021646 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8021546:	687b      	ldr	r3, [r7, #4]
 8021548:	685b      	ldr	r3, [r3, #4]
 802154a:	2b02      	cmp	r3, #2
 802154c:	d003      	beq.n	8021556 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 802154e:	687b      	ldr	r3, [r7, #4]
 8021550:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8021552:	2b03      	cmp	r3, #3
 8021554:	d107      	bne.n	8021566 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021556:	4b3f      	ldr	r3, [pc, #252]	; (8021654 <HAL_RCC_ClockConfig+0x1bc>)
 8021558:	681b      	ldr	r3, [r3, #0]
 802155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802155e:	2b00      	cmp	r3, #0
 8021560:	d109      	bne.n	8021576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8021562:	2301      	movs	r3, #1
 8021564:	e06f      	b.n	8021646 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021566:	4b3b      	ldr	r3, [pc, #236]	; (8021654 <HAL_RCC_ClockConfig+0x1bc>)
 8021568:	681b      	ldr	r3, [r3, #0]
 802156a:	f003 0302 	and.w	r3, r3, #2
 802156e:	2b00      	cmp	r3, #0
 8021570:	d101      	bne.n	8021576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8021572:	2301      	movs	r3, #1
 8021574:	e067      	b.n	8021646 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8021576:	4b37      	ldr	r3, [pc, #220]	; (8021654 <HAL_RCC_ClockConfig+0x1bc>)
 8021578:	689b      	ldr	r3, [r3, #8]
 802157a:	f023 0203 	bic.w	r2, r3, #3
 802157e:	687b      	ldr	r3, [r7, #4]
 8021580:	685b      	ldr	r3, [r3, #4]
 8021582:	4934      	ldr	r1, [pc, #208]	; (8021654 <HAL_RCC_ClockConfig+0x1bc>)
 8021584:	4313      	orrs	r3, r2
 8021586:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8021588:	f7ff fc5e 	bl	8020e48 <HAL_GetTick>
 802158c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802158e:	e00a      	b.n	80215a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8021590:	f7ff fc5a 	bl	8020e48 <HAL_GetTick>
 8021594:	4602      	mov	r2, r0
 8021596:	68fb      	ldr	r3, [r7, #12]
 8021598:	1ad3      	subs	r3, r2, r3
 802159a:	f241 3288 	movw	r2, #5000	; 0x1388
 802159e:	4293      	cmp	r3, r2
 80215a0:	d901      	bls.n	80215a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80215a2:	2303      	movs	r3, #3
 80215a4:	e04f      	b.n	8021646 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80215a6:	4b2b      	ldr	r3, [pc, #172]	; (8021654 <HAL_RCC_ClockConfig+0x1bc>)
 80215a8:	689b      	ldr	r3, [r3, #8]
 80215aa:	f003 020c 	and.w	r2, r3, #12
 80215ae:	687b      	ldr	r3, [r7, #4]
 80215b0:	685b      	ldr	r3, [r3, #4]
 80215b2:	009b      	lsls	r3, r3, #2
 80215b4:	429a      	cmp	r2, r3
 80215b6:	d1eb      	bne.n	8021590 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80215b8:	4b25      	ldr	r3, [pc, #148]	; (8021650 <HAL_RCC_ClockConfig+0x1b8>)
 80215ba:	681b      	ldr	r3, [r3, #0]
 80215bc:	f003 030f 	and.w	r3, r3, #15
 80215c0:	683a      	ldr	r2, [r7, #0]
 80215c2:	429a      	cmp	r2, r3
 80215c4:	d20c      	bcs.n	80215e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80215c6:	4b22      	ldr	r3, [pc, #136]	; (8021650 <HAL_RCC_ClockConfig+0x1b8>)
 80215c8:	683a      	ldr	r2, [r7, #0]
 80215ca:	b2d2      	uxtb	r2, r2
 80215cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80215ce:	4b20      	ldr	r3, [pc, #128]	; (8021650 <HAL_RCC_ClockConfig+0x1b8>)
 80215d0:	681b      	ldr	r3, [r3, #0]
 80215d2:	f003 030f 	and.w	r3, r3, #15
 80215d6:	683a      	ldr	r2, [r7, #0]
 80215d8:	429a      	cmp	r2, r3
 80215da:	d001      	beq.n	80215e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80215dc:	2301      	movs	r3, #1
 80215de:	e032      	b.n	8021646 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80215e0:	687b      	ldr	r3, [r7, #4]
 80215e2:	681b      	ldr	r3, [r3, #0]
 80215e4:	f003 0304 	and.w	r3, r3, #4
 80215e8:	2b00      	cmp	r3, #0
 80215ea:	d008      	beq.n	80215fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80215ec:	4b19      	ldr	r3, [pc, #100]	; (8021654 <HAL_RCC_ClockConfig+0x1bc>)
 80215ee:	689b      	ldr	r3, [r3, #8]
 80215f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80215f4:	687b      	ldr	r3, [r7, #4]
 80215f6:	68db      	ldr	r3, [r3, #12]
 80215f8:	4916      	ldr	r1, [pc, #88]	; (8021654 <HAL_RCC_ClockConfig+0x1bc>)
 80215fa:	4313      	orrs	r3, r2
 80215fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80215fe:	687b      	ldr	r3, [r7, #4]
 8021600:	681b      	ldr	r3, [r3, #0]
 8021602:	f003 0308 	and.w	r3, r3, #8
 8021606:	2b00      	cmp	r3, #0
 8021608:	d009      	beq.n	802161e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802160a:	4b12      	ldr	r3, [pc, #72]	; (8021654 <HAL_RCC_ClockConfig+0x1bc>)
 802160c:	689b      	ldr	r3, [r3, #8]
 802160e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8021612:	687b      	ldr	r3, [r7, #4]
 8021614:	691b      	ldr	r3, [r3, #16]
 8021616:	00db      	lsls	r3, r3, #3
 8021618:	490e      	ldr	r1, [pc, #56]	; (8021654 <HAL_RCC_ClockConfig+0x1bc>)
 802161a:	4313      	orrs	r3, r2
 802161c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802161e:	f000 f821 	bl	8021664 <HAL_RCC_GetSysClockFreq>
 8021622:	4601      	mov	r1, r0
 8021624:	4b0b      	ldr	r3, [pc, #44]	; (8021654 <HAL_RCC_ClockConfig+0x1bc>)
 8021626:	689b      	ldr	r3, [r3, #8]
 8021628:	091b      	lsrs	r3, r3, #4
 802162a:	f003 030f 	and.w	r3, r3, #15
 802162e:	4a0a      	ldr	r2, [pc, #40]	; (8021658 <HAL_RCC_ClockConfig+0x1c0>)
 8021630:	5cd3      	ldrb	r3, [r2, r3]
 8021632:	fa21 f303 	lsr.w	r3, r1, r3
 8021636:	4a09      	ldr	r2, [pc, #36]	; (802165c <HAL_RCC_ClockConfig+0x1c4>)
 8021638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 802163a:	4b09      	ldr	r3, [pc, #36]	; (8021660 <HAL_RCC_ClockConfig+0x1c8>)
 802163c:	681b      	ldr	r3, [r3, #0]
 802163e:	4618      	mov	r0, r3
 8021640:	f7ff fbbe 	bl	8020dc0 <HAL_InitTick>

  return HAL_OK;
 8021644:	2300      	movs	r3, #0
}
 8021646:	4618      	mov	r0, r3
 8021648:	3710      	adds	r7, #16
 802164a:	46bd      	mov	sp, r7
 802164c:	bd80      	pop	{r7, pc}
 802164e:	bf00      	nop
 8021650:	40023c00 	.word	0x40023c00
 8021654:	40023800 	.word	0x40023800
 8021658:	08023940 	.word	0x08023940
 802165c:	20000000 	.word	0x20000000
 8021660:	20000004 	.word	0x20000004

08021664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8021664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021666:	b085      	sub	sp, #20
 8021668:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 802166a:	2300      	movs	r3, #0
 802166c:	607b      	str	r3, [r7, #4]
 802166e:	2300      	movs	r3, #0
 8021670:	60fb      	str	r3, [r7, #12]
 8021672:	2300      	movs	r3, #0
 8021674:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8021676:	2300      	movs	r3, #0
 8021678:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 802167a:	4b63      	ldr	r3, [pc, #396]	; (8021808 <HAL_RCC_GetSysClockFreq+0x1a4>)
 802167c:	689b      	ldr	r3, [r3, #8]
 802167e:	f003 030c 	and.w	r3, r3, #12
 8021682:	2b04      	cmp	r3, #4
 8021684:	d007      	beq.n	8021696 <HAL_RCC_GetSysClockFreq+0x32>
 8021686:	2b08      	cmp	r3, #8
 8021688:	d008      	beq.n	802169c <HAL_RCC_GetSysClockFreq+0x38>
 802168a:	2b00      	cmp	r3, #0
 802168c:	f040 80b4 	bne.w	80217f8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8021690:	4b5e      	ldr	r3, [pc, #376]	; (802180c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8021692:	60bb      	str	r3, [r7, #8]
       break;
 8021694:	e0b3      	b.n	80217fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8021696:	4b5e      	ldr	r3, [pc, #376]	; (8021810 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8021698:	60bb      	str	r3, [r7, #8]
      break;
 802169a:	e0b0      	b.n	80217fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 802169c:	4b5a      	ldr	r3, [pc, #360]	; (8021808 <HAL_RCC_GetSysClockFreq+0x1a4>)
 802169e:	685b      	ldr	r3, [r3, #4]
 80216a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80216a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80216a6:	4b58      	ldr	r3, [pc, #352]	; (8021808 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80216a8:	685b      	ldr	r3, [r3, #4]
 80216aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80216ae:	2b00      	cmp	r3, #0
 80216b0:	d04a      	beq.n	8021748 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80216b2:	4b55      	ldr	r3, [pc, #340]	; (8021808 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80216b4:	685b      	ldr	r3, [r3, #4]
 80216b6:	099b      	lsrs	r3, r3, #6
 80216b8:	f04f 0400 	mov.w	r4, #0
 80216bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80216c0:	f04f 0200 	mov.w	r2, #0
 80216c4:	ea03 0501 	and.w	r5, r3, r1
 80216c8:	ea04 0602 	and.w	r6, r4, r2
 80216cc:	4629      	mov	r1, r5
 80216ce:	4632      	mov	r2, r6
 80216d0:	f04f 0300 	mov.w	r3, #0
 80216d4:	f04f 0400 	mov.w	r4, #0
 80216d8:	0154      	lsls	r4, r2, #5
 80216da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80216de:	014b      	lsls	r3, r1, #5
 80216e0:	4619      	mov	r1, r3
 80216e2:	4622      	mov	r2, r4
 80216e4:	1b49      	subs	r1, r1, r5
 80216e6:	eb62 0206 	sbc.w	r2, r2, r6
 80216ea:	f04f 0300 	mov.w	r3, #0
 80216ee:	f04f 0400 	mov.w	r4, #0
 80216f2:	0194      	lsls	r4, r2, #6
 80216f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80216f8:	018b      	lsls	r3, r1, #6
 80216fa:	1a5b      	subs	r3, r3, r1
 80216fc:	eb64 0402 	sbc.w	r4, r4, r2
 8021700:	f04f 0100 	mov.w	r1, #0
 8021704:	f04f 0200 	mov.w	r2, #0
 8021708:	00e2      	lsls	r2, r4, #3
 802170a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 802170e:	00d9      	lsls	r1, r3, #3
 8021710:	460b      	mov	r3, r1
 8021712:	4614      	mov	r4, r2
 8021714:	195b      	adds	r3, r3, r5
 8021716:	eb44 0406 	adc.w	r4, r4, r6
 802171a:	f04f 0100 	mov.w	r1, #0
 802171e:	f04f 0200 	mov.w	r2, #0
 8021722:	0262      	lsls	r2, r4, #9
 8021724:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8021728:	0259      	lsls	r1, r3, #9
 802172a:	460b      	mov	r3, r1
 802172c:	4614      	mov	r4, r2
 802172e:	4618      	mov	r0, r3
 8021730:	4621      	mov	r1, r4
 8021732:	687b      	ldr	r3, [r7, #4]
 8021734:	f04f 0400 	mov.w	r4, #0
 8021738:	461a      	mov	r2, r3
 802173a:	4623      	mov	r3, r4
 802173c:	f7fe fee8 	bl	8020510 <__aeabi_uldivmod>
 8021740:	4603      	mov	r3, r0
 8021742:	460c      	mov	r4, r1
 8021744:	60fb      	str	r3, [r7, #12]
 8021746:	e049      	b.n	80217dc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8021748:	4b2f      	ldr	r3, [pc, #188]	; (8021808 <HAL_RCC_GetSysClockFreq+0x1a4>)
 802174a:	685b      	ldr	r3, [r3, #4]
 802174c:	099b      	lsrs	r3, r3, #6
 802174e:	f04f 0400 	mov.w	r4, #0
 8021752:	f240 11ff 	movw	r1, #511	; 0x1ff
 8021756:	f04f 0200 	mov.w	r2, #0
 802175a:	ea03 0501 	and.w	r5, r3, r1
 802175e:	ea04 0602 	and.w	r6, r4, r2
 8021762:	4629      	mov	r1, r5
 8021764:	4632      	mov	r2, r6
 8021766:	f04f 0300 	mov.w	r3, #0
 802176a:	f04f 0400 	mov.w	r4, #0
 802176e:	0154      	lsls	r4, r2, #5
 8021770:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8021774:	014b      	lsls	r3, r1, #5
 8021776:	4619      	mov	r1, r3
 8021778:	4622      	mov	r2, r4
 802177a:	1b49      	subs	r1, r1, r5
 802177c:	eb62 0206 	sbc.w	r2, r2, r6
 8021780:	f04f 0300 	mov.w	r3, #0
 8021784:	f04f 0400 	mov.w	r4, #0
 8021788:	0194      	lsls	r4, r2, #6
 802178a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 802178e:	018b      	lsls	r3, r1, #6
 8021790:	1a5b      	subs	r3, r3, r1
 8021792:	eb64 0402 	sbc.w	r4, r4, r2
 8021796:	f04f 0100 	mov.w	r1, #0
 802179a:	f04f 0200 	mov.w	r2, #0
 802179e:	00e2      	lsls	r2, r4, #3
 80217a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80217a4:	00d9      	lsls	r1, r3, #3
 80217a6:	460b      	mov	r3, r1
 80217a8:	4614      	mov	r4, r2
 80217aa:	195b      	adds	r3, r3, r5
 80217ac:	eb44 0406 	adc.w	r4, r4, r6
 80217b0:	f04f 0100 	mov.w	r1, #0
 80217b4:	f04f 0200 	mov.w	r2, #0
 80217b8:	02a2      	lsls	r2, r4, #10
 80217ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80217be:	0299      	lsls	r1, r3, #10
 80217c0:	460b      	mov	r3, r1
 80217c2:	4614      	mov	r4, r2
 80217c4:	4618      	mov	r0, r3
 80217c6:	4621      	mov	r1, r4
 80217c8:	687b      	ldr	r3, [r7, #4]
 80217ca:	f04f 0400 	mov.w	r4, #0
 80217ce:	461a      	mov	r2, r3
 80217d0:	4623      	mov	r3, r4
 80217d2:	f7fe fe9d 	bl	8020510 <__aeabi_uldivmod>
 80217d6:	4603      	mov	r3, r0
 80217d8:	460c      	mov	r4, r1
 80217da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80217dc:	4b0a      	ldr	r3, [pc, #40]	; (8021808 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80217de:	685b      	ldr	r3, [r3, #4]
 80217e0:	0c1b      	lsrs	r3, r3, #16
 80217e2:	f003 0303 	and.w	r3, r3, #3
 80217e6:	3301      	adds	r3, #1
 80217e8:	005b      	lsls	r3, r3, #1
 80217ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80217ec:	68fa      	ldr	r2, [r7, #12]
 80217ee:	683b      	ldr	r3, [r7, #0]
 80217f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80217f4:	60bb      	str	r3, [r7, #8]
      break;
 80217f6:	e002      	b.n	80217fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80217f8:	4b04      	ldr	r3, [pc, #16]	; (802180c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80217fa:	60bb      	str	r3, [r7, #8]
      break;
 80217fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80217fe:	68bb      	ldr	r3, [r7, #8]
}
 8021800:	4618      	mov	r0, r3
 8021802:	3714      	adds	r7, #20
 8021804:	46bd      	mov	sp, r7
 8021806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021808:	40023800 	.word	0x40023800
 802180c:	00f42400 	.word	0x00f42400
 8021810:	007a1200 	.word	0x007a1200

08021814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8021814:	b480      	push	{r7}
 8021816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8021818:	4b03      	ldr	r3, [pc, #12]	; (8021828 <HAL_RCC_GetHCLKFreq+0x14>)
 802181a:	681b      	ldr	r3, [r3, #0]
}
 802181c:	4618      	mov	r0, r3
 802181e:	46bd      	mov	sp, r7
 8021820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021824:	4770      	bx	lr
 8021826:	bf00      	nop
 8021828:	20000000 	.word	0x20000000

0802182c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 802182c:	b580      	push	{r7, lr}
 802182e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8021830:	f7ff fff0 	bl	8021814 <HAL_RCC_GetHCLKFreq>
 8021834:	4601      	mov	r1, r0
 8021836:	4b05      	ldr	r3, [pc, #20]	; (802184c <HAL_RCC_GetPCLK1Freq+0x20>)
 8021838:	689b      	ldr	r3, [r3, #8]
 802183a:	0a9b      	lsrs	r3, r3, #10
 802183c:	f003 0307 	and.w	r3, r3, #7
 8021840:	4a03      	ldr	r2, [pc, #12]	; (8021850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8021842:	5cd3      	ldrb	r3, [r2, r3]
 8021844:	fa21 f303 	lsr.w	r3, r1, r3
}
 8021848:	4618      	mov	r0, r3
 802184a:	bd80      	pop	{r7, pc}
 802184c:	40023800 	.word	0x40023800
 8021850:	08023950 	.word	0x08023950

08021854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8021854:	b580      	push	{r7, lr}
 8021856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8021858:	f7ff ffdc 	bl	8021814 <HAL_RCC_GetHCLKFreq>
 802185c:	4601      	mov	r1, r0
 802185e:	4b05      	ldr	r3, [pc, #20]	; (8021874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8021860:	689b      	ldr	r3, [r3, #8]
 8021862:	0b5b      	lsrs	r3, r3, #13
 8021864:	f003 0307 	and.w	r3, r3, #7
 8021868:	4a03      	ldr	r2, [pc, #12]	; (8021878 <HAL_RCC_GetPCLK2Freq+0x24>)
 802186a:	5cd3      	ldrb	r3, [r2, r3]
 802186c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8021870:	4618      	mov	r0, r3
 8021872:	bd80      	pop	{r7, pc}
 8021874:	40023800 	.word	0x40023800
 8021878:	08023950 	.word	0x08023950

0802187c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802187c:	b580      	push	{r7, lr}
 802187e:	b086      	sub	sp, #24
 8021880:	af00      	add	r7, sp, #0
 8021882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8021884:	2300      	movs	r3, #0
 8021886:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8021888:	687b      	ldr	r3, [r7, #4]
 802188a:	681b      	ldr	r3, [r3, #0]
 802188c:	f003 0301 	and.w	r3, r3, #1
 8021890:	2b00      	cmp	r3, #0
 8021892:	d075      	beq.n	8021980 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8021894:	4ba2      	ldr	r3, [pc, #648]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 8021896:	689b      	ldr	r3, [r3, #8]
 8021898:	f003 030c 	and.w	r3, r3, #12
 802189c:	2b04      	cmp	r3, #4
 802189e:	d00c      	beq.n	80218ba <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80218a0:	4b9f      	ldr	r3, [pc, #636]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 80218a2:	689b      	ldr	r3, [r3, #8]
 80218a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80218a8:	2b08      	cmp	r3, #8
 80218aa:	d112      	bne.n	80218d2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80218ac:	4b9c      	ldr	r3, [pc, #624]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 80218ae:	685b      	ldr	r3, [r3, #4]
 80218b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80218b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80218b8:	d10b      	bne.n	80218d2 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80218ba:	4b99      	ldr	r3, [pc, #612]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 80218bc:	681b      	ldr	r3, [r3, #0]
 80218be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80218c2:	2b00      	cmp	r3, #0
 80218c4:	d05b      	beq.n	802197e <HAL_RCC_OscConfig+0x102>
 80218c6:	687b      	ldr	r3, [r7, #4]
 80218c8:	685b      	ldr	r3, [r3, #4]
 80218ca:	2b00      	cmp	r3, #0
 80218cc:	d157      	bne.n	802197e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80218ce:	2301      	movs	r3, #1
 80218d0:	e20b      	b.n	8021cea <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80218d2:	687b      	ldr	r3, [r7, #4]
 80218d4:	685b      	ldr	r3, [r3, #4]
 80218d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80218da:	d106      	bne.n	80218ea <HAL_RCC_OscConfig+0x6e>
 80218dc:	4b90      	ldr	r3, [pc, #576]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 80218de:	681b      	ldr	r3, [r3, #0]
 80218e0:	4a8f      	ldr	r2, [pc, #572]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 80218e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80218e6:	6013      	str	r3, [r2, #0]
 80218e8:	e01d      	b.n	8021926 <HAL_RCC_OscConfig+0xaa>
 80218ea:	687b      	ldr	r3, [r7, #4]
 80218ec:	685b      	ldr	r3, [r3, #4]
 80218ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80218f2:	d10c      	bne.n	802190e <HAL_RCC_OscConfig+0x92>
 80218f4:	4b8a      	ldr	r3, [pc, #552]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 80218f6:	681b      	ldr	r3, [r3, #0]
 80218f8:	4a89      	ldr	r2, [pc, #548]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 80218fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80218fe:	6013      	str	r3, [r2, #0]
 8021900:	4b87      	ldr	r3, [pc, #540]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 8021902:	681b      	ldr	r3, [r3, #0]
 8021904:	4a86      	ldr	r2, [pc, #536]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 8021906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802190a:	6013      	str	r3, [r2, #0]
 802190c:	e00b      	b.n	8021926 <HAL_RCC_OscConfig+0xaa>
 802190e:	4b84      	ldr	r3, [pc, #528]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 8021910:	681b      	ldr	r3, [r3, #0]
 8021912:	4a83      	ldr	r2, [pc, #524]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 8021914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8021918:	6013      	str	r3, [r2, #0]
 802191a:	4b81      	ldr	r3, [pc, #516]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 802191c:	681b      	ldr	r3, [r3, #0]
 802191e:	4a80      	ldr	r2, [pc, #512]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 8021920:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8021924:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8021926:	687b      	ldr	r3, [r7, #4]
 8021928:	685b      	ldr	r3, [r3, #4]
 802192a:	2b00      	cmp	r3, #0
 802192c:	d013      	beq.n	8021956 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802192e:	f7ff fa8b 	bl	8020e48 <HAL_GetTick>
 8021932:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8021934:	e008      	b.n	8021948 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8021936:	f7ff fa87 	bl	8020e48 <HAL_GetTick>
 802193a:	4602      	mov	r2, r0
 802193c:	693b      	ldr	r3, [r7, #16]
 802193e:	1ad3      	subs	r3, r2, r3
 8021940:	2b64      	cmp	r3, #100	; 0x64
 8021942:	d901      	bls.n	8021948 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8021944:	2303      	movs	r3, #3
 8021946:	e1d0      	b.n	8021cea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8021948:	4b75      	ldr	r3, [pc, #468]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 802194a:	681b      	ldr	r3, [r3, #0]
 802194c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021950:	2b00      	cmp	r3, #0
 8021952:	d0f0      	beq.n	8021936 <HAL_RCC_OscConfig+0xba>
 8021954:	e014      	b.n	8021980 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021956:	f7ff fa77 	bl	8020e48 <HAL_GetTick>
 802195a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802195c:	e008      	b.n	8021970 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802195e:	f7ff fa73 	bl	8020e48 <HAL_GetTick>
 8021962:	4602      	mov	r2, r0
 8021964:	693b      	ldr	r3, [r7, #16]
 8021966:	1ad3      	subs	r3, r2, r3
 8021968:	2b64      	cmp	r3, #100	; 0x64
 802196a:	d901      	bls.n	8021970 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 802196c:	2303      	movs	r3, #3
 802196e:	e1bc      	b.n	8021cea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8021970:	4b6b      	ldr	r3, [pc, #428]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 8021972:	681b      	ldr	r3, [r3, #0]
 8021974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021978:	2b00      	cmp	r3, #0
 802197a:	d1f0      	bne.n	802195e <HAL_RCC_OscConfig+0xe2>
 802197c:	e000      	b.n	8021980 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802197e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8021980:	687b      	ldr	r3, [r7, #4]
 8021982:	681b      	ldr	r3, [r3, #0]
 8021984:	f003 0302 	and.w	r3, r3, #2
 8021988:	2b00      	cmp	r3, #0
 802198a:	d063      	beq.n	8021a54 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 802198c:	4b64      	ldr	r3, [pc, #400]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 802198e:	689b      	ldr	r3, [r3, #8]
 8021990:	f003 030c 	and.w	r3, r3, #12
 8021994:	2b00      	cmp	r3, #0
 8021996:	d00b      	beq.n	80219b0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8021998:	4b61      	ldr	r3, [pc, #388]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 802199a:	689b      	ldr	r3, [r3, #8]
 802199c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80219a0:	2b08      	cmp	r3, #8
 80219a2:	d11c      	bne.n	80219de <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80219a4:	4b5e      	ldr	r3, [pc, #376]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 80219a6:	685b      	ldr	r3, [r3, #4]
 80219a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80219ac:	2b00      	cmp	r3, #0
 80219ae:	d116      	bne.n	80219de <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80219b0:	4b5b      	ldr	r3, [pc, #364]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 80219b2:	681b      	ldr	r3, [r3, #0]
 80219b4:	f003 0302 	and.w	r3, r3, #2
 80219b8:	2b00      	cmp	r3, #0
 80219ba:	d005      	beq.n	80219c8 <HAL_RCC_OscConfig+0x14c>
 80219bc:	687b      	ldr	r3, [r7, #4]
 80219be:	68db      	ldr	r3, [r3, #12]
 80219c0:	2b01      	cmp	r3, #1
 80219c2:	d001      	beq.n	80219c8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80219c4:	2301      	movs	r3, #1
 80219c6:	e190      	b.n	8021cea <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80219c8:	4b55      	ldr	r3, [pc, #340]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 80219ca:	681b      	ldr	r3, [r3, #0]
 80219cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80219d0:	687b      	ldr	r3, [r7, #4]
 80219d2:	691b      	ldr	r3, [r3, #16]
 80219d4:	00db      	lsls	r3, r3, #3
 80219d6:	4952      	ldr	r1, [pc, #328]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 80219d8:	4313      	orrs	r3, r2
 80219da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80219dc:	e03a      	b.n	8021a54 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80219de:	687b      	ldr	r3, [r7, #4]
 80219e0:	68db      	ldr	r3, [r3, #12]
 80219e2:	2b00      	cmp	r3, #0
 80219e4:	d020      	beq.n	8021a28 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80219e6:	4b4f      	ldr	r3, [pc, #316]	; (8021b24 <HAL_RCC_OscConfig+0x2a8>)
 80219e8:	2201      	movs	r2, #1
 80219ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80219ec:	f7ff fa2c 	bl	8020e48 <HAL_GetTick>
 80219f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80219f2:	e008      	b.n	8021a06 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80219f4:	f7ff fa28 	bl	8020e48 <HAL_GetTick>
 80219f8:	4602      	mov	r2, r0
 80219fa:	693b      	ldr	r3, [r7, #16]
 80219fc:	1ad3      	subs	r3, r2, r3
 80219fe:	2b02      	cmp	r3, #2
 8021a00:	d901      	bls.n	8021a06 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8021a02:	2303      	movs	r3, #3
 8021a04:	e171      	b.n	8021cea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021a06:	4b46      	ldr	r3, [pc, #280]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 8021a08:	681b      	ldr	r3, [r3, #0]
 8021a0a:	f003 0302 	and.w	r3, r3, #2
 8021a0e:	2b00      	cmp	r3, #0
 8021a10:	d0f0      	beq.n	80219f4 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021a12:	4b43      	ldr	r3, [pc, #268]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 8021a14:	681b      	ldr	r3, [r3, #0]
 8021a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8021a1a:	687b      	ldr	r3, [r7, #4]
 8021a1c:	691b      	ldr	r3, [r3, #16]
 8021a1e:	00db      	lsls	r3, r3, #3
 8021a20:	493f      	ldr	r1, [pc, #252]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 8021a22:	4313      	orrs	r3, r2
 8021a24:	600b      	str	r3, [r1, #0]
 8021a26:	e015      	b.n	8021a54 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8021a28:	4b3e      	ldr	r3, [pc, #248]	; (8021b24 <HAL_RCC_OscConfig+0x2a8>)
 8021a2a:	2200      	movs	r2, #0
 8021a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021a2e:	f7ff fa0b 	bl	8020e48 <HAL_GetTick>
 8021a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8021a34:	e008      	b.n	8021a48 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8021a36:	f7ff fa07 	bl	8020e48 <HAL_GetTick>
 8021a3a:	4602      	mov	r2, r0
 8021a3c:	693b      	ldr	r3, [r7, #16]
 8021a3e:	1ad3      	subs	r3, r2, r3
 8021a40:	2b02      	cmp	r3, #2
 8021a42:	d901      	bls.n	8021a48 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8021a44:	2303      	movs	r3, #3
 8021a46:	e150      	b.n	8021cea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8021a48:	4b35      	ldr	r3, [pc, #212]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 8021a4a:	681b      	ldr	r3, [r3, #0]
 8021a4c:	f003 0302 	and.w	r3, r3, #2
 8021a50:	2b00      	cmp	r3, #0
 8021a52:	d1f0      	bne.n	8021a36 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8021a54:	687b      	ldr	r3, [r7, #4]
 8021a56:	681b      	ldr	r3, [r3, #0]
 8021a58:	f003 0308 	and.w	r3, r3, #8
 8021a5c:	2b00      	cmp	r3, #0
 8021a5e:	d030      	beq.n	8021ac2 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8021a60:	687b      	ldr	r3, [r7, #4]
 8021a62:	695b      	ldr	r3, [r3, #20]
 8021a64:	2b00      	cmp	r3, #0
 8021a66:	d016      	beq.n	8021a96 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8021a68:	4b2f      	ldr	r3, [pc, #188]	; (8021b28 <HAL_RCC_OscConfig+0x2ac>)
 8021a6a:	2201      	movs	r2, #1
 8021a6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021a6e:	f7ff f9eb 	bl	8020e48 <HAL_GetTick>
 8021a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8021a74:	e008      	b.n	8021a88 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8021a76:	f7ff f9e7 	bl	8020e48 <HAL_GetTick>
 8021a7a:	4602      	mov	r2, r0
 8021a7c:	693b      	ldr	r3, [r7, #16]
 8021a7e:	1ad3      	subs	r3, r2, r3
 8021a80:	2b02      	cmp	r3, #2
 8021a82:	d901      	bls.n	8021a88 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8021a84:	2303      	movs	r3, #3
 8021a86:	e130      	b.n	8021cea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8021a88:	4b25      	ldr	r3, [pc, #148]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 8021a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021a8c:	f003 0302 	and.w	r3, r3, #2
 8021a90:	2b00      	cmp	r3, #0
 8021a92:	d0f0      	beq.n	8021a76 <HAL_RCC_OscConfig+0x1fa>
 8021a94:	e015      	b.n	8021ac2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8021a96:	4b24      	ldr	r3, [pc, #144]	; (8021b28 <HAL_RCC_OscConfig+0x2ac>)
 8021a98:	2200      	movs	r2, #0
 8021a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021a9c:	f7ff f9d4 	bl	8020e48 <HAL_GetTick>
 8021aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021aa2:	e008      	b.n	8021ab6 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8021aa4:	f7ff f9d0 	bl	8020e48 <HAL_GetTick>
 8021aa8:	4602      	mov	r2, r0
 8021aaa:	693b      	ldr	r3, [r7, #16]
 8021aac:	1ad3      	subs	r3, r2, r3
 8021aae:	2b02      	cmp	r3, #2
 8021ab0:	d901      	bls.n	8021ab6 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8021ab2:	2303      	movs	r3, #3
 8021ab4:	e119      	b.n	8021cea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021ab6:	4b1a      	ldr	r3, [pc, #104]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 8021ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021aba:	f003 0302 	and.w	r3, r3, #2
 8021abe:	2b00      	cmp	r3, #0
 8021ac0:	d1f0      	bne.n	8021aa4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8021ac2:	687b      	ldr	r3, [r7, #4]
 8021ac4:	681b      	ldr	r3, [r3, #0]
 8021ac6:	f003 0304 	and.w	r3, r3, #4
 8021aca:	2b00      	cmp	r3, #0
 8021acc:	f000 809f 	beq.w	8021c0e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8021ad0:	2300      	movs	r3, #0
 8021ad2:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8021ad4:	4b12      	ldr	r3, [pc, #72]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 8021ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021adc:	2b00      	cmp	r3, #0
 8021ade:	d10f      	bne.n	8021b00 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8021ae0:	2300      	movs	r3, #0
 8021ae2:	60fb      	str	r3, [r7, #12]
 8021ae4:	4b0e      	ldr	r3, [pc, #56]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 8021ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021ae8:	4a0d      	ldr	r2, [pc, #52]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 8021aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021aee:	6413      	str	r3, [r2, #64]	; 0x40
 8021af0:	4b0b      	ldr	r3, [pc, #44]	; (8021b20 <HAL_RCC_OscConfig+0x2a4>)
 8021af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021af8:	60fb      	str	r3, [r7, #12]
 8021afa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8021afc:	2301      	movs	r3, #1
 8021afe:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021b00:	4b0a      	ldr	r3, [pc, #40]	; (8021b2c <HAL_RCC_OscConfig+0x2b0>)
 8021b02:	681b      	ldr	r3, [r3, #0]
 8021b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021b08:	2b00      	cmp	r3, #0
 8021b0a:	d120      	bne.n	8021b4e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8021b0c:	4b07      	ldr	r3, [pc, #28]	; (8021b2c <HAL_RCC_OscConfig+0x2b0>)
 8021b0e:	681b      	ldr	r3, [r3, #0]
 8021b10:	4a06      	ldr	r2, [pc, #24]	; (8021b2c <HAL_RCC_OscConfig+0x2b0>)
 8021b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021b16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8021b18:	f7ff f996 	bl	8020e48 <HAL_GetTick>
 8021b1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021b1e:	e010      	b.n	8021b42 <HAL_RCC_OscConfig+0x2c6>
 8021b20:	40023800 	.word	0x40023800
 8021b24:	42470000 	.word	0x42470000
 8021b28:	42470e80 	.word	0x42470e80
 8021b2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8021b30:	f7ff f98a 	bl	8020e48 <HAL_GetTick>
 8021b34:	4602      	mov	r2, r0
 8021b36:	693b      	ldr	r3, [r7, #16]
 8021b38:	1ad3      	subs	r3, r2, r3
 8021b3a:	2b02      	cmp	r3, #2
 8021b3c:	d901      	bls.n	8021b42 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8021b3e:	2303      	movs	r3, #3
 8021b40:	e0d3      	b.n	8021cea <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021b42:	4b6c      	ldr	r3, [pc, #432]	; (8021cf4 <HAL_RCC_OscConfig+0x478>)
 8021b44:	681b      	ldr	r3, [r3, #0]
 8021b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021b4a:	2b00      	cmp	r3, #0
 8021b4c:	d0f0      	beq.n	8021b30 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8021b4e:	687b      	ldr	r3, [r7, #4]
 8021b50:	689b      	ldr	r3, [r3, #8]
 8021b52:	2b01      	cmp	r3, #1
 8021b54:	d106      	bne.n	8021b64 <HAL_RCC_OscConfig+0x2e8>
 8021b56:	4b68      	ldr	r3, [pc, #416]	; (8021cf8 <HAL_RCC_OscConfig+0x47c>)
 8021b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021b5a:	4a67      	ldr	r2, [pc, #412]	; (8021cf8 <HAL_RCC_OscConfig+0x47c>)
 8021b5c:	f043 0301 	orr.w	r3, r3, #1
 8021b60:	6713      	str	r3, [r2, #112]	; 0x70
 8021b62:	e01c      	b.n	8021b9e <HAL_RCC_OscConfig+0x322>
 8021b64:	687b      	ldr	r3, [r7, #4]
 8021b66:	689b      	ldr	r3, [r3, #8]
 8021b68:	2b05      	cmp	r3, #5
 8021b6a:	d10c      	bne.n	8021b86 <HAL_RCC_OscConfig+0x30a>
 8021b6c:	4b62      	ldr	r3, [pc, #392]	; (8021cf8 <HAL_RCC_OscConfig+0x47c>)
 8021b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021b70:	4a61      	ldr	r2, [pc, #388]	; (8021cf8 <HAL_RCC_OscConfig+0x47c>)
 8021b72:	f043 0304 	orr.w	r3, r3, #4
 8021b76:	6713      	str	r3, [r2, #112]	; 0x70
 8021b78:	4b5f      	ldr	r3, [pc, #380]	; (8021cf8 <HAL_RCC_OscConfig+0x47c>)
 8021b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021b7c:	4a5e      	ldr	r2, [pc, #376]	; (8021cf8 <HAL_RCC_OscConfig+0x47c>)
 8021b7e:	f043 0301 	orr.w	r3, r3, #1
 8021b82:	6713      	str	r3, [r2, #112]	; 0x70
 8021b84:	e00b      	b.n	8021b9e <HAL_RCC_OscConfig+0x322>
 8021b86:	4b5c      	ldr	r3, [pc, #368]	; (8021cf8 <HAL_RCC_OscConfig+0x47c>)
 8021b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021b8a:	4a5b      	ldr	r2, [pc, #364]	; (8021cf8 <HAL_RCC_OscConfig+0x47c>)
 8021b8c:	f023 0301 	bic.w	r3, r3, #1
 8021b90:	6713      	str	r3, [r2, #112]	; 0x70
 8021b92:	4b59      	ldr	r3, [pc, #356]	; (8021cf8 <HAL_RCC_OscConfig+0x47c>)
 8021b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021b96:	4a58      	ldr	r2, [pc, #352]	; (8021cf8 <HAL_RCC_OscConfig+0x47c>)
 8021b98:	f023 0304 	bic.w	r3, r3, #4
 8021b9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8021b9e:	687b      	ldr	r3, [r7, #4]
 8021ba0:	689b      	ldr	r3, [r3, #8]
 8021ba2:	2b00      	cmp	r3, #0
 8021ba4:	d015      	beq.n	8021bd2 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021ba6:	f7ff f94f 	bl	8020e48 <HAL_GetTick>
 8021baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8021bac:	e00a      	b.n	8021bc4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8021bae:	f7ff f94b 	bl	8020e48 <HAL_GetTick>
 8021bb2:	4602      	mov	r2, r0
 8021bb4:	693b      	ldr	r3, [r7, #16]
 8021bb6:	1ad3      	subs	r3, r2, r3
 8021bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8021bbc:	4293      	cmp	r3, r2
 8021bbe:	d901      	bls.n	8021bc4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8021bc0:	2303      	movs	r3, #3
 8021bc2:	e092      	b.n	8021cea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8021bc4:	4b4c      	ldr	r3, [pc, #304]	; (8021cf8 <HAL_RCC_OscConfig+0x47c>)
 8021bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021bc8:	f003 0302 	and.w	r3, r3, #2
 8021bcc:	2b00      	cmp	r3, #0
 8021bce:	d0ee      	beq.n	8021bae <HAL_RCC_OscConfig+0x332>
 8021bd0:	e014      	b.n	8021bfc <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021bd2:	f7ff f939 	bl	8020e48 <HAL_GetTick>
 8021bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8021bd8:	e00a      	b.n	8021bf0 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8021bda:	f7ff f935 	bl	8020e48 <HAL_GetTick>
 8021bde:	4602      	mov	r2, r0
 8021be0:	693b      	ldr	r3, [r7, #16]
 8021be2:	1ad3      	subs	r3, r2, r3
 8021be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8021be8:	4293      	cmp	r3, r2
 8021bea:	d901      	bls.n	8021bf0 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8021bec:	2303      	movs	r3, #3
 8021bee:	e07c      	b.n	8021cea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8021bf0:	4b41      	ldr	r3, [pc, #260]	; (8021cf8 <HAL_RCC_OscConfig+0x47c>)
 8021bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021bf4:	f003 0302 	and.w	r3, r3, #2
 8021bf8:	2b00      	cmp	r3, #0
 8021bfa:	d1ee      	bne.n	8021bda <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8021bfc:	7dfb      	ldrb	r3, [r7, #23]
 8021bfe:	2b01      	cmp	r3, #1
 8021c00:	d105      	bne.n	8021c0e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8021c02:	4b3d      	ldr	r3, [pc, #244]	; (8021cf8 <HAL_RCC_OscConfig+0x47c>)
 8021c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c06:	4a3c      	ldr	r2, [pc, #240]	; (8021cf8 <HAL_RCC_OscConfig+0x47c>)
 8021c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8021c0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8021c0e:	687b      	ldr	r3, [r7, #4]
 8021c10:	699b      	ldr	r3, [r3, #24]
 8021c12:	2b00      	cmp	r3, #0
 8021c14:	d068      	beq.n	8021ce8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8021c16:	4b38      	ldr	r3, [pc, #224]	; (8021cf8 <HAL_RCC_OscConfig+0x47c>)
 8021c18:	689b      	ldr	r3, [r3, #8]
 8021c1a:	f003 030c 	and.w	r3, r3, #12
 8021c1e:	2b08      	cmp	r3, #8
 8021c20:	d060      	beq.n	8021ce4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8021c22:	687b      	ldr	r3, [r7, #4]
 8021c24:	699b      	ldr	r3, [r3, #24]
 8021c26:	2b02      	cmp	r3, #2
 8021c28:	d145      	bne.n	8021cb6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8021c2a:	4b34      	ldr	r3, [pc, #208]	; (8021cfc <HAL_RCC_OscConfig+0x480>)
 8021c2c:	2200      	movs	r2, #0
 8021c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021c30:	f7ff f90a 	bl	8020e48 <HAL_GetTick>
 8021c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021c36:	e008      	b.n	8021c4a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021c38:	f7ff f906 	bl	8020e48 <HAL_GetTick>
 8021c3c:	4602      	mov	r2, r0
 8021c3e:	693b      	ldr	r3, [r7, #16]
 8021c40:	1ad3      	subs	r3, r2, r3
 8021c42:	2b02      	cmp	r3, #2
 8021c44:	d901      	bls.n	8021c4a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8021c46:	2303      	movs	r3, #3
 8021c48:	e04f      	b.n	8021cea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021c4a:	4b2b      	ldr	r3, [pc, #172]	; (8021cf8 <HAL_RCC_OscConfig+0x47c>)
 8021c4c:	681b      	ldr	r3, [r3, #0]
 8021c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021c52:	2b00      	cmp	r3, #0
 8021c54:	d1f0      	bne.n	8021c38 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8021c56:	687b      	ldr	r3, [r7, #4]
 8021c58:	69da      	ldr	r2, [r3, #28]
 8021c5a:	687b      	ldr	r3, [r7, #4]
 8021c5c:	6a1b      	ldr	r3, [r3, #32]
 8021c5e:	431a      	orrs	r2, r3
 8021c60:	687b      	ldr	r3, [r7, #4]
 8021c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021c64:	019b      	lsls	r3, r3, #6
 8021c66:	431a      	orrs	r2, r3
 8021c68:	687b      	ldr	r3, [r7, #4]
 8021c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021c6c:	085b      	lsrs	r3, r3, #1
 8021c6e:	3b01      	subs	r3, #1
 8021c70:	041b      	lsls	r3, r3, #16
 8021c72:	431a      	orrs	r2, r3
 8021c74:	687b      	ldr	r3, [r7, #4]
 8021c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021c78:	061b      	lsls	r3, r3, #24
 8021c7a:	431a      	orrs	r2, r3
 8021c7c:	687b      	ldr	r3, [r7, #4]
 8021c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c80:	071b      	lsls	r3, r3, #28
 8021c82:	491d      	ldr	r1, [pc, #116]	; (8021cf8 <HAL_RCC_OscConfig+0x47c>)
 8021c84:	4313      	orrs	r3, r2
 8021c86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8021c88:	4b1c      	ldr	r3, [pc, #112]	; (8021cfc <HAL_RCC_OscConfig+0x480>)
 8021c8a:	2201      	movs	r2, #1
 8021c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021c8e:	f7ff f8db 	bl	8020e48 <HAL_GetTick>
 8021c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021c94:	e008      	b.n	8021ca8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021c96:	f7ff f8d7 	bl	8020e48 <HAL_GetTick>
 8021c9a:	4602      	mov	r2, r0
 8021c9c:	693b      	ldr	r3, [r7, #16]
 8021c9e:	1ad3      	subs	r3, r2, r3
 8021ca0:	2b02      	cmp	r3, #2
 8021ca2:	d901      	bls.n	8021ca8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8021ca4:	2303      	movs	r3, #3
 8021ca6:	e020      	b.n	8021cea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021ca8:	4b13      	ldr	r3, [pc, #76]	; (8021cf8 <HAL_RCC_OscConfig+0x47c>)
 8021caa:	681b      	ldr	r3, [r3, #0]
 8021cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021cb0:	2b00      	cmp	r3, #0
 8021cb2:	d0f0      	beq.n	8021c96 <HAL_RCC_OscConfig+0x41a>
 8021cb4:	e018      	b.n	8021ce8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8021cb6:	4b11      	ldr	r3, [pc, #68]	; (8021cfc <HAL_RCC_OscConfig+0x480>)
 8021cb8:	2200      	movs	r2, #0
 8021cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021cbc:	f7ff f8c4 	bl	8020e48 <HAL_GetTick>
 8021cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021cc2:	e008      	b.n	8021cd6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021cc4:	f7ff f8c0 	bl	8020e48 <HAL_GetTick>
 8021cc8:	4602      	mov	r2, r0
 8021cca:	693b      	ldr	r3, [r7, #16]
 8021ccc:	1ad3      	subs	r3, r2, r3
 8021cce:	2b02      	cmp	r3, #2
 8021cd0:	d901      	bls.n	8021cd6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8021cd2:	2303      	movs	r3, #3
 8021cd4:	e009      	b.n	8021cea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021cd6:	4b08      	ldr	r3, [pc, #32]	; (8021cf8 <HAL_RCC_OscConfig+0x47c>)
 8021cd8:	681b      	ldr	r3, [r3, #0]
 8021cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021cde:	2b00      	cmp	r3, #0
 8021ce0:	d1f0      	bne.n	8021cc4 <HAL_RCC_OscConfig+0x448>
 8021ce2:	e001      	b.n	8021ce8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8021ce4:	2301      	movs	r3, #1
 8021ce6:	e000      	b.n	8021cea <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8021ce8:	2300      	movs	r3, #0
}
 8021cea:	4618      	mov	r0, r3
 8021cec:	3718      	adds	r7, #24
 8021cee:	46bd      	mov	sp, r7
 8021cf0:	bd80      	pop	{r7, pc}
 8021cf2:	bf00      	nop
 8021cf4:	40007000 	.word	0x40007000
 8021cf8:	40023800 	.word	0x40023800
 8021cfc:	42470060 	.word	0x42470060

08021d00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8021d00:	b580      	push	{r7, lr}
 8021d02:	b082      	sub	sp, #8
 8021d04:	af00      	add	r7, sp, #0
 8021d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8021d08:	687b      	ldr	r3, [r7, #4]
 8021d0a:	2b00      	cmp	r3, #0
 8021d0c:	d101      	bne.n	8021d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8021d0e:	2301      	movs	r3, #1
 8021d10:	e03f      	b.n	8021d92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8021d12:	687b      	ldr	r3, [r7, #4]
 8021d14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8021d18:	b2db      	uxtb	r3, r3
 8021d1a:	2b00      	cmp	r3, #0
 8021d1c:	d106      	bne.n	8021d2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8021d1e:	687b      	ldr	r3, [r7, #4]
 8021d20:	2200      	movs	r2, #0
 8021d22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8021d26:	6878      	ldr	r0, [r7, #4]
 8021d28:	f7fe ff98 	bl	8020c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8021d2c:	687b      	ldr	r3, [r7, #4]
 8021d2e:	2224      	movs	r2, #36	; 0x24
 8021d30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8021d34:	687b      	ldr	r3, [r7, #4]
 8021d36:	681b      	ldr	r3, [r3, #0]
 8021d38:	68da      	ldr	r2, [r3, #12]
 8021d3a:	687b      	ldr	r3, [r7, #4]
 8021d3c:	681b      	ldr	r3, [r3, #0]
 8021d3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8021d42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8021d44:	6878      	ldr	r0, [r7, #4]
 8021d46:	f000 fb4b 	bl	80223e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8021d4a:	687b      	ldr	r3, [r7, #4]
 8021d4c:	681b      	ldr	r3, [r3, #0]
 8021d4e:	691a      	ldr	r2, [r3, #16]
 8021d50:	687b      	ldr	r3, [r7, #4]
 8021d52:	681b      	ldr	r3, [r3, #0]
 8021d54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8021d58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8021d5a:	687b      	ldr	r3, [r7, #4]
 8021d5c:	681b      	ldr	r3, [r3, #0]
 8021d5e:	695a      	ldr	r2, [r3, #20]
 8021d60:	687b      	ldr	r3, [r7, #4]
 8021d62:	681b      	ldr	r3, [r3, #0]
 8021d64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8021d68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8021d6a:	687b      	ldr	r3, [r7, #4]
 8021d6c:	681b      	ldr	r3, [r3, #0]
 8021d6e:	68da      	ldr	r2, [r3, #12]
 8021d70:	687b      	ldr	r3, [r7, #4]
 8021d72:	681b      	ldr	r3, [r3, #0]
 8021d74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8021d78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021d7a:	687b      	ldr	r3, [r7, #4]
 8021d7c:	2200      	movs	r2, #0
 8021d7e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8021d80:	687b      	ldr	r3, [r7, #4]
 8021d82:	2220      	movs	r2, #32
 8021d84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8021d88:	687b      	ldr	r3, [r7, #4]
 8021d8a:	2220      	movs	r2, #32
 8021d8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8021d90:	2300      	movs	r3, #0
}
 8021d92:	4618      	mov	r0, r3
 8021d94:	3708      	adds	r7, #8
 8021d96:	46bd      	mov	sp, r7
 8021d98:	bd80      	pop	{r7, pc}

08021d9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8021d9a:	b580      	push	{r7, lr}
 8021d9c:	b088      	sub	sp, #32
 8021d9e:	af02      	add	r7, sp, #8
 8021da0:	60f8      	str	r0, [r7, #12]
 8021da2:	60b9      	str	r1, [r7, #8]
 8021da4:	603b      	str	r3, [r7, #0]
 8021da6:	4613      	mov	r3, r2
 8021da8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8021daa:	2300      	movs	r3, #0
 8021dac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8021dae:	68fb      	ldr	r3, [r7, #12]
 8021db0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8021db4:	b2db      	uxtb	r3, r3
 8021db6:	2b20      	cmp	r3, #32
 8021db8:	f040 8083 	bne.w	8021ec2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8021dbc:	68bb      	ldr	r3, [r7, #8]
 8021dbe:	2b00      	cmp	r3, #0
 8021dc0:	d002      	beq.n	8021dc8 <HAL_UART_Transmit+0x2e>
 8021dc2:	88fb      	ldrh	r3, [r7, #6]
 8021dc4:	2b00      	cmp	r3, #0
 8021dc6:	d101      	bne.n	8021dcc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8021dc8:	2301      	movs	r3, #1
 8021dca:	e07b      	b.n	8021ec4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8021dcc:	68fb      	ldr	r3, [r7, #12]
 8021dce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8021dd2:	2b01      	cmp	r3, #1
 8021dd4:	d101      	bne.n	8021dda <HAL_UART_Transmit+0x40>
 8021dd6:	2302      	movs	r3, #2
 8021dd8:	e074      	b.n	8021ec4 <HAL_UART_Transmit+0x12a>
 8021dda:	68fb      	ldr	r3, [r7, #12]
 8021ddc:	2201      	movs	r2, #1
 8021dde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021de2:	68fb      	ldr	r3, [r7, #12]
 8021de4:	2200      	movs	r2, #0
 8021de6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8021de8:	68fb      	ldr	r3, [r7, #12]
 8021dea:	2221      	movs	r2, #33	; 0x21
 8021dec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8021df0:	f7ff f82a 	bl	8020e48 <HAL_GetTick>
 8021df4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8021df6:	68fb      	ldr	r3, [r7, #12]
 8021df8:	88fa      	ldrh	r2, [r7, #6]
 8021dfa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8021dfc:	68fb      	ldr	r3, [r7, #12]
 8021dfe:	88fa      	ldrh	r2, [r7, #6]
 8021e00:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8021e02:	68fb      	ldr	r3, [r7, #12]
 8021e04:	2200      	movs	r2, #0
 8021e06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8021e0a:	e042      	b.n	8021e92 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8021e0c:	68fb      	ldr	r3, [r7, #12]
 8021e0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8021e10:	b29b      	uxth	r3, r3
 8021e12:	3b01      	subs	r3, #1
 8021e14:	b29a      	uxth	r2, r3
 8021e16:	68fb      	ldr	r3, [r7, #12]
 8021e18:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8021e1a:	68fb      	ldr	r3, [r7, #12]
 8021e1c:	689b      	ldr	r3, [r3, #8]
 8021e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021e22:	d122      	bne.n	8021e6a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8021e24:	683b      	ldr	r3, [r7, #0]
 8021e26:	9300      	str	r3, [sp, #0]
 8021e28:	697b      	ldr	r3, [r7, #20]
 8021e2a:	2200      	movs	r2, #0
 8021e2c:	2180      	movs	r1, #128	; 0x80
 8021e2e:	68f8      	ldr	r0, [r7, #12]
 8021e30:	f000 f96a 	bl	8022108 <UART_WaitOnFlagUntilTimeout>
 8021e34:	4603      	mov	r3, r0
 8021e36:	2b00      	cmp	r3, #0
 8021e38:	d001      	beq.n	8021e3e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8021e3a:	2303      	movs	r3, #3
 8021e3c:	e042      	b.n	8021ec4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8021e3e:	68bb      	ldr	r3, [r7, #8]
 8021e40:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8021e42:	693b      	ldr	r3, [r7, #16]
 8021e44:	881b      	ldrh	r3, [r3, #0]
 8021e46:	461a      	mov	r2, r3
 8021e48:	68fb      	ldr	r3, [r7, #12]
 8021e4a:	681b      	ldr	r3, [r3, #0]
 8021e4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8021e50:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8021e52:	68fb      	ldr	r3, [r7, #12]
 8021e54:	691b      	ldr	r3, [r3, #16]
 8021e56:	2b00      	cmp	r3, #0
 8021e58:	d103      	bne.n	8021e62 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8021e5a:	68bb      	ldr	r3, [r7, #8]
 8021e5c:	3302      	adds	r3, #2
 8021e5e:	60bb      	str	r3, [r7, #8]
 8021e60:	e017      	b.n	8021e92 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8021e62:	68bb      	ldr	r3, [r7, #8]
 8021e64:	3301      	adds	r3, #1
 8021e66:	60bb      	str	r3, [r7, #8]
 8021e68:	e013      	b.n	8021e92 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8021e6a:	683b      	ldr	r3, [r7, #0]
 8021e6c:	9300      	str	r3, [sp, #0]
 8021e6e:	697b      	ldr	r3, [r7, #20]
 8021e70:	2200      	movs	r2, #0
 8021e72:	2180      	movs	r1, #128	; 0x80
 8021e74:	68f8      	ldr	r0, [r7, #12]
 8021e76:	f000 f947 	bl	8022108 <UART_WaitOnFlagUntilTimeout>
 8021e7a:	4603      	mov	r3, r0
 8021e7c:	2b00      	cmp	r3, #0
 8021e7e:	d001      	beq.n	8021e84 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8021e80:	2303      	movs	r3, #3
 8021e82:	e01f      	b.n	8021ec4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8021e84:	68bb      	ldr	r3, [r7, #8]
 8021e86:	1c5a      	adds	r2, r3, #1
 8021e88:	60ba      	str	r2, [r7, #8]
 8021e8a:	781a      	ldrb	r2, [r3, #0]
 8021e8c:	68fb      	ldr	r3, [r7, #12]
 8021e8e:	681b      	ldr	r3, [r3, #0]
 8021e90:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8021e92:	68fb      	ldr	r3, [r7, #12]
 8021e94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8021e96:	b29b      	uxth	r3, r3
 8021e98:	2b00      	cmp	r3, #0
 8021e9a:	d1b7      	bne.n	8021e0c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8021e9c:	683b      	ldr	r3, [r7, #0]
 8021e9e:	9300      	str	r3, [sp, #0]
 8021ea0:	697b      	ldr	r3, [r7, #20]
 8021ea2:	2200      	movs	r2, #0
 8021ea4:	2140      	movs	r1, #64	; 0x40
 8021ea6:	68f8      	ldr	r0, [r7, #12]
 8021ea8:	f000 f92e 	bl	8022108 <UART_WaitOnFlagUntilTimeout>
 8021eac:	4603      	mov	r3, r0
 8021eae:	2b00      	cmp	r3, #0
 8021eb0:	d001      	beq.n	8021eb6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8021eb2:	2303      	movs	r3, #3
 8021eb4:	e006      	b.n	8021ec4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8021eb6:	68fb      	ldr	r3, [r7, #12]
 8021eb8:	2220      	movs	r2, #32
 8021eba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8021ebe:	2300      	movs	r3, #0
 8021ec0:	e000      	b.n	8021ec4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8021ec2:	2302      	movs	r3, #2
  }
}
 8021ec4:	4618      	mov	r0, r3
 8021ec6:	3718      	adds	r7, #24
 8021ec8:	46bd      	mov	sp, r7
 8021eca:	bd80      	pop	{r7, pc}

08021ecc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8021ecc:	b580      	push	{r7, lr}
 8021ece:	b088      	sub	sp, #32
 8021ed0:	af00      	add	r7, sp, #0
 8021ed2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8021ed4:	687b      	ldr	r3, [r7, #4]
 8021ed6:	681b      	ldr	r3, [r3, #0]
 8021ed8:	681b      	ldr	r3, [r3, #0]
 8021eda:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8021edc:	687b      	ldr	r3, [r7, #4]
 8021ede:	681b      	ldr	r3, [r3, #0]
 8021ee0:	68db      	ldr	r3, [r3, #12]
 8021ee2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8021ee4:	687b      	ldr	r3, [r7, #4]
 8021ee6:	681b      	ldr	r3, [r3, #0]
 8021ee8:	695b      	ldr	r3, [r3, #20]
 8021eea:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8021eec:	2300      	movs	r3, #0
 8021eee:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8021ef0:	2300      	movs	r3, #0
 8021ef2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8021ef4:	69fb      	ldr	r3, [r7, #28]
 8021ef6:	f003 030f 	and.w	r3, r3, #15
 8021efa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8021efc:	693b      	ldr	r3, [r7, #16]
 8021efe:	2b00      	cmp	r3, #0
 8021f00:	d10d      	bne.n	8021f1e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8021f02:	69fb      	ldr	r3, [r7, #28]
 8021f04:	f003 0320 	and.w	r3, r3, #32
 8021f08:	2b00      	cmp	r3, #0
 8021f0a:	d008      	beq.n	8021f1e <HAL_UART_IRQHandler+0x52>
 8021f0c:	69bb      	ldr	r3, [r7, #24]
 8021f0e:	f003 0320 	and.w	r3, r3, #32
 8021f12:	2b00      	cmp	r3, #0
 8021f14:	d003      	beq.n	8021f1e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8021f16:	6878      	ldr	r0, [r7, #4]
 8021f18:	f000 f9e0 	bl	80222dc <UART_Receive_IT>
      return;
 8021f1c:	e0d1      	b.n	80220c2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8021f1e:	693b      	ldr	r3, [r7, #16]
 8021f20:	2b00      	cmp	r3, #0
 8021f22:	f000 80b0 	beq.w	8022086 <HAL_UART_IRQHandler+0x1ba>
 8021f26:	697b      	ldr	r3, [r7, #20]
 8021f28:	f003 0301 	and.w	r3, r3, #1
 8021f2c:	2b00      	cmp	r3, #0
 8021f2e:	d105      	bne.n	8021f3c <HAL_UART_IRQHandler+0x70>
 8021f30:	69bb      	ldr	r3, [r7, #24]
 8021f32:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8021f36:	2b00      	cmp	r3, #0
 8021f38:	f000 80a5 	beq.w	8022086 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8021f3c:	69fb      	ldr	r3, [r7, #28]
 8021f3e:	f003 0301 	and.w	r3, r3, #1
 8021f42:	2b00      	cmp	r3, #0
 8021f44:	d00a      	beq.n	8021f5c <HAL_UART_IRQHandler+0x90>
 8021f46:	69bb      	ldr	r3, [r7, #24]
 8021f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021f4c:	2b00      	cmp	r3, #0
 8021f4e:	d005      	beq.n	8021f5c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8021f50:	687b      	ldr	r3, [r7, #4]
 8021f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021f54:	f043 0201 	orr.w	r2, r3, #1
 8021f58:	687b      	ldr	r3, [r7, #4]
 8021f5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8021f5c:	69fb      	ldr	r3, [r7, #28]
 8021f5e:	f003 0304 	and.w	r3, r3, #4
 8021f62:	2b00      	cmp	r3, #0
 8021f64:	d00a      	beq.n	8021f7c <HAL_UART_IRQHandler+0xb0>
 8021f66:	697b      	ldr	r3, [r7, #20]
 8021f68:	f003 0301 	and.w	r3, r3, #1
 8021f6c:	2b00      	cmp	r3, #0
 8021f6e:	d005      	beq.n	8021f7c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8021f70:	687b      	ldr	r3, [r7, #4]
 8021f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021f74:	f043 0202 	orr.w	r2, r3, #2
 8021f78:	687b      	ldr	r3, [r7, #4]
 8021f7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8021f7c:	69fb      	ldr	r3, [r7, #28]
 8021f7e:	f003 0302 	and.w	r3, r3, #2
 8021f82:	2b00      	cmp	r3, #0
 8021f84:	d00a      	beq.n	8021f9c <HAL_UART_IRQHandler+0xd0>
 8021f86:	697b      	ldr	r3, [r7, #20]
 8021f88:	f003 0301 	and.w	r3, r3, #1
 8021f8c:	2b00      	cmp	r3, #0
 8021f8e:	d005      	beq.n	8021f9c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8021f90:	687b      	ldr	r3, [r7, #4]
 8021f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021f94:	f043 0204 	orr.w	r2, r3, #4
 8021f98:	687b      	ldr	r3, [r7, #4]
 8021f9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8021f9c:	69fb      	ldr	r3, [r7, #28]
 8021f9e:	f003 0308 	and.w	r3, r3, #8
 8021fa2:	2b00      	cmp	r3, #0
 8021fa4:	d00f      	beq.n	8021fc6 <HAL_UART_IRQHandler+0xfa>
 8021fa6:	69bb      	ldr	r3, [r7, #24]
 8021fa8:	f003 0320 	and.w	r3, r3, #32
 8021fac:	2b00      	cmp	r3, #0
 8021fae:	d104      	bne.n	8021fba <HAL_UART_IRQHandler+0xee>
 8021fb0:	697b      	ldr	r3, [r7, #20]
 8021fb2:	f003 0301 	and.w	r3, r3, #1
 8021fb6:	2b00      	cmp	r3, #0
 8021fb8:	d005      	beq.n	8021fc6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8021fba:	687b      	ldr	r3, [r7, #4]
 8021fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021fbe:	f043 0208 	orr.w	r2, r3, #8
 8021fc2:	687b      	ldr	r3, [r7, #4]
 8021fc4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8021fc6:	687b      	ldr	r3, [r7, #4]
 8021fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021fca:	2b00      	cmp	r3, #0
 8021fcc:	d078      	beq.n	80220c0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8021fce:	69fb      	ldr	r3, [r7, #28]
 8021fd0:	f003 0320 	and.w	r3, r3, #32
 8021fd4:	2b00      	cmp	r3, #0
 8021fd6:	d007      	beq.n	8021fe8 <HAL_UART_IRQHandler+0x11c>
 8021fd8:	69bb      	ldr	r3, [r7, #24]
 8021fda:	f003 0320 	and.w	r3, r3, #32
 8021fde:	2b00      	cmp	r3, #0
 8021fe0:	d002      	beq.n	8021fe8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8021fe2:	6878      	ldr	r0, [r7, #4]
 8021fe4:	f000 f97a 	bl	80222dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8021fe8:	687b      	ldr	r3, [r7, #4]
 8021fea:	681b      	ldr	r3, [r3, #0]
 8021fec:	695b      	ldr	r3, [r3, #20]
 8021fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021ff2:	2b40      	cmp	r3, #64	; 0x40
 8021ff4:	bf0c      	ite	eq
 8021ff6:	2301      	moveq	r3, #1
 8021ff8:	2300      	movne	r3, #0
 8021ffa:	b2db      	uxtb	r3, r3
 8021ffc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8021ffe:	687b      	ldr	r3, [r7, #4]
 8022000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022002:	f003 0308 	and.w	r3, r3, #8
 8022006:	2b00      	cmp	r3, #0
 8022008:	d102      	bne.n	8022010 <HAL_UART_IRQHandler+0x144>
 802200a:	68fb      	ldr	r3, [r7, #12]
 802200c:	2b00      	cmp	r3, #0
 802200e:	d031      	beq.n	8022074 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8022010:	6878      	ldr	r0, [r7, #4]
 8022012:	f000 f8c3 	bl	802219c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022016:	687b      	ldr	r3, [r7, #4]
 8022018:	681b      	ldr	r3, [r3, #0]
 802201a:	695b      	ldr	r3, [r3, #20]
 802201c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022020:	2b40      	cmp	r3, #64	; 0x40
 8022022:	d123      	bne.n	802206c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8022024:	687b      	ldr	r3, [r7, #4]
 8022026:	681b      	ldr	r3, [r3, #0]
 8022028:	695a      	ldr	r2, [r3, #20]
 802202a:	687b      	ldr	r3, [r7, #4]
 802202c:	681b      	ldr	r3, [r3, #0]
 802202e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8022032:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8022034:	687b      	ldr	r3, [r7, #4]
 8022036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022038:	2b00      	cmp	r3, #0
 802203a:	d013      	beq.n	8022064 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 802203c:	687b      	ldr	r3, [r7, #4]
 802203e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022040:	4a21      	ldr	r2, [pc, #132]	; (80220c8 <HAL_UART_IRQHandler+0x1fc>)
 8022042:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8022044:	687b      	ldr	r3, [r7, #4]
 8022046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022048:	4618      	mov	r0, r3
 802204a:	f7ff f83c 	bl	80210c6 <HAL_DMA_Abort_IT>
 802204e:	4603      	mov	r3, r0
 8022050:	2b00      	cmp	r3, #0
 8022052:	d016      	beq.n	8022082 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8022054:	687b      	ldr	r3, [r7, #4]
 8022056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802205a:	687a      	ldr	r2, [r7, #4]
 802205c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 802205e:	4610      	mov	r0, r2
 8022060:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022062:	e00e      	b.n	8022082 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8022064:	6878      	ldr	r0, [r7, #4]
 8022066:	f000 f845 	bl	80220f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802206a:	e00a      	b.n	8022082 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 802206c:	6878      	ldr	r0, [r7, #4]
 802206e:	f000 f841 	bl	80220f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022072:	e006      	b.n	8022082 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8022074:	6878      	ldr	r0, [r7, #4]
 8022076:	f000 f83d 	bl	80220f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 802207a:	687b      	ldr	r3, [r7, #4]
 802207c:	2200      	movs	r2, #0
 802207e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8022080:	e01e      	b.n	80220c0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022082:	bf00      	nop
    return;
 8022084:	e01c      	b.n	80220c0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8022086:	69fb      	ldr	r3, [r7, #28]
 8022088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802208c:	2b00      	cmp	r3, #0
 802208e:	d008      	beq.n	80220a2 <HAL_UART_IRQHandler+0x1d6>
 8022090:	69bb      	ldr	r3, [r7, #24]
 8022092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022096:	2b00      	cmp	r3, #0
 8022098:	d003      	beq.n	80220a2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 802209a:	6878      	ldr	r0, [r7, #4]
 802209c:	f000 f8b0 	bl	8022200 <UART_Transmit_IT>
    return;
 80220a0:	e00f      	b.n	80220c2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80220a2:	69fb      	ldr	r3, [r7, #28]
 80220a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80220a8:	2b00      	cmp	r3, #0
 80220aa:	d00a      	beq.n	80220c2 <HAL_UART_IRQHandler+0x1f6>
 80220ac:	69bb      	ldr	r3, [r7, #24]
 80220ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80220b2:	2b00      	cmp	r3, #0
 80220b4:	d005      	beq.n	80220c2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80220b6:	6878      	ldr	r0, [r7, #4]
 80220b8:	f000 f8f8 	bl	80222ac <UART_EndTransmit_IT>
    return;
 80220bc:	bf00      	nop
 80220be:	e000      	b.n	80220c2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80220c0:	bf00      	nop
  }
}
 80220c2:	3720      	adds	r7, #32
 80220c4:	46bd      	mov	sp, r7
 80220c6:	bd80      	pop	{r7, pc}
 80220c8:	080221d9 	.word	0x080221d9

080220cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80220cc:	b480      	push	{r7}
 80220ce:	b083      	sub	sp, #12
 80220d0:	af00      	add	r7, sp, #0
 80220d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80220d4:	bf00      	nop
 80220d6:	370c      	adds	r7, #12
 80220d8:	46bd      	mov	sp, r7
 80220da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220de:	4770      	bx	lr

080220e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80220e0:	b480      	push	{r7}
 80220e2:	b083      	sub	sp, #12
 80220e4:	af00      	add	r7, sp, #0
 80220e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80220e8:	bf00      	nop
 80220ea:	370c      	adds	r7, #12
 80220ec:	46bd      	mov	sp, r7
 80220ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220f2:	4770      	bx	lr

080220f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80220f4:	b480      	push	{r7}
 80220f6:	b083      	sub	sp, #12
 80220f8:	af00      	add	r7, sp, #0
 80220fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80220fc:	bf00      	nop
 80220fe:	370c      	adds	r7, #12
 8022100:	46bd      	mov	sp, r7
 8022102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022106:	4770      	bx	lr

08022108 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8022108:	b580      	push	{r7, lr}
 802210a:	b084      	sub	sp, #16
 802210c:	af00      	add	r7, sp, #0
 802210e:	60f8      	str	r0, [r7, #12]
 8022110:	60b9      	str	r1, [r7, #8]
 8022112:	603b      	str	r3, [r7, #0]
 8022114:	4613      	mov	r3, r2
 8022116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8022118:	e02c      	b.n	8022174 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802211a:	69bb      	ldr	r3, [r7, #24]
 802211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022120:	d028      	beq.n	8022174 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8022122:	69bb      	ldr	r3, [r7, #24]
 8022124:	2b00      	cmp	r3, #0
 8022126:	d007      	beq.n	8022138 <UART_WaitOnFlagUntilTimeout+0x30>
 8022128:	f7fe fe8e 	bl	8020e48 <HAL_GetTick>
 802212c:	4602      	mov	r2, r0
 802212e:	683b      	ldr	r3, [r7, #0]
 8022130:	1ad3      	subs	r3, r2, r3
 8022132:	69ba      	ldr	r2, [r7, #24]
 8022134:	429a      	cmp	r2, r3
 8022136:	d21d      	bcs.n	8022174 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8022138:	68fb      	ldr	r3, [r7, #12]
 802213a:	681b      	ldr	r3, [r3, #0]
 802213c:	68da      	ldr	r2, [r3, #12]
 802213e:	68fb      	ldr	r3, [r7, #12]
 8022140:	681b      	ldr	r3, [r3, #0]
 8022142:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8022146:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8022148:	68fb      	ldr	r3, [r7, #12]
 802214a:	681b      	ldr	r3, [r3, #0]
 802214c:	695a      	ldr	r2, [r3, #20]
 802214e:	68fb      	ldr	r3, [r7, #12]
 8022150:	681b      	ldr	r3, [r3, #0]
 8022152:	f022 0201 	bic.w	r2, r2, #1
 8022156:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8022158:	68fb      	ldr	r3, [r7, #12]
 802215a:	2220      	movs	r2, #32
 802215c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8022160:	68fb      	ldr	r3, [r7, #12]
 8022162:	2220      	movs	r2, #32
 8022164:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8022168:	68fb      	ldr	r3, [r7, #12]
 802216a:	2200      	movs	r2, #0
 802216c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8022170:	2303      	movs	r3, #3
 8022172:	e00f      	b.n	8022194 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8022174:	68fb      	ldr	r3, [r7, #12]
 8022176:	681b      	ldr	r3, [r3, #0]
 8022178:	681a      	ldr	r2, [r3, #0]
 802217a:	68bb      	ldr	r3, [r7, #8]
 802217c:	4013      	ands	r3, r2
 802217e:	68ba      	ldr	r2, [r7, #8]
 8022180:	429a      	cmp	r2, r3
 8022182:	bf0c      	ite	eq
 8022184:	2301      	moveq	r3, #1
 8022186:	2300      	movne	r3, #0
 8022188:	b2db      	uxtb	r3, r3
 802218a:	461a      	mov	r2, r3
 802218c:	79fb      	ldrb	r3, [r7, #7]
 802218e:	429a      	cmp	r2, r3
 8022190:	d0c3      	beq.n	802211a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8022192:	2300      	movs	r3, #0
}
 8022194:	4618      	mov	r0, r3
 8022196:	3710      	adds	r7, #16
 8022198:	46bd      	mov	sp, r7
 802219a:	bd80      	pop	{r7, pc}

0802219c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802219c:	b480      	push	{r7}
 802219e:	b083      	sub	sp, #12
 80221a0:	af00      	add	r7, sp, #0
 80221a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80221a4:	687b      	ldr	r3, [r7, #4]
 80221a6:	681b      	ldr	r3, [r3, #0]
 80221a8:	68da      	ldr	r2, [r3, #12]
 80221aa:	687b      	ldr	r3, [r7, #4]
 80221ac:	681b      	ldr	r3, [r3, #0]
 80221ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80221b2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80221b4:	687b      	ldr	r3, [r7, #4]
 80221b6:	681b      	ldr	r3, [r3, #0]
 80221b8:	695a      	ldr	r2, [r3, #20]
 80221ba:	687b      	ldr	r3, [r7, #4]
 80221bc:	681b      	ldr	r3, [r3, #0]
 80221be:	f022 0201 	bic.w	r2, r2, #1
 80221c2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80221c4:	687b      	ldr	r3, [r7, #4]
 80221c6:	2220      	movs	r2, #32
 80221c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80221cc:	bf00      	nop
 80221ce:	370c      	adds	r7, #12
 80221d0:	46bd      	mov	sp, r7
 80221d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221d6:	4770      	bx	lr

080221d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80221d8:	b580      	push	{r7, lr}
 80221da:	b084      	sub	sp, #16
 80221dc:	af00      	add	r7, sp, #0
 80221de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80221e0:	687b      	ldr	r3, [r7, #4]
 80221e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80221e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80221e6:	68fb      	ldr	r3, [r7, #12]
 80221e8:	2200      	movs	r2, #0
 80221ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80221ec:	68fb      	ldr	r3, [r7, #12]
 80221ee:	2200      	movs	r2, #0
 80221f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80221f2:	68f8      	ldr	r0, [r7, #12]
 80221f4:	f7ff ff7e 	bl	80220f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80221f8:	bf00      	nop
 80221fa:	3710      	adds	r7, #16
 80221fc:	46bd      	mov	sp, r7
 80221fe:	bd80      	pop	{r7, pc}

08022200 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8022200:	b480      	push	{r7}
 8022202:	b085      	sub	sp, #20
 8022204:	af00      	add	r7, sp, #0
 8022206:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8022208:	687b      	ldr	r3, [r7, #4]
 802220a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 802220e:	b2db      	uxtb	r3, r3
 8022210:	2b21      	cmp	r3, #33	; 0x21
 8022212:	d144      	bne.n	802229e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8022214:	687b      	ldr	r3, [r7, #4]
 8022216:	689b      	ldr	r3, [r3, #8]
 8022218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802221c:	d11a      	bne.n	8022254 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 802221e:	687b      	ldr	r3, [r7, #4]
 8022220:	6a1b      	ldr	r3, [r3, #32]
 8022222:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8022224:	68fb      	ldr	r3, [r7, #12]
 8022226:	881b      	ldrh	r3, [r3, #0]
 8022228:	461a      	mov	r2, r3
 802222a:	687b      	ldr	r3, [r7, #4]
 802222c:	681b      	ldr	r3, [r3, #0]
 802222e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8022232:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8022234:	687b      	ldr	r3, [r7, #4]
 8022236:	691b      	ldr	r3, [r3, #16]
 8022238:	2b00      	cmp	r3, #0
 802223a:	d105      	bne.n	8022248 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 802223c:	687b      	ldr	r3, [r7, #4]
 802223e:	6a1b      	ldr	r3, [r3, #32]
 8022240:	1c9a      	adds	r2, r3, #2
 8022242:	687b      	ldr	r3, [r7, #4]
 8022244:	621a      	str	r2, [r3, #32]
 8022246:	e00e      	b.n	8022266 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8022248:	687b      	ldr	r3, [r7, #4]
 802224a:	6a1b      	ldr	r3, [r3, #32]
 802224c:	1c5a      	adds	r2, r3, #1
 802224e:	687b      	ldr	r3, [r7, #4]
 8022250:	621a      	str	r2, [r3, #32]
 8022252:	e008      	b.n	8022266 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8022254:	687b      	ldr	r3, [r7, #4]
 8022256:	6a1b      	ldr	r3, [r3, #32]
 8022258:	1c59      	adds	r1, r3, #1
 802225a:	687a      	ldr	r2, [r7, #4]
 802225c:	6211      	str	r1, [r2, #32]
 802225e:	781a      	ldrb	r2, [r3, #0]
 8022260:	687b      	ldr	r3, [r7, #4]
 8022262:	681b      	ldr	r3, [r3, #0]
 8022264:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8022266:	687b      	ldr	r3, [r7, #4]
 8022268:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802226a:	b29b      	uxth	r3, r3
 802226c:	3b01      	subs	r3, #1
 802226e:	b29b      	uxth	r3, r3
 8022270:	687a      	ldr	r2, [r7, #4]
 8022272:	4619      	mov	r1, r3
 8022274:	84d1      	strh	r1, [r2, #38]	; 0x26
 8022276:	2b00      	cmp	r3, #0
 8022278:	d10f      	bne.n	802229a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 802227a:	687b      	ldr	r3, [r7, #4]
 802227c:	681b      	ldr	r3, [r3, #0]
 802227e:	68da      	ldr	r2, [r3, #12]
 8022280:	687b      	ldr	r3, [r7, #4]
 8022282:	681b      	ldr	r3, [r3, #0]
 8022284:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8022288:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 802228a:	687b      	ldr	r3, [r7, #4]
 802228c:	681b      	ldr	r3, [r3, #0]
 802228e:	68da      	ldr	r2, [r3, #12]
 8022290:	687b      	ldr	r3, [r7, #4]
 8022292:	681b      	ldr	r3, [r3, #0]
 8022294:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8022298:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 802229a:	2300      	movs	r3, #0
 802229c:	e000      	b.n	80222a0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 802229e:	2302      	movs	r3, #2
  }
}
 80222a0:	4618      	mov	r0, r3
 80222a2:	3714      	adds	r7, #20
 80222a4:	46bd      	mov	sp, r7
 80222a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222aa:	4770      	bx	lr

080222ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80222ac:	b580      	push	{r7, lr}
 80222ae:	b082      	sub	sp, #8
 80222b0:	af00      	add	r7, sp, #0
 80222b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80222b4:	687b      	ldr	r3, [r7, #4]
 80222b6:	681b      	ldr	r3, [r3, #0]
 80222b8:	68da      	ldr	r2, [r3, #12]
 80222ba:	687b      	ldr	r3, [r7, #4]
 80222bc:	681b      	ldr	r3, [r3, #0]
 80222be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80222c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80222c4:	687b      	ldr	r3, [r7, #4]
 80222c6:	2220      	movs	r2, #32
 80222c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80222cc:	6878      	ldr	r0, [r7, #4]
 80222ce:	f7ff fefd 	bl	80220cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80222d2:	2300      	movs	r3, #0
}
 80222d4:	4618      	mov	r0, r3
 80222d6:	3708      	adds	r7, #8
 80222d8:	46bd      	mov	sp, r7
 80222da:	bd80      	pop	{r7, pc}

080222dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80222dc:	b580      	push	{r7, lr}
 80222de:	b084      	sub	sp, #16
 80222e0:	af00      	add	r7, sp, #0
 80222e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80222e4:	687b      	ldr	r3, [r7, #4]
 80222e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80222ea:	b2db      	uxtb	r3, r3
 80222ec:	2b22      	cmp	r3, #34	; 0x22
 80222ee:	d171      	bne.n	80223d4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80222f0:	687b      	ldr	r3, [r7, #4]
 80222f2:	689b      	ldr	r3, [r3, #8]
 80222f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80222f8:	d123      	bne.n	8022342 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80222fa:	687b      	ldr	r3, [r7, #4]
 80222fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80222fe:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8022300:	687b      	ldr	r3, [r7, #4]
 8022302:	691b      	ldr	r3, [r3, #16]
 8022304:	2b00      	cmp	r3, #0
 8022306:	d10e      	bne.n	8022326 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8022308:	687b      	ldr	r3, [r7, #4]
 802230a:	681b      	ldr	r3, [r3, #0]
 802230c:	685b      	ldr	r3, [r3, #4]
 802230e:	b29b      	uxth	r3, r3
 8022310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022314:	b29a      	uxth	r2, r3
 8022316:	68fb      	ldr	r3, [r7, #12]
 8022318:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 802231a:	687b      	ldr	r3, [r7, #4]
 802231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802231e:	1c9a      	adds	r2, r3, #2
 8022320:	687b      	ldr	r3, [r7, #4]
 8022322:	629a      	str	r2, [r3, #40]	; 0x28
 8022324:	e029      	b.n	802237a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8022326:	687b      	ldr	r3, [r7, #4]
 8022328:	681b      	ldr	r3, [r3, #0]
 802232a:	685b      	ldr	r3, [r3, #4]
 802232c:	b29b      	uxth	r3, r3
 802232e:	b2db      	uxtb	r3, r3
 8022330:	b29a      	uxth	r2, r3
 8022332:	68fb      	ldr	r3, [r7, #12]
 8022334:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8022336:	687b      	ldr	r3, [r7, #4]
 8022338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802233a:	1c5a      	adds	r2, r3, #1
 802233c:	687b      	ldr	r3, [r7, #4]
 802233e:	629a      	str	r2, [r3, #40]	; 0x28
 8022340:	e01b      	b.n	802237a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8022342:	687b      	ldr	r3, [r7, #4]
 8022344:	691b      	ldr	r3, [r3, #16]
 8022346:	2b00      	cmp	r3, #0
 8022348:	d10a      	bne.n	8022360 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 802234a:	687b      	ldr	r3, [r7, #4]
 802234c:	681b      	ldr	r3, [r3, #0]
 802234e:	6858      	ldr	r0, [r3, #4]
 8022350:	687b      	ldr	r3, [r7, #4]
 8022352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022354:	1c59      	adds	r1, r3, #1
 8022356:	687a      	ldr	r2, [r7, #4]
 8022358:	6291      	str	r1, [r2, #40]	; 0x28
 802235a:	b2c2      	uxtb	r2, r0
 802235c:	701a      	strb	r2, [r3, #0]
 802235e:	e00c      	b.n	802237a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8022360:	687b      	ldr	r3, [r7, #4]
 8022362:	681b      	ldr	r3, [r3, #0]
 8022364:	685b      	ldr	r3, [r3, #4]
 8022366:	b2da      	uxtb	r2, r3
 8022368:	687b      	ldr	r3, [r7, #4]
 802236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802236c:	1c58      	adds	r0, r3, #1
 802236e:	6879      	ldr	r1, [r7, #4]
 8022370:	6288      	str	r0, [r1, #40]	; 0x28
 8022372:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8022376:	b2d2      	uxtb	r2, r2
 8022378:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 802237a:	687b      	ldr	r3, [r7, #4]
 802237c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802237e:	b29b      	uxth	r3, r3
 8022380:	3b01      	subs	r3, #1
 8022382:	b29b      	uxth	r3, r3
 8022384:	687a      	ldr	r2, [r7, #4]
 8022386:	4619      	mov	r1, r3
 8022388:	85d1      	strh	r1, [r2, #46]	; 0x2e
 802238a:	2b00      	cmp	r3, #0
 802238c:	d120      	bne.n	80223d0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 802238e:	687b      	ldr	r3, [r7, #4]
 8022390:	681b      	ldr	r3, [r3, #0]
 8022392:	68da      	ldr	r2, [r3, #12]
 8022394:	687b      	ldr	r3, [r7, #4]
 8022396:	681b      	ldr	r3, [r3, #0]
 8022398:	f022 0220 	bic.w	r2, r2, #32
 802239c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 802239e:	687b      	ldr	r3, [r7, #4]
 80223a0:	681b      	ldr	r3, [r3, #0]
 80223a2:	68da      	ldr	r2, [r3, #12]
 80223a4:	687b      	ldr	r3, [r7, #4]
 80223a6:	681b      	ldr	r3, [r3, #0]
 80223a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80223ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80223ae:	687b      	ldr	r3, [r7, #4]
 80223b0:	681b      	ldr	r3, [r3, #0]
 80223b2:	695a      	ldr	r2, [r3, #20]
 80223b4:	687b      	ldr	r3, [r7, #4]
 80223b6:	681b      	ldr	r3, [r3, #0]
 80223b8:	f022 0201 	bic.w	r2, r2, #1
 80223bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80223be:	687b      	ldr	r3, [r7, #4]
 80223c0:	2220      	movs	r2, #32
 80223c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80223c6:	6878      	ldr	r0, [r7, #4]
 80223c8:	f7ff fe8a 	bl	80220e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80223cc:	2300      	movs	r3, #0
 80223ce:	e002      	b.n	80223d6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80223d0:	2300      	movs	r3, #0
 80223d2:	e000      	b.n	80223d6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80223d4:	2302      	movs	r3, #2
  }
}
 80223d6:	4618      	mov	r0, r3
 80223d8:	3710      	adds	r7, #16
 80223da:	46bd      	mov	sp, r7
 80223dc:	bd80      	pop	{r7, pc}
	...

080223e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80223e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223e4:	b085      	sub	sp, #20
 80223e6:	af00      	add	r7, sp, #0
 80223e8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80223ea:	687b      	ldr	r3, [r7, #4]
 80223ec:	681b      	ldr	r3, [r3, #0]
 80223ee:	691b      	ldr	r3, [r3, #16]
 80223f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80223f4:	687b      	ldr	r3, [r7, #4]
 80223f6:	68da      	ldr	r2, [r3, #12]
 80223f8:	687b      	ldr	r3, [r7, #4]
 80223fa:	681b      	ldr	r3, [r3, #0]
 80223fc:	430a      	orrs	r2, r1
 80223fe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8022400:	687b      	ldr	r3, [r7, #4]
 8022402:	689a      	ldr	r2, [r3, #8]
 8022404:	687b      	ldr	r3, [r7, #4]
 8022406:	691b      	ldr	r3, [r3, #16]
 8022408:	431a      	orrs	r2, r3
 802240a:	687b      	ldr	r3, [r7, #4]
 802240c:	695b      	ldr	r3, [r3, #20]
 802240e:	431a      	orrs	r2, r3
 8022410:	687b      	ldr	r3, [r7, #4]
 8022412:	69db      	ldr	r3, [r3, #28]
 8022414:	4313      	orrs	r3, r2
 8022416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8022418:	687b      	ldr	r3, [r7, #4]
 802241a:	681b      	ldr	r3, [r3, #0]
 802241c:	68db      	ldr	r3, [r3, #12]
 802241e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8022422:	f023 030c 	bic.w	r3, r3, #12
 8022426:	687a      	ldr	r2, [r7, #4]
 8022428:	6812      	ldr	r2, [r2, #0]
 802242a:	68f9      	ldr	r1, [r7, #12]
 802242c:	430b      	orrs	r3, r1
 802242e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8022430:	687b      	ldr	r3, [r7, #4]
 8022432:	681b      	ldr	r3, [r3, #0]
 8022434:	695b      	ldr	r3, [r3, #20]
 8022436:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 802243a:	687b      	ldr	r3, [r7, #4]
 802243c:	699a      	ldr	r2, [r3, #24]
 802243e:	687b      	ldr	r3, [r7, #4]
 8022440:	681b      	ldr	r3, [r3, #0]
 8022442:	430a      	orrs	r2, r1
 8022444:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8022446:	687b      	ldr	r3, [r7, #4]
 8022448:	69db      	ldr	r3, [r3, #28]
 802244a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802244e:	f040 818b 	bne.w	8022768 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8022452:	687b      	ldr	r3, [r7, #4]
 8022454:	681b      	ldr	r3, [r3, #0]
 8022456:	4ac1      	ldr	r2, [pc, #772]	; (802275c <UART_SetConfig+0x37c>)
 8022458:	4293      	cmp	r3, r2
 802245a:	d005      	beq.n	8022468 <UART_SetConfig+0x88>
 802245c:	687b      	ldr	r3, [r7, #4]
 802245e:	681b      	ldr	r3, [r3, #0]
 8022460:	4abf      	ldr	r2, [pc, #764]	; (8022760 <UART_SetConfig+0x380>)
 8022462:	4293      	cmp	r3, r2
 8022464:	f040 80bd 	bne.w	80225e2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8022468:	f7ff f9f4 	bl	8021854 <HAL_RCC_GetPCLK2Freq>
 802246c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 802246e:	68bb      	ldr	r3, [r7, #8]
 8022470:	461d      	mov	r5, r3
 8022472:	f04f 0600 	mov.w	r6, #0
 8022476:	46a8      	mov	r8, r5
 8022478:	46b1      	mov	r9, r6
 802247a:	eb18 0308 	adds.w	r3, r8, r8
 802247e:	eb49 0409 	adc.w	r4, r9, r9
 8022482:	4698      	mov	r8, r3
 8022484:	46a1      	mov	r9, r4
 8022486:	eb18 0805 	adds.w	r8, r8, r5
 802248a:	eb49 0906 	adc.w	r9, r9, r6
 802248e:	f04f 0100 	mov.w	r1, #0
 8022492:	f04f 0200 	mov.w	r2, #0
 8022496:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 802249a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 802249e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80224a2:	4688      	mov	r8, r1
 80224a4:	4691      	mov	r9, r2
 80224a6:	eb18 0005 	adds.w	r0, r8, r5
 80224aa:	eb49 0106 	adc.w	r1, r9, r6
 80224ae:	687b      	ldr	r3, [r7, #4]
 80224b0:	685b      	ldr	r3, [r3, #4]
 80224b2:	461d      	mov	r5, r3
 80224b4:	f04f 0600 	mov.w	r6, #0
 80224b8:	196b      	adds	r3, r5, r5
 80224ba:	eb46 0406 	adc.w	r4, r6, r6
 80224be:	461a      	mov	r2, r3
 80224c0:	4623      	mov	r3, r4
 80224c2:	f7fe f825 	bl	8020510 <__aeabi_uldivmod>
 80224c6:	4603      	mov	r3, r0
 80224c8:	460c      	mov	r4, r1
 80224ca:	461a      	mov	r2, r3
 80224cc:	4ba5      	ldr	r3, [pc, #660]	; (8022764 <UART_SetConfig+0x384>)
 80224ce:	fba3 2302 	umull	r2, r3, r3, r2
 80224d2:	095b      	lsrs	r3, r3, #5
 80224d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80224d8:	68bb      	ldr	r3, [r7, #8]
 80224da:	461d      	mov	r5, r3
 80224dc:	f04f 0600 	mov.w	r6, #0
 80224e0:	46a9      	mov	r9, r5
 80224e2:	46b2      	mov	sl, r6
 80224e4:	eb19 0309 	adds.w	r3, r9, r9
 80224e8:	eb4a 040a 	adc.w	r4, sl, sl
 80224ec:	4699      	mov	r9, r3
 80224ee:	46a2      	mov	sl, r4
 80224f0:	eb19 0905 	adds.w	r9, r9, r5
 80224f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80224f8:	f04f 0100 	mov.w	r1, #0
 80224fc:	f04f 0200 	mov.w	r2, #0
 8022500:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8022504:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8022508:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802250c:	4689      	mov	r9, r1
 802250e:	4692      	mov	sl, r2
 8022510:	eb19 0005 	adds.w	r0, r9, r5
 8022514:	eb4a 0106 	adc.w	r1, sl, r6
 8022518:	687b      	ldr	r3, [r7, #4]
 802251a:	685b      	ldr	r3, [r3, #4]
 802251c:	461d      	mov	r5, r3
 802251e:	f04f 0600 	mov.w	r6, #0
 8022522:	196b      	adds	r3, r5, r5
 8022524:	eb46 0406 	adc.w	r4, r6, r6
 8022528:	461a      	mov	r2, r3
 802252a:	4623      	mov	r3, r4
 802252c:	f7fd fff0 	bl	8020510 <__aeabi_uldivmod>
 8022530:	4603      	mov	r3, r0
 8022532:	460c      	mov	r4, r1
 8022534:	461a      	mov	r2, r3
 8022536:	4b8b      	ldr	r3, [pc, #556]	; (8022764 <UART_SetConfig+0x384>)
 8022538:	fba3 1302 	umull	r1, r3, r3, r2
 802253c:	095b      	lsrs	r3, r3, #5
 802253e:	2164      	movs	r1, #100	; 0x64
 8022540:	fb01 f303 	mul.w	r3, r1, r3
 8022544:	1ad3      	subs	r3, r2, r3
 8022546:	00db      	lsls	r3, r3, #3
 8022548:	3332      	adds	r3, #50	; 0x32
 802254a:	4a86      	ldr	r2, [pc, #536]	; (8022764 <UART_SetConfig+0x384>)
 802254c:	fba2 2303 	umull	r2, r3, r2, r3
 8022550:	095b      	lsrs	r3, r3, #5
 8022552:	005b      	lsls	r3, r3, #1
 8022554:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8022558:	4498      	add	r8, r3
 802255a:	68bb      	ldr	r3, [r7, #8]
 802255c:	461d      	mov	r5, r3
 802255e:	f04f 0600 	mov.w	r6, #0
 8022562:	46a9      	mov	r9, r5
 8022564:	46b2      	mov	sl, r6
 8022566:	eb19 0309 	adds.w	r3, r9, r9
 802256a:	eb4a 040a 	adc.w	r4, sl, sl
 802256e:	4699      	mov	r9, r3
 8022570:	46a2      	mov	sl, r4
 8022572:	eb19 0905 	adds.w	r9, r9, r5
 8022576:	eb4a 0a06 	adc.w	sl, sl, r6
 802257a:	f04f 0100 	mov.w	r1, #0
 802257e:	f04f 0200 	mov.w	r2, #0
 8022582:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8022586:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 802258a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802258e:	4689      	mov	r9, r1
 8022590:	4692      	mov	sl, r2
 8022592:	eb19 0005 	adds.w	r0, r9, r5
 8022596:	eb4a 0106 	adc.w	r1, sl, r6
 802259a:	687b      	ldr	r3, [r7, #4]
 802259c:	685b      	ldr	r3, [r3, #4]
 802259e:	461d      	mov	r5, r3
 80225a0:	f04f 0600 	mov.w	r6, #0
 80225a4:	196b      	adds	r3, r5, r5
 80225a6:	eb46 0406 	adc.w	r4, r6, r6
 80225aa:	461a      	mov	r2, r3
 80225ac:	4623      	mov	r3, r4
 80225ae:	f7fd ffaf 	bl	8020510 <__aeabi_uldivmod>
 80225b2:	4603      	mov	r3, r0
 80225b4:	460c      	mov	r4, r1
 80225b6:	461a      	mov	r2, r3
 80225b8:	4b6a      	ldr	r3, [pc, #424]	; (8022764 <UART_SetConfig+0x384>)
 80225ba:	fba3 1302 	umull	r1, r3, r3, r2
 80225be:	095b      	lsrs	r3, r3, #5
 80225c0:	2164      	movs	r1, #100	; 0x64
 80225c2:	fb01 f303 	mul.w	r3, r1, r3
 80225c6:	1ad3      	subs	r3, r2, r3
 80225c8:	00db      	lsls	r3, r3, #3
 80225ca:	3332      	adds	r3, #50	; 0x32
 80225cc:	4a65      	ldr	r2, [pc, #404]	; (8022764 <UART_SetConfig+0x384>)
 80225ce:	fba2 2303 	umull	r2, r3, r2, r3
 80225d2:	095b      	lsrs	r3, r3, #5
 80225d4:	f003 0207 	and.w	r2, r3, #7
 80225d8:	687b      	ldr	r3, [r7, #4]
 80225da:	681b      	ldr	r3, [r3, #0]
 80225dc:	4442      	add	r2, r8
 80225de:	609a      	str	r2, [r3, #8]
 80225e0:	e26f      	b.n	8022ac2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80225e2:	f7ff f923 	bl	802182c <HAL_RCC_GetPCLK1Freq>
 80225e6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80225e8:	68bb      	ldr	r3, [r7, #8]
 80225ea:	461d      	mov	r5, r3
 80225ec:	f04f 0600 	mov.w	r6, #0
 80225f0:	46a8      	mov	r8, r5
 80225f2:	46b1      	mov	r9, r6
 80225f4:	eb18 0308 	adds.w	r3, r8, r8
 80225f8:	eb49 0409 	adc.w	r4, r9, r9
 80225fc:	4698      	mov	r8, r3
 80225fe:	46a1      	mov	r9, r4
 8022600:	eb18 0805 	adds.w	r8, r8, r5
 8022604:	eb49 0906 	adc.w	r9, r9, r6
 8022608:	f04f 0100 	mov.w	r1, #0
 802260c:	f04f 0200 	mov.w	r2, #0
 8022610:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8022614:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8022618:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 802261c:	4688      	mov	r8, r1
 802261e:	4691      	mov	r9, r2
 8022620:	eb18 0005 	adds.w	r0, r8, r5
 8022624:	eb49 0106 	adc.w	r1, r9, r6
 8022628:	687b      	ldr	r3, [r7, #4]
 802262a:	685b      	ldr	r3, [r3, #4]
 802262c:	461d      	mov	r5, r3
 802262e:	f04f 0600 	mov.w	r6, #0
 8022632:	196b      	adds	r3, r5, r5
 8022634:	eb46 0406 	adc.w	r4, r6, r6
 8022638:	461a      	mov	r2, r3
 802263a:	4623      	mov	r3, r4
 802263c:	f7fd ff68 	bl	8020510 <__aeabi_uldivmod>
 8022640:	4603      	mov	r3, r0
 8022642:	460c      	mov	r4, r1
 8022644:	461a      	mov	r2, r3
 8022646:	4b47      	ldr	r3, [pc, #284]	; (8022764 <UART_SetConfig+0x384>)
 8022648:	fba3 2302 	umull	r2, r3, r3, r2
 802264c:	095b      	lsrs	r3, r3, #5
 802264e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8022652:	68bb      	ldr	r3, [r7, #8]
 8022654:	461d      	mov	r5, r3
 8022656:	f04f 0600 	mov.w	r6, #0
 802265a:	46a9      	mov	r9, r5
 802265c:	46b2      	mov	sl, r6
 802265e:	eb19 0309 	adds.w	r3, r9, r9
 8022662:	eb4a 040a 	adc.w	r4, sl, sl
 8022666:	4699      	mov	r9, r3
 8022668:	46a2      	mov	sl, r4
 802266a:	eb19 0905 	adds.w	r9, r9, r5
 802266e:	eb4a 0a06 	adc.w	sl, sl, r6
 8022672:	f04f 0100 	mov.w	r1, #0
 8022676:	f04f 0200 	mov.w	r2, #0
 802267a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802267e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8022682:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8022686:	4689      	mov	r9, r1
 8022688:	4692      	mov	sl, r2
 802268a:	eb19 0005 	adds.w	r0, r9, r5
 802268e:	eb4a 0106 	adc.w	r1, sl, r6
 8022692:	687b      	ldr	r3, [r7, #4]
 8022694:	685b      	ldr	r3, [r3, #4]
 8022696:	461d      	mov	r5, r3
 8022698:	f04f 0600 	mov.w	r6, #0
 802269c:	196b      	adds	r3, r5, r5
 802269e:	eb46 0406 	adc.w	r4, r6, r6
 80226a2:	461a      	mov	r2, r3
 80226a4:	4623      	mov	r3, r4
 80226a6:	f7fd ff33 	bl	8020510 <__aeabi_uldivmod>
 80226aa:	4603      	mov	r3, r0
 80226ac:	460c      	mov	r4, r1
 80226ae:	461a      	mov	r2, r3
 80226b0:	4b2c      	ldr	r3, [pc, #176]	; (8022764 <UART_SetConfig+0x384>)
 80226b2:	fba3 1302 	umull	r1, r3, r3, r2
 80226b6:	095b      	lsrs	r3, r3, #5
 80226b8:	2164      	movs	r1, #100	; 0x64
 80226ba:	fb01 f303 	mul.w	r3, r1, r3
 80226be:	1ad3      	subs	r3, r2, r3
 80226c0:	00db      	lsls	r3, r3, #3
 80226c2:	3332      	adds	r3, #50	; 0x32
 80226c4:	4a27      	ldr	r2, [pc, #156]	; (8022764 <UART_SetConfig+0x384>)
 80226c6:	fba2 2303 	umull	r2, r3, r2, r3
 80226ca:	095b      	lsrs	r3, r3, #5
 80226cc:	005b      	lsls	r3, r3, #1
 80226ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80226d2:	4498      	add	r8, r3
 80226d4:	68bb      	ldr	r3, [r7, #8]
 80226d6:	461d      	mov	r5, r3
 80226d8:	f04f 0600 	mov.w	r6, #0
 80226dc:	46a9      	mov	r9, r5
 80226de:	46b2      	mov	sl, r6
 80226e0:	eb19 0309 	adds.w	r3, r9, r9
 80226e4:	eb4a 040a 	adc.w	r4, sl, sl
 80226e8:	4699      	mov	r9, r3
 80226ea:	46a2      	mov	sl, r4
 80226ec:	eb19 0905 	adds.w	r9, r9, r5
 80226f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80226f4:	f04f 0100 	mov.w	r1, #0
 80226f8:	f04f 0200 	mov.w	r2, #0
 80226fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8022700:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8022704:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8022708:	4689      	mov	r9, r1
 802270a:	4692      	mov	sl, r2
 802270c:	eb19 0005 	adds.w	r0, r9, r5
 8022710:	eb4a 0106 	adc.w	r1, sl, r6
 8022714:	687b      	ldr	r3, [r7, #4]
 8022716:	685b      	ldr	r3, [r3, #4]
 8022718:	461d      	mov	r5, r3
 802271a:	f04f 0600 	mov.w	r6, #0
 802271e:	196b      	adds	r3, r5, r5
 8022720:	eb46 0406 	adc.w	r4, r6, r6
 8022724:	461a      	mov	r2, r3
 8022726:	4623      	mov	r3, r4
 8022728:	f7fd fef2 	bl	8020510 <__aeabi_uldivmod>
 802272c:	4603      	mov	r3, r0
 802272e:	460c      	mov	r4, r1
 8022730:	461a      	mov	r2, r3
 8022732:	4b0c      	ldr	r3, [pc, #48]	; (8022764 <UART_SetConfig+0x384>)
 8022734:	fba3 1302 	umull	r1, r3, r3, r2
 8022738:	095b      	lsrs	r3, r3, #5
 802273a:	2164      	movs	r1, #100	; 0x64
 802273c:	fb01 f303 	mul.w	r3, r1, r3
 8022740:	1ad3      	subs	r3, r2, r3
 8022742:	00db      	lsls	r3, r3, #3
 8022744:	3332      	adds	r3, #50	; 0x32
 8022746:	4a07      	ldr	r2, [pc, #28]	; (8022764 <UART_SetConfig+0x384>)
 8022748:	fba2 2303 	umull	r2, r3, r2, r3
 802274c:	095b      	lsrs	r3, r3, #5
 802274e:	f003 0207 	and.w	r2, r3, #7
 8022752:	687b      	ldr	r3, [r7, #4]
 8022754:	681b      	ldr	r3, [r3, #0]
 8022756:	4442      	add	r2, r8
 8022758:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 802275a:	e1b2      	b.n	8022ac2 <UART_SetConfig+0x6e2>
 802275c:	40011000 	.word	0x40011000
 8022760:	40011400 	.word	0x40011400
 8022764:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8022768:	687b      	ldr	r3, [r7, #4]
 802276a:	681b      	ldr	r3, [r3, #0]
 802276c:	4ad7      	ldr	r2, [pc, #860]	; (8022acc <UART_SetConfig+0x6ec>)
 802276e:	4293      	cmp	r3, r2
 8022770:	d005      	beq.n	802277e <UART_SetConfig+0x39e>
 8022772:	687b      	ldr	r3, [r7, #4]
 8022774:	681b      	ldr	r3, [r3, #0]
 8022776:	4ad6      	ldr	r2, [pc, #856]	; (8022ad0 <UART_SetConfig+0x6f0>)
 8022778:	4293      	cmp	r3, r2
 802277a:	f040 80d1 	bne.w	8022920 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 802277e:	f7ff f869 	bl	8021854 <HAL_RCC_GetPCLK2Freq>
 8022782:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8022784:	68bb      	ldr	r3, [r7, #8]
 8022786:	469a      	mov	sl, r3
 8022788:	f04f 0b00 	mov.w	fp, #0
 802278c:	46d0      	mov	r8, sl
 802278e:	46d9      	mov	r9, fp
 8022790:	eb18 0308 	adds.w	r3, r8, r8
 8022794:	eb49 0409 	adc.w	r4, r9, r9
 8022798:	4698      	mov	r8, r3
 802279a:	46a1      	mov	r9, r4
 802279c:	eb18 080a 	adds.w	r8, r8, sl
 80227a0:	eb49 090b 	adc.w	r9, r9, fp
 80227a4:	f04f 0100 	mov.w	r1, #0
 80227a8:	f04f 0200 	mov.w	r2, #0
 80227ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80227b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80227b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80227b8:	4688      	mov	r8, r1
 80227ba:	4691      	mov	r9, r2
 80227bc:	eb1a 0508 	adds.w	r5, sl, r8
 80227c0:	eb4b 0609 	adc.w	r6, fp, r9
 80227c4:	687b      	ldr	r3, [r7, #4]
 80227c6:	685b      	ldr	r3, [r3, #4]
 80227c8:	4619      	mov	r1, r3
 80227ca:	f04f 0200 	mov.w	r2, #0
 80227ce:	f04f 0300 	mov.w	r3, #0
 80227d2:	f04f 0400 	mov.w	r4, #0
 80227d6:	0094      	lsls	r4, r2, #2
 80227d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80227dc:	008b      	lsls	r3, r1, #2
 80227de:	461a      	mov	r2, r3
 80227e0:	4623      	mov	r3, r4
 80227e2:	4628      	mov	r0, r5
 80227e4:	4631      	mov	r1, r6
 80227e6:	f7fd fe93 	bl	8020510 <__aeabi_uldivmod>
 80227ea:	4603      	mov	r3, r0
 80227ec:	460c      	mov	r4, r1
 80227ee:	461a      	mov	r2, r3
 80227f0:	4bb8      	ldr	r3, [pc, #736]	; (8022ad4 <UART_SetConfig+0x6f4>)
 80227f2:	fba3 2302 	umull	r2, r3, r3, r2
 80227f6:	095b      	lsrs	r3, r3, #5
 80227f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80227fc:	68bb      	ldr	r3, [r7, #8]
 80227fe:	469b      	mov	fp, r3
 8022800:	f04f 0c00 	mov.w	ip, #0
 8022804:	46d9      	mov	r9, fp
 8022806:	46e2      	mov	sl, ip
 8022808:	eb19 0309 	adds.w	r3, r9, r9
 802280c:	eb4a 040a 	adc.w	r4, sl, sl
 8022810:	4699      	mov	r9, r3
 8022812:	46a2      	mov	sl, r4
 8022814:	eb19 090b 	adds.w	r9, r9, fp
 8022818:	eb4a 0a0c 	adc.w	sl, sl, ip
 802281c:	f04f 0100 	mov.w	r1, #0
 8022820:	f04f 0200 	mov.w	r2, #0
 8022824:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8022828:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 802282c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8022830:	4689      	mov	r9, r1
 8022832:	4692      	mov	sl, r2
 8022834:	eb1b 0509 	adds.w	r5, fp, r9
 8022838:	eb4c 060a 	adc.w	r6, ip, sl
 802283c:	687b      	ldr	r3, [r7, #4]
 802283e:	685b      	ldr	r3, [r3, #4]
 8022840:	4619      	mov	r1, r3
 8022842:	f04f 0200 	mov.w	r2, #0
 8022846:	f04f 0300 	mov.w	r3, #0
 802284a:	f04f 0400 	mov.w	r4, #0
 802284e:	0094      	lsls	r4, r2, #2
 8022850:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8022854:	008b      	lsls	r3, r1, #2
 8022856:	461a      	mov	r2, r3
 8022858:	4623      	mov	r3, r4
 802285a:	4628      	mov	r0, r5
 802285c:	4631      	mov	r1, r6
 802285e:	f7fd fe57 	bl	8020510 <__aeabi_uldivmod>
 8022862:	4603      	mov	r3, r0
 8022864:	460c      	mov	r4, r1
 8022866:	461a      	mov	r2, r3
 8022868:	4b9a      	ldr	r3, [pc, #616]	; (8022ad4 <UART_SetConfig+0x6f4>)
 802286a:	fba3 1302 	umull	r1, r3, r3, r2
 802286e:	095b      	lsrs	r3, r3, #5
 8022870:	2164      	movs	r1, #100	; 0x64
 8022872:	fb01 f303 	mul.w	r3, r1, r3
 8022876:	1ad3      	subs	r3, r2, r3
 8022878:	011b      	lsls	r3, r3, #4
 802287a:	3332      	adds	r3, #50	; 0x32
 802287c:	4a95      	ldr	r2, [pc, #596]	; (8022ad4 <UART_SetConfig+0x6f4>)
 802287e:	fba2 2303 	umull	r2, r3, r2, r3
 8022882:	095b      	lsrs	r3, r3, #5
 8022884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8022888:	4498      	add	r8, r3
 802288a:	68bb      	ldr	r3, [r7, #8]
 802288c:	469b      	mov	fp, r3
 802288e:	f04f 0c00 	mov.w	ip, #0
 8022892:	46d9      	mov	r9, fp
 8022894:	46e2      	mov	sl, ip
 8022896:	eb19 0309 	adds.w	r3, r9, r9
 802289a:	eb4a 040a 	adc.w	r4, sl, sl
 802289e:	4699      	mov	r9, r3
 80228a0:	46a2      	mov	sl, r4
 80228a2:	eb19 090b 	adds.w	r9, r9, fp
 80228a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80228aa:	f04f 0100 	mov.w	r1, #0
 80228ae:	f04f 0200 	mov.w	r2, #0
 80228b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80228b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80228ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80228be:	4689      	mov	r9, r1
 80228c0:	4692      	mov	sl, r2
 80228c2:	eb1b 0509 	adds.w	r5, fp, r9
 80228c6:	eb4c 060a 	adc.w	r6, ip, sl
 80228ca:	687b      	ldr	r3, [r7, #4]
 80228cc:	685b      	ldr	r3, [r3, #4]
 80228ce:	4619      	mov	r1, r3
 80228d0:	f04f 0200 	mov.w	r2, #0
 80228d4:	f04f 0300 	mov.w	r3, #0
 80228d8:	f04f 0400 	mov.w	r4, #0
 80228dc:	0094      	lsls	r4, r2, #2
 80228de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80228e2:	008b      	lsls	r3, r1, #2
 80228e4:	461a      	mov	r2, r3
 80228e6:	4623      	mov	r3, r4
 80228e8:	4628      	mov	r0, r5
 80228ea:	4631      	mov	r1, r6
 80228ec:	f7fd fe10 	bl	8020510 <__aeabi_uldivmod>
 80228f0:	4603      	mov	r3, r0
 80228f2:	460c      	mov	r4, r1
 80228f4:	461a      	mov	r2, r3
 80228f6:	4b77      	ldr	r3, [pc, #476]	; (8022ad4 <UART_SetConfig+0x6f4>)
 80228f8:	fba3 1302 	umull	r1, r3, r3, r2
 80228fc:	095b      	lsrs	r3, r3, #5
 80228fe:	2164      	movs	r1, #100	; 0x64
 8022900:	fb01 f303 	mul.w	r3, r1, r3
 8022904:	1ad3      	subs	r3, r2, r3
 8022906:	011b      	lsls	r3, r3, #4
 8022908:	3332      	adds	r3, #50	; 0x32
 802290a:	4a72      	ldr	r2, [pc, #456]	; (8022ad4 <UART_SetConfig+0x6f4>)
 802290c:	fba2 2303 	umull	r2, r3, r2, r3
 8022910:	095b      	lsrs	r3, r3, #5
 8022912:	f003 020f 	and.w	r2, r3, #15
 8022916:	687b      	ldr	r3, [r7, #4]
 8022918:	681b      	ldr	r3, [r3, #0]
 802291a:	4442      	add	r2, r8
 802291c:	609a      	str	r2, [r3, #8]
 802291e:	e0d0      	b.n	8022ac2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8022920:	f7fe ff84 	bl	802182c <HAL_RCC_GetPCLK1Freq>
 8022924:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8022926:	68bb      	ldr	r3, [r7, #8]
 8022928:	469a      	mov	sl, r3
 802292a:	f04f 0b00 	mov.w	fp, #0
 802292e:	46d0      	mov	r8, sl
 8022930:	46d9      	mov	r9, fp
 8022932:	eb18 0308 	adds.w	r3, r8, r8
 8022936:	eb49 0409 	adc.w	r4, r9, r9
 802293a:	4698      	mov	r8, r3
 802293c:	46a1      	mov	r9, r4
 802293e:	eb18 080a 	adds.w	r8, r8, sl
 8022942:	eb49 090b 	adc.w	r9, r9, fp
 8022946:	f04f 0100 	mov.w	r1, #0
 802294a:	f04f 0200 	mov.w	r2, #0
 802294e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8022952:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8022956:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 802295a:	4688      	mov	r8, r1
 802295c:	4691      	mov	r9, r2
 802295e:	eb1a 0508 	adds.w	r5, sl, r8
 8022962:	eb4b 0609 	adc.w	r6, fp, r9
 8022966:	687b      	ldr	r3, [r7, #4]
 8022968:	685b      	ldr	r3, [r3, #4]
 802296a:	4619      	mov	r1, r3
 802296c:	f04f 0200 	mov.w	r2, #0
 8022970:	f04f 0300 	mov.w	r3, #0
 8022974:	f04f 0400 	mov.w	r4, #0
 8022978:	0094      	lsls	r4, r2, #2
 802297a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 802297e:	008b      	lsls	r3, r1, #2
 8022980:	461a      	mov	r2, r3
 8022982:	4623      	mov	r3, r4
 8022984:	4628      	mov	r0, r5
 8022986:	4631      	mov	r1, r6
 8022988:	f7fd fdc2 	bl	8020510 <__aeabi_uldivmod>
 802298c:	4603      	mov	r3, r0
 802298e:	460c      	mov	r4, r1
 8022990:	461a      	mov	r2, r3
 8022992:	4b50      	ldr	r3, [pc, #320]	; (8022ad4 <UART_SetConfig+0x6f4>)
 8022994:	fba3 2302 	umull	r2, r3, r3, r2
 8022998:	095b      	lsrs	r3, r3, #5
 802299a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 802299e:	68bb      	ldr	r3, [r7, #8]
 80229a0:	469b      	mov	fp, r3
 80229a2:	f04f 0c00 	mov.w	ip, #0
 80229a6:	46d9      	mov	r9, fp
 80229a8:	46e2      	mov	sl, ip
 80229aa:	eb19 0309 	adds.w	r3, r9, r9
 80229ae:	eb4a 040a 	adc.w	r4, sl, sl
 80229b2:	4699      	mov	r9, r3
 80229b4:	46a2      	mov	sl, r4
 80229b6:	eb19 090b 	adds.w	r9, r9, fp
 80229ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80229be:	f04f 0100 	mov.w	r1, #0
 80229c2:	f04f 0200 	mov.w	r2, #0
 80229c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80229ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80229ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80229d2:	4689      	mov	r9, r1
 80229d4:	4692      	mov	sl, r2
 80229d6:	eb1b 0509 	adds.w	r5, fp, r9
 80229da:	eb4c 060a 	adc.w	r6, ip, sl
 80229de:	687b      	ldr	r3, [r7, #4]
 80229e0:	685b      	ldr	r3, [r3, #4]
 80229e2:	4619      	mov	r1, r3
 80229e4:	f04f 0200 	mov.w	r2, #0
 80229e8:	f04f 0300 	mov.w	r3, #0
 80229ec:	f04f 0400 	mov.w	r4, #0
 80229f0:	0094      	lsls	r4, r2, #2
 80229f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80229f6:	008b      	lsls	r3, r1, #2
 80229f8:	461a      	mov	r2, r3
 80229fa:	4623      	mov	r3, r4
 80229fc:	4628      	mov	r0, r5
 80229fe:	4631      	mov	r1, r6
 8022a00:	f7fd fd86 	bl	8020510 <__aeabi_uldivmod>
 8022a04:	4603      	mov	r3, r0
 8022a06:	460c      	mov	r4, r1
 8022a08:	461a      	mov	r2, r3
 8022a0a:	4b32      	ldr	r3, [pc, #200]	; (8022ad4 <UART_SetConfig+0x6f4>)
 8022a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8022a10:	095b      	lsrs	r3, r3, #5
 8022a12:	2164      	movs	r1, #100	; 0x64
 8022a14:	fb01 f303 	mul.w	r3, r1, r3
 8022a18:	1ad3      	subs	r3, r2, r3
 8022a1a:	011b      	lsls	r3, r3, #4
 8022a1c:	3332      	adds	r3, #50	; 0x32
 8022a1e:	4a2d      	ldr	r2, [pc, #180]	; (8022ad4 <UART_SetConfig+0x6f4>)
 8022a20:	fba2 2303 	umull	r2, r3, r2, r3
 8022a24:	095b      	lsrs	r3, r3, #5
 8022a26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8022a2a:	4498      	add	r8, r3
 8022a2c:	68bb      	ldr	r3, [r7, #8]
 8022a2e:	469b      	mov	fp, r3
 8022a30:	f04f 0c00 	mov.w	ip, #0
 8022a34:	46d9      	mov	r9, fp
 8022a36:	46e2      	mov	sl, ip
 8022a38:	eb19 0309 	adds.w	r3, r9, r9
 8022a3c:	eb4a 040a 	adc.w	r4, sl, sl
 8022a40:	4699      	mov	r9, r3
 8022a42:	46a2      	mov	sl, r4
 8022a44:	eb19 090b 	adds.w	r9, r9, fp
 8022a48:	eb4a 0a0c 	adc.w	sl, sl, ip
 8022a4c:	f04f 0100 	mov.w	r1, #0
 8022a50:	f04f 0200 	mov.w	r2, #0
 8022a54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8022a58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8022a5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8022a60:	4689      	mov	r9, r1
 8022a62:	4692      	mov	sl, r2
 8022a64:	eb1b 0509 	adds.w	r5, fp, r9
 8022a68:	eb4c 060a 	adc.w	r6, ip, sl
 8022a6c:	687b      	ldr	r3, [r7, #4]
 8022a6e:	685b      	ldr	r3, [r3, #4]
 8022a70:	4619      	mov	r1, r3
 8022a72:	f04f 0200 	mov.w	r2, #0
 8022a76:	f04f 0300 	mov.w	r3, #0
 8022a7a:	f04f 0400 	mov.w	r4, #0
 8022a7e:	0094      	lsls	r4, r2, #2
 8022a80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8022a84:	008b      	lsls	r3, r1, #2
 8022a86:	461a      	mov	r2, r3
 8022a88:	4623      	mov	r3, r4
 8022a8a:	4628      	mov	r0, r5
 8022a8c:	4631      	mov	r1, r6
 8022a8e:	f7fd fd3f 	bl	8020510 <__aeabi_uldivmod>
 8022a92:	4603      	mov	r3, r0
 8022a94:	460c      	mov	r4, r1
 8022a96:	461a      	mov	r2, r3
 8022a98:	4b0e      	ldr	r3, [pc, #56]	; (8022ad4 <UART_SetConfig+0x6f4>)
 8022a9a:	fba3 1302 	umull	r1, r3, r3, r2
 8022a9e:	095b      	lsrs	r3, r3, #5
 8022aa0:	2164      	movs	r1, #100	; 0x64
 8022aa2:	fb01 f303 	mul.w	r3, r1, r3
 8022aa6:	1ad3      	subs	r3, r2, r3
 8022aa8:	011b      	lsls	r3, r3, #4
 8022aaa:	3332      	adds	r3, #50	; 0x32
 8022aac:	4a09      	ldr	r2, [pc, #36]	; (8022ad4 <UART_SetConfig+0x6f4>)
 8022aae:	fba2 2303 	umull	r2, r3, r2, r3
 8022ab2:	095b      	lsrs	r3, r3, #5
 8022ab4:	f003 020f 	and.w	r2, r3, #15
 8022ab8:	687b      	ldr	r3, [r7, #4]
 8022aba:	681b      	ldr	r3, [r3, #0]
 8022abc:	4442      	add	r2, r8
 8022abe:	609a      	str	r2, [r3, #8]
}
 8022ac0:	e7ff      	b.n	8022ac2 <UART_SetConfig+0x6e2>
 8022ac2:	bf00      	nop
 8022ac4:	3714      	adds	r7, #20
 8022ac6:	46bd      	mov	sp, r7
 8022ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022acc:	40011000 	.word	0x40011000
 8022ad0:	40011400 	.word	0x40011400
 8022ad4:	51eb851f 	.word	0x51eb851f

08022ad8 <__errno>:
 8022ad8:	4b01      	ldr	r3, [pc, #4]	; (8022ae0 <__errno+0x8>)
 8022ada:	6818      	ldr	r0, [r3, #0]
 8022adc:	4770      	bx	lr
 8022ade:	bf00      	nop
 8022ae0:	2000000c 	.word	0x2000000c

08022ae4 <__libc_init_array>:
 8022ae4:	b570      	push	{r4, r5, r6, lr}
 8022ae6:	4e0d      	ldr	r6, [pc, #52]	; (8022b1c <__libc_init_array+0x38>)
 8022ae8:	4c0d      	ldr	r4, [pc, #52]	; (8022b20 <__libc_init_array+0x3c>)
 8022aea:	1ba4      	subs	r4, r4, r6
 8022aec:	10a4      	asrs	r4, r4, #2
 8022aee:	2500      	movs	r5, #0
 8022af0:	42a5      	cmp	r5, r4
 8022af2:	d109      	bne.n	8022b08 <__libc_init_array+0x24>
 8022af4:	4e0b      	ldr	r6, [pc, #44]	; (8022b24 <__libc_init_array+0x40>)
 8022af6:	4c0c      	ldr	r4, [pc, #48]	; (8022b28 <__libc_init_array+0x44>)
 8022af8:	f000 ff04 	bl	8023904 <_init>
 8022afc:	1ba4      	subs	r4, r4, r6
 8022afe:	10a4      	asrs	r4, r4, #2
 8022b00:	2500      	movs	r5, #0
 8022b02:	42a5      	cmp	r5, r4
 8022b04:	d105      	bne.n	8022b12 <__libc_init_array+0x2e>
 8022b06:	bd70      	pop	{r4, r5, r6, pc}
 8022b08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8022b0c:	4798      	blx	r3
 8022b0e:	3501      	adds	r5, #1
 8022b10:	e7ee      	b.n	8022af0 <__libc_init_array+0xc>
 8022b12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8022b16:	4798      	blx	r3
 8022b18:	3501      	adds	r5, #1
 8022b1a:	e7f2      	b.n	8022b02 <__libc_init_array+0x1e>
 8022b1c:	080239f8 	.word	0x080239f8
 8022b20:	080239f8 	.word	0x080239f8
 8022b24:	080239f8 	.word	0x080239f8
 8022b28:	080239fc 	.word	0x080239fc

08022b2c <memset>:
 8022b2c:	4402      	add	r2, r0
 8022b2e:	4603      	mov	r3, r0
 8022b30:	4293      	cmp	r3, r2
 8022b32:	d100      	bne.n	8022b36 <memset+0xa>
 8022b34:	4770      	bx	lr
 8022b36:	f803 1b01 	strb.w	r1, [r3], #1
 8022b3a:	e7f9      	b.n	8022b30 <memset+0x4>

08022b3c <iprintf>:
 8022b3c:	b40f      	push	{r0, r1, r2, r3}
 8022b3e:	4b0a      	ldr	r3, [pc, #40]	; (8022b68 <iprintf+0x2c>)
 8022b40:	b513      	push	{r0, r1, r4, lr}
 8022b42:	681c      	ldr	r4, [r3, #0]
 8022b44:	b124      	cbz	r4, 8022b50 <iprintf+0x14>
 8022b46:	69a3      	ldr	r3, [r4, #24]
 8022b48:	b913      	cbnz	r3, 8022b50 <iprintf+0x14>
 8022b4a:	4620      	mov	r0, r4
 8022b4c:	f000 f84e 	bl	8022bec <__sinit>
 8022b50:	ab05      	add	r3, sp, #20
 8022b52:	9a04      	ldr	r2, [sp, #16]
 8022b54:	68a1      	ldr	r1, [r4, #8]
 8022b56:	9301      	str	r3, [sp, #4]
 8022b58:	4620      	mov	r0, r4
 8022b5a:	f000 f955 	bl	8022e08 <_vfiprintf_r>
 8022b5e:	b002      	add	sp, #8
 8022b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022b64:	b004      	add	sp, #16
 8022b66:	4770      	bx	lr
 8022b68:	2000000c 	.word	0x2000000c

08022b6c <std>:
 8022b6c:	2300      	movs	r3, #0
 8022b6e:	b510      	push	{r4, lr}
 8022b70:	4604      	mov	r4, r0
 8022b72:	e9c0 3300 	strd	r3, r3, [r0]
 8022b76:	6083      	str	r3, [r0, #8]
 8022b78:	8181      	strh	r1, [r0, #12]
 8022b7a:	6643      	str	r3, [r0, #100]	; 0x64
 8022b7c:	81c2      	strh	r2, [r0, #14]
 8022b7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022b82:	6183      	str	r3, [r0, #24]
 8022b84:	4619      	mov	r1, r3
 8022b86:	2208      	movs	r2, #8
 8022b88:	305c      	adds	r0, #92	; 0x5c
 8022b8a:	f7ff ffcf 	bl	8022b2c <memset>
 8022b8e:	4b05      	ldr	r3, [pc, #20]	; (8022ba4 <std+0x38>)
 8022b90:	6263      	str	r3, [r4, #36]	; 0x24
 8022b92:	4b05      	ldr	r3, [pc, #20]	; (8022ba8 <std+0x3c>)
 8022b94:	62a3      	str	r3, [r4, #40]	; 0x28
 8022b96:	4b05      	ldr	r3, [pc, #20]	; (8022bac <std+0x40>)
 8022b98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022b9a:	4b05      	ldr	r3, [pc, #20]	; (8022bb0 <std+0x44>)
 8022b9c:	6224      	str	r4, [r4, #32]
 8022b9e:	6323      	str	r3, [r4, #48]	; 0x30
 8022ba0:	bd10      	pop	{r4, pc}
 8022ba2:	bf00      	nop
 8022ba4:	08023365 	.word	0x08023365
 8022ba8:	08023387 	.word	0x08023387
 8022bac:	080233bf 	.word	0x080233bf
 8022bb0:	080233e3 	.word	0x080233e3

08022bb4 <_cleanup_r>:
 8022bb4:	4901      	ldr	r1, [pc, #4]	; (8022bbc <_cleanup_r+0x8>)
 8022bb6:	f000 b885 	b.w	8022cc4 <_fwalk_reent>
 8022bba:	bf00      	nop
 8022bbc:	080236bd 	.word	0x080236bd

08022bc0 <__sfmoreglue>:
 8022bc0:	b570      	push	{r4, r5, r6, lr}
 8022bc2:	1e4a      	subs	r2, r1, #1
 8022bc4:	2568      	movs	r5, #104	; 0x68
 8022bc6:	4355      	muls	r5, r2
 8022bc8:	460e      	mov	r6, r1
 8022bca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8022bce:	f000 f897 	bl	8022d00 <_malloc_r>
 8022bd2:	4604      	mov	r4, r0
 8022bd4:	b140      	cbz	r0, 8022be8 <__sfmoreglue+0x28>
 8022bd6:	2100      	movs	r1, #0
 8022bd8:	e9c0 1600 	strd	r1, r6, [r0]
 8022bdc:	300c      	adds	r0, #12
 8022bde:	60a0      	str	r0, [r4, #8]
 8022be0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8022be4:	f7ff ffa2 	bl	8022b2c <memset>
 8022be8:	4620      	mov	r0, r4
 8022bea:	bd70      	pop	{r4, r5, r6, pc}

08022bec <__sinit>:
 8022bec:	6983      	ldr	r3, [r0, #24]
 8022bee:	b510      	push	{r4, lr}
 8022bf0:	4604      	mov	r4, r0
 8022bf2:	bb33      	cbnz	r3, 8022c42 <__sinit+0x56>
 8022bf4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8022bf8:	6503      	str	r3, [r0, #80]	; 0x50
 8022bfa:	4b12      	ldr	r3, [pc, #72]	; (8022c44 <__sinit+0x58>)
 8022bfc:	4a12      	ldr	r2, [pc, #72]	; (8022c48 <__sinit+0x5c>)
 8022bfe:	681b      	ldr	r3, [r3, #0]
 8022c00:	6282      	str	r2, [r0, #40]	; 0x28
 8022c02:	4298      	cmp	r0, r3
 8022c04:	bf04      	itt	eq
 8022c06:	2301      	moveq	r3, #1
 8022c08:	6183      	streq	r3, [r0, #24]
 8022c0a:	f000 f81f 	bl	8022c4c <__sfp>
 8022c0e:	6060      	str	r0, [r4, #4]
 8022c10:	4620      	mov	r0, r4
 8022c12:	f000 f81b 	bl	8022c4c <__sfp>
 8022c16:	60a0      	str	r0, [r4, #8]
 8022c18:	4620      	mov	r0, r4
 8022c1a:	f000 f817 	bl	8022c4c <__sfp>
 8022c1e:	2200      	movs	r2, #0
 8022c20:	60e0      	str	r0, [r4, #12]
 8022c22:	2104      	movs	r1, #4
 8022c24:	6860      	ldr	r0, [r4, #4]
 8022c26:	f7ff ffa1 	bl	8022b6c <std>
 8022c2a:	2201      	movs	r2, #1
 8022c2c:	2109      	movs	r1, #9
 8022c2e:	68a0      	ldr	r0, [r4, #8]
 8022c30:	f7ff ff9c 	bl	8022b6c <std>
 8022c34:	2202      	movs	r2, #2
 8022c36:	2112      	movs	r1, #18
 8022c38:	68e0      	ldr	r0, [r4, #12]
 8022c3a:	f7ff ff97 	bl	8022b6c <std>
 8022c3e:	2301      	movs	r3, #1
 8022c40:	61a3      	str	r3, [r4, #24]
 8022c42:	bd10      	pop	{r4, pc}
 8022c44:	08023958 	.word	0x08023958
 8022c48:	08022bb5 	.word	0x08022bb5

08022c4c <__sfp>:
 8022c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022c4e:	4b1b      	ldr	r3, [pc, #108]	; (8022cbc <__sfp+0x70>)
 8022c50:	681e      	ldr	r6, [r3, #0]
 8022c52:	69b3      	ldr	r3, [r6, #24]
 8022c54:	4607      	mov	r7, r0
 8022c56:	b913      	cbnz	r3, 8022c5e <__sfp+0x12>
 8022c58:	4630      	mov	r0, r6
 8022c5a:	f7ff ffc7 	bl	8022bec <__sinit>
 8022c5e:	3648      	adds	r6, #72	; 0x48
 8022c60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8022c64:	3b01      	subs	r3, #1
 8022c66:	d503      	bpl.n	8022c70 <__sfp+0x24>
 8022c68:	6833      	ldr	r3, [r6, #0]
 8022c6a:	b133      	cbz	r3, 8022c7a <__sfp+0x2e>
 8022c6c:	6836      	ldr	r6, [r6, #0]
 8022c6e:	e7f7      	b.n	8022c60 <__sfp+0x14>
 8022c70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8022c74:	b16d      	cbz	r5, 8022c92 <__sfp+0x46>
 8022c76:	3468      	adds	r4, #104	; 0x68
 8022c78:	e7f4      	b.n	8022c64 <__sfp+0x18>
 8022c7a:	2104      	movs	r1, #4
 8022c7c:	4638      	mov	r0, r7
 8022c7e:	f7ff ff9f 	bl	8022bc0 <__sfmoreglue>
 8022c82:	6030      	str	r0, [r6, #0]
 8022c84:	2800      	cmp	r0, #0
 8022c86:	d1f1      	bne.n	8022c6c <__sfp+0x20>
 8022c88:	230c      	movs	r3, #12
 8022c8a:	603b      	str	r3, [r7, #0]
 8022c8c:	4604      	mov	r4, r0
 8022c8e:	4620      	mov	r0, r4
 8022c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022c92:	4b0b      	ldr	r3, [pc, #44]	; (8022cc0 <__sfp+0x74>)
 8022c94:	6665      	str	r5, [r4, #100]	; 0x64
 8022c96:	e9c4 5500 	strd	r5, r5, [r4]
 8022c9a:	60a5      	str	r5, [r4, #8]
 8022c9c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8022ca0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8022ca4:	2208      	movs	r2, #8
 8022ca6:	4629      	mov	r1, r5
 8022ca8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8022cac:	f7ff ff3e 	bl	8022b2c <memset>
 8022cb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8022cb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8022cb8:	e7e9      	b.n	8022c8e <__sfp+0x42>
 8022cba:	bf00      	nop
 8022cbc:	08023958 	.word	0x08023958
 8022cc0:	ffff0001 	.word	0xffff0001

08022cc4 <_fwalk_reent>:
 8022cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022cc8:	4680      	mov	r8, r0
 8022cca:	4689      	mov	r9, r1
 8022ccc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8022cd0:	2600      	movs	r6, #0
 8022cd2:	b914      	cbnz	r4, 8022cda <_fwalk_reent+0x16>
 8022cd4:	4630      	mov	r0, r6
 8022cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022cda:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8022cde:	3f01      	subs	r7, #1
 8022ce0:	d501      	bpl.n	8022ce6 <_fwalk_reent+0x22>
 8022ce2:	6824      	ldr	r4, [r4, #0]
 8022ce4:	e7f5      	b.n	8022cd2 <_fwalk_reent+0xe>
 8022ce6:	89ab      	ldrh	r3, [r5, #12]
 8022ce8:	2b01      	cmp	r3, #1
 8022cea:	d907      	bls.n	8022cfc <_fwalk_reent+0x38>
 8022cec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022cf0:	3301      	adds	r3, #1
 8022cf2:	d003      	beq.n	8022cfc <_fwalk_reent+0x38>
 8022cf4:	4629      	mov	r1, r5
 8022cf6:	4640      	mov	r0, r8
 8022cf8:	47c8      	blx	r9
 8022cfa:	4306      	orrs	r6, r0
 8022cfc:	3568      	adds	r5, #104	; 0x68
 8022cfe:	e7ee      	b.n	8022cde <_fwalk_reent+0x1a>

08022d00 <_malloc_r>:
 8022d00:	b570      	push	{r4, r5, r6, lr}
 8022d02:	1ccd      	adds	r5, r1, #3
 8022d04:	f025 0503 	bic.w	r5, r5, #3
 8022d08:	3508      	adds	r5, #8
 8022d0a:	2d0c      	cmp	r5, #12
 8022d0c:	bf38      	it	cc
 8022d0e:	250c      	movcc	r5, #12
 8022d10:	2d00      	cmp	r5, #0
 8022d12:	4606      	mov	r6, r0
 8022d14:	db01      	blt.n	8022d1a <_malloc_r+0x1a>
 8022d16:	42a9      	cmp	r1, r5
 8022d18:	d903      	bls.n	8022d22 <_malloc_r+0x22>
 8022d1a:	230c      	movs	r3, #12
 8022d1c:	6033      	str	r3, [r6, #0]
 8022d1e:	2000      	movs	r0, #0
 8022d20:	bd70      	pop	{r4, r5, r6, pc}
 8022d22:	f000 fd6b 	bl	80237fc <__malloc_lock>
 8022d26:	4a21      	ldr	r2, [pc, #132]	; (8022dac <_malloc_r+0xac>)
 8022d28:	6814      	ldr	r4, [r2, #0]
 8022d2a:	4621      	mov	r1, r4
 8022d2c:	b991      	cbnz	r1, 8022d54 <_malloc_r+0x54>
 8022d2e:	4c20      	ldr	r4, [pc, #128]	; (8022db0 <_malloc_r+0xb0>)
 8022d30:	6823      	ldr	r3, [r4, #0]
 8022d32:	b91b      	cbnz	r3, 8022d3c <_malloc_r+0x3c>
 8022d34:	4630      	mov	r0, r6
 8022d36:	f000 fb05 	bl	8023344 <_sbrk_r>
 8022d3a:	6020      	str	r0, [r4, #0]
 8022d3c:	4629      	mov	r1, r5
 8022d3e:	4630      	mov	r0, r6
 8022d40:	f000 fb00 	bl	8023344 <_sbrk_r>
 8022d44:	1c43      	adds	r3, r0, #1
 8022d46:	d124      	bne.n	8022d92 <_malloc_r+0x92>
 8022d48:	230c      	movs	r3, #12
 8022d4a:	6033      	str	r3, [r6, #0]
 8022d4c:	4630      	mov	r0, r6
 8022d4e:	f000 fd56 	bl	80237fe <__malloc_unlock>
 8022d52:	e7e4      	b.n	8022d1e <_malloc_r+0x1e>
 8022d54:	680b      	ldr	r3, [r1, #0]
 8022d56:	1b5b      	subs	r3, r3, r5
 8022d58:	d418      	bmi.n	8022d8c <_malloc_r+0x8c>
 8022d5a:	2b0b      	cmp	r3, #11
 8022d5c:	d90f      	bls.n	8022d7e <_malloc_r+0x7e>
 8022d5e:	600b      	str	r3, [r1, #0]
 8022d60:	50cd      	str	r5, [r1, r3]
 8022d62:	18cc      	adds	r4, r1, r3
 8022d64:	4630      	mov	r0, r6
 8022d66:	f000 fd4a 	bl	80237fe <__malloc_unlock>
 8022d6a:	f104 000b 	add.w	r0, r4, #11
 8022d6e:	1d23      	adds	r3, r4, #4
 8022d70:	f020 0007 	bic.w	r0, r0, #7
 8022d74:	1ac3      	subs	r3, r0, r3
 8022d76:	d0d3      	beq.n	8022d20 <_malloc_r+0x20>
 8022d78:	425a      	negs	r2, r3
 8022d7a:	50e2      	str	r2, [r4, r3]
 8022d7c:	e7d0      	b.n	8022d20 <_malloc_r+0x20>
 8022d7e:	428c      	cmp	r4, r1
 8022d80:	684b      	ldr	r3, [r1, #4]
 8022d82:	bf16      	itet	ne
 8022d84:	6063      	strne	r3, [r4, #4]
 8022d86:	6013      	streq	r3, [r2, #0]
 8022d88:	460c      	movne	r4, r1
 8022d8a:	e7eb      	b.n	8022d64 <_malloc_r+0x64>
 8022d8c:	460c      	mov	r4, r1
 8022d8e:	6849      	ldr	r1, [r1, #4]
 8022d90:	e7cc      	b.n	8022d2c <_malloc_r+0x2c>
 8022d92:	1cc4      	adds	r4, r0, #3
 8022d94:	f024 0403 	bic.w	r4, r4, #3
 8022d98:	42a0      	cmp	r0, r4
 8022d9a:	d005      	beq.n	8022da8 <_malloc_r+0xa8>
 8022d9c:	1a21      	subs	r1, r4, r0
 8022d9e:	4630      	mov	r0, r6
 8022da0:	f000 fad0 	bl	8023344 <_sbrk_r>
 8022da4:	3001      	adds	r0, #1
 8022da6:	d0cf      	beq.n	8022d48 <_malloc_r+0x48>
 8022da8:	6025      	str	r5, [r4, #0]
 8022daa:	e7db      	b.n	8022d64 <_malloc_r+0x64>
 8022dac:	20000090 	.word	0x20000090
 8022db0:	20000094 	.word	0x20000094

08022db4 <__sfputc_r>:
 8022db4:	6893      	ldr	r3, [r2, #8]
 8022db6:	3b01      	subs	r3, #1
 8022db8:	2b00      	cmp	r3, #0
 8022dba:	b410      	push	{r4}
 8022dbc:	6093      	str	r3, [r2, #8]
 8022dbe:	da08      	bge.n	8022dd2 <__sfputc_r+0x1e>
 8022dc0:	6994      	ldr	r4, [r2, #24]
 8022dc2:	42a3      	cmp	r3, r4
 8022dc4:	db01      	blt.n	8022dca <__sfputc_r+0x16>
 8022dc6:	290a      	cmp	r1, #10
 8022dc8:	d103      	bne.n	8022dd2 <__sfputc_r+0x1e>
 8022dca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022dce:	f000 bb0d 	b.w	80233ec <__swbuf_r>
 8022dd2:	6813      	ldr	r3, [r2, #0]
 8022dd4:	1c58      	adds	r0, r3, #1
 8022dd6:	6010      	str	r0, [r2, #0]
 8022dd8:	7019      	strb	r1, [r3, #0]
 8022dda:	4608      	mov	r0, r1
 8022ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022de0:	4770      	bx	lr

08022de2 <__sfputs_r>:
 8022de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022de4:	4606      	mov	r6, r0
 8022de6:	460f      	mov	r7, r1
 8022de8:	4614      	mov	r4, r2
 8022dea:	18d5      	adds	r5, r2, r3
 8022dec:	42ac      	cmp	r4, r5
 8022dee:	d101      	bne.n	8022df4 <__sfputs_r+0x12>
 8022df0:	2000      	movs	r0, #0
 8022df2:	e007      	b.n	8022e04 <__sfputs_r+0x22>
 8022df4:	463a      	mov	r2, r7
 8022df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022dfa:	4630      	mov	r0, r6
 8022dfc:	f7ff ffda 	bl	8022db4 <__sfputc_r>
 8022e00:	1c43      	adds	r3, r0, #1
 8022e02:	d1f3      	bne.n	8022dec <__sfputs_r+0xa>
 8022e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022e08 <_vfiprintf_r>:
 8022e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e0c:	460c      	mov	r4, r1
 8022e0e:	b09d      	sub	sp, #116	; 0x74
 8022e10:	4617      	mov	r7, r2
 8022e12:	461d      	mov	r5, r3
 8022e14:	4606      	mov	r6, r0
 8022e16:	b118      	cbz	r0, 8022e20 <_vfiprintf_r+0x18>
 8022e18:	6983      	ldr	r3, [r0, #24]
 8022e1a:	b90b      	cbnz	r3, 8022e20 <_vfiprintf_r+0x18>
 8022e1c:	f7ff fee6 	bl	8022bec <__sinit>
 8022e20:	4b7c      	ldr	r3, [pc, #496]	; (8023014 <_vfiprintf_r+0x20c>)
 8022e22:	429c      	cmp	r4, r3
 8022e24:	d158      	bne.n	8022ed8 <_vfiprintf_r+0xd0>
 8022e26:	6874      	ldr	r4, [r6, #4]
 8022e28:	89a3      	ldrh	r3, [r4, #12]
 8022e2a:	0718      	lsls	r0, r3, #28
 8022e2c:	d55e      	bpl.n	8022eec <_vfiprintf_r+0xe4>
 8022e2e:	6923      	ldr	r3, [r4, #16]
 8022e30:	2b00      	cmp	r3, #0
 8022e32:	d05b      	beq.n	8022eec <_vfiprintf_r+0xe4>
 8022e34:	2300      	movs	r3, #0
 8022e36:	9309      	str	r3, [sp, #36]	; 0x24
 8022e38:	2320      	movs	r3, #32
 8022e3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022e3e:	2330      	movs	r3, #48	; 0x30
 8022e40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022e44:	9503      	str	r5, [sp, #12]
 8022e46:	f04f 0b01 	mov.w	fp, #1
 8022e4a:	46b8      	mov	r8, r7
 8022e4c:	4645      	mov	r5, r8
 8022e4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8022e52:	b10b      	cbz	r3, 8022e58 <_vfiprintf_r+0x50>
 8022e54:	2b25      	cmp	r3, #37	; 0x25
 8022e56:	d154      	bne.n	8022f02 <_vfiprintf_r+0xfa>
 8022e58:	ebb8 0a07 	subs.w	sl, r8, r7
 8022e5c:	d00b      	beq.n	8022e76 <_vfiprintf_r+0x6e>
 8022e5e:	4653      	mov	r3, sl
 8022e60:	463a      	mov	r2, r7
 8022e62:	4621      	mov	r1, r4
 8022e64:	4630      	mov	r0, r6
 8022e66:	f7ff ffbc 	bl	8022de2 <__sfputs_r>
 8022e6a:	3001      	adds	r0, #1
 8022e6c:	f000 80c2 	beq.w	8022ff4 <_vfiprintf_r+0x1ec>
 8022e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e72:	4453      	add	r3, sl
 8022e74:	9309      	str	r3, [sp, #36]	; 0x24
 8022e76:	f898 3000 	ldrb.w	r3, [r8]
 8022e7a:	2b00      	cmp	r3, #0
 8022e7c:	f000 80ba 	beq.w	8022ff4 <_vfiprintf_r+0x1ec>
 8022e80:	2300      	movs	r3, #0
 8022e82:	f04f 32ff 	mov.w	r2, #4294967295
 8022e86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022e8a:	9304      	str	r3, [sp, #16]
 8022e8c:	9307      	str	r3, [sp, #28]
 8022e8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022e92:	931a      	str	r3, [sp, #104]	; 0x68
 8022e94:	46a8      	mov	r8, r5
 8022e96:	2205      	movs	r2, #5
 8022e98:	f818 1b01 	ldrb.w	r1, [r8], #1
 8022e9c:	485e      	ldr	r0, [pc, #376]	; (8023018 <_vfiprintf_r+0x210>)
 8022e9e:	f7fd fae7 	bl	8020470 <memchr>
 8022ea2:	9b04      	ldr	r3, [sp, #16]
 8022ea4:	bb78      	cbnz	r0, 8022f06 <_vfiprintf_r+0xfe>
 8022ea6:	06d9      	lsls	r1, r3, #27
 8022ea8:	bf44      	itt	mi
 8022eaa:	2220      	movmi	r2, #32
 8022eac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8022eb0:	071a      	lsls	r2, r3, #28
 8022eb2:	bf44      	itt	mi
 8022eb4:	222b      	movmi	r2, #43	; 0x2b
 8022eb6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8022eba:	782a      	ldrb	r2, [r5, #0]
 8022ebc:	2a2a      	cmp	r2, #42	; 0x2a
 8022ebe:	d02a      	beq.n	8022f16 <_vfiprintf_r+0x10e>
 8022ec0:	9a07      	ldr	r2, [sp, #28]
 8022ec2:	46a8      	mov	r8, r5
 8022ec4:	2000      	movs	r0, #0
 8022ec6:	250a      	movs	r5, #10
 8022ec8:	4641      	mov	r1, r8
 8022eca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022ece:	3b30      	subs	r3, #48	; 0x30
 8022ed0:	2b09      	cmp	r3, #9
 8022ed2:	d969      	bls.n	8022fa8 <_vfiprintf_r+0x1a0>
 8022ed4:	b360      	cbz	r0, 8022f30 <_vfiprintf_r+0x128>
 8022ed6:	e024      	b.n	8022f22 <_vfiprintf_r+0x11a>
 8022ed8:	4b50      	ldr	r3, [pc, #320]	; (802301c <_vfiprintf_r+0x214>)
 8022eda:	429c      	cmp	r4, r3
 8022edc:	d101      	bne.n	8022ee2 <_vfiprintf_r+0xda>
 8022ede:	68b4      	ldr	r4, [r6, #8]
 8022ee0:	e7a2      	b.n	8022e28 <_vfiprintf_r+0x20>
 8022ee2:	4b4f      	ldr	r3, [pc, #316]	; (8023020 <_vfiprintf_r+0x218>)
 8022ee4:	429c      	cmp	r4, r3
 8022ee6:	bf08      	it	eq
 8022ee8:	68f4      	ldreq	r4, [r6, #12]
 8022eea:	e79d      	b.n	8022e28 <_vfiprintf_r+0x20>
 8022eec:	4621      	mov	r1, r4
 8022eee:	4630      	mov	r0, r6
 8022ef0:	f000 fae0 	bl	80234b4 <__swsetup_r>
 8022ef4:	2800      	cmp	r0, #0
 8022ef6:	d09d      	beq.n	8022e34 <_vfiprintf_r+0x2c>
 8022ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8022efc:	b01d      	add	sp, #116	; 0x74
 8022efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f02:	46a8      	mov	r8, r5
 8022f04:	e7a2      	b.n	8022e4c <_vfiprintf_r+0x44>
 8022f06:	4a44      	ldr	r2, [pc, #272]	; (8023018 <_vfiprintf_r+0x210>)
 8022f08:	1a80      	subs	r0, r0, r2
 8022f0a:	fa0b f000 	lsl.w	r0, fp, r0
 8022f0e:	4318      	orrs	r0, r3
 8022f10:	9004      	str	r0, [sp, #16]
 8022f12:	4645      	mov	r5, r8
 8022f14:	e7be      	b.n	8022e94 <_vfiprintf_r+0x8c>
 8022f16:	9a03      	ldr	r2, [sp, #12]
 8022f18:	1d11      	adds	r1, r2, #4
 8022f1a:	6812      	ldr	r2, [r2, #0]
 8022f1c:	9103      	str	r1, [sp, #12]
 8022f1e:	2a00      	cmp	r2, #0
 8022f20:	db01      	blt.n	8022f26 <_vfiprintf_r+0x11e>
 8022f22:	9207      	str	r2, [sp, #28]
 8022f24:	e004      	b.n	8022f30 <_vfiprintf_r+0x128>
 8022f26:	4252      	negs	r2, r2
 8022f28:	f043 0302 	orr.w	r3, r3, #2
 8022f2c:	9207      	str	r2, [sp, #28]
 8022f2e:	9304      	str	r3, [sp, #16]
 8022f30:	f898 3000 	ldrb.w	r3, [r8]
 8022f34:	2b2e      	cmp	r3, #46	; 0x2e
 8022f36:	d10e      	bne.n	8022f56 <_vfiprintf_r+0x14e>
 8022f38:	f898 3001 	ldrb.w	r3, [r8, #1]
 8022f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8022f3e:	d138      	bne.n	8022fb2 <_vfiprintf_r+0x1aa>
 8022f40:	9b03      	ldr	r3, [sp, #12]
 8022f42:	1d1a      	adds	r2, r3, #4
 8022f44:	681b      	ldr	r3, [r3, #0]
 8022f46:	9203      	str	r2, [sp, #12]
 8022f48:	2b00      	cmp	r3, #0
 8022f4a:	bfb8      	it	lt
 8022f4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8022f50:	f108 0802 	add.w	r8, r8, #2
 8022f54:	9305      	str	r3, [sp, #20]
 8022f56:	4d33      	ldr	r5, [pc, #204]	; (8023024 <_vfiprintf_r+0x21c>)
 8022f58:	f898 1000 	ldrb.w	r1, [r8]
 8022f5c:	2203      	movs	r2, #3
 8022f5e:	4628      	mov	r0, r5
 8022f60:	f7fd fa86 	bl	8020470 <memchr>
 8022f64:	b140      	cbz	r0, 8022f78 <_vfiprintf_r+0x170>
 8022f66:	2340      	movs	r3, #64	; 0x40
 8022f68:	1b40      	subs	r0, r0, r5
 8022f6a:	fa03 f000 	lsl.w	r0, r3, r0
 8022f6e:	9b04      	ldr	r3, [sp, #16]
 8022f70:	4303      	orrs	r3, r0
 8022f72:	f108 0801 	add.w	r8, r8, #1
 8022f76:	9304      	str	r3, [sp, #16]
 8022f78:	f898 1000 	ldrb.w	r1, [r8]
 8022f7c:	482a      	ldr	r0, [pc, #168]	; (8023028 <_vfiprintf_r+0x220>)
 8022f7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022f82:	2206      	movs	r2, #6
 8022f84:	f108 0701 	add.w	r7, r8, #1
 8022f88:	f7fd fa72 	bl	8020470 <memchr>
 8022f8c:	2800      	cmp	r0, #0
 8022f8e:	d037      	beq.n	8023000 <_vfiprintf_r+0x1f8>
 8022f90:	4b26      	ldr	r3, [pc, #152]	; (802302c <_vfiprintf_r+0x224>)
 8022f92:	bb1b      	cbnz	r3, 8022fdc <_vfiprintf_r+0x1d4>
 8022f94:	9b03      	ldr	r3, [sp, #12]
 8022f96:	3307      	adds	r3, #7
 8022f98:	f023 0307 	bic.w	r3, r3, #7
 8022f9c:	3308      	adds	r3, #8
 8022f9e:	9303      	str	r3, [sp, #12]
 8022fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022fa2:	444b      	add	r3, r9
 8022fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8022fa6:	e750      	b.n	8022e4a <_vfiprintf_r+0x42>
 8022fa8:	fb05 3202 	mla	r2, r5, r2, r3
 8022fac:	2001      	movs	r0, #1
 8022fae:	4688      	mov	r8, r1
 8022fb0:	e78a      	b.n	8022ec8 <_vfiprintf_r+0xc0>
 8022fb2:	2300      	movs	r3, #0
 8022fb4:	f108 0801 	add.w	r8, r8, #1
 8022fb8:	9305      	str	r3, [sp, #20]
 8022fba:	4619      	mov	r1, r3
 8022fbc:	250a      	movs	r5, #10
 8022fbe:	4640      	mov	r0, r8
 8022fc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022fc4:	3a30      	subs	r2, #48	; 0x30
 8022fc6:	2a09      	cmp	r2, #9
 8022fc8:	d903      	bls.n	8022fd2 <_vfiprintf_r+0x1ca>
 8022fca:	2b00      	cmp	r3, #0
 8022fcc:	d0c3      	beq.n	8022f56 <_vfiprintf_r+0x14e>
 8022fce:	9105      	str	r1, [sp, #20]
 8022fd0:	e7c1      	b.n	8022f56 <_vfiprintf_r+0x14e>
 8022fd2:	fb05 2101 	mla	r1, r5, r1, r2
 8022fd6:	2301      	movs	r3, #1
 8022fd8:	4680      	mov	r8, r0
 8022fda:	e7f0      	b.n	8022fbe <_vfiprintf_r+0x1b6>
 8022fdc:	ab03      	add	r3, sp, #12
 8022fde:	9300      	str	r3, [sp, #0]
 8022fe0:	4622      	mov	r2, r4
 8022fe2:	4b13      	ldr	r3, [pc, #76]	; (8023030 <_vfiprintf_r+0x228>)
 8022fe4:	a904      	add	r1, sp, #16
 8022fe6:	4630      	mov	r0, r6
 8022fe8:	f3af 8000 	nop.w
 8022fec:	f1b0 3fff 	cmp.w	r0, #4294967295
 8022ff0:	4681      	mov	r9, r0
 8022ff2:	d1d5      	bne.n	8022fa0 <_vfiprintf_r+0x198>
 8022ff4:	89a3      	ldrh	r3, [r4, #12]
 8022ff6:	065b      	lsls	r3, r3, #25
 8022ff8:	f53f af7e 	bmi.w	8022ef8 <_vfiprintf_r+0xf0>
 8022ffc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022ffe:	e77d      	b.n	8022efc <_vfiprintf_r+0xf4>
 8023000:	ab03      	add	r3, sp, #12
 8023002:	9300      	str	r3, [sp, #0]
 8023004:	4622      	mov	r2, r4
 8023006:	4b0a      	ldr	r3, [pc, #40]	; (8023030 <_vfiprintf_r+0x228>)
 8023008:	a904      	add	r1, sp, #16
 802300a:	4630      	mov	r0, r6
 802300c:	f000 f888 	bl	8023120 <_printf_i>
 8023010:	e7ec      	b.n	8022fec <_vfiprintf_r+0x1e4>
 8023012:	bf00      	nop
 8023014:	0802397c 	.word	0x0802397c
 8023018:	080239bc 	.word	0x080239bc
 802301c:	0802399c 	.word	0x0802399c
 8023020:	0802395c 	.word	0x0802395c
 8023024:	080239c2 	.word	0x080239c2
 8023028:	080239c6 	.word	0x080239c6
 802302c:	00000000 	.word	0x00000000
 8023030:	08022de3 	.word	0x08022de3

08023034 <_printf_common>:
 8023034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023038:	4691      	mov	r9, r2
 802303a:	461f      	mov	r7, r3
 802303c:	688a      	ldr	r2, [r1, #8]
 802303e:	690b      	ldr	r3, [r1, #16]
 8023040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023044:	4293      	cmp	r3, r2
 8023046:	bfb8      	it	lt
 8023048:	4613      	movlt	r3, r2
 802304a:	f8c9 3000 	str.w	r3, [r9]
 802304e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8023052:	4606      	mov	r6, r0
 8023054:	460c      	mov	r4, r1
 8023056:	b112      	cbz	r2, 802305e <_printf_common+0x2a>
 8023058:	3301      	adds	r3, #1
 802305a:	f8c9 3000 	str.w	r3, [r9]
 802305e:	6823      	ldr	r3, [r4, #0]
 8023060:	0699      	lsls	r1, r3, #26
 8023062:	bf42      	ittt	mi
 8023064:	f8d9 3000 	ldrmi.w	r3, [r9]
 8023068:	3302      	addmi	r3, #2
 802306a:	f8c9 3000 	strmi.w	r3, [r9]
 802306e:	6825      	ldr	r5, [r4, #0]
 8023070:	f015 0506 	ands.w	r5, r5, #6
 8023074:	d107      	bne.n	8023086 <_printf_common+0x52>
 8023076:	f104 0a19 	add.w	sl, r4, #25
 802307a:	68e3      	ldr	r3, [r4, #12]
 802307c:	f8d9 2000 	ldr.w	r2, [r9]
 8023080:	1a9b      	subs	r3, r3, r2
 8023082:	42ab      	cmp	r3, r5
 8023084:	dc28      	bgt.n	80230d8 <_printf_common+0xa4>
 8023086:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802308a:	6822      	ldr	r2, [r4, #0]
 802308c:	3300      	adds	r3, #0
 802308e:	bf18      	it	ne
 8023090:	2301      	movne	r3, #1
 8023092:	0692      	lsls	r2, r2, #26
 8023094:	d42d      	bmi.n	80230f2 <_printf_common+0xbe>
 8023096:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802309a:	4639      	mov	r1, r7
 802309c:	4630      	mov	r0, r6
 802309e:	47c0      	blx	r8
 80230a0:	3001      	adds	r0, #1
 80230a2:	d020      	beq.n	80230e6 <_printf_common+0xb2>
 80230a4:	6823      	ldr	r3, [r4, #0]
 80230a6:	68e5      	ldr	r5, [r4, #12]
 80230a8:	f8d9 2000 	ldr.w	r2, [r9]
 80230ac:	f003 0306 	and.w	r3, r3, #6
 80230b0:	2b04      	cmp	r3, #4
 80230b2:	bf08      	it	eq
 80230b4:	1aad      	subeq	r5, r5, r2
 80230b6:	68a3      	ldr	r3, [r4, #8]
 80230b8:	6922      	ldr	r2, [r4, #16]
 80230ba:	bf0c      	ite	eq
 80230bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80230c0:	2500      	movne	r5, #0
 80230c2:	4293      	cmp	r3, r2
 80230c4:	bfc4      	itt	gt
 80230c6:	1a9b      	subgt	r3, r3, r2
 80230c8:	18ed      	addgt	r5, r5, r3
 80230ca:	f04f 0900 	mov.w	r9, #0
 80230ce:	341a      	adds	r4, #26
 80230d0:	454d      	cmp	r5, r9
 80230d2:	d11a      	bne.n	802310a <_printf_common+0xd6>
 80230d4:	2000      	movs	r0, #0
 80230d6:	e008      	b.n	80230ea <_printf_common+0xb6>
 80230d8:	2301      	movs	r3, #1
 80230da:	4652      	mov	r2, sl
 80230dc:	4639      	mov	r1, r7
 80230de:	4630      	mov	r0, r6
 80230e0:	47c0      	blx	r8
 80230e2:	3001      	adds	r0, #1
 80230e4:	d103      	bne.n	80230ee <_printf_common+0xba>
 80230e6:	f04f 30ff 	mov.w	r0, #4294967295
 80230ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80230ee:	3501      	adds	r5, #1
 80230f0:	e7c3      	b.n	802307a <_printf_common+0x46>
 80230f2:	18e1      	adds	r1, r4, r3
 80230f4:	1c5a      	adds	r2, r3, #1
 80230f6:	2030      	movs	r0, #48	; 0x30
 80230f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80230fc:	4422      	add	r2, r4
 80230fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023102:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023106:	3302      	adds	r3, #2
 8023108:	e7c5      	b.n	8023096 <_printf_common+0x62>
 802310a:	2301      	movs	r3, #1
 802310c:	4622      	mov	r2, r4
 802310e:	4639      	mov	r1, r7
 8023110:	4630      	mov	r0, r6
 8023112:	47c0      	blx	r8
 8023114:	3001      	adds	r0, #1
 8023116:	d0e6      	beq.n	80230e6 <_printf_common+0xb2>
 8023118:	f109 0901 	add.w	r9, r9, #1
 802311c:	e7d8      	b.n	80230d0 <_printf_common+0x9c>
	...

08023120 <_printf_i>:
 8023120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023124:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8023128:	460c      	mov	r4, r1
 802312a:	7e09      	ldrb	r1, [r1, #24]
 802312c:	b085      	sub	sp, #20
 802312e:	296e      	cmp	r1, #110	; 0x6e
 8023130:	4617      	mov	r7, r2
 8023132:	4606      	mov	r6, r0
 8023134:	4698      	mov	r8, r3
 8023136:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023138:	f000 80b3 	beq.w	80232a2 <_printf_i+0x182>
 802313c:	d822      	bhi.n	8023184 <_printf_i+0x64>
 802313e:	2963      	cmp	r1, #99	; 0x63
 8023140:	d036      	beq.n	80231b0 <_printf_i+0x90>
 8023142:	d80a      	bhi.n	802315a <_printf_i+0x3a>
 8023144:	2900      	cmp	r1, #0
 8023146:	f000 80b9 	beq.w	80232bc <_printf_i+0x19c>
 802314a:	2958      	cmp	r1, #88	; 0x58
 802314c:	f000 8083 	beq.w	8023256 <_printf_i+0x136>
 8023150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023154:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8023158:	e032      	b.n	80231c0 <_printf_i+0xa0>
 802315a:	2964      	cmp	r1, #100	; 0x64
 802315c:	d001      	beq.n	8023162 <_printf_i+0x42>
 802315e:	2969      	cmp	r1, #105	; 0x69
 8023160:	d1f6      	bne.n	8023150 <_printf_i+0x30>
 8023162:	6820      	ldr	r0, [r4, #0]
 8023164:	6813      	ldr	r3, [r2, #0]
 8023166:	0605      	lsls	r5, r0, #24
 8023168:	f103 0104 	add.w	r1, r3, #4
 802316c:	d52a      	bpl.n	80231c4 <_printf_i+0xa4>
 802316e:	681b      	ldr	r3, [r3, #0]
 8023170:	6011      	str	r1, [r2, #0]
 8023172:	2b00      	cmp	r3, #0
 8023174:	da03      	bge.n	802317e <_printf_i+0x5e>
 8023176:	222d      	movs	r2, #45	; 0x2d
 8023178:	425b      	negs	r3, r3
 802317a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802317e:	486f      	ldr	r0, [pc, #444]	; (802333c <_printf_i+0x21c>)
 8023180:	220a      	movs	r2, #10
 8023182:	e039      	b.n	80231f8 <_printf_i+0xd8>
 8023184:	2973      	cmp	r1, #115	; 0x73
 8023186:	f000 809d 	beq.w	80232c4 <_printf_i+0x1a4>
 802318a:	d808      	bhi.n	802319e <_printf_i+0x7e>
 802318c:	296f      	cmp	r1, #111	; 0x6f
 802318e:	d020      	beq.n	80231d2 <_printf_i+0xb2>
 8023190:	2970      	cmp	r1, #112	; 0x70
 8023192:	d1dd      	bne.n	8023150 <_printf_i+0x30>
 8023194:	6823      	ldr	r3, [r4, #0]
 8023196:	f043 0320 	orr.w	r3, r3, #32
 802319a:	6023      	str	r3, [r4, #0]
 802319c:	e003      	b.n	80231a6 <_printf_i+0x86>
 802319e:	2975      	cmp	r1, #117	; 0x75
 80231a0:	d017      	beq.n	80231d2 <_printf_i+0xb2>
 80231a2:	2978      	cmp	r1, #120	; 0x78
 80231a4:	d1d4      	bne.n	8023150 <_printf_i+0x30>
 80231a6:	2378      	movs	r3, #120	; 0x78
 80231a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80231ac:	4864      	ldr	r0, [pc, #400]	; (8023340 <_printf_i+0x220>)
 80231ae:	e055      	b.n	802325c <_printf_i+0x13c>
 80231b0:	6813      	ldr	r3, [r2, #0]
 80231b2:	1d19      	adds	r1, r3, #4
 80231b4:	681b      	ldr	r3, [r3, #0]
 80231b6:	6011      	str	r1, [r2, #0]
 80231b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80231bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80231c0:	2301      	movs	r3, #1
 80231c2:	e08c      	b.n	80232de <_printf_i+0x1be>
 80231c4:	681b      	ldr	r3, [r3, #0]
 80231c6:	6011      	str	r1, [r2, #0]
 80231c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80231cc:	bf18      	it	ne
 80231ce:	b21b      	sxthne	r3, r3
 80231d0:	e7cf      	b.n	8023172 <_printf_i+0x52>
 80231d2:	6813      	ldr	r3, [r2, #0]
 80231d4:	6825      	ldr	r5, [r4, #0]
 80231d6:	1d18      	adds	r0, r3, #4
 80231d8:	6010      	str	r0, [r2, #0]
 80231da:	0628      	lsls	r0, r5, #24
 80231dc:	d501      	bpl.n	80231e2 <_printf_i+0xc2>
 80231de:	681b      	ldr	r3, [r3, #0]
 80231e0:	e002      	b.n	80231e8 <_printf_i+0xc8>
 80231e2:	0668      	lsls	r0, r5, #25
 80231e4:	d5fb      	bpl.n	80231de <_printf_i+0xbe>
 80231e6:	881b      	ldrh	r3, [r3, #0]
 80231e8:	4854      	ldr	r0, [pc, #336]	; (802333c <_printf_i+0x21c>)
 80231ea:	296f      	cmp	r1, #111	; 0x6f
 80231ec:	bf14      	ite	ne
 80231ee:	220a      	movne	r2, #10
 80231f0:	2208      	moveq	r2, #8
 80231f2:	2100      	movs	r1, #0
 80231f4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80231f8:	6865      	ldr	r5, [r4, #4]
 80231fa:	60a5      	str	r5, [r4, #8]
 80231fc:	2d00      	cmp	r5, #0
 80231fe:	f2c0 8095 	blt.w	802332c <_printf_i+0x20c>
 8023202:	6821      	ldr	r1, [r4, #0]
 8023204:	f021 0104 	bic.w	r1, r1, #4
 8023208:	6021      	str	r1, [r4, #0]
 802320a:	2b00      	cmp	r3, #0
 802320c:	d13d      	bne.n	802328a <_printf_i+0x16a>
 802320e:	2d00      	cmp	r5, #0
 8023210:	f040 808e 	bne.w	8023330 <_printf_i+0x210>
 8023214:	4665      	mov	r5, ip
 8023216:	2a08      	cmp	r2, #8
 8023218:	d10b      	bne.n	8023232 <_printf_i+0x112>
 802321a:	6823      	ldr	r3, [r4, #0]
 802321c:	07db      	lsls	r3, r3, #31
 802321e:	d508      	bpl.n	8023232 <_printf_i+0x112>
 8023220:	6923      	ldr	r3, [r4, #16]
 8023222:	6862      	ldr	r2, [r4, #4]
 8023224:	429a      	cmp	r2, r3
 8023226:	bfde      	ittt	le
 8023228:	2330      	movle	r3, #48	; 0x30
 802322a:	f805 3c01 	strble.w	r3, [r5, #-1]
 802322e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8023232:	ebac 0305 	sub.w	r3, ip, r5
 8023236:	6123      	str	r3, [r4, #16]
 8023238:	f8cd 8000 	str.w	r8, [sp]
 802323c:	463b      	mov	r3, r7
 802323e:	aa03      	add	r2, sp, #12
 8023240:	4621      	mov	r1, r4
 8023242:	4630      	mov	r0, r6
 8023244:	f7ff fef6 	bl	8023034 <_printf_common>
 8023248:	3001      	adds	r0, #1
 802324a:	d14d      	bne.n	80232e8 <_printf_i+0x1c8>
 802324c:	f04f 30ff 	mov.w	r0, #4294967295
 8023250:	b005      	add	sp, #20
 8023252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023256:	4839      	ldr	r0, [pc, #228]	; (802333c <_printf_i+0x21c>)
 8023258:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 802325c:	6813      	ldr	r3, [r2, #0]
 802325e:	6821      	ldr	r1, [r4, #0]
 8023260:	1d1d      	adds	r5, r3, #4
 8023262:	681b      	ldr	r3, [r3, #0]
 8023264:	6015      	str	r5, [r2, #0]
 8023266:	060a      	lsls	r2, r1, #24
 8023268:	d50b      	bpl.n	8023282 <_printf_i+0x162>
 802326a:	07ca      	lsls	r2, r1, #31
 802326c:	bf44      	itt	mi
 802326e:	f041 0120 	orrmi.w	r1, r1, #32
 8023272:	6021      	strmi	r1, [r4, #0]
 8023274:	b91b      	cbnz	r3, 802327e <_printf_i+0x15e>
 8023276:	6822      	ldr	r2, [r4, #0]
 8023278:	f022 0220 	bic.w	r2, r2, #32
 802327c:	6022      	str	r2, [r4, #0]
 802327e:	2210      	movs	r2, #16
 8023280:	e7b7      	b.n	80231f2 <_printf_i+0xd2>
 8023282:	064d      	lsls	r5, r1, #25
 8023284:	bf48      	it	mi
 8023286:	b29b      	uxthmi	r3, r3
 8023288:	e7ef      	b.n	802326a <_printf_i+0x14a>
 802328a:	4665      	mov	r5, ip
 802328c:	fbb3 f1f2 	udiv	r1, r3, r2
 8023290:	fb02 3311 	mls	r3, r2, r1, r3
 8023294:	5cc3      	ldrb	r3, [r0, r3]
 8023296:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802329a:	460b      	mov	r3, r1
 802329c:	2900      	cmp	r1, #0
 802329e:	d1f5      	bne.n	802328c <_printf_i+0x16c>
 80232a0:	e7b9      	b.n	8023216 <_printf_i+0xf6>
 80232a2:	6813      	ldr	r3, [r2, #0]
 80232a4:	6825      	ldr	r5, [r4, #0]
 80232a6:	6961      	ldr	r1, [r4, #20]
 80232a8:	1d18      	adds	r0, r3, #4
 80232aa:	6010      	str	r0, [r2, #0]
 80232ac:	0628      	lsls	r0, r5, #24
 80232ae:	681b      	ldr	r3, [r3, #0]
 80232b0:	d501      	bpl.n	80232b6 <_printf_i+0x196>
 80232b2:	6019      	str	r1, [r3, #0]
 80232b4:	e002      	b.n	80232bc <_printf_i+0x19c>
 80232b6:	066a      	lsls	r2, r5, #25
 80232b8:	d5fb      	bpl.n	80232b2 <_printf_i+0x192>
 80232ba:	8019      	strh	r1, [r3, #0]
 80232bc:	2300      	movs	r3, #0
 80232be:	6123      	str	r3, [r4, #16]
 80232c0:	4665      	mov	r5, ip
 80232c2:	e7b9      	b.n	8023238 <_printf_i+0x118>
 80232c4:	6813      	ldr	r3, [r2, #0]
 80232c6:	1d19      	adds	r1, r3, #4
 80232c8:	6011      	str	r1, [r2, #0]
 80232ca:	681d      	ldr	r5, [r3, #0]
 80232cc:	6862      	ldr	r2, [r4, #4]
 80232ce:	2100      	movs	r1, #0
 80232d0:	4628      	mov	r0, r5
 80232d2:	f7fd f8cd 	bl	8020470 <memchr>
 80232d6:	b108      	cbz	r0, 80232dc <_printf_i+0x1bc>
 80232d8:	1b40      	subs	r0, r0, r5
 80232da:	6060      	str	r0, [r4, #4]
 80232dc:	6863      	ldr	r3, [r4, #4]
 80232de:	6123      	str	r3, [r4, #16]
 80232e0:	2300      	movs	r3, #0
 80232e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80232e6:	e7a7      	b.n	8023238 <_printf_i+0x118>
 80232e8:	6923      	ldr	r3, [r4, #16]
 80232ea:	462a      	mov	r2, r5
 80232ec:	4639      	mov	r1, r7
 80232ee:	4630      	mov	r0, r6
 80232f0:	47c0      	blx	r8
 80232f2:	3001      	adds	r0, #1
 80232f4:	d0aa      	beq.n	802324c <_printf_i+0x12c>
 80232f6:	6823      	ldr	r3, [r4, #0]
 80232f8:	079b      	lsls	r3, r3, #30
 80232fa:	d413      	bmi.n	8023324 <_printf_i+0x204>
 80232fc:	68e0      	ldr	r0, [r4, #12]
 80232fe:	9b03      	ldr	r3, [sp, #12]
 8023300:	4298      	cmp	r0, r3
 8023302:	bfb8      	it	lt
 8023304:	4618      	movlt	r0, r3
 8023306:	e7a3      	b.n	8023250 <_printf_i+0x130>
 8023308:	2301      	movs	r3, #1
 802330a:	464a      	mov	r2, r9
 802330c:	4639      	mov	r1, r7
 802330e:	4630      	mov	r0, r6
 8023310:	47c0      	blx	r8
 8023312:	3001      	adds	r0, #1
 8023314:	d09a      	beq.n	802324c <_printf_i+0x12c>
 8023316:	3501      	adds	r5, #1
 8023318:	68e3      	ldr	r3, [r4, #12]
 802331a:	9a03      	ldr	r2, [sp, #12]
 802331c:	1a9b      	subs	r3, r3, r2
 802331e:	42ab      	cmp	r3, r5
 8023320:	dcf2      	bgt.n	8023308 <_printf_i+0x1e8>
 8023322:	e7eb      	b.n	80232fc <_printf_i+0x1dc>
 8023324:	2500      	movs	r5, #0
 8023326:	f104 0919 	add.w	r9, r4, #25
 802332a:	e7f5      	b.n	8023318 <_printf_i+0x1f8>
 802332c:	2b00      	cmp	r3, #0
 802332e:	d1ac      	bne.n	802328a <_printf_i+0x16a>
 8023330:	7803      	ldrb	r3, [r0, #0]
 8023332:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023336:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802333a:	e76c      	b.n	8023216 <_printf_i+0xf6>
 802333c:	080239cd 	.word	0x080239cd
 8023340:	080239de 	.word	0x080239de

08023344 <_sbrk_r>:
 8023344:	b538      	push	{r3, r4, r5, lr}
 8023346:	4c06      	ldr	r4, [pc, #24]	; (8023360 <_sbrk_r+0x1c>)
 8023348:	2300      	movs	r3, #0
 802334a:	4605      	mov	r5, r0
 802334c:	4608      	mov	r0, r1
 802334e:	6023      	str	r3, [r4, #0]
 8023350:	f7fd fc24 	bl	8020b9c <_sbrk>
 8023354:	1c43      	adds	r3, r0, #1
 8023356:	d102      	bne.n	802335e <_sbrk_r+0x1a>
 8023358:	6823      	ldr	r3, [r4, #0]
 802335a:	b103      	cbz	r3, 802335e <_sbrk_r+0x1a>
 802335c:	602b      	str	r3, [r5, #0]
 802335e:	bd38      	pop	{r3, r4, r5, pc}
 8023360:	200000dc 	.word	0x200000dc

08023364 <__sread>:
 8023364:	b510      	push	{r4, lr}
 8023366:	460c      	mov	r4, r1
 8023368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802336c:	f000 fa96 	bl	802389c <_read_r>
 8023370:	2800      	cmp	r0, #0
 8023372:	bfab      	itete	ge
 8023374:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023376:	89a3      	ldrhlt	r3, [r4, #12]
 8023378:	181b      	addge	r3, r3, r0
 802337a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802337e:	bfac      	ite	ge
 8023380:	6563      	strge	r3, [r4, #84]	; 0x54
 8023382:	81a3      	strhlt	r3, [r4, #12]
 8023384:	bd10      	pop	{r4, pc}

08023386 <__swrite>:
 8023386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802338a:	461f      	mov	r7, r3
 802338c:	898b      	ldrh	r3, [r1, #12]
 802338e:	05db      	lsls	r3, r3, #23
 8023390:	4605      	mov	r5, r0
 8023392:	460c      	mov	r4, r1
 8023394:	4616      	mov	r6, r2
 8023396:	d505      	bpl.n	80233a4 <__swrite+0x1e>
 8023398:	2302      	movs	r3, #2
 802339a:	2200      	movs	r2, #0
 802339c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80233a0:	f000 f9b6 	bl	8023710 <_lseek_r>
 80233a4:	89a3      	ldrh	r3, [r4, #12]
 80233a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80233aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80233ae:	81a3      	strh	r3, [r4, #12]
 80233b0:	4632      	mov	r2, r6
 80233b2:	463b      	mov	r3, r7
 80233b4:	4628      	mov	r0, r5
 80233b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80233ba:	f000 b869 	b.w	8023490 <_write_r>

080233be <__sseek>:
 80233be:	b510      	push	{r4, lr}
 80233c0:	460c      	mov	r4, r1
 80233c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80233c6:	f000 f9a3 	bl	8023710 <_lseek_r>
 80233ca:	1c43      	adds	r3, r0, #1
 80233cc:	89a3      	ldrh	r3, [r4, #12]
 80233ce:	bf15      	itete	ne
 80233d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80233d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80233d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80233da:	81a3      	strheq	r3, [r4, #12]
 80233dc:	bf18      	it	ne
 80233de:	81a3      	strhne	r3, [r4, #12]
 80233e0:	bd10      	pop	{r4, pc}

080233e2 <__sclose>:
 80233e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80233e6:	f000 b8d3 	b.w	8023590 <_close_r>
	...

080233ec <__swbuf_r>:
 80233ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80233ee:	460e      	mov	r6, r1
 80233f0:	4614      	mov	r4, r2
 80233f2:	4605      	mov	r5, r0
 80233f4:	b118      	cbz	r0, 80233fe <__swbuf_r+0x12>
 80233f6:	6983      	ldr	r3, [r0, #24]
 80233f8:	b90b      	cbnz	r3, 80233fe <__swbuf_r+0x12>
 80233fa:	f7ff fbf7 	bl	8022bec <__sinit>
 80233fe:	4b21      	ldr	r3, [pc, #132]	; (8023484 <__swbuf_r+0x98>)
 8023400:	429c      	cmp	r4, r3
 8023402:	d12a      	bne.n	802345a <__swbuf_r+0x6e>
 8023404:	686c      	ldr	r4, [r5, #4]
 8023406:	69a3      	ldr	r3, [r4, #24]
 8023408:	60a3      	str	r3, [r4, #8]
 802340a:	89a3      	ldrh	r3, [r4, #12]
 802340c:	071a      	lsls	r2, r3, #28
 802340e:	d52e      	bpl.n	802346e <__swbuf_r+0x82>
 8023410:	6923      	ldr	r3, [r4, #16]
 8023412:	b363      	cbz	r3, 802346e <__swbuf_r+0x82>
 8023414:	6923      	ldr	r3, [r4, #16]
 8023416:	6820      	ldr	r0, [r4, #0]
 8023418:	1ac0      	subs	r0, r0, r3
 802341a:	6963      	ldr	r3, [r4, #20]
 802341c:	b2f6      	uxtb	r6, r6
 802341e:	4283      	cmp	r3, r0
 8023420:	4637      	mov	r7, r6
 8023422:	dc04      	bgt.n	802342e <__swbuf_r+0x42>
 8023424:	4621      	mov	r1, r4
 8023426:	4628      	mov	r0, r5
 8023428:	f000 f948 	bl	80236bc <_fflush_r>
 802342c:	bb28      	cbnz	r0, 802347a <__swbuf_r+0x8e>
 802342e:	68a3      	ldr	r3, [r4, #8]
 8023430:	3b01      	subs	r3, #1
 8023432:	60a3      	str	r3, [r4, #8]
 8023434:	6823      	ldr	r3, [r4, #0]
 8023436:	1c5a      	adds	r2, r3, #1
 8023438:	6022      	str	r2, [r4, #0]
 802343a:	701e      	strb	r6, [r3, #0]
 802343c:	6963      	ldr	r3, [r4, #20]
 802343e:	3001      	adds	r0, #1
 8023440:	4283      	cmp	r3, r0
 8023442:	d004      	beq.n	802344e <__swbuf_r+0x62>
 8023444:	89a3      	ldrh	r3, [r4, #12]
 8023446:	07db      	lsls	r3, r3, #31
 8023448:	d519      	bpl.n	802347e <__swbuf_r+0x92>
 802344a:	2e0a      	cmp	r6, #10
 802344c:	d117      	bne.n	802347e <__swbuf_r+0x92>
 802344e:	4621      	mov	r1, r4
 8023450:	4628      	mov	r0, r5
 8023452:	f000 f933 	bl	80236bc <_fflush_r>
 8023456:	b190      	cbz	r0, 802347e <__swbuf_r+0x92>
 8023458:	e00f      	b.n	802347a <__swbuf_r+0x8e>
 802345a:	4b0b      	ldr	r3, [pc, #44]	; (8023488 <__swbuf_r+0x9c>)
 802345c:	429c      	cmp	r4, r3
 802345e:	d101      	bne.n	8023464 <__swbuf_r+0x78>
 8023460:	68ac      	ldr	r4, [r5, #8]
 8023462:	e7d0      	b.n	8023406 <__swbuf_r+0x1a>
 8023464:	4b09      	ldr	r3, [pc, #36]	; (802348c <__swbuf_r+0xa0>)
 8023466:	429c      	cmp	r4, r3
 8023468:	bf08      	it	eq
 802346a:	68ec      	ldreq	r4, [r5, #12]
 802346c:	e7cb      	b.n	8023406 <__swbuf_r+0x1a>
 802346e:	4621      	mov	r1, r4
 8023470:	4628      	mov	r0, r5
 8023472:	f000 f81f 	bl	80234b4 <__swsetup_r>
 8023476:	2800      	cmp	r0, #0
 8023478:	d0cc      	beq.n	8023414 <__swbuf_r+0x28>
 802347a:	f04f 37ff 	mov.w	r7, #4294967295
 802347e:	4638      	mov	r0, r7
 8023480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023482:	bf00      	nop
 8023484:	0802397c 	.word	0x0802397c
 8023488:	0802399c 	.word	0x0802399c
 802348c:	0802395c 	.word	0x0802395c

08023490 <_write_r>:
 8023490:	b538      	push	{r3, r4, r5, lr}
 8023492:	4c07      	ldr	r4, [pc, #28]	; (80234b0 <_write_r+0x20>)
 8023494:	4605      	mov	r5, r0
 8023496:	4608      	mov	r0, r1
 8023498:	4611      	mov	r1, r2
 802349a:	2200      	movs	r2, #0
 802349c:	6022      	str	r2, [r4, #0]
 802349e:	461a      	mov	r2, r3
 80234a0:	f7fd fb2b 	bl	8020afa <_write>
 80234a4:	1c43      	adds	r3, r0, #1
 80234a6:	d102      	bne.n	80234ae <_write_r+0x1e>
 80234a8:	6823      	ldr	r3, [r4, #0]
 80234aa:	b103      	cbz	r3, 80234ae <_write_r+0x1e>
 80234ac:	602b      	str	r3, [r5, #0]
 80234ae:	bd38      	pop	{r3, r4, r5, pc}
 80234b0:	200000dc 	.word	0x200000dc

080234b4 <__swsetup_r>:
 80234b4:	4b32      	ldr	r3, [pc, #200]	; (8023580 <__swsetup_r+0xcc>)
 80234b6:	b570      	push	{r4, r5, r6, lr}
 80234b8:	681d      	ldr	r5, [r3, #0]
 80234ba:	4606      	mov	r6, r0
 80234bc:	460c      	mov	r4, r1
 80234be:	b125      	cbz	r5, 80234ca <__swsetup_r+0x16>
 80234c0:	69ab      	ldr	r3, [r5, #24]
 80234c2:	b913      	cbnz	r3, 80234ca <__swsetup_r+0x16>
 80234c4:	4628      	mov	r0, r5
 80234c6:	f7ff fb91 	bl	8022bec <__sinit>
 80234ca:	4b2e      	ldr	r3, [pc, #184]	; (8023584 <__swsetup_r+0xd0>)
 80234cc:	429c      	cmp	r4, r3
 80234ce:	d10f      	bne.n	80234f0 <__swsetup_r+0x3c>
 80234d0:	686c      	ldr	r4, [r5, #4]
 80234d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80234d6:	b29a      	uxth	r2, r3
 80234d8:	0715      	lsls	r5, r2, #28
 80234da:	d42c      	bmi.n	8023536 <__swsetup_r+0x82>
 80234dc:	06d0      	lsls	r0, r2, #27
 80234de:	d411      	bmi.n	8023504 <__swsetup_r+0x50>
 80234e0:	2209      	movs	r2, #9
 80234e2:	6032      	str	r2, [r6, #0]
 80234e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80234e8:	81a3      	strh	r3, [r4, #12]
 80234ea:	f04f 30ff 	mov.w	r0, #4294967295
 80234ee:	e03e      	b.n	802356e <__swsetup_r+0xba>
 80234f0:	4b25      	ldr	r3, [pc, #148]	; (8023588 <__swsetup_r+0xd4>)
 80234f2:	429c      	cmp	r4, r3
 80234f4:	d101      	bne.n	80234fa <__swsetup_r+0x46>
 80234f6:	68ac      	ldr	r4, [r5, #8]
 80234f8:	e7eb      	b.n	80234d2 <__swsetup_r+0x1e>
 80234fa:	4b24      	ldr	r3, [pc, #144]	; (802358c <__swsetup_r+0xd8>)
 80234fc:	429c      	cmp	r4, r3
 80234fe:	bf08      	it	eq
 8023500:	68ec      	ldreq	r4, [r5, #12]
 8023502:	e7e6      	b.n	80234d2 <__swsetup_r+0x1e>
 8023504:	0751      	lsls	r1, r2, #29
 8023506:	d512      	bpl.n	802352e <__swsetup_r+0x7a>
 8023508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802350a:	b141      	cbz	r1, 802351e <__swsetup_r+0x6a>
 802350c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023510:	4299      	cmp	r1, r3
 8023512:	d002      	beq.n	802351a <__swsetup_r+0x66>
 8023514:	4630      	mov	r0, r6
 8023516:	f000 f973 	bl	8023800 <_free_r>
 802351a:	2300      	movs	r3, #0
 802351c:	6363      	str	r3, [r4, #52]	; 0x34
 802351e:	89a3      	ldrh	r3, [r4, #12]
 8023520:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8023524:	81a3      	strh	r3, [r4, #12]
 8023526:	2300      	movs	r3, #0
 8023528:	6063      	str	r3, [r4, #4]
 802352a:	6923      	ldr	r3, [r4, #16]
 802352c:	6023      	str	r3, [r4, #0]
 802352e:	89a3      	ldrh	r3, [r4, #12]
 8023530:	f043 0308 	orr.w	r3, r3, #8
 8023534:	81a3      	strh	r3, [r4, #12]
 8023536:	6923      	ldr	r3, [r4, #16]
 8023538:	b94b      	cbnz	r3, 802354e <__swsetup_r+0x9a>
 802353a:	89a3      	ldrh	r3, [r4, #12]
 802353c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023544:	d003      	beq.n	802354e <__swsetup_r+0x9a>
 8023546:	4621      	mov	r1, r4
 8023548:	4630      	mov	r0, r6
 802354a:	f000 f917 	bl	802377c <__smakebuf_r>
 802354e:	89a2      	ldrh	r2, [r4, #12]
 8023550:	f012 0301 	ands.w	r3, r2, #1
 8023554:	d00c      	beq.n	8023570 <__swsetup_r+0xbc>
 8023556:	2300      	movs	r3, #0
 8023558:	60a3      	str	r3, [r4, #8]
 802355a:	6963      	ldr	r3, [r4, #20]
 802355c:	425b      	negs	r3, r3
 802355e:	61a3      	str	r3, [r4, #24]
 8023560:	6923      	ldr	r3, [r4, #16]
 8023562:	b953      	cbnz	r3, 802357a <__swsetup_r+0xc6>
 8023564:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023568:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802356c:	d1ba      	bne.n	80234e4 <__swsetup_r+0x30>
 802356e:	bd70      	pop	{r4, r5, r6, pc}
 8023570:	0792      	lsls	r2, r2, #30
 8023572:	bf58      	it	pl
 8023574:	6963      	ldrpl	r3, [r4, #20]
 8023576:	60a3      	str	r3, [r4, #8]
 8023578:	e7f2      	b.n	8023560 <__swsetup_r+0xac>
 802357a:	2000      	movs	r0, #0
 802357c:	e7f7      	b.n	802356e <__swsetup_r+0xba>
 802357e:	bf00      	nop
 8023580:	2000000c 	.word	0x2000000c
 8023584:	0802397c 	.word	0x0802397c
 8023588:	0802399c 	.word	0x0802399c
 802358c:	0802395c 	.word	0x0802395c

08023590 <_close_r>:
 8023590:	b538      	push	{r3, r4, r5, lr}
 8023592:	4c06      	ldr	r4, [pc, #24]	; (80235ac <_close_r+0x1c>)
 8023594:	2300      	movs	r3, #0
 8023596:	4605      	mov	r5, r0
 8023598:	4608      	mov	r0, r1
 802359a:	6023      	str	r3, [r4, #0]
 802359c:	f7fd fac9 	bl	8020b32 <_close>
 80235a0:	1c43      	adds	r3, r0, #1
 80235a2:	d102      	bne.n	80235aa <_close_r+0x1a>
 80235a4:	6823      	ldr	r3, [r4, #0]
 80235a6:	b103      	cbz	r3, 80235aa <_close_r+0x1a>
 80235a8:	602b      	str	r3, [r5, #0]
 80235aa:	bd38      	pop	{r3, r4, r5, pc}
 80235ac:	200000dc 	.word	0x200000dc

080235b0 <__sflush_r>:
 80235b0:	898a      	ldrh	r2, [r1, #12]
 80235b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80235b6:	4605      	mov	r5, r0
 80235b8:	0710      	lsls	r0, r2, #28
 80235ba:	460c      	mov	r4, r1
 80235bc:	d458      	bmi.n	8023670 <__sflush_r+0xc0>
 80235be:	684b      	ldr	r3, [r1, #4]
 80235c0:	2b00      	cmp	r3, #0
 80235c2:	dc05      	bgt.n	80235d0 <__sflush_r+0x20>
 80235c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80235c6:	2b00      	cmp	r3, #0
 80235c8:	dc02      	bgt.n	80235d0 <__sflush_r+0x20>
 80235ca:	2000      	movs	r0, #0
 80235cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80235d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80235d2:	2e00      	cmp	r6, #0
 80235d4:	d0f9      	beq.n	80235ca <__sflush_r+0x1a>
 80235d6:	2300      	movs	r3, #0
 80235d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80235dc:	682f      	ldr	r7, [r5, #0]
 80235de:	6a21      	ldr	r1, [r4, #32]
 80235e0:	602b      	str	r3, [r5, #0]
 80235e2:	d032      	beq.n	802364a <__sflush_r+0x9a>
 80235e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80235e6:	89a3      	ldrh	r3, [r4, #12]
 80235e8:	075a      	lsls	r2, r3, #29
 80235ea:	d505      	bpl.n	80235f8 <__sflush_r+0x48>
 80235ec:	6863      	ldr	r3, [r4, #4]
 80235ee:	1ac0      	subs	r0, r0, r3
 80235f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80235f2:	b10b      	cbz	r3, 80235f8 <__sflush_r+0x48>
 80235f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80235f6:	1ac0      	subs	r0, r0, r3
 80235f8:	2300      	movs	r3, #0
 80235fa:	4602      	mov	r2, r0
 80235fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80235fe:	6a21      	ldr	r1, [r4, #32]
 8023600:	4628      	mov	r0, r5
 8023602:	47b0      	blx	r6
 8023604:	1c43      	adds	r3, r0, #1
 8023606:	89a3      	ldrh	r3, [r4, #12]
 8023608:	d106      	bne.n	8023618 <__sflush_r+0x68>
 802360a:	6829      	ldr	r1, [r5, #0]
 802360c:	291d      	cmp	r1, #29
 802360e:	d848      	bhi.n	80236a2 <__sflush_r+0xf2>
 8023610:	4a29      	ldr	r2, [pc, #164]	; (80236b8 <__sflush_r+0x108>)
 8023612:	40ca      	lsrs	r2, r1
 8023614:	07d6      	lsls	r6, r2, #31
 8023616:	d544      	bpl.n	80236a2 <__sflush_r+0xf2>
 8023618:	2200      	movs	r2, #0
 802361a:	6062      	str	r2, [r4, #4]
 802361c:	04d9      	lsls	r1, r3, #19
 802361e:	6922      	ldr	r2, [r4, #16]
 8023620:	6022      	str	r2, [r4, #0]
 8023622:	d504      	bpl.n	802362e <__sflush_r+0x7e>
 8023624:	1c42      	adds	r2, r0, #1
 8023626:	d101      	bne.n	802362c <__sflush_r+0x7c>
 8023628:	682b      	ldr	r3, [r5, #0]
 802362a:	b903      	cbnz	r3, 802362e <__sflush_r+0x7e>
 802362c:	6560      	str	r0, [r4, #84]	; 0x54
 802362e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023630:	602f      	str	r7, [r5, #0]
 8023632:	2900      	cmp	r1, #0
 8023634:	d0c9      	beq.n	80235ca <__sflush_r+0x1a>
 8023636:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802363a:	4299      	cmp	r1, r3
 802363c:	d002      	beq.n	8023644 <__sflush_r+0x94>
 802363e:	4628      	mov	r0, r5
 8023640:	f000 f8de 	bl	8023800 <_free_r>
 8023644:	2000      	movs	r0, #0
 8023646:	6360      	str	r0, [r4, #52]	; 0x34
 8023648:	e7c0      	b.n	80235cc <__sflush_r+0x1c>
 802364a:	2301      	movs	r3, #1
 802364c:	4628      	mov	r0, r5
 802364e:	47b0      	blx	r6
 8023650:	1c41      	adds	r1, r0, #1
 8023652:	d1c8      	bne.n	80235e6 <__sflush_r+0x36>
 8023654:	682b      	ldr	r3, [r5, #0]
 8023656:	2b00      	cmp	r3, #0
 8023658:	d0c5      	beq.n	80235e6 <__sflush_r+0x36>
 802365a:	2b1d      	cmp	r3, #29
 802365c:	d001      	beq.n	8023662 <__sflush_r+0xb2>
 802365e:	2b16      	cmp	r3, #22
 8023660:	d101      	bne.n	8023666 <__sflush_r+0xb6>
 8023662:	602f      	str	r7, [r5, #0]
 8023664:	e7b1      	b.n	80235ca <__sflush_r+0x1a>
 8023666:	89a3      	ldrh	r3, [r4, #12]
 8023668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802366c:	81a3      	strh	r3, [r4, #12]
 802366e:	e7ad      	b.n	80235cc <__sflush_r+0x1c>
 8023670:	690f      	ldr	r7, [r1, #16]
 8023672:	2f00      	cmp	r7, #0
 8023674:	d0a9      	beq.n	80235ca <__sflush_r+0x1a>
 8023676:	0793      	lsls	r3, r2, #30
 8023678:	680e      	ldr	r6, [r1, #0]
 802367a:	bf08      	it	eq
 802367c:	694b      	ldreq	r3, [r1, #20]
 802367e:	600f      	str	r7, [r1, #0]
 8023680:	bf18      	it	ne
 8023682:	2300      	movne	r3, #0
 8023684:	eba6 0807 	sub.w	r8, r6, r7
 8023688:	608b      	str	r3, [r1, #8]
 802368a:	f1b8 0f00 	cmp.w	r8, #0
 802368e:	dd9c      	ble.n	80235ca <__sflush_r+0x1a>
 8023690:	4643      	mov	r3, r8
 8023692:	463a      	mov	r2, r7
 8023694:	6a21      	ldr	r1, [r4, #32]
 8023696:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023698:	4628      	mov	r0, r5
 802369a:	47b0      	blx	r6
 802369c:	2800      	cmp	r0, #0
 802369e:	dc06      	bgt.n	80236ae <__sflush_r+0xfe>
 80236a0:	89a3      	ldrh	r3, [r4, #12]
 80236a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80236a6:	81a3      	strh	r3, [r4, #12]
 80236a8:	f04f 30ff 	mov.w	r0, #4294967295
 80236ac:	e78e      	b.n	80235cc <__sflush_r+0x1c>
 80236ae:	4407      	add	r7, r0
 80236b0:	eba8 0800 	sub.w	r8, r8, r0
 80236b4:	e7e9      	b.n	802368a <__sflush_r+0xda>
 80236b6:	bf00      	nop
 80236b8:	20400001 	.word	0x20400001

080236bc <_fflush_r>:
 80236bc:	b538      	push	{r3, r4, r5, lr}
 80236be:	690b      	ldr	r3, [r1, #16]
 80236c0:	4605      	mov	r5, r0
 80236c2:	460c      	mov	r4, r1
 80236c4:	b1db      	cbz	r3, 80236fe <_fflush_r+0x42>
 80236c6:	b118      	cbz	r0, 80236d0 <_fflush_r+0x14>
 80236c8:	6983      	ldr	r3, [r0, #24]
 80236ca:	b90b      	cbnz	r3, 80236d0 <_fflush_r+0x14>
 80236cc:	f7ff fa8e 	bl	8022bec <__sinit>
 80236d0:	4b0c      	ldr	r3, [pc, #48]	; (8023704 <_fflush_r+0x48>)
 80236d2:	429c      	cmp	r4, r3
 80236d4:	d109      	bne.n	80236ea <_fflush_r+0x2e>
 80236d6:	686c      	ldr	r4, [r5, #4]
 80236d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80236dc:	b17b      	cbz	r3, 80236fe <_fflush_r+0x42>
 80236de:	4621      	mov	r1, r4
 80236e0:	4628      	mov	r0, r5
 80236e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80236e6:	f7ff bf63 	b.w	80235b0 <__sflush_r>
 80236ea:	4b07      	ldr	r3, [pc, #28]	; (8023708 <_fflush_r+0x4c>)
 80236ec:	429c      	cmp	r4, r3
 80236ee:	d101      	bne.n	80236f4 <_fflush_r+0x38>
 80236f0:	68ac      	ldr	r4, [r5, #8]
 80236f2:	e7f1      	b.n	80236d8 <_fflush_r+0x1c>
 80236f4:	4b05      	ldr	r3, [pc, #20]	; (802370c <_fflush_r+0x50>)
 80236f6:	429c      	cmp	r4, r3
 80236f8:	bf08      	it	eq
 80236fa:	68ec      	ldreq	r4, [r5, #12]
 80236fc:	e7ec      	b.n	80236d8 <_fflush_r+0x1c>
 80236fe:	2000      	movs	r0, #0
 8023700:	bd38      	pop	{r3, r4, r5, pc}
 8023702:	bf00      	nop
 8023704:	0802397c 	.word	0x0802397c
 8023708:	0802399c 	.word	0x0802399c
 802370c:	0802395c 	.word	0x0802395c

08023710 <_lseek_r>:
 8023710:	b538      	push	{r3, r4, r5, lr}
 8023712:	4c07      	ldr	r4, [pc, #28]	; (8023730 <_lseek_r+0x20>)
 8023714:	4605      	mov	r5, r0
 8023716:	4608      	mov	r0, r1
 8023718:	4611      	mov	r1, r2
 802371a:	2200      	movs	r2, #0
 802371c:	6022      	str	r2, [r4, #0]
 802371e:	461a      	mov	r2, r3
 8023720:	f7fd fa2e 	bl	8020b80 <_lseek>
 8023724:	1c43      	adds	r3, r0, #1
 8023726:	d102      	bne.n	802372e <_lseek_r+0x1e>
 8023728:	6823      	ldr	r3, [r4, #0]
 802372a:	b103      	cbz	r3, 802372e <_lseek_r+0x1e>
 802372c:	602b      	str	r3, [r5, #0]
 802372e:	bd38      	pop	{r3, r4, r5, pc}
 8023730:	200000dc 	.word	0x200000dc

08023734 <__swhatbuf_r>:
 8023734:	b570      	push	{r4, r5, r6, lr}
 8023736:	460e      	mov	r6, r1
 8023738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802373c:	2900      	cmp	r1, #0
 802373e:	b096      	sub	sp, #88	; 0x58
 8023740:	4614      	mov	r4, r2
 8023742:	461d      	mov	r5, r3
 8023744:	da07      	bge.n	8023756 <__swhatbuf_r+0x22>
 8023746:	2300      	movs	r3, #0
 8023748:	602b      	str	r3, [r5, #0]
 802374a:	89b3      	ldrh	r3, [r6, #12]
 802374c:	061a      	lsls	r2, r3, #24
 802374e:	d410      	bmi.n	8023772 <__swhatbuf_r+0x3e>
 8023750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023754:	e00e      	b.n	8023774 <__swhatbuf_r+0x40>
 8023756:	466a      	mov	r2, sp
 8023758:	f000 f8b2 	bl	80238c0 <_fstat_r>
 802375c:	2800      	cmp	r0, #0
 802375e:	dbf2      	blt.n	8023746 <__swhatbuf_r+0x12>
 8023760:	9a01      	ldr	r2, [sp, #4]
 8023762:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8023766:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802376a:	425a      	negs	r2, r3
 802376c:	415a      	adcs	r2, r3
 802376e:	602a      	str	r2, [r5, #0]
 8023770:	e7ee      	b.n	8023750 <__swhatbuf_r+0x1c>
 8023772:	2340      	movs	r3, #64	; 0x40
 8023774:	2000      	movs	r0, #0
 8023776:	6023      	str	r3, [r4, #0]
 8023778:	b016      	add	sp, #88	; 0x58
 802377a:	bd70      	pop	{r4, r5, r6, pc}

0802377c <__smakebuf_r>:
 802377c:	898b      	ldrh	r3, [r1, #12]
 802377e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023780:	079d      	lsls	r5, r3, #30
 8023782:	4606      	mov	r6, r0
 8023784:	460c      	mov	r4, r1
 8023786:	d507      	bpl.n	8023798 <__smakebuf_r+0x1c>
 8023788:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802378c:	6023      	str	r3, [r4, #0]
 802378e:	6123      	str	r3, [r4, #16]
 8023790:	2301      	movs	r3, #1
 8023792:	6163      	str	r3, [r4, #20]
 8023794:	b002      	add	sp, #8
 8023796:	bd70      	pop	{r4, r5, r6, pc}
 8023798:	ab01      	add	r3, sp, #4
 802379a:	466a      	mov	r2, sp
 802379c:	f7ff ffca 	bl	8023734 <__swhatbuf_r>
 80237a0:	9900      	ldr	r1, [sp, #0]
 80237a2:	4605      	mov	r5, r0
 80237a4:	4630      	mov	r0, r6
 80237a6:	f7ff faab 	bl	8022d00 <_malloc_r>
 80237aa:	b948      	cbnz	r0, 80237c0 <__smakebuf_r+0x44>
 80237ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80237b0:	059a      	lsls	r2, r3, #22
 80237b2:	d4ef      	bmi.n	8023794 <__smakebuf_r+0x18>
 80237b4:	f023 0303 	bic.w	r3, r3, #3
 80237b8:	f043 0302 	orr.w	r3, r3, #2
 80237bc:	81a3      	strh	r3, [r4, #12]
 80237be:	e7e3      	b.n	8023788 <__smakebuf_r+0xc>
 80237c0:	4b0d      	ldr	r3, [pc, #52]	; (80237f8 <__smakebuf_r+0x7c>)
 80237c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80237c4:	89a3      	ldrh	r3, [r4, #12]
 80237c6:	6020      	str	r0, [r4, #0]
 80237c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80237cc:	81a3      	strh	r3, [r4, #12]
 80237ce:	9b00      	ldr	r3, [sp, #0]
 80237d0:	6163      	str	r3, [r4, #20]
 80237d2:	9b01      	ldr	r3, [sp, #4]
 80237d4:	6120      	str	r0, [r4, #16]
 80237d6:	b15b      	cbz	r3, 80237f0 <__smakebuf_r+0x74>
 80237d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80237dc:	4630      	mov	r0, r6
 80237de:	f000 f881 	bl	80238e4 <_isatty_r>
 80237e2:	b128      	cbz	r0, 80237f0 <__smakebuf_r+0x74>
 80237e4:	89a3      	ldrh	r3, [r4, #12]
 80237e6:	f023 0303 	bic.w	r3, r3, #3
 80237ea:	f043 0301 	orr.w	r3, r3, #1
 80237ee:	81a3      	strh	r3, [r4, #12]
 80237f0:	89a3      	ldrh	r3, [r4, #12]
 80237f2:	431d      	orrs	r5, r3
 80237f4:	81a5      	strh	r5, [r4, #12]
 80237f6:	e7cd      	b.n	8023794 <__smakebuf_r+0x18>
 80237f8:	08022bb5 	.word	0x08022bb5

080237fc <__malloc_lock>:
 80237fc:	4770      	bx	lr

080237fe <__malloc_unlock>:
 80237fe:	4770      	bx	lr

08023800 <_free_r>:
 8023800:	b538      	push	{r3, r4, r5, lr}
 8023802:	4605      	mov	r5, r0
 8023804:	2900      	cmp	r1, #0
 8023806:	d045      	beq.n	8023894 <_free_r+0x94>
 8023808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802380c:	1f0c      	subs	r4, r1, #4
 802380e:	2b00      	cmp	r3, #0
 8023810:	bfb8      	it	lt
 8023812:	18e4      	addlt	r4, r4, r3
 8023814:	f7ff fff2 	bl	80237fc <__malloc_lock>
 8023818:	4a1f      	ldr	r2, [pc, #124]	; (8023898 <_free_r+0x98>)
 802381a:	6813      	ldr	r3, [r2, #0]
 802381c:	4610      	mov	r0, r2
 802381e:	b933      	cbnz	r3, 802382e <_free_r+0x2e>
 8023820:	6063      	str	r3, [r4, #4]
 8023822:	6014      	str	r4, [r2, #0]
 8023824:	4628      	mov	r0, r5
 8023826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802382a:	f7ff bfe8 	b.w	80237fe <__malloc_unlock>
 802382e:	42a3      	cmp	r3, r4
 8023830:	d90c      	bls.n	802384c <_free_r+0x4c>
 8023832:	6821      	ldr	r1, [r4, #0]
 8023834:	1862      	adds	r2, r4, r1
 8023836:	4293      	cmp	r3, r2
 8023838:	bf04      	itt	eq
 802383a:	681a      	ldreq	r2, [r3, #0]
 802383c:	685b      	ldreq	r3, [r3, #4]
 802383e:	6063      	str	r3, [r4, #4]
 8023840:	bf04      	itt	eq
 8023842:	1852      	addeq	r2, r2, r1
 8023844:	6022      	streq	r2, [r4, #0]
 8023846:	6004      	str	r4, [r0, #0]
 8023848:	e7ec      	b.n	8023824 <_free_r+0x24>
 802384a:	4613      	mov	r3, r2
 802384c:	685a      	ldr	r2, [r3, #4]
 802384e:	b10a      	cbz	r2, 8023854 <_free_r+0x54>
 8023850:	42a2      	cmp	r2, r4
 8023852:	d9fa      	bls.n	802384a <_free_r+0x4a>
 8023854:	6819      	ldr	r1, [r3, #0]
 8023856:	1858      	adds	r0, r3, r1
 8023858:	42a0      	cmp	r0, r4
 802385a:	d10b      	bne.n	8023874 <_free_r+0x74>
 802385c:	6820      	ldr	r0, [r4, #0]
 802385e:	4401      	add	r1, r0
 8023860:	1858      	adds	r0, r3, r1
 8023862:	4282      	cmp	r2, r0
 8023864:	6019      	str	r1, [r3, #0]
 8023866:	d1dd      	bne.n	8023824 <_free_r+0x24>
 8023868:	6810      	ldr	r0, [r2, #0]
 802386a:	6852      	ldr	r2, [r2, #4]
 802386c:	605a      	str	r2, [r3, #4]
 802386e:	4401      	add	r1, r0
 8023870:	6019      	str	r1, [r3, #0]
 8023872:	e7d7      	b.n	8023824 <_free_r+0x24>
 8023874:	d902      	bls.n	802387c <_free_r+0x7c>
 8023876:	230c      	movs	r3, #12
 8023878:	602b      	str	r3, [r5, #0]
 802387a:	e7d3      	b.n	8023824 <_free_r+0x24>
 802387c:	6820      	ldr	r0, [r4, #0]
 802387e:	1821      	adds	r1, r4, r0
 8023880:	428a      	cmp	r2, r1
 8023882:	bf04      	itt	eq
 8023884:	6811      	ldreq	r1, [r2, #0]
 8023886:	6852      	ldreq	r2, [r2, #4]
 8023888:	6062      	str	r2, [r4, #4]
 802388a:	bf04      	itt	eq
 802388c:	1809      	addeq	r1, r1, r0
 802388e:	6021      	streq	r1, [r4, #0]
 8023890:	605c      	str	r4, [r3, #4]
 8023892:	e7c7      	b.n	8023824 <_free_r+0x24>
 8023894:	bd38      	pop	{r3, r4, r5, pc}
 8023896:	bf00      	nop
 8023898:	20000090 	.word	0x20000090

0802389c <_read_r>:
 802389c:	b538      	push	{r3, r4, r5, lr}
 802389e:	4c07      	ldr	r4, [pc, #28]	; (80238bc <_read_r+0x20>)
 80238a0:	4605      	mov	r5, r0
 80238a2:	4608      	mov	r0, r1
 80238a4:	4611      	mov	r1, r2
 80238a6:	2200      	movs	r2, #0
 80238a8:	6022      	str	r2, [r4, #0]
 80238aa:	461a      	mov	r2, r3
 80238ac:	f7fd f908 	bl	8020ac0 <_read>
 80238b0:	1c43      	adds	r3, r0, #1
 80238b2:	d102      	bne.n	80238ba <_read_r+0x1e>
 80238b4:	6823      	ldr	r3, [r4, #0]
 80238b6:	b103      	cbz	r3, 80238ba <_read_r+0x1e>
 80238b8:	602b      	str	r3, [r5, #0]
 80238ba:	bd38      	pop	{r3, r4, r5, pc}
 80238bc:	200000dc 	.word	0x200000dc

080238c0 <_fstat_r>:
 80238c0:	b538      	push	{r3, r4, r5, lr}
 80238c2:	4c07      	ldr	r4, [pc, #28]	; (80238e0 <_fstat_r+0x20>)
 80238c4:	2300      	movs	r3, #0
 80238c6:	4605      	mov	r5, r0
 80238c8:	4608      	mov	r0, r1
 80238ca:	4611      	mov	r1, r2
 80238cc:	6023      	str	r3, [r4, #0]
 80238ce:	f7fd f93c 	bl	8020b4a <_fstat>
 80238d2:	1c43      	adds	r3, r0, #1
 80238d4:	d102      	bne.n	80238dc <_fstat_r+0x1c>
 80238d6:	6823      	ldr	r3, [r4, #0]
 80238d8:	b103      	cbz	r3, 80238dc <_fstat_r+0x1c>
 80238da:	602b      	str	r3, [r5, #0]
 80238dc:	bd38      	pop	{r3, r4, r5, pc}
 80238de:	bf00      	nop
 80238e0:	200000dc 	.word	0x200000dc

080238e4 <_isatty_r>:
 80238e4:	b538      	push	{r3, r4, r5, lr}
 80238e6:	4c06      	ldr	r4, [pc, #24]	; (8023900 <_isatty_r+0x1c>)
 80238e8:	2300      	movs	r3, #0
 80238ea:	4605      	mov	r5, r0
 80238ec:	4608      	mov	r0, r1
 80238ee:	6023      	str	r3, [r4, #0]
 80238f0:	f7fd f93b 	bl	8020b6a <_isatty>
 80238f4:	1c43      	adds	r3, r0, #1
 80238f6:	d102      	bne.n	80238fe <_isatty_r+0x1a>
 80238f8:	6823      	ldr	r3, [r4, #0]
 80238fa:	b103      	cbz	r3, 80238fe <_isatty_r+0x1a>
 80238fc:	602b      	str	r3, [r5, #0]
 80238fe:	bd38      	pop	{r3, r4, r5, pc}
 8023900:	200000dc 	.word	0x200000dc

08023904 <_init>:
 8023904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023906:	bf00      	nop
 8023908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802390a:	bc08      	pop	{r3}
 802390c:	469e      	mov	lr, r3
 802390e:	4770      	bx	lr

08023910 <_fini>:
 8023910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023912:	bf00      	nop
 8023914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023916:	bc08      	pop	{r3}
 8023918:	469e      	mov	lr, r3
 802391a:	4770      	bx	lr
