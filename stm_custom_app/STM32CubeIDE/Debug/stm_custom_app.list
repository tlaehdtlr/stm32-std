
stm_custom_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f58  080101c4  080101c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0801311c  0801311c  0001311c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080131b0  080131b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080131b0  080131b0  000131b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080131b8  080131b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080131b8  080131b8  000131b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080131bc  080131bc  000131bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080131c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000070  08013230  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00010400  200000e0  08013230  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009969  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b7d  00000000  00000000  00029a09  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007d0  00000000  00000000  0002b588  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006d8  00000000  00000000  0002bd58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fe57  00000000  00000000  0002c430  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007f90  00000000  00000000  0004c287  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bb1b7  00000000  00000000  00054217  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010f3ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000235c  00000000  00000000  0010f44c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080101c4 <__do_global_dtors_aux>:
 80101c4:	b510      	push	{r4, lr}
 80101c6:	4c05      	ldr	r4, [pc, #20]	; (80101dc <__do_global_dtors_aux+0x18>)
 80101c8:	7823      	ldrb	r3, [r4, #0]
 80101ca:	b933      	cbnz	r3, 80101da <__do_global_dtors_aux+0x16>
 80101cc:	4b04      	ldr	r3, [pc, #16]	; (80101e0 <__do_global_dtors_aux+0x1c>)
 80101ce:	b113      	cbz	r3, 80101d6 <__do_global_dtors_aux+0x12>
 80101d0:	4804      	ldr	r0, [pc, #16]	; (80101e4 <__do_global_dtors_aux+0x20>)
 80101d2:	f3af 8000 	nop.w
 80101d6:	2301      	movs	r3, #1
 80101d8:	7023      	strb	r3, [r4, #0]
 80101da:	bd10      	pop	{r4, pc}
 80101dc:	20000070 	.word	0x20000070
 80101e0:	00000000 	.word	0x00000000
 80101e4:	08013104 	.word	0x08013104

080101e8 <frame_dummy>:
 80101e8:	b508      	push	{r3, lr}
 80101ea:	4b03      	ldr	r3, [pc, #12]	; (80101f8 <frame_dummy+0x10>)
 80101ec:	b11b      	cbz	r3, 80101f6 <frame_dummy+0xe>
 80101ee:	4903      	ldr	r1, [pc, #12]	; (80101fc <frame_dummy+0x14>)
 80101f0:	4803      	ldr	r0, [pc, #12]	; (8010200 <frame_dummy+0x18>)
 80101f2:	f3af 8000 	nop.w
 80101f6:	bd08      	pop	{r3, pc}
 80101f8:	00000000 	.word	0x00000000
 80101fc:	20000074 	.word	0x20000074
 8010200:	08013104 	.word	0x08013104

08010204 <__aeabi_uldivmod>:
 8010204:	b953      	cbnz	r3, 801021c <__aeabi_uldivmod+0x18>
 8010206:	b94a      	cbnz	r2, 801021c <__aeabi_uldivmod+0x18>
 8010208:	2900      	cmp	r1, #0
 801020a:	bf08      	it	eq
 801020c:	2800      	cmpeq	r0, #0
 801020e:	bf1c      	itt	ne
 8010210:	f04f 31ff 	movne.w	r1, #4294967295
 8010214:	f04f 30ff 	movne.w	r0, #4294967295
 8010218:	f000 b972 	b.w	8010500 <__aeabi_idiv0>
 801021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8010220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010224:	f000 f806 	bl	8010234 <__udivmoddi4>
 8010228:	f8dd e004 	ldr.w	lr, [sp, #4]
 801022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010230:	b004      	add	sp, #16
 8010232:	4770      	bx	lr

08010234 <__udivmoddi4>:
 8010234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010238:	9e08      	ldr	r6, [sp, #32]
 801023a:	4604      	mov	r4, r0
 801023c:	4688      	mov	r8, r1
 801023e:	2b00      	cmp	r3, #0
 8010240:	d14b      	bne.n	80102da <__udivmoddi4+0xa6>
 8010242:	428a      	cmp	r2, r1
 8010244:	4615      	mov	r5, r2
 8010246:	d967      	bls.n	8010318 <__udivmoddi4+0xe4>
 8010248:	fab2 f282 	clz	r2, r2
 801024c:	b14a      	cbz	r2, 8010262 <__udivmoddi4+0x2e>
 801024e:	f1c2 0720 	rsb	r7, r2, #32
 8010252:	fa01 f302 	lsl.w	r3, r1, r2
 8010256:	fa20 f707 	lsr.w	r7, r0, r7
 801025a:	4095      	lsls	r5, r2
 801025c:	ea47 0803 	orr.w	r8, r7, r3
 8010260:	4094      	lsls	r4, r2
 8010262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8010266:	0c23      	lsrs	r3, r4, #16
 8010268:	fbb8 f7fe 	udiv	r7, r8, lr
 801026c:	fa1f fc85 	uxth.w	ip, r5
 8010270:	fb0e 8817 	mls	r8, lr, r7, r8
 8010274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8010278:	fb07 f10c 	mul.w	r1, r7, ip
 801027c:	4299      	cmp	r1, r3
 801027e:	d909      	bls.n	8010294 <__udivmoddi4+0x60>
 8010280:	18eb      	adds	r3, r5, r3
 8010282:	f107 30ff 	add.w	r0, r7, #4294967295
 8010286:	f080 811b 	bcs.w	80104c0 <__udivmoddi4+0x28c>
 801028a:	4299      	cmp	r1, r3
 801028c:	f240 8118 	bls.w	80104c0 <__udivmoddi4+0x28c>
 8010290:	3f02      	subs	r7, #2
 8010292:	442b      	add	r3, r5
 8010294:	1a5b      	subs	r3, r3, r1
 8010296:	b2a4      	uxth	r4, r4
 8010298:	fbb3 f0fe 	udiv	r0, r3, lr
 801029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80102a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80102a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80102a8:	45a4      	cmp	ip, r4
 80102aa:	d909      	bls.n	80102c0 <__udivmoddi4+0x8c>
 80102ac:	192c      	adds	r4, r5, r4
 80102ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80102b2:	f080 8107 	bcs.w	80104c4 <__udivmoddi4+0x290>
 80102b6:	45a4      	cmp	ip, r4
 80102b8:	f240 8104 	bls.w	80104c4 <__udivmoddi4+0x290>
 80102bc:	3802      	subs	r0, #2
 80102be:	442c      	add	r4, r5
 80102c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80102c4:	eba4 040c 	sub.w	r4, r4, ip
 80102c8:	2700      	movs	r7, #0
 80102ca:	b11e      	cbz	r6, 80102d4 <__udivmoddi4+0xa0>
 80102cc:	40d4      	lsrs	r4, r2
 80102ce:	2300      	movs	r3, #0
 80102d0:	e9c6 4300 	strd	r4, r3, [r6]
 80102d4:	4639      	mov	r1, r7
 80102d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102da:	428b      	cmp	r3, r1
 80102dc:	d909      	bls.n	80102f2 <__udivmoddi4+0xbe>
 80102de:	2e00      	cmp	r6, #0
 80102e0:	f000 80eb 	beq.w	80104ba <__udivmoddi4+0x286>
 80102e4:	2700      	movs	r7, #0
 80102e6:	e9c6 0100 	strd	r0, r1, [r6]
 80102ea:	4638      	mov	r0, r7
 80102ec:	4639      	mov	r1, r7
 80102ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102f2:	fab3 f783 	clz	r7, r3
 80102f6:	2f00      	cmp	r7, #0
 80102f8:	d147      	bne.n	801038a <__udivmoddi4+0x156>
 80102fa:	428b      	cmp	r3, r1
 80102fc:	d302      	bcc.n	8010304 <__udivmoddi4+0xd0>
 80102fe:	4282      	cmp	r2, r0
 8010300:	f200 80fa 	bhi.w	80104f8 <__udivmoddi4+0x2c4>
 8010304:	1a84      	subs	r4, r0, r2
 8010306:	eb61 0303 	sbc.w	r3, r1, r3
 801030a:	2001      	movs	r0, #1
 801030c:	4698      	mov	r8, r3
 801030e:	2e00      	cmp	r6, #0
 8010310:	d0e0      	beq.n	80102d4 <__udivmoddi4+0xa0>
 8010312:	e9c6 4800 	strd	r4, r8, [r6]
 8010316:	e7dd      	b.n	80102d4 <__udivmoddi4+0xa0>
 8010318:	b902      	cbnz	r2, 801031c <__udivmoddi4+0xe8>
 801031a:	deff      	udf	#255	; 0xff
 801031c:	fab2 f282 	clz	r2, r2
 8010320:	2a00      	cmp	r2, #0
 8010322:	f040 808f 	bne.w	8010444 <__udivmoddi4+0x210>
 8010326:	1b49      	subs	r1, r1, r5
 8010328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 801032c:	fa1f f885 	uxth.w	r8, r5
 8010330:	2701      	movs	r7, #1
 8010332:	fbb1 fcfe 	udiv	ip, r1, lr
 8010336:	0c23      	lsrs	r3, r4, #16
 8010338:	fb0e 111c 	mls	r1, lr, ip, r1
 801033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010340:	fb08 f10c 	mul.w	r1, r8, ip
 8010344:	4299      	cmp	r1, r3
 8010346:	d907      	bls.n	8010358 <__udivmoddi4+0x124>
 8010348:	18eb      	adds	r3, r5, r3
 801034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 801034e:	d202      	bcs.n	8010356 <__udivmoddi4+0x122>
 8010350:	4299      	cmp	r1, r3
 8010352:	f200 80cd 	bhi.w	80104f0 <__udivmoddi4+0x2bc>
 8010356:	4684      	mov	ip, r0
 8010358:	1a59      	subs	r1, r3, r1
 801035a:	b2a3      	uxth	r3, r4
 801035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8010360:	fb0e 1410 	mls	r4, lr, r0, r1
 8010364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8010368:	fb08 f800 	mul.w	r8, r8, r0
 801036c:	45a0      	cmp	r8, r4
 801036e:	d907      	bls.n	8010380 <__udivmoddi4+0x14c>
 8010370:	192c      	adds	r4, r5, r4
 8010372:	f100 33ff 	add.w	r3, r0, #4294967295
 8010376:	d202      	bcs.n	801037e <__udivmoddi4+0x14a>
 8010378:	45a0      	cmp	r8, r4
 801037a:	f200 80b6 	bhi.w	80104ea <__udivmoddi4+0x2b6>
 801037e:	4618      	mov	r0, r3
 8010380:	eba4 0408 	sub.w	r4, r4, r8
 8010384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8010388:	e79f      	b.n	80102ca <__udivmoddi4+0x96>
 801038a:	f1c7 0c20 	rsb	ip, r7, #32
 801038e:	40bb      	lsls	r3, r7
 8010390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8010394:	ea4e 0e03 	orr.w	lr, lr, r3
 8010398:	fa01 f407 	lsl.w	r4, r1, r7
 801039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80103a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80103a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80103a8:	4325      	orrs	r5, r4
 80103aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80103ae:	0c2c      	lsrs	r4, r5, #16
 80103b0:	fb08 3319 	mls	r3, r8, r9, r3
 80103b4:	fa1f fa8e 	uxth.w	sl, lr
 80103b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80103bc:	fb09 f40a 	mul.w	r4, r9, sl
 80103c0:	429c      	cmp	r4, r3
 80103c2:	fa02 f207 	lsl.w	r2, r2, r7
 80103c6:	fa00 f107 	lsl.w	r1, r0, r7
 80103ca:	d90b      	bls.n	80103e4 <__udivmoddi4+0x1b0>
 80103cc:	eb1e 0303 	adds.w	r3, lr, r3
 80103d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80103d4:	f080 8087 	bcs.w	80104e6 <__udivmoddi4+0x2b2>
 80103d8:	429c      	cmp	r4, r3
 80103da:	f240 8084 	bls.w	80104e6 <__udivmoddi4+0x2b2>
 80103de:	f1a9 0902 	sub.w	r9, r9, #2
 80103e2:	4473      	add	r3, lr
 80103e4:	1b1b      	subs	r3, r3, r4
 80103e6:	b2ad      	uxth	r5, r5
 80103e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80103ec:	fb08 3310 	mls	r3, r8, r0, r3
 80103f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80103f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80103f8:	45a2      	cmp	sl, r4
 80103fa:	d908      	bls.n	801040e <__udivmoddi4+0x1da>
 80103fc:	eb1e 0404 	adds.w	r4, lr, r4
 8010400:	f100 33ff 	add.w	r3, r0, #4294967295
 8010404:	d26b      	bcs.n	80104de <__udivmoddi4+0x2aa>
 8010406:	45a2      	cmp	sl, r4
 8010408:	d969      	bls.n	80104de <__udivmoddi4+0x2aa>
 801040a:	3802      	subs	r0, #2
 801040c:	4474      	add	r4, lr
 801040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8010412:	fba0 8902 	umull	r8, r9, r0, r2
 8010416:	eba4 040a 	sub.w	r4, r4, sl
 801041a:	454c      	cmp	r4, r9
 801041c:	46c2      	mov	sl, r8
 801041e:	464b      	mov	r3, r9
 8010420:	d354      	bcc.n	80104cc <__udivmoddi4+0x298>
 8010422:	d051      	beq.n	80104c8 <__udivmoddi4+0x294>
 8010424:	2e00      	cmp	r6, #0
 8010426:	d069      	beq.n	80104fc <__udivmoddi4+0x2c8>
 8010428:	ebb1 050a 	subs.w	r5, r1, sl
 801042c:	eb64 0403 	sbc.w	r4, r4, r3
 8010430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8010434:	40fd      	lsrs	r5, r7
 8010436:	40fc      	lsrs	r4, r7
 8010438:	ea4c 0505 	orr.w	r5, ip, r5
 801043c:	e9c6 5400 	strd	r5, r4, [r6]
 8010440:	2700      	movs	r7, #0
 8010442:	e747      	b.n	80102d4 <__udivmoddi4+0xa0>
 8010444:	f1c2 0320 	rsb	r3, r2, #32
 8010448:	fa20 f703 	lsr.w	r7, r0, r3
 801044c:	4095      	lsls	r5, r2
 801044e:	fa01 f002 	lsl.w	r0, r1, r2
 8010452:	fa21 f303 	lsr.w	r3, r1, r3
 8010456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 801045a:	4338      	orrs	r0, r7
 801045c:	0c01      	lsrs	r1, r0, #16
 801045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8010462:	fa1f f885 	uxth.w	r8, r5
 8010466:	fb0e 3317 	mls	r3, lr, r7, r3
 801046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801046e:	fb07 f308 	mul.w	r3, r7, r8
 8010472:	428b      	cmp	r3, r1
 8010474:	fa04 f402 	lsl.w	r4, r4, r2
 8010478:	d907      	bls.n	801048a <__udivmoddi4+0x256>
 801047a:	1869      	adds	r1, r5, r1
 801047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8010480:	d22f      	bcs.n	80104e2 <__udivmoddi4+0x2ae>
 8010482:	428b      	cmp	r3, r1
 8010484:	d92d      	bls.n	80104e2 <__udivmoddi4+0x2ae>
 8010486:	3f02      	subs	r7, #2
 8010488:	4429      	add	r1, r5
 801048a:	1acb      	subs	r3, r1, r3
 801048c:	b281      	uxth	r1, r0
 801048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8010492:	fb0e 3310 	mls	r3, lr, r0, r3
 8010496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801049a:	fb00 f308 	mul.w	r3, r0, r8
 801049e:	428b      	cmp	r3, r1
 80104a0:	d907      	bls.n	80104b2 <__udivmoddi4+0x27e>
 80104a2:	1869      	adds	r1, r5, r1
 80104a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80104a8:	d217      	bcs.n	80104da <__udivmoddi4+0x2a6>
 80104aa:	428b      	cmp	r3, r1
 80104ac:	d915      	bls.n	80104da <__udivmoddi4+0x2a6>
 80104ae:	3802      	subs	r0, #2
 80104b0:	4429      	add	r1, r5
 80104b2:	1ac9      	subs	r1, r1, r3
 80104b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80104b8:	e73b      	b.n	8010332 <__udivmoddi4+0xfe>
 80104ba:	4637      	mov	r7, r6
 80104bc:	4630      	mov	r0, r6
 80104be:	e709      	b.n	80102d4 <__udivmoddi4+0xa0>
 80104c0:	4607      	mov	r7, r0
 80104c2:	e6e7      	b.n	8010294 <__udivmoddi4+0x60>
 80104c4:	4618      	mov	r0, r3
 80104c6:	e6fb      	b.n	80102c0 <__udivmoddi4+0x8c>
 80104c8:	4541      	cmp	r1, r8
 80104ca:	d2ab      	bcs.n	8010424 <__udivmoddi4+0x1f0>
 80104cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80104d0:	eb69 020e 	sbc.w	r2, r9, lr
 80104d4:	3801      	subs	r0, #1
 80104d6:	4613      	mov	r3, r2
 80104d8:	e7a4      	b.n	8010424 <__udivmoddi4+0x1f0>
 80104da:	4660      	mov	r0, ip
 80104dc:	e7e9      	b.n	80104b2 <__udivmoddi4+0x27e>
 80104de:	4618      	mov	r0, r3
 80104e0:	e795      	b.n	801040e <__udivmoddi4+0x1da>
 80104e2:	4667      	mov	r7, ip
 80104e4:	e7d1      	b.n	801048a <__udivmoddi4+0x256>
 80104e6:	4681      	mov	r9, r0
 80104e8:	e77c      	b.n	80103e4 <__udivmoddi4+0x1b0>
 80104ea:	3802      	subs	r0, #2
 80104ec:	442c      	add	r4, r5
 80104ee:	e747      	b.n	8010380 <__udivmoddi4+0x14c>
 80104f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80104f4:	442b      	add	r3, r5
 80104f6:	e72f      	b.n	8010358 <__udivmoddi4+0x124>
 80104f8:	4638      	mov	r0, r7
 80104fa:	e708      	b.n	801030e <__udivmoddi4+0xda>
 80104fc:	4637      	mov	r7, r6
 80104fe:	e6e9      	b.n	80102d4 <__udivmoddi4+0xa0>

08010500 <__aeabi_idiv0>:
 8010500:	4770      	bx	lr
 8010502:	bf00      	nop

08010504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b088      	sub	sp, #32
 8010508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801050a:	f107 030c 	add.w	r3, r7, #12
 801050e:	2200      	movs	r2, #0
 8010510:	601a      	str	r2, [r3, #0]
 8010512:	605a      	str	r2, [r3, #4]
 8010514:	609a      	str	r2, [r3, #8]
 8010516:	60da      	str	r2, [r3, #12]
 8010518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801051a:	2300      	movs	r3, #0
 801051c:	60bb      	str	r3, [r7, #8]
 801051e:	4b20      	ldr	r3, [pc, #128]	; (80105a0 <MX_GPIO_Init+0x9c>)
 8010520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010522:	4a1f      	ldr	r2, [pc, #124]	; (80105a0 <MX_GPIO_Init+0x9c>)
 8010524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010528:	6313      	str	r3, [r2, #48]	; 0x30
 801052a:	4b1d      	ldr	r3, [pc, #116]	; (80105a0 <MX_GPIO_Init+0x9c>)
 801052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801052e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010532:	60bb      	str	r3, [r7, #8]
 8010534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010536:	2300      	movs	r3, #0
 8010538:	607b      	str	r3, [r7, #4]
 801053a:	4b19      	ldr	r3, [pc, #100]	; (80105a0 <MX_GPIO_Init+0x9c>)
 801053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801053e:	4a18      	ldr	r2, [pc, #96]	; (80105a0 <MX_GPIO_Init+0x9c>)
 8010540:	f043 0301 	orr.w	r3, r3, #1
 8010544:	6313      	str	r3, [r2, #48]	; 0x30
 8010546:	4b16      	ldr	r3, [pc, #88]	; (80105a0 <MX_GPIO_Init+0x9c>)
 8010548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801054a:	f003 0301 	and.w	r3, r3, #1
 801054e:	607b      	str	r3, [r7, #4]
 8010550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010552:	2300      	movs	r3, #0
 8010554:	603b      	str	r3, [r7, #0]
 8010556:	4b12      	ldr	r3, [pc, #72]	; (80105a0 <MX_GPIO_Init+0x9c>)
 8010558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801055a:	4a11      	ldr	r2, [pc, #68]	; (80105a0 <MX_GPIO_Init+0x9c>)
 801055c:	f043 0302 	orr.w	r3, r3, #2
 8010560:	6313      	str	r3, [r2, #48]	; 0x30
 8010562:	4b0f      	ldr	r3, [pc, #60]	; (80105a0 <MX_GPIO_Init+0x9c>)
 8010564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010566:	f003 0302 	and.w	r3, r3, #2
 801056a:	603b      	str	r3, [r7, #0]
 801056c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_SET);
 801056e:	2201      	movs	r2, #1
 8010570:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8010574:	480b      	ldr	r0, [pc, #44]	; (80105a4 <MX_GPIO_Init+0xa0>)
 8010576:	f000 fdd7 	bl	8011128 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 801057a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 801057e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010580:	2301      	movs	r3, #1
 8010582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010584:	2300      	movs	r3, #0
 8010586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010588:	2300      	movs	r3, #0
 801058a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801058c:	f107 030c 	add.w	r3, r7, #12
 8010590:	4619      	mov	r1, r3
 8010592:	4804      	ldr	r0, [pc, #16]	; (80105a4 <MX_GPIO_Init+0xa0>)
 8010594:	f000 fc36 	bl	8010e04 <HAL_GPIO_Init>

}
 8010598:	bf00      	nop
 801059a:	3720      	adds	r7, #32
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}
 80105a0:	40023800 	.word	0x40023800
 80105a4:	40020400 	.word	0x40020400

080105a8 <__io_putchar>:
//   HAL_UART_Transmit_IT(&huart2, (uint8_t*)&p, len);
//   return len;
// }

int __io_putchar(int ch)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b082      	sub	sp, #8
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
	// if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) != HAL_OK)
	// 	return -1;
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10);
 80105b0:	1d39      	adds	r1, r7, #4
 80105b2:	230a      	movs	r3, #10
 80105b4:	2201      	movs	r2, #1
 80105b6:	4804      	ldr	r0, [pc, #16]	; (80105c8 <__io_putchar+0x20>)
 80105b8:	f001 fa6b 	bl	8011a92 <HAL_UART_Transmit>
	return ch;
 80105bc:	687b      	ldr	r3, [r7, #4]
}
 80105be:	4618      	mov	r0, r3
 80105c0:	3708      	adds	r7, #8
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}
 80105c6:	bf00      	nop
 80105c8:	20000098 	.word	0x20000098

080105cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  SCB->VTOR = 0x8010000;
 80105d0:	4b10      	ldr	r3, [pc, #64]	; (8010614 <main+0x48>)
 80105d2:	4a11      	ldr	r2, [pc, #68]	; (8010618 <main+0x4c>)
 80105d4:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80105d6:	f000 fa4d 	bl	8010a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80105da:	f000 f823 	bl	8010624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80105de:	f7ff ff91 	bl	8010504 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80105e2:	f000 f98d 	bl	8010900 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("app main code start 2\r\n");
 80105e6:	480d      	ldr	r0, [pc, #52]	; (801061c <main+0x50>)
 80105e8:	f002 f980 	bl	80128ec <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80105ec:	2200      	movs	r2, #0
 80105ee:	2180      	movs	r1, #128	; 0x80
 80105f0:	480b      	ldr	r0, [pc, #44]	; (8010620 <main+0x54>)
 80105f2:	f000 fd99 	bl	8011128 <HAL_GPIO_WritePin>
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80105f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80105fa:	4809      	ldr	r0, [pc, #36]	; (8010620 <main+0x54>)
 80105fc:	f000 fdad 	bl	801115a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8010600:	2180      	movs	r1, #128	; 0x80
 8010602:	4807      	ldr	r0, [pc, #28]	; (8010620 <main+0x54>)
 8010604:	f000 fda9 	bl	801115a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8010608:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801060c:	f000 faa4 	bl	8010b58 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8010610:	e7f1      	b.n	80105f6 <main+0x2a>
 8010612:	bf00      	nop
 8010614:	e000ed00 	.word	0xe000ed00
 8010618:	08010000 	.word	0x08010000
 801061c:	0801311c 	.word	0x0801311c
 8010620:	40020400 	.word	0x40020400

08010624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b094      	sub	sp, #80	; 0x50
 8010628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801062a:	f107 031c 	add.w	r3, r7, #28
 801062e:	2234      	movs	r2, #52	; 0x34
 8010630:	2100      	movs	r1, #0
 8010632:	4618      	mov	r0, r3
 8010634:	f002 f8f6 	bl	8012824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010638:	f107 0308 	add.w	r3, r7, #8
 801063c:	2200      	movs	r2, #0
 801063e:	601a      	str	r2, [r3, #0]
 8010640:	605a      	str	r2, [r3, #4]
 8010642:	609a      	str	r2, [r3, #8]
 8010644:	60da      	str	r2, [r3, #12]
 8010646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8010648:	2300      	movs	r3, #0
 801064a:	607b      	str	r3, [r7, #4]
 801064c:	4b28      	ldr	r3, [pc, #160]	; (80106f0 <SystemClock_Config+0xcc>)
 801064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010650:	4a27      	ldr	r2, [pc, #156]	; (80106f0 <SystemClock_Config+0xcc>)
 8010652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010656:	6413      	str	r3, [r2, #64]	; 0x40
 8010658:	4b25      	ldr	r3, [pc, #148]	; (80106f0 <SystemClock_Config+0xcc>)
 801065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010660:	607b      	str	r3, [r7, #4]
 8010662:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010664:	2300      	movs	r3, #0
 8010666:	603b      	str	r3, [r7, #0]
 8010668:	4b22      	ldr	r3, [pc, #136]	; (80106f4 <SystemClock_Config+0xd0>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	4a21      	ldr	r2, [pc, #132]	; (80106f4 <SystemClock_Config+0xd0>)
 801066e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010672:	6013      	str	r3, [r2, #0]
 8010674:	4b1f      	ldr	r3, [pc, #124]	; (80106f4 <SystemClock_Config+0xd0>)
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801067c:	603b      	str	r3, [r7, #0]
 801067e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8010680:	2301      	movs	r3, #1
 8010682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8010684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8010688:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801068a:	2302      	movs	r3, #2
 801068c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801068e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8010694:	2304      	movs	r3, #4
 8010696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8010698:	2360      	movs	r3, #96	; 0x60
 801069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801069c:	2302      	movs	r3, #2
 801069e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80106a0:	2302      	movs	r3, #2
 80106a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80106a4:	2302      	movs	r3, #2
 80106a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80106a8:	f107 031c 	add.w	r3, r7, #28
 80106ac:	4618      	mov	r0, r3
 80106ae:	f000 ff61 	bl	8011574 <HAL_RCC_OscConfig>
 80106b2:	4603      	mov	r3, r0
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d001      	beq.n	80106bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80106b8:	f000 f81e 	bl	80106f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80106bc:	230f      	movs	r3, #15
 80106be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80106c0:	2302      	movs	r3, #2
 80106c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80106c4:	2300      	movs	r3, #0
 80106c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80106c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80106cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80106ce:	2300      	movs	r3, #0
 80106d0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80106d2:	f107 0308 	add.w	r3, r7, #8
 80106d6:	2103      	movs	r1, #3
 80106d8:	4618      	mov	r0, r3
 80106da:	f000 fd59 	bl	8011190 <HAL_RCC_ClockConfig>
 80106de:	4603      	mov	r3, r0
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d001      	beq.n	80106e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80106e4:	f000 f808 	bl	80106f8 <Error_Handler>
  }
}
 80106e8:	bf00      	nop
 80106ea:	3750      	adds	r7, #80	; 0x50
 80106ec:	46bd      	mov	sp, r7
 80106ee:	bd80      	pop	{r7, pc}
 80106f0:	40023800 	.word	0x40023800
 80106f4:	40007000 	.word	0x40007000

080106f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80106f8:	b480      	push	{r7}
 80106fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80106fc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80106fe:	e7fe      	b.n	80106fe <Error_Handler+0x6>

08010700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010700:	b480      	push	{r7}
 8010702:	b083      	sub	sp, #12
 8010704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010706:	2300      	movs	r3, #0
 8010708:	607b      	str	r3, [r7, #4]
 801070a:	4b10      	ldr	r3, [pc, #64]	; (801074c <HAL_MspInit+0x4c>)
 801070c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801070e:	4a0f      	ldr	r2, [pc, #60]	; (801074c <HAL_MspInit+0x4c>)
 8010710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010714:	6453      	str	r3, [r2, #68]	; 0x44
 8010716:	4b0d      	ldr	r3, [pc, #52]	; (801074c <HAL_MspInit+0x4c>)
 8010718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801071a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801071e:	607b      	str	r3, [r7, #4]
 8010720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010722:	2300      	movs	r3, #0
 8010724:	603b      	str	r3, [r7, #0]
 8010726:	4b09      	ldr	r3, [pc, #36]	; (801074c <HAL_MspInit+0x4c>)
 8010728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801072a:	4a08      	ldr	r2, [pc, #32]	; (801074c <HAL_MspInit+0x4c>)
 801072c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010730:	6413      	str	r3, [r2, #64]	; 0x40
 8010732:	4b06      	ldr	r3, [pc, #24]	; (801074c <HAL_MspInit+0x4c>)
 8010734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801073a:	603b      	str	r3, [r7, #0]
 801073c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801073e:	bf00      	nop
 8010740:	370c      	adds	r7, #12
 8010742:	46bd      	mov	sp, r7
 8010744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010748:	4770      	bx	lr
 801074a:	bf00      	nop
 801074c:	40023800 	.word	0x40023800

08010750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010750:	b480      	push	{r7}
 8010752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8010754:	e7fe      	b.n	8010754 <NMI_Handler+0x4>

08010756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010756:	b480      	push	{r7}
 8010758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801075a:	e7fe      	b.n	801075a <HardFault_Handler+0x4>

0801075c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801075c:	b480      	push	{r7}
 801075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010760:	e7fe      	b.n	8010760 <MemManage_Handler+0x4>

08010762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010762:	b480      	push	{r7}
 8010764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010766:	e7fe      	b.n	8010766 <BusFault_Handler+0x4>

08010768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010768:	b480      	push	{r7}
 801076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801076c:	e7fe      	b.n	801076c <UsageFault_Handler+0x4>

0801076e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801076e:	b480      	push	{r7}
 8010770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010772:	bf00      	nop
 8010774:	46bd      	mov	sp, r7
 8010776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077a:	4770      	bx	lr

0801077c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801077c:	b480      	push	{r7}
 801077e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010780:	bf00      	nop
 8010782:	46bd      	mov	sp, r7
 8010784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010788:	4770      	bx	lr

0801078a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801078a:	b480      	push	{r7}
 801078c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801078e:	bf00      	nop
 8010790:	46bd      	mov	sp, r7
 8010792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010796:	4770      	bx	lr

08010798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801079c:	f000 f9bc 	bl	8010b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80107a0:	bf00      	nop
 80107a2:	bd80      	pop	{r7, pc}

080107a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80107a8:	4802      	ldr	r0, [pc, #8]	; (80107b4 <USART2_IRQHandler+0x10>)
 80107aa:	f001 fa0b 	bl	8011bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80107ae:	bf00      	nop
 80107b0:	bd80      	pop	{r7, pc}
 80107b2:	bf00      	nop
 80107b4:	20000098 	.word	0x20000098

080107b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b086      	sub	sp, #24
 80107bc:	af00      	add	r7, sp, #0
 80107be:	60f8      	str	r0, [r7, #12]
 80107c0:	60b9      	str	r1, [r7, #8]
 80107c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80107c4:	2300      	movs	r3, #0
 80107c6:	617b      	str	r3, [r7, #20]
 80107c8:	e00a      	b.n	80107e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80107ca:	f3af 8000 	nop.w
 80107ce:	4601      	mov	r1, r0
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	1c5a      	adds	r2, r3, #1
 80107d4:	60ba      	str	r2, [r7, #8]
 80107d6:	b2ca      	uxtb	r2, r1
 80107d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80107da:	697b      	ldr	r3, [r7, #20]
 80107dc:	3301      	adds	r3, #1
 80107de:	617b      	str	r3, [r7, #20]
 80107e0:	697a      	ldr	r2, [r7, #20]
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	429a      	cmp	r2, r3
 80107e6:	dbf0      	blt.n	80107ca <_read+0x12>
	}

return len;
 80107e8:	687b      	ldr	r3, [r7, #4]
}
 80107ea:	4618      	mov	r0, r3
 80107ec:	3718      	adds	r7, #24
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}

080107f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80107f2:	b580      	push	{r7, lr}
 80107f4:	b086      	sub	sp, #24
 80107f6:	af00      	add	r7, sp, #0
 80107f8:	60f8      	str	r0, [r7, #12]
 80107fa:	60b9      	str	r1, [r7, #8]
 80107fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80107fe:	2300      	movs	r3, #0
 8010800:	617b      	str	r3, [r7, #20]
 8010802:	e009      	b.n	8010818 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	1c5a      	adds	r2, r3, #1
 8010808:	60ba      	str	r2, [r7, #8]
 801080a:	781b      	ldrb	r3, [r3, #0]
 801080c:	4618      	mov	r0, r3
 801080e:	f7ff fecb 	bl	80105a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010812:	697b      	ldr	r3, [r7, #20]
 8010814:	3301      	adds	r3, #1
 8010816:	617b      	str	r3, [r7, #20]
 8010818:	697a      	ldr	r2, [r7, #20]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	429a      	cmp	r2, r3
 801081e:	dbf1      	blt.n	8010804 <_write+0x12>
	}
	return len;
 8010820:	687b      	ldr	r3, [r7, #4]
}
 8010822:	4618      	mov	r0, r3
 8010824:	3718      	adds	r7, #24
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}

0801082a <_close>:

int _close(int file)
{
 801082a:	b480      	push	{r7}
 801082c:	b083      	sub	sp, #12
 801082e:	af00      	add	r7, sp, #0
 8010830:	6078      	str	r0, [r7, #4]
	return -1;
 8010832:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010836:	4618      	mov	r0, r3
 8010838:	370c      	adds	r7, #12
 801083a:	46bd      	mov	sp, r7
 801083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010840:	4770      	bx	lr

08010842 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8010842:	b480      	push	{r7}
 8010844:	b083      	sub	sp, #12
 8010846:	af00      	add	r7, sp, #0
 8010848:	6078      	str	r0, [r7, #4]
 801084a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010852:	605a      	str	r2, [r3, #4]
	return 0;
 8010854:	2300      	movs	r3, #0
}
 8010856:	4618      	mov	r0, r3
 8010858:	370c      	adds	r7, #12
 801085a:	46bd      	mov	sp, r7
 801085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010860:	4770      	bx	lr

08010862 <_isatty>:

int _isatty(int file)
{
 8010862:	b480      	push	{r7}
 8010864:	b083      	sub	sp, #12
 8010866:	af00      	add	r7, sp, #0
 8010868:	6078      	str	r0, [r7, #4]
	return 1;
 801086a:	2301      	movs	r3, #1
}
 801086c:	4618      	mov	r0, r3
 801086e:	370c      	adds	r7, #12
 8010870:	46bd      	mov	sp, r7
 8010872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010876:	4770      	bx	lr

08010878 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010878:	b480      	push	{r7}
 801087a:	b085      	sub	sp, #20
 801087c:	af00      	add	r7, sp, #0
 801087e:	60f8      	str	r0, [r7, #12]
 8010880:	60b9      	str	r1, [r7, #8]
 8010882:	607a      	str	r2, [r7, #4]
	return 0;
 8010884:	2300      	movs	r3, #0
}
 8010886:	4618      	mov	r0, r3
 8010888:	3714      	adds	r7, #20
 801088a:	46bd      	mov	sp, r7
 801088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010890:	4770      	bx	lr
	...

08010894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b086      	sub	sp, #24
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801089c:	4a14      	ldr	r2, [pc, #80]	; (80108f0 <_sbrk+0x5c>)
 801089e:	4b15      	ldr	r3, [pc, #84]	; (80108f4 <_sbrk+0x60>)
 80108a0:	1ad3      	subs	r3, r2, r3
 80108a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80108a4:	697b      	ldr	r3, [r7, #20]
 80108a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80108a8:	4b13      	ldr	r3, [pc, #76]	; (80108f8 <_sbrk+0x64>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d102      	bne.n	80108b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80108b0:	4b11      	ldr	r3, [pc, #68]	; (80108f8 <_sbrk+0x64>)
 80108b2:	4a12      	ldr	r2, [pc, #72]	; (80108fc <_sbrk+0x68>)
 80108b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80108b6:	4b10      	ldr	r3, [pc, #64]	; (80108f8 <_sbrk+0x64>)
 80108b8:	681a      	ldr	r2, [r3, #0]
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	4413      	add	r3, r2
 80108be:	693a      	ldr	r2, [r7, #16]
 80108c0:	429a      	cmp	r2, r3
 80108c2:	d207      	bcs.n	80108d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80108c4:	f001 ff84 	bl	80127d0 <__errno>
 80108c8:	4602      	mov	r2, r0
 80108ca:	230c      	movs	r3, #12
 80108cc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80108ce:	f04f 33ff 	mov.w	r3, #4294967295
 80108d2:	e009      	b.n	80108e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80108d4:	4b08      	ldr	r3, [pc, #32]	; (80108f8 <_sbrk+0x64>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80108da:	4b07      	ldr	r3, [pc, #28]	; (80108f8 <_sbrk+0x64>)
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	4413      	add	r3, r2
 80108e2:	4a05      	ldr	r2, [pc, #20]	; (80108f8 <_sbrk+0x64>)
 80108e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80108e6:	68fb      	ldr	r3, [r7, #12]
}
 80108e8:	4618      	mov	r0, r3
 80108ea:	3718      	adds	r7, #24
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}
 80108f0:	20040000 	.word	0x20040000
 80108f4:	00000400 	.word	0x00000400
 80108f8:	2000008c 	.word	0x2000008c
 80108fc:	200000e0 	.word	0x200000e0

08010900 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8010904:	4b11      	ldr	r3, [pc, #68]	; (801094c <MX_USART2_UART_Init+0x4c>)
 8010906:	4a12      	ldr	r2, [pc, #72]	; (8010950 <MX_USART2_UART_Init+0x50>)
 8010908:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 801090a:	4b10      	ldr	r3, [pc, #64]	; (801094c <MX_USART2_UART_Init+0x4c>)
 801090c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8010910:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8010912:	4b0e      	ldr	r3, [pc, #56]	; (801094c <MX_USART2_UART_Init+0x4c>)
 8010914:	2200      	movs	r2, #0
 8010916:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8010918:	4b0c      	ldr	r3, [pc, #48]	; (801094c <MX_USART2_UART_Init+0x4c>)
 801091a:	2200      	movs	r2, #0
 801091c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 801091e:	4b0b      	ldr	r3, [pc, #44]	; (801094c <MX_USART2_UART_Init+0x4c>)
 8010920:	2200      	movs	r2, #0
 8010922:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8010924:	4b09      	ldr	r3, [pc, #36]	; (801094c <MX_USART2_UART_Init+0x4c>)
 8010926:	220c      	movs	r2, #12
 8010928:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801092a:	4b08      	ldr	r3, [pc, #32]	; (801094c <MX_USART2_UART_Init+0x4c>)
 801092c:	2200      	movs	r2, #0
 801092e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8010930:	4b06      	ldr	r3, [pc, #24]	; (801094c <MX_USART2_UART_Init+0x4c>)
 8010932:	2200      	movs	r2, #0
 8010934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8010936:	4805      	ldr	r0, [pc, #20]	; (801094c <MX_USART2_UART_Init+0x4c>)
 8010938:	f001 f85e 	bl	80119f8 <HAL_UART_Init>
 801093c:	4603      	mov	r3, r0
 801093e:	2b00      	cmp	r3, #0
 8010940:	d001      	beq.n	8010946 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8010942:	f7ff fed9 	bl	80106f8 <Error_Handler>
  }

}
 8010946:	bf00      	nop
 8010948:	bd80      	pop	{r7, pc}
 801094a:	bf00      	nop
 801094c:	20000098 	.word	0x20000098
 8010950:	40004400 	.word	0x40004400

08010954 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b08a      	sub	sp, #40	; 0x28
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801095c:	f107 0314 	add.w	r3, r7, #20
 8010960:	2200      	movs	r2, #0
 8010962:	601a      	str	r2, [r3, #0]
 8010964:	605a      	str	r2, [r3, #4]
 8010966:	609a      	str	r2, [r3, #8]
 8010968:	60da      	str	r2, [r3, #12]
 801096a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	4a1d      	ldr	r2, [pc, #116]	; (80109e8 <HAL_UART_MspInit+0x94>)
 8010972:	4293      	cmp	r3, r2
 8010974:	d133      	bne.n	80109de <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8010976:	2300      	movs	r3, #0
 8010978:	613b      	str	r3, [r7, #16]
 801097a:	4b1c      	ldr	r3, [pc, #112]	; (80109ec <HAL_UART_MspInit+0x98>)
 801097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801097e:	4a1b      	ldr	r2, [pc, #108]	; (80109ec <HAL_UART_MspInit+0x98>)
 8010980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010984:	6413      	str	r3, [r2, #64]	; 0x40
 8010986:	4b19      	ldr	r3, [pc, #100]	; (80109ec <HAL_UART_MspInit+0x98>)
 8010988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801098a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801098e:	613b      	str	r3, [r7, #16]
 8010990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010992:	2300      	movs	r3, #0
 8010994:	60fb      	str	r3, [r7, #12]
 8010996:	4b15      	ldr	r3, [pc, #84]	; (80109ec <HAL_UART_MspInit+0x98>)
 8010998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801099a:	4a14      	ldr	r2, [pc, #80]	; (80109ec <HAL_UART_MspInit+0x98>)
 801099c:	f043 0301 	orr.w	r3, r3, #1
 80109a0:	6313      	str	r3, [r2, #48]	; 0x30
 80109a2:	4b12      	ldr	r3, [pc, #72]	; (80109ec <HAL_UART_MspInit+0x98>)
 80109a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109a6:	f003 0301 	and.w	r3, r3, #1
 80109aa:	60fb      	str	r3, [r7, #12]
 80109ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80109ae:	230c      	movs	r3, #12
 80109b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80109b2:	2302      	movs	r3, #2
 80109b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80109b6:	2300      	movs	r3, #0
 80109b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80109ba:	2303      	movs	r3, #3
 80109bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80109be:	2307      	movs	r3, #7
 80109c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80109c2:	f107 0314 	add.w	r3, r7, #20
 80109c6:	4619      	mov	r1, r3
 80109c8:	4809      	ldr	r0, [pc, #36]	; (80109f0 <HAL_UART_MspInit+0x9c>)
 80109ca:	f000 fa1b 	bl	8010e04 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80109ce:	2200      	movs	r2, #0
 80109d0:	2100      	movs	r1, #0
 80109d2:	2026      	movs	r0, #38	; 0x26
 80109d4:	f000 f9bd 	bl	8010d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80109d8:	2026      	movs	r0, #38	; 0x26
 80109da:	f000 f9d6 	bl	8010d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80109de:	bf00      	nop
 80109e0:	3728      	adds	r7, #40	; 0x28
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}
 80109e6:	bf00      	nop
 80109e8:	40004400 	.word	0x40004400
 80109ec:	40023800 	.word	0x40023800
 80109f0:	40020000 	.word	0x40020000

080109f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80109f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010a2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80109f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80109fa:	e003      	b.n	8010a04 <LoopCopyDataInit>

080109fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80109fc:	4b0c      	ldr	r3, [pc, #48]	; (8010a30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80109fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010a00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010a02:	3104      	adds	r1, #4

08010a04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010a04:	480b      	ldr	r0, [pc, #44]	; (8010a34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010a06:	4b0c      	ldr	r3, [pc, #48]	; (8010a38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010a08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010a0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010a0c:	d3f6      	bcc.n	80109fc <CopyDataInit>
  ldr  r2, =_sbss
 8010a0e:	4a0b      	ldr	r2, [pc, #44]	; (8010a3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010a10:	e002      	b.n	8010a18 <LoopFillZerobss>

08010a12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8010a12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010a14:	f842 3b04 	str.w	r3, [r2], #4

08010a18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010a18:	4b09      	ldr	r3, [pc, #36]	; (8010a40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010a1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010a1c:	d3f9      	bcc.n	8010a12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010a1e:	f000 f813 	bl	8010a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010a22:	f001 fedb 	bl	80127dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010a26:	f7ff fdd1 	bl	80105cc <main>
  bx  lr    
 8010a2a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8010a2c:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8010a30:	080131c0 	.word	0x080131c0
  ldr  r0, =_sdata
 8010a34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010a38:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8010a3c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8010a40:	200000e0 	.word	0x200000e0

08010a44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010a44:	e7fe      	b.n	8010a44 <ADC_IRQHandler>
	...

08010a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010a48:	b480      	push	{r7}
 8010a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010a4c:	4b07      	ldr	r3, [pc, #28]	; (8010a6c <SystemInit+0x24>)
 8010a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a52:	4a06      	ldr	r2, [pc, #24]	; (8010a6c <SystemInit+0x24>)
 8010a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010a5c:	4b03      	ldr	r3, [pc, #12]	; (8010a6c <SystemInit+0x24>)
 8010a5e:	4a04      	ldr	r2, [pc, #16]	; (8010a70 <SystemInit+0x28>)
 8010a60:	609a      	str	r2, [r3, #8]
#endif
}
 8010a62:	bf00      	nop
 8010a64:	46bd      	mov	sp, r7
 8010a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6a:	4770      	bx	lr
 8010a6c:	e000ed00 	.word	0xe000ed00
 8010a70:	08010000 	.word	0x08010000

08010a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010a78:	4b0e      	ldr	r3, [pc, #56]	; (8010ab4 <HAL_Init+0x40>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	4a0d      	ldr	r2, [pc, #52]	; (8010ab4 <HAL_Init+0x40>)
 8010a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010a84:	4b0b      	ldr	r3, [pc, #44]	; (8010ab4 <HAL_Init+0x40>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	4a0a      	ldr	r2, [pc, #40]	; (8010ab4 <HAL_Init+0x40>)
 8010a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010a90:	4b08      	ldr	r3, [pc, #32]	; (8010ab4 <HAL_Init+0x40>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	4a07      	ldr	r2, [pc, #28]	; (8010ab4 <HAL_Init+0x40>)
 8010a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010a9c:	2003      	movs	r0, #3
 8010a9e:	f000 f94d 	bl	8010d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010aa2:	2000      	movs	r0, #0
 8010aa4:	f000 f808 	bl	8010ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010aa8:	f7ff fe2a 	bl	8010700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010aac:	2300      	movs	r3, #0
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	bd80      	pop	{r7, pc}
 8010ab2:	bf00      	nop
 8010ab4:	40023c00 	.word	0x40023c00

08010ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b082      	sub	sp, #8
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010ac0:	4b12      	ldr	r3, [pc, #72]	; (8010b0c <HAL_InitTick+0x54>)
 8010ac2:	681a      	ldr	r2, [r3, #0]
 8010ac4:	4b12      	ldr	r3, [pc, #72]	; (8010b10 <HAL_InitTick+0x58>)
 8010ac6:	781b      	ldrb	r3, [r3, #0]
 8010ac8:	4619      	mov	r1, r3
 8010aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8010ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f000 f965 	bl	8010da6 <HAL_SYSTICK_Config>
 8010adc:	4603      	mov	r3, r0
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d001      	beq.n	8010ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8010ae2:	2301      	movs	r3, #1
 8010ae4:	e00e      	b.n	8010b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	2b0f      	cmp	r3, #15
 8010aea:	d80a      	bhi.n	8010b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010aec:	2200      	movs	r2, #0
 8010aee:	6879      	ldr	r1, [r7, #4]
 8010af0:	f04f 30ff 	mov.w	r0, #4294967295
 8010af4:	f000 f92d 	bl	8010d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010af8:	4a06      	ldr	r2, [pc, #24]	; (8010b14 <HAL_InitTick+0x5c>)
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8010afe:	2300      	movs	r3, #0
 8010b00:	e000      	b.n	8010b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8010b02:	2301      	movs	r3, #1
}
 8010b04:	4618      	mov	r0, r3
 8010b06:	3708      	adds	r7, #8
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	bd80      	pop	{r7, pc}
 8010b0c:	20000000 	.word	0x20000000
 8010b10:	20000008 	.word	0x20000008
 8010b14:	20000004 	.word	0x20000004

08010b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010b18:	b480      	push	{r7}
 8010b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010b1c:	4b06      	ldr	r3, [pc, #24]	; (8010b38 <HAL_IncTick+0x20>)
 8010b1e:	781b      	ldrb	r3, [r3, #0]
 8010b20:	461a      	mov	r2, r3
 8010b22:	4b06      	ldr	r3, [pc, #24]	; (8010b3c <HAL_IncTick+0x24>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	4413      	add	r3, r2
 8010b28:	4a04      	ldr	r2, [pc, #16]	; (8010b3c <HAL_IncTick+0x24>)
 8010b2a:	6013      	str	r3, [r2, #0]
}
 8010b2c:	bf00      	nop
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b34:	4770      	bx	lr
 8010b36:	bf00      	nop
 8010b38:	20000008 	.word	0x20000008
 8010b3c:	200000d8 	.word	0x200000d8

08010b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010b40:	b480      	push	{r7}
 8010b42:	af00      	add	r7, sp, #0
  return uwTick;
 8010b44:	4b03      	ldr	r3, [pc, #12]	; (8010b54 <HAL_GetTick+0x14>)
 8010b46:	681b      	ldr	r3, [r3, #0]
}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b50:	4770      	bx	lr
 8010b52:	bf00      	nop
 8010b54:	200000d8 	.word	0x200000d8

08010b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b084      	sub	sp, #16
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010b60:	f7ff ffee 	bl	8010b40 <HAL_GetTick>
 8010b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b70:	d005      	beq.n	8010b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010b72:	4b09      	ldr	r3, [pc, #36]	; (8010b98 <HAL_Delay+0x40>)
 8010b74:	781b      	ldrb	r3, [r3, #0]
 8010b76:	461a      	mov	r2, r3
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	4413      	add	r3, r2
 8010b7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8010b7e:	bf00      	nop
 8010b80:	f7ff ffde 	bl	8010b40 <HAL_GetTick>
 8010b84:	4602      	mov	r2, r0
 8010b86:	68bb      	ldr	r3, [r7, #8]
 8010b88:	1ad3      	subs	r3, r2, r3
 8010b8a:	68fa      	ldr	r2, [r7, #12]
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d8f7      	bhi.n	8010b80 <HAL_Delay+0x28>
  {
  }
}
 8010b90:	bf00      	nop
 8010b92:	3710      	adds	r7, #16
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}
 8010b98:	20000008 	.word	0x20000008

08010b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010b9c:	b480      	push	{r7}
 8010b9e:	b085      	sub	sp, #20
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	f003 0307 	and.w	r3, r3, #7
 8010baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010bac:	4b0c      	ldr	r3, [pc, #48]	; (8010be0 <__NVIC_SetPriorityGrouping+0x44>)
 8010bae:	68db      	ldr	r3, [r3, #12]
 8010bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010bb2:	68ba      	ldr	r2, [r7, #8]
 8010bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010bb8:	4013      	ands	r3, r2
 8010bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010bce:	4a04      	ldr	r2, [pc, #16]	; (8010be0 <__NVIC_SetPriorityGrouping+0x44>)
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	60d3      	str	r3, [r2, #12]
}
 8010bd4:	bf00      	nop
 8010bd6:	3714      	adds	r7, #20
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bde:	4770      	bx	lr
 8010be0:	e000ed00 	.word	0xe000ed00

08010be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8010be4:	b480      	push	{r7}
 8010be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010be8:	4b04      	ldr	r3, [pc, #16]	; (8010bfc <__NVIC_GetPriorityGrouping+0x18>)
 8010bea:	68db      	ldr	r3, [r3, #12]
 8010bec:	0a1b      	lsrs	r3, r3, #8
 8010bee:	f003 0307 	and.w	r3, r3, #7
}
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfa:	4770      	bx	lr
 8010bfc:	e000ed00 	.word	0xe000ed00

08010c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010c00:	b480      	push	{r7}
 8010c02:	b083      	sub	sp, #12
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	4603      	mov	r3, r0
 8010c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	db0b      	blt.n	8010c2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010c12:	79fb      	ldrb	r3, [r7, #7]
 8010c14:	f003 021f 	and.w	r2, r3, #31
 8010c18:	4907      	ldr	r1, [pc, #28]	; (8010c38 <__NVIC_EnableIRQ+0x38>)
 8010c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c1e:	095b      	lsrs	r3, r3, #5
 8010c20:	2001      	movs	r0, #1
 8010c22:	fa00 f202 	lsl.w	r2, r0, r2
 8010c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8010c2a:	bf00      	nop
 8010c2c:	370c      	adds	r7, #12
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c34:	4770      	bx	lr
 8010c36:	bf00      	nop
 8010c38:	e000e100 	.word	0xe000e100

08010c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010c3c:	b480      	push	{r7}
 8010c3e:	b083      	sub	sp, #12
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	4603      	mov	r3, r0
 8010c44:	6039      	str	r1, [r7, #0]
 8010c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	db0a      	blt.n	8010c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	b2da      	uxtb	r2, r3
 8010c54:	490c      	ldr	r1, [pc, #48]	; (8010c88 <__NVIC_SetPriority+0x4c>)
 8010c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c5a:	0112      	lsls	r2, r2, #4
 8010c5c:	b2d2      	uxtb	r2, r2
 8010c5e:	440b      	add	r3, r1
 8010c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010c64:	e00a      	b.n	8010c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	b2da      	uxtb	r2, r3
 8010c6a:	4908      	ldr	r1, [pc, #32]	; (8010c8c <__NVIC_SetPriority+0x50>)
 8010c6c:	79fb      	ldrb	r3, [r7, #7]
 8010c6e:	f003 030f 	and.w	r3, r3, #15
 8010c72:	3b04      	subs	r3, #4
 8010c74:	0112      	lsls	r2, r2, #4
 8010c76:	b2d2      	uxtb	r2, r2
 8010c78:	440b      	add	r3, r1
 8010c7a:	761a      	strb	r2, [r3, #24]
}
 8010c7c:	bf00      	nop
 8010c7e:	370c      	adds	r7, #12
 8010c80:	46bd      	mov	sp, r7
 8010c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c86:	4770      	bx	lr
 8010c88:	e000e100 	.word	0xe000e100
 8010c8c:	e000ed00 	.word	0xe000ed00

08010c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010c90:	b480      	push	{r7}
 8010c92:	b089      	sub	sp, #36	; 0x24
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	60f8      	str	r0, [r7, #12]
 8010c98:	60b9      	str	r1, [r7, #8]
 8010c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	f003 0307 	and.w	r3, r3, #7
 8010ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010ca4:	69fb      	ldr	r3, [r7, #28]
 8010ca6:	f1c3 0307 	rsb	r3, r3, #7
 8010caa:	2b04      	cmp	r3, #4
 8010cac:	bf28      	it	cs
 8010cae:	2304      	movcs	r3, #4
 8010cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010cb2:	69fb      	ldr	r3, [r7, #28]
 8010cb4:	3304      	adds	r3, #4
 8010cb6:	2b06      	cmp	r3, #6
 8010cb8:	d902      	bls.n	8010cc0 <NVIC_EncodePriority+0x30>
 8010cba:	69fb      	ldr	r3, [r7, #28]
 8010cbc:	3b03      	subs	r3, #3
 8010cbe:	e000      	b.n	8010cc2 <NVIC_EncodePriority+0x32>
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8010cc8:	69bb      	ldr	r3, [r7, #24]
 8010cca:	fa02 f303 	lsl.w	r3, r2, r3
 8010cce:	43da      	mvns	r2, r3
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	401a      	ands	r2, r3
 8010cd4:	697b      	ldr	r3, [r7, #20]
 8010cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8010cdc:	697b      	ldr	r3, [r7, #20]
 8010cde:	fa01 f303 	lsl.w	r3, r1, r3
 8010ce2:	43d9      	mvns	r1, r3
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010ce8:	4313      	orrs	r3, r2
         );
}
 8010cea:	4618      	mov	r0, r3
 8010cec:	3724      	adds	r7, #36	; 0x24
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf4:	4770      	bx	lr
	...

08010cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b082      	sub	sp, #8
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	3b01      	subs	r3, #1
 8010d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010d08:	d301      	bcc.n	8010d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010d0a:	2301      	movs	r3, #1
 8010d0c:	e00f      	b.n	8010d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010d0e:	4a0a      	ldr	r2, [pc, #40]	; (8010d38 <SysTick_Config+0x40>)
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	3b01      	subs	r3, #1
 8010d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010d16:	210f      	movs	r1, #15
 8010d18:	f04f 30ff 	mov.w	r0, #4294967295
 8010d1c:	f7ff ff8e 	bl	8010c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010d20:	4b05      	ldr	r3, [pc, #20]	; (8010d38 <SysTick_Config+0x40>)
 8010d22:	2200      	movs	r2, #0
 8010d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010d26:	4b04      	ldr	r3, [pc, #16]	; (8010d38 <SysTick_Config+0x40>)
 8010d28:	2207      	movs	r2, #7
 8010d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010d2c:	2300      	movs	r3, #0
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3708      	adds	r7, #8
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}
 8010d36:	bf00      	nop
 8010d38:	e000e010 	.word	0xe000e010

08010d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b082      	sub	sp, #8
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010d44:	6878      	ldr	r0, [r7, #4]
 8010d46:	f7ff ff29 	bl	8010b9c <__NVIC_SetPriorityGrouping>
}
 8010d4a:	bf00      	nop
 8010d4c:	3708      	adds	r7, #8
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}

08010d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010d52:	b580      	push	{r7, lr}
 8010d54:	b086      	sub	sp, #24
 8010d56:	af00      	add	r7, sp, #0
 8010d58:	4603      	mov	r3, r0
 8010d5a:	60b9      	str	r1, [r7, #8]
 8010d5c:	607a      	str	r2, [r7, #4]
 8010d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010d60:	2300      	movs	r3, #0
 8010d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010d64:	f7ff ff3e 	bl	8010be4 <__NVIC_GetPriorityGrouping>
 8010d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010d6a:	687a      	ldr	r2, [r7, #4]
 8010d6c:	68b9      	ldr	r1, [r7, #8]
 8010d6e:	6978      	ldr	r0, [r7, #20]
 8010d70:	f7ff ff8e 	bl	8010c90 <NVIC_EncodePriority>
 8010d74:	4602      	mov	r2, r0
 8010d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d7a:	4611      	mov	r1, r2
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7ff ff5d 	bl	8010c3c <__NVIC_SetPriority>
}
 8010d82:	bf00      	nop
 8010d84:	3718      	adds	r7, #24
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}

08010d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010d8a:	b580      	push	{r7, lr}
 8010d8c:	b082      	sub	sp, #8
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	4603      	mov	r3, r0
 8010d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f7ff ff31 	bl	8010c00 <__NVIC_EnableIRQ>
}
 8010d9e:	bf00      	nop
 8010da0:	3708      	adds	r7, #8
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}

08010da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010da6:	b580      	push	{r7, lr}
 8010da8:	b082      	sub	sp, #8
 8010daa:	af00      	add	r7, sp, #0
 8010dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8010dae:	6878      	ldr	r0, [r7, #4]
 8010db0:	f7ff ffa2 	bl	8010cf8 <SysTick_Config>
 8010db4:	4603      	mov	r3, r0
}
 8010db6:	4618      	mov	r0, r3
 8010db8:	3708      	adds	r7, #8
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}

08010dbe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8010dbe:	b480      	push	{r7}
 8010dc0:	b083      	sub	sp, #12
 8010dc2:	af00      	add	r7, sp, #0
 8010dc4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010dcc:	b2db      	uxtb	r3, r3
 8010dce:	2b02      	cmp	r3, #2
 8010dd0:	d004      	beq.n	8010ddc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2280      	movs	r2, #128	; 0x80
 8010dd6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8010dd8:	2301      	movs	r3, #1
 8010dda:	e00c      	b.n	8010df6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2205      	movs	r2, #5
 8010de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	681a      	ldr	r2, [r3, #0]
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	f022 0201 	bic.w	r2, r2, #1
 8010df2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8010df4:	2300      	movs	r3, #0
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	370c      	adds	r7, #12
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e00:	4770      	bx	lr
	...

08010e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010e04:	b480      	push	{r7}
 8010e06:	b089      	sub	sp, #36	; 0x24
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
 8010e0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8010e0e:	2300      	movs	r3, #0
 8010e10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8010e12:	2300      	movs	r3, #0
 8010e14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8010e16:	2300      	movs	r3, #0
 8010e18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	61fb      	str	r3, [r7, #28]
 8010e1e:	e165      	b.n	80110ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8010e20:	2201      	movs	r2, #1
 8010e22:	69fb      	ldr	r3, [r7, #28]
 8010e24:	fa02 f303 	lsl.w	r3, r2, r3
 8010e28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010e2a:	683b      	ldr	r3, [r7, #0]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	697a      	ldr	r2, [r7, #20]
 8010e30:	4013      	ands	r3, r2
 8010e32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8010e34:	693a      	ldr	r2, [r7, #16]
 8010e36:	697b      	ldr	r3, [r7, #20]
 8010e38:	429a      	cmp	r2, r3
 8010e3a:	f040 8154 	bne.w	80110e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	685b      	ldr	r3, [r3, #4]
 8010e42:	2b01      	cmp	r3, #1
 8010e44:	d00b      	beq.n	8010e5e <HAL_GPIO_Init+0x5a>
 8010e46:	683b      	ldr	r3, [r7, #0]
 8010e48:	685b      	ldr	r3, [r3, #4]
 8010e4a:	2b02      	cmp	r3, #2
 8010e4c:	d007      	beq.n	8010e5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010e4e:	683b      	ldr	r3, [r7, #0]
 8010e50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010e52:	2b11      	cmp	r3, #17
 8010e54:	d003      	beq.n	8010e5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010e56:	683b      	ldr	r3, [r7, #0]
 8010e58:	685b      	ldr	r3, [r3, #4]
 8010e5a:	2b12      	cmp	r3, #18
 8010e5c:	d130      	bne.n	8010ec0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	689b      	ldr	r3, [r3, #8]
 8010e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010e64:	69fb      	ldr	r3, [r7, #28]
 8010e66:	005b      	lsls	r3, r3, #1
 8010e68:	2203      	movs	r2, #3
 8010e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8010e6e:	43db      	mvns	r3, r3
 8010e70:	69ba      	ldr	r2, [r7, #24]
 8010e72:	4013      	ands	r3, r2
 8010e74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010e76:	683b      	ldr	r3, [r7, #0]
 8010e78:	68da      	ldr	r2, [r3, #12]
 8010e7a:	69fb      	ldr	r3, [r7, #28]
 8010e7c:	005b      	lsls	r3, r3, #1
 8010e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8010e82:	69ba      	ldr	r2, [r7, #24]
 8010e84:	4313      	orrs	r3, r2
 8010e86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	69ba      	ldr	r2, [r7, #24]
 8010e8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	685b      	ldr	r3, [r3, #4]
 8010e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010e94:	2201      	movs	r2, #1
 8010e96:	69fb      	ldr	r3, [r7, #28]
 8010e98:	fa02 f303 	lsl.w	r3, r2, r3
 8010e9c:	43db      	mvns	r3, r3
 8010e9e:	69ba      	ldr	r2, [r7, #24]
 8010ea0:	4013      	ands	r3, r2
 8010ea2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8010ea4:	683b      	ldr	r3, [r7, #0]
 8010ea6:	685b      	ldr	r3, [r3, #4]
 8010ea8:	091b      	lsrs	r3, r3, #4
 8010eaa:	f003 0201 	and.w	r2, r3, #1
 8010eae:	69fb      	ldr	r3, [r7, #28]
 8010eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8010eb4:	69ba      	ldr	r2, [r7, #24]
 8010eb6:	4313      	orrs	r3, r2
 8010eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	69ba      	ldr	r2, [r7, #24]
 8010ebe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	68db      	ldr	r3, [r3, #12]
 8010ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8010ec6:	69fb      	ldr	r3, [r7, #28]
 8010ec8:	005b      	lsls	r3, r3, #1
 8010eca:	2203      	movs	r2, #3
 8010ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8010ed0:	43db      	mvns	r3, r3
 8010ed2:	69ba      	ldr	r2, [r7, #24]
 8010ed4:	4013      	ands	r3, r2
 8010ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	689a      	ldr	r2, [r3, #8]
 8010edc:	69fb      	ldr	r3, [r7, #28]
 8010ede:	005b      	lsls	r3, r3, #1
 8010ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8010ee4:	69ba      	ldr	r2, [r7, #24]
 8010ee6:	4313      	orrs	r3, r2
 8010ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	69ba      	ldr	r2, [r7, #24]
 8010eee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	685b      	ldr	r3, [r3, #4]
 8010ef4:	2b02      	cmp	r3, #2
 8010ef6:	d003      	beq.n	8010f00 <HAL_GPIO_Init+0xfc>
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	685b      	ldr	r3, [r3, #4]
 8010efc:	2b12      	cmp	r3, #18
 8010efe:	d123      	bne.n	8010f48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010f00:	69fb      	ldr	r3, [r7, #28]
 8010f02:	08da      	lsrs	r2, r3, #3
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	3208      	adds	r2, #8
 8010f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8010f0e:	69fb      	ldr	r3, [r7, #28]
 8010f10:	f003 0307 	and.w	r3, r3, #7
 8010f14:	009b      	lsls	r3, r3, #2
 8010f16:	220f      	movs	r2, #15
 8010f18:	fa02 f303 	lsl.w	r3, r2, r3
 8010f1c:	43db      	mvns	r3, r3
 8010f1e:	69ba      	ldr	r2, [r7, #24]
 8010f20:	4013      	ands	r3, r2
 8010f22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	691a      	ldr	r2, [r3, #16]
 8010f28:	69fb      	ldr	r3, [r7, #28]
 8010f2a:	f003 0307 	and.w	r3, r3, #7
 8010f2e:	009b      	lsls	r3, r3, #2
 8010f30:	fa02 f303 	lsl.w	r3, r2, r3
 8010f34:	69ba      	ldr	r2, [r7, #24]
 8010f36:	4313      	orrs	r3, r2
 8010f38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8010f3a:	69fb      	ldr	r3, [r7, #28]
 8010f3c:	08da      	lsrs	r2, r3, #3
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	3208      	adds	r2, #8
 8010f42:	69b9      	ldr	r1, [r7, #24]
 8010f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8010f4e:	69fb      	ldr	r3, [r7, #28]
 8010f50:	005b      	lsls	r3, r3, #1
 8010f52:	2203      	movs	r2, #3
 8010f54:	fa02 f303 	lsl.w	r3, r2, r3
 8010f58:	43db      	mvns	r3, r3
 8010f5a:	69ba      	ldr	r2, [r7, #24]
 8010f5c:	4013      	ands	r3, r2
 8010f5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010f60:	683b      	ldr	r3, [r7, #0]
 8010f62:	685b      	ldr	r3, [r3, #4]
 8010f64:	f003 0203 	and.w	r2, r3, #3
 8010f68:	69fb      	ldr	r3, [r7, #28]
 8010f6a:	005b      	lsls	r3, r3, #1
 8010f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8010f70:	69ba      	ldr	r2, [r7, #24]
 8010f72:	4313      	orrs	r3, r2
 8010f74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	69ba      	ldr	r2, [r7, #24]
 8010f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	685b      	ldr	r3, [r3, #4]
 8010f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	f000 80ae 	beq.w	80110e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	60fb      	str	r3, [r7, #12]
 8010f8e:	4b5c      	ldr	r3, [pc, #368]	; (8011100 <HAL_GPIO_Init+0x2fc>)
 8010f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f92:	4a5b      	ldr	r2, [pc, #364]	; (8011100 <HAL_GPIO_Init+0x2fc>)
 8010f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010f98:	6453      	str	r3, [r2, #68]	; 0x44
 8010f9a:	4b59      	ldr	r3, [pc, #356]	; (8011100 <HAL_GPIO_Init+0x2fc>)
 8010f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010fa2:	60fb      	str	r3, [r7, #12]
 8010fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8010fa6:	4a57      	ldr	r2, [pc, #348]	; (8011104 <HAL_GPIO_Init+0x300>)
 8010fa8:	69fb      	ldr	r3, [r7, #28]
 8010faa:	089b      	lsrs	r3, r3, #2
 8010fac:	3302      	adds	r3, #2
 8010fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8010fb4:	69fb      	ldr	r3, [r7, #28]
 8010fb6:	f003 0303 	and.w	r3, r3, #3
 8010fba:	009b      	lsls	r3, r3, #2
 8010fbc:	220f      	movs	r2, #15
 8010fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8010fc2:	43db      	mvns	r3, r3
 8010fc4:	69ba      	ldr	r2, [r7, #24]
 8010fc6:	4013      	ands	r3, r2
 8010fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	4a4e      	ldr	r2, [pc, #312]	; (8011108 <HAL_GPIO_Init+0x304>)
 8010fce:	4293      	cmp	r3, r2
 8010fd0:	d025      	beq.n	801101e <HAL_GPIO_Init+0x21a>
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	4a4d      	ldr	r2, [pc, #308]	; (801110c <HAL_GPIO_Init+0x308>)
 8010fd6:	4293      	cmp	r3, r2
 8010fd8:	d01f      	beq.n	801101a <HAL_GPIO_Init+0x216>
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	4a4c      	ldr	r2, [pc, #304]	; (8011110 <HAL_GPIO_Init+0x30c>)
 8010fde:	4293      	cmp	r3, r2
 8010fe0:	d019      	beq.n	8011016 <HAL_GPIO_Init+0x212>
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	4a4b      	ldr	r2, [pc, #300]	; (8011114 <HAL_GPIO_Init+0x310>)
 8010fe6:	4293      	cmp	r3, r2
 8010fe8:	d013      	beq.n	8011012 <HAL_GPIO_Init+0x20e>
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	4a4a      	ldr	r2, [pc, #296]	; (8011118 <HAL_GPIO_Init+0x314>)
 8010fee:	4293      	cmp	r3, r2
 8010ff0:	d00d      	beq.n	801100e <HAL_GPIO_Init+0x20a>
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	4a49      	ldr	r2, [pc, #292]	; (801111c <HAL_GPIO_Init+0x318>)
 8010ff6:	4293      	cmp	r3, r2
 8010ff8:	d007      	beq.n	801100a <HAL_GPIO_Init+0x206>
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	4a48      	ldr	r2, [pc, #288]	; (8011120 <HAL_GPIO_Init+0x31c>)
 8010ffe:	4293      	cmp	r3, r2
 8011000:	d101      	bne.n	8011006 <HAL_GPIO_Init+0x202>
 8011002:	2306      	movs	r3, #6
 8011004:	e00c      	b.n	8011020 <HAL_GPIO_Init+0x21c>
 8011006:	2307      	movs	r3, #7
 8011008:	e00a      	b.n	8011020 <HAL_GPIO_Init+0x21c>
 801100a:	2305      	movs	r3, #5
 801100c:	e008      	b.n	8011020 <HAL_GPIO_Init+0x21c>
 801100e:	2304      	movs	r3, #4
 8011010:	e006      	b.n	8011020 <HAL_GPIO_Init+0x21c>
 8011012:	2303      	movs	r3, #3
 8011014:	e004      	b.n	8011020 <HAL_GPIO_Init+0x21c>
 8011016:	2302      	movs	r3, #2
 8011018:	e002      	b.n	8011020 <HAL_GPIO_Init+0x21c>
 801101a:	2301      	movs	r3, #1
 801101c:	e000      	b.n	8011020 <HAL_GPIO_Init+0x21c>
 801101e:	2300      	movs	r3, #0
 8011020:	69fa      	ldr	r2, [r7, #28]
 8011022:	f002 0203 	and.w	r2, r2, #3
 8011026:	0092      	lsls	r2, r2, #2
 8011028:	4093      	lsls	r3, r2
 801102a:	69ba      	ldr	r2, [r7, #24]
 801102c:	4313      	orrs	r3, r2
 801102e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011030:	4934      	ldr	r1, [pc, #208]	; (8011104 <HAL_GPIO_Init+0x300>)
 8011032:	69fb      	ldr	r3, [r7, #28]
 8011034:	089b      	lsrs	r3, r3, #2
 8011036:	3302      	adds	r3, #2
 8011038:	69ba      	ldr	r2, [r7, #24]
 801103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801103e:	4b39      	ldr	r3, [pc, #228]	; (8011124 <HAL_GPIO_Init+0x320>)
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	43db      	mvns	r3, r3
 8011048:	69ba      	ldr	r2, [r7, #24]
 801104a:	4013      	ands	r3, r2
 801104c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	685b      	ldr	r3, [r3, #4]
 8011052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011056:	2b00      	cmp	r3, #0
 8011058:	d003      	beq.n	8011062 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 801105a:	69ba      	ldr	r2, [r7, #24]
 801105c:	693b      	ldr	r3, [r7, #16]
 801105e:	4313      	orrs	r3, r2
 8011060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8011062:	4a30      	ldr	r2, [pc, #192]	; (8011124 <HAL_GPIO_Init+0x320>)
 8011064:	69bb      	ldr	r3, [r7, #24]
 8011066:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8011068:	4b2e      	ldr	r3, [pc, #184]	; (8011124 <HAL_GPIO_Init+0x320>)
 801106a:	685b      	ldr	r3, [r3, #4]
 801106c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	43db      	mvns	r3, r3
 8011072:	69ba      	ldr	r2, [r7, #24]
 8011074:	4013      	ands	r3, r2
 8011076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	685b      	ldr	r3, [r3, #4]
 801107c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011080:	2b00      	cmp	r3, #0
 8011082:	d003      	beq.n	801108c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8011084:	69ba      	ldr	r2, [r7, #24]
 8011086:	693b      	ldr	r3, [r7, #16]
 8011088:	4313      	orrs	r3, r2
 801108a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801108c:	4a25      	ldr	r2, [pc, #148]	; (8011124 <HAL_GPIO_Init+0x320>)
 801108e:	69bb      	ldr	r3, [r7, #24]
 8011090:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011092:	4b24      	ldr	r3, [pc, #144]	; (8011124 <HAL_GPIO_Init+0x320>)
 8011094:	689b      	ldr	r3, [r3, #8]
 8011096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011098:	693b      	ldr	r3, [r7, #16]
 801109a:	43db      	mvns	r3, r3
 801109c:	69ba      	ldr	r2, [r7, #24]
 801109e:	4013      	ands	r3, r2
 80110a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	685b      	ldr	r3, [r3, #4]
 80110a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d003      	beq.n	80110b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80110ae:	69ba      	ldr	r2, [r7, #24]
 80110b0:	693b      	ldr	r3, [r7, #16]
 80110b2:	4313      	orrs	r3, r2
 80110b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80110b6:	4a1b      	ldr	r2, [pc, #108]	; (8011124 <HAL_GPIO_Init+0x320>)
 80110b8:	69bb      	ldr	r3, [r7, #24]
 80110ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80110bc:	4b19      	ldr	r3, [pc, #100]	; (8011124 <HAL_GPIO_Init+0x320>)
 80110be:	68db      	ldr	r3, [r3, #12]
 80110c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80110c2:	693b      	ldr	r3, [r7, #16]
 80110c4:	43db      	mvns	r3, r3
 80110c6:	69ba      	ldr	r2, [r7, #24]
 80110c8:	4013      	ands	r3, r2
 80110ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	685b      	ldr	r3, [r3, #4]
 80110d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d003      	beq.n	80110e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80110d8:	69ba      	ldr	r2, [r7, #24]
 80110da:	693b      	ldr	r3, [r7, #16]
 80110dc:	4313      	orrs	r3, r2
 80110de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80110e0:	4a10      	ldr	r2, [pc, #64]	; (8011124 <HAL_GPIO_Init+0x320>)
 80110e2:	69bb      	ldr	r3, [r7, #24]
 80110e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80110e6:	69fb      	ldr	r3, [r7, #28]
 80110e8:	3301      	adds	r3, #1
 80110ea:	61fb      	str	r3, [r7, #28]
 80110ec:	69fb      	ldr	r3, [r7, #28]
 80110ee:	2b0f      	cmp	r3, #15
 80110f0:	f67f ae96 	bls.w	8010e20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80110f4:	bf00      	nop
 80110f6:	3724      	adds	r7, #36	; 0x24
 80110f8:	46bd      	mov	sp, r7
 80110fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fe:	4770      	bx	lr
 8011100:	40023800 	.word	0x40023800
 8011104:	40013800 	.word	0x40013800
 8011108:	40020000 	.word	0x40020000
 801110c:	40020400 	.word	0x40020400
 8011110:	40020800 	.word	0x40020800
 8011114:	40020c00 	.word	0x40020c00
 8011118:	40021000 	.word	0x40021000
 801111c:	40021400 	.word	0x40021400
 8011120:	40021800 	.word	0x40021800
 8011124:	40013c00 	.word	0x40013c00

08011128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011128:	b480      	push	{r7}
 801112a:	b083      	sub	sp, #12
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	460b      	mov	r3, r1
 8011132:	807b      	strh	r3, [r7, #2]
 8011134:	4613      	mov	r3, r2
 8011136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011138:	787b      	ldrb	r3, [r7, #1]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d003      	beq.n	8011146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801113e:	887a      	ldrh	r2, [r7, #2]
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8011144:	e003      	b.n	801114e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8011146:	887b      	ldrh	r3, [r7, #2]
 8011148:	041a      	lsls	r2, r3, #16
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	619a      	str	r2, [r3, #24]
}
 801114e:	bf00      	nop
 8011150:	370c      	adds	r7, #12
 8011152:	46bd      	mov	sp, r7
 8011154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011158:	4770      	bx	lr

0801115a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801115a:	b480      	push	{r7}
 801115c:	b083      	sub	sp, #12
 801115e:	af00      	add	r7, sp, #0
 8011160:	6078      	str	r0, [r7, #4]
 8011162:	460b      	mov	r3, r1
 8011164:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	695a      	ldr	r2, [r3, #20]
 801116a:	887b      	ldrh	r3, [r7, #2]
 801116c:	401a      	ands	r2, r3
 801116e:	887b      	ldrh	r3, [r7, #2]
 8011170:	429a      	cmp	r2, r3
 8011172:	d104      	bne.n	801117e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8011174:	887b      	ldrh	r3, [r7, #2]
 8011176:	041a      	lsls	r2, r3, #16
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 801117c:	e002      	b.n	8011184 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 801117e:	887a      	ldrh	r2, [r7, #2]
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	619a      	str	r2, [r3, #24]
}
 8011184:	bf00      	nop
 8011186:	370c      	adds	r7, #12
 8011188:	46bd      	mov	sp, r7
 801118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118e:	4770      	bx	lr

08011190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b084      	sub	sp, #16
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
 8011198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d101      	bne.n	80111a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80111a0:	2301      	movs	r3, #1
 80111a2:	e0cc      	b.n	801133e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80111a4:	4b68      	ldr	r3, [pc, #416]	; (8011348 <HAL_RCC_ClockConfig+0x1b8>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	f003 030f 	and.w	r3, r3, #15
 80111ac:	683a      	ldr	r2, [r7, #0]
 80111ae:	429a      	cmp	r2, r3
 80111b0:	d90c      	bls.n	80111cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80111b2:	4b65      	ldr	r3, [pc, #404]	; (8011348 <HAL_RCC_ClockConfig+0x1b8>)
 80111b4:	683a      	ldr	r2, [r7, #0]
 80111b6:	b2d2      	uxtb	r2, r2
 80111b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80111ba:	4b63      	ldr	r3, [pc, #396]	; (8011348 <HAL_RCC_ClockConfig+0x1b8>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	f003 030f 	and.w	r3, r3, #15
 80111c2:	683a      	ldr	r2, [r7, #0]
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d001      	beq.n	80111cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80111c8:	2301      	movs	r3, #1
 80111ca:	e0b8      	b.n	801133e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	f003 0302 	and.w	r3, r3, #2
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d020      	beq.n	801121a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	f003 0304 	and.w	r3, r3, #4
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d005      	beq.n	80111f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80111e4:	4b59      	ldr	r3, [pc, #356]	; (801134c <HAL_RCC_ClockConfig+0x1bc>)
 80111e6:	689b      	ldr	r3, [r3, #8]
 80111e8:	4a58      	ldr	r2, [pc, #352]	; (801134c <HAL_RCC_ClockConfig+0x1bc>)
 80111ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80111ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	f003 0308 	and.w	r3, r3, #8
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d005      	beq.n	8011208 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80111fc:	4b53      	ldr	r3, [pc, #332]	; (801134c <HAL_RCC_ClockConfig+0x1bc>)
 80111fe:	689b      	ldr	r3, [r3, #8]
 8011200:	4a52      	ldr	r2, [pc, #328]	; (801134c <HAL_RCC_ClockConfig+0x1bc>)
 8011202:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8011206:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011208:	4b50      	ldr	r3, [pc, #320]	; (801134c <HAL_RCC_ClockConfig+0x1bc>)
 801120a:	689b      	ldr	r3, [r3, #8]
 801120c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	689b      	ldr	r3, [r3, #8]
 8011214:	494d      	ldr	r1, [pc, #308]	; (801134c <HAL_RCC_ClockConfig+0x1bc>)
 8011216:	4313      	orrs	r3, r2
 8011218:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	f003 0301 	and.w	r3, r3, #1
 8011222:	2b00      	cmp	r3, #0
 8011224:	d044      	beq.n	80112b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	685b      	ldr	r3, [r3, #4]
 801122a:	2b01      	cmp	r3, #1
 801122c:	d107      	bne.n	801123e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801122e:	4b47      	ldr	r3, [pc, #284]	; (801134c <HAL_RCC_ClockConfig+0x1bc>)
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011236:	2b00      	cmp	r3, #0
 8011238:	d119      	bne.n	801126e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801123a:	2301      	movs	r3, #1
 801123c:	e07f      	b.n	801133e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	685b      	ldr	r3, [r3, #4]
 8011242:	2b02      	cmp	r3, #2
 8011244:	d003      	beq.n	801124e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801124a:	2b03      	cmp	r3, #3
 801124c:	d107      	bne.n	801125e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801124e:	4b3f      	ldr	r3, [pc, #252]	; (801134c <HAL_RCC_ClockConfig+0x1bc>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011256:	2b00      	cmp	r3, #0
 8011258:	d109      	bne.n	801126e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801125a:	2301      	movs	r3, #1
 801125c:	e06f      	b.n	801133e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801125e:	4b3b      	ldr	r3, [pc, #236]	; (801134c <HAL_RCC_ClockConfig+0x1bc>)
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	f003 0302 	and.w	r3, r3, #2
 8011266:	2b00      	cmp	r3, #0
 8011268:	d101      	bne.n	801126e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801126a:	2301      	movs	r3, #1
 801126c:	e067      	b.n	801133e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801126e:	4b37      	ldr	r3, [pc, #220]	; (801134c <HAL_RCC_ClockConfig+0x1bc>)
 8011270:	689b      	ldr	r3, [r3, #8]
 8011272:	f023 0203 	bic.w	r2, r3, #3
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	685b      	ldr	r3, [r3, #4]
 801127a:	4934      	ldr	r1, [pc, #208]	; (801134c <HAL_RCC_ClockConfig+0x1bc>)
 801127c:	4313      	orrs	r3, r2
 801127e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011280:	f7ff fc5e 	bl	8010b40 <HAL_GetTick>
 8011284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011286:	e00a      	b.n	801129e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011288:	f7ff fc5a 	bl	8010b40 <HAL_GetTick>
 801128c:	4602      	mov	r2, r0
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	1ad3      	subs	r3, r2, r3
 8011292:	f241 3288 	movw	r2, #5000	; 0x1388
 8011296:	4293      	cmp	r3, r2
 8011298:	d901      	bls.n	801129e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801129a:	2303      	movs	r3, #3
 801129c:	e04f      	b.n	801133e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801129e:	4b2b      	ldr	r3, [pc, #172]	; (801134c <HAL_RCC_ClockConfig+0x1bc>)
 80112a0:	689b      	ldr	r3, [r3, #8]
 80112a2:	f003 020c 	and.w	r2, r3, #12
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	685b      	ldr	r3, [r3, #4]
 80112aa:	009b      	lsls	r3, r3, #2
 80112ac:	429a      	cmp	r2, r3
 80112ae:	d1eb      	bne.n	8011288 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80112b0:	4b25      	ldr	r3, [pc, #148]	; (8011348 <HAL_RCC_ClockConfig+0x1b8>)
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	f003 030f 	and.w	r3, r3, #15
 80112b8:	683a      	ldr	r2, [r7, #0]
 80112ba:	429a      	cmp	r2, r3
 80112bc:	d20c      	bcs.n	80112d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80112be:	4b22      	ldr	r3, [pc, #136]	; (8011348 <HAL_RCC_ClockConfig+0x1b8>)
 80112c0:	683a      	ldr	r2, [r7, #0]
 80112c2:	b2d2      	uxtb	r2, r2
 80112c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80112c6:	4b20      	ldr	r3, [pc, #128]	; (8011348 <HAL_RCC_ClockConfig+0x1b8>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	f003 030f 	and.w	r3, r3, #15
 80112ce:	683a      	ldr	r2, [r7, #0]
 80112d0:	429a      	cmp	r2, r3
 80112d2:	d001      	beq.n	80112d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80112d4:	2301      	movs	r3, #1
 80112d6:	e032      	b.n	801133e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	f003 0304 	and.w	r3, r3, #4
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d008      	beq.n	80112f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80112e4:	4b19      	ldr	r3, [pc, #100]	; (801134c <HAL_RCC_ClockConfig+0x1bc>)
 80112e6:	689b      	ldr	r3, [r3, #8]
 80112e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	68db      	ldr	r3, [r3, #12]
 80112f0:	4916      	ldr	r1, [pc, #88]	; (801134c <HAL_RCC_ClockConfig+0x1bc>)
 80112f2:	4313      	orrs	r3, r2
 80112f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	f003 0308 	and.w	r3, r3, #8
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d009      	beq.n	8011316 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011302:	4b12      	ldr	r3, [pc, #72]	; (801134c <HAL_RCC_ClockConfig+0x1bc>)
 8011304:	689b      	ldr	r3, [r3, #8]
 8011306:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	691b      	ldr	r3, [r3, #16]
 801130e:	00db      	lsls	r3, r3, #3
 8011310:	490e      	ldr	r1, [pc, #56]	; (801134c <HAL_RCC_ClockConfig+0x1bc>)
 8011312:	4313      	orrs	r3, r2
 8011314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011316:	f000 f821 	bl	801135c <HAL_RCC_GetSysClockFreq>
 801131a:	4601      	mov	r1, r0
 801131c:	4b0b      	ldr	r3, [pc, #44]	; (801134c <HAL_RCC_ClockConfig+0x1bc>)
 801131e:	689b      	ldr	r3, [r3, #8]
 8011320:	091b      	lsrs	r3, r3, #4
 8011322:	f003 030f 	and.w	r3, r3, #15
 8011326:	4a0a      	ldr	r2, [pc, #40]	; (8011350 <HAL_RCC_ClockConfig+0x1c0>)
 8011328:	5cd3      	ldrb	r3, [r2, r3]
 801132a:	fa21 f303 	lsr.w	r3, r1, r3
 801132e:	4a09      	ldr	r2, [pc, #36]	; (8011354 <HAL_RCC_ClockConfig+0x1c4>)
 8011330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8011332:	4b09      	ldr	r3, [pc, #36]	; (8011358 <HAL_RCC_ClockConfig+0x1c8>)
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	4618      	mov	r0, r3
 8011338:	f7ff fbbe 	bl	8010ab8 <HAL_InitTick>

  return HAL_OK;
 801133c:	2300      	movs	r3, #0
}
 801133e:	4618      	mov	r0, r3
 8011340:	3710      	adds	r7, #16
 8011342:	46bd      	mov	sp, r7
 8011344:	bd80      	pop	{r7, pc}
 8011346:	bf00      	nop
 8011348:	40023c00 	.word	0x40023c00
 801134c:	40023800 	.word	0x40023800
 8011350:	08013134 	.word	0x08013134
 8011354:	20000000 	.word	0x20000000
 8011358:	20000004 	.word	0x20000004

0801135c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801135c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801135e:	b085      	sub	sp, #20
 8011360:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8011362:	2300      	movs	r3, #0
 8011364:	607b      	str	r3, [r7, #4]
 8011366:	2300      	movs	r3, #0
 8011368:	60fb      	str	r3, [r7, #12]
 801136a:	2300      	movs	r3, #0
 801136c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 801136e:	2300      	movs	r3, #0
 8011370:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011372:	4b63      	ldr	r3, [pc, #396]	; (8011500 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011374:	689b      	ldr	r3, [r3, #8]
 8011376:	f003 030c 	and.w	r3, r3, #12
 801137a:	2b04      	cmp	r3, #4
 801137c:	d007      	beq.n	801138e <HAL_RCC_GetSysClockFreq+0x32>
 801137e:	2b08      	cmp	r3, #8
 8011380:	d008      	beq.n	8011394 <HAL_RCC_GetSysClockFreq+0x38>
 8011382:	2b00      	cmp	r3, #0
 8011384:	f040 80b4 	bne.w	80114f0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8011388:	4b5e      	ldr	r3, [pc, #376]	; (8011504 <HAL_RCC_GetSysClockFreq+0x1a8>)
 801138a:	60bb      	str	r3, [r7, #8]
       break;
 801138c:	e0b3      	b.n	80114f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801138e:	4b5e      	ldr	r3, [pc, #376]	; (8011508 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8011390:	60bb      	str	r3, [r7, #8]
      break;
 8011392:	e0b0      	b.n	80114f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8011394:	4b5a      	ldr	r3, [pc, #360]	; (8011500 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011396:	685b      	ldr	r3, [r3, #4]
 8011398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801139c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801139e:	4b58      	ldr	r3, [pc, #352]	; (8011500 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d04a      	beq.n	8011440 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80113aa:	4b55      	ldr	r3, [pc, #340]	; (8011500 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80113ac:	685b      	ldr	r3, [r3, #4]
 80113ae:	099b      	lsrs	r3, r3, #6
 80113b0:	f04f 0400 	mov.w	r4, #0
 80113b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80113b8:	f04f 0200 	mov.w	r2, #0
 80113bc:	ea03 0501 	and.w	r5, r3, r1
 80113c0:	ea04 0602 	and.w	r6, r4, r2
 80113c4:	4629      	mov	r1, r5
 80113c6:	4632      	mov	r2, r6
 80113c8:	f04f 0300 	mov.w	r3, #0
 80113cc:	f04f 0400 	mov.w	r4, #0
 80113d0:	0154      	lsls	r4, r2, #5
 80113d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80113d6:	014b      	lsls	r3, r1, #5
 80113d8:	4619      	mov	r1, r3
 80113da:	4622      	mov	r2, r4
 80113dc:	1b49      	subs	r1, r1, r5
 80113de:	eb62 0206 	sbc.w	r2, r2, r6
 80113e2:	f04f 0300 	mov.w	r3, #0
 80113e6:	f04f 0400 	mov.w	r4, #0
 80113ea:	0194      	lsls	r4, r2, #6
 80113ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80113f0:	018b      	lsls	r3, r1, #6
 80113f2:	1a5b      	subs	r3, r3, r1
 80113f4:	eb64 0402 	sbc.w	r4, r4, r2
 80113f8:	f04f 0100 	mov.w	r1, #0
 80113fc:	f04f 0200 	mov.w	r2, #0
 8011400:	00e2      	lsls	r2, r4, #3
 8011402:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8011406:	00d9      	lsls	r1, r3, #3
 8011408:	460b      	mov	r3, r1
 801140a:	4614      	mov	r4, r2
 801140c:	195b      	adds	r3, r3, r5
 801140e:	eb44 0406 	adc.w	r4, r4, r6
 8011412:	f04f 0100 	mov.w	r1, #0
 8011416:	f04f 0200 	mov.w	r2, #0
 801141a:	0262      	lsls	r2, r4, #9
 801141c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8011420:	0259      	lsls	r1, r3, #9
 8011422:	460b      	mov	r3, r1
 8011424:	4614      	mov	r4, r2
 8011426:	4618      	mov	r0, r3
 8011428:	4621      	mov	r1, r4
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	f04f 0400 	mov.w	r4, #0
 8011430:	461a      	mov	r2, r3
 8011432:	4623      	mov	r3, r4
 8011434:	f7fe fee6 	bl	8010204 <__aeabi_uldivmod>
 8011438:	4603      	mov	r3, r0
 801143a:	460c      	mov	r4, r1
 801143c:	60fb      	str	r3, [r7, #12]
 801143e:	e049      	b.n	80114d4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011440:	4b2f      	ldr	r3, [pc, #188]	; (8011500 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011442:	685b      	ldr	r3, [r3, #4]
 8011444:	099b      	lsrs	r3, r3, #6
 8011446:	f04f 0400 	mov.w	r4, #0
 801144a:	f240 11ff 	movw	r1, #511	; 0x1ff
 801144e:	f04f 0200 	mov.w	r2, #0
 8011452:	ea03 0501 	and.w	r5, r3, r1
 8011456:	ea04 0602 	and.w	r6, r4, r2
 801145a:	4629      	mov	r1, r5
 801145c:	4632      	mov	r2, r6
 801145e:	f04f 0300 	mov.w	r3, #0
 8011462:	f04f 0400 	mov.w	r4, #0
 8011466:	0154      	lsls	r4, r2, #5
 8011468:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 801146c:	014b      	lsls	r3, r1, #5
 801146e:	4619      	mov	r1, r3
 8011470:	4622      	mov	r2, r4
 8011472:	1b49      	subs	r1, r1, r5
 8011474:	eb62 0206 	sbc.w	r2, r2, r6
 8011478:	f04f 0300 	mov.w	r3, #0
 801147c:	f04f 0400 	mov.w	r4, #0
 8011480:	0194      	lsls	r4, r2, #6
 8011482:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8011486:	018b      	lsls	r3, r1, #6
 8011488:	1a5b      	subs	r3, r3, r1
 801148a:	eb64 0402 	sbc.w	r4, r4, r2
 801148e:	f04f 0100 	mov.w	r1, #0
 8011492:	f04f 0200 	mov.w	r2, #0
 8011496:	00e2      	lsls	r2, r4, #3
 8011498:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 801149c:	00d9      	lsls	r1, r3, #3
 801149e:	460b      	mov	r3, r1
 80114a0:	4614      	mov	r4, r2
 80114a2:	195b      	adds	r3, r3, r5
 80114a4:	eb44 0406 	adc.w	r4, r4, r6
 80114a8:	f04f 0100 	mov.w	r1, #0
 80114ac:	f04f 0200 	mov.w	r2, #0
 80114b0:	02a2      	lsls	r2, r4, #10
 80114b2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80114b6:	0299      	lsls	r1, r3, #10
 80114b8:	460b      	mov	r3, r1
 80114ba:	4614      	mov	r4, r2
 80114bc:	4618      	mov	r0, r3
 80114be:	4621      	mov	r1, r4
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f04f 0400 	mov.w	r4, #0
 80114c6:	461a      	mov	r2, r3
 80114c8:	4623      	mov	r3, r4
 80114ca:	f7fe fe9b 	bl	8010204 <__aeabi_uldivmod>
 80114ce:	4603      	mov	r3, r0
 80114d0:	460c      	mov	r4, r1
 80114d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80114d4:	4b0a      	ldr	r3, [pc, #40]	; (8011500 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80114d6:	685b      	ldr	r3, [r3, #4]
 80114d8:	0c1b      	lsrs	r3, r3, #16
 80114da:	f003 0303 	and.w	r3, r3, #3
 80114de:	3301      	adds	r3, #1
 80114e0:	005b      	lsls	r3, r3, #1
 80114e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80114e4:	68fa      	ldr	r2, [r7, #12]
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80114ec:	60bb      	str	r3, [r7, #8]
      break;
 80114ee:	e002      	b.n	80114f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80114f0:	4b04      	ldr	r3, [pc, #16]	; (8011504 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80114f2:	60bb      	str	r3, [r7, #8]
      break;
 80114f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80114f6:	68bb      	ldr	r3, [r7, #8]
}
 80114f8:	4618      	mov	r0, r3
 80114fa:	3714      	adds	r7, #20
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011500:	40023800 	.word	0x40023800
 8011504:	00f42400 	.word	0x00f42400
 8011508:	007a1200 	.word	0x007a1200

0801150c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801150c:	b480      	push	{r7}
 801150e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8011510:	4b03      	ldr	r3, [pc, #12]	; (8011520 <HAL_RCC_GetHCLKFreq+0x14>)
 8011512:	681b      	ldr	r3, [r3, #0]
}
 8011514:	4618      	mov	r0, r3
 8011516:	46bd      	mov	sp, r7
 8011518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151c:	4770      	bx	lr
 801151e:	bf00      	nop
 8011520:	20000000 	.word	0x20000000

08011524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8011528:	f7ff fff0 	bl	801150c <HAL_RCC_GetHCLKFreq>
 801152c:	4601      	mov	r1, r0
 801152e:	4b05      	ldr	r3, [pc, #20]	; (8011544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8011530:	689b      	ldr	r3, [r3, #8]
 8011532:	0a9b      	lsrs	r3, r3, #10
 8011534:	f003 0307 	and.w	r3, r3, #7
 8011538:	4a03      	ldr	r2, [pc, #12]	; (8011548 <HAL_RCC_GetPCLK1Freq+0x24>)
 801153a:	5cd3      	ldrb	r3, [r2, r3]
 801153c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8011540:	4618      	mov	r0, r3
 8011542:	bd80      	pop	{r7, pc}
 8011544:	40023800 	.word	0x40023800
 8011548:	08013144 	.word	0x08013144

0801154c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8011550:	f7ff ffdc 	bl	801150c <HAL_RCC_GetHCLKFreq>
 8011554:	4601      	mov	r1, r0
 8011556:	4b05      	ldr	r3, [pc, #20]	; (801156c <HAL_RCC_GetPCLK2Freq+0x20>)
 8011558:	689b      	ldr	r3, [r3, #8]
 801155a:	0b5b      	lsrs	r3, r3, #13
 801155c:	f003 0307 	and.w	r3, r3, #7
 8011560:	4a03      	ldr	r2, [pc, #12]	; (8011570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011562:	5cd3      	ldrb	r3, [r2, r3]
 8011564:	fa21 f303 	lsr.w	r3, r1, r3
}
 8011568:	4618      	mov	r0, r3
 801156a:	bd80      	pop	{r7, pc}
 801156c:	40023800 	.word	0x40023800
 8011570:	08013144 	.word	0x08013144

08011574 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b086      	sub	sp, #24
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801157c:	2300      	movs	r3, #0
 801157e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	f003 0301 	and.w	r3, r3, #1
 8011588:	2b00      	cmp	r3, #0
 801158a:	d075      	beq.n	8011678 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801158c:	4ba2      	ldr	r3, [pc, #648]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 801158e:	689b      	ldr	r3, [r3, #8]
 8011590:	f003 030c 	and.w	r3, r3, #12
 8011594:	2b04      	cmp	r3, #4
 8011596:	d00c      	beq.n	80115b2 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011598:	4b9f      	ldr	r3, [pc, #636]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 801159a:	689b      	ldr	r3, [r3, #8]
 801159c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80115a0:	2b08      	cmp	r3, #8
 80115a2:	d112      	bne.n	80115ca <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80115a4:	4b9c      	ldr	r3, [pc, #624]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 80115a6:	685b      	ldr	r3, [r3, #4]
 80115a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80115ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80115b0:	d10b      	bne.n	80115ca <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80115b2:	4b99      	ldr	r3, [pc, #612]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d05b      	beq.n	8011676 <HAL_RCC_OscConfig+0x102>
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	685b      	ldr	r3, [r3, #4]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d157      	bne.n	8011676 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80115c6:	2301      	movs	r3, #1
 80115c8:	e20b      	b.n	80119e2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	685b      	ldr	r3, [r3, #4]
 80115ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80115d2:	d106      	bne.n	80115e2 <HAL_RCC_OscConfig+0x6e>
 80115d4:	4b90      	ldr	r3, [pc, #576]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	4a8f      	ldr	r2, [pc, #572]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 80115da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80115de:	6013      	str	r3, [r2, #0]
 80115e0:	e01d      	b.n	801161e <HAL_RCC_OscConfig+0xaa>
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	685b      	ldr	r3, [r3, #4]
 80115e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80115ea:	d10c      	bne.n	8011606 <HAL_RCC_OscConfig+0x92>
 80115ec:	4b8a      	ldr	r3, [pc, #552]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	4a89      	ldr	r2, [pc, #548]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 80115f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80115f6:	6013      	str	r3, [r2, #0]
 80115f8:	4b87      	ldr	r3, [pc, #540]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	4a86      	ldr	r2, [pc, #536]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 80115fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011602:	6013      	str	r3, [r2, #0]
 8011604:	e00b      	b.n	801161e <HAL_RCC_OscConfig+0xaa>
 8011606:	4b84      	ldr	r3, [pc, #528]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	4a83      	ldr	r2, [pc, #524]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 801160c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011610:	6013      	str	r3, [r2, #0]
 8011612:	4b81      	ldr	r3, [pc, #516]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	4a80      	ldr	r2, [pc, #512]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 8011618:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801161c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	685b      	ldr	r3, [r3, #4]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d013      	beq.n	801164e <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011626:	f7ff fa8b 	bl	8010b40 <HAL_GetTick>
 801162a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801162c:	e008      	b.n	8011640 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801162e:	f7ff fa87 	bl	8010b40 <HAL_GetTick>
 8011632:	4602      	mov	r2, r0
 8011634:	693b      	ldr	r3, [r7, #16]
 8011636:	1ad3      	subs	r3, r2, r3
 8011638:	2b64      	cmp	r3, #100	; 0x64
 801163a:	d901      	bls.n	8011640 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 801163c:	2303      	movs	r3, #3
 801163e:	e1d0      	b.n	80119e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011640:	4b75      	ldr	r3, [pc, #468]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011648:	2b00      	cmp	r3, #0
 801164a:	d0f0      	beq.n	801162e <HAL_RCC_OscConfig+0xba>
 801164c:	e014      	b.n	8011678 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801164e:	f7ff fa77 	bl	8010b40 <HAL_GetTick>
 8011652:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011654:	e008      	b.n	8011668 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011656:	f7ff fa73 	bl	8010b40 <HAL_GetTick>
 801165a:	4602      	mov	r2, r0
 801165c:	693b      	ldr	r3, [r7, #16]
 801165e:	1ad3      	subs	r3, r2, r3
 8011660:	2b64      	cmp	r3, #100	; 0x64
 8011662:	d901      	bls.n	8011668 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8011664:	2303      	movs	r3, #3
 8011666:	e1bc      	b.n	80119e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011668:	4b6b      	ldr	r3, [pc, #428]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011670:	2b00      	cmp	r3, #0
 8011672:	d1f0      	bne.n	8011656 <HAL_RCC_OscConfig+0xe2>
 8011674:	e000      	b.n	8011678 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011676:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	f003 0302 	and.w	r3, r3, #2
 8011680:	2b00      	cmp	r3, #0
 8011682:	d063      	beq.n	801174c <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8011684:	4b64      	ldr	r3, [pc, #400]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 8011686:	689b      	ldr	r3, [r3, #8]
 8011688:	f003 030c 	and.w	r3, r3, #12
 801168c:	2b00      	cmp	r3, #0
 801168e:	d00b      	beq.n	80116a8 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011690:	4b61      	ldr	r3, [pc, #388]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 8011692:	689b      	ldr	r3, [r3, #8]
 8011694:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8011698:	2b08      	cmp	r3, #8
 801169a:	d11c      	bne.n	80116d6 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801169c:	4b5e      	ldr	r3, [pc, #376]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 801169e:	685b      	ldr	r3, [r3, #4]
 80116a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d116      	bne.n	80116d6 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80116a8:	4b5b      	ldr	r3, [pc, #364]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	f003 0302 	and.w	r3, r3, #2
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d005      	beq.n	80116c0 <HAL_RCC_OscConfig+0x14c>
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	68db      	ldr	r3, [r3, #12]
 80116b8:	2b01      	cmp	r3, #1
 80116ba:	d001      	beq.n	80116c0 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80116bc:	2301      	movs	r3, #1
 80116be:	e190      	b.n	80119e2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80116c0:	4b55      	ldr	r3, [pc, #340]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	691b      	ldr	r3, [r3, #16]
 80116cc:	00db      	lsls	r3, r3, #3
 80116ce:	4952      	ldr	r1, [pc, #328]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 80116d0:	4313      	orrs	r3, r2
 80116d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80116d4:	e03a      	b.n	801174c <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	68db      	ldr	r3, [r3, #12]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d020      	beq.n	8011720 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80116de:	4b4f      	ldr	r3, [pc, #316]	; (801181c <HAL_RCC_OscConfig+0x2a8>)
 80116e0:	2201      	movs	r2, #1
 80116e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80116e4:	f7ff fa2c 	bl	8010b40 <HAL_GetTick>
 80116e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80116ea:	e008      	b.n	80116fe <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80116ec:	f7ff fa28 	bl	8010b40 <HAL_GetTick>
 80116f0:	4602      	mov	r2, r0
 80116f2:	693b      	ldr	r3, [r7, #16]
 80116f4:	1ad3      	subs	r3, r2, r3
 80116f6:	2b02      	cmp	r3, #2
 80116f8:	d901      	bls.n	80116fe <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80116fa:	2303      	movs	r3, #3
 80116fc:	e171      	b.n	80119e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80116fe:	4b46      	ldr	r3, [pc, #280]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	f003 0302 	and.w	r3, r3, #2
 8011706:	2b00      	cmp	r3, #0
 8011708:	d0f0      	beq.n	80116ec <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801170a:	4b43      	ldr	r3, [pc, #268]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	691b      	ldr	r3, [r3, #16]
 8011716:	00db      	lsls	r3, r3, #3
 8011718:	493f      	ldr	r1, [pc, #252]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 801171a:	4313      	orrs	r3, r2
 801171c:	600b      	str	r3, [r1, #0]
 801171e:	e015      	b.n	801174c <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011720:	4b3e      	ldr	r3, [pc, #248]	; (801181c <HAL_RCC_OscConfig+0x2a8>)
 8011722:	2200      	movs	r2, #0
 8011724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011726:	f7ff fa0b 	bl	8010b40 <HAL_GetTick>
 801172a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801172c:	e008      	b.n	8011740 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801172e:	f7ff fa07 	bl	8010b40 <HAL_GetTick>
 8011732:	4602      	mov	r2, r0
 8011734:	693b      	ldr	r3, [r7, #16]
 8011736:	1ad3      	subs	r3, r2, r3
 8011738:	2b02      	cmp	r3, #2
 801173a:	d901      	bls.n	8011740 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 801173c:	2303      	movs	r3, #3
 801173e:	e150      	b.n	80119e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011740:	4b35      	ldr	r3, [pc, #212]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	f003 0302 	and.w	r3, r3, #2
 8011748:	2b00      	cmp	r3, #0
 801174a:	d1f0      	bne.n	801172e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	f003 0308 	and.w	r3, r3, #8
 8011754:	2b00      	cmp	r3, #0
 8011756:	d030      	beq.n	80117ba <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	695b      	ldr	r3, [r3, #20]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d016      	beq.n	801178e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011760:	4b2f      	ldr	r3, [pc, #188]	; (8011820 <HAL_RCC_OscConfig+0x2ac>)
 8011762:	2201      	movs	r2, #1
 8011764:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011766:	f7ff f9eb 	bl	8010b40 <HAL_GetTick>
 801176a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801176c:	e008      	b.n	8011780 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801176e:	f7ff f9e7 	bl	8010b40 <HAL_GetTick>
 8011772:	4602      	mov	r2, r0
 8011774:	693b      	ldr	r3, [r7, #16]
 8011776:	1ad3      	subs	r3, r2, r3
 8011778:	2b02      	cmp	r3, #2
 801177a:	d901      	bls.n	8011780 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 801177c:	2303      	movs	r3, #3
 801177e:	e130      	b.n	80119e2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011780:	4b25      	ldr	r3, [pc, #148]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 8011782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011784:	f003 0302 	and.w	r3, r3, #2
 8011788:	2b00      	cmp	r3, #0
 801178a:	d0f0      	beq.n	801176e <HAL_RCC_OscConfig+0x1fa>
 801178c:	e015      	b.n	80117ba <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801178e:	4b24      	ldr	r3, [pc, #144]	; (8011820 <HAL_RCC_OscConfig+0x2ac>)
 8011790:	2200      	movs	r2, #0
 8011792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011794:	f7ff f9d4 	bl	8010b40 <HAL_GetTick>
 8011798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801179a:	e008      	b.n	80117ae <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801179c:	f7ff f9d0 	bl	8010b40 <HAL_GetTick>
 80117a0:	4602      	mov	r2, r0
 80117a2:	693b      	ldr	r3, [r7, #16]
 80117a4:	1ad3      	subs	r3, r2, r3
 80117a6:	2b02      	cmp	r3, #2
 80117a8:	d901      	bls.n	80117ae <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80117aa:	2303      	movs	r3, #3
 80117ac:	e119      	b.n	80119e2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80117ae:	4b1a      	ldr	r3, [pc, #104]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 80117b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117b2:	f003 0302 	and.w	r3, r3, #2
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d1f0      	bne.n	801179c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	f003 0304 	and.w	r3, r3, #4
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	f000 809f 	beq.w	8011906 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80117c8:	2300      	movs	r3, #0
 80117ca:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80117cc:	4b12      	ldr	r3, [pc, #72]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 80117ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d10f      	bne.n	80117f8 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80117d8:	2300      	movs	r3, #0
 80117da:	60fb      	str	r3, [r7, #12]
 80117dc:	4b0e      	ldr	r3, [pc, #56]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 80117de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117e0:	4a0d      	ldr	r2, [pc, #52]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 80117e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80117e6:	6413      	str	r3, [r2, #64]	; 0x40
 80117e8:	4b0b      	ldr	r3, [pc, #44]	; (8011818 <HAL_RCC_OscConfig+0x2a4>)
 80117ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80117f0:	60fb      	str	r3, [r7, #12]
 80117f2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80117f4:	2301      	movs	r3, #1
 80117f6:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80117f8:	4b0a      	ldr	r3, [pc, #40]	; (8011824 <HAL_RCC_OscConfig+0x2b0>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011800:	2b00      	cmp	r3, #0
 8011802:	d120      	bne.n	8011846 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011804:	4b07      	ldr	r3, [pc, #28]	; (8011824 <HAL_RCC_OscConfig+0x2b0>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	4a06      	ldr	r2, [pc, #24]	; (8011824 <HAL_RCC_OscConfig+0x2b0>)
 801180a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801180e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011810:	f7ff f996 	bl	8010b40 <HAL_GetTick>
 8011814:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011816:	e010      	b.n	801183a <HAL_RCC_OscConfig+0x2c6>
 8011818:	40023800 	.word	0x40023800
 801181c:	42470000 	.word	0x42470000
 8011820:	42470e80 	.word	0x42470e80
 8011824:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011828:	f7ff f98a 	bl	8010b40 <HAL_GetTick>
 801182c:	4602      	mov	r2, r0
 801182e:	693b      	ldr	r3, [r7, #16]
 8011830:	1ad3      	subs	r3, r2, r3
 8011832:	2b02      	cmp	r3, #2
 8011834:	d901      	bls.n	801183a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8011836:	2303      	movs	r3, #3
 8011838:	e0d3      	b.n	80119e2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801183a:	4b6c      	ldr	r3, [pc, #432]	; (80119ec <HAL_RCC_OscConfig+0x478>)
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011842:	2b00      	cmp	r3, #0
 8011844:	d0f0      	beq.n	8011828 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	689b      	ldr	r3, [r3, #8]
 801184a:	2b01      	cmp	r3, #1
 801184c:	d106      	bne.n	801185c <HAL_RCC_OscConfig+0x2e8>
 801184e:	4b68      	ldr	r3, [pc, #416]	; (80119f0 <HAL_RCC_OscConfig+0x47c>)
 8011850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011852:	4a67      	ldr	r2, [pc, #412]	; (80119f0 <HAL_RCC_OscConfig+0x47c>)
 8011854:	f043 0301 	orr.w	r3, r3, #1
 8011858:	6713      	str	r3, [r2, #112]	; 0x70
 801185a:	e01c      	b.n	8011896 <HAL_RCC_OscConfig+0x322>
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	689b      	ldr	r3, [r3, #8]
 8011860:	2b05      	cmp	r3, #5
 8011862:	d10c      	bne.n	801187e <HAL_RCC_OscConfig+0x30a>
 8011864:	4b62      	ldr	r3, [pc, #392]	; (80119f0 <HAL_RCC_OscConfig+0x47c>)
 8011866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011868:	4a61      	ldr	r2, [pc, #388]	; (80119f0 <HAL_RCC_OscConfig+0x47c>)
 801186a:	f043 0304 	orr.w	r3, r3, #4
 801186e:	6713      	str	r3, [r2, #112]	; 0x70
 8011870:	4b5f      	ldr	r3, [pc, #380]	; (80119f0 <HAL_RCC_OscConfig+0x47c>)
 8011872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011874:	4a5e      	ldr	r2, [pc, #376]	; (80119f0 <HAL_RCC_OscConfig+0x47c>)
 8011876:	f043 0301 	orr.w	r3, r3, #1
 801187a:	6713      	str	r3, [r2, #112]	; 0x70
 801187c:	e00b      	b.n	8011896 <HAL_RCC_OscConfig+0x322>
 801187e:	4b5c      	ldr	r3, [pc, #368]	; (80119f0 <HAL_RCC_OscConfig+0x47c>)
 8011880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011882:	4a5b      	ldr	r2, [pc, #364]	; (80119f0 <HAL_RCC_OscConfig+0x47c>)
 8011884:	f023 0301 	bic.w	r3, r3, #1
 8011888:	6713      	str	r3, [r2, #112]	; 0x70
 801188a:	4b59      	ldr	r3, [pc, #356]	; (80119f0 <HAL_RCC_OscConfig+0x47c>)
 801188c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801188e:	4a58      	ldr	r2, [pc, #352]	; (80119f0 <HAL_RCC_OscConfig+0x47c>)
 8011890:	f023 0304 	bic.w	r3, r3, #4
 8011894:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	689b      	ldr	r3, [r3, #8]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d015      	beq.n	80118ca <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801189e:	f7ff f94f 	bl	8010b40 <HAL_GetTick>
 80118a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80118a4:	e00a      	b.n	80118bc <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80118a6:	f7ff f94b 	bl	8010b40 <HAL_GetTick>
 80118aa:	4602      	mov	r2, r0
 80118ac:	693b      	ldr	r3, [r7, #16]
 80118ae:	1ad3      	subs	r3, r2, r3
 80118b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80118b4:	4293      	cmp	r3, r2
 80118b6:	d901      	bls.n	80118bc <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80118b8:	2303      	movs	r3, #3
 80118ba:	e092      	b.n	80119e2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80118bc:	4b4c      	ldr	r3, [pc, #304]	; (80119f0 <HAL_RCC_OscConfig+0x47c>)
 80118be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118c0:	f003 0302 	and.w	r3, r3, #2
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d0ee      	beq.n	80118a6 <HAL_RCC_OscConfig+0x332>
 80118c8:	e014      	b.n	80118f4 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80118ca:	f7ff f939 	bl	8010b40 <HAL_GetTick>
 80118ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80118d0:	e00a      	b.n	80118e8 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80118d2:	f7ff f935 	bl	8010b40 <HAL_GetTick>
 80118d6:	4602      	mov	r2, r0
 80118d8:	693b      	ldr	r3, [r7, #16]
 80118da:	1ad3      	subs	r3, r2, r3
 80118dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80118e0:	4293      	cmp	r3, r2
 80118e2:	d901      	bls.n	80118e8 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80118e4:	2303      	movs	r3, #3
 80118e6:	e07c      	b.n	80119e2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80118e8:	4b41      	ldr	r3, [pc, #260]	; (80119f0 <HAL_RCC_OscConfig+0x47c>)
 80118ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118ec:	f003 0302 	and.w	r3, r3, #2
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d1ee      	bne.n	80118d2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80118f4:	7dfb      	ldrb	r3, [r7, #23]
 80118f6:	2b01      	cmp	r3, #1
 80118f8:	d105      	bne.n	8011906 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80118fa:	4b3d      	ldr	r3, [pc, #244]	; (80119f0 <HAL_RCC_OscConfig+0x47c>)
 80118fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118fe:	4a3c      	ldr	r2, [pc, #240]	; (80119f0 <HAL_RCC_OscConfig+0x47c>)
 8011900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011904:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	699b      	ldr	r3, [r3, #24]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d068      	beq.n	80119e0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801190e:	4b38      	ldr	r3, [pc, #224]	; (80119f0 <HAL_RCC_OscConfig+0x47c>)
 8011910:	689b      	ldr	r3, [r3, #8]
 8011912:	f003 030c 	and.w	r3, r3, #12
 8011916:	2b08      	cmp	r3, #8
 8011918:	d060      	beq.n	80119dc <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	699b      	ldr	r3, [r3, #24]
 801191e:	2b02      	cmp	r3, #2
 8011920:	d145      	bne.n	80119ae <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011922:	4b34      	ldr	r3, [pc, #208]	; (80119f4 <HAL_RCC_OscConfig+0x480>)
 8011924:	2200      	movs	r2, #0
 8011926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011928:	f7ff f90a 	bl	8010b40 <HAL_GetTick>
 801192c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801192e:	e008      	b.n	8011942 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011930:	f7ff f906 	bl	8010b40 <HAL_GetTick>
 8011934:	4602      	mov	r2, r0
 8011936:	693b      	ldr	r3, [r7, #16]
 8011938:	1ad3      	subs	r3, r2, r3
 801193a:	2b02      	cmp	r3, #2
 801193c:	d901      	bls.n	8011942 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 801193e:	2303      	movs	r3, #3
 8011940:	e04f      	b.n	80119e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011942:	4b2b      	ldr	r3, [pc, #172]	; (80119f0 <HAL_RCC_OscConfig+0x47c>)
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801194a:	2b00      	cmp	r3, #0
 801194c:	d1f0      	bne.n	8011930 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	69da      	ldr	r2, [r3, #28]
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	6a1b      	ldr	r3, [r3, #32]
 8011956:	431a      	orrs	r2, r3
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801195c:	019b      	lsls	r3, r3, #6
 801195e:	431a      	orrs	r2, r3
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011964:	085b      	lsrs	r3, r3, #1
 8011966:	3b01      	subs	r3, #1
 8011968:	041b      	lsls	r3, r3, #16
 801196a:	431a      	orrs	r2, r3
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011970:	061b      	lsls	r3, r3, #24
 8011972:	431a      	orrs	r2, r3
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011978:	071b      	lsls	r3, r3, #28
 801197a:	491d      	ldr	r1, [pc, #116]	; (80119f0 <HAL_RCC_OscConfig+0x47c>)
 801197c:	4313      	orrs	r3, r2
 801197e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011980:	4b1c      	ldr	r3, [pc, #112]	; (80119f4 <HAL_RCC_OscConfig+0x480>)
 8011982:	2201      	movs	r2, #1
 8011984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011986:	f7ff f8db 	bl	8010b40 <HAL_GetTick>
 801198a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801198c:	e008      	b.n	80119a0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801198e:	f7ff f8d7 	bl	8010b40 <HAL_GetTick>
 8011992:	4602      	mov	r2, r0
 8011994:	693b      	ldr	r3, [r7, #16]
 8011996:	1ad3      	subs	r3, r2, r3
 8011998:	2b02      	cmp	r3, #2
 801199a:	d901      	bls.n	80119a0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 801199c:	2303      	movs	r3, #3
 801199e:	e020      	b.n	80119e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80119a0:	4b13      	ldr	r3, [pc, #76]	; (80119f0 <HAL_RCC_OscConfig+0x47c>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d0f0      	beq.n	801198e <HAL_RCC_OscConfig+0x41a>
 80119ac:	e018      	b.n	80119e0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80119ae:	4b11      	ldr	r3, [pc, #68]	; (80119f4 <HAL_RCC_OscConfig+0x480>)
 80119b0:	2200      	movs	r2, #0
 80119b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80119b4:	f7ff f8c4 	bl	8010b40 <HAL_GetTick>
 80119b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80119ba:	e008      	b.n	80119ce <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80119bc:	f7ff f8c0 	bl	8010b40 <HAL_GetTick>
 80119c0:	4602      	mov	r2, r0
 80119c2:	693b      	ldr	r3, [r7, #16]
 80119c4:	1ad3      	subs	r3, r2, r3
 80119c6:	2b02      	cmp	r3, #2
 80119c8:	d901      	bls.n	80119ce <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80119ca:	2303      	movs	r3, #3
 80119cc:	e009      	b.n	80119e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80119ce:	4b08      	ldr	r3, [pc, #32]	; (80119f0 <HAL_RCC_OscConfig+0x47c>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d1f0      	bne.n	80119bc <HAL_RCC_OscConfig+0x448>
 80119da:	e001      	b.n	80119e0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80119dc:	2301      	movs	r3, #1
 80119de:	e000      	b.n	80119e2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80119e0:	2300      	movs	r3, #0
}
 80119e2:	4618      	mov	r0, r3
 80119e4:	3718      	adds	r7, #24
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}
 80119ea:	bf00      	nop
 80119ec:	40007000 	.word	0x40007000
 80119f0:	40023800 	.word	0x40023800
 80119f4:	42470060 	.word	0x42470060

080119f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b082      	sub	sp, #8
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d101      	bne.n	8011a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011a06:	2301      	movs	r3, #1
 8011a08:	e03f      	b.n	8011a8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011a10:	b2db      	uxtb	r3, r3
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d106      	bne.n	8011a24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	2200      	movs	r2, #0
 8011a1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	f7fe ff98 	bl	8010954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2224      	movs	r2, #36	; 0x24
 8011a28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	68da      	ldr	r2, [r3, #12]
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011a3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011a3c:	6878      	ldr	r0, [r7, #4]
 8011a3e:	f000 fb4b 	bl	80120d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	691a      	ldr	r2, [r3, #16]
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011a50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	695a      	ldr	r2, [r3, #20]
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011a60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	68da      	ldr	r2, [r3, #12]
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011a70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	2200      	movs	r2, #0
 8011a76:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2220      	movs	r2, #32
 8011a7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	2220      	movs	r2, #32
 8011a84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8011a88:	2300      	movs	r3, #0
}
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	3708      	adds	r7, #8
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}

08011a92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011a92:	b580      	push	{r7, lr}
 8011a94:	b088      	sub	sp, #32
 8011a96:	af02      	add	r7, sp, #8
 8011a98:	60f8      	str	r0, [r7, #12]
 8011a9a:	60b9      	str	r1, [r7, #8]
 8011a9c:	603b      	str	r3, [r7, #0]
 8011a9e:	4613      	mov	r3, r2
 8011aa0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011aac:	b2db      	uxtb	r3, r3
 8011aae:	2b20      	cmp	r3, #32
 8011ab0:	f040 8083 	bne.w	8011bba <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d002      	beq.n	8011ac0 <HAL_UART_Transmit+0x2e>
 8011aba:	88fb      	ldrh	r3, [r7, #6]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d101      	bne.n	8011ac4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8011ac0:	2301      	movs	r3, #1
 8011ac2:	e07b      	b.n	8011bbc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011aca:	2b01      	cmp	r3, #1
 8011acc:	d101      	bne.n	8011ad2 <HAL_UART_Transmit+0x40>
 8011ace:	2302      	movs	r3, #2
 8011ad0:	e074      	b.n	8011bbc <HAL_UART_Transmit+0x12a>
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	2201      	movs	r2, #1
 8011ad6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	2200      	movs	r2, #0
 8011ade:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	2221      	movs	r2, #33	; 0x21
 8011ae4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8011ae8:	f7ff f82a 	bl	8010b40 <HAL_GetTick>
 8011aec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	88fa      	ldrh	r2, [r7, #6]
 8011af2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	88fa      	ldrh	r2, [r7, #6]
 8011af8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	2200      	movs	r2, #0
 8011afe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8011b02:	e042      	b.n	8011b8a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011b08:	b29b      	uxth	r3, r3
 8011b0a:	3b01      	subs	r3, #1
 8011b0c:	b29a      	uxth	r2, r3
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	689b      	ldr	r3, [r3, #8]
 8011b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011b1a:	d122      	bne.n	8011b62 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	9300      	str	r3, [sp, #0]
 8011b20:	697b      	ldr	r3, [r7, #20]
 8011b22:	2200      	movs	r2, #0
 8011b24:	2180      	movs	r1, #128	; 0x80
 8011b26:	68f8      	ldr	r0, [r7, #12]
 8011b28:	f000 f96a 	bl	8011e00 <UART_WaitOnFlagUntilTimeout>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d001      	beq.n	8011b36 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8011b32:	2303      	movs	r3, #3
 8011b34:	e042      	b.n	8011bbc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8011b36:	68bb      	ldr	r3, [r7, #8]
 8011b38:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8011b3a:	693b      	ldr	r3, [r7, #16]
 8011b3c:	881b      	ldrh	r3, [r3, #0]
 8011b3e:	461a      	mov	r2, r3
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011b48:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	691b      	ldr	r3, [r3, #16]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d103      	bne.n	8011b5a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	3302      	adds	r3, #2
 8011b56:	60bb      	str	r3, [r7, #8]
 8011b58:	e017      	b.n	8011b8a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8011b5a:	68bb      	ldr	r3, [r7, #8]
 8011b5c:	3301      	adds	r3, #1
 8011b5e:	60bb      	str	r3, [r7, #8]
 8011b60:	e013      	b.n	8011b8a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011b62:	683b      	ldr	r3, [r7, #0]
 8011b64:	9300      	str	r3, [sp, #0]
 8011b66:	697b      	ldr	r3, [r7, #20]
 8011b68:	2200      	movs	r2, #0
 8011b6a:	2180      	movs	r1, #128	; 0x80
 8011b6c:	68f8      	ldr	r0, [r7, #12]
 8011b6e:	f000 f947 	bl	8011e00 <UART_WaitOnFlagUntilTimeout>
 8011b72:	4603      	mov	r3, r0
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d001      	beq.n	8011b7c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8011b78:	2303      	movs	r3, #3
 8011b7a:	e01f      	b.n	8011bbc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8011b7c:	68bb      	ldr	r3, [r7, #8]
 8011b7e:	1c5a      	adds	r2, r3, #1
 8011b80:	60ba      	str	r2, [r7, #8]
 8011b82:	781a      	ldrb	r2, [r3, #0]
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011b8e:	b29b      	uxth	r3, r3
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d1b7      	bne.n	8011b04 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011b94:	683b      	ldr	r3, [r7, #0]
 8011b96:	9300      	str	r3, [sp, #0]
 8011b98:	697b      	ldr	r3, [r7, #20]
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	2140      	movs	r1, #64	; 0x40
 8011b9e:	68f8      	ldr	r0, [r7, #12]
 8011ba0:	f000 f92e 	bl	8011e00 <UART_WaitOnFlagUntilTimeout>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d001      	beq.n	8011bae <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8011baa:	2303      	movs	r3, #3
 8011bac:	e006      	b.n	8011bbc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	2220      	movs	r2, #32
 8011bb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	e000      	b.n	8011bbc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8011bba:	2302      	movs	r3, #2
  }
}
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	3718      	adds	r7, #24
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	bd80      	pop	{r7, pc}

08011bc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b088      	sub	sp, #32
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	68db      	ldr	r3, [r3, #12]
 8011bda:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	695b      	ldr	r3, [r3, #20]
 8011be2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8011be4:	2300      	movs	r3, #0
 8011be6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8011be8:	2300      	movs	r3, #0
 8011bea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8011bec:	69fb      	ldr	r3, [r7, #28]
 8011bee:	f003 030f 	and.w	r3, r3, #15
 8011bf2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8011bf4:	693b      	ldr	r3, [r7, #16]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d10d      	bne.n	8011c16 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011bfa:	69fb      	ldr	r3, [r7, #28]
 8011bfc:	f003 0320 	and.w	r3, r3, #32
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d008      	beq.n	8011c16 <HAL_UART_IRQHandler+0x52>
 8011c04:	69bb      	ldr	r3, [r7, #24]
 8011c06:	f003 0320 	and.w	r3, r3, #32
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d003      	beq.n	8011c16 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8011c0e:	6878      	ldr	r0, [r7, #4]
 8011c10:	f000 f9e0 	bl	8011fd4 <UART_Receive_IT>
      return;
 8011c14:	e0d1      	b.n	8011dba <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	f000 80b0 	beq.w	8011d7e <HAL_UART_IRQHandler+0x1ba>
 8011c1e:	697b      	ldr	r3, [r7, #20]
 8011c20:	f003 0301 	and.w	r3, r3, #1
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d105      	bne.n	8011c34 <HAL_UART_IRQHandler+0x70>
 8011c28:	69bb      	ldr	r3, [r7, #24]
 8011c2a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	f000 80a5 	beq.w	8011d7e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8011c34:	69fb      	ldr	r3, [r7, #28]
 8011c36:	f003 0301 	and.w	r3, r3, #1
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d00a      	beq.n	8011c54 <HAL_UART_IRQHandler+0x90>
 8011c3e:	69bb      	ldr	r3, [r7, #24]
 8011c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d005      	beq.n	8011c54 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c4c:	f043 0201 	orr.w	r2, r3, #1
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8011c54:	69fb      	ldr	r3, [r7, #28]
 8011c56:	f003 0304 	and.w	r3, r3, #4
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d00a      	beq.n	8011c74 <HAL_UART_IRQHandler+0xb0>
 8011c5e:	697b      	ldr	r3, [r7, #20]
 8011c60:	f003 0301 	and.w	r3, r3, #1
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d005      	beq.n	8011c74 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c6c:	f043 0202 	orr.w	r2, r3, #2
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8011c74:	69fb      	ldr	r3, [r7, #28]
 8011c76:	f003 0302 	and.w	r3, r3, #2
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d00a      	beq.n	8011c94 <HAL_UART_IRQHandler+0xd0>
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	f003 0301 	and.w	r3, r3, #1
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d005      	beq.n	8011c94 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c8c:	f043 0204 	orr.w	r2, r3, #4
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8011c94:	69fb      	ldr	r3, [r7, #28]
 8011c96:	f003 0308 	and.w	r3, r3, #8
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d00f      	beq.n	8011cbe <HAL_UART_IRQHandler+0xfa>
 8011c9e:	69bb      	ldr	r3, [r7, #24]
 8011ca0:	f003 0320 	and.w	r3, r3, #32
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d104      	bne.n	8011cb2 <HAL_UART_IRQHandler+0xee>
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	f003 0301 	and.w	r3, r3, #1
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d005      	beq.n	8011cbe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cb6:	f043 0208 	orr.w	r2, r3, #8
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d078      	beq.n	8011db8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011cc6:	69fb      	ldr	r3, [r7, #28]
 8011cc8:	f003 0320 	and.w	r3, r3, #32
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d007      	beq.n	8011ce0 <HAL_UART_IRQHandler+0x11c>
 8011cd0:	69bb      	ldr	r3, [r7, #24]
 8011cd2:	f003 0320 	and.w	r3, r3, #32
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d002      	beq.n	8011ce0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8011cda:	6878      	ldr	r0, [r7, #4]
 8011cdc:	f000 f97a 	bl	8011fd4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	695b      	ldr	r3, [r3, #20]
 8011ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011cea:	2b40      	cmp	r3, #64	; 0x40
 8011cec:	bf0c      	ite	eq
 8011cee:	2301      	moveq	r3, #1
 8011cf0:	2300      	movne	r3, #0
 8011cf2:	b2db      	uxtb	r3, r3
 8011cf4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cfa:	f003 0308 	and.w	r3, r3, #8
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d102      	bne.n	8011d08 <HAL_UART_IRQHandler+0x144>
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d031      	beq.n	8011d6c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011d08:	6878      	ldr	r0, [r7, #4]
 8011d0a:	f000 f8c3 	bl	8011e94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	695b      	ldr	r3, [r3, #20]
 8011d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d18:	2b40      	cmp	r3, #64	; 0x40
 8011d1a:	d123      	bne.n	8011d64 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	695a      	ldr	r2, [r3, #20]
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011d2a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d013      	beq.n	8011d5c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d38:	4a21      	ldr	r2, [pc, #132]	; (8011dc0 <HAL_UART_IRQHandler+0x1fc>)
 8011d3a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d40:	4618      	mov	r0, r3
 8011d42:	f7ff f83c 	bl	8010dbe <HAL_DMA_Abort_IT>
 8011d46:	4603      	mov	r3, r0
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d016      	beq.n	8011d7a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d52:	687a      	ldr	r2, [r7, #4]
 8011d54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011d56:	4610      	mov	r0, r2
 8011d58:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d5a:	e00e      	b.n	8011d7a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f000 f845 	bl	8011dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d62:	e00a      	b.n	8011d7a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011d64:	6878      	ldr	r0, [r7, #4]
 8011d66:	f000 f841 	bl	8011dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d6a:	e006      	b.n	8011d7a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f000 f83d 	bl	8011dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	2200      	movs	r2, #0
 8011d76:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8011d78:	e01e      	b.n	8011db8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d7a:	bf00      	nop
    return;
 8011d7c:	e01c      	b.n	8011db8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8011d7e:	69fb      	ldr	r3, [r7, #28]
 8011d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d008      	beq.n	8011d9a <HAL_UART_IRQHandler+0x1d6>
 8011d88:	69bb      	ldr	r3, [r7, #24]
 8011d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d003      	beq.n	8011d9a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8011d92:	6878      	ldr	r0, [r7, #4]
 8011d94:	f000 f8b0 	bl	8011ef8 <UART_Transmit_IT>
    return;
 8011d98:	e00f      	b.n	8011dba <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8011d9a:	69fb      	ldr	r3, [r7, #28]
 8011d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d00a      	beq.n	8011dba <HAL_UART_IRQHandler+0x1f6>
 8011da4:	69bb      	ldr	r3, [r7, #24]
 8011da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d005      	beq.n	8011dba <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f000 f8f8 	bl	8011fa4 <UART_EndTransmit_IT>
    return;
 8011db4:	bf00      	nop
 8011db6:	e000      	b.n	8011dba <HAL_UART_IRQHandler+0x1f6>
    return;
 8011db8:	bf00      	nop
  }
}
 8011dba:	3720      	adds	r7, #32
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}
 8011dc0:	08011ed1 	.word	0x08011ed1

08011dc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011dc4:	b480      	push	{r7}
 8011dc6:	b083      	sub	sp, #12
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8011dcc:	bf00      	nop
 8011dce:	370c      	adds	r7, #12
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd6:	4770      	bx	lr

08011dd8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8011dd8:	b480      	push	{r7}
 8011dda:	b083      	sub	sp, #12
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8011de0:	bf00      	nop
 8011de2:	370c      	adds	r7, #12
 8011de4:	46bd      	mov	sp, r7
 8011de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dea:	4770      	bx	lr

08011dec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011dec:	b480      	push	{r7}
 8011dee:	b083      	sub	sp, #12
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8011df4:	bf00      	nop
 8011df6:	370c      	adds	r7, #12
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfe:	4770      	bx	lr

08011e00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b084      	sub	sp, #16
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	60f8      	str	r0, [r7, #12]
 8011e08:	60b9      	str	r1, [r7, #8]
 8011e0a:	603b      	str	r3, [r7, #0]
 8011e0c:	4613      	mov	r3, r2
 8011e0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011e10:	e02c      	b.n	8011e6c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011e12:	69bb      	ldr	r3, [r7, #24]
 8011e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e18:	d028      	beq.n	8011e6c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011e1a:	69bb      	ldr	r3, [r7, #24]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d007      	beq.n	8011e30 <UART_WaitOnFlagUntilTimeout+0x30>
 8011e20:	f7fe fe8e 	bl	8010b40 <HAL_GetTick>
 8011e24:	4602      	mov	r2, r0
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	1ad3      	subs	r3, r2, r3
 8011e2a:	69ba      	ldr	r2, [r7, #24]
 8011e2c:	429a      	cmp	r2, r3
 8011e2e:	d21d      	bcs.n	8011e6c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	68da      	ldr	r2, [r3, #12]
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011e3e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	695a      	ldr	r2, [r3, #20]
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	f022 0201 	bic.w	r2, r2, #1
 8011e4e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	2220      	movs	r2, #32
 8011e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	2220      	movs	r2, #32
 8011e5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	2200      	movs	r2, #0
 8011e64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8011e68:	2303      	movs	r3, #3
 8011e6a:	e00f      	b.n	8011e8c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	681a      	ldr	r2, [r3, #0]
 8011e72:	68bb      	ldr	r3, [r7, #8]
 8011e74:	4013      	ands	r3, r2
 8011e76:	68ba      	ldr	r2, [r7, #8]
 8011e78:	429a      	cmp	r2, r3
 8011e7a:	bf0c      	ite	eq
 8011e7c:	2301      	moveq	r3, #1
 8011e7e:	2300      	movne	r3, #0
 8011e80:	b2db      	uxtb	r3, r3
 8011e82:	461a      	mov	r2, r3
 8011e84:	79fb      	ldrb	r3, [r7, #7]
 8011e86:	429a      	cmp	r2, r3
 8011e88:	d0c3      	beq.n	8011e12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011e8a:	2300      	movs	r3, #0
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3710      	adds	r7, #16
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}

08011e94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011e94:	b480      	push	{r7}
 8011e96:	b083      	sub	sp, #12
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	68da      	ldr	r2, [r3, #12]
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8011eaa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	695a      	ldr	r2, [r3, #20]
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	f022 0201 	bic.w	r2, r2, #1
 8011eba:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2220      	movs	r2, #32
 8011ec0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8011ec4:	bf00      	nop
 8011ec6:	370c      	adds	r7, #12
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ece:	4770      	bx	lr

08011ed0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b084      	sub	sp, #16
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011edc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011eea:	68f8      	ldr	r0, [r7, #12]
 8011eec:	f7ff ff7e 	bl	8011dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011ef0:	bf00      	nop
 8011ef2:	3710      	adds	r7, #16
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}

08011ef8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011ef8:	b480      	push	{r7}
 8011efa:	b085      	sub	sp, #20
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011f06:	b2db      	uxtb	r3, r3
 8011f08:	2b21      	cmp	r3, #33	; 0x21
 8011f0a:	d144      	bne.n	8011f96 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	689b      	ldr	r3, [r3, #8]
 8011f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f14:	d11a      	bne.n	8011f4c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	6a1b      	ldr	r3, [r3, #32]
 8011f1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	881b      	ldrh	r3, [r3, #0]
 8011f20:	461a      	mov	r2, r3
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011f2a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	691b      	ldr	r3, [r3, #16]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d105      	bne.n	8011f40 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	6a1b      	ldr	r3, [r3, #32]
 8011f38:	1c9a      	adds	r2, r3, #2
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	621a      	str	r2, [r3, #32]
 8011f3e:	e00e      	b.n	8011f5e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	6a1b      	ldr	r3, [r3, #32]
 8011f44:	1c5a      	adds	r2, r3, #1
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	621a      	str	r2, [r3, #32]
 8011f4a:	e008      	b.n	8011f5e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	6a1b      	ldr	r3, [r3, #32]
 8011f50:	1c59      	adds	r1, r3, #1
 8011f52:	687a      	ldr	r2, [r7, #4]
 8011f54:	6211      	str	r1, [r2, #32]
 8011f56:	781a      	ldrb	r2, [r3, #0]
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011f62:	b29b      	uxth	r3, r3
 8011f64:	3b01      	subs	r3, #1
 8011f66:	b29b      	uxth	r3, r3
 8011f68:	687a      	ldr	r2, [r7, #4]
 8011f6a:	4619      	mov	r1, r3
 8011f6c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d10f      	bne.n	8011f92 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	68da      	ldr	r2, [r3, #12]
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011f80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	68da      	ldr	r2, [r3, #12]
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011f90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011f92:	2300      	movs	r3, #0
 8011f94:	e000      	b.n	8011f98 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8011f96:	2302      	movs	r3, #2
  }
}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	3714      	adds	r7, #20
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa2:	4770      	bx	lr

08011fa4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b082      	sub	sp, #8
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	68da      	ldr	r2, [r3, #12]
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011fba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	2220      	movs	r2, #32
 8011fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011fc4:	6878      	ldr	r0, [r7, #4]
 8011fc6:	f7ff fefd 	bl	8011dc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8011fca:	2300      	movs	r3, #0
}
 8011fcc:	4618      	mov	r0, r3
 8011fce:	3708      	adds	r7, #8
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	bd80      	pop	{r7, pc}

08011fd4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b084      	sub	sp, #16
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011fe2:	b2db      	uxtb	r3, r3
 8011fe4:	2b22      	cmp	r3, #34	; 0x22
 8011fe6:	d171      	bne.n	80120cc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	689b      	ldr	r3, [r3, #8]
 8011fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011ff0:	d123      	bne.n	801203a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ff6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	691b      	ldr	r3, [r3, #16]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d10e      	bne.n	801201e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	685b      	ldr	r3, [r3, #4]
 8012006:	b29b      	uxth	r3, r3
 8012008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801200c:	b29a      	uxth	r2, r3
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012016:	1c9a      	adds	r2, r3, #2
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	629a      	str	r2, [r3, #40]	; 0x28
 801201c:	e029      	b.n	8012072 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	685b      	ldr	r3, [r3, #4]
 8012024:	b29b      	uxth	r3, r3
 8012026:	b2db      	uxtb	r3, r3
 8012028:	b29a      	uxth	r2, r3
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012032:	1c5a      	adds	r2, r3, #1
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	629a      	str	r2, [r3, #40]	; 0x28
 8012038:	e01b      	b.n	8012072 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	691b      	ldr	r3, [r3, #16]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d10a      	bne.n	8012058 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	6858      	ldr	r0, [r3, #4]
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801204c:	1c59      	adds	r1, r3, #1
 801204e:	687a      	ldr	r2, [r7, #4]
 8012050:	6291      	str	r1, [r2, #40]	; 0x28
 8012052:	b2c2      	uxtb	r2, r0
 8012054:	701a      	strb	r2, [r3, #0]
 8012056:	e00c      	b.n	8012072 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	685b      	ldr	r3, [r3, #4]
 801205e:	b2da      	uxtb	r2, r3
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012064:	1c58      	adds	r0, r3, #1
 8012066:	6879      	ldr	r1, [r7, #4]
 8012068:	6288      	str	r0, [r1, #40]	; 0x28
 801206a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801206e:	b2d2      	uxtb	r2, r2
 8012070:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8012076:	b29b      	uxth	r3, r3
 8012078:	3b01      	subs	r3, #1
 801207a:	b29b      	uxth	r3, r3
 801207c:	687a      	ldr	r2, [r7, #4]
 801207e:	4619      	mov	r1, r3
 8012080:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8012082:	2b00      	cmp	r3, #0
 8012084:	d120      	bne.n	80120c8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	68da      	ldr	r2, [r3, #12]
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	f022 0220 	bic.w	r2, r2, #32
 8012094:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	68da      	ldr	r2, [r3, #12]
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80120a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	695a      	ldr	r2, [r3, #20]
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	f022 0201 	bic.w	r2, r2, #1
 80120b4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	2220      	movs	r2, #32
 80120ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80120be:	6878      	ldr	r0, [r7, #4]
 80120c0:	f7ff fe8a 	bl	8011dd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80120c4:	2300      	movs	r3, #0
 80120c6:	e002      	b.n	80120ce <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80120c8:	2300      	movs	r3, #0
 80120ca:	e000      	b.n	80120ce <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80120cc:	2302      	movs	r3, #2
  }
}
 80120ce:	4618      	mov	r0, r3
 80120d0:	3710      	adds	r7, #16
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}
	...

080120d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80120d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120dc:	b085      	sub	sp, #20
 80120de:	af00      	add	r7, sp, #0
 80120e0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	691b      	ldr	r3, [r3, #16]
 80120e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	68da      	ldr	r2, [r3, #12]
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	430a      	orrs	r2, r1
 80120f6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	689a      	ldr	r2, [r3, #8]
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	691b      	ldr	r3, [r3, #16]
 8012100:	431a      	orrs	r2, r3
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	695b      	ldr	r3, [r3, #20]
 8012106:	431a      	orrs	r2, r3
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	69db      	ldr	r3, [r3, #28]
 801210c:	4313      	orrs	r3, r2
 801210e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	68db      	ldr	r3, [r3, #12]
 8012116:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 801211a:	f023 030c 	bic.w	r3, r3, #12
 801211e:	687a      	ldr	r2, [r7, #4]
 8012120:	6812      	ldr	r2, [r2, #0]
 8012122:	68f9      	ldr	r1, [r7, #12]
 8012124:	430b      	orrs	r3, r1
 8012126:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	695b      	ldr	r3, [r3, #20]
 801212e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	699a      	ldr	r2, [r3, #24]
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	430a      	orrs	r2, r1
 801213c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	69db      	ldr	r3, [r3, #28]
 8012142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012146:	f040 818b 	bne.w	8012460 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	4ac1      	ldr	r2, [pc, #772]	; (8012454 <UART_SetConfig+0x37c>)
 8012150:	4293      	cmp	r3, r2
 8012152:	d005      	beq.n	8012160 <UART_SetConfig+0x88>
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	4abf      	ldr	r2, [pc, #764]	; (8012458 <UART_SetConfig+0x380>)
 801215a:	4293      	cmp	r3, r2
 801215c:	f040 80bd 	bne.w	80122da <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8012160:	f7ff f9f4 	bl	801154c <HAL_RCC_GetPCLK2Freq>
 8012164:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	461d      	mov	r5, r3
 801216a:	f04f 0600 	mov.w	r6, #0
 801216e:	46a8      	mov	r8, r5
 8012170:	46b1      	mov	r9, r6
 8012172:	eb18 0308 	adds.w	r3, r8, r8
 8012176:	eb49 0409 	adc.w	r4, r9, r9
 801217a:	4698      	mov	r8, r3
 801217c:	46a1      	mov	r9, r4
 801217e:	eb18 0805 	adds.w	r8, r8, r5
 8012182:	eb49 0906 	adc.w	r9, r9, r6
 8012186:	f04f 0100 	mov.w	r1, #0
 801218a:	f04f 0200 	mov.w	r2, #0
 801218e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8012192:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8012196:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801219a:	4688      	mov	r8, r1
 801219c:	4691      	mov	r9, r2
 801219e:	eb18 0005 	adds.w	r0, r8, r5
 80121a2:	eb49 0106 	adc.w	r1, r9, r6
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	685b      	ldr	r3, [r3, #4]
 80121aa:	461d      	mov	r5, r3
 80121ac:	f04f 0600 	mov.w	r6, #0
 80121b0:	196b      	adds	r3, r5, r5
 80121b2:	eb46 0406 	adc.w	r4, r6, r6
 80121b6:	461a      	mov	r2, r3
 80121b8:	4623      	mov	r3, r4
 80121ba:	f7fe f823 	bl	8010204 <__aeabi_uldivmod>
 80121be:	4603      	mov	r3, r0
 80121c0:	460c      	mov	r4, r1
 80121c2:	461a      	mov	r2, r3
 80121c4:	4ba5      	ldr	r3, [pc, #660]	; (801245c <UART_SetConfig+0x384>)
 80121c6:	fba3 2302 	umull	r2, r3, r3, r2
 80121ca:	095b      	lsrs	r3, r3, #5
 80121cc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	461d      	mov	r5, r3
 80121d4:	f04f 0600 	mov.w	r6, #0
 80121d8:	46a9      	mov	r9, r5
 80121da:	46b2      	mov	sl, r6
 80121dc:	eb19 0309 	adds.w	r3, r9, r9
 80121e0:	eb4a 040a 	adc.w	r4, sl, sl
 80121e4:	4699      	mov	r9, r3
 80121e6:	46a2      	mov	sl, r4
 80121e8:	eb19 0905 	adds.w	r9, r9, r5
 80121ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80121f0:	f04f 0100 	mov.w	r1, #0
 80121f4:	f04f 0200 	mov.w	r2, #0
 80121f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80121fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8012200:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8012204:	4689      	mov	r9, r1
 8012206:	4692      	mov	sl, r2
 8012208:	eb19 0005 	adds.w	r0, r9, r5
 801220c:	eb4a 0106 	adc.w	r1, sl, r6
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	685b      	ldr	r3, [r3, #4]
 8012214:	461d      	mov	r5, r3
 8012216:	f04f 0600 	mov.w	r6, #0
 801221a:	196b      	adds	r3, r5, r5
 801221c:	eb46 0406 	adc.w	r4, r6, r6
 8012220:	461a      	mov	r2, r3
 8012222:	4623      	mov	r3, r4
 8012224:	f7fd ffee 	bl	8010204 <__aeabi_uldivmod>
 8012228:	4603      	mov	r3, r0
 801222a:	460c      	mov	r4, r1
 801222c:	461a      	mov	r2, r3
 801222e:	4b8b      	ldr	r3, [pc, #556]	; (801245c <UART_SetConfig+0x384>)
 8012230:	fba3 1302 	umull	r1, r3, r3, r2
 8012234:	095b      	lsrs	r3, r3, #5
 8012236:	2164      	movs	r1, #100	; 0x64
 8012238:	fb01 f303 	mul.w	r3, r1, r3
 801223c:	1ad3      	subs	r3, r2, r3
 801223e:	00db      	lsls	r3, r3, #3
 8012240:	3332      	adds	r3, #50	; 0x32
 8012242:	4a86      	ldr	r2, [pc, #536]	; (801245c <UART_SetConfig+0x384>)
 8012244:	fba2 2303 	umull	r2, r3, r2, r3
 8012248:	095b      	lsrs	r3, r3, #5
 801224a:	005b      	lsls	r3, r3, #1
 801224c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8012250:	4498      	add	r8, r3
 8012252:	68bb      	ldr	r3, [r7, #8]
 8012254:	461d      	mov	r5, r3
 8012256:	f04f 0600 	mov.w	r6, #0
 801225a:	46a9      	mov	r9, r5
 801225c:	46b2      	mov	sl, r6
 801225e:	eb19 0309 	adds.w	r3, r9, r9
 8012262:	eb4a 040a 	adc.w	r4, sl, sl
 8012266:	4699      	mov	r9, r3
 8012268:	46a2      	mov	sl, r4
 801226a:	eb19 0905 	adds.w	r9, r9, r5
 801226e:	eb4a 0a06 	adc.w	sl, sl, r6
 8012272:	f04f 0100 	mov.w	r1, #0
 8012276:	f04f 0200 	mov.w	r2, #0
 801227a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801227e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8012282:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8012286:	4689      	mov	r9, r1
 8012288:	4692      	mov	sl, r2
 801228a:	eb19 0005 	adds.w	r0, r9, r5
 801228e:	eb4a 0106 	adc.w	r1, sl, r6
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	685b      	ldr	r3, [r3, #4]
 8012296:	461d      	mov	r5, r3
 8012298:	f04f 0600 	mov.w	r6, #0
 801229c:	196b      	adds	r3, r5, r5
 801229e:	eb46 0406 	adc.w	r4, r6, r6
 80122a2:	461a      	mov	r2, r3
 80122a4:	4623      	mov	r3, r4
 80122a6:	f7fd ffad 	bl	8010204 <__aeabi_uldivmod>
 80122aa:	4603      	mov	r3, r0
 80122ac:	460c      	mov	r4, r1
 80122ae:	461a      	mov	r2, r3
 80122b0:	4b6a      	ldr	r3, [pc, #424]	; (801245c <UART_SetConfig+0x384>)
 80122b2:	fba3 1302 	umull	r1, r3, r3, r2
 80122b6:	095b      	lsrs	r3, r3, #5
 80122b8:	2164      	movs	r1, #100	; 0x64
 80122ba:	fb01 f303 	mul.w	r3, r1, r3
 80122be:	1ad3      	subs	r3, r2, r3
 80122c0:	00db      	lsls	r3, r3, #3
 80122c2:	3332      	adds	r3, #50	; 0x32
 80122c4:	4a65      	ldr	r2, [pc, #404]	; (801245c <UART_SetConfig+0x384>)
 80122c6:	fba2 2303 	umull	r2, r3, r2, r3
 80122ca:	095b      	lsrs	r3, r3, #5
 80122cc:	f003 0207 	and.w	r2, r3, #7
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	4442      	add	r2, r8
 80122d6:	609a      	str	r2, [r3, #8]
 80122d8:	e26f      	b.n	80127ba <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80122da:	f7ff f923 	bl	8011524 <HAL_RCC_GetPCLK1Freq>
 80122de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80122e0:	68bb      	ldr	r3, [r7, #8]
 80122e2:	461d      	mov	r5, r3
 80122e4:	f04f 0600 	mov.w	r6, #0
 80122e8:	46a8      	mov	r8, r5
 80122ea:	46b1      	mov	r9, r6
 80122ec:	eb18 0308 	adds.w	r3, r8, r8
 80122f0:	eb49 0409 	adc.w	r4, r9, r9
 80122f4:	4698      	mov	r8, r3
 80122f6:	46a1      	mov	r9, r4
 80122f8:	eb18 0805 	adds.w	r8, r8, r5
 80122fc:	eb49 0906 	adc.w	r9, r9, r6
 8012300:	f04f 0100 	mov.w	r1, #0
 8012304:	f04f 0200 	mov.w	r2, #0
 8012308:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801230c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8012310:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8012314:	4688      	mov	r8, r1
 8012316:	4691      	mov	r9, r2
 8012318:	eb18 0005 	adds.w	r0, r8, r5
 801231c:	eb49 0106 	adc.w	r1, r9, r6
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	685b      	ldr	r3, [r3, #4]
 8012324:	461d      	mov	r5, r3
 8012326:	f04f 0600 	mov.w	r6, #0
 801232a:	196b      	adds	r3, r5, r5
 801232c:	eb46 0406 	adc.w	r4, r6, r6
 8012330:	461a      	mov	r2, r3
 8012332:	4623      	mov	r3, r4
 8012334:	f7fd ff66 	bl	8010204 <__aeabi_uldivmod>
 8012338:	4603      	mov	r3, r0
 801233a:	460c      	mov	r4, r1
 801233c:	461a      	mov	r2, r3
 801233e:	4b47      	ldr	r3, [pc, #284]	; (801245c <UART_SetConfig+0x384>)
 8012340:	fba3 2302 	umull	r2, r3, r3, r2
 8012344:	095b      	lsrs	r3, r3, #5
 8012346:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801234a:	68bb      	ldr	r3, [r7, #8]
 801234c:	461d      	mov	r5, r3
 801234e:	f04f 0600 	mov.w	r6, #0
 8012352:	46a9      	mov	r9, r5
 8012354:	46b2      	mov	sl, r6
 8012356:	eb19 0309 	adds.w	r3, r9, r9
 801235a:	eb4a 040a 	adc.w	r4, sl, sl
 801235e:	4699      	mov	r9, r3
 8012360:	46a2      	mov	sl, r4
 8012362:	eb19 0905 	adds.w	r9, r9, r5
 8012366:	eb4a 0a06 	adc.w	sl, sl, r6
 801236a:	f04f 0100 	mov.w	r1, #0
 801236e:	f04f 0200 	mov.w	r2, #0
 8012372:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8012376:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801237a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801237e:	4689      	mov	r9, r1
 8012380:	4692      	mov	sl, r2
 8012382:	eb19 0005 	adds.w	r0, r9, r5
 8012386:	eb4a 0106 	adc.w	r1, sl, r6
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	685b      	ldr	r3, [r3, #4]
 801238e:	461d      	mov	r5, r3
 8012390:	f04f 0600 	mov.w	r6, #0
 8012394:	196b      	adds	r3, r5, r5
 8012396:	eb46 0406 	adc.w	r4, r6, r6
 801239a:	461a      	mov	r2, r3
 801239c:	4623      	mov	r3, r4
 801239e:	f7fd ff31 	bl	8010204 <__aeabi_uldivmod>
 80123a2:	4603      	mov	r3, r0
 80123a4:	460c      	mov	r4, r1
 80123a6:	461a      	mov	r2, r3
 80123a8:	4b2c      	ldr	r3, [pc, #176]	; (801245c <UART_SetConfig+0x384>)
 80123aa:	fba3 1302 	umull	r1, r3, r3, r2
 80123ae:	095b      	lsrs	r3, r3, #5
 80123b0:	2164      	movs	r1, #100	; 0x64
 80123b2:	fb01 f303 	mul.w	r3, r1, r3
 80123b6:	1ad3      	subs	r3, r2, r3
 80123b8:	00db      	lsls	r3, r3, #3
 80123ba:	3332      	adds	r3, #50	; 0x32
 80123bc:	4a27      	ldr	r2, [pc, #156]	; (801245c <UART_SetConfig+0x384>)
 80123be:	fba2 2303 	umull	r2, r3, r2, r3
 80123c2:	095b      	lsrs	r3, r3, #5
 80123c4:	005b      	lsls	r3, r3, #1
 80123c6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80123ca:	4498      	add	r8, r3
 80123cc:	68bb      	ldr	r3, [r7, #8]
 80123ce:	461d      	mov	r5, r3
 80123d0:	f04f 0600 	mov.w	r6, #0
 80123d4:	46a9      	mov	r9, r5
 80123d6:	46b2      	mov	sl, r6
 80123d8:	eb19 0309 	adds.w	r3, r9, r9
 80123dc:	eb4a 040a 	adc.w	r4, sl, sl
 80123e0:	4699      	mov	r9, r3
 80123e2:	46a2      	mov	sl, r4
 80123e4:	eb19 0905 	adds.w	r9, r9, r5
 80123e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80123ec:	f04f 0100 	mov.w	r1, #0
 80123f0:	f04f 0200 	mov.w	r2, #0
 80123f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80123f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80123fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8012400:	4689      	mov	r9, r1
 8012402:	4692      	mov	sl, r2
 8012404:	eb19 0005 	adds.w	r0, r9, r5
 8012408:	eb4a 0106 	adc.w	r1, sl, r6
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	685b      	ldr	r3, [r3, #4]
 8012410:	461d      	mov	r5, r3
 8012412:	f04f 0600 	mov.w	r6, #0
 8012416:	196b      	adds	r3, r5, r5
 8012418:	eb46 0406 	adc.w	r4, r6, r6
 801241c:	461a      	mov	r2, r3
 801241e:	4623      	mov	r3, r4
 8012420:	f7fd fef0 	bl	8010204 <__aeabi_uldivmod>
 8012424:	4603      	mov	r3, r0
 8012426:	460c      	mov	r4, r1
 8012428:	461a      	mov	r2, r3
 801242a:	4b0c      	ldr	r3, [pc, #48]	; (801245c <UART_SetConfig+0x384>)
 801242c:	fba3 1302 	umull	r1, r3, r3, r2
 8012430:	095b      	lsrs	r3, r3, #5
 8012432:	2164      	movs	r1, #100	; 0x64
 8012434:	fb01 f303 	mul.w	r3, r1, r3
 8012438:	1ad3      	subs	r3, r2, r3
 801243a:	00db      	lsls	r3, r3, #3
 801243c:	3332      	adds	r3, #50	; 0x32
 801243e:	4a07      	ldr	r2, [pc, #28]	; (801245c <UART_SetConfig+0x384>)
 8012440:	fba2 2303 	umull	r2, r3, r2, r3
 8012444:	095b      	lsrs	r3, r3, #5
 8012446:	f003 0207 	and.w	r2, r3, #7
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	4442      	add	r2, r8
 8012450:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8012452:	e1b2      	b.n	80127ba <UART_SetConfig+0x6e2>
 8012454:	40011000 	.word	0x40011000
 8012458:	40011400 	.word	0x40011400
 801245c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	4ad7      	ldr	r2, [pc, #860]	; (80127c4 <UART_SetConfig+0x6ec>)
 8012466:	4293      	cmp	r3, r2
 8012468:	d005      	beq.n	8012476 <UART_SetConfig+0x39e>
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	4ad6      	ldr	r2, [pc, #856]	; (80127c8 <UART_SetConfig+0x6f0>)
 8012470:	4293      	cmp	r3, r2
 8012472:	f040 80d1 	bne.w	8012618 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8012476:	f7ff f869 	bl	801154c <HAL_RCC_GetPCLK2Freq>
 801247a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	469a      	mov	sl, r3
 8012480:	f04f 0b00 	mov.w	fp, #0
 8012484:	46d0      	mov	r8, sl
 8012486:	46d9      	mov	r9, fp
 8012488:	eb18 0308 	adds.w	r3, r8, r8
 801248c:	eb49 0409 	adc.w	r4, r9, r9
 8012490:	4698      	mov	r8, r3
 8012492:	46a1      	mov	r9, r4
 8012494:	eb18 080a 	adds.w	r8, r8, sl
 8012498:	eb49 090b 	adc.w	r9, r9, fp
 801249c:	f04f 0100 	mov.w	r1, #0
 80124a0:	f04f 0200 	mov.w	r2, #0
 80124a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80124a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80124ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80124b0:	4688      	mov	r8, r1
 80124b2:	4691      	mov	r9, r2
 80124b4:	eb1a 0508 	adds.w	r5, sl, r8
 80124b8:	eb4b 0609 	adc.w	r6, fp, r9
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	685b      	ldr	r3, [r3, #4]
 80124c0:	4619      	mov	r1, r3
 80124c2:	f04f 0200 	mov.w	r2, #0
 80124c6:	f04f 0300 	mov.w	r3, #0
 80124ca:	f04f 0400 	mov.w	r4, #0
 80124ce:	0094      	lsls	r4, r2, #2
 80124d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80124d4:	008b      	lsls	r3, r1, #2
 80124d6:	461a      	mov	r2, r3
 80124d8:	4623      	mov	r3, r4
 80124da:	4628      	mov	r0, r5
 80124dc:	4631      	mov	r1, r6
 80124de:	f7fd fe91 	bl	8010204 <__aeabi_uldivmod>
 80124e2:	4603      	mov	r3, r0
 80124e4:	460c      	mov	r4, r1
 80124e6:	461a      	mov	r2, r3
 80124e8:	4bb8      	ldr	r3, [pc, #736]	; (80127cc <UART_SetConfig+0x6f4>)
 80124ea:	fba3 2302 	umull	r2, r3, r3, r2
 80124ee:	095b      	lsrs	r3, r3, #5
 80124f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80124f4:	68bb      	ldr	r3, [r7, #8]
 80124f6:	469b      	mov	fp, r3
 80124f8:	f04f 0c00 	mov.w	ip, #0
 80124fc:	46d9      	mov	r9, fp
 80124fe:	46e2      	mov	sl, ip
 8012500:	eb19 0309 	adds.w	r3, r9, r9
 8012504:	eb4a 040a 	adc.w	r4, sl, sl
 8012508:	4699      	mov	r9, r3
 801250a:	46a2      	mov	sl, r4
 801250c:	eb19 090b 	adds.w	r9, r9, fp
 8012510:	eb4a 0a0c 	adc.w	sl, sl, ip
 8012514:	f04f 0100 	mov.w	r1, #0
 8012518:	f04f 0200 	mov.w	r2, #0
 801251c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8012520:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8012524:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8012528:	4689      	mov	r9, r1
 801252a:	4692      	mov	sl, r2
 801252c:	eb1b 0509 	adds.w	r5, fp, r9
 8012530:	eb4c 060a 	adc.w	r6, ip, sl
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	685b      	ldr	r3, [r3, #4]
 8012538:	4619      	mov	r1, r3
 801253a:	f04f 0200 	mov.w	r2, #0
 801253e:	f04f 0300 	mov.w	r3, #0
 8012542:	f04f 0400 	mov.w	r4, #0
 8012546:	0094      	lsls	r4, r2, #2
 8012548:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801254c:	008b      	lsls	r3, r1, #2
 801254e:	461a      	mov	r2, r3
 8012550:	4623      	mov	r3, r4
 8012552:	4628      	mov	r0, r5
 8012554:	4631      	mov	r1, r6
 8012556:	f7fd fe55 	bl	8010204 <__aeabi_uldivmod>
 801255a:	4603      	mov	r3, r0
 801255c:	460c      	mov	r4, r1
 801255e:	461a      	mov	r2, r3
 8012560:	4b9a      	ldr	r3, [pc, #616]	; (80127cc <UART_SetConfig+0x6f4>)
 8012562:	fba3 1302 	umull	r1, r3, r3, r2
 8012566:	095b      	lsrs	r3, r3, #5
 8012568:	2164      	movs	r1, #100	; 0x64
 801256a:	fb01 f303 	mul.w	r3, r1, r3
 801256e:	1ad3      	subs	r3, r2, r3
 8012570:	011b      	lsls	r3, r3, #4
 8012572:	3332      	adds	r3, #50	; 0x32
 8012574:	4a95      	ldr	r2, [pc, #596]	; (80127cc <UART_SetConfig+0x6f4>)
 8012576:	fba2 2303 	umull	r2, r3, r2, r3
 801257a:	095b      	lsrs	r3, r3, #5
 801257c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012580:	4498      	add	r8, r3
 8012582:	68bb      	ldr	r3, [r7, #8]
 8012584:	469b      	mov	fp, r3
 8012586:	f04f 0c00 	mov.w	ip, #0
 801258a:	46d9      	mov	r9, fp
 801258c:	46e2      	mov	sl, ip
 801258e:	eb19 0309 	adds.w	r3, r9, r9
 8012592:	eb4a 040a 	adc.w	r4, sl, sl
 8012596:	4699      	mov	r9, r3
 8012598:	46a2      	mov	sl, r4
 801259a:	eb19 090b 	adds.w	r9, r9, fp
 801259e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80125a2:	f04f 0100 	mov.w	r1, #0
 80125a6:	f04f 0200 	mov.w	r2, #0
 80125aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80125ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80125b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80125b6:	4689      	mov	r9, r1
 80125b8:	4692      	mov	sl, r2
 80125ba:	eb1b 0509 	adds.w	r5, fp, r9
 80125be:	eb4c 060a 	adc.w	r6, ip, sl
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	685b      	ldr	r3, [r3, #4]
 80125c6:	4619      	mov	r1, r3
 80125c8:	f04f 0200 	mov.w	r2, #0
 80125cc:	f04f 0300 	mov.w	r3, #0
 80125d0:	f04f 0400 	mov.w	r4, #0
 80125d4:	0094      	lsls	r4, r2, #2
 80125d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80125da:	008b      	lsls	r3, r1, #2
 80125dc:	461a      	mov	r2, r3
 80125de:	4623      	mov	r3, r4
 80125e0:	4628      	mov	r0, r5
 80125e2:	4631      	mov	r1, r6
 80125e4:	f7fd fe0e 	bl	8010204 <__aeabi_uldivmod>
 80125e8:	4603      	mov	r3, r0
 80125ea:	460c      	mov	r4, r1
 80125ec:	461a      	mov	r2, r3
 80125ee:	4b77      	ldr	r3, [pc, #476]	; (80127cc <UART_SetConfig+0x6f4>)
 80125f0:	fba3 1302 	umull	r1, r3, r3, r2
 80125f4:	095b      	lsrs	r3, r3, #5
 80125f6:	2164      	movs	r1, #100	; 0x64
 80125f8:	fb01 f303 	mul.w	r3, r1, r3
 80125fc:	1ad3      	subs	r3, r2, r3
 80125fe:	011b      	lsls	r3, r3, #4
 8012600:	3332      	adds	r3, #50	; 0x32
 8012602:	4a72      	ldr	r2, [pc, #456]	; (80127cc <UART_SetConfig+0x6f4>)
 8012604:	fba2 2303 	umull	r2, r3, r2, r3
 8012608:	095b      	lsrs	r3, r3, #5
 801260a:	f003 020f 	and.w	r2, r3, #15
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	4442      	add	r2, r8
 8012614:	609a      	str	r2, [r3, #8]
 8012616:	e0d0      	b.n	80127ba <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8012618:	f7fe ff84 	bl	8011524 <HAL_RCC_GetPCLK1Freq>
 801261c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801261e:	68bb      	ldr	r3, [r7, #8]
 8012620:	469a      	mov	sl, r3
 8012622:	f04f 0b00 	mov.w	fp, #0
 8012626:	46d0      	mov	r8, sl
 8012628:	46d9      	mov	r9, fp
 801262a:	eb18 0308 	adds.w	r3, r8, r8
 801262e:	eb49 0409 	adc.w	r4, r9, r9
 8012632:	4698      	mov	r8, r3
 8012634:	46a1      	mov	r9, r4
 8012636:	eb18 080a 	adds.w	r8, r8, sl
 801263a:	eb49 090b 	adc.w	r9, r9, fp
 801263e:	f04f 0100 	mov.w	r1, #0
 8012642:	f04f 0200 	mov.w	r2, #0
 8012646:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801264a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801264e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8012652:	4688      	mov	r8, r1
 8012654:	4691      	mov	r9, r2
 8012656:	eb1a 0508 	adds.w	r5, sl, r8
 801265a:	eb4b 0609 	adc.w	r6, fp, r9
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	685b      	ldr	r3, [r3, #4]
 8012662:	4619      	mov	r1, r3
 8012664:	f04f 0200 	mov.w	r2, #0
 8012668:	f04f 0300 	mov.w	r3, #0
 801266c:	f04f 0400 	mov.w	r4, #0
 8012670:	0094      	lsls	r4, r2, #2
 8012672:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8012676:	008b      	lsls	r3, r1, #2
 8012678:	461a      	mov	r2, r3
 801267a:	4623      	mov	r3, r4
 801267c:	4628      	mov	r0, r5
 801267e:	4631      	mov	r1, r6
 8012680:	f7fd fdc0 	bl	8010204 <__aeabi_uldivmod>
 8012684:	4603      	mov	r3, r0
 8012686:	460c      	mov	r4, r1
 8012688:	461a      	mov	r2, r3
 801268a:	4b50      	ldr	r3, [pc, #320]	; (80127cc <UART_SetConfig+0x6f4>)
 801268c:	fba3 2302 	umull	r2, r3, r3, r2
 8012690:	095b      	lsrs	r3, r3, #5
 8012692:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8012696:	68bb      	ldr	r3, [r7, #8]
 8012698:	469b      	mov	fp, r3
 801269a:	f04f 0c00 	mov.w	ip, #0
 801269e:	46d9      	mov	r9, fp
 80126a0:	46e2      	mov	sl, ip
 80126a2:	eb19 0309 	adds.w	r3, r9, r9
 80126a6:	eb4a 040a 	adc.w	r4, sl, sl
 80126aa:	4699      	mov	r9, r3
 80126ac:	46a2      	mov	sl, r4
 80126ae:	eb19 090b 	adds.w	r9, r9, fp
 80126b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80126b6:	f04f 0100 	mov.w	r1, #0
 80126ba:	f04f 0200 	mov.w	r2, #0
 80126be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80126c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80126c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80126ca:	4689      	mov	r9, r1
 80126cc:	4692      	mov	sl, r2
 80126ce:	eb1b 0509 	adds.w	r5, fp, r9
 80126d2:	eb4c 060a 	adc.w	r6, ip, sl
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	685b      	ldr	r3, [r3, #4]
 80126da:	4619      	mov	r1, r3
 80126dc:	f04f 0200 	mov.w	r2, #0
 80126e0:	f04f 0300 	mov.w	r3, #0
 80126e4:	f04f 0400 	mov.w	r4, #0
 80126e8:	0094      	lsls	r4, r2, #2
 80126ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80126ee:	008b      	lsls	r3, r1, #2
 80126f0:	461a      	mov	r2, r3
 80126f2:	4623      	mov	r3, r4
 80126f4:	4628      	mov	r0, r5
 80126f6:	4631      	mov	r1, r6
 80126f8:	f7fd fd84 	bl	8010204 <__aeabi_uldivmod>
 80126fc:	4603      	mov	r3, r0
 80126fe:	460c      	mov	r4, r1
 8012700:	461a      	mov	r2, r3
 8012702:	4b32      	ldr	r3, [pc, #200]	; (80127cc <UART_SetConfig+0x6f4>)
 8012704:	fba3 1302 	umull	r1, r3, r3, r2
 8012708:	095b      	lsrs	r3, r3, #5
 801270a:	2164      	movs	r1, #100	; 0x64
 801270c:	fb01 f303 	mul.w	r3, r1, r3
 8012710:	1ad3      	subs	r3, r2, r3
 8012712:	011b      	lsls	r3, r3, #4
 8012714:	3332      	adds	r3, #50	; 0x32
 8012716:	4a2d      	ldr	r2, [pc, #180]	; (80127cc <UART_SetConfig+0x6f4>)
 8012718:	fba2 2303 	umull	r2, r3, r2, r3
 801271c:	095b      	lsrs	r3, r3, #5
 801271e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012722:	4498      	add	r8, r3
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	469b      	mov	fp, r3
 8012728:	f04f 0c00 	mov.w	ip, #0
 801272c:	46d9      	mov	r9, fp
 801272e:	46e2      	mov	sl, ip
 8012730:	eb19 0309 	adds.w	r3, r9, r9
 8012734:	eb4a 040a 	adc.w	r4, sl, sl
 8012738:	4699      	mov	r9, r3
 801273a:	46a2      	mov	sl, r4
 801273c:	eb19 090b 	adds.w	r9, r9, fp
 8012740:	eb4a 0a0c 	adc.w	sl, sl, ip
 8012744:	f04f 0100 	mov.w	r1, #0
 8012748:	f04f 0200 	mov.w	r2, #0
 801274c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8012750:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8012754:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8012758:	4689      	mov	r9, r1
 801275a:	4692      	mov	sl, r2
 801275c:	eb1b 0509 	adds.w	r5, fp, r9
 8012760:	eb4c 060a 	adc.w	r6, ip, sl
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	685b      	ldr	r3, [r3, #4]
 8012768:	4619      	mov	r1, r3
 801276a:	f04f 0200 	mov.w	r2, #0
 801276e:	f04f 0300 	mov.w	r3, #0
 8012772:	f04f 0400 	mov.w	r4, #0
 8012776:	0094      	lsls	r4, r2, #2
 8012778:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801277c:	008b      	lsls	r3, r1, #2
 801277e:	461a      	mov	r2, r3
 8012780:	4623      	mov	r3, r4
 8012782:	4628      	mov	r0, r5
 8012784:	4631      	mov	r1, r6
 8012786:	f7fd fd3d 	bl	8010204 <__aeabi_uldivmod>
 801278a:	4603      	mov	r3, r0
 801278c:	460c      	mov	r4, r1
 801278e:	461a      	mov	r2, r3
 8012790:	4b0e      	ldr	r3, [pc, #56]	; (80127cc <UART_SetConfig+0x6f4>)
 8012792:	fba3 1302 	umull	r1, r3, r3, r2
 8012796:	095b      	lsrs	r3, r3, #5
 8012798:	2164      	movs	r1, #100	; 0x64
 801279a:	fb01 f303 	mul.w	r3, r1, r3
 801279e:	1ad3      	subs	r3, r2, r3
 80127a0:	011b      	lsls	r3, r3, #4
 80127a2:	3332      	adds	r3, #50	; 0x32
 80127a4:	4a09      	ldr	r2, [pc, #36]	; (80127cc <UART_SetConfig+0x6f4>)
 80127a6:	fba2 2303 	umull	r2, r3, r2, r3
 80127aa:	095b      	lsrs	r3, r3, #5
 80127ac:	f003 020f 	and.w	r2, r3, #15
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	4442      	add	r2, r8
 80127b6:	609a      	str	r2, [r3, #8]
}
 80127b8:	e7ff      	b.n	80127ba <UART_SetConfig+0x6e2>
 80127ba:	bf00      	nop
 80127bc:	3714      	adds	r7, #20
 80127be:	46bd      	mov	sp, r7
 80127c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127c4:	40011000 	.word	0x40011000
 80127c8:	40011400 	.word	0x40011400
 80127cc:	51eb851f 	.word	0x51eb851f

080127d0 <__errno>:
 80127d0:	4b01      	ldr	r3, [pc, #4]	; (80127d8 <__errno+0x8>)
 80127d2:	6818      	ldr	r0, [r3, #0]
 80127d4:	4770      	bx	lr
 80127d6:	bf00      	nop
 80127d8:	2000000c 	.word	0x2000000c

080127dc <__libc_init_array>:
 80127dc:	b570      	push	{r4, r5, r6, lr}
 80127de:	4e0d      	ldr	r6, [pc, #52]	; (8012814 <__libc_init_array+0x38>)
 80127e0:	4c0d      	ldr	r4, [pc, #52]	; (8012818 <__libc_init_array+0x3c>)
 80127e2:	1ba4      	subs	r4, r4, r6
 80127e4:	10a4      	asrs	r4, r4, #2
 80127e6:	2500      	movs	r5, #0
 80127e8:	42a5      	cmp	r5, r4
 80127ea:	d109      	bne.n	8012800 <__libc_init_array+0x24>
 80127ec:	4e0b      	ldr	r6, [pc, #44]	; (801281c <__libc_init_array+0x40>)
 80127ee:	4c0c      	ldr	r4, [pc, #48]	; (8012820 <__libc_init_array+0x44>)
 80127f0:	f000 fc88 	bl	8013104 <_init>
 80127f4:	1ba4      	subs	r4, r4, r6
 80127f6:	10a4      	asrs	r4, r4, #2
 80127f8:	2500      	movs	r5, #0
 80127fa:	42a5      	cmp	r5, r4
 80127fc:	d105      	bne.n	801280a <__libc_init_array+0x2e>
 80127fe:	bd70      	pop	{r4, r5, r6, pc}
 8012800:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012804:	4798      	blx	r3
 8012806:	3501      	adds	r5, #1
 8012808:	e7ee      	b.n	80127e8 <__libc_init_array+0xc>
 801280a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801280e:	4798      	blx	r3
 8012810:	3501      	adds	r5, #1
 8012812:	e7f2      	b.n	80127fa <__libc_init_array+0x1e>
 8012814:	080131b8 	.word	0x080131b8
 8012818:	080131b8 	.word	0x080131b8
 801281c:	080131b8 	.word	0x080131b8
 8012820:	080131bc 	.word	0x080131bc

08012824 <memset>:
 8012824:	4402      	add	r2, r0
 8012826:	4603      	mov	r3, r0
 8012828:	4293      	cmp	r3, r2
 801282a:	d100      	bne.n	801282e <memset+0xa>
 801282c:	4770      	bx	lr
 801282e:	f803 1b01 	strb.w	r1, [r3], #1
 8012832:	e7f9      	b.n	8012828 <memset+0x4>

08012834 <_puts_r>:
 8012834:	b570      	push	{r4, r5, r6, lr}
 8012836:	460e      	mov	r6, r1
 8012838:	4605      	mov	r5, r0
 801283a:	b118      	cbz	r0, 8012844 <_puts_r+0x10>
 801283c:	6983      	ldr	r3, [r0, #24]
 801283e:	b90b      	cbnz	r3, 8012844 <_puts_r+0x10>
 8012840:	f000 fa0c 	bl	8012c5c <__sinit>
 8012844:	69ab      	ldr	r3, [r5, #24]
 8012846:	68ac      	ldr	r4, [r5, #8]
 8012848:	b913      	cbnz	r3, 8012850 <_puts_r+0x1c>
 801284a:	4628      	mov	r0, r5
 801284c:	f000 fa06 	bl	8012c5c <__sinit>
 8012850:	4b23      	ldr	r3, [pc, #140]	; (80128e0 <_puts_r+0xac>)
 8012852:	429c      	cmp	r4, r3
 8012854:	d117      	bne.n	8012886 <_puts_r+0x52>
 8012856:	686c      	ldr	r4, [r5, #4]
 8012858:	89a3      	ldrh	r3, [r4, #12]
 801285a:	071b      	lsls	r3, r3, #28
 801285c:	d51d      	bpl.n	801289a <_puts_r+0x66>
 801285e:	6923      	ldr	r3, [r4, #16]
 8012860:	b1db      	cbz	r3, 801289a <_puts_r+0x66>
 8012862:	3e01      	subs	r6, #1
 8012864:	68a3      	ldr	r3, [r4, #8]
 8012866:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801286a:	3b01      	subs	r3, #1
 801286c:	60a3      	str	r3, [r4, #8]
 801286e:	b9e9      	cbnz	r1, 80128ac <_puts_r+0x78>
 8012870:	2b00      	cmp	r3, #0
 8012872:	da2e      	bge.n	80128d2 <_puts_r+0x9e>
 8012874:	4622      	mov	r2, r4
 8012876:	210a      	movs	r1, #10
 8012878:	4628      	mov	r0, r5
 801287a:	f000 f83f 	bl	80128fc <__swbuf_r>
 801287e:	3001      	adds	r0, #1
 8012880:	d011      	beq.n	80128a6 <_puts_r+0x72>
 8012882:	200a      	movs	r0, #10
 8012884:	e011      	b.n	80128aa <_puts_r+0x76>
 8012886:	4b17      	ldr	r3, [pc, #92]	; (80128e4 <_puts_r+0xb0>)
 8012888:	429c      	cmp	r4, r3
 801288a:	d101      	bne.n	8012890 <_puts_r+0x5c>
 801288c:	68ac      	ldr	r4, [r5, #8]
 801288e:	e7e3      	b.n	8012858 <_puts_r+0x24>
 8012890:	4b15      	ldr	r3, [pc, #84]	; (80128e8 <_puts_r+0xb4>)
 8012892:	429c      	cmp	r4, r3
 8012894:	bf08      	it	eq
 8012896:	68ec      	ldreq	r4, [r5, #12]
 8012898:	e7de      	b.n	8012858 <_puts_r+0x24>
 801289a:	4621      	mov	r1, r4
 801289c:	4628      	mov	r0, r5
 801289e:	f000 f87f 	bl	80129a0 <__swsetup_r>
 80128a2:	2800      	cmp	r0, #0
 80128a4:	d0dd      	beq.n	8012862 <_puts_r+0x2e>
 80128a6:	f04f 30ff 	mov.w	r0, #4294967295
 80128aa:	bd70      	pop	{r4, r5, r6, pc}
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	da04      	bge.n	80128ba <_puts_r+0x86>
 80128b0:	69a2      	ldr	r2, [r4, #24]
 80128b2:	429a      	cmp	r2, r3
 80128b4:	dc06      	bgt.n	80128c4 <_puts_r+0x90>
 80128b6:	290a      	cmp	r1, #10
 80128b8:	d004      	beq.n	80128c4 <_puts_r+0x90>
 80128ba:	6823      	ldr	r3, [r4, #0]
 80128bc:	1c5a      	adds	r2, r3, #1
 80128be:	6022      	str	r2, [r4, #0]
 80128c0:	7019      	strb	r1, [r3, #0]
 80128c2:	e7cf      	b.n	8012864 <_puts_r+0x30>
 80128c4:	4622      	mov	r2, r4
 80128c6:	4628      	mov	r0, r5
 80128c8:	f000 f818 	bl	80128fc <__swbuf_r>
 80128cc:	3001      	adds	r0, #1
 80128ce:	d1c9      	bne.n	8012864 <_puts_r+0x30>
 80128d0:	e7e9      	b.n	80128a6 <_puts_r+0x72>
 80128d2:	6823      	ldr	r3, [r4, #0]
 80128d4:	200a      	movs	r0, #10
 80128d6:	1c5a      	adds	r2, r3, #1
 80128d8:	6022      	str	r2, [r4, #0]
 80128da:	7018      	strb	r0, [r3, #0]
 80128dc:	e7e5      	b.n	80128aa <_puts_r+0x76>
 80128de:	bf00      	nop
 80128e0:	08013170 	.word	0x08013170
 80128e4:	08013190 	.word	0x08013190
 80128e8:	08013150 	.word	0x08013150

080128ec <puts>:
 80128ec:	4b02      	ldr	r3, [pc, #8]	; (80128f8 <puts+0xc>)
 80128ee:	4601      	mov	r1, r0
 80128f0:	6818      	ldr	r0, [r3, #0]
 80128f2:	f7ff bf9f 	b.w	8012834 <_puts_r>
 80128f6:	bf00      	nop
 80128f8:	2000000c 	.word	0x2000000c

080128fc <__swbuf_r>:
 80128fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128fe:	460e      	mov	r6, r1
 8012900:	4614      	mov	r4, r2
 8012902:	4605      	mov	r5, r0
 8012904:	b118      	cbz	r0, 801290e <__swbuf_r+0x12>
 8012906:	6983      	ldr	r3, [r0, #24]
 8012908:	b90b      	cbnz	r3, 801290e <__swbuf_r+0x12>
 801290a:	f000 f9a7 	bl	8012c5c <__sinit>
 801290e:	4b21      	ldr	r3, [pc, #132]	; (8012994 <__swbuf_r+0x98>)
 8012910:	429c      	cmp	r4, r3
 8012912:	d12a      	bne.n	801296a <__swbuf_r+0x6e>
 8012914:	686c      	ldr	r4, [r5, #4]
 8012916:	69a3      	ldr	r3, [r4, #24]
 8012918:	60a3      	str	r3, [r4, #8]
 801291a:	89a3      	ldrh	r3, [r4, #12]
 801291c:	071a      	lsls	r2, r3, #28
 801291e:	d52e      	bpl.n	801297e <__swbuf_r+0x82>
 8012920:	6923      	ldr	r3, [r4, #16]
 8012922:	b363      	cbz	r3, 801297e <__swbuf_r+0x82>
 8012924:	6923      	ldr	r3, [r4, #16]
 8012926:	6820      	ldr	r0, [r4, #0]
 8012928:	1ac0      	subs	r0, r0, r3
 801292a:	6963      	ldr	r3, [r4, #20]
 801292c:	b2f6      	uxtb	r6, r6
 801292e:	4283      	cmp	r3, r0
 8012930:	4637      	mov	r7, r6
 8012932:	dc04      	bgt.n	801293e <__swbuf_r+0x42>
 8012934:	4621      	mov	r1, r4
 8012936:	4628      	mov	r0, r5
 8012938:	f000 f926 	bl	8012b88 <_fflush_r>
 801293c:	bb28      	cbnz	r0, 801298a <__swbuf_r+0x8e>
 801293e:	68a3      	ldr	r3, [r4, #8]
 8012940:	3b01      	subs	r3, #1
 8012942:	60a3      	str	r3, [r4, #8]
 8012944:	6823      	ldr	r3, [r4, #0]
 8012946:	1c5a      	adds	r2, r3, #1
 8012948:	6022      	str	r2, [r4, #0]
 801294a:	701e      	strb	r6, [r3, #0]
 801294c:	6963      	ldr	r3, [r4, #20]
 801294e:	3001      	adds	r0, #1
 8012950:	4283      	cmp	r3, r0
 8012952:	d004      	beq.n	801295e <__swbuf_r+0x62>
 8012954:	89a3      	ldrh	r3, [r4, #12]
 8012956:	07db      	lsls	r3, r3, #31
 8012958:	d519      	bpl.n	801298e <__swbuf_r+0x92>
 801295a:	2e0a      	cmp	r6, #10
 801295c:	d117      	bne.n	801298e <__swbuf_r+0x92>
 801295e:	4621      	mov	r1, r4
 8012960:	4628      	mov	r0, r5
 8012962:	f000 f911 	bl	8012b88 <_fflush_r>
 8012966:	b190      	cbz	r0, 801298e <__swbuf_r+0x92>
 8012968:	e00f      	b.n	801298a <__swbuf_r+0x8e>
 801296a:	4b0b      	ldr	r3, [pc, #44]	; (8012998 <__swbuf_r+0x9c>)
 801296c:	429c      	cmp	r4, r3
 801296e:	d101      	bne.n	8012974 <__swbuf_r+0x78>
 8012970:	68ac      	ldr	r4, [r5, #8]
 8012972:	e7d0      	b.n	8012916 <__swbuf_r+0x1a>
 8012974:	4b09      	ldr	r3, [pc, #36]	; (801299c <__swbuf_r+0xa0>)
 8012976:	429c      	cmp	r4, r3
 8012978:	bf08      	it	eq
 801297a:	68ec      	ldreq	r4, [r5, #12]
 801297c:	e7cb      	b.n	8012916 <__swbuf_r+0x1a>
 801297e:	4621      	mov	r1, r4
 8012980:	4628      	mov	r0, r5
 8012982:	f000 f80d 	bl	80129a0 <__swsetup_r>
 8012986:	2800      	cmp	r0, #0
 8012988:	d0cc      	beq.n	8012924 <__swbuf_r+0x28>
 801298a:	f04f 37ff 	mov.w	r7, #4294967295
 801298e:	4638      	mov	r0, r7
 8012990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012992:	bf00      	nop
 8012994:	08013170 	.word	0x08013170
 8012998:	08013190 	.word	0x08013190
 801299c:	08013150 	.word	0x08013150

080129a0 <__swsetup_r>:
 80129a0:	4b32      	ldr	r3, [pc, #200]	; (8012a6c <__swsetup_r+0xcc>)
 80129a2:	b570      	push	{r4, r5, r6, lr}
 80129a4:	681d      	ldr	r5, [r3, #0]
 80129a6:	4606      	mov	r6, r0
 80129a8:	460c      	mov	r4, r1
 80129aa:	b125      	cbz	r5, 80129b6 <__swsetup_r+0x16>
 80129ac:	69ab      	ldr	r3, [r5, #24]
 80129ae:	b913      	cbnz	r3, 80129b6 <__swsetup_r+0x16>
 80129b0:	4628      	mov	r0, r5
 80129b2:	f000 f953 	bl	8012c5c <__sinit>
 80129b6:	4b2e      	ldr	r3, [pc, #184]	; (8012a70 <__swsetup_r+0xd0>)
 80129b8:	429c      	cmp	r4, r3
 80129ba:	d10f      	bne.n	80129dc <__swsetup_r+0x3c>
 80129bc:	686c      	ldr	r4, [r5, #4]
 80129be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129c2:	b29a      	uxth	r2, r3
 80129c4:	0715      	lsls	r5, r2, #28
 80129c6:	d42c      	bmi.n	8012a22 <__swsetup_r+0x82>
 80129c8:	06d0      	lsls	r0, r2, #27
 80129ca:	d411      	bmi.n	80129f0 <__swsetup_r+0x50>
 80129cc:	2209      	movs	r2, #9
 80129ce:	6032      	str	r2, [r6, #0]
 80129d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80129d4:	81a3      	strh	r3, [r4, #12]
 80129d6:	f04f 30ff 	mov.w	r0, #4294967295
 80129da:	e03e      	b.n	8012a5a <__swsetup_r+0xba>
 80129dc:	4b25      	ldr	r3, [pc, #148]	; (8012a74 <__swsetup_r+0xd4>)
 80129de:	429c      	cmp	r4, r3
 80129e0:	d101      	bne.n	80129e6 <__swsetup_r+0x46>
 80129e2:	68ac      	ldr	r4, [r5, #8]
 80129e4:	e7eb      	b.n	80129be <__swsetup_r+0x1e>
 80129e6:	4b24      	ldr	r3, [pc, #144]	; (8012a78 <__swsetup_r+0xd8>)
 80129e8:	429c      	cmp	r4, r3
 80129ea:	bf08      	it	eq
 80129ec:	68ec      	ldreq	r4, [r5, #12]
 80129ee:	e7e6      	b.n	80129be <__swsetup_r+0x1e>
 80129f0:	0751      	lsls	r1, r2, #29
 80129f2:	d512      	bpl.n	8012a1a <__swsetup_r+0x7a>
 80129f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80129f6:	b141      	cbz	r1, 8012a0a <__swsetup_r+0x6a>
 80129f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80129fc:	4299      	cmp	r1, r3
 80129fe:	d002      	beq.n	8012a06 <__swsetup_r+0x66>
 8012a00:	4630      	mov	r0, r6
 8012a02:	f000 fa19 	bl	8012e38 <_free_r>
 8012a06:	2300      	movs	r3, #0
 8012a08:	6363      	str	r3, [r4, #52]	; 0x34
 8012a0a:	89a3      	ldrh	r3, [r4, #12]
 8012a0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012a10:	81a3      	strh	r3, [r4, #12]
 8012a12:	2300      	movs	r3, #0
 8012a14:	6063      	str	r3, [r4, #4]
 8012a16:	6923      	ldr	r3, [r4, #16]
 8012a18:	6023      	str	r3, [r4, #0]
 8012a1a:	89a3      	ldrh	r3, [r4, #12]
 8012a1c:	f043 0308 	orr.w	r3, r3, #8
 8012a20:	81a3      	strh	r3, [r4, #12]
 8012a22:	6923      	ldr	r3, [r4, #16]
 8012a24:	b94b      	cbnz	r3, 8012a3a <__swsetup_r+0x9a>
 8012a26:	89a3      	ldrh	r3, [r4, #12]
 8012a28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012a30:	d003      	beq.n	8012a3a <__swsetup_r+0x9a>
 8012a32:	4621      	mov	r1, r4
 8012a34:	4630      	mov	r0, r6
 8012a36:	f000 f9bf 	bl	8012db8 <__smakebuf_r>
 8012a3a:	89a2      	ldrh	r2, [r4, #12]
 8012a3c:	f012 0301 	ands.w	r3, r2, #1
 8012a40:	d00c      	beq.n	8012a5c <__swsetup_r+0xbc>
 8012a42:	2300      	movs	r3, #0
 8012a44:	60a3      	str	r3, [r4, #8]
 8012a46:	6963      	ldr	r3, [r4, #20]
 8012a48:	425b      	negs	r3, r3
 8012a4a:	61a3      	str	r3, [r4, #24]
 8012a4c:	6923      	ldr	r3, [r4, #16]
 8012a4e:	b953      	cbnz	r3, 8012a66 <__swsetup_r+0xc6>
 8012a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a54:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012a58:	d1ba      	bne.n	80129d0 <__swsetup_r+0x30>
 8012a5a:	bd70      	pop	{r4, r5, r6, pc}
 8012a5c:	0792      	lsls	r2, r2, #30
 8012a5e:	bf58      	it	pl
 8012a60:	6963      	ldrpl	r3, [r4, #20]
 8012a62:	60a3      	str	r3, [r4, #8]
 8012a64:	e7f2      	b.n	8012a4c <__swsetup_r+0xac>
 8012a66:	2000      	movs	r0, #0
 8012a68:	e7f7      	b.n	8012a5a <__swsetup_r+0xba>
 8012a6a:	bf00      	nop
 8012a6c:	2000000c 	.word	0x2000000c
 8012a70:	08013170 	.word	0x08013170
 8012a74:	08013190 	.word	0x08013190
 8012a78:	08013150 	.word	0x08013150

08012a7c <__sflush_r>:
 8012a7c:	898a      	ldrh	r2, [r1, #12]
 8012a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a82:	4605      	mov	r5, r0
 8012a84:	0710      	lsls	r0, r2, #28
 8012a86:	460c      	mov	r4, r1
 8012a88:	d458      	bmi.n	8012b3c <__sflush_r+0xc0>
 8012a8a:	684b      	ldr	r3, [r1, #4]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	dc05      	bgt.n	8012a9c <__sflush_r+0x20>
 8012a90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	dc02      	bgt.n	8012a9c <__sflush_r+0x20>
 8012a96:	2000      	movs	r0, #0
 8012a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012a9e:	2e00      	cmp	r6, #0
 8012aa0:	d0f9      	beq.n	8012a96 <__sflush_r+0x1a>
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012aa8:	682f      	ldr	r7, [r5, #0]
 8012aaa:	6a21      	ldr	r1, [r4, #32]
 8012aac:	602b      	str	r3, [r5, #0]
 8012aae:	d032      	beq.n	8012b16 <__sflush_r+0x9a>
 8012ab0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012ab2:	89a3      	ldrh	r3, [r4, #12]
 8012ab4:	075a      	lsls	r2, r3, #29
 8012ab6:	d505      	bpl.n	8012ac4 <__sflush_r+0x48>
 8012ab8:	6863      	ldr	r3, [r4, #4]
 8012aba:	1ac0      	subs	r0, r0, r3
 8012abc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012abe:	b10b      	cbz	r3, 8012ac4 <__sflush_r+0x48>
 8012ac0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012ac2:	1ac0      	subs	r0, r0, r3
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	4602      	mov	r2, r0
 8012ac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012aca:	6a21      	ldr	r1, [r4, #32]
 8012acc:	4628      	mov	r0, r5
 8012ace:	47b0      	blx	r6
 8012ad0:	1c43      	adds	r3, r0, #1
 8012ad2:	89a3      	ldrh	r3, [r4, #12]
 8012ad4:	d106      	bne.n	8012ae4 <__sflush_r+0x68>
 8012ad6:	6829      	ldr	r1, [r5, #0]
 8012ad8:	291d      	cmp	r1, #29
 8012ada:	d848      	bhi.n	8012b6e <__sflush_r+0xf2>
 8012adc:	4a29      	ldr	r2, [pc, #164]	; (8012b84 <__sflush_r+0x108>)
 8012ade:	40ca      	lsrs	r2, r1
 8012ae0:	07d6      	lsls	r6, r2, #31
 8012ae2:	d544      	bpl.n	8012b6e <__sflush_r+0xf2>
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	6062      	str	r2, [r4, #4]
 8012ae8:	04d9      	lsls	r1, r3, #19
 8012aea:	6922      	ldr	r2, [r4, #16]
 8012aec:	6022      	str	r2, [r4, #0]
 8012aee:	d504      	bpl.n	8012afa <__sflush_r+0x7e>
 8012af0:	1c42      	adds	r2, r0, #1
 8012af2:	d101      	bne.n	8012af8 <__sflush_r+0x7c>
 8012af4:	682b      	ldr	r3, [r5, #0]
 8012af6:	b903      	cbnz	r3, 8012afa <__sflush_r+0x7e>
 8012af8:	6560      	str	r0, [r4, #84]	; 0x54
 8012afa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012afc:	602f      	str	r7, [r5, #0]
 8012afe:	2900      	cmp	r1, #0
 8012b00:	d0c9      	beq.n	8012a96 <__sflush_r+0x1a>
 8012b02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012b06:	4299      	cmp	r1, r3
 8012b08:	d002      	beq.n	8012b10 <__sflush_r+0x94>
 8012b0a:	4628      	mov	r0, r5
 8012b0c:	f000 f994 	bl	8012e38 <_free_r>
 8012b10:	2000      	movs	r0, #0
 8012b12:	6360      	str	r0, [r4, #52]	; 0x34
 8012b14:	e7c0      	b.n	8012a98 <__sflush_r+0x1c>
 8012b16:	2301      	movs	r3, #1
 8012b18:	4628      	mov	r0, r5
 8012b1a:	47b0      	blx	r6
 8012b1c:	1c41      	adds	r1, r0, #1
 8012b1e:	d1c8      	bne.n	8012ab2 <__sflush_r+0x36>
 8012b20:	682b      	ldr	r3, [r5, #0]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d0c5      	beq.n	8012ab2 <__sflush_r+0x36>
 8012b26:	2b1d      	cmp	r3, #29
 8012b28:	d001      	beq.n	8012b2e <__sflush_r+0xb2>
 8012b2a:	2b16      	cmp	r3, #22
 8012b2c:	d101      	bne.n	8012b32 <__sflush_r+0xb6>
 8012b2e:	602f      	str	r7, [r5, #0]
 8012b30:	e7b1      	b.n	8012a96 <__sflush_r+0x1a>
 8012b32:	89a3      	ldrh	r3, [r4, #12]
 8012b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b38:	81a3      	strh	r3, [r4, #12]
 8012b3a:	e7ad      	b.n	8012a98 <__sflush_r+0x1c>
 8012b3c:	690f      	ldr	r7, [r1, #16]
 8012b3e:	2f00      	cmp	r7, #0
 8012b40:	d0a9      	beq.n	8012a96 <__sflush_r+0x1a>
 8012b42:	0793      	lsls	r3, r2, #30
 8012b44:	680e      	ldr	r6, [r1, #0]
 8012b46:	bf08      	it	eq
 8012b48:	694b      	ldreq	r3, [r1, #20]
 8012b4a:	600f      	str	r7, [r1, #0]
 8012b4c:	bf18      	it	ne
 8012b4e:	2300      	movne	r3, #0
 8012b50:	eba6 0807 	sub.w	r8, r6, r7
 8012b54:	608b      	str	r3, [r1, #8]
 8012b56:	f1b8 0f00 	cmp.w	r8, #0
 8012b5a:	dd9c      	ble.n	8012a96 <__sflush_r+0x1a>
 8012b5c:	4643      	mov	r3, r8
 8012b5e:	463a      	mov	r2, r7
 8012b60:	6a21      	ldr	r1, [r4, #32]
 8012b62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012b64:	4628      	mov	r0, r5
 8012b66:	47b0      	blx	r6
 8012b68:	2800      	cmp	r0, #0
 8012b6a:	dc06      	bgt.n	8012b7a <__sflush_r+0xfe>
 8012b6c:	89a3      	ldrh	r3, [r4, #12]
 8012b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b72:	81a3      	strh	r3, [r4, #12]
 8012b74:	f04f 30ff 	mov.w	r0, #4294967295
 8012b78:	e78e      	b.n	8012a98 <__sflush_r+0x1c>
 8012b7a:	4407      	add	r7, r0
 8012b7c:	eba8 0800 	sub.w	r8, r8, r0
 8012b80:	e7e9      	b.n	8012b56 <__sflush_r+0xda>
 8012b82:	bf00      	nop
 8012b84:	20400001 	.word	0x20400001

08012b88 <_fflush_r>:
 8012b88:	b538      	push	{r3, r4, r5, lr}
 8012b8a:	690b      	ldr	r3, [r1, #16]
 8012b8c:	4605      	mov	r5, r0
 8012b8e:	460c      	mov	r4, r1
 8012b90:	b1db      	cbz	r3, 8012bca <_fflush_r+0x42>
 8012b92:	b118      	cbz	r0, 8012b9c <_fflush_r+0x14>
 8012b94:	6983      	ldr	r3, [r0, #24]
 8012b96:	b90b      	cbnz	r3, 8012b9c <_fflush_r+0x14>
 8012b98:	f000 f860 	bl	8012c5c <__sinit>
 8012b9c:	4b0c      	ldr	r3, [pc, #48]	; (8012bd0 <_fflush_r+0x48>)
 8012b9e:	429c      	cmp	r4, r3
 8012ba0:	d109      	bne.n	8012bb6 <_fflush_r+0x2e>
 8012ba2:	686c      	ldr	r4, [r5, #4]
 8012ba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ba8:	b17b      	cbz	r3, 8012bca <_fflush_r+0x42>
 8012baa:	4621      	mov	r1, r4
 8012bac:	4628      	mov	r0, r5
 8012bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bb2:	f7ff bf63 	b.w	8012a7c <__sflush_r>
 8012bb6:	4b07      	ldr	r3, [pc, #28]	; (8012bd4 <_fflush_r+0x4c>)
 8012bb8:	429c      	cmp	r4, r3
 8012bba:	d101      	bne.n	8012bc0 <_fflush_r+0x38>
 8012bbc:	68ac      	ldr	r4, [r5, #8]
 8012bbe:	e7f1      	b.n	8012ba4 <_fflush_r+0x1c>
 8012bc0:	4b05      	ldr	r3, [pc, #20]	; (8012bd8 <_fflush_r+0x50>)
 8012bc2:	429c      	cmp	r4, r3
 8012bc4:	bf08      	it	eq
 8012bc6:	68ec      	ldreq	r4, [r5, #12]
 8012bc8:	e7ec      	b.n	8012ba4 <_fflush_r+0x1c>
 8012bca:	2000      	movs	r0, #0
 8012bcc:	bd38      	pop	{r3, r4, r5, pc}
 8012bce:	bf00      	nop
 8012bd0:	08013170 	.word	0x08013170
 8012bd4:	08013190 	.word	0x08013190
 8012bd8:	08013150 	.word	0x08013150

08012bdc <std>:
 8012bdc:	2300      	movs	r3, #0
 8012bde:	b510      	push	{r4, lr}
 8012be0:	4604      	mov	r4, r0
 8012be2:	e9c0 3300 	strd	r3, r3, [r0]
 8012be6:	6083      	str	r3, [r0, #8]
 8012be8:	8181      	strh	r1, [r0, #12]
 8012bea:	6643      	str	r3, [r0, #100]	; 0x64
 8012bec:	81c2      	strh	r2, [r0, #14]
 8012bee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012bf2:	6183      	str	r3, [r0, #24]
 8012bf4:	4619      	mov	r1, r3
 8012bf6:	2208      	movs	r2, #8
 8012bf8:	305c      	adds	r0, #92	; 0x5c
 8012bfa:	f7ff fe13 	bl	8012824 <memset>
 8012bfe:	4b05      	ldr	r3, [pc, #20]	; (8012c14 <std+0x38>)
 8012c00:	6263      	str	r3, [r4, #36]	; 0x24
 8012c02:	4b05      	ldr	r3, [pc, #20]	; (8012c18 <std+0x3c>)
 8012c04:	62a3      	str	r3, [r4, #40]	; 0x28
 8012c06:	4b05      	ldr	r3, [pc, #20]	; (8012c1c <std+0x40>)
 8012c08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012c0a:	4b05      	ldr	r3, [pc, #20]	; (8012c20 <std+0x44>)
 8012c0c:	6224      	str	r4, [r4, #32]
 8012c0e:	6323      	str	r3, [r4, #48]	; 0x30
 8012c10:	bd10      	pop	{r4, pc}
 8012c12:	bf00      	nop
 8012c14:	08012fa9 	.word	0x08012fa9
 8012c18:	08012fcb 	.word	0x08012fcb
 8012c1c:	08013003 	.word	0x08013003
 8012c20:	08013027 	.word	0x08013027

08012c24 <_cleanup_r>:
 8012c24:	4901      	ldr	r1, [pc, #4]	; (8012c2c <_cleanup_r+0x8>)
 8012c26:	f000 b885 	b.w	8012d34 <_fwalk_reent>
 8012c2a:	bf00      	nop
 8012c2c:	08012b89 	.word	0x08012b89

08012c30 <__sfmoreglue>:
 8012c30:	b570      	push	{r4, r5, r6, lr}
 8012c32:	1e4a      	subs	r2, r1, #1
 8012c34:	2568      	movs	r5, #104	; 0x68
 8012c36:	4355      	muls	r5, r2
 8012c38:	460e      	mov	r6, r1
 8012c3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012c3e:	f000 f949 	bl	8012ed4 <_malloc_r>
 8012c42:	4604      	mov	r4, r0
 8012c44:	b140      	cbz	r0, 8012c58 <__sfmoreglue+0x28>
 8012c46:	2100      	movs	r1, #0
 8012c48:	e9c0 1600 	strd	r1, r6, [r0]
 8012c4c:	300c      	adds	r0, #12
 8012c4e:	60a0      	str	r0, [r4, #8]
 8012c50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012c54:	f7ff fde6 	bl	8012824 <memset>
 8012c58:	4620      	mov	r0, r4
 8012c5a:	bd70      	pop	{r4, r5, r6, pc}

08012c5c <__sinit>:
 8012c5c:	6983      	ldr	r3, [r0, #24]
 8012c5e:	b510      	push	{r4, lr}
 8012c60:	4604      	mov	r4, r0
 8012c62:	bb33      	cbnz	r3, 8012cb2 <__sinit+0x56>
 8012c64:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012c68:	6503      	str	r3, [r0, #80]	; 0x50
 8012c6a:	4b12      	ldr	r3, [pc, #72]	; (8012cb4 <__sinit+0x58>)
 8012c6c:	4a12      	ldr	r2, [pc, #72]	; (8012cb8 <__sinit+0x5c>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	6282      	str	r2, [r0, #40]	; 0x28
 8012c72:	4298      	cmp	r0, r3
 8012c74:	bf04      	itt	eq
 8012c76:	2301      	moveq	r3, #1
 8012c78:	6183      	streq	r3, [r0, #24]
 8012c7a:	f000 f81f 	bl	8012cbc <__sfp>
 8012c7e:	6060      	str	r0, [r4, #4]
 8012c80:	4620      	mov	r0, r4
 8012c82:	f000 f81b 	bl	8012cbc <__sfp>
 8012c86:	60a0      	str	r0, [r4, #8]
 8012c88:	4620      	mov	r0, r4
 8012c8a:	f000 f817 	bl	8012cbc <__sfp>
 8012c8e:	2200      	movs	r2, #0
 8012c90:	60e0      	str	r0, [r4, #12]
 8012c92:	2104      	movs	r1, #4
 8012c94:	6860      	ldr	r0, [r4, #4]
 8012c96:	f7ff ffa1 	bl	8012bdc <std>
 8012c9a:	2201      	movs	r2, #1
 8012c9c:	2109      	movs	r1, #9
 8012c9e:	68a0      	ldr	r0, [r4, #8]
 8012ca0:	f7ff ff9c 	bl	8012bdc <std>
 8012ca4:	2202      	movs	r2, #2
 8012ca6:	2112      	movs	r1, #18
 8012ca8:	68e0      	ldr	r0, [r4, #12]
 8012caa:	f7ff ff97 	bl	8012bdc <std>
 8012cae:	2301      	movs	r3, #1
 8012cb0:	61a3      	str	r3, [r4, #24]
 8012cb2:	bd10      	pop	{r4, pc}
 8012cb4:	0801314c 	.word	0x0801314c
 8012cb8:	08012c25 	.word	0x08012c25

08012cbc <__sfp>:
 8012cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cbe:	4b1b      	ldr	r3, [pc, #108]	; (8012d2c <__sfp+0x70>)
 8012cc0:	681e      	ldr	r6, [r3, #0]
 8012cc2:	69b3      	ldr	r3, [r6, #24]
 8012cc4:	4607      	mov	r7, r0
 8012cc6:	b913      	cbnz	r3, 8012cce <__sfp+0x12>
 8012cc8:	4630      	mov	r0, r6
 8012cca:	f7ff ffc7 	bl	8012c5c <__sinit>
 8012cce:	3648      	adds	r6, #72	; 0x48
 8012cd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012cd4:	3b01      	subs	r3, #1
 8012cd6:	d503      	bpl.n	8012ce0 <__sfp+0x24>
 8012cd8:	6833      	ldr	r3, [r6, #0]
 8012cda:	b133      	cbz	r3, 8012cea <__sfp+0x2e>
 8012cdc:	6836      	ldr	r6, [r6, #0]
 8012cde:	e7f7      	b.n	8012cd0 <__sfp+0x14>
 8012ce0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012ce4:	b16d      	cbz	r5, 8012d02 <__sfp+0x46>
 8012ce6:	3468      	adds	r4, #104	; 0x68
 8012ce8:	e7f4      	b.n	8012cd4 <__sfp+0x18>
 8012cea:	2104      	movs	r1, #4
 8012cec:	4638      	mov	r0, r7
 8012cee:	f7ff ff9f 	bl	8012c30 <__sfmoreglue>
 8012cf2:	6030      	str	r0, [r6, #0]
 8012cf4:	2800      	cmp	r0, #0
 8012cf6:	d1f1      	bne.n	8012cdc <__sfp+0x20>
 8012cf8:	230c      	movs	r3, #12
 8012cfa:	603b      	str	r3, [r7, #0]
 8012cfc:	4604      	mov	r4, r0
 8012cfe:	4620      	mov	r0, r4
 8012d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d02:	4b0b      	ldr	r3, [pc, #44]	; (8012d30 <__sfp+0x74>)
 8012d04:	6665      	str	r5, [r4, #100]	; 0x64
 8012d06:	e9c4 5500 	strd	r5, r5, [r4]
 8012d0a:	60a5      	str	r5, [r4, #8]
 8012d0c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012d10:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012d14:	2208      	movs	r2, #8
 8012d16:	4629      	mov	r1, r5
 8012d18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012d1c:	f7ff fd82 	bl	8012824 <memset>
 8012d20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012d24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012d28:	e7e9      	b.n	8012cfe <__sfp+0x42>
 8012d2a:	bf00      	nop
 8012d2c:	0801314c 	.word	0x0801314c
 8012d30:	ffff0001 	.word	0xffff0001

08012d34 <_fwalk_reent>:
 8012d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d38:	4680      	mov	r8, r0
 8012d3a:	4689      	mov	r9, r1
 8012d3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012d40:	2600      	movs	r6, #0
 8012d42:	b914      	cbnz	r4, 8012d4a <_fwalk_reent+0x16>
 8012d44:	4630      	mov	r0, r6
 8012d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d4a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012d4e:	3f01      	subs	r7, #1
 8012d50:	d501      	bpl.n	8012d56 <_fwalk_reent+0x22>
 8012d52:	6824      	ldr	r4, [r4, #0]
 8012d54:	e7f5      	b.n	8012d42 <_fwalk_reent+0xe>
 8012d56:	89ab      	ldrh	r3, [r5, #12]
 8012d58:	2b01      	cmp	r3, #1
 8012d5a:	d907      	bls.n	8012d6c <_fwalk_reent+0x38>
 8012d5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012d60:	3301      	adds	r3, #1
 8012d62:	d003      	beq.n	8012d6c <_fwalk_reent+0x38>
 8012d64:	4629      	mov	r1, r5
 8012d66:	4640      	mov	r0, r8
 8012d68:	47c8      	blx	r9
 8012d6a:	4306      	orrs	r6, r0
 8012d6c:	3568      	adds	r5, #104	; 0x68
 8012d6e:	e7ee      	b.n	8012d4e <_fwalk_reent+0x1a>

08012d70 <__swhatbuf_r>:
 8012d70:	b570      	push	{r4, r5, r6, lr}
 8012d72:	460e      	mov	r6, r1
 8012d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d78:	2900      	cmp	r1, #0
 8012d7a:	b096      	sub	sp, #88	; 0x58
 8012d7c:	4614      	mov	r4, r2
 8012d7e:	461d      	mov	r5, r3
 8012d80:	da07      	bge.n	8012d92 <__swhatbuf_r+0x22>
 8012d82:	2300      	movs	r3, #0
 8012d84:	602b      	str	r3, [r5, #0]
 8012d86:	89b3      	ldrh	r3, [r6, #12]
 8012d88:	061a      	lsls	r2, r3, #24
 8012d8a:	d410      	bmi.n	8012dae <__swhatbuf_r+0x3e>
 8012d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012d90:	e00e      	b.n	8012db0 <__swhatbuf_r+0x40>
 8012d92:	466a      	mov	r2, sp
 8012d94:	f000 f96e 	bl	8013074 <_fstat_r>
 8012d98:	2800      	cmp	r0, #0
 8012d9a:	dbf2      	blt.n	8012d82 <__swhatbuf_r+0x12>
 8012d9c:	9a01      	ldr	r2, [sp, #4]
 8012d9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012da2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012da6:	425a      	negs	r2, r3
 8012da8:	415a      	adcs	r2, r3
 8012daa:	602a      	str	r2, [r5, #0]
 8012dac:	e7ee      	b.n	8012d8c <__swhatbuf_r+0x1c>
 8012dae:	2340      	movs	r3, #64	; 0x40
 8012db0:	2000      	movs	r0, #0
 8012db2:	6023      	str	r3, [r4, #0]
 8012db4:	b016      	add	sp, #88	; 0x58
 8012db6:	bd70      	pop	{r4, r5, r6, pc}

08012db8 <__smakebuf_r>:
 8012db8:	898b      	ldrh	r3, [r1, #12]
 8012dba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012dbc:	079d      	lsls	r5, r3, #30
 8012dbe:	4606      	mov	r6, r0
 8012dc0:	460c      	mov	r4, r1
 8012dc2:	d507      	bpl.n	8012dd4 <__smakebuf_r+0x1c>
 8012dc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012dc8:	6023      	str	r3, [r4, #0]
 8012dca:	6123      	str	r3, [r4, #16]
 8012dcc:	2301      	movs	r3, #1
 8012dce:	6163      	str	r3, [r4, #20]
 8012dd0:	b002      	add	sp, #8
 8012dd2:	bd70      	pop	{r4, r5, r6, pc}
 8012dd4:	ab01      	add	r3, sp, #4
 8012dd6:	466a      	mov	r2, sp
 8012dd8:	f7ff ffca 	bl	8012d70 <__swhatbuf_r>
 8012ddc:	9900      	ldr	r1, [sp, #0]
 8012dde:	4605      	mov	r5, r0
 8012de0:	4630      	mov	r0, r6
 8012de2:	f000 f877 	bl	8012ed4 <_malloc_r>
 8012de6:	b948      	cbnz	r0, 8012dfc <__smakebuf_r+0x44>
 8012de8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012dec:	059a      	lsls	r2, r3, #22
 8012dee:	d4ef      	bmi.n	8012dd0 <__smakebuf_r+0x18>
 8012df0:	f023 0303 	bic.w	r3, r3, #3
 8012df4:	f043 0302 	orr.w	r3, r3, #2
 8012df8:	81a3      	strh	r3, [r4, #12]
 8012dfa:	e7e3      	b.n	8012dc4 <__smakebuf_r+0xc>
 8012dfc:	4b0d      	ldr	r3, [pc, #52]	; (8012e34 <__smakebuf_r+0x7c>)
 8012dfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8012e00:	89a3      	ldrh	r3, [r4, #12]
 8012e02:	6020      	str	r0, [r4, #0]
 8012e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e08:	81a3      	strh	r3, [r4, #12]
 8012e0a:	9b00      	ldr	r3, [sp, #0]
 8012e0c:	6163      	str	r3, [r4, #20]
 8012e0e:	9b01      	ldr	r3, [sp, #4]
 8012e10:	6120      	str	r0, [r4, #16]
 8012e12:	b15b      	cbz	r3, 8012e2c <__smakebuf_r+0x74>
 8012e14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e18:	4630      	mov	r0, r6
 8012e1a:	f000 f93d 	bl	8013098 <_isatty_r>
 8012e1e:	b128      	cbz	r0, 8012e2c <__smakebuf_r+0x74>
 8012e20:	89a3      	ldrh	r3, [r4, #12]
 8012e22:	f023 0303 	bic.w	r3, r3, #3
 8012e26:	f043 0301 	orr.w	r3, r3, #1
 8012e2a:	81a3      	strh	r3, [r4, #12]
 8012e2c:	89a3      	ldrh	r3, [r4, #12]
 8012e2e:	431d      	orrs	r5, r3
 8012e30:	81a5      	strh	r5, [r4, #12]
 8012e32:	e7cd      	b.n	8012dd0 <__smakebuf_r+0x18>
 8012e34:	08012c25 	.word	0x08012c25

08012e38 <_free_r>:
 8012e38:	b538      	push	{r3, r4, r5, lr}
 8012e3a:	4605      	mov	r5, r0
 8012e3c:	2900      	cmp	r1, #0
 8012e3e:	d045      	beq.n	8012ecc <_free_r+0x94>
 8012e40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e44:	1f0c      	subs	r4, r1, #4
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	bfb8      	it	lt
 8012e4a:	18e4      	addlt	r4, r4, r3
 8012e4c:	f000 f946 	bl	80130dc <__malloc_lock>
 8012e50:	4a1f      	ldr	r2, [pc, #124]	; (8012ed0 <_free_r+0x98>)
 8012e52:	6813      	ldr	r3, [r2, #0]
 8012e54:	4610      	mov	r0, r2
 8012e56:	b933      	cbnz	r3, 8012e66 <_free_r+0x2e>
 8012e58:	6063      	str	r3, [r4, #4]
 8012e5a:	6014      	str	r4, [r2, #0]
 8012e5c:	4628      	mov	r0, r5
 8012e5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e62:	f000 b93c 	b.w	80130de <__malloc_unlock>
 8012e66:	42a3      	cmp	r3, r4
 8012e68:	d90c      	bls.n	8012e84 <_free_r+0x4c>
 8012e6a:	6821      	ldr	r1, [r4, #0]
 8012e6c:	1862      	adds	r2, r4, r1
 8012e6e:	4293      	cmp	r3, r2
 8012e70:	bf04      	itt	eq
 8012e72:	681a      	ldreq	r2, [r3, #0]
 8012e74:	685b      	ldreq	r3, [r3, #4]
 8012e76:	6063      	str	r3, [r4, #4]
 8012e78:	bf04      	itt	eq
 8012e7a:	1852      	addeq	r2, r2, r1
 8012e7c:	6022      	streq	r2, [r4, #0]
 8012e7e:	6004      	str	r4, [r0, #0]
 8012e80:	e7ec      	b.n	8012e5c <_free_r+0x24>
 8012e82:	4613      	mov	r3, r2
 8012e84:	685a      	ldr	r2, [r3, #4]
 8012e86:	b10a      	cbz	r2, 8012e8c <_free_r+0x54>
 8012e88:	42a2      	cmp	r2, r4
 8012e8a:	d9fa      	bls.n	8012e82 <_free_r+0x4a>
 8012e8c:	6819      	ldr	r1, [r3, #0]
 8012e8e:	1858      	adds	r0, r3, r1
 8012e90:	42a0      	cmp	r0, r4
 8012e92:	d10b      	bne.n	8012eac <_free_r+0x74>
 8012e94:	6820      	ldr	r0, [r4, #0]
 8012e96:	4401      	add	r1, r0
 8012e98:	1858      	adds	r0, r3, r1
 8012e9a:	4282      	cmp	r2, r0
 8012e9c:	6019      	str	r1, [r3, #0]
 8012e9e:	d1dd      	bne.n	8012e5c <_free_r+0x24>
 8012ea0:	6810      	ldr	r0, [r2, #0]
 8012ea2:	6852      	ldr	r2, [r2, #4]
 8012ea4:	605a      	str	r2, [r3, #4]
 8012ea6:	4401      	add	r1, r0
 8012ea8:	6019      	str	r1, [r3, #0]
 8012eaa:	e7d7      	b.n	8012e5c <_free_r+0x24>
 8012eac:	d902      	bls.n	8012eb4 <_free_r+0x7c>
 8012eae:	230c      	movs	r3, #12
 8012eb0:	602b      	str	r3, [r5, #0]
 8012eb2:	e7d3      	b.n	8012e5c <_free_r+0x24>
 8012eb4:	6820      	ldr	r0, [r4, #0]
 8012eb6:	1821      	adds	r1, r4, r0
 8012eb8:	428a      	cmp	r2, r1
 8012eba:	bf04      	itt	eq
 8012ebc:	6811      	ldreq	r1, [r2, #0]
 8012ebe:	6852      	ldreq	r2, [r2, #4]
 8012ec0:	6062      	str	r2, [r4, #4]
 8012ec2:	bf04      	itt	eq
 8012ec4:	1809      	addeq	r1, r1, r0
 8012ec6:	6021      	streq	r1, [r4, #0]
 8012ec8:	605c      	str	r4, [r3, #4]
 8012eca:	e7c7      	b.n	8012e5c <_free_r+0x24>
 8012ecc:	bd38      	pop	{r3, r4, r5, pc}
 8012ece:	bf00      	nop
 8012ed0:	20000090 	.word	0x20000090

08012ed4 <_malloc_r>:
 8012ed4:	b570      	push	{r4, r5, r6, lr}
 8012ed6:	1ccd      	adds	r5, r1, #3
 8012ed8:	f025 0503 	bic.w	r5, r5, #3
 8012edc:	3508      	adds	r5, #8
 8012ede:	2d0c      	cmp	r5, #12
 8012ee0:	bf38      	it	cc
 8012ee2:	250c      	movcc	r5, #12
 8012ee4:	2d00      	cmp	r5, #0
 8012ee6:	4606      	mov	r6, r0
 8012ee8:	db01      	blt.n	8012eee <_malloc_r+0x1a>
 8012eea:	42a9      	cmp	r1, r5
 8012eec:	d903      	bls.n	8012ef6 <_malloc_r+0x22>
 8012eee:	230c      	movs	r3, #12
 8012ef0:	6033      	str	r3, [r6, #0]
 8012ef2:	2000      	movs	r0, #0
 8012ef4:	bd70      	pop	{r4, r5, r6, pc}
 8012ef6:	f000 f8f1 	bl	80130dc <__malloc_lock>
 8012efa:	4a21      	ldr	r2, [pc, #132]	; (8012f80 <_malloc_r+0xac>)
 8012efc:	6814      	ldr	r4, [r2, #0]
 8012efe:	4621      	mov	r1, r4
 8012f00:	b991      	cbnz	r1, 8012f28 <_malloc_r+0x54>
 8012f02:	4c20      	ldr	r4, [pc, #128]	; (8012f84 <_malloc_r+0xb0>)
 8012f04:	6823      	ldr	r3, [r4, #0]
 8012f06:	b91b      	cbnz	r3, 8012f10 <_malloc_r+0x3c>
 8012f08:	4630      	mov	r0, r6
 8012f0a:	f000 f83d 	bl	8012f88 <_sbrk_r>
 8012f0e:	6020      	str	r0, [r4, #0]
 8012f10:	4629      	mov	r1, r5
 8012f12:	4630      	mov	r0, r6
 8012f14:	f000 f838 	bl	8012f88 <_sbrk_r>
 8012f18:	1c43      	adds	r3, r0, #1
 8012f1a:	d124      	bne.n	8012f66 <_malloc_r+0x92>
 8012f1c:	230c      	movs	r3, #12
 8012f1e:	6033      	str	r3, [r6, #0]
 8012f20:	4630      	mov	r0, r6
 8012f22:	f000 f8dc 	bl	80130de <__malloc_unlock>
 8012f26:	e7e4      	b.n	8012ef2 <_malloc_r+0x1e>
 8012f28:	680b      	ldr	r3, [r1, #0]
 8012f2a:	1b5b      	subs	r3, r3, r5
 8012f2c:	d418      	bmi.n	8012f60 <_malloc_r+0x8c>
 8012f2e:	2b0b      	cmp	r3, #11
 8012f30:	d90f      	bls.n	8012f52 <_malloc_r+0x7e>
 8012f32:	600b      	str	r3, [r1, #0]
 8012f34:	50cd      	str	r5, [r1, r3]
 8012f36:	18cc      	adds	r4, r1, r3
 8012f38:	4630      	mov	r0, r6
 8012f3a:	f000 f8d0 	bl	80130de <__malloc_unlock>
 8012f3e:	f104 000b 	add.w	r0, r4, #11
 8012f42:	1d23      	adds	r3, r4, #4
 8012f44:	f020 0007 	bic.w	r0, r0, #7
 8012f48:	1ac3      	subs	r3, r0, r3
 8012f4a:	d0d3      	beq.n	8012ef4 <_malloc_r+0x20>
 8012f4c:	425a      	negs	r2, r3
 8012f4e:	50e2      	str	r2, [r4, r3]
 8012f50:	e7d0      	b.n	8012ef4 <_malloc_r+0x20>
 8012f52:	428c      	cmp	r4, r1
 8012f54:	684b      	ldr	r3, [r1, #4]
 8012f56:	bf16      	itet	ne
 8012f58:	6063      	strne	r3, [r4, #4]
 8012f5a:	6013      	streq	r3, [r2, #0]
 8012f5c:	460c      	movne	r4, r1
 8012f5e:	e7eb      	b.n	8012f38 <_malloc_r+0x64>
 8012f60:	460c      	mov	r4, r1
 8012f62:	6849      	ldr	r1, [r1, #4]
 8012f64:	e7cc      	b.n	8012f00 <_malloc_r+0x2c>
 8012f66:	1cc4      	adds	r4, r0, #3
 8012f68:	f024 0403 	bic.w	r4, r4, #3
 8012f6c:	42a0      	cmp	r0, r4
 8012f6e:	d005      	beq.n	8012f7c <_malloc_r+0xa8>
 8012f70:	1a21      	subs	r1, r4, r0
 8012f72:	4630      	mov	r0, r6
 8012f74:	f000 f808 	bl	8012f88 <_sbrk_r>
 8012f78:	3001      	adds	r0, #1
 8012f7a:	d0cf      	beq.n	8012f1c <_malloc_r+0x48>
 8012f7c:	6025      	str	r5, [r4, #0]
 8012f7e:	e7db      	b.n	8012f38 <_malloc_r+0x64>
 8012f80:	20000090 	.word	0x20000090
 8012f84:	20000094 	.word	0x20000094

08012f88 <_sbrk_r>:
 8012f88:	b538      	push	{r3, r4, r5, lr}
 8012f8a:	4c06      	ldr	r4, [pc, #24]	; (8012fa4 <_sbrk_r+0x1c>)
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	4605      	mov	r5, r0
 8012f90:	4608      	mov	r0, r1
 8012f92:	6023      	str	r3, [r4, #0]
 8012f94:	f7fd fc7e 	bl	8010894 <_sbrk>
 8012f98:	1c43      	adds	r3, r0, #1
 8012f9a:	d102      	bne.n	8012fa2 <_sbrk_r+0x1a>
 8012f9c:	6823      	ldr	r3, [r4, #0]
 8012f9e:	b103      	cbz	r3, 8012fa2 <_sbrk_r+0x1a>
 8012fa0:	602b      	str	r3, [r5, #0]
 8012fa2:	bd38      	pop	{r3, r4, r5, pc}
 8012fa4:	200000dc 	.word	0x200000dc

08012fa8 <__sread>:
 8012fa8:	b510      	push	{r4, lr}
 8012faa:	460c      	mov	r4, r1
 8012fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fb0:	f000 f896 	bl	80130e0 <_read_r>
 8012fb4:	2800      	cmp	r0, #0
 8012fb6:	bfab      	itete	ge
 8012fb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012fba:	89a3      	ldrhlt	r3, [r4, #12]
 8012fbc:	181b      	addge	r3, r3, r0
 8012fbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012fc2:	bfac      	ite	ge
 8012fc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8012fc6:	81a3      	strhlt	r3, [r4, #12]
 8012fc8:	bd10      	pop	{r4, pc}

08012fca <__swrite>:
 8012fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fce:	461f      	mov	r7, r3
 8012fd0:	898b      	ldrh	r3, [r1, #12]
 8012fd2:	05db      	lsls	r3, r3, #23
 8012fd4:	4605      	mov	r5, r0
 8012fd6:	460c      	mov	r4, r1
 8012fd8:	4616      	mov	r6, r2
 8012fda:	d505      	bpl.n	8012fe8 <__swrite+0x1e>
 8012fdc:	2302      	movs	r3, #2
 8012fde:	2200      	movs	r2, #0
 8012fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fe4:	f000 f868 	bl	80130b8 <_lseek_r>
 8012fe8:	89a3      	ldrh	r3, [r4, #12]
 8012fea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012fee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012ff2:	81a3      	strh	r3, [r4, #12]
 8012ff4:	4632      	mov	r2, r6
 8012ff6:	463b      	mov	r3, r7
 8012ff8:	4628      	mov	r0, r5
 8012ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ffe:	f000 b817 	b.w	8013030 <_write_r>

08013002 <__sseek>:
 8013002:	b510      	push	{r4, lr}
 8013004:	460c      	mov	r4, r1
 8013006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801300a:	f000 f855 	bl	80130b8 <_lseek_r>
 801300e:	1c43      	adds	r3, r0, #1
 8013010:	89a3      	ldrh	r3, [r4, #12]
 8013012:	bf15      	itete	ne
 8013014:	6560      	strne	r0, [r4, #84]	; 0x54
 8013016:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801301a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801301e:	81a3      	strheq	r3, [r4, #12]
 8013020:	bf18      	it	ne
 8013022:	81a3      	strhne	r3, [r4, #12]
 8013024:	bd10      	pop	{r4, pc}

08013026 <__sclose>:
 8013026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801302a:	f000 b813 	b.w	8013054 <_close_r>
	...

08013030 <_write_r>:
 8013030:	b538      	push	{r3, r4, r5, lr}
 8013032:	4c07      	ldr	r4, [pc, #28]	; (8013050 <_write_r+0x20>)
 8013034:	4605      	mov	r5, r0
 8013036:	4608      	mov	r0, r1
 8013038:	4611      	mov	r1, r2
 801303a:	2200      	movs	r2, #0
 801303c:	6022      	str	r2, [r4, #0]
 801303e:	461a      	mov	r2, r3
 8013040:	f7fd fbd7 	bl	80107f2 <_write>
 8013044:	1c43      	adds	r3, r0, #1
 8013046:	d102      	bne.n	801304e <_write_r+0x1e>
 8013048:	6823      	ldr	r3, [r4, #0]
 801304a:	b103      	cbz	r3, 801304e <_write_r+0x1e>
 801304c:	602b      	str	r3, [r5, #0]
 801304e:	bd38      	pop	{r3, r4, r5, pc}
 8013050:	200000dc 	.word	0x200000dc

08013054 <_close_r>:
 8013054:	b538      	push	{r3, r4, r5, lr}
 8013056:	4c06      	ldr	r4, [pc, #24]	; (8013070 <_close_r+0x1c>)
 8013058:	2300      	movs	r3, #0
 801305a:	4605      	mov	r5, r0
 801305c:	4608      	mov	r0, r1
 801305e:	6023      	str	r3, [r4, #0]
 8013060:	f7fd fbe3 	bl	801082a <_close>
 8013064:	1c43      	adds	r3, r0, #1
 8013066:	d102      	bne.n	801306e <_close_r+0x1a>
 8013068:	6823      	ldr	r3, [r4, #0]
 801306a:	b103      	cbz	r3, 801306e <_close_r+0x1a>
 801306c:	602b      	str	r3, [r5, #0]
 801306e:	bd38      	pop	{r3, r4, r5, pc}
 8013070:	200000dc 	.word	0x200000dc

08013074 <_fstat_r>:
 8013074:	b538      	push	{r3, r4, r5, lr}
 8013076:	4c07      	ldr	r4, [pc, #28]	; (8013094 <_fstat_r+0x20>)
 8013078:	2300      	movs	r3, #0
 801307a:	4605      	mov	r5, r0
 801307c:	4608      	mov	r0, r1
 801307e:	4611      	mov	r1, r2
 8013080:	6023      	str	r3, [r4, #0]
 8013082:	f7fd fbde 	bl	8010842 <_fstat>
 8013086:	1c43      	adds	r3, r0, #1
 8013088:	d102      	bne.n	8013090 <_fstat_r+0x1c>
 801308a:	6823      	ldr	r3, [r4, #0]
 801308c:	b103      	cbz	r3, 8013090 <_fstat_r+0x1c>
 801308e:	602b      	str	r3, [r5, #0]
 8013090:	bd38      	pop	{r3, r4, r5, pc}
 8013092:	bf00      	nop
 8013094:	200000dc 	.word	0x200000dc

08013098 <_isatty_r>:
 8013098:	b538      	push	{r3, r4, r5, lr}
 801309a:	4c06      	ldr	r4, [pc, #24]	; (80130b4 <_isatty_r+0x1c>)
 801309c:	2300      	movs	r3, #0
 801309e:	4605      	mov	r5, r0
 80130a0:	4608      	mov	r0, r1
 80130a2:	6023      	str	r3, [r4, #0]
 80130a4:	f7fd fbdd 	bl	8010862 <_isatty>
 80130a8:	1c43      	adds	r3, r0, #1
 80130aa:	d102      	bne.n	80130b2 <_isatty_r+0x1a>
 80130ac:	6823      	ldr	r3, [r4, #0]
 80130ae:	b103      	cbz	r3, 80130b2 <_isatty_r+0x1a>
 80130b0:	602b      	str	r3, [r5, #0]
 80130b2:	bd38      	pop	{r3, r4, r5, pc}
 80130b4:	200000dc 	.word	0x200000dc

080130b8 <_lseek_r>:
 80130b8:	b538      	push	{r3, r4, r5, lr}
 80130ba:	4c07      	ldr	r4, [pc, #28]	; (80130d8 <_lseek_r+0x20>)
 80130bc:	4605      	mov	r5, r0
 80130be:	4608      	mov	r0, r1
 80130c0:	4611      	mov	r1, r2
 80130c2:	2200      	movs	r2, #0
 80130c4:	6022      	str	r2, [r4, #0]
 80130c6:	461a      	mov	r2, r3
 80130c8:	f7fd fbd6 	bl	8010878 <_lseek>
 80130cc:	1c43      	adds	r3, r0, #1
 80130ce:	d102      	bne.n	80130d6 <_lseek_r+0x1e>
 80130d0:	6823      	ldr	r3, [r4, #0]
 80130d2:	b103      	cbz	r3, 80130d6 <_lseek_r+0x1e>
 80130d4:	602b      	str	r3, [r5, #0]
 80130d6:	bd38      	pop	{r3, r4, r5, pc}
 80130d8:	200000dc 	.word	0x200000dc

080130dc <__malloc_lock>:
 80130dc:	4770      	bx	lr

080130de <__malloc_unlock>:
 80130de:	4770      	bx	lr

080130e0 <_read_r>:
 80130e0:	b538      	push	{r3, r4, r5, lr}
 80130e2:	4c07      	ldr	r4, [pc, #28]	; (8013100 <_read_r+0x20>)
 80130e4:	4605      	mov	r5, r0
 80130e6:	4608      	mov	r0, r1
 80130e8:	4611      	mov	r1, r2
 80130ea:	2200      	movs	r2, #0
 80130ec:	6022      	str	r2, [r4, #0]
 80130ee:	461a      	mov	r2, r3
 80130f0:	f7fd fb62 	bl	80107b8 <_read>
 80130f4:	1c43      	adds	r3, r0, #1
 80130f6:	d102      	bne.n	80130fe <_read_r+0x1e>
 80130f8:	6823      	ldr	r3, [r4, #0]
 80130fa:	b103      	cbz	r3, 80130fe <_read_r+0x1e>
 80130fc:	602b      	str	r3, [r5, #0]
 80130fe:	bd38      	pop	{r3, r4, r5, pc}
 8013100:	200000dc 	.word	0x200000dc

08013104 <_init>:
 8013104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013106:	bf00      	nop
 8013108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801310a:	bc08      	pop	{r3}
 801310c:	469e      	mov	lr, r3
 801310e:	4770      	bx	lr

08013110 <_fini>:
 8013110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013112:	bf00      	nop
 8013114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013116:	bc08      	pop	{r3}
 8013118:	469e      	mov	lr, r3
 801311a:	4770      	bx	lr
