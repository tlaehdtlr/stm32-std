
USART_printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003224  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080033b0  080033b0  000133b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003470  08003470  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003470  08003470  00013470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003478  08003478  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003478  08003478  00013478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800347c  0800347c  0001347c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  080034f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  080034f0  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af38  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b21  00000000  00000000  0002afd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000948  00000000  00000000  0002cb00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000850  00000000  00000000  0002d448  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a942  00000000  00000000  0002dc98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000084fe  00000000  00000000  000485da  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a137c  00000000  00000000  00050ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1e54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002984  00000000  00000000  000f1ed0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000070 	.word	0x20000070
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003398 	.word	0x08003398

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000074 	.word	0x20000074
 80001c8:	08003398 	.word	0x08003398

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b3c      	ldr	r3, [pc, #240]	; (80005d4 <MX_GPIO_Init+0x108>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	4a3b      	ldr	r2, [pc, #236]	; (80005d4 <MX_GPIO_Init+0x108>)
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ee:	4b39      	ldr	r3, [pc, #228]	; (80005d4 <MX_GPIO_Init+0x108>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	f003 0304 	and.w	r3, r3, #4
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fa:	4b36      	ldr	r3, [pc, #216]	; (80005d4 <MX_GPIO_Init+0x108>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a35      	ldr	r2, [pc, #212]	; (80005d4 <MX_GPIO_Init+0x108>)
 8000500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b33      	ldr	r3, [pc, #204]	; (80005d4 <MX_GPIO_Init+0x108>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b30      	ldr	r3, [pc, #192]	; (80005d4 <MX_GPIO_Init+0x108>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4a2f      	ldr	r2, [pc, #188]	; (80005d4 <MX_GPIO_Init+0x108>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <MX_GPIO_Init+0x108>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	4b2a      	ldr	r3, [pc, #168]	; (80005d4 <MX_GPIO_Init+0x108>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4a29      	ldr	r2, [pc, #164]	; (80005d4 <MX_GPIO_Init+0x108>)
 8000530:	f043 0302 	orr.w	r3, r3, #2
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <MX_GPIO_Init+0x108>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0302 	and.w	r3, r3, #2
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	21b0      	movs	r1, #176	; 0xb0
 8000546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054a:	f000 fda5 	bl	8001098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000554:	4820      	ldr	r0, [pc, #128]	; (80005d8 <MX_GPIO_Init+0x10c>)
 8000556:	f000 fd9f 	bl	8001098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800055a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000560:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <MX_GPIO_Init+0x110>)
 8000562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000568:	f107 0314 	add.w	r3, r7, #20
 800056c:	4619      	mov	r1, r3
 800056e:	481c      	ldr	r0, [pc, #112]	; (80005e0 <MX_GPIO_Init+0x114>)
 8000570:	f000 fc20 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000574:	23b0      	movs	r3, #176	; 0xb0
 8000576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	2301      	movs	r3, #1
 800057a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	2300      	movs	r3, #0
 8000582:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	4619      	mov	r1, r3
 800058a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058e:	f000 fc11 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000592:	2340      	movs	r3, #64	; 0x40
 8000594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000596:	2300      	movs	r3, #0
 8000598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800059a:	2301      	movs	r3, #1
 800059c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a8:	f000 fc04 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80005ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b2:	2301      	movs	r3, #1
 80005b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ba:	2300      	movs	r3, #0
 80005bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	4619      	mov	r1, r3
 80005c4:	4804      	ldr	r0, [pc, #16]	; (80005d8 <MX_GPIO_Init+0x10c>)
 80005c6:	f000 fbf5 	bl	8000db4 <HAL_GPIO_Init>

}
 80005ca:	bf00      	nop
 80005cc:	3728      	adds	r7, #40	; 0x28
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000
 80005d8:	48000400 	.word	0x48000400
 80005dc:	10210000 	.word	0x10210000
 80005e0:	48000800 	.word	0x48000800

080005e4 <__io_putchar>:
#else
    #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  if (ch == '\n')
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b0a      	cmp	r3, #10
 80005f0:	d106      	bne.n	8000600 <__io_putchar+0x1c>
	  HAL_UART_Transmit(&huart2, (uint8_t *) "\r", 1, 0xFFFF);
 80005f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005f6:	2201      	movs	r2, #1
 80005f8:	4907      	ldr	r1, [pc, #28]	; (8000618 <__io_putchar+0x34>)
 80005fa:	4808      	ldr	r0, [pc, #32]	; (800061c <__io_putchar+0x38>)
 80005fc:	f001 fe06 	bl	800220c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000600:	1d39      	adds	r1, r7, #4
 8000602:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000606:	2201      	movs	r2, #1
 8000608:	4804      	ldr	r0, [pc, #16]	; (800061c <__io_putchar+0x38>)
 800060a:	f001 fdff 	bl	800220c <HAL_UART_Transmit>
  return ch;
 800060e:	687b      	ldr	r3, [r7, #4]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	080033b0 	.word	0x080033b0
 800061c:	20000098 	.word	0x20000098

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fa42 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f80e 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f7ff ff4e 	bl	80004cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000630:	f000 f9a0 	bl	8000974 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Hello dongsik!\n");
 8000634:	4803      	ldr	r0, [pc, #12]	; (8000644 <main+0x24>)
 8000636:	f002 faa3 	bl	8002b80 <puts>
	  HAL_Delay(1000);
 800063a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063e:	f000 fab1 	bl	8000ba4 <HAL_Delay>
	  printf("Hello dongsik!\n");
 8000642:	e7f7      	b.n	8000634 <main+0x14>
 8000644:	080033b4 	.word	0x080033b4

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b0a4      	sub	sp, #144	; 0x90
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000652:	2244      	movs	r2, #68	; 0x44
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fa2e 	bl	8002ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2234      	movs	r2, #52	; 0x34
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f002 fa20 	bl	8002ab8 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000678:	f44f 7000 	mov.w	r0, #512	; 0x200
 800067c:	f000 fd32 	bl	80010e4 <HAL_PWREx_ControlVoltageScaling>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000686:	f000 f848 	bl	800071a <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800068a:	2310      	movs	r3, #16
 800068c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800068e:	2301      	movs	r3, #1
 8000690:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000696:	2360      	movs	r3, #96	; 0x60
 8000698:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	2302      	movs	r3, #2
 800069c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800069e:	2301      	movs	r3, #1
 80006a0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006a2:	2301      	movs	r3, #1
 80006a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006a8:	2328      	movs	r3, #40	; 0x28
 80006aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fd66 	bl	8001190 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x86>
  {
    Error_Handler();
 80006ca:	f000 f826 	bl	800071a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	230f      	movs	r3, #15
 80006d0:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2303      	movs	r3, #3
 80006d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006e6:	2104      	movs	r1, #4
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 f9b7 	bl	8001a5c <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006f4:	f000 f811 	bl	800071a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	4618      	mov	r0, r3
 8000704:	f001 fbae 	bl	8001e64 <HAL_RCCEx_PeriphCLKConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800070e:	f000 f804 	bl	800071a <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3790      	adds	r7, #144	; 0x90
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800071e:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000720:	e7fe      	b.n	8000720 <Error_Handler+0x6>
	...

08000724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <HAL_MspInit+0x44>)
 800072c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800072e:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <HAL_MspInit+0x44>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6613      	str	r3, [r2, #96]	; 0x60
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <HAL_MspInit+0x44>)
 8000738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <HAL_MspInit+0x44>)
 8000744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <HAL_MspInit+0x44>)
 8000748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074c:	6593      	str	r3, [r2, #88]	; 0x58
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_MspInit+0x44>)
 8000750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <NMI_Handler+0x4>

08000772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <MemManage_Handler+0x4>

0800077e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <UsageFault_Handler+0x4>

0800078a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b8:	f000 f9d4 	bl	8000b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	e00a      	b.n	80007e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007d2:	f3af 8000 	nop.w
 80007d6:	4601      	mov	r1, r0
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	60ba      	str	r2, [r7, #8]
 80007de:	b2ca      	uxtb	r2, r1
 80007e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	3301      	adds	r3, #1
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	697a      	ldr	r2, [r7, #20]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	dbf0      	blt.n	80007d2 <_read+0x12>
	}

return len;
 80007f0:	687b      	ldr	r3, [r7, #4]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b086      	sub	sp, #24
 80007fe:	af00      	add	r7, sp, #0
 8000800:	60f8      	str	r0, [r7, #12]
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	e009      	b.n	8000820 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	1c5a      	adds	r2, r3, #1
 8000810:	60ba      	str	r2, [r7, #8]
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fee5 	bl	80005e4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	3301      	adds	r3, #1
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	697a      	ldr	r2, [r7, #20]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	429a      	cmp	r2, r3
 8000826:	dbf1      	blt.n	800080c <_write+0x12>
	}
	return len;
 8000828:	687b      	ldr	r3, [r7, #4]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <_close>:

int _close(int file)
{
 8000832:	b480      	push	{r7}
 8000834:	b083      	sub	sp, #12
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
	return -1;
 800083a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800083e:	4618      	mov	r0, r3
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800084a:	b480      	push	{r7}
 800084c:	b083      	sub	sp, #12
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
 8000852:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800085a:	605a      	str	r2, [r3, #4]
	return 0;
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <_isatty>:

int _isatty(int file)
{
 800086a:	b480      	push	{r7}
 800086c:	b083      	sub	sp, #12
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
	return 1;
 8000872:	2301      	movs	r3, #1
}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
	return 0;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
	...

0800089c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a4:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <_sbrk+0x5c>)
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <_sbrk+0x60>)
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <_sbrk+0x64>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d102      	bne.n	80008be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <_sbrk+0x64>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <_sbrk+0x68>)
 80008bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d207      	bcs.n	80008dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008cc:	f002 f8ca 	bl	8002a64 <__errno>
 80008d0:	4602      	mov	r2, r0
 80008d2:	230c      	movs	r3, #12
 80008d4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	e009      	b.n	80008f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <_sbrk+0x64>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	4a05      	ldr	r2, [pc, #20]	; (8000900 <_sbrk+0x64>)
 80008ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	2000a000 	.word	0x2000a000
 80008fc:	00000400 	.word	0x00000400
 8000900:	2000008c 	.word	0x2000008c
 8000904:	20000120 	.word	0x20000120

08000908 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <SystemInit+0x64>)
 800090e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000912:	4a16      	ldr	r2, [pc, #88]	; (800096c <SystemInit+0x64>)
 8000914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <SystemInit+0x68>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a13      	ldr	r2, [pc, #76]	; (8000970 <SystemInit+0x68>)
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <SystemInit+0x68>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <SystemInit+0x68>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a0f      	ldr	r2, [pc, #60]	; (8000970 <SystemInit+0x68>)
 8000934:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000938:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800093c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <SystemInit+0x68>)
 8000940:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000944:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <SystemInit+0x68>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a09      	ldr	r2, [pc, #36]	; (8000970 <SystemInit+0x68>)
 800094c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000950:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <SystemInit+0x68>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000958:	4b04      	ldr	r3, [pc, #16]	; (800096c <SystemInit+0x64>)
 800095a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800095e:	609a      	str	r2, [r3, #8]
#endif
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000ed00 	.word	0xe000ed00
 8000970:	40021000 	.word	0x40021000

08000974 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_USART2_UART_Init+0x58>)
 800097a:	4a15      	ldr	r2, [pc, #84]	; (80009d0 <MX_USART2_UART_Init+0x5c>)
 800097c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_USART2_UART_Init+0x58>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART2_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_USART2_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART2_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART2_UART_Init+0x58>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART2_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART2_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART2_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART2_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USART2_UART_Init+0x58>)
 80009b8:	f001 fbda 	bl	8002170 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009c2:	f7ff feaa 	bl	800071a <Error_Handler>
  }

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000098 	.word	0x20000098
 80009d0:	40004400 	.word	0x40004400

080009d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <HAL_UART_MspInit+0x7c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d128      	bne.n	8000a48 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <HAL_UART_MspInit+0x80>)
 80009f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fa:	4a16      	ldr	r2, [pc, #88]	; (8000a54 <HAL_UART_MspInit+0x80>)
 80009fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a00:	6593      	str	r3, [r2, #88]	; 0x58
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <HAL_UART_MspInit+0x80>)
 8000a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_UART_MspInit+0x80>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <HAL_UART_MspInit+0x80>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <HAL_UART_MspInit+0x80>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a26:	230c      	movs	r3, #12
 8000a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a36:	2307      	movs	r3, #7
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a44:	f000 f9b6 	bl	8000db4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a48:	bf00      	nop
 8000a4a:	3728      	adds	r7, #40	; 0x28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40004400 	.word	0x40004400
 8000a54:	40021000 	.word	0x40021000

08000a58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a5c:	f7ff ff54 	bl	8000908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a60:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a62:	e003      	b.n	8000a6c <LoopCopyDataInit>

08000a64 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a66:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a68:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a6a:	3104      	adds	r1, #4

08000a6c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a6c:	480a      	ldr	r0, [pc, #40]	; (8000a98 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a70:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a72:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a74:	d3f6      	bcc.n	8000a64 <CopyDataInit>
	ldr	r2, =_sbss
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a78:	e002      	b.n	8000a80 <LoopFillZerobss>

08000a7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a7a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a7c:	f842 3b04 	str.w	r3, [r2], #4

08000a80 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <LoopForever+0x16>)
	cmp	r2, r3
 8000a82:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a84:	d3f9      	bcc.n	8000a7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a86:	f001 fff3 	bl	8002a70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a8a:	f7ff fdc9 	bl	8000620 <main>

08000a8e <LoopForever>:

LoopForever:
    b LoopForever
 8000a8e:	e7fe      	b.n	8000a8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a90:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000a94:	08003480 	.word	0x08003480
	ldr	r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a9c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000aa0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000aa4:	20000120 	.word	0x20000120

08000aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC1_2_IRQHandler>
	...

08000aac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <HAL_Init+0x3c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <HAL_Init+0x3c>)
 8000abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac2:	2003      	movs	r0, #3
 8000ac4:	f000 f942 	bl	8000d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f000 f80f 	bl	8000aec <HAL_InitTick>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d002      	beq.n	8000ada <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	71fb      	strb	r3, [r7, #7]
 8000ad8:	e001      	b.n	8000ade <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ada:	f7ff fe23 	bl	8000724 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ade:	79fb      	ldrb	r3, [r7, #7]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40022000 	.word	0x40022000

08000aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000af4:	2300      	movs	r3, #0
 8000af6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <HAL_InitTick+0x6c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d023      	beq.n	8000b48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <HAL_InitTick+0x70>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <HAL_InitTick+0x6c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f93f 	bl	8000d9a <HAL_SYSTICK_Config>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d10f      	bne.n	8000b42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	d809      	bhi.n	8000b3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f000 f917 	bl	8000d62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b34:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <HAL_InitTick+0x74>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
 8000b3a:	e007      	b.n	8000b4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	73fb      	strb	r3, [r7, #15]
 8000b40:	e004      	b.n	8000b4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	73fb      	strb	r3, [r7, #15]
 8000b46:	e001      	b.n	8000b4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000004 	.word	0x20000004

08000b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_IncTick+0x20>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_IncTick+0x24>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <HAL_IncTick+0x24>)
 8000b76:	6013      	str	r3, [r2, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000118 	.word	0x20000118

08000b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <HAL_GetTick+0x14>)
 8000b92:	681b      	ldr	r3, [r3, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000118 	.word	0x20000118

08000ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bac:	f7ff ffee 	bl	8000b8c <HAL_GetTick>
 8000bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bbc:	d005      	beq.n	8000bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_Delay+0x40>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bca:	bf00      	nop
 8000bcc:	f7ff ffde 	bl	8000b8c <HAL_GetTick>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d8f7      	bhi.n	8000bcc <HAL_Delay+0x28>
  {
  }
}
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000008 	.word	0x20000008

08000be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c04:	4013      	ands	r3, r2
 8000c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1a:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	60d3      	str	r3, [r2, #12]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <__NVIC_GetPriorityGrouping+0x18>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	f003 0307 	and.w	r3, r3, #7
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	db0a      	blt.n	8000c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	490c      	ldr	r1, [pc, #48]	; (8000c98 <__NVIC_SetPriority+0x4c>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	0112      	lsls	r2, r2, #4
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	440b      	add	r3, r1
 8000c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c74:	e00a      	b.n	8000c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4908      	ldr	r1, [pc, #32]	; (8000c9c <__NVIC_SetPriority+0x50>)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	3b04      	subs	r3, #4
 8000c84:	0112      	lsls	r2, r2, #4
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	440b      	add	r3, r1
 8000c8a:	761a      	strb	r2, [r3, #24]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f1c3 0307 	rsb	r3, r3, #7
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	bf28      	it	cs
 8000cbe:	2304      	movcs	r3, #4
 8000cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	2b06      	cmp	r3, #6
 8000cc8:	d902      	bls.n	8000cd0 <NVIC_EncodePriority+0x30>
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3b03      	subs	r3, #3
 8000cce:	e000      	b.n	8000cd2 <NVIC_EncodePriority+0x32>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43d9      	mvns	r1, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	4313      	orrs	r3, r2
         );
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3724      	adds	r7, #36	; 0x24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d18:	d301      	bcc.n	8000d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00f      	b.n	8000d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <SysTick_Config+0x40>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d26:	210f      	movs	r1, #15
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f7ff ff8e 	bl	8000c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <SysTick_Config+0x40>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d36:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <SysTick_Config+0x40>)
 8000d38:	2207      	movs	r2, #7
 8000d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	e000e010 	.word	0xe000e010

08000d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff ff47 	bl	8000be8 <__NVIC_SetPriorityGrouping>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d74:	f7ff ff5c 	bl	8000c30 <__NVIC_GetPriorityGrouping>
 8000d78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f7ff ff8e 	bl	8000ca0 <NVIC_EncodePriority>
 8000d84:	4602      	mov	r2, r0
 8000d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff5d 	bl	8000c4c <__NVIC_SetPriority>
}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ffb0 	bl	8000d08 <SysTick_Config>
 8000da8:	4603      	mov	r3, r0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b087      	sub	sp, #28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc2:	e14e      	b.n	8001062 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	2101      	movs	r1, #1
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 8140 	beq.w	800105c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d00b      	beq.n	8000dfc <HAL_GPIO_Init+0x48>
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d007      	beq.n	8000dfc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000df0:	2b11      	cmp	r3, #17
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b12      	cmp	r3, #18
 8000dfa:	d130      	bne.n	8000e5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	68da      	ldr	r2, [r3, #12]
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e32:	2201      	movs	r2, #1
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	091b      	lsrs	r3, r3, #4
 8000e48:	f003 0201 	and.w	r2, r3, #1
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	689a      	ldr	r2, [r3, #8]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0xea>
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b12      	cmp	r3, #18
 8000e9c:	d123      	bne.n	8000ee6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	08da      	lsrs	r2, r3, #3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3208      	adds	r2, #8
 8000ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	691a      	ldr	r2, [r3, #16]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	f003 0307 	and.w	r3, r3, #7
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	08da      	lsrs	r2, r3, #3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3208      	adds	r2, #8
 8000ee0:	6939      	ldr	r1, [r7, #16]
 8000ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0203 	and.w	r2, r3, #3
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f000 809a 	beq.w	800105c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f28:	4b55      	ldr	r3, [pc, #340]	; (8001080 <HAL_GPIO_Init+0x2cc>)
 8000f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2c:	4a54      	ldr	r2, [pc, #336]	; (8001080 <HAL_GPIO_Init+0x2cc>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6613      	str	r3, [r2, #96]	; 0x60
 8000f34:	4b52      	ldr	r3, [pc, #328]	; (8001080 <HAL_GPIO_Init+0x2cc>)
 8000f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f40:	4a50      	ldr	r2, [pc, #320]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	089b      	lsrs	r3, r3, #2
 8000f46:	3302      	adds	r3, #2
 8000f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	220f      	movs	r2, #15
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f6a:	d013      	beq.n	8000f94 <HAL_GPIO_Init+0x1e0>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a46      	ldr	r2, [pc, #280]	; (8001088 <HAL_GPIO_Init+0x2d4>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d00d      	beq.n	8000f90 <HAL_GPIO_Init+0x1dc>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a45      	ldr	r2, [pc, #276]	; (800108c <HAL_GPIO_Init+0x2d8>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d007      	beq.n	8000f8c <HAL_GPIO_Init+0x1d8>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a44      	ldr	r2, [pc, #272]	; (8001090 <HAL_GPIO_Init+0x2dc>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d101      	bne.n	8000f88 <HAL_GPIO_Init+0x1d4>
 8000f84:	2303      	movs	r3, #3
 8000f86:	e006      	b.n	8000f96 <HAL_GPIO_Init+0x1e2>
 8000f88:	2307      	movs	r3, #7
 8000f8a:	e004      	b.n	8000f96 <HAL_GPIO_Init+0x1e2>
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	e002      	b.n	8000f96 <HAL_GPIO_Init+0x1e2>
 8000f90:	2301      	movs	r3, #1
 8000f92:	e000      	b.n	8000f96 <HAL_GPIO_Init+0x1e2>
 8000f94:	2300      	movs	r3, #0
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	f002 0203 	and.w	r2, r2, #3
 8000f9c:	0092      	lsls	r2, r2, #2
 8000f9e:	4093      	lsls	r3, r2
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fa6:	4937      	ldr	r1, [pc, #220]	; (8001084 <HAL_GPIO_Init+0x2d0>)
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	3302      	adds	r3, #2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fb4:	4b37      	ldr	r3, [pc, #220]	; (8001094 <HAL_GPIO_Init+0x2e0>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fd8:	4a2e      	ldr	r2, [pc, #184]	; (8001094 <HAL_GPIO_Init+0x2e0>)
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000fde:	4b2d      	ldr	r3, [pc, #180]	; (8001094 <HAL_GPIO_Init+0x2e0>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001002:	4a24      	ldr	r2, [pc, #144]	; (8001094 <HAL_GPIO_Init+0x2e0>)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001008:	4b22      	ldr	r3, [pc, #136]	; (8001094 <HAL_GPIO_Init+0x2e0>)
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800102c:	4a19      	ldr	r2, [pc, #100]	; (8001094 <HAL_GPIO_Init+0x2e0>)
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_GPIO_Init+0x2e0>)
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001056:	4a0f      	ldr	r2, [pc, #60]	; (8001094 <HAL_GPIO_Init+0x2e0>)
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	3301      	adds	r3, #1
 8001060:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	fa22 f303 	lsr.w	r3, r2, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	f47f aea9 	bne.w	8000dc4 <HAL_GPIO_Init+0x10>
  }
}
 8001072:	bf00      	nop
 8001074:	371c      	adds	r7, #28
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000
 8001084:	40010000 	.word	0x40010000
 8001088:	48000400 	.word	0x48000400
 800108c:	48000800 	.word	0x48000800
 8001090:	48000c00 	.word	0x48000c00
 8001094:	40010400 	.word	0x40010400

08001098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
 80010a4:	4613      	mov	r3, r2
 80010a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a8:	787b      	ldrb	r3, [r7, #1]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ae:	887a      	ldrh	r2, [r7, #2]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010b4:	e002      	b.n	80010bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40007000 	.word	0x40007000

080010e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010f2:	d130      	bne.n	8001156 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010f4:	4b23      	ldr	r3, [pc, #140]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001100:	d038      	beq.n	8001174 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001102:	4b20      	ldr	r3, [pc, #128]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800110a:	4a1e      	ldr	r2, [pc, #120]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800110c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001110:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001112:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2232      	movs	r2, #50	; 0x32
 8001118:	fb02 f303 	mul.w	r3, r2, r3
 800111c:	4a1b      	ldr	r2, [pc, #108]	; (800118c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800111e:	fba2 2303 	umull	r2, r3, r2, r3
 8001122:	0c9b      	lsrs	r3, r3, #18
 8001124:	3301      	adds	r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001128:	e002      	b.n	8001130 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3b01      	subs	r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800113c:	d102      	bne.n	8001144 <HAL_PWREx_ControlVoltageScaling+0x60>
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f2      	bne.n	800112a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001150:	d110      	bne.n	8001174 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e00f      	b.n	8001176 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800115e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001162:	d007      	beq.n	8001174 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800116c:	4a05      	ldr	r2, [pc, #20]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001172:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40007000 	.word	0x40007000
 8001188:	20000000 	.word	0x20000000
 800118c:	431bde83 	.word	0x431bde83

08001190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d102      	bne.n	80011a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	f000 bc56 	b.w	8001a50 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011a4:	4ba1      	ldr	r3, [pc, #644]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f003 030c 	and.w	r3, r3, #12
 80011ac:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011ae:	4b9f      	ldr	r3, [pc, #636]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0310 	and.w	r3, r3, #16
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 80e6 	beq.w	8001392 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011c6:	6a3b      	ldr	r3, [r7, #32]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d007      	beq.n	80011dc <HAL_RCC_OscConfig+0x4c>
 80011cc:	6a3b      	ldr	r3, [r7, #32]
 80011ce:	2b0c      	cmp	r3, #12
 80011d0:	f040 808d 	bne.w	80012ee <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	f040 8089 	bne.w	80012ee <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011dc:	4b93      	ldr	r3, [pc, #588]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d006      	beq.n	80011f6 <HAL_RCC_OscConfig+0x66>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69db      	ldr	r3, [r3, #28]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d102      	bne.n	80011f6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	f000 bc2d 	b.w	8001a50 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011fa:	4b8c      	ldr	r3, [pc, #560]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	2b00      	cmp	r3, #0
 8001204:	d004      	beq.n	8001210 <HAL_RCC_OscConfig+0x80>
 8001206:	4b89      	ldr	r3, [pc, #548]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800120e:	e005      	b.n	800121c <HAL_RCC_OscConfig+0x8c>
 8001210:	4b86      	ldr	r3, [pc, #536]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 8001212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001216:	091b      	lsrs	r3, r3, #4
 8001218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800121c:	4293      	cmp	r3, r2
 800121e:	d224      	bcs.n	800126a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001224:	4618      	mov	r0, r3
 8001226:	f000 fdbd 	bl	8001da4 <RCC_SetFlashLatencyFromMSIRange>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d002      	beq.n	8001236 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	f000 bc0d 	b.w	8001a50 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001236:	4b7d      	ldr	r3, [pc, #500]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a7c      	ldr	r2, [pc, #496]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 800123c:	f043 0308 	orr.w	r3, r3, #8
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	4b7a      	ldr	r3, [pc, #488]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	4977      	ldr	r1, [pc, #476]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 8001250:	4313      	orrs	r3, r2
 8001252:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001254:	4b75      	ldr	r3, [pc, #468]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	4972      	ldr	r1, [pc, #456]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 8001264:	4313      	orrs	r3, r2
 8001266:	604b      	str	r3, [r1, #4]
 8001268:	e025      	b.n	80012b6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800126a:	4b70      	ldr	r3, [pc, #448]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a6f      	ldr	r2, [pc, #444]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 8001270:	f043 0308 	orr.w	r3, r3, #8
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	4b6d      	ldr	r3, [pc, #436]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	496a      	ldr	r1, [pc, #424]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 8001284:	4313      	orrs	r3, r2
 8001286:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001288:	4b68      	ldr	r3, [pc, #416]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	4965      	ldr	r1, [pc, #404]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 8001298:	4313      	orrs	r3, r2
 800129a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800129c:	6a3b      	ldr	r3, [r7, #32]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d109      	bne.n	80012b6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fd7c 	bl	8001da4 <RCC_SetFlashLatencyFromMSIRange>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e3cc      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012b6:	f000 fcb3 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 80012ba:	4601      	mov	r1, r0
 80012bc:	4b5b      	ldr	r3, [pc, #364]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	4a5a      	ldr	r2, [pc, #360]	; (8001430 <HAL_RCC_OscConfig+0x2a0>)
 80012c8:	5cd3      	ldrb	r3, [r2, r3]
 80012ca:	f003 031f 	and.w	r3, r3, #31
 80012ce:	fa21 f303 	lsr.w	r3, r1, r3
 80012d2:	4a58      	ldr	r2, [pc, #352]	; (8001434 <HAL_RCC_OscConfig+0x2a4>)
 80012d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012d6:	4b58      	ldr	r3, [pc, #352]	; (8001438 <HAL_RCC_OscConfig+0x2a8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fc06 	bl	8000aec <HAL_InitTick>
 80012e0:	4603      	mov	r3, r0
 80012e2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d052      	beq.n	8001390 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80012ea:	7dfb      	ldrb	r3, [r7, #23]
 80012ec:	e3b0      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d032      	beq.n	800135c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012f6:	4b4d      	ldr	r3, [pc, #308]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a4c      	ldr	r2, [pc, #304]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001302:	f7ff fc43 	bl	8000b8c <HAL_GetTick>
 8001306:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800130a:	f7ff fc3f 	bl	8000b8c <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e399      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800131c:	4b43      	ldr	r3, [pc, #268]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001328:	4b40      	ldr	r3, [pc, #256]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a3f      	ldr	r2, [pc, #252]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 800132e:	f043 0308 	orr.w	r3, r3, #8
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b3d      	ldr	r3, [pc, #244]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001340:	493a      	ldr	r1, [pc, #232]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 8001342:	4313      	orrs	r3, r2
 8001344:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001346:	4b39      	ldr	r3, [pc, #228]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	4935      	ldr	r1, [pc, #212]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 8001356:	4313      	orrs	r3, r2
 8001358:	604b      	str	r3, [r1, #4]
 800135a:	e01a      	b.n	8001392 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800135c:	4b33      	ldr	r3, [pc, #204]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a32      	ldr	r2, [pc, #200]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 8001362:	f023 0301 	bic.w	r3, r3, #1
 8001366:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001368:	f7ff fc10 	bl	8000b8c <HAL_GetTick>
 800136c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001370:	f7ff fc0c 	bl	8000b8c <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e366      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001382:	4b2a      	ldr	r3, [pc, #168]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0x1e0>
 800138e:	e000      	b.n	8001392 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001390:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d073      	beq.n	8001486 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800139e:	6a3b      	ldr	r3, [r7, #32]
 80013a0:	2b08      	cmp	r3, #8
 80013a2:	d005      	beq.n	80013b0 <HAL_RCC_OscConfig+0x220>
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	2b0c      	cmp	r3, #12
 80013a8:	d10e      	bne.n	80013c8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	d10b      	bne.n	80013c8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b0:	4b1e      	ldr	r3, [pc, #120]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d063      	beq.n	8001484 <HAL_RCC_OscConfig+0x2f4>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d15f      	bne.n	8001484 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e343      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d0:	d106      	bne.n	80013e0 <HAL_RCC_OscConfig+0x250>
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a15      	ldr	r2, [pc, #84]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e01d      	b.n	800141c <HAL_RCC_OscConfig+0x28c>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e8:	d10c      	bne.n	8001404 <HAL_RCC_OscConfig+0x274>
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a0f      	ldr	r2, [pc, #60]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 80013f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a0c      	ldr	r2, [pc, #48]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 80013fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e00b      	b.n	800141c <HAL_RCC_OscConfig+0x28c>
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a08      	ldr	r2, [pc, #32]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 800140a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a05      	ldr	r2, [pc, #20]	; (800142c <HAL_RCC_OscConfig+0x29c>)
 8001416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800141a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d01b      	beq.n	800145c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001424:	f7ff fbb2 	bl	8000b8c <HAL_GetTick>
 8001428:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800142a:	e010      	b.n	800144e <HAL_RCC_OscConfig+0x2be>
 800142c:	40021000 	.word	0x40021000
 8001430:	080033c4 	.word	0x080033c4
 8001434:	20000000 	.word	0x20000000
 8001438:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800143c:	f7ff fba6 	bl	8000b8c <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	; 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e300      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800144e:	4ba0      	ldr	r3, [pc, #640]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x2ac>
 800145a:	e014      	b.n	8001486 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fb96 	bl	8000b8c <HAL_GetTick>
 8001460:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fb92 	bl	8000b8c <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e2ec      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001476:	4b96      	ldr	r3, [pc, #600]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x2d4>
 8001482:	e000      	b.n	8001486 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d060      	beq.n	8001554 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001492:	6a3b      	ldr	r3, [r7, #32]
 8001494:	2b04      	cmp	r3, #4
 8001496:	d005      	beq.n	80014a4 <HAL_RCC_OscConfig+0x314>
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	2b0c      	cmp	r3, #12
 800149c:	d119      	bne.n	80014d2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d116      	bne.n	80014d2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014a4:	4b8a      	ldr	r3, [pc, #552]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_RCC_OscConfig+0x32c>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e2c9      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014bc:	4b84      	ldr	r3, [pc, #528]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	061b      	lsls	r3, r3, #24
 80014ca:	4981      	ldr	r1, [pc, #516]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014d0:	e040      	b.n	8001554 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d023      	beq.n	8001522 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014da:	4b7d      	ldr	r3, [pc, #500]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a7c      	ldr	r2, [pc, #496]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 80014e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e6:	f7ff fb51 	bl	8000b8c <HAL_GetTick>
 80014ea:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ee:	f7ff fb4d 	bl	8000b8c <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e2a7      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001500:	4b73      	ldr	r3, [pc, #460]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150c:	4b70      	ldr	r3, [pc, #448]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	061b      	lsls	r3, r3, #24
 800151a:	496d      	ldr	r1, [pc, #436]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
 8001520:	e018      	b.n	8001554 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001522:	4b6b      	ldr	r3, [pc, #428]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a6a      	ldr	r2, [pc, #424]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 8001528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800152c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152e:	f7ff fb2d 	bl	8000b8c <HAL_GetTick>
 8001532:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001536:	f7ff fb29 	bl	8000b8c <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e283      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001548:	4b61      	ldr	r3, [pc, #388]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f0      	bne.n	8001536 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	2b00      	cmp	r3, #0
 800155e:	d07f      	beq.n	8001660 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d05f      	beq.n	8001628 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001568:	4b59      	ldr	r3, [pc, #356]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 800156a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800156e:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	699a      	ldr	r2, [r3, #24]
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	f003 0310 	and.w	r3, r3, #16
 800157a:	429a      	cmp	r2, r3
 800157c:	d037      	beq.n	80015ee <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d006      	beq.n	8001596 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e25c      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b00      	cmp	r3, #0
 800159e:	d01b      	beq.n	80015d8 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80015a0:	4b4b      	ldr	r3, [pc, #300]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 80015a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a6:	4a4a      	ldr	r2, [pc, #296]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015b0:	f7ff faec 	bl	8000b8c <HAL_GetTick>
 80015b4:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b8:	f7ff fae8 	bl	8000b8c <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b11      	cmp	r3, #17
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e242      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015ca:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 80015cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1ef      	bne.n	80015b8 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80015d8:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 80015da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015de:	f023 0210 	bic.w	r2, r3, #16
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	493a      	ldr	r1, [pc, #232]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ee:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 80015f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015f4:	4a36      	ldr	r2, [pc, #216]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fe:	f7ff fac5 	bl	8000b8c <HAL_GetTick>
 8001602:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001606:	f7ff fac1 	bl	8000b8c <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b11      	cmp	r3, #17
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e21b      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001618:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 800161a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0ef      	beq.n	8001606 <HAL_RCC_OscConfig+0x476>
 8001626:	e01b      	b.n	8001660 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001628:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 800162a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800162e:	4a28      	ldr	r2, [pc, #160]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 8001630:	f023 0301 	bic.w	r3, r3, #1
 8001634:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001638:	f7ff faa8 	bl	8000b8c <HAL_GetTick>
 800163c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001640:	f7ff faa4 	bl	8000b8c <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b11      	cmp	r3, #17
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e1fe      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001652:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 8001654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1ef      	bne.n	8001640 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 80c1 	beq.w	80017f0 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 8001676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d10e      	bne.n	800169e <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 8001682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001684:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 8001686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168a:	6593      	str	r3, [r2, #88]	; 0x58
 800168c:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_RCC_OscConfig+0x540>)
 800168e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001698:	2301      	movs	r3, #1
 800169a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800169e:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <HAL_RCC_OscConfig+0x544>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d11c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_RCC_OscConfig+0x544>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <HAL_RCC_OscConfig+0x544>)
 80016b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b6:	f7ff fa69 	bl	8000b8c <HAL_GetTick>
 80016ba:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016bc:	e00c      	b.n	80016d8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016be:	f7ff fa65 	bl	8000b8c <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d905      	bls.n	80016d8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e1bf      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d8:	4bb1      	ldr	r3, [pc, #708]	; (80019a0 <HAL_RCC_OscConfig+0x810>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0ec      	beq.n	80016be <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d02c      	beq.n	800174a <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80016f0:	4bac      	ldr	r3, [pc, #688]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 80016f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001702:	49a8      	ldr	r1, [pc, #672]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 8001704:	4313      	orrs	r3, r2
 8001706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	2b00      	cmp	r3, #0
 8001714:	d010      	beq.n	8001738 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001716:	4ba3      	ldr	r3, [pc, #652]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 8001718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171c:	4aa1      	ldr	r2, [pc, #644]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001726:	4b9f      	ldr	r3, [pc, #636]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 8001728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172c:	4a9d      	ldr	r2, [pc, #628]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001736:	e018      	b.n	800176a <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001738:	4b9a      	ldr	r3, [pc, #616]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 800173a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173e:	4a99      	ldr	r2, [pc, #612]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001748:	e00f      	b.n	800176a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800174a:	4b96      	ldr	r3, [pc, #600]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 800174c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001750:	4a94      	ldr	r2, [pc, #592]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 8001752:	f023 0301 	bic.w	r3, r3, #1
 8001756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800175a:	4b92      	ldr	r3, [pc, #584]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 800175c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001760:	4a90      	ldr	r2, [pc, #576]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 8001762:	f023 0304 	bic.w	r3, r3, #4
 8001766:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d016      	beq.n	80017a0 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001772:	f7ff fa0b 	bl	8000b8c <HAL_GetTick>
 8001776:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001778:	e00a      	b.n	8001790 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177a:	f7ff fa07 	bl	8000b8c <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	f241 3288 	movw	r2, #5000	; 0x1388
 8001788:	4293      	cmp	r3, r2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e15f      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001790:	4b84      	ldr	r3, [pc, #528]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 8001792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0ed      	beq.n	800177a <HAL_RCC_OscConfig+0x5ea>
 800179e:	e01d      	b.n	80017dc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a0:	f7ff f9f4 	bl	8000b8c <HAL_GetTick>
 80017a4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017a6:	e00a      	b.n	80017be <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a8:	f7ff f9f0 	bl	8000b8c <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e148      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017be:	4b79      	ldr	r3, [pc, #484]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 80017c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1ed      	bne.n	80017a8 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80017cc:	4b75      	ldr	r3, [pc, #468]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 80017ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d2:	4a74      	ldr	r2, [pc, #464]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 80017d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d105      	bne.n	80017f0 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e4:	4b6f      	ldr	r3, [pc, #444]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 80017e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e8:	4a6e      	ldr	r2, [pc, #440]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 80017ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0320 	and.w	r3, r3, #32
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d03c      	beq.n	8001876 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001800:	2b00      	cmp	r3, #0
 8001802:	d01c      	beq.n	800183e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001804:	4b67      	ldr	r3, [pc, #412]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 8001806:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800180a:	4a66      	ldr	r2, [pc, #408]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001814:	f7ff f9ba 	bl	8000b8c <HAL_GetTick>
 8001818:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800181c:	f7ff f9b6 	bl	8000b8c <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e110      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800182e:	4b5d      	ldr	r3, [pc, #372]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 8001830:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0ef      	beq.n	800181c <HAL_RCC_OscConfig+0x68c>
 800183c:	e01b      	b.n	8001876 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800183e:	4b59      	ldr	r3, [pc, #356]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 8001840:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001844:	4a57      	ldr	r2, [pc, #348]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 8001846:	f023 0301 	bic.w	r3, r3, #1
 800184a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184e:	f7ff f99d 	bl	8000b8c <HAL_GetTick>
 8001852:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001856:	f7ff f999 	bl	8000b8c <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e0f3      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001868:	4b4e      	ldr	r3, [pc, #312]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 800186a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1ef      	bne.n	8001856 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 80e7 	beq.w	8001a4e <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001884:	2b02      	cmp	r3, #2
 8001886:	f040 80b7 	bne.w	80019f8 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800188a:	4b46      	ldr	r3, [pc, #280]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f003 0203 	and.w	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	429a      	cmp	r2, r3
 800189c:	d124      	bne.n	80018e8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a8:	3b01      	subs	r3, #1
 80018aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d11b      	bne.n	80018e8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d113      	bne.n	80018e8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ca:	085b      	lsrs	r3, r3, #1
 80018cc:	3b01      	subs	r3, #1
 80018ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d109      	bne.n	80018e8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	085b      	lsrs	r3, r3, #1
 80018e0:	3b01      	subs	r3, #1
 80018e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d061      	beq.n	80019ac <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	2b0c      	cmp	r3, #12
 80018ec:	d056      	beq.n	800199c <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018ee:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a2c      	ldr	r2, [pc, #176]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 80018f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018fa:	f7ff f947 	bl	8000b8c <HAL_GetTick>
 80018fe:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001902:	f7ff f943 	bl	8000b8c <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e09d      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001914:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f0      	bne.n	8001902 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001920:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <HAL_RCC_OscConfig+0x818>)
 8001926:	4013      	ands	r3, r2
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001930:	3a01      	subs	r2, #1
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	4311      	orrs	r1, r2
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800193a:	0212      	lsls	r2, r2, #8
 800193c:	4311      	orrs	r1, r2
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001942:	0852      	lsrs	r2, r2, #1
 8001944:	3a01      	subs	r2, #1
 8001946:	0552      	lsls	r2, r2, #21
 8001948:	4311      	orrs	r1, r2
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800194e:	0852      	lsrs	r2, r2, #1
 8001950:	3a01      	subs	r2, #1
 8001952:	0652      	lsls	r2, r2, #25
 8001954:	430a      	orrs	r2, r1
 8001956:	4913      	ldr	r1, [pc, #76]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 8001958:	4313      	orrs	r3, r2
 800195a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a10      	ldr	r2, [pc, #64]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 8001962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001966:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001968:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4a0d      	ldr	r2, [pc, #52]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 800196e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001972:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001974:	f7ff f90a 	bl	8000b8c <HAL_GetTick>
 8001978:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff f906 	bl	8000b8c <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e060      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_RCC_OscConfig+0x814>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800199a:	e058      	b.n	8001a4e <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e057      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
 80019a0:	40007000 	.word	0x40007000
 80019a4:	40021000 	.word	0x40021000
 80019a8:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ac:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <HAL_RCC_OscConfig+0x8c8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d14a      	bne.n	8001a4e <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019b8:	4b27      	ldr	r3, [pc, #156]	; (8001a58 <HAL_RCC_OscConfig+0x8c8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a26      	ldr	r2, [pc, #152]	; (8001a58 <HAL_RCC_OscConfig+0x8c8>)
 80019be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019c4:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <HAL_RCC_OscConfig+0x8c8>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	4a23      	ldr	r2, [pc, #140]	; (8001a58 <HAL_RCC_OscConfig+0x8c8>)
 80019ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019d0:	f7ff f8dc 	bl	8000b8c <HAL_GetTick>
 80019d4:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d8:	f7ff f8d8 	bl	8000b8c <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e032      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ea:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <HAL_RCC_OscConfig+0x8c8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x848>
 80019f6:	e02a      	b.n	8001a4e <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	2b0c      	cmp	r3, #12
 80019fc:	d025      	beq.n	8001a4a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <HAL_RCC_OscConfig+0x8c8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a15      	ldr	r2, [pc, #84]	; (8001a58 <HAL_RCC_OscConfig+0x8c8>)
 8001a04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a08:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a0a:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <HAL_RCC_OscConfig+0x8c8>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <HAL_RCC_OscConfig+0x8c8>)
 8001a10:	f023 0303 	bic.w	r3, r3, #3
 8001a14:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <HAL_RCC_OscConfig+0x8c8>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	4a0f      	ldr	r2, [pc, #60]	; (8001a58 <HAL_RCC_OscConfig+0x8c8>)
 8001a1c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a20:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a22:	f7ff f8b3 	bl	8000b8c <HAL_GetTick>
 8001a26:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2a:	f7ff f8af 	bl	8000b8c <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e009      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_RCC_OscConfig+0x8c8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f0      	bne.n	8001a2a <HAL_RCC_OscConfig+0x89a>
 8001a48:	e001      	b.n	8001a4e <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3728      	adds	r7, #40	; 0x28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40021000 	.word	0x40021000

08001a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0c8      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a70:	4b66      	ldr	r3, [pc, #408]	; (8001c0c <HAL_RCC_ClockConfig+0x1b0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d910      	bls.n	8001aa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7e:	4b63      	ldr	r3, [pc, #396]	; (8001c0c <HAL_RCC_ClockConfig+0x1b0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 0207 	bic.w	r2, r3, #7
 8001a86:	4961      	ldr	r1, [pc, #388]	; (8001c0c <HAL_RCC_ClockConfig+0x1b0>)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8e:	4b5f      	ldr	r3, [pc, #380]	; (8001c0c <HAL_RCC_ClockConfig+0x1b0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0b0      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d04c      	beq.n	8001b46 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d107      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab4:	4b56      	ldr	r3, [pc, #344]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d121      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e09e      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d107      	bne.n	8001adc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001acc:	4b50      	ldr	r3, [pc, #320]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d115      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e092      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d107      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ae4:	4b4a      	ldr	r3, [pc, #296]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d109      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e086      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af4:	4b46      	ldr	r3, [pc, #280]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e07e      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b04:	4b42      	ldr	r3, [pc, #264]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f023 0203 	bic.w	r2, r3, #3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	493f      	ldr	r1, [pc, #252]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b16:	f7ff f839 	bl	8000b8c <HAL_GetTick>
 8001b1a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1c:	e00a      	b.n	8001b34 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1e:	f7ff f835 	bl	8000b8c <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e066      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b34:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 020c 	and.w	r2, r3, #12
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d1eb      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d008      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b52:	4b2f      	ldr	r3, [pc, #188]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	492c      	ldr	r1, [pc, #176]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b64:	4b29      	ldr	r3, [pc, #164]	; (8001c0c <HAL_RCC_ClockConfig+0x1b0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d210      	bcs.n	8001b94 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b72:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <HAL_RCC_ClockConfig+0x1b0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 0207 	bic.w	r2, r3, #7
 8001b7a:	4924      	ldr	r1, [pc, #144]	; (8001c0c <HAL_RCC_ClockConfig+0x1b0>)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <HAL_RCC_ClockConfig+0x1b0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e036      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d008      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	4918      	ldr	r1, [pc, #96]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d009      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4910      	ldr	r1, [pc, #64]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bd2:	f000 f825 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8001bd6:	4601      	mov	r1, r0
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <HAL_RCC_ClockConfig+0x1b4>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	4a0c      	ldr	r2, [pc, #48]	; (8001c14 <HAL_RCC_ClockConfig+0x1b8>)
 8001be4:	5cd3      	ldrb	r3, [r2, r3]
 8001be6:	f003 031f 	and.w	r3, r3, #31
 8001bea:	fa21 f303 	lsr.w	r3, r1, r3
 8001bee:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <HAL_RCC_ClockConfig+0x1c0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe ff78 	bl	8000aec <HAL_InitTick>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c00:	7afb      	ldrb	r3, [r7, #11]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40022000 	.word	0x40022000
 8001c10:	40021000 	.word	0x40021000
 8001c14:	080033c4 	.word	0x080033c4
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	; 0x24
 8001c24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c2e:	4b3d      	ldr	r3, [pc, #244]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c38:	4b3a      	ldr	r3, [pc, #232]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_GetSysClockFreq+0x34>
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d121      	bne.n	8001c92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d11e      	bne.n	8001c92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c54:	4b33      	ldr	r3, [pc, #204]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c60:	4b30      	ldr	r3, [pc, #192]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c66:	0a1b      	lsrs	r3, r3, #8
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	e005      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c70:	4b2c      	ldr	r3, [pc, #176]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c7c:	4a2a      	ldr	r2, [pc, #168]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10d      	bne.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c90:	e00a      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d102      	bne.n	8001c9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c98:	4b24      	ldr	r3, [pc, #144]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	e004      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d101      	bne.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ca4:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ca6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	2b0c      	cmp	r3, #12
 8001cac:	d133      	bne.n	8001d16 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cae:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d002      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0xa4>
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d003      	beq.n	8001cca <HAL_RCC_GetSysClockFreq+0xaa>
 8001cc2:	e005      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cc6:	617b      	str	r3, [r7, #20]
      break;
 8001cc8:	e005      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cca:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ccc:	617b      	str	r3, [r7, #20]
      break;
 8001cce:	e002      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	617b      	str	r3, [r7, #20]
      break;
 8001cd4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cd6:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	091b      	lsrs	r3, r3, #4
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	fb02 f203 	mul.w	r2, r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	0e5b      	lsrs	r3, r3, #25
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	3301      	adds	r3, #1
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d14:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d16:	69bb      	ldr	r3, [r7, #24]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3724      	adds	r7, #36	; 0x24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	40021000 	.word	0x40021000
 8001d28:	080033dc 	.word	0x080033dc
 8001d2c:	00f42400 	.word	0x00f42400
 8001d30:	007a1200 	.word	0x007a1200

08001d34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000000 	.word	0x20000000

08001d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d50:	f7ff fff0 	bl	8001d34 <HAL_RCC_GetHCLKFreq>
 8001d54:	4601      	mov	r1, r0
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	0a1b      	lsrs	r3, r3, #8
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d62:	5cd3      	ldrb	r3, [r2, r3]
 8001d64:	f003 031f 	and.w	r3, r3, #31
 8001d68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000
 8001d74:	080033d4 	.word	0x080033d4

08001d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d7c:	f7ff ffda 	bl	8001d34 <HAL_RCC_GetHCLKFreq>
 8001d80:	4601      	mov	r1, r0
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	0adb      	lsrs	r3, r3, #11
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d8e:	5cd3      	ldrb	r3, [r2, r3]
 8001d90:	f003 031f 	and.w	r3, r3, #31
 8001d94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	080033d4 	.word	0x080033d4

08001da4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001dac:	2300      	movs	r3, #0
 8001dae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001db0:	4b2a      	ldr	r3, [pc, #168]	; (8001e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dbc:	f7ff f984 	bl	80010c8 <HAL_PWREx_GetVoltageRange>
 8001dc0:	6178      	str	r0, [r7, #20]
 8001dc2:	e014      	b.n	8001dee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dc4:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc8:	4a24      	ldr	r2, [pc, #144]	; (8001e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dce:	6593      	str	r3, [r2, #88]	; 0x58
 8001dd0:	4b22      	ldr	r3, [pc, #136]	; (8001e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ddc:	f7ff f974 	bl	80010c8 <HAL_PWREx_GetVoltageRange>
 8001de0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001de2:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de6:	4a1d      	ldr	r2, [pc, #116]	; (8001e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001df4:	d10b      	bne.n	8001e0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b80      	cmp	r3, #128	; 0x80
 8001dfa:	d919      	bls.n	8001e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2ba0      	cmp	r3, #160	; 0xa0
 8001e00:	d902      	bls.n	8001e08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e02:	2302      	movs	r3, #2
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	e013      	b.n	8001e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e08:	2301      	movs	r3, #1
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	e010      	b.n	8001e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b80      	cmp	r3, #128	; 0x80
 8001e12:	d902      	bls.n	8001e1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e14:	2303      	movs	r3, #3
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	e00a      	b.n	8001e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b80      	cmp	r3, #128	; 0x80
 8001e1e:	d102      	bne.n	8001e26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e20:	2302      	movs	r3, #2
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	e004      	b.n	8001e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b70      	cmp	r3, #112	; 0x70
 8001e2a:	d101      	bne.n	8001e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f023 0207 	bic.w	r2, r3, #7
 8001e38:	4909      	ldr	r1, [pc, #36]	; (8001e60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d001      	beq.n	8001e52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40022000 	.word	0x40022000

08001e64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e70:	2300      	movs	r3, #0
 8001e72:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 809e 	beq.w	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e86:	4b46      	ldr	r3, [pc, #280]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001e96:	2300      	movs	r3, #0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00d      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e9c:	4b40      	ldr	r3, [pc, #256]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea0:	4a3f      	ldr	r2, [pc, #252]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea8:	4b3d      	ldr	r3, [pc, #244]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eb8:	4b3a      	ldr	r3, [pc, #232]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a39      	ldr	r2, [pc, #228]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ec4:	f7fe fe62 	bl	8000b8c <HAL_GetTick>
 8001ec8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001eca:	e009      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ecc:	f7fe fe5e 	bl	8000b8c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d902      	bls.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	74fb      	strb	r3, [r7, #19]
        break;
 8001ede:	e005      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ee0:	4b30      	ldr	r3, [pc, #192]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0ef      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8001eec:	7cfb      	ldrb	r3, [r7, #19]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d15a      	bne.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ef2:	4b2b      	ldr	r3, [pc, #172]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001efc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01e      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d019      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f0e:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f18:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f1a:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f20:	4a1f      	ldr	r2, [pc, #124]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f30:	4a1b      	ldr	r2, [pc, #108]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f3a:	4a19      	ldr	r2, [pc, #100]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d016      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7fe fe1e 	bl	8000b8c <HAL_GetTick>
 8001f50:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f52:	e00b      	b.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f54:	f7fe fe1a 	bl	8000b8c <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d902      	bls.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	74fb      	strb	r3, [r7, #19]
            break;
 8001f6a:	e006      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0ec      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8001f7a:	7cfb      	ldrb	r3, [r7, #19]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10b      	bne.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f80:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	4904      	ldr	r1, [pc, #16]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f96:	e009      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f98:	7cfb      	ldrb	r3, [r7, #19]
 8001f9a:	74bb      	strb	r3, [r7, #18]
 8001f9c:	e006      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x148>
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fa8:	7cfb      	ldrb	r3, [r7, #19]
 8001faa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fac:	7c7b      	ldrb	r3, [r7, #17]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d105      	bne.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb2:	4b6e      	ldr	r3, [pc, #440]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	4a6d      	ldr	r2, [pc, #436]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00a      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fca:	4b68      	ldr	r3, [pc, #416]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd0:	f023 0203 	bic.w	r2, r3, #3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	4964      	ldr	r1, [pc, #400]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00a      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fec:	4b5f      	ldr	r3, [pc, #380]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff2:	f023 020c 	bic.w	r2, r3, #12
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	495c      	ldr	r1, [pc, #368]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00a      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800200e:	4b57      	ldr	r3, [pc, #348]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002014:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	4953      	ldr	r1, [pc, #332]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800201e:	4313      	orrs	r3, r2
 8002020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0320 	and.w	r3, r3, #32
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00a      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002030:	4b4e      	ldr	r3, [pc, #312]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002036:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	494b      	ldr	r1, [pc, #300]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00a      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002052:	4b46      	ldr	r3, [pc, #280]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002058:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	4942      	ldr	r1, [pc, #264]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00a      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002074:	4b3d      	ldr	r3, [pc, #244]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	493a      	ldr	r1, [pc, #232]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002084:	4313      	orrs	r3, r2
 8002086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00a      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002096:	4b35      	ldr	r3, [pc, #212]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	4931      	ldr	r1, [pc, #196]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00a      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020b8:	4b2c      	ldr	r3, [pc, #176]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	4929      	ldr	r1, [pc, #164]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00a      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020da:	4b24      	ldr	r3, [pc, #144]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	4920      	ldr	r1, [pc, #128]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d015      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020fc:	4b1b      	ldr	r3, [pc, #108]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002102:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	4918      	ldr	r1, [pc, #96]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800211a:	d105      	bne.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	4a12      	ldr	r2, [pc, #72]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002126:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d015      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002134:	4b0d      	ldr	r3, [pc, #52]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002142:	490a      	ldr	r1, [pc, #40]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002152:	d105      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002154:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4a04      	ldr	r2, [pc, #16]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800215a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800215e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002160:	7cbb      	ldrb	r3, [r7, #18]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000

08002170 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e040      	b.n	8002204 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7fe fc1e 	bl	80009d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2224      	movs	r2, #36	; 0x24
 800219c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0201 	bic.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f8c0 	bl	8002334 <UART_SetConfig>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e022      	b.n	8002204 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 faea 	bl	80027a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0201 	orr.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 fb71 	bl	80028e4 <UART_CheckIdleState>
 8002202:	4603      	mov	r3, r0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	; 0x28
 8002210:	af02      	add	r7, sp, #8
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	4613      	mov	r3, r2
 800221a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002220:	2b20      	cmp	r3, #32
 8002222:	f040 8081 	bne.w	8002328 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d002      	beq.n	8002232 <HAL_UART_Transmit+0x26>
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e079      	b.n	800232a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_UART_Transmit+0x38>
 8002240:	2302      	movs	r3, #2
 8002242:	e072      	b.n	800232a <HAL_UART_Transmit+0x11e>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2221      	movs	r2, #33	; 0x21
 8002256:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002258:	f7fe fc98 	bl	8000b8c <HAL_GetTick>
 800225c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	88fa      	ldrh	r2, [r7, #6]
 8002262:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	88fa      	ldrh	r2, [r7, #6]
 800226a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002276:	d108      	bne.n	800228a <HAL_UART_Transmit+0x7e>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d104      	bne.n	800228a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002280:	2300      	movs	r3, #0
 8002282:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	61bb      	str	r3, [r7, #24]
 8002288:	e003      	b.n	8002292 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800228e:	2300      	movs	r3, #0
 8002290:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800229a:	e02d      	b.n	80022f8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	2200      	movs	r2, #0
 80022a4:	2180      	movs	r1, #128	; 0x80
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 fb61 	bl	800296e <UART_WaitOnFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e039      	b.n	800232a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10b      	bne.n	80022d4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	881a      	ldrh	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022c8:	b292      	uxth	r2, r2
 80022ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	3302      	adds	r3, #2
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	e008      	b.n	80022e6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	781a      	ldrb	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	b292      	uxth	r2, r2
 80022de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	3301      	adds	r3, #1
 80022e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80022fe:	b29b      	uxth	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1cb      	bne.n	800229c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2200      	movs	r2, #0
 800230c:	2140      	movs	r1, #64	; 0x40
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 fb2d 	bl	800296e <UART_WaitOnFlagUntilTimeout>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e005      	b.n	800232a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2220      	movs	r2, #32
 8002322:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002324:	2300      	movs	r3, #0
 8002326:	e000      	b.n	800232a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002328:	2302      	movs	r3, #2
  }
}
 800232a:	4618      	mov	r0, r3
 800232c:	3720      	adds	r7, #32
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002334:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002338:	b088      	sub	sp, #32
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	4313      	orrs	r3, r2
 8002358:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4baa      	ldr	r3, [pc, #680]	; (800260c <UART_SetConfig+0x2d8>)
 8002362:	4013      	ands	r3, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	69f9      	ldr	r1, [r7, #28]
 800236a:	430b      	orrs	r3, r1
 800236c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4aa0      	ldr	r2, [pc, #640]	; (8002610 <UART_SetConfig+0x2dc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d004      	beq.n	800239e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	69fa      	ldr	r2, [r7, #28]
 800239a:	4313      	orrs	r3, r2
 800239c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a97      	ldr	r2, [pc, #604]	; (8002614 <UART_SetConfig+0x2e0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d121      	bne.n	8002400 <UART_SetConfig+0xcc>
 80023bc:	4b96      	ldr	r3, [pc, #600]	; (8002618 <UART_SetConfig+0x2e4>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d816      	bhi.n	80023f8 <UART_SetConfig+0xc4>
 80023ca:	a201      	add	r2, pc, #4	; (adr r2, 80023d0 <UART_SetConfig+0x9c>)
 80023cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d0:	080023e1 	.word	0x080023e1
 80023d4:	080023ed 	.word	0x080023ed
 80023d8:	080023e7 	.word	0x080023e7
 80023dc:	080023f3 	.word	0x080023f3
 80023e0:	2301      	movs	r3, #1
 80023e2:	76fb      	strb	r3, [r7, #27]
 80023e4:	e098      	b.n	8002518 <UART_SetConfig+0x1e4>
 80023e6:	2302      	movs	r3, #2
 80023e8:	76fb      	strb	r3, [r7, #27]
 80023ea:	e095      	b.n	8002518 <UART_SetConfig+0x1e4>
 80023ec:	2304      	movs	r3, #4
 80023ee:	76fb      	strb	r3, [r7, #27]
 80023f0:	e092      	b.n	8002518 <UART_SetConfig+0x1e4>
 80023f2:	2308      	movs	r3, #8
 80023f4:	76fb      	strb	r3, [r7, #27]
 80023f6:	e08f      	b.n	8002518 <UART_SetConfig+0x1e4>
 80023f8:	2310      	movs	r3, #16
 80023fa:	76fb      	strb	r3, [r7, #27]
 80023fc:	bf00      	nop
 80023fe:	e08b      	b.n	8002518 <UART_SetConfig+0x1e4>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a85      	ldr	r2, [pc, #532]	; (800261c <UART_SetConfig+0x2e8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d134      	bne.n	8002474 <UART_SetConfig+0x140>
 800240a:	4b83      	ldr	r3, [pc, #524]	; (8002618 <UART_SetConfig+0x2e4>)
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002410:	f003 030c 	and.w	r3, r3, #12
 8002414:	2b0c      	cmp	r3, #12
 8002416:	d829      	bhi.n	800246c <UART_SetConfig+0x138>
 8002418:	a201      	add	r2, pc, #4	; (adr r2, 8002420 <UART_SetConfig+0xec>)
 800241a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241e:	bf00      	nop
 8002420:	08002455 	.word	0x08002455
 8002424:	0800246d 	.word	0x0800246d
 8002428:	0800246d 	.word	0x0800246d
 800242c:	0800246d 	.word	0x0800246d
 8002430:	08002461 	.word	0x08002461
 8002434:	0800246d 	.word	0x0800246d
 8002438:	0800246d 	.word	0x0800246d
 800243c:	0800246d 	.word	0x0800246d
 8002440:	0800245b 	.word	0x0800245b
 8002444:	0800246d 	.word	0x0800246d
 8002448:	0800246d 	.word	0x0800246d
 800244c:	0800246d 	.word	0x0800246d
 8002450:	08002467 	.word	0x08002467
 8002454:	2300      	movs	r3, #0
 8002456:	76fb      	strb	r3, [r7, #27]
 8002458:	e05e      	b.n	8002518 <UART_SetConfig+0x1e4>
 800245a:	2302      	movs	r3, #2
 800245c:	76fb      	strb	r3, [r7, #27]
 800245e:	e05b      	b.n	8002518 <UART_SetConfig+0x1e4>
 8002460:	2304      	movs	r3, #4
 8002462:	76fb      	strb	r3, [r7, #27]
 8002464:	e058      	b.n	8002518 <UART_SetConfig+0x1e4>
 8002466:	2308      	movs	r3, #8
 8002468:	76fb      	strb	r3, [r7, #27]
 800246a:	e055      	b.n	8002518 <UART_SetConfig+0x1e4>
 800246c:	2310      	movs	r3, #16
 800246e:	76fb      	strb	r3, [r7, #27]
 8002470:	bf00      	nop
 8002472:	e051      	b.n	8002518 <UART_SetConfig+0x1e4>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a69      	ldr	r2, [pc, #420]	; (8002620 <UART_SetConfig+0x2ec>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d120      	bne.n	80024c0 <UART_SetConfig+0x18c>
 800247e:	4b66      	ldr	r3, [pc, #408]	; (8002618 <UART_SetConfig+0x2e4>)
 8002480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002484:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002488:	2b10      	cmp	r3, #16
 800248a:	d00f      	beq.n	80024ac <UART_SetConfig+0x178>
 800248c:	2b10      	cmp	r3, #16
 800248e:	d802      	bhi.n	8002496 <UART_SetConfig+0x162>
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <UART_SetConfig+0x16c>
 8002494:	e010      	b.n	80024b8 <UART_SetConfig+0x184>
 8002496:	2b20      	cmp	r3, #32
 8002498:	d005      	beq.n	80024a6 <UART_SetConfig+0x172>
 800249a:	2b30      	cmp	r3, #48	; 0x30
 800249c:	d009      	beq.n	80024b2 <UART_SetConfig+0x17e>
 800249e:	e00b      	b.n	80024b8 <UART_SetConfig+0x184>
 80024a0:	2300      	movs	r3, #0
 80024a2:	76fb      	strb	r3, [r7, #27]
 80024a4:	e038      	b.n	8002518 <UART_SetConfig+0x1e4>
 80024a6:	2302      	movs	r3, #2
 80024a8:	76fb      	strb	r3, [r7, #27]
 80024aa:	e035      	b.n	8002518 <UART_SetConfig+0x1e4>
 80024ac:	2304      	movs	r3, #4
 80024ae:	76fb      	strb	r3, [r7, #27]
 80024b0:	e032      	b.n	8002518 <UART_SetConfig+0x1e4>
 80024b2:	2308      	movs	r3, #8
 80024b4:	76fb      	strb	r3, [r7, #27]
 80024b6:	e02f      	b.n	8002518 <UART_SetConfig+0x1e4>
 80024b8:	2310      	movs	r3, #16
 80024ba:	76fb      	strb	r3, [r7, #27]
 80024bc:	bf00      	nop
 80024be:	e02b      	b.n	8002518 <UART_SetConfig+0x1e4>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a52      	ldr	r2, [pc, #328]	; (8002610 <UART_SetConfig+0x2dc>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d124      	bne.n	8002514 <UART_SetConfig+0x1e0>
 80024ca:	4b53      	ldr	r3, [pc, #332]	; (8002618 <UART_SetConfig+0x2e4>)
 80024cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80024d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d8:	d012      	beq.n	8002500 <UART_SetConfig+0x1cc>
 80024da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024de:	d802      	bhi.n	80024e6 <UART_SetConfig+0x1b2>
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d007      	beq.n	80024f4 <UART_SetConfig+0x1c0>
 80024e4:	e012      	b.n	800250c <UART_SetConfig+0x1d8>
 80024e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024ea:	d006      	beq.n	80024fa <UART_SetConfig+0x1c6>
 80024ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80024f0:	d009      	beq.n	8002506 <UART_SetConfig+0x1d2>
 80024f2:	e00b      	b.n	800250c <UART_SetConfig+0x1d8>
 80024f4:	2300      	movs	r3, #0
 80024f6:	76fb      	strb	r3, [r7, #27]
 80024f8:	e00e      	b.n	8002518 <UART_SetConfig+0x1e4>
 80024fa:	2302      	movs	r3, #2
 80024fc:	76fb      	strb	r3, [r7, #27]
 80024fe:	e00b      	b.n	8002518 <UART_SetConfig+0x1e4>
 8002500:	2304      	movs	r3, #4
 8002502:	76fb      	strb	r3, [r7, #27]
 8002504:	e008      	b.n	8002518 <UART_SetConfig+0x1e4>
 8002506:	2308      	movs	r3, #8
 8002508:	76fb      	strb	r3, [r7, #27]
 800250a:	e005      	b.n	8002518 <UART_SetConfig+0x1e4>
 800250c:	2310      	movs	r3, #16
 800250e:	76fb      	strb	r3, [r7, #27]
 8002510:	bf00      	nop
 8002512:	e001      	b.n	8002518 <UART_SetConfig+0x1e4>
 8002514:	2310      	movs	r3, #16
 8002516:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a3c      	ldr	r2, [pc, #240]	; (8002610 <UART_SetConfig+0x2dc>)
 800251e:	4293      	cmp	r3, r2
 8002520:	f040 8082 	bne.w	8002628 <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002524:	7efb      	ldrb	r3, [r7, #27]
 8002526:	2b08      	cmp	r3, #8
 8002528:	d823      	bhi.n	8002572 <UART_SetConfig+0x23e>
 800252a:	a201      	add	r2, pc, #4	; (adr r2, 8002530 <UART_SetConfig+0x1fc>)
 800252c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002530:	08002555 	.word	0x08002555
 8002534:	08002573 	.word	0x08002573
 8002538:	0800255d 	.word	0x0800255d
 800253c:	08002573 	.word	0x08002573
 8002540:	08002563 	.word	0x08002563
 8002544:	08002573 	.word	0x08002573
 8002548:	08002573 	.word	0x08002573
 800254c:	08002573 	.word	0x08002573
 8002550:	0800256b 	.word	0x0800256b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002554:	f7ff fbfa 	bl	8001d4c <HAL_RCC_GetPCLK1Freq>
 8002558:	6178      	str	r0, [r7, #20]
        break;
 800255a:	e00f      	b.n	800257c <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800255c:	4b31      	ldr	r3, [pc, #196]	; (8002624 <UART_SetConfig+0x2f0>)
 800255e:	617b      	str	r3, [r7, #20]
        break;
 8002560:	e00c      	b.n	800257c <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002562:	f7ff fb5d 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8002566:	6178      	str	r0, [r7, #20]
        break;
 8002568:	e008      	b.n	800257c <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800256a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800256e:	617b      	str	r3, [r7, #20]
        break;
 8002570:	e004      	b.n	800257c <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	76bb      	strb	r3, [r7, #26]
        break;
 800257a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8100 	beq.w	8002784 <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4413      	add	r3, r2
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	429a      	cmp	r2, r3
 8002592:	d305      	bcc.n	80025a0 <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	429a      	cmp	r2, r3
 800259e:	d902      	bls.n	80025a6 <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	76bb      	strb	r3, [r7, #26]
 80025a4:	e0ee      	b.n	8002784 <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	4619      	mov	r1, r3
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	f04f 0400 	mov.w	r4, #0
 80025b6:	0214      	lsls	r4, r2, #8
 80025b8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80025bc:	020b      	lsls	r3, r1, #8
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6852      	ldr	r2, [r2, #4]
 80025c2:	0852      	lsrs	r2, r2, #1
 80025c4:	4611      	mov	r1, r2
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	eb13 0b01 	adds.w	fp, r3, r1
 80025ce:	eb44 0c02 	adc.w	ip, r4, r2
 80025d2:	4658      	mov	r0, fp
 80025d4:	4661      	mov	r1, ip
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f04f 0400 	mov.w	r4, #0
 80025de:	461a      	mov	r2, r3
 80025e0:	4623      	mov	r3, r4
 80025e2:	f7fd fdf3 	bl	80001cc <__aeabi_uldivmod>
 80025e6:	4603      	mov	r3, r0
 80025e8:	460c      	mov	r4, r1
 80025ea:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025f2:	d308      	bcc.n	8002606 <UART_SetConfig+0x2d2>
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025fa:	d204      	bcs.n	8002606 <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	60da      	str	r2, [r3, #12]
 8002604:	e0be      	b.n	8002784 <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	76bb      	strb	r3, [r7, #26]
 800260a:	e0bb      	b.n	8002784 <UART_SetConfig+0x450>
 800260c:	efff69f3 	.word	0xefff69f3
 8002610:	40008000 	.word	0x40008000
 8002614:	40013800 	.word	0x40013800
 8002618:	40021000 	.word	0x40021000
 800261c:	40004400 	.word	0x40004400
 8002620:	40004800 	.word	0x40004800
 8002624:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002630:	d15c      	bne.n	80026ec <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8002632:	7efb      	ldrb	r3, [r7, #27]
 8002634:	2b08      	cmp	r3, #8
 8002636:	d828      	bhi.n	800268a <UART_SetConfig+0x356>
 8002638:	a201      	add	r2, pc, #4	; (adr r2, 8002640 <UART_SetConfig+0x30c>)
 800263a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263e:	bf00      	nop
 8002640:	08002665 	.word	0x08002665
 8002644:	0800266d 	.word	0x0800266d
 8002648:	08002675 	.word	0x08002675
 800264c:	0800268b 	.word	0x0800268b
 8002650:	0800267b 	.word	0x0800267b
 8002654:	0800268b 	.word	0x0800268b
 8002658:	0800268b 	.word	0x0800268b
 800265c:	0800268b 	.word	0x0800268b
 8002660:	08002683 	.word	0x08002683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002664:	f7ff fb72 	bl	8001d4c <HAL_RCC_GetPCLK1Freq>
 8002668:	6178      	str	r0, [r7, #20]
        break;
 800266a:	e013      	b.n	8002694 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800266c:	f7ff fb84 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 8002670:	6178      	str	r0, [r7, #20]
        break;
 8002672:	e00f      	b.n	8002694 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002674:	4b49      	ldr	r3, [pc, #292]	; (800279c <UART_SetConfig+0x468>)
 8002676:	617b      	str	r3, [r7, #20]
        break;
 8002678:	e00c      	b.n	8002694 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800267a:	f7ff fad1 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 800267e:	6178      	str	r0, [r7, #20]
        break;
 8002680:	e008      	b.n	8002694 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002686:	617b      	str	r3, [r7, #20]
        break;
 8002688:	e004      	b.n	8002694 <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	76bb      	strb	r3, [r7, #26]
        break;
 8002692:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d074      	beq.n	8002784 <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	005a      	lsls	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	085b      	lsrs	r3, r3, #1
 80026a4:	441a      	add	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2b0f      	cmp	r3, #15
 80026b6:	d916      	bls.n	80026e6 <UART_SetConfig+0x3b2>
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026be:	d212      	bcs.n	80026e6 <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	f023 030f 	bic.w	r3, r3, #15
 80026c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	085b      	lsrs	r3, r3, #1
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	89fb      	ldrh	r3, [r7, #14]
 80026d8:	4313      	orrs	r3, r2
 80026da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	89fa      	ldrh	r2, [r7, #14]
 80026e2:	60da      	str	r2, [r3, #12]
 80026e4:	e04e      	b.n	8002784 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	76bb      	strb	r3, [r7, #26]
 80026ea:	e04b      	b.n	8002784 <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 80026ec:	7efb      	ldrb	r3, [r7, #27]
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d827      	bhi.n	8002742 <UART_SetConfig+0x40e>
 80026f2:	a201      	add	r2, pc, #4	; (adr r2, 80026f8 <UART_SetConfig+0x3c4>)
 80026f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f8:	0800271d 	.word	0x0800271d
 80026fc:	08002725 	.word	0x08002725
 8002700:	0800272d 	.word	0x0800272d
 8002704:	08002743 	.word	0x08002743
 8002708:	08002733 	.word	0x08002733
 800270c:	08002743 	.word	0x08002743
 8002710:	08002743 	.word	0x08002743
 8002714:	08002743 	.word	0x08002743
 8002718:	0800273b 	.word	0x0800273b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800271c:	f7ff fb16 	bl	8001d4c <HAL_RCC_GetPCLK1Freq>
 8002720:	6178      	str	r0, [r7, #20]
        break;
 8002722:	e013      	b.n	800274c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002724:	f7ff fb28 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 8002728:	6178      	str	r0, [r7, #20]
        break;
 800272a:	e00f      	b.n	800274c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800272c:	4b1b      	ldr	r3, [pc, #108]	; (800279c <UART_SetConfig+0x468>)
 800272e:	617b      	str	r3, [r7, #20]
        break;
 8002730:	e00c      	b.n	800274c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002732:	f7ff fa75 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8002736:	6178      	str	r0, [r7, #20]
        break;
 8002738:	e008      	b.n	800274c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800273a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800273e:	617b      	str	r3, [r7, #20]
        break;
 8002740:	e004      	b.n	800274c <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	76bb      	strb	r3, [r7, #26]
        break;
 800274a:	bf00      	nop
    }

    if (pclk != 0U)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d018      	beq.n	8002784 <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	085a      	lsrs	r2, r3, #1
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	441a      	add	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	fbb2 f3f3 	udiv	r3, r2, r3
 8002764:	b29b      	uxth	r3, r3
 8002766:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	2b0f      	cmp	r3, #15
 800276c:	d908      	bls.n	8002780 <UART_SetConfig+0x44c>
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002774:	d204      	bcs.n	8002780 <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	e001      	b.n	8002784 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002790:	7ebb      	ldrb	r3, [r7, #26]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3720      	adds	r7, #32
 8002796:	46bd      	mov	sp, r7
 8002798:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800279c:	00f42400 	.word	0x00f42400

080027a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00a      	beq.n	80027ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00a      	beq.n	800280e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00a      	beq.n	8002830 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	f003 0320 	and.w	r3, r3, #32
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287c:	2b00      	cmp	r3, #0
 800287e:	d01a      	beq.n	80028b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800289e:	d10a      	bne.n	80028b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	605a      	str	r2, [r3, #4]
  }
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80028f2:	f7fe f94b 	bl	8000b8c <HAL_GetTick>
 80028f6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b08      	cmp	r3, #8
 8002904:	d10e      	bne.n	8002924 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002906:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f82a 	bl	800296e <UART_WaitOnFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e020      	b.n	8002966 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	2b04      	cmp	r3, #4
 8002930:	d10e      	bne.n	8002950 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002932:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f814 	bl	800296e <UART_WaitOnFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e00a      	b.n	8002966 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2220      	movs	r2, #32
 800295a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	603b      	str	r3, [r7, #0]
 800297a:	4613      	mov	r3, r2
 800297c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800297e:	e05d      	b.n	8002a3c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002986:	d059      	beq.n	8002a3c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002988:	f7fe f900 	bl	8000b8c <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	429a      	cmp	r2, r3
 8002996:	d302      	bcc.n	800299e <UART_WaitOnFlagUntilTimeout+0x30>
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d11b      	bne.n	80029d6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029ac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0201 	bic.w	r2, r2, #1
 80029bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2220      	movs	r2, #32
 80029c2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e042      	b.n	8002a5c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d02b      	beq.n	8002a3c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029f2:	d123      	bne.n	8002a3c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a0c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0201 	bic.w	r2, r2, #1
 8002a1c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2220      	movs	r2, #32
 8002a28:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e00f      	b.n	8002a5c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	69da      	ldr	r2, [r3, #28]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	4013      	ands	r3, r2
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	bf0c      	ite	eq
 8002a4c:	2301      	moveq	r3, #1
 8002a4e:	2300      	movne	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	461a      	mov	r2, r3
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d092      	beq.n	8002980 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <__errno>:
 8002a64:	4b01      	ldr	r3, [pc, #4]	; (8002a6c <__errno+0x8>)
 8002a66:	6818      	ldr	r0, [r3, #0]
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	2000000c 	.word	0x2000000c

08002a70 <__libc_init_array>:
 8002a70:	b570      	push	{r4, r5, r6, lr}
 8002a72:	4e0d      	ldr	r6, [pc, #52]	; (8002aa8 <__libc_init_array+0x38>)
 8002a74:	4c0d      	ldr	r4, [pc, #52]	; (8002aac <__libc_init_array+0x3c>)
 8002a76:	1ba4      	subs	r4, r4, r6
 8002a78:	10a4      	asrs	r4, r4, #2
 8002a7a:	2500      	movs	r5, #0
 8002a7c:	42a5      	cmp	r5, r4
 8002a7e:	d109      	bne.n	8002a94 <__libc_init_array+0x24>
 8002a80:	4e0b      	ldr	r6, [pc, #44]	; (8002ab0 <__libc_init_array+0x40>)
 8002a82:	4c0c      	ldr	r4, [pc, #48]	; (8002ab4 <__libc_init_array+0x44>)
 8002a84:	f000 fc88 	bl	8003398 <_init>
 8002a88:	1ba4      	subs	r4, r4, r6
 8002a8a:	10a4      	asrs	r4, r4, #2
 8002a8c:	2500      	movs	r5, #0
 8002a8e:	42a5      	cmp	r5, r4
 8002a90:	d105      	bne.n	8002a9e <__libc_init_array+0x2e>
 8002a92:	bd70      	pop	{r4, r5, r6, pc}
 8002a94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a98:	4798      	blx	r3
 8002a9a:	3501      	adds	r5, #1
 8002a9c:	e7ee      	b.n	8002a7c <__libc_init_array+0xc>
 8002a9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002aa2:	4798      	blx	r3
 8002aa4:	3501      	adds	r5, #1
 8002aa6:	e7f2      	b.n	8002a8e <__libc_init_array+0x1e>
 8002aa8:	08003478 	.word	0x08003478
 8002aac:	08003478 	.word	0x08003478
 8002ab0:	08003478 	.word	0x08003478
 8002ab4:	0800347c 	.word	0x0800347c

08002ab8 <memset>:
 8002ab8:	4402      	add	r2, r0
 8002aba:	4603      	mov	r3, r0
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d100      	bne.n	8002ac2 <memset+0xa>
 8002ac0:	4770      	bx	lr
 8002ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ac6:	e7f9      	b.n	8002abc <memset+0x4>

08002ac8 <_puts_r>:
 8002ac8:	b570      	push	{r4, r5, r6, lr}
 8002aca:	460e      	mov	r6, r1
 8002acc:	4605      	mov	r5, r0
 8002ace:	b118      	cbz	r0, 8002ad8 <_puts_r+0x10>
 8002ad0:	6983      	ldr	r3, [r0, #24]
 8002ad2:	b90b      	cbnz	r3, 8002ad8 <_puts_r+0x10>
 8002ad4:	f000 fa0c 	bl	8002ef0 <__sinit>
 8002ad8:	69ab      	ldr	r3, [r5, #24]
 8002ada:	68ac      	ldr	r4, [r5, #8]
 8002adc:	b913      	cbnz	r3, 8002ae4 <_puts_r+0x1c>
 8002ade:	4628      	mov	r0, r5
 8002ae0:	f000 fa06 	bl	8002ef0 <__sinit>
 8002ae4:	4b23      	ldr	r3, [pc, #140]	; (8002b74 <_puts_r+0xac>)
 8002ae6:	429c      	cmp	r4, r3
 8002ae8:	d117      	bne.n	8002b1a <_puts_r+0x52>
 8002aea:	686c      	ldr	r4, [r5, #4]
 8002aec:	89a3      	ldrh	r3, [r4, #12]
 8002aee:	071b      	lsls	r3, r3, #28
 8002af0:	d51d      	bpl.n	8002b2e <_puts_r+0x66>
 8002af2:	6923      	ldr	r3, [r4, #16]
 8002af4:	b1db      	cbz	r3, 8002b2e <_puts_r+0x66>
 8002af6:	3e01      	subs	r6, #1
 8002af8:	68a3      	ldr	r3, [r4, #8]
 8002afa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002afe:	3b01      	subs	r3, #1
 8002b00:	60a3      	str	r3, [r4, #8]
 8002b02:	b9e9      	cbnz	r1, 8002b40 <_puts_r+0x78>
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	da2e      	bge.n	8002b66 <_puts_r+0x9e>
 8002b08:	4622      	mov	r2, r4
 8002b0a:	210a      	movs	r1, #10
 8002b0c:	4628      	mov	r0, r5
 8002b0e:	f000 f83f 	bl	8002b90 <__swbuf_r>
 8002b12:	3001      	adds	r0, #1
 8002b14:	d011      	beq.n	8002b3a <_puts_r+0x72>
 8002b16:	200a      	movs	r0, #10
 8002b18:	e011      	b.n	8002b3e <_puts_r+0x76>
 8002b1a:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <_puts_r+0xb0>)
 8002b1c:	429c      	cmp	r4, r3
 8002b1e:	d101      	bne.n	8002b24 <_puts_r+0x5c>
 8002b20:	68ac      	ldr	r4, [r5, #8]
 8002b22:	e7e3      	b.n	8002aec <_puts_r+0x24>
 8002b24:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <_puts_r+0xb4>)
 8002b26:	429c      	cmp	r4, r3
 8002b28:	bf08      	it	eq
 8002b2a:	68ec      	ldreq	r4, [r5, #12]
 8002b2c:	e7de      	b.n	8002aec <_puts_r+0x24>
 8002b2e:	4621      	mov	r1, r4
 8002b30:	4628      	mov	r0, r5
 8002b32:	f000 f87f 	bl	8002c34 <__swsetup_r>
 8002b36:	2800      	cmp	r0, #0
 8002b38:	d0dd      	beq.n	8002af6 <_puts_r+0x2e>
 8002b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b3e:	bd70      	pop	{r4, r5, r6, pc}
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	da04      	bge.n	8002b4e <_puts_r+0x86>
 8002b44:	69a2      	ldr	r2, [r4, #24]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	dc06      	bgt.n	8002b58 <_puts_r+0x90>
 8002b4a:	290a      	cmp	r1, #10
 8002b4c:	d004      	beq.n	8002b58 <_puts_r+0x90>
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	6022      	str	r2, [r4, #0]
 8002b54:	7019      	strb	r1, [r3, #0]
 8002b56:	e7cf      	b.n	8002af8 <_puts_r+0x30>
 8002b58:	4622      	mov	r2, r4
 8002b5a:	4628      	mov	r0, r5
 8002b5c:	f000 f818 	bl	8002b90 <__swbuf_r>
 8002b60:	3001      	adds	r0, #1
 8002b62:	d1c9      	bne.n	8002af8 <_puts_r+0x30>
 8002b64:	e7e9      	b.n	8002b3a <_puts_r+0x72>
 8002b66:	6823      	ldr	r3, [r4, #0]
 8002b68:	200a      	movs	r0, #10
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	6022      	str	r2, [r4, #0]
 8002b6e:	7018      	strb	r0, [r3, #0]
 8002b70:	e7e5      	b.n	8002b3e <_puts_r+0x76>
 8002b72:	bf00      	nop
 8002b74:	08003430 	.word	0x08003430
 8002b78:	08003450 	.word	0x08003450
 8002b7c:	08003410 	.word	0x08003410

08002b80 <puts>:
 8002b80:	4b02      	ldr	r3, [pc, #8]	; (8002b8c <puts+0xc>)
 8002b82:	4601      	mov	r1, r0
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	f7ff bf9f 	b.w	8002ac8 <_puts_r>
 8002b8a:	bf00      	nop
 8002b8c:	2000000c 	.word	0x2000000c

08002b90 <__swbuf_r>:
 8002b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b92:	460e      	mov	r6, r1
 8002b94:	4614      	mov	r4, r2
 8002b96:	4605      	mov	r5, r0
 8002b98:	b118      	cbz	r0, 8002ba2 <__swbuf_r+0x12>
 8002b9a:	6983      	ldr	r3, [r0, #24]
 8002b9c:	b90b      	cbnz	r3, 8002ba2 <__swbuf_r+0x12>
 8002b9e:	f000 f9a7 	bl	8002ef0 <__sinit>
 8002ba2:	4b21      	ldr	r3, [pc, #132]	; (8002c28 <__swbuf_r+0x98>)
 8002ba4:	429c      	cmp	r4, r3
 8002ba6:	d12a      	bne.n	8002bfe <__swbuf_r+0x6e>
 8002ba8:	686c      	ldr	r4, [r5, #4]
 8002baa:	69a3      	ldr	r3, [r4, #24]
 8002bac:	60a3      	str	r3, [r4, #8]
 8002bae:	89a3      	ldrh	r3, [r4, #12]
 8002bb0:	071a      	lsls	r2, r3, #28
 8002bb2:	d52e      	bpl.n	8002c12 <__swbuf_r+0x82>
 8002bb4:	6923      	ldr	r3, [r4, #16]
 8002bb6:	b363      	cbz	r3, 8002c12 <__swbuf_r+0x82>
 8002bb8:	6923      	ldr	r3, [r4, #16]
 8002bba:	6820      	ldr	r0, [r4, #0]
 8002bbc:	1ac0      	subs	r0, r0, r3
 8002bbe:	6963      	ldr	r3, [r4, #20]
 8002bc0:	b2f6      	uxtb	r6, r6
 8002bc2:	4283      	cmp	r3, r0
 8002bc4:	4637      	mov	r7, r6
 8002bc6:	dc04      	bgt.n	8002bd2 <__swbuf_r+0x42>
 8002bc8:	4621      	mov	r1, r4
 8002bca:	4628      	mov	r0, r5
 8002bcc:	f000 f926 	bl	8002e1c <_fflush_r>
 8002bd0:	bb28      	cbnz	r0, 8002c1e <__swbuf_r+0x8e>
 8002bd2:	68a3      	ldr	r3, [r4, #8]
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	60a3      	str	r3, [r4, #8]
 8002bd8:	6823      	ldr	r3, [r4, #0]
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	6022      	str	r2, [r4, #0]
 8002bde:	701e      	strb	r6, [r3, #0]
 8002be0:	6963      	ldr	r3, [r4, #20]
 8002be2:	3001      	adds	r0, #1
 8002be4:	4283      	cmp	r3, r0
 8002be6:	d004      	beq.n	8002bf2 <__swbuf_r+0x62>
 8002be8:	89a3      	ldrh	r3, [r4, #12]
 8002bea:	07db      	lsls	r3, r3, #31
 8002bec:	d519      	bpl.n	8002c22 <__swbuf_r+0x92>
 8002bee:	2e0a      	cmp	r6, #10
 8002bf0:	d117      	bne.n	8002c22 <__swbuf_r+0x92>
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	4628      	mov	r0, r5
 8002bf6:	f000 f911 	bl	8002e1c <_fflush_r>
 8002bfa:	b190      	cbz	r0, 8002c22 <__swbuf_r+0x92>
 8002bfc:	e00f      	b.n	8002c1e <__swbuf_r+0x8e>
 8002bfe:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <__swbuf_r+0x9c>)
 8002c00:	429c      	cmp	r4, r3
 8002c02:	d101      	bne.n	8002c08 <__swbuf_r+0x78>
 8002c04:	68ac      	ldr	r4, [r5, #8]
 8002c06:	e7d0      	b.n	8002baa <__swbuf_r+0x1a>
 8002c08:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <__swbuf_r+0xa0>)
 8002c0a:	429c      	cmp	r4, r3
 8002c0c:	bf08      	it	eq
 8002c0e:	68ec      	ldreq	r4, [r5, #12]
 8002c10:	e7cb      	b.n	8002baa <__swbuf_r+0x1a>
 8002c12:	4621      	mov	r1, r4
 8002c14:	4628      	mov	r0, r5
 8002c16:	f000 f80d 	bl	8002c34 <__swsetup_r>
 8002c1a:	2800      	cmp	r0, #0
 8002c1c:	d0cc      	beq.n	8002bb8 <__swbuf_r+0x28>
 8002c1e:	f04f 37ff 	mov.w	r7, #4294967295
 8002c22:	4638      	mov	r0, r7
 8002c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c26:	bf00      	nop
 8002c28:	08003430 	.word	0x08003430
 8002c2c:	08003450 	.word	0x08003450
 8002c30:	08003410 	.word	0x08003410

08002c34 <__swsetup_r>:
 8002c34:	4b32      	ldr	r3, [pc, #200]	; (8002d00 <__swsetup_r+0xcc>)
 8002c36:	b570      	push	{r4, r5, r6, lr}
 8002c38:	681d      	ldr	r5, [r3, #0]
 8002c3a:	4606      	mov	r6, r0
 8002c3c:	460c      	mov	r4, r1
 8002c3e:	b125      	cbz	r5, 8002c4a <__swsetup_r+0x16>
 8002c40:	69ab      	ldr	r3, [r5, #24]
 8002c42:	b913      	cbnz	r3, 8002c4a <__swsetup_r+0x16>
 8002c44:	4628      	mov	r0, r5
 8002c46:	f000 f953 	bl	8002ef0 <__sinit>
 8002c4a:	4b2e      	ldr	r3, [pc, #184]	; (8002d04 <__swsetup_r+0xd0>)
 8002c4c:	429c      	cmp	r4, r3
 8002c4e:	d10f      	bne.n	8002c70 <__swsetup_r+0x3c>
 8002c50:	686c      	ldr	r4, [r5, #4]
 8002c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	0715      	lsls	r5, r2, #28
 8002c5a:	d42c      	bmi.n	8002cb6 <__swsetup_r+0x82>
 8002c5c:	06d0      	lsls	r0, r2, #27
 8002c5e:	d411      	bmi.n	8002c84 <__swsetup_r+0x50>
 8002c60:	2209      	movs	r2, #9
 8002c62:	6032      	str	r2, [r6, #0]
 8002c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c68:	81a3      	strh	r3, [r4, #12]
 8002c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c6e:	e03e      	b.n	8002cee <__swsetup_r+0xba>
 8002c70:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <__swsetup_r+0xd4>)
 8002c72:	429c      	cmp	r4, r3
 8002c74:	d101      	bne.n	8002c7a <__swsetup_r+0x46>
 8002c76:	68ac      	ldr	r4, [r5, #8]
 8002c78:	e7eb      	b.n	8002c52 <__swsetup_r+0x1e>
 8002c7a:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <__swsetup_r+0xd8>)
 8002c7c:	429c      	cmp	r4, r3
 8002c7e:	bf08      	it	eq
 8002c80:	68ec      	ldreq	r4, [r5, #12]
 8002c82:	e7e6      	b.n	8002c52 <__swsetup_r+0x1e>
 8002c84:	0751      	lsls	r1, r2, #29
 8002c86:	d512      	bpl.n	8002cae <__swsetup_r+0x7a>
 8002c88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c8a:	b141      	cbz	r1, 8002c9e <__swsetup_r+0x6a>
 8002c8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c90:	4299      	cmp	r1, r3
 8002c92:	d002      	beq.n	8002c9a <__swsetup_r+0x66>
 8002c94:	4630      	mov	r0, r6
 8002c96:	f000 fa19 	bl	80030cc <_free_r>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	6363      	str	r3, [r4, #52]	; 0x34
 8002c9e:	89a3      	ldrh	r3, [r4, #12]
 8002ca0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ca4:	81a3      	strh	r3, [r4, #12]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	6063      	str	r3, [r4, #4]
 8002caa:	6923      	ldr	r3, [r4, #16]
 8002cac:	6023      	str	r3, [r4, #0]
 8002cae:	89a3      	ldrh	r3, [r4, #12]
 8002cb0:	f043 0308 	orr.w	r3, r3, #8
 8002cb4:	81a3      	strh	r3, [r4, #12]
 8002cb6:	6923      	ldr	r3, [r4, #16]
 8002cb8:	b94b      	cbnz	r3, 8002cce <__swsetup_r+0x9a>
 8002cba:	89a3      	ldrh	r3, [r4, #12]
 8002cbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc4:	d003      	beq.n	8002cce <__swsetup_r+0x9a>
 8002cc6:	4621      	mov	r1, r4
 8002cc8:	4630      	mov	r0, r6
 8002cca:	f000 f9bf 	bl	800304c <__smakebuf_r>
 8002cce:	89a2      	ldrh	r2, [r4, #12]
 8002cd0:	f012 0301 	ands.w	r3, r2, #1
 8002cd4:	d00c      	beq.n	8002cf0 <__swsetup_r+0xbc>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60a3      	str	r3, [r4, #8]
 8002cda:	6963      	ldr	r3, [r4, #20]
 8002cdc:	425b      	negs	r3, r3
 8002cde:	61a3      	str	r3, [r4, #24]
 8002ce0:	6923      	ldr	r3, [r4, #16]
 8002ce2:	b953      	cbnz	r3, 8002cfa <__swsetup_r+0xc6>
 8002ce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ce8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002cec:	d1ba      	bne.n	8002c64 <__swsetup_r+0x30>
 8002cee:	bd70      	pop	{r4, r5, r6, pc}
 8002cf0:	0792      	lsls	r2, r2, #30
 8002cf2:	bf58      	it	pl
 8002cf4:	6963      	ldrpl	r3, [r4, #20]
 8002cf6:	60a3      	str	r3, [r4, #8]
 8002cf8:	e7f2      	b.n	8002ce0 <__swsetup_r+0xac>
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	e7f7      	b.n	8002cee <__swsetup_r+0xba>
 8002cfe:	bf00      	nop
 8002d00:	2000000c 	.word	0x2000000c
 8002d04:	08003430 	.word	0x08003430
 8002d08:	08003450 	.word	0x08003450
 8002d0c:	08003410 	.word	0x08003410

08002d10 <__sflush_r>:
 8002d10:	898a      	ldrh	r2, [r1, #12]
 8002d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d16:	4605      	mov	r5, r0
 8002d18:	0710      	lsls	r0, r2, #28
 8002d1a:	460c      	mov	r4, r1
 8002d1c:	d458      	bmi.n	8002dd0 <__sflush_r+0xc0>
 8002d1e:	684b      	ldr	r3, [r1, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	dc05      	bgt.n	8002d30 <__sflush_r+0x20>
 8002d24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	dc02      	bgt.n	8002d30 <__sflush_r+0x20>
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d32:	2e00      	cmp	r6, #0
 8002d34:	d0f9      	beq.n	8002d2a <__sflush_r+0x1a>
 8002d36:	2300      	movs	r3, #0
 8002d38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d3c:	682f      	ldr	r7, [r5, #0]
 8002d3e:	6a21      	ldr	r1, [r4, #32]
 8002d40:	602b      	str	r3, [r5, #0]
 8002d42:	d032      	beq.n	8002daa <__sflush_r+0x9a>
 8002d44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d46:	89a3      	ldrh	r3, [r4, #12]
 8002d48:	075a      	lsls	r2, r3, #29
 8002d4a:	d505      	bpl.n	8002d58 <__sflush_r+0x48>
 8002d4c:	6863      	ldr	r3, [r4, #4]
 8002d4e:	1ac0      	subs	r0, r0, r3
 8002d50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d52:	b10b      	cbz	r3, 8002d58 <__sflush_r+0x48>
 8002d54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d56:	1ac0      	subs	r0, r0, r3
 8002d58:	2300      	movs	r3, #0
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d5e:	6a21      	ldr	r1, [r4, #32]
 8002d60:	4628      	mov	r0, r5
 8002d62:	47b0      	blx	r6
 8002d64:	1c43      	adds	r3, r0, #1
 8002d66:	89a3      	ldrh	r3, [r4, #12]
 8002d68:	d106      	bne.n	8002d78 <__sflush_r+0x68>
 8002d6a:	6829      	ldr	r1, [r5, #0]
 8002d6c:	291d      	cmp	r1, #29
 8002d6e:	d848      	bhi.n	8002e02 <__sflush_r+0xf2>
 8002d70:	4a29      	ldr	r2, [pc, #164]	; (8002e18 <__sflush_r+0x108>)
 8002d72:	40ca      	lsrs	r2, r1
 8002d74:	07d6      	lsls	r6, r2, #31
 8002d76:	d544      	bpl.n	8002e02 <__sflush_r+0xf2>
 8002d78:	2200      	movs	r2, #0
 8002d7a:	6062      	str	r2, [r4, #4]
 8002d7c:	04d9      	lsls	r1, r3, #19
 8002d7e:	6922      	ldr	r2, [r4, #16]
 8002d80:	6022      	str	r2, [r4, #0]
 8002d82:	d504      	bpl.n	8002d8e <__sflush_r+0x7e>
 8002d84:	1c42      	adds	r2, r0, #1
 8002d86:	d101      	bne.n	8002d8c <__sflush_r+0x7c>
 8002d88:	682b      	ldr	r3, [r5, #0]
 8002d8a:	b903      	cbnz	r3, 8002d8e <__sflush_r+0x7e>
 8002d8c:	6560      	str	r0, [r4, #84]	; 0x54
 8002d8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d90:	602f      	str	r7, [r5, #0]
 8002d92:	2900      	cmp	r1, #0
 8002d94:	d0c9      	beq.n	8002d2a <__sflush_r+0x1a>
 8002d96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d9a:	4299      	cmp	r1, r3
 8002d9c:	d002      	beq.n	8002da4 <__sflush_r+0x94>
 8002d9e:	4628      	mov	r0, r5
 8002da0:	f000 f994 	bl	80030cc <_free_r>
 8002da4:	2000      	movs	r0, #0
 8002da6:	6360      	str	r0, [r4, #52]	; 0x34
 8002da8:	e7c0      	b.n	8002d2c <__sflush_r+0x1c>
 8002daa:	2301      	movs	r3, #1
 8002dac:	4628      	mov	r0, r5
 8002dae:	47b0      	blx	r6
 8002db0:	1c41      	adds	r1, r0, #1
 8002db2:	d1c8      	bne.n	8002d46 <__sflush_r+0x36>
 8002db4:	682b      	ldr	r3, [r5, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0c5      	beq.n	8002d46 <__sflush_r+0x36>
 8002dba:	2b1d      	cmp	r3, #29
 8002dbc:	d001      	beq.n	8002dc2 <__sflush_r+0xb2>
 8002dbe:	2b16      	cmp	r3, #22
 8002dc0:	d101      	bne.n	8002dc6 <__sflush_r+0xb6>
 8002dc2:	602f      	str	r7, [r5, #0]
 8002dc4:	e7b1      	b.n	8002d2a <__sflush_r+0x1a>
 8002dc6:	89a3      	ldrh	r3, [r4, #12]
 8002dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dcc:	81a3      	strh	r3, [r4, #12]
 8002dce:	e7ad      	b.n	8002d2c <__sflush_r+0x1c>
 8002dd0:	690f      	ldr	r7, [r1, #16]
 8002dd2:	2f00      	cmp	r7, #0
 8002dd4:	d0a9      	beq.n	8002d2a <__sflush_r+0x1a>
 8002dd6:	0793      	lsls	r3, r2, #30
 8002dd8:	680e      	ldr	r6, [r1, #0]
 8002dda:	bf08      	it	eq
 8002ddc:	694b      	ldreq	r3, [r1, #20]
 8002dde:	600f      	str	r7, [r1, #0]
 8002de0:	bf18      	it	ne
 8002de2:	2300      	movne	r3, #0
 8002de4:	eba6 0807 	sub.w	r8, r6, r7
 8002de8:	608b      	str	r3, [r1, #8]
 8002dea:	f1b8 0f00 	cmp.w	r8, #0
 8002dee:	dd9c      	ble.n	8002d2a <__sflush_r+0x1a>
 8002df0:	4643      	mov	r3, r8
 8002df2:	463a      	mov	r2, r7
 8002df4:	6a21      	ldr	r1, [r4, #32]
 8002df6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002df8:	4628      	mov	r0, r5
 8002dfa:	47b0      	blx	r6
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	dc06      	bgt.n	8002e0e <__sflush_r+0xfe>
 8002e00:	89a3      	ldrh	r3, [r4, #12]
 8002e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e06:	81a3      	strh	r3, [r4, #12]
 8002e08:	f04f 30ff 	mov.w	r0, #4294967295
 8002e0c:	e78e      	b.n	8002d2c <__sflush_r+0x1c>
 8002e0e:	4407      	add	r7, r0
 8002e10:	eba8 0800 	sub.w	r8, r8, r0
 8002e14:	e7e9      	b.n	8002dea <__sflush_r+0xda>
 8002e16:	bf00      	nop
 8002e18:	20400001 	.word	0x20400001

08002e1c <_fflush_r>:
 8002e1c:	b538      	push	{r3, r4, r5, lr}
 8002e1e:	690b      	ldr	r3, [r1, #16]
 8002e20:	4605      	mov	r5, r0
 8002e22:	460c      	mov	r4, r1
 8002e24:	b1db      	cbz	r3, 8002e5e <_fflush_r+0x42>
 8002e26:	b118      	cbz	r0, 8002e30 <_fflush_r+0x14>
 8002e28:	6983      	ldr	r3, [r0, #24]
 8002e2a:	b90b      	cbnz	r3, 8002e30 <_fflush_r+0x14>
 8002e2c:	f000 f860 	bl	8002ef0 <__sinit>
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <_fflush_r+0x48>)
 8002e32:	429c      	cmp	r4, r3
 8002e34:	d109      	bne.n	8002e4a <_fflush_r+0x2e>
 8002e36:	686c      	ldr	r4, [r5, #4]
 8002e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e3c:	b17b      	cbz	r3, 8002e5e <_fflush_r+0x42>
 8002e3e:	4621      	mov	r1, r4
 8002e40:	4628      	mov	r0, r5
 8002e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e46:	f7ff bf63 	b.w	8002d10 <__sflush_r>
 8002e4a:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <_fflush_r+0x4c>)
 8002e4c:	429c      	cmp	r4, r3
 8002e4e:	d101      	bne.n	8002e54 <_fflush_r+0x38>
 8002e50:	68ac      	ldr	r4, [r5, #8]
 8002e52:	e7f1      	b.n	8002e38 <_fflush_r+0x1c>
 8002e54:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <_fflush_r+0x50>)
 8002e56:	429c      	cmp	r4, r3
 8002e58:	bf08      	it	eq
 8002e5a:	68ec      	ldreq	r4, [r5, #12]
 8002e5c:	e7ec      	b.n	8002e38 <_fflush_r+0x1c>
 8002e5e:	2000      	movs	r0, #0
 8002e60:	bd38      	pop	{r3, r4, r5, pc}
 8002e62:	bf00      	nop
 8002e64:	08003430 	.word	0x08003430
 8002e68:	08003450 	.word	0x08003450
 8002e6c:	08003410 	.word	0x08003410

08002e70 <std>:
 8002e70:	2300      	movs	r3, #0
 8002e72:	b510      	push	{r4, lr}
 8002e74:	4604      	mov	r4, r0
 8002e76:	e9c0 3300 	strd	r3, r3, [r0]
 8002e7a:	6083      	str	r3, [r0, #8]
 8002e7c:	8181      	strh	r1, [r0, #12]
 8002e7e:	6643      	str	r3, [r0, #100]	; 0x64
 8002e80:	81c2      	strh	r2, [r0, #14]
 8002e82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e86:	6183      	str	r3, [r0, #24]
 8002e88:	4619      	mov	r1, r3
 8002e8a:	2208      	movs	r2, #8
 8002e8c:	305c      	adds	r0, #92	; 0x5c
 8002e8e:	f7ff fe13 	bl	8002ab8 <memset>
 8002e92:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <std+0x38>)
 8002e94:	6263      	str	r3, [r4, #36]	; 0x24
 8002e96:	4b05      	ldr	r3, [pc, #20]	; (8002eac <std+0x3c>)
 8002e98:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <std+0x40>)
 8002e9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e9e:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <std+0x44>)
 8002ea0:	6224      	str	r4, [r4, #32]
 8002ea2:	6323      	str	r3, [r4, #48]	; 0x30
 8002ea4:	bd10      	pop	{r4, pc}
 8002ea6:	bf00      	nop
 8002ea8:	0800323d 	.word	0x0800323d
 8002eac:	0800325f 	.word	0x0800325f
 8002eb0:	08003297 	.word	0x08003297
 8002eb4:	080032bb 	.word	0x080032bb

08002eb8 <_cleanup_r>:
 8002eb8:	4901      	ldr	r1, [pc, #4]	; (8002ec0 <_cleanup_r+0x8>)
 8002eba:	f000 b885 	b.w	8002fc8 <_fwalk_reent>
 8002ebe:	bf00      	nop
 8002ec0:	08002e1d 	.word	0x08002e1d

08002ec4 <__sfmoreglue>:
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	1e4a      	subs	r2, r1, #1
 8002ec8:	2568      	movs	r5, #104	; 0x68
 8002eca:	4355      	muls	r5, r2
 8002ecc:	460e      	mov	r6, r1
 8002ece:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002ed2:	f000 f949 	bl	8003168 <_malloc_r>
 8002ed6:	4604      	mov	r4, r0
 8002ed8:	b140      	cbz	r0, 8002eec <__sfmoreglue+0x28>
 8002eda:	2100      	movs	r1, #0
 8002edc:	e9c0 1600 	strd	r1, r6, [r0]
 8002ee0:	300c      	adds	r0, #12
 8002ee2:	60a0      	str	r0, [r4, #8]
 8002ee4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ee8:	f7ff fde6 	bl	8002ab8 <memset>
 8002eec:	4620      	mov	r0, r4
 8002eee:	bd70      	pop	{r4, r5, r6, pc}

08002ef0 <__sinit>:
 8002ef0:	6983      	ldr	r3, [r0, #24]
 8002ef2:	b510      	push	{r4, lr}
 8002ef4:	4604      	mov	r4, r0
 8002ef6:	bb33      	cbnz	r3, 8002f46 <__sinit+0x56>
 8002ef8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002efc:	6503      	str	r3, [r0, #80]	; 0x50
 8002efe:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <__sinit+0x58>)
 8002f00:	4a12      	ldr	r2, [pc, #72]	; (8002f4c <__sinit+0x5c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6282      	str	r2, [r0, #40]	; 0x28
 8002f06:	4298      	cmp	r0, r3
 8002f08:	bf04      	itt	eq
 8002f0a:	2301      	moveq	r3, #1
 8002f0c:	6183      	streq	r3, [r0, #24]
 8002f0e:	f000 f81f 	bl	8002f50 <__sfp>
 8002f12:	6060      	str	r0, [r4, #4]
 8002f14:	4620      	mov	r0, r4
 8002f16:	f000 f81b 	bl	8002f50 <__sfp>
 8002f1a:	60a0      	str	r0, [r4, #8]
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	f000 f817 	bl	8002f50 <__sfp>
 8002f22:	2200      	movs	r2, #0
 8002f24:	60e0      	str	r0, [r4, #12]
 8002f26:	2104      	movs	r1, #4
 8002f28:	6860      	ldr	r0, [r4, #4]
 8002f2a:	f7ff ffa1 	bl	8002e70 <std>
 8002f2e:	2201      	movs	r2, #1
 8002f30:	2109      	movs	r1, #9
 8002f32:	68a0      	ldr	r0, [r4, #8]
 8002f34:	f7ff ff9c 	bl	8002e70 <std>
 8002f38:	2202      	movs	r2, #2
 8002f3a:	2112      	movs	r1, #18
 8002f3c:	68e0      	ldr	r0, [r4, #12]
 8002f3e:	f7ff ff97 	bl	8002e70 <std>
 8002f42:	2301      	movs	r3, #1
 8002f44:	61a3      	str	r3, [r4, #24]
 8002f46:	bd10      	pop	{r4, pc}
 8002f48:	0800340c 	.word	0x0800340c
 8002f4c:	08002eb9 	.word	0x08002eb9

08002f50 <__sfp>:
 8002f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f52:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <__sfp+0x70>)
 8002f54:	681e      	ldr	r6, [r3, #0]
 8002f56:	69b3      	ldr	r3, [r6, #24]
 8002f58:	4607      	mov	r7, r0
 8002f5a:	b913      	cbnz	r3, 8002f62 <__sfp+0x12>
 8002f5c:	4630      	mov	r0, r6
 8002f5e:	f7ff ffc7 	bl	8002ef0 <__sinit>
 8002f62:	3648      	adds	r6, #72	; 0x48
 8002f64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	d503      	bpl.n	8002f74 <__sfp+0x24>
 8002f6c:	6833      	ldr	r3, [r6, #0]
 8002f6e:	b133      	cbz	r3, 8002f7e <__sfp+0x2e>
 8002f70:	6836      	ldr	r6, [r6, #0]
 8002f72:	e7f7      	b.n	8002f64 <__sfp+0x14>
 8002f74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002f78:	b16d      	cbz	r5, 8002f96 <__sfp+0x46>
 8002f7a:	3468      	adds	r4, #104	; 0x68
 8002f7c:	e7f4      	b.n	8002f68 <__sfp+0x18>
 8002f7e:	2104      	movs	r1, #4
 8002f80:	4638      	mov	r0, r7
 8002f82:	f7ff ff9f 	bl	8002ec4 <__sfmoreglue>
 8002f86:	6030      	str	r0, [r6, #0]
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	d1f1      	bne.n	8002f70 <__sfp+0x20>
 8002f8c:	230c      	movs	r3, #12
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	4604      	mov	r4, r0
 8002f92:	4620      	mov	r0, r4
 8002f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f96:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <__sfp+0x74>)
 8002f98:	6665      	str	r5, [r4, #100]	; 0x64
 8002f9a:	e9c4 5500 	strd	r5, r5, [r4]
 8002f9e:	60a5      	str	r5, [r4, #8]
 8002fa0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002fa4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002fa8:	2208      	movs	r2, #8
 8002faa:	4629      	mov	r1, r5
 8002fac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002fb0:	f7ff fd82 	bl	8002ab8 <memset>
 8002fb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002fb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002fbc:	e7e9      	b.n	8002f92 <__sfp+0x42>
 8002fbe:	bf00      	nop
 8002fc0:	0800340c 	.word	0x0800340c
 8002fc4:	ffff0001 	.word	0xffff0001

08002fc8 <_fwalk_reent>:
 8002fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fcc:	4680      	mov	r8, r0
 8002fce:	4689      	mov	r9, r1
 8002fd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002fd4:	2600      	movs	r6, #0
 8002fd6:	b914      	cbnz	r4, 8002fde <_fwalk_reent+0x16>
 8002fd8:	4630      	mov	r0, r6
 8002fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fde:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002fe2:	3f01      	subs	r7, #1
 8002fe4:	d501      	bpl.n	8002fea <_fwalk_reent+0x22>
 8002fe6:	6824      	ldr	r4, [r4, #0]
 8002fe8:	e7f5      	b.n	8002fd6 <_fwalk_reent+0xe>
 8002fea:	89ab      	ldrh	r3, [r5, #12]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d907      	bls.n	8003000 <_fwalk_reent+0x38>
 8002ff0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	d003      	beq.n	8003000 <_fwalk_reent+0x38>
 8002ff8:	4629      	mov	r1, r5
 8002ffa:	4640      	mov	r0, r8
 8002ffc:	47c8      	blx	r9
 8002ffe:	4306      	orrs	r6, r0
 8003000:	3568      	adds	r5, #104	; 0x68
 8003002:	e7ee      	b.n	8002fe2 <_fwalk_reent+0x1a>

08003004 <__swhatbuf_r>:
 8003004:	b570      	push	{r4, r5, r6, lr}
 8003006:	460e      	mov	r6, r1
 8003008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800300c:	2900      	cmp	r1, #0
 800300e:	b096      	sub	sp, #88	; 0x58
 8003010:	4614      	mov	r4, r2
 8003012:	461d      	mov	r5, r3
 8003014:	da07      	bge.n	8003026 <__swhatbuf_r+0x22>
 8003016:	2300      	movs	r3, #0
 8003018:	602b      	str	r3, [r5, #0]
 800301a:	89b3      	ldrh	r3, [r6, #12]
 800301c:	061a      	lsls	r2, r3, #24
 800301e:	d410      	bmi.n	8003042 <__swhatbuf_r+0x3e>
 8003020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003024:	e00e      	b.n	8003044 <__swhatbuf_r+0x40>
 8003026:	466a      	mov	r2, sp
 8003028:	f000 f96e 	bl	8003308 <_fstat_r>
 800302c:	2800      	cmp	r0, #0
 800302e:	dbf2      	blt.n	8003016 <__swhatbuf_r+0x12>
 8003030:	9a01      	ldr	r2, [sp, #4]
 8003032:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003036:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800303a:	425a      	negs	r2, r3
 800303c:	415a      	adcs	r2, r3
 800303e:	602a      	str	r2, [r5, #0]
 8003040:	e7ee      	b.n	8003020 <__swhatbuf_r+0x1c>
 8003042:	2340      	movs	r3, #64	; 0x40
 8003044:	2000      	movs	r0, #0
 8003046:	6023      	str	r3, [r4, #0]
 8003048:	b016      	add	sp, #88	; 0x58
 800304a:	bd70      	pop	{r4, r5, r6, pc}

0800304c <__smakebuf_r>:
 800304c:	898b      	ldrh	r3, [r1, #12]
 800304e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003050:	079d      	lsls	r5, r3, #30
 8003052:	4606      	mov	r6, r0
 8003054:	460c      	mov	r4, r1
 8003056:	d507      	bpl.n	8003068 <__smakebuf_r+0x1c>
 8003058:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800305c:	6023      	str	r3, [r4, #0]
 800305e:	6123      	str	r3, [r4, #16]
 8003060:	2301      	movs	r3, #1
 8003062:	6163      	str	r3, [r4, #20]
 8003064:	b002      	add	sp, #8
 8003066:	bd70      	pop	{r4, r5, r6, pc}
 8003068:	ab01      	add	r3, sp, #4
 800306a:	466a      	mov	r2, sp
 800306c:	f7ff ffca 	bl	8003004 <__swhatbuf_r>
 8003070:	9900      	ldr	r1, [sp, #0]
 8003072:	4605      	mov	r5, r0
 8003074:	4630      	mov	r0, r6
 8003076:	f000 f877 	bl	8003168 <_malloc_r>
 800307a:	b948      	cbnz	r0, 8003090 <__smakebuf_r+0x44>
 800307c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003080:	059a      	lsls	r2, r3, #22
 8003082:	d4ef      	bmi.n	8003064 <__smakebuf_r+0x18>
 8003084:	f023 0303 	bic.w	r3, r3, #3
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	81a3      	strh	r3, [r4, #12]
 800308e:	e7e3      	b.n	8003058 <__smakebuf_r+0xc>
 8003090:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <__smakebuf_r+0x7c>)
 8003092:	62b3      	str	r3, [r6, #40]	; 0x28
 8003094:	89a3      	ldrh	r3, [r4, #12]
 8003096:	6020      	str	r0, [r4, #0]
 8003098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800309c:	81a3      	strh	r3, [r4, #12]
 800309e:	9b00      	ldr	r3, [sp, #0]
 80030a0:	6163      	str	r3, [r4, #20]
 80030a2:	9b01      	ldr	r3, [sp, #4]
 80030a4:	6120      	str	r0, [r4, #16]
 80030a6:	b15b      	cbz	r3, 80030c0 <__smakebuf_r+0x74>
 80030a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030ac:	4630      	mov	r0, r6
 80030ae:	f000 f93d 	bl	800332c <_isatty_r>
 80030b2:	b128      	cbz	r0, 80030c0 <__smakebuf_r+0x74>
 80030b4:	89a3      	ldrh	r3, [r4, #12]
 80030b6:	f023 0303 	bic.w	r3, r3, #3
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	81a3      	strh	r3, [r4, #12]
 80030c0:	89a3      	ldrh	r3, [r4, #12]
 80030c2:	431d      	orrs	r5, r3
 80030c4:	81a5      	strh	r5, [r4, #12]
 80030c6:	e7cd      	b.n	8003064 <__smakebuf_r+0x18>
 80030c8:	08002eb9 	.word	0x08002eb9

080030cc <_free_r>:
 80030cc:	b538      	push	{r3, r4, r5, lr}
 80030ce:	4605      	mov	r5, r0
 80030d0:	2900      	cmp	r1, #0
 80030d2:	d045      	beq.n	8003160 <_free_r+0x94>
 80030d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030d8:	1f0c      	subs	r4, r1, #4
 80030da:	2b00      	cmp	r3, #0
 80030dc:	bfb8      	it	lt
 80030de:	18e4      	addlt	r4, r4, r3
 80030e0:	f000 f946 	bl	8003370 <__malloc_lock>
 80030e4:	4a1f      	ldr	r2, [pc, #124]	; (8003164 <_free_r+0x98>)
 80030e6:	6813      	ldr	r3, [r2, #0]
 80030e8:	4610      	mov	r0, r2
 80030ea:	b933      	cbnz	r3, 80030fa <_free_r+0x2e>
 80030ec:	6063      	str	r3, [r4, #4]
 80030ee:	6014      	str	r4, [r2, #0]
 80030f0:	4628      	mov	r0, r5
 80030f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030f6:	f000 b93c 	b.w	8003372 <__malloc_unlock>
 80030fa:	42a3      	cmp	r3, r4
 80030fc:	d90c      	bls.n	8003118 <_free_r+0x4c>
 80030fe:	6821      	ldr	r1, [r4, #0]
 8003100:	1862      	adds	r2, r4, r1
 8003102:	4293      	cmp	r3, r2
 8003104:	bf04      	itt	eq
 8003106:	681a      	ldreq	r2, [r3, #0]
 8003108:	685b      	ldreq	r3, [r3, #4]
 800310a:	6063      	str	r3, [r4, #4]
 800310c:	bf04      	itt	eq
 800310e:	1852      	addeq	r2, r2, r1
 8003110:	6022      	streq	r2, [r4, #0]
 8003112:	6004      	str	r4, [r0, #0]
 8003114:	e7ec      	b.n	80030f0 <_free_r+0x24>
 8003116:	4613      	mov	r3, r2
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	b10a      	cbz	r2, 8003120 <_free_r+0x54>
 800311c:	42a2      	cmp	r2, r4
 800311e:	d9fa      	bls.n	8003116 <_free_r+0x4a>
 8003120:	6819      	ldr	r1, [r3, #0]
 8003122:	1858      	adds	r0, r3, r1
 8003124:	42a0      	cmp	r0, r4
 8003126:	d10b      	bne.n	8003140 <_free_r+0x74>
 8003128:	6820      	ldr	r0, [r4, #0]
 800312a:	4401      	add	r1, r0
 800312c:	1858      	adds	r0, r3, r1
 800312e:	4282      	cmp	r2, r0
 8003130:	6019      	str	r1, [r3, #0]
 8003132:	d1dd      	bne.n	80030f0 <_free_r+0x24>
 8003134:	6810      	ldr	r0, [r2, #0]
 8003136:	6852      	ldr	r2, [r2, #4]
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	4401      	add	r1, r0
 800313c:	6019      	str	r1, [r3, #0]
 800313e:	e7d7      	b.n	80030f0 <_free_r+0x24>
 8003140:	d902      	bls.n	8003148 <_free_r+0x7c>
 8003142:	230c      	movs	r3, #12
 8003144:	602b      	str	r3, [r5, #0]
 8003146:	e7d3      	b.n	80030f0 <_free_r+0x24>
 8003148:	6820      	ldr	r0, [r4, #0]
 800314a:	1821      	adds	r1, r4, r0
 800314c:	428a      	cmp	r2, r1
 800314e:	bf04      	itt	eq
 8003150:	6811      	ldreq	r1, [r2, #0]
 8003152:	6852      	ldreq	r2, [r2, #4]
 8003154:	6062      	str	r2, [r4, #4]
 8003156:	bf04      	itt	eq
 8003158:	1809      	addeq	r1, r1, r0
 800315a:	6021      	streq	r1, [r4, #0]
 800315c:	605c      	str	r4, [r3, #4]
 800315e:	e7c7      	b.n	80030f0 <_free_r+0x24>
 8003160:	bd38      	pop	{r3, r4, r5, pc}
 8003162:	bf00      	nop
 8003164:	20000090 	.word	0x20000090

08003168 <_malloc_r>:
 8003168:	b570      	push	{r4, r5, r6, lr}
 800316a:	1ccd      	adds	r5, r1, #3
 800316c:	f025 0503 	bic.w	r5, r5, #3
 8003170:	3508      	adds	r5, #8
 8003172:	2d0c      	cmp	r5, #12
 8003174:	bf38      	it	cc
 8003176:	250c      	movcc	r5, #12
 8003178:	2d00      	cmp	r5, #0
 800317a:	4606      	mov	r6, r0
 800317c:	db01      	blt.n	8003182 <_malloc_r+0x1a>
 800317e:	42a9      	cmp	r1, r5
 8003180:	d903      	bls.n	800318a <_malloc_r+0x22>
 8003182:	230c      	movs	r3, #12
 8003184:	6033      	str	r3, [r6, #0]
 8003186:	2000      	movs	r0, #0
 8003188:	bd70      	pop	{r4, r5, r6, pc}
 800318a:	f000 f8f1 	bl	8003370 <__malloc_lock>
 800318e:	4a21      	ldr	r2, [pc, #132]	; (8003214 <_malloc_r+0xac>)
 8003190:	6814      	ldr	r4, [r2, #0]
 8003192:	4621      	mov	r1, r4
 8003194:	b991      	cbnz	r1, 80031bc <_malloc_r+0x54>
 8003196:	4c20      	ldr	r4, [pc, #128]	; (8003218 <_malloc_r+0xb0>)
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	b91b      	cbnz	r3, 80031a4 <_malloc_r+0x3c>
 800319c:	4630      	mov	r0, r6
 800319e:	f000 f83d 	bl	800321c <_sbrk_r>
 80031a2:	6020      	str	r0, [r4, #0]
 80031a4:	4629      	mov	r1, r5
 80031a6:	4630      	mov	r0, r6
 80031a8:	f000 f838 	bl	800321c <_sbrk_r>
 80031ac:	1c43      	adds	r3, r0, #1
 80031ae:	d124      	bne.n	80031fa <_malloc_r+0x92>
 80031b0:	230c      	movs	r3, #12
 80031b2:	6033      	str	r3, [r6, #0]
 80031b4:	4630      	mov	r0, r6
 80031b6:	f000 f8dc 	bl	8003372 <__malloc_unlock>
 80031ba:	e7e4      	b.n	8003186 <_malloc_r+0x1e>
 80031bc:	680b      	ldr	r3, [r1, #0]
 80031be:	1b5b      	subs	r3, r3, r5
 80031c0:	d418      	bmi.n	80031f4 <_malloc_r+0x8c>
 80031c2:	2b0b      	cmp	r3, #11
 80031c4:	d90f      	bls.n	80031e6 <_malloc_r+0x7e>
 80031c6:	600b      	str	r3, [r1, #0]
 80031c8:	50cd      	str	r5, [r1, r3]
 80031ca:	18cc      	adds	r4, r1, r3
 80031cc:	4630      	mov	r0, r6
 80031ce:	f000 f8d0 	bl	8003372 <__malloc_unlock>
 80031d2:	f104 000b 	add.w	r0, r4, #11
 80031d6:	1d23      	adds	r3, r4, #4
 80031d8:	f020 0007 	bic.w	r0, r0, #7
 80031dc:	1ac3      	subs	r3, r0, r3
 80031de:	d0d3      	beq.n	8003188 <_malloc_r+0x20>
 80031e0:	425a      	negs	r2, r3
 80031e2:	50e2      	str	r2, [r4, r3]
 80031e4:	e7d0      	b.n	8003188 <_malloc_r+0x20>
 80031e6:	428c      	cmp	r4, r1
 80031e8:	684b      	ldr	r3, [r1, #4]
 80031ea:	bf16      	itet	ne
 80031ec:	6063      	strne	r3, [r4, #4]
 80031ee:	6013      	streq	r3, [r2, #0]
 80031f0:	460c      	movne	r4, r1
 80031f2:	e7eb      	b.n	80031cc <_malloc_r+0x64>
 80031f4:	460c      	mov	r4, r1
 80031f6:	6849      	ldr	r1, [r1, #4]
 80031f8:	e7cc      	b.n	8003194 <_malloc_r+0x2c>
 80031fa:	1cc4      	adds	r4, r0, #3
 80031fc:	f024 0403 	bic.w	r4, r4, #3
 8003200:	42a0      	cmp	r0, r4
 8003202:	d005      	beq.n	8003210 <_malloc_r+0xa8>
 8003204:	1a21      	subs	r1, r4, r0
 8003206:	4630      	mov	r0, r6
 8003208:	f000 f808 	bl	800321c <_sbrk_r>
 800320c:	3001      	adds	r0, #1
 800320e:	d0cf      	beq.n	80031b0 <_malloc_r+0x48>
 8003210:	6025      	str	r5, [r4, #0]
 8003212:	e7db      	b.n	80031cc <_malloc_r+0x64>
 8003214:	20000090 	.word	0x20000090
 8003218:	20000094 	.word	0x20000094

0800321c <_sbrk_r>:
 800321c:	b538      	push	{r3, r4, r5, lr}
 800321e:	4c06      	ldr	r4, [pc, #24]	; (8003238 <_sbrk_r+0x1c>)
 8003220:	2300      	movs	r3, #0
 8003222:	4605      	mov	r5, r0
 8003224:	4608      	mov	r0, r1
 8003226:	6023      	str	r3, [r4, #0]
 8003228:	f7fd fb38 	bl	800089c <_sbrk>
 800322c:	1c43      	adds	r3, r0, #1
 800322e:	d102      	bne.n	8003236 <_sbrk_r+0x1a>
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	b103      	cbz	r3, 8003236 <_sbrk_r+0x1a>
 8003234:	602b      	str	r3, [r5, #0]
 8003236:	bd38      	pop	{r3, r4, r5, pc}
 8003238:	2000011c 	.word	0x2000011c

0800323c <__sread>:
 800323c:	b510      	push	{r4, lr}
 800323e:	460c      	mov	r4, r1
 8003240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003244:	f000 f896 	bl	8003374 <_read_r>
 8003248:	2800      	cmp	r0, #0
 800324a:	bfab      	itete	ge
 800324c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800324e:	89a3      	ldrhlt	r3, [r4, #12]
 8003250:	181b      	addge	r3, r3, r0
 8003252:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003256:	bfac      	ite	ge
 8003258:	6563      	strge	r3, [r4, #84]	; 0x54
 800325a:	81a3      	strhlt	r3, [r4, #12]
 800325c:	bd10      	pop	{r4, pc}

0800325e <__swrite>:
 800325e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003262:	461f      	mov	r7, r3
 8003264:	898b      	ldrh	r3, [r1, #12]
 8003266:	05db      	lsls	r3, r3, #23
 8003268:	4605      	mov	r5, r0
 800326a:	460c      	mov	r4, r1
 800326c:	4616      	mov	r6, r2
 800326e:	d505      	bpl.n	800327c <__swrite+0x1e>
 8003270:	2302      	movs	r3, #2
 8003272:	2200      	movs	r2, #0
 8003274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003278:	f000 f868 	bl	800334c <_lseek_r>
 800327c:	89a3      	ldrh	r3, [r4, #12]
 800327e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003282:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003286:	81a3      	strh	r3, [r4, #12]
 8003288:	4632      	mov	r2, r6
 800328a:	463b      	mov	r3, r7
 800328c:	4628      	mov	r0, r5
 800328e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003292:	f000 b817 	b.w	80032c4 <_write_r>

08003296 <__sseek>:
 8003296:	b510      	push	{r4, lr}
 8003298:	460c      	mov	r4, r1
 800329a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800329e:	f000 f855 	bl	800334c <_lseek_r>
 80032a2:	1c43      	adds	r3, r0, #1
 80032a4:	89a3      	ldrh	r3, [r4, #12]
 80032a6:	bf15      	itete	ne
 80032a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80032aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80032ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80032b2:	81a3      	strheq	r3, [r4, #12]
 80032b4:	bf18      	it	ne
 80032b6:	81a3      	strhne	r3, [r4, #12]
 80032b8:	bd10      	pop	{r4, pc}

080032ba <__sclose>:
 80032ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032be:	f000 b813 	b.w	80032e8 <_close_r>
	...

080032c4 <_write_r>:
 80032c4:	b538      	push	{r3, r4, r5, lr}
 80032c6:	4c07      	ldr	r4, [pc, #28]	; (80032e4 <_write_r+0x20>)
 80032c8:	4605      	mov	r5, r0
 80032ca:	4608      	mov	r0, r1
 80032cc:	4611      	mov	r1, r2
 80032ce:	2200      	movs	r2, #0
 80032d0:	6022      	str	r2, [r4, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	f7fd fa91 	bl	80007fa <_write>
 80032d8:	1c43      	adds	r3, r0, #1
 80032da:	d102      	bne.n	80032e2 <_write_r+0x1e>
 80032dc:	6823      	ldr	r3, [r4, #0]
 80032de:	b103      	cbz	r3, 80032e2 <_write_r+0x1e>
 80032e0:	602b      	str	r3, [r5, #0]
 80032e2:	bd38      	pop	{r3, r4, r5, pc}
 80032e4:	2000011c 	.word	0x2000011c

080032e8 <_close_r>:
 80032e8:	b538      	push	{r3, r4, r5, lr}
 80032ea:	4c06      	ldr	r4, [pc, #24]	; (8003304 <_close_r+0x1c>)
 80032ec:	2300      	movs	r3, #0
 80032ee:	4605      	mov	r5, r0
 80032f0:	4608      	mov	r0, r1
 80032f2:	6023      	str	r3, [r4, #0]
 80032f4:	f7fd fa9d 	bl	8000832 <_close>
 80032f8:	1c43      	adds	r3, r0, #1
 80032fa:	d102      	bne.n	8003302 <_close_r+0x1a>
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	b103      	cbz	r3, 8003302 <_close_r+0x1a>
 8003300:	602b      	str	r3, [r5, #0]
 8003302:	bd38      	pop	{r3, r4, r5, pc}
 8003304:	2000011c 	.word	0x2000011c

08003308 <_fstat_r>:
 8003308:	b538      	push	{r3, r4, r5, lr}
 800330a:	4c07      	ldr	r4, [pc, #28]	; (8003328 <_fstat_r+0x20>)
 800330c:	2300      	movs	r3, #0
 800330e:	4605      	mov	r5, r0
 8003310:	4608      	mov	r0, r1
 8003312:	4611      	mov	r1, r2
 8003314:	6023      	str	r3, [r4, #0]
 8003316:	f7fd fa98 	bl	800084a <_fstat>
 800331a:	1c43      	adds	r3, r0, #1
 800331c:	d102      	bne.n	8003324 <_fstat_r+0x1c>
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	b103      	cbz	r3, 8003324 <_fstat_r+0x1c>
 8003322:	602b      	str	r3, [r5, #0]
 8003324:	bd38      	pop	{r3, r4, r5, pc}
 8003326:	bf00      	nop
 8003328:	2000011c 	.word	0x2000011c

0800332c <_isatty_r>:
 800332c:	b538      	push	{r3, r4, r5, lr}
 800332e:	4c06      	ldr	r4, [pc, #24]	; (8003348 <_isatty_r+0x1c>)
 8003330:	2300      	movs	r3, #0
 8003332:	4605      	mov	r5, r0
 8003334:	4608      	mov	r0, r1
 8003336:	6023      	str	r3, [r4, #0]
 8003338:	f7fd fa97 	bl	800086a <_isatty>
 800333c:	1c43      	adds	r3, r0, #1
 800333e:	d102      	bne.n	8003346 <_isatty_r+0x1a>
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	b103      	cbz	r3, 8003346 <_isatty_r+0x1a>
 8003344:	602b      	str	r3, [r5, #0]
 8003346:	bd38      	pop	{r3, r4, r5, pc}
 8003348:	2000011c 	.word	0x2000011c

0800334c <_lseek_r>:
 800334c:	b538      	push	{r3, r4, r5, lr}
 800334e:	4c07      	ldr	r4, [pc, #28]	; (800336c <_lseek_r+0x20>)
 8003350:	4605      	mov	r5, r0
 8003352:	4608      	mov	r0, r1
 8003354:	4611      	mov	r1, r2
 8003356:	2200      	movs	r2, #0
 8003358:	6022      	str	r2, [r4, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	f7fd fa90 	bl	8000880 <_lseek>
 8003360:	1c43      	adds	r3, r0, #1
 8003362:	d102      	bne.n	800336a <_lseek_r+0x1e>
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	b103      	cbz	r3, 800336a <_lseek_r+0x1e>
 8003368:	602b      	str	r3, [r5, #0]
 800336a:	bd38      	pop	{r3, r4, r5, pc}
 800336c:	2000011c 	.word	0x2000011c

08003370 <__malloc_lock>:
 8003370:	4770      	bx	lr

08003372 <__malloc_unlock>:
 8003372:	4770      	bx	lr

08003374 <_read_r>:
 8003374:	b538      	push	{r3, r4, r5, lr}
 8003376:	4c07      	ldr	r4, [pc, #28]	; (8003394 <_read_r+0x20>)
 8003378:	4605      	mov	r5, r0
 800337a:	4608      	mov	r0, r1
 800337c:	4611      	mov	r1, r2
 800337e:	2200      	movs	r2, #0
 8003380:	6022      	str	r2, [r4, #0]
 8003382:	461a      	mov	r2, r3
 8003384:	f7fd fa1c 	bl	80007c0 <_read>
 8003388:	1c43      	adds	r3, r0, #1
 800338a:	d102      	bne.n	8003392 <_read_r+0x1e>
 800338c:	6823      	ldr	r3, [r4, #0]
 800338e:	b103      	cbz	r3, 8003392 <_read_r+0x1e>
 8003390:	602b      	str	r3, [r5, #0]
 8003392:	bd38      	pop	{r3, r4, r5, pc}
 8003394:	2000011c 	.word	0x2000011c

08003398 <_init>:
 8003398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339a:	bf00      	nop
 800339c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800339e:	bc08      	pop	{r3}
 80033a0:	469e      	mov	lr, r3
 80033a2:	4770      	bx	lr

080033a4 <_fini>:
 80033a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a6:	bf00      	nop
 80033a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033aa:	bc08      	pop	{r3}
 80033ac:	469e      	mov	lr, r3
 80033ae:	4770      	bx	lr
