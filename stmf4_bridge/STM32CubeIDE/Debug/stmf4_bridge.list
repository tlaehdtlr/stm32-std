
stmf4_bridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009428  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08009608  08009608  00019608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096a4  080096a4  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  080096a4  080096a4  000196a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096ac  080096ac  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096ac  080096ac  000196ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096b0  080096b0  000196b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  080096b4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d98  200001f8  080098ac  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005f90  080098ac  00025f90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021475  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000048e6  00000000  00000000  0004169d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001850  00000000  00000000  00045f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001628  00000000  00000000  000477d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000266cd  00000000  00000000  00048e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016ab5  00000000  00000000  0006f4cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9827  00000000  00000000  00085f82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015f7a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006514  00000000  00000000  0015f824  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	080095f0 	.word	0x080095f0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001fc 	.word	0x200001fc
 800021c:	080095f0 	.word	0x080095f0

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	4a07      	ldr	r2, [pc, #28]	; (800054c <vApplicationGetIdleTaskMemory+0x2c>)
 8000530:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	4a06      	ldr	r2, [pc, #24]	; (8000550 <vApplicationGetIdleTaskMemory+0x30>)
 8000536:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	2000023c 	.word	0x2000023c
 8000550:	20000290 	.word	0x20000290

08000554 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000554:	b5b0      	push	{r4, r5, r7, lr}
 8000556:	b08a      	sub	sp, #40	; 0x28
 8000558:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800055a:	4b10      	ldr	r3, [pc, #64]	; (800059c <MX_FREERTOS_Init+0x48>)
 800055c:	1d3c      	adds	r4, r7, #4
 800055e:	461d      	mov	r5, r3
 8000560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000564:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000568:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f006 f960 	bl	8006836 <osThreadCreate>
 8000576:	4602      	mov	r2, r0
 8000578:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <MX_FREERTOS_Init+0x4c>)
 800057a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(myTask, "myTaskName",
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_FREERTOS_Init+0x50>)
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	2301      	movs	r3, #1
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2300      	movs	r3, #0
 8000586:	f44f 7280 	mov.w	r2, #256	; 0x100
 800058a:	4907      	ldr	r1, [pc, #28]	; (80005a8 <MX_FREERTOS_Init+0x54>)
 800058c:	4807      	ldr	r0, [pc, #28]	; (80005ac <MX_FREERTOS_Init+0x58>)
 800058e:	f006 fe9b 	bl	80072c8 <xTaskCreate>
                256, NULL, 1, &myHandle);
  /* USER CODE END RTOS_THREADS */

}
 8000592:	bf00      	nop
 8000594:	3720      	adds	r7, #32
 8000596:	46bd      	mov	sp, r7
 8000598:	bdb0      	pop	{r4, r5, r7, pc}
 800059a:	bf00      	nop
 800059c:	08009620 	.word	0x08009620
 80005a0:	200041ec 	.word	0x200041ec
 80005a4:	20000238 	.word	0x20000238
 80005a8:	08009608 	.word	0x08009608
 80005ac:	080005c5 	.word	0x080005c5

080005b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80005b8:	f000 fc4a 	bl	8000e50 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005bc:	2001      	movs	r0, #1
 80005be:	f006 f986 	bl	80068ce <osDelay>
 80005c2:	e7fb      	b.n	80005bc <StartDefaultTask+0xc>

080005c4 <myTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
static void myTask(void *pvarg)
{
 80005c4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80005c8:	b082      	sub	sp, #8
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart7, &test_uart7_buff[rx_7++], 1);
 80005ce:	4b3d      	ldr	r3, [pc, #244]	; (80006c4 <myTask+0x100>)
 80005d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80005d4:	1c59      	adds	r1, r3, #1
 80005d6:	f144 0200 	adc.w	r2, r4, #0
 80005da:	483a      	ldr	r0, [pc, #232]	; (80006c4 <myTask+0x100>)
 80005dc:	e9c0 1200 	strd	r1, r2, [r0]
 80005e0:	4a39      	ldr	r2, [pc, #228]	; (80006c8 <myTask+0x104>)
 80005e2:	4413      	add	r3, r2
 80005e4:	2201      	movs	r2, #1
 80005e6:	4619      	mov	r1, r3
 80005e8:	4838      	ldr	r0, [pc, #224]	; (80006cc <myTask+0x108>)
 80005ea:	f003 ffcb 	bl	8004584 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, &test_uart4_buff[rx_4++], 1);
 80005ee:	4b38      	ldr	r3, [pc, #224]	; (80006d0 <myTask+0x10c>)
 80005f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80005f4:	1c59      	adds	r1, r3, #1
 80005f6:	f144 0200 	adc.w	r2, r4, #0
 80005fa:	4835      	ldr	r0, [pc, #212]	; (80006d0 <myTask+0x10c>)
 80005fc:	e9c0 1200 	strd	r1, r2, [r0]
 8000600:	4a34      	ldr	r2, [pc, #208]	; (80006d4 <myTask+0x110>)
 8000602:	4413      	add	r3, r2
 8000604:	2201      	movs	r2, #1
 8000606:	4619      	mov	r1, r3
 8000608:	4833      	ldr	r0, [pc, #204]	; (80006d8 <myTask+0x114>)
 800060a:	f003 ffbb 	bl	8004584 <HAL_UART_Receive_IT>

  for(;;)
  {
	  if (flag_4 && tx_7 < rx_7-1)
 800060e:	4b33      	ldr	r3, [pc, #204]	; (80006dc <myTask+0x118>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d028      	beq.n	8000668 <myTask+0xa4>
 8000616:	4b2b      	ldr	r3, [pc, #172]	; (80006c4 <myTask+0x100>)
 8000618:	e9d3 1200 	ldrd	r1, r2, [r3]
 800061c:	f111 33ff 	adds.w	r3, r1, #4294967295
 8000620:	f142 34ff 	adc.w	r4, r2, #4294967295
 8000624:	4a2e      	ldr	r2, [pc, #184]	; (80006e0 <myTask+0x11c>)
 8000626:	e9d2 1200 	ldrd	r1, r2, [r2]
 800062a:	42a2      	cmp	r2, r4
 800062c:	bf08      	it	eq
 800062e:	4299      	cmpeq	r1, r3
 8000630:	d21a      	bcs.n	8000668 <myTask+0xa4>
	  {
		  flag_4 = 0;
 8000632:	4b2a      	ldr	r3, [pc, #168]	; (80006dc <myTask+0x118>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit_IT(&huart4, &test_uart7_buff[mask & tx_7++], 1);
 8000638:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <myTask+0x11c>)
 800063a:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800063e:	f11b 0101 	adds.w	r1, fp, #1
 8000642:	f14c 0200 	adc.w	r2, ip, #0
 8000646:	4826      	ldr	r0, [pc, #152]	; (80006e0 <myTask+0x11c>)
 8000648:	e9c0 1200 	strd	r1, r2, [r0]
 800064c:	4a25      	ldr	r2, [pc, #148]	; (80006e4 <myTask+0x120>)
 800064e:	e9d2 1200 	ldrd	r1, r2, [r2]
 8000652:	ea0b 0301 	and.w	r3, fp, r1
 8000656:	ea0c 0402 	and.w	r4, ip, r2
 800065a:	4a1b      	ldr	r2, [pc, #108]	; (80006c8 <myTask+0x104>)
 800065c:	4413      	add	r3, r2
 800065e:	2201      	movs	r2, #1
 8000660:	4619      	mov	r1, r3
 8000662:	481d      	ldr	r0, [pc, #116]	; (80006d8 <myTask+0x114>)
 8000664:	f003 ff49 	bl	80044fa <HAL_UART_Transmit_IT>
	  }

	  if (flag_7 && tx_4 < rx_4-1)
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <myTask+0x124>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d0ce      	beq.n	800060e <myTask+0x4a>
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <myTask+0x10c>)
 8000672:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000676:	f111 33ff 	adds.w	r3, r1, #4294967295
 800067a:	f142 34ff 	adc.w	r4, r2, #4294967295
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <myTask+0x128>)
 8000680:	e9d2 1200 	ldrd	r1, r2, [r2]
 8000684:	42a2      	cmp	r2, r4
 8000686:	bf08      	it	eq
 8000688:	4299      	cmpeq	r1, r3
 800068a:	d2c0      	bcs.n	800060e <myTask+0x4a>
	  {
		  flag_7 = 0;
 800068c:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <myTask+0x124>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit_IT(&huart7, &test_uart4_buff[mask & tx_4++], 1);
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <myTask+0x128>)
 8000694:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8000698:	f11b 0101 	adds.w	r1, fp, #1
 800069c:	f14c 0200 	adc.w	r2, ip, #0
 80006a0:	4812      	ldr	r0, [pc, #72]	; (80006ec <myTask+0x128>)
 80006a2:	e9c0 1200 	strd	r1, r2, [r0]
 80006a6:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <myTask+0x120>)
 80006a8:	e9d2 1200 	ldrd	r1, r2, [r2]
 80006ac:	ea0b 0301 	and.w	r3, fp, r1
 80006b0:	ea0c 0402 	and.w	r4, ip, r2
 80006b4:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <myTask+0x110>)
 80006b6:	4413      	add	r3, r2
 80006b8:	2201      	movs	r2, #1
 80006ba:	4619      	mov	r1, r3
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <myTask+0x108>)
 80006be:	f003 ff1c 	bl	80044fa <HAL_UART_Transmit_IT>
	  if (flag_4 && tx_7 < rx_7-1)
 80006c2:	e7a4      	b.n	800060e <myTask+0x4a>
 80006c4:	20000218 	.word	0x20000218
 80006c8:	200043f0 	.word	0x200043f0
 80006cc:	20004630 	.word	0x20004630
 80006d0:	20000228 	.word	0x20000228
 80006d4:	200041f0 	.word	0x200041f0
 80006d8:	20004670 	.word	0x20004670
 80006dc:	20000001 	.word	0x20000001
 80006e0:	20000220 	.word	0x20000220
 80006e4:	20000008 	.word	0x20000008
 80006e8:	20000000 	.word	0x20000000
 80006ec:	20000230 	.word	0x20000230

080006f0 <HAL_UART_TxCpltCallback>:
	  }
  }
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <HAL_UART_TxCpltCallback+0x38>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d103      	bne.n	800070a <HAL_UART_TxCpltCallback+0x1a>
	{
		flag_4 = 1;
 8000702:	4b0a      	ldr	r3, [pc, #40]	; (800072c <HAL_UART_TxCpltCallback+0x3c>)
 8000704:	2201      	movs	r2, #1
 8000706:	701a      	strb	r2, [r3, #0]
	}
	else if (huart->Instance == UART7)
	{
		flag_7 = 1;
	}
}
 8000708:	e007      	b.n	800071a <HAL_UART_TxCpltCallback+0x2a>
	else if (huart->Instance == UART7)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a08      	ldr	r2, [pc, #32]	; (8000730 <HAL_UART_TxCpltCallback+0x40>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d102      	bne.n	800071a <HAL_UART_TxCpltCallback+0x2a>
		flag_7 = 1;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <HAL_UART_TxCpltCallback+0x44>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40004c00 	.word	0x40004c00
 800072c:	20000001 	.word	0x20000001
 8000730:	40007800 	.word	0x40007800
 8000734:	20000000 	.word	0x20000000

08000738 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000738:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a1f      	ldr	r2, [pc, #124]	; (80007c4 <HAL_UART_RxCpltCallback+0x8c>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d118      	bne.n	800077e <HAL_UART_RxCpltCallback+0x46>
	{
	  HAL_UART_Receive_IT(&huart4, &test_uart4_buff[mask & rx_4++], 1);
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <HAL_UART_RxCpltCallback+0x90>)
 800074e:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8000752:	f11b 0101 	adds.w	r1, fp, #1
 8000756:	f14c 0200 	adc.w	r2, ip, #0
 800075a:	481b      	ldr	r0, [pc, #108]	; (80007c8 <HAL_UART_RxCpltCallback+0x90>)
 800075c:	e9c0 1200 	strd	r1, r2, [r0]
 8000760:	4a1a      	ldr	r2, [pc, #104]	; (80007cc <HAL_UART_RxCpltCallback+0x94>)
 8000762:	e9d2 1200 	ldrd	r1, r2, [r2]
 8000766:	ea0b 0301 	and.w	r3, fp, r1
 800076a:	ea0c 0402 	and.w	r4, ip, r2
 800076e:	4a18      	ldr	r2, [pc, #96]	; (80007d0 <HAL_UART_RxCpltCallback+0x98>)
 8000770:	4413      	add	r3, r2
 8000772:	2201      	movs	r2, #1
 8000774:	4619      	mov	r1, r3
 8000776:	4817      	ldr	r0, [pc, #92]	; (80007d4 <HAL_UART_RxCpltCallback+0x9c>)
 8000778:	f003 ff04 	bl	8004584 <HAL_UART_Receive_IT>
	}
	else if (huart->Instance == UART7)
	{
	  HAL_UART_Receive_IT(&huart7, &test_uart7_buff[mask & rx_7++], 1);
	}
}
 800077c:	e01c      	b.n	80007b8 <HAL_UART_RxCpltCallback+0x80>
	else if (huart->Instance == UART7)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a15      	ldr	r2, [pc, #84]	; (80007d8 <HAL_UART_RxCpltCallback+0xa0>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d117      	bne.n	80007b8 <HAL_UART_RxCpltCallback+0x80>
	  HAL_UART_Receive_IT(&huart7, &test_uart7_buff[mask & rx_7++], 1);
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <HAL_UART_RxCpltCallback+0xa4>)
 800078a:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800078e:	f11b 0101 	adds.w	r1, fp, #1
 8000792:	f14c 0200 	adc.w	r2, ip, #0
 8000796:	4811      	ldr	r0, [pc, #68]	; (80007dc <HAL_UART_RxCpltCallback+0xa4>)
 8000798:	e9c0 1200 	strd	r1, r2, [r0]
 800079c:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <HAL_UART_RxCpltCallback+0x94>)
 800079e:	e9d2 1200 	ldrd	r1, r2, [r2]
 80007a2:	ea0b 0301 	and.w	r3, fp, r1
 80007a6:	ea0c 0402 	and.w	r4, ip, r2
 80007aa:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <HAL_UART_RxCpltCallback+0xa8>)
 80007ac:	4413      	add	r3, r2
 80007ae:	2201      	movs	r2, #1
 80007b0:	4619      	mov	r1, r3
 80007b2:	480c      	ldr	r0, [pc, #48]	; (80007e4 <HAL_UART_RxCpltCallback+0xac>)
 80007b4:	f003 fee6 	bl	8004584 <HAL_UART_Receive_IT>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80007c2:	bf00      	nop
 80007c4:	40004c00 	.word	0x40004c00
 80007c8:	20000228 	.word	0x20000228
 80007cc:	20000008 	.word	0x20000008
 80007d0:	200041f0 	.word	0x200041f0
 80007d4:	20004670 	.word	0x20004670
 80007d8:	40007800 	.word	0x40007800
 80007dc:	20000218 	.word	0x20000218
 80007e0:	200043f0 	.word	0x200043f0
 80007e4:	20004630 	.word	0x20004630

080007e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a2d      	ldr	r2, [pc, #180]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000808:	f043 0320 	orr.w	r3, r3, #32
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0320 	and.w	r3, r3, #32
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b27      	ldr	r3, [pc, #156]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a26      	ldr	r2, [pc, #152]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b24      	ldr	r3, [pc, #144]	; (80008bc <MX_GPIO_Init+0xd4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b20      	ldr	r3, [pc, #128]	; (80008bc <MX_GPIO_Init+0xd4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a1f      	ldr	r2, [pc, #124]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a18      	ldr	r2, [pc, #96]	; (80008bc <MX_GPIO_Init+0xd4>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a11      	ldr	r2, [pc, #68]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 800088a:	2201      	movs	r2, #1
 800088c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000890:	480b      	ldr	r0, [pc, #44]	; (80008c0 <MX_GPIO_Init+0xd8>)
 8000892:	f001 fac1 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000896:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_GPIO_Init+0xd8>)
 80008b0:	f001 f920 	bl	8001af4 <HAL_GPIO_Init>

}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	; 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40021800 	.word	0x40021800

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c8:	f000 ffac 	bl	8001824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008cc:	f000 f80c 	bl	80008e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d0:	f7ff ff8a 	bl	80007e8 <MX_GPIO_Init>
  MX_UART4_Init();
 80008d4:	f000 f9a0 	bl	8000c18 <MX_UART4_Init>
  MX_UART7_Init();
 80008d8:	f000 f9c8 	bl	8000c6c <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80008dc:	f7ff fe3a 	bl	8000554 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80008e0:	f005 ffa2 	bl	8006828 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80008e4:	e7fe      	b.n	80008e4 <main+0x20>
	...

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b0aa      	sub	sp, #168	; 0xa8
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008f2:	2234      	movs	r2, #52	; 0x34
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f008 fdb8 	bl	800946c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800090c:	f107 0308 	add.w	r3, r7, #8
 8000910:	2258      	movs	r2, #88	; 0x58
 8000912:	2100      	movs	r1, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f008 fda9 	bl	800946c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b34      	ldr	r3, [pc, #208]	; (80009f0 <SystemClock_Config+0x108>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	4a33      	ldr	r2, [pc, #204]	; (80009f0 <SystemClock_Config+0x108>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000928:	6413      	str	r3, [r2, #64]	; 0x40
 800092a:	4b31      	ldr	r3, [pc, #196]	; (80009f0 <SystemClock_Config+0x108>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b2e      	ldr	r3, [pc, #184]	; (80009f4 <SystemClock_Config+0x10c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a2d      	ldr	r2, [pc, #180]	; (80009f4 <SystemClock_Config+0x10c>)
 8000940:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000944:	6013      	str	r3, [r2, #0]
 8000946:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <SystemClock_Config+0x10c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000952:	2301      	movs	r3, #1
 8000954:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000956:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800095a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095c:	2302      	movs	r3, #2
 800095e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000962:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000966:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 4;
 800096a:	2304      	movs	r3, #4
 800096c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000970:	23a8      	movs	r3, #168	; 0xa8
 8000972:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000976:	2304      	movs	r3, #4
 8000978:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800097c:	2307      	movs	r3, #7
 800097e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000982:	2302      	movs	r3, #2
 8000984:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000988:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800098c:	4618      	mov	r0, r3
 800098e:	f003 f8e7 	bl	8003b60 <HAL_RCC_OscConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000998:	f000 f840 	bl	8000a1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099c:	230f      	movs	r3, #15
 800099e:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a0:	2302      	movs	r3, #2
 80009a2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b2:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009b8:	2103      	movs	r1, #3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 fc20 	bl	8003200 <HAL_RCC_ClockConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80009c6:	f000 f829 	bl	8000a1c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80009ca:	2320      	movs	r3, #32
 80009cc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80009ce:	2300      	movs	r3, #0
 80009d0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 fe36 	bl	8003648 <HAL_RCCEx_PeriphCLKConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80009e2:	f000 f81b 	bl	8000a1c <Error_Handler>
  }
}
 80009e6:	bf00      	nop
 80009e8:	37a8      	adds	r7, #168	; 0xa8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40007000 	.word	0x40007000

080009f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d101      	bne.n	8000a0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a0a:	f000 ff2d 	bl	8001868 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40001000 	.word	0x40001000

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <Error_Handler+0x6>

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_MspInit+0x54>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	4a11      	ldr	r2, [pc, #68]	; (8000a78 <HAL_MspInit+0x54>)
 8000a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a38:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <HAL_MspInit+0x54>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <HAL_MspInit+0x54>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <HAL_MspInit+0x54>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_MspInit+0x54>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	210f      	movs	r1, #15
 8000a66:	f06f 0001 	mvn.w	r0, #1
 8000a6a:	f000 fff7 	bl	8001a5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800

08000a7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08c      	sub	sp, #48	; 0x30
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	2036      	movs	r0, #54	; 0x36
 8000a92:	f000 ffe3 	bl	8001a5c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a96:	2036      	movs	r0, #54	; 0x36
 8000a98:	f000 fffc 	bl	8001a94 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <HAL_InitTick+0xa4>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	4a1e      	ldr	r2, [pc, #120]	; (8000b20 <HAL_InitTick+0xa4>)
 8000aa6:	f043 0310 	orr.w	r3, r3, #16
 8000aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8000aac:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <HAL_InitTick+0xa4>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	f003 0310 	and.w	r3, r3, #16
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ab8:	f107 0210 	add.w	r2, r7, #16
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f002 fd8e 	bl	80035e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ac8:	f002 fd64 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
 8000acc:	4603      	mov	r3, r0
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad4:	4a13      	ldr	r2, [pc, #76]	; (8000b24 <HAL_InitTick+0xa8>)
 8000ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ada:	0c9b      	lsrs	r3, r3, #18
 8000adc:	3b01      	subs	r3, #1
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <HAL_InitTick+0xac>)
 8000ae2:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <HAL_InitTick+0xb0>)
 8000ae4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <HAL_InitTick+0xac>)
 8000ae8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aec:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000aee:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <HAL_InitTick+0xac>)
 8000af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <HAL_InitTick+0xac>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <HAL_InitTick+0xac>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b00:	4809      	ldr	r0, [pc, #36]	; (8000b28 <HAL_InitTick+0xac>)
 8000b02:	f003 fa6f 	bl	8003fe4 <HAL_TIM_Base_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d104      	bne.n	8000b16 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b0c:	4806      	ldr	r0, [pc, #24]	; (8000b28 <HAL_InitTick+0xac>)
 8000b0e:	f003 fa9e 	bl	800404e <HAL_TIM_Base_Start_IT>
 8000b12:	4603      	mov	r3, r0
 8000b14:	e000      	b.n	8000b18 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3730      	adds	r7, #48	; 0x30
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800
 8000b24:	431bde83 	.word	0x431bde83
 8000b28:	200045f0 	.word	0x200045f0
 8000b2c:	40001000 	.word	0x40001000

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <NMI_Handler+0x4>

08000b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <HardFault_Handler+0x4>

08000b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <MemManage_Handler+0x4>

08000b42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <BusFault_Handler+0x4>

08000b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <UsageFault_Handler+0x4>

08000b4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <UART4_IRQHandler+0x10>)
 8000b62:	f003 fd65 	bl	8004630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20004670 	.word	0x20004670

08000b70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <TIM6_DAC_IRQHandler+0x10>)
 8000b76:	f003 fa8e 	bl	8004096 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200045f0 	.word	0x200045f0

08000b84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <OTG_FS_IRQHandler+0x10>)
 8000b8a:	f001 fab5 	bl	80020f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20005b80 	.word	0x20005b80

08000b98 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <UART7_IRQHandler+0x10>)
 8000b9e:	f003 fd47 	bl	8004630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20004630 	.word	0x20004630

08000bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb4:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <_sbrk+0x5c>)
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <_sbrk+0x60>)
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <_sbrk+0x64>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <_sbrk+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d207      	bcs.n	8000bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bdc:	f008 fc0c 	bl	80093f8 <__errno>
 8000be0:	4602      	mov	r2, r0
 8000be2:	230c      	movs	r3, #12
 8000be4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	e009      	b.n	8000c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <_sbrk+0x64>)
 8000bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20050000 	.word	0x20050000
 8000c0c:	00000400 	.word	0x00000400
 8000c10:	20000490 	.word	0x20000490
 8000c14:	20005f90 	.word	0x20005f90

08000c18 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart7;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_UART4_Init+0x4c>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <MX_UART4_Init+0x50>)
 8000c20:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <MX_UART4_Init+0x4c>)
 8000c24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c28:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_UART4_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_UART4_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <MX_UART4_Init+0x4c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_UART4_Init+0x4c>)
 8000c3e:	220c      	movs	r2, #12
 8000c40:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <MX_UART4_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_UART4_Init+0x4c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_UART4_Init+0x4c>)
 8000c50:	f003 fc06 	bl	8004460 <HAL_UART_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000c5a:	f7ff fedf 	bl	8000a1c <Error_Handler>
  }

}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20004670 	.word	0x20004670
 8000c68:	40004c00 	.word	0x40004c00

08000c6c <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_UART7_Init+0x4c>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <MX_UART7_Init+0x50>)
 8000c74:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <MX_UART7_Init+0x4c>)
 8000c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c7c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_UART7_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_UART7_Init+0x4c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MX_UART7_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_UART7_Init+0x4c>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <MX_UART7_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_UART7_Init+0x4c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_UART7_Init+0x4c>)
 8000ca4:	f003 fbdc 	bl	8004460 <HAL_UART_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8000cae:	f7ff feb5 	bl	8000a1c <Error_Handler>
  }

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20004630 	.word	0x20004630
 8000cbc:	40007800 	.word	0x40007800

08000cc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08c      	sub	sp, #48	; 0x30
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a42      	ldr	r2, [pc, #264]	; (8000de8 <HAL_UART_MspInit+0x128>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d145      	bne.n	8000d6e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61bb      	str	r3, [r7, #24]
 8000ce6:	4b41      	ldr	r3, [pc, #260]	; (8000dec <HAL_UART_MspInit+0x12c>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a40      	ldr	r2, [pc, #256]	; (8000dec <HAL_UART_MspInit+0x12c>)
 8000cec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b3e      	ldr	r3, [pc, #248]	; (8000dec <HAL_UART_MspInit+0x12c>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cfa:	61bb      	str	r3, [r7, #24]
 8000cfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	4b3a      	ldr	r3, [pc, #232]	; (8000dec <HAL_UART_MspInit+0x12c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a39      	ldr	r2, [pc, #228]	; (8000dec <HAL_UART_MspInit+0x12c>)
 8000d08:	f043 0308 	orr.w	r3, r3, #8
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b37      	ldr	r3, [pc, #220]	; (8000dec <HAL_UART_MspInit+0x12c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0308 	and.w	r3, r3, #8
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PD10     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d24:	2301      	movs	r3, #1
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	482e      	ldr	r0, [pc, #184]	; (8000df0 <HAL_UART_MspInit+0x130>)
 8000d38:	f000 fedc 	bl	8001af4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART4;
 8000d4c:	230b      	movs	r3, #11
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	4826      	ldr	r0, [pc, #152]	; (8000df0 <HAL_UART_MspInit+0x130>)
 8000d58:	f000 fecc 	bl	8001af4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2034      	movs	r0, #52	; 0x34
 8000d62:	f000 fe7b 	bl	8001a5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000d66:	2034      	movs	r0, #52	; 0x34
 8000d68:	f000 fe94 	bl	8001a94 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8000d6c:	e038      	b.n	8000de0 <HAL_UART_MspInit+0x120>
  else if(uartHandle->Instance==UART7)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a20      	ldr	r2, [pc, #128]	; (8000df4 <HAL_UART_MspInit+0x134>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d133      	bne.n	8000de0 <HAL_UART_MspInit+0x120>
    __HAL_RCC_UART7_CLK_ENABLE();
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <HAL_UART_MspInit+0x12c>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	4a1a      	ldr	r2, [pc, #104]	; (8000dec <HAL_UART_MspInit+0x12c>)
 8000d82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000d86:	6413      	str	r3, [r2, #64]	; 0x40
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <HAL_UART_MspInit+0x12c>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <HAL_UART_MspInit+0x12c>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9c:	4a13      	ldr	r2, [pc, #76]	; (8000dec <HAL_UART_MspInit+0x12c>)
 8000d9e:	f043 0320 	orr.w	r3, r3, #32
 8000da2:	6313      	str	r3, [r2, #48]	; 0x30
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <HAL_UART_MspInit+0x12c>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da8:	f003 0320 	and.w	r3, r3, #32
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000db0:	23c0      	movs	r3, #192	; 0xc0
 8000db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8000dc0:	2308      	movs	r3, #8
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480b      	ldr	r0, [pc, #44]	; (8000df8 <HAL_UART_MspInit+0x138>)
 8000dcc:	f000 fe92 	bl	8001af4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2105      	movs	r1, #5
 8000dd4:	2052      	movs	r0, #82	; 0x52
 8000dd6:	f000 fe41 	bl	8001a5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8000dda:	2052      	movs	r0, #82	; 0x52
 8000ddc:	f000 fe5a 	bl	8001a94 <HAL_NVIC_EnableIRQ>
}
 8000de0:	bf00      	nop
 8000de2:	3730      	adds	r7, #48	; 0x30
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40004c00 	.word	0x40004c00
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020c00 	.word	0x40020c00
 8000df4:	40007800 	.word	0x40007800
 8000df8:	40021400 	.word	0x40021400

08000dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000e00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e02:	e003      	b.n	8000e0c <LoopCopyDataInit>

08000e04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e0a:	3104      	adds	r1, #4

08000e0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e0c:	480b      	ldr	r0, [pc, #44]	; (8000e3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e14:	d3f6      	bcc.n	8000e04 <CopyDataInit>
  ldr  r2, =_sbss
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e18:	e002      	b.n	8000e20 <LoopFillZerobss>

08000e1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000e1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e1c:	f842 3b04 	str.w	r3, [r2], #4

08000e20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e20:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e24:	d3f9      	bcc.n	8000e1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e26:	f000 fce7 	bl	80017f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f008 faeb 	bl	8009404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2e:	f7ff fd49 	bl	80008c4 <main>
  bx  lr    
 8000e32:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e34:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000e38:	080096b4 	.word	0x080096b4
  ldr  r0, =_sdata
 8000e3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e40:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 8000e44:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8000e48:	20005f90 	.word	0x20005f90

08000e4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC_IRQHandler>
	...

08000e50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8000e54:	2200      	movs	r2, #0
 8000e56:	4912      	ldr	r1, [pc, #72]	; (8000ea0 <MX_USB_DEVICE_Init+0x50>)
 8000e58:	4812      	ldr	r0, [pc, #72]	; (8000ea4 <MX_USB_DEVICE_Init+0x54>)
 8000e5a:	f007 f9c7 	bl	80081ec <USBD_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8000e64:	f7ff fdda 	bl	8000a1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8000e68:	490f      	ldr	r1, [pc, #60]	; (8000ea8 <MX_USB_DEVICE_Init+0x58>)
 8000e6a:	480e      	ldr	r0, [pc, #56]	; (8000ea4 <MX_USB_DEVICE_Init+0x54>)
 8000e6c:	f007 f9f4 	bl	8008258 <USBD_RegisterClass>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8000e76:	f7ff fdd1 	bl	8000a1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8000e7a:	490c      	ldr	r1, [pc, #48]	; (8000eac <MX_USB_DEVICE_Init+0x5c>)
 8000e7c:	4809      	ldr	r0, [pc, #36]	; (8000ea4 <MX_USB_DEVICE_Init+0x54>)
 8000e7e:	f007 f949 	bl	8008114 <USBD_CDC_RegisterInterface>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8000e88:	f7ff fdc8 	bl	8000a1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_USB_DEVICE_Init+0x54>)
 8000e8e:	f007 fa04 	bl	800829a <USBD_Start>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8000e98:	f7ff fdc0 	bl	8000a1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000024 	.word	0x20000024
 8000ea4:	200046b0 	.word	0x200046b0
 8000ea8:	20000090 	.word	0x20000090
 8000eac:	20000010 	.word	0x20000010

08000eb0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	4905      	ldr	r1, [pc, #20]	; (8000ecc <CDC_Init_FS+0x1c>)
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <CDC_Init_FS+0x20>)
 8000eba:	f007 f940 	bl	800813e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8000ebe:	4905      	ldr	r1, [pc, #20]	; (8000ed4 <CDC_Init_FS+0x24>)
 8000ec0:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <CDC_Init_FS+0x20>)
 8000ec2:	f007 f955 	bl	8008170 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8000ec6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20005180 	.word	0x20005180
 8000ed0:	200046b0 	.word	0x200046b0
 8000ed4:	20004980 	.word	0x20004980

08000ed8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8000edc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	2b23      	cmp	r3, #35	; 0x23
 8000efc:	d84a      	bhi.n	8000f94 <CDC_Control_FS+0xac>
 8000efe:	a201      	add	r2, pc, #4	; (adr r2, 8000f04 <CDC_Control_FS+0x1c>)
 8000f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f04:	08000f95 	.word	0x08000f95
 8000f08:	08000f95 	.word	0x08000f95
 8000f0c:	08000f95 	.word	0x08000f95
 8000f10:	08000f95 	.word	0x08000f95
 8000f14:	08000f95 	.word	0x08000f95
 8000f18:	08000f95 	.word	0x08000f95
 8000f1c:	08000f95 	.word	0x08000f95
 8000f20:	08000f95 	.word	0x08000f95
 8000f24:	08000f95 	.word	0x08000f95
 8000f28:	08000f95 	.word	0x08000f95
 8000f2c:	08000f95 	.word	0x08000f95
 8000f30:	08000f95 	.word	0x08000f95
 8000f34:	08000f95 	.word	0x08000f95
 8000f38:	08000f95 	.word	0x08000f95
 8000f3c:	08000f95 	.word	0x08000f95
 8000f40:	08000f95 	.word	0x08000f95
 8000f44:	08000f95 	.word	0x08000f95
 8000f48:	08000f95 	.word	0x08000f95
 8000f4c:	08000f95 	.word	0x08000f95
 8000f50:	08000f95 	.word	0x08000f95
 8000f54:	08000f95 	.word	0x08000f95
 8000f58:	08000f95 	.word	0x08000f95
 8000f5c:	08000f95 	.word	0x08000f95
 8000f60:	08000f95 	.word	0x08000f95
 8000f64:	08000f95 	.word	0x08000f95
 8000f68:	08000f95 	.word	0x08000f95
 8000f6c:	08000f95 	.word	0x08000f95
 8000f70:	08000f95 	.word	0x08000f95
 8000f74:	08000f95 	.word	0x08000f95
 8000f78:	08000f95 	.word	0x08000f95
 8000f7c:	08000f95 	.word	0x08000f95
 8000f80:	08000f95 	.word	0x08000f95
 8000f84:	08000f95 	.word	0x08000f95
 8000f88:	08000f95 	.word	0x08000f95
 8000f8c:	08000f95 	.word	0x08000f95
 8000f90:	08000f95 	.word	0x08000f95
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8000f94:	bf00      	nop
  }

  return (USBD_OK);
 8000f96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <CDC_Receive_FS+0x24>)
 8000fb2:	f007 f8dd 	bl	8008170 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8000fb6:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <CDC_Receive_FS+0x24>)
 8000fb8:	f007 f8ee 	bl	8008198 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8000fbc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200046b0 	.word	0x200046b0

08000fcc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b087      	sub	sp, #28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8000fde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	371c      	adds	r7, #28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	2212      	movs	r2, #18
 8001000:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8001002:	4b03      	ldr	r3, [pc, #12]	; (8001010 <USBD_FS_DeviceDescriptor+0x20>)
}
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	20000040 	.word	0x20000040

08001014 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2204      	movs	r2, #4
 8001024:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8001026:	4b03      	ldr	r3, [pc, #12]	; (8001034 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	20000054 	.word	0x20000054

08001038 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d105      	bne.n	8001056 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	4907      	ldr	r1, [pc, #28]	; (800106c <USBD_FS_ProductStrDescriptor+0x34>)
 800104e:	4808      	ldr	r0, [pc, #32]	; (8001070 <USBD_FS_ProductStrDescriptor+0x38>)
 8001050:	f008 f8f1 	bl	8009236 <USBD_GetString>
 8001054:	e004      	b.n	8001060 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	4904      	ldr	r1, [pc, #16]	; (800106c <USBD_FS_ProductStrDescriptor+0x34>)
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <USBD_FS_ProductStrDescriptor+0x38>)
 800105c:	f008 f8eb 	bl	8009236 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001060:	4b02      	ldr	r3, [pc, #8]	; (800106c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20005980 	.word	0x20005980
 8001070:	0800963c 	.word	0x0800963c

08001074 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	4904      	ldr	r1, [pc, #16]	; (8001094 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8001084:	4804      	ldr	r0, [pc, #16]	; (8001098 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8001086:	f008 f8d6 	bl	8009236 <USBD_GetString>
  return USBD_StrDesc;
 800108a:	4b02      	ldr	r3, [pc, #8]	; (8001094 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20005980 	.word	0x20005980
 8001098:	08009654 	.word	0x08009654

0800109c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	6039      	str	r1, [r7, #0]
 80010a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	221a      	movs	r2, #26
 80010ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80010ae:	f000 f843 	bl	8001138 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80010b2:	4b02      	ldr	r3, [pc, #8]	; (80010bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000058 	.word	0x20000058

080010c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d105      	bne.n	80010de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	4907      	ldr	r1, [pc, #28]	; (80010f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80010d6:	4808      	ldr	r0, [pc, #32]	; (80010f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80010d8:	f008 f8ad 	bl	8009236 <USBD_GetString>
 80010dc:	e004      	b.n	80010e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	4904      	ldr	r1, [pc, #16]	; (80010f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80010e4:	f008 f8a7 	bl	8009236 <USBD_GetString>
  }
  return USBD_StrDesc;
 80010e8:	4b02      	ldr	r3, [pc, #8]	; (80010f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20005980 	.word	0x20005980
 80010f8:	08009668 	.word	0x08009668

080010fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d105      	bne.n	800111a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8001112:	4808      	ldr	r0, [pc, #32]	; (8001134 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8001114:	f008 f88f 	bl	8009236 <USBD_GetString>
 8001118:	e004      	b.n	8001124 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	4904      	ldr	r1, [pc, #16]	; (8001130 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8001120:	f008 f889 	bl	8009236 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001124:	4b02      	ldr	r3, [pc, #8]	; (8001130 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20005980 	.word	0x20005980
 8001134:	08009674 	.word	0x08009674

08001138 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <Get_SerialNum+0x44>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <Get_SerialNum+0x48>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <Get_SerialNum+0x4c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d009      	beq.n	8001172 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800115e:	2208      	movs	r2, #8
 8001160:	4909      	ldr	r1, [pc, #36]	; (8001188 <Get_SerialNum+0x50>)
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f000 f814 	bl	8001190 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8001168:	2204      	movs	r2, #4
 800116a:	4908      	ldr	r1, [pc, #32]	; (800118c <Get_SerialNum+0x54>)
 800116c:	68b8      	ldr	r0, [r7, #8]
 800116e:	f000 f80f 	bl	8001190 <IntToUnicode>
  }
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	1fff7a10 	.word	0x1fff7a10
 8001180:	1fff7a14 	.word	0x1fff7a14
 8001184:	1fff7a18 	.word	0x1fff7a18
 8001188:	2000005a 	.word	0x2000005a
 800118c:	2000006a 	.word	0x2000006a

08001190 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	4613      	mov	r3, r2
 800119c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	75fb      	strb	r3, [r7, #23]
 80011a6:	e027      	b.n	80011f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	0f1b      	lsrs	r3, r3, #28
 80011ac:	2b09      	cmp	r3, #9
 80011ae:	d80b      	bhi.n	80011c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	0f1b      	lsrs	r3, r3, #28
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4619      	mov	r1, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	440b      	add	r3, r1
 80011c0:	3230      	adds	r2, #48	; 0x30
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	701a      	strb	r2, [r3, #0]
 80011c6:	e00a      	b.n	80011de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	0f1b      	lsrs	r3, r3, #28
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	7dfb      	ldrb	r3, [r7, #23]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4619      	mov	r1, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	440b      	add	r3, r1
 80011d8:	3237      	adds	r2, #55	; 0x37
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80011e4:	7dfb      	ldrb	r3, [r7, #23]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	3301      	adds	r3, #1
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	4413      	add	r3, r2
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80011f2:	7dfb      	ldrb	r3, [r7, #23]
 80011f4:	3301      	adds	r3, #1
 80011f6:	75fb      	strb	r3, [r7, #23]
 80011f8:	7dfa      	ldrb	r2, [r7, #23]
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d3d3      	bcc.n	80011a8 <IntToUnicode+0x18>
  }
}
 8001200:	bf00      	nop
 8001202:	371c      	adds	r7, #28
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800122c:	d13a      	bne.n	80012a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <HAL_PCD_MspInit+0xa0>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a1d      	ldr	r2, [pc, #116]	; (80012ac <HAL_PCD_MspInit+0xa0>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <HAL_PCD_MspInit+0xa0>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800124a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800124e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800125c:	230a      	movs	r3, #10
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	4812      	ldr	r0, [pc, #72]	; (80012b0 <HAL_PCD_MspInit+0xa4>)
 8001268:	f000 fc44 	bl	8001af4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <HAL_PCD_MspInit+0xa0>)
 800126e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001270:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <HAL_PCD_MspInit+0xa0>)
 8001272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001276:	6353      	str	r3, [r2, #52]	; 0x34
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_PCD_MspInit+0xa0>)
 800127e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <HAL_PCD_MspInit+0xa0>)
 8001282:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001286:	6453      	str	r3, [r2, #68]	; 0x44
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <HAL_PCD_MspInit+0xa0>)
 800128a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8001294:	2200      	movs	r2, #0
 8001296:	2105      	movs	r1, #5
 8001298:	2043      	movs	r0, #67	; 0x43
 800129a:	f000 fbdf 	bl	8001a5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800129e:	2043      	movs	r0, #67	; 0x43
 80012a0:	f000 fbf8 	bl	8001a94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	; 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000

080012b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80012c8:	4619      	mov	r1, r3
 80012ca:	4610      	mov	r0, r2
 80012cc:	f007 f830 	bl	8008330 <USBD_LL_SetupStage>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80012ea:	78fa      	ldrb	r2, [r7, #3]
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	1a9b      	subs	r3, r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	440b      	add	r3, r1
 80012f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	78fb      	ldrb	r3, [r7, #3]
 8001300:	4619      	mov	r1, r3
 8001302:	f007 f868 	bl	80083d6 <USBD_LL_DataOutStage>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	460b      	mov	r3, r1
 8001318:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8001320:	78fa      	ldrb	r2, [r7, #3]
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	1a9b      	subs	r3, r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	3348      	adds	r3, #72	; 0x48
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	4619      	mov	r1, r3
 8001336:	f007 f8b1 	bl	800849c <USBD_LL_DataInStage>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001350:	4618      	mov	r0, r3
 8001352:	f007 f9b5 	bl	80086c0 <USBD_LL_SOF>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b084      	sub	sp, #16
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8001366:	2301      	movs	r3, #1
 8001368:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d001      	beq.n	8001376 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8001372:	f7ff fb53 	bl	8000a1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800137c:	7bfa      	ldrb	r2, [r7, #15]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f007 f962 	bl	800864a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800138c:	4618      	mov	r0, r3
 800138e:	f007 f91b 	bl	80085c8 <USBD_LL_Reset>
}
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80013aa:	4618      	mov	r0, r3
 80013ac:	f007 f95d 	bl	800866a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6812      	ldr	r2, [r2, #0]
 80013be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <HAL_PCD_SuspendCallback+0x48>)
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	4a03      	ldr	r2, [pc, #12]	; (80013e4 <HAL_PCD_SuspendCallback+0x48>)
 80013d6:	f043 0306 	orr.w	r3, r3, #6
 80013da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80013f6:	4618      	mov	r0, r3
 80013f8:	f007 f94c 	bl	8008694 <USBD_LL_Resume>
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001416:	78fa      	ldrb	r2, [r7, #3]
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f007 f977 	bl	800870e <USBD_LL_IsoOUTIncomplete>
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800143a:	78fa      	ldrb	r2, [r7, #3]
 800143c:	4611      	mov	r1, r2
 800143e:	4618      	mov	r0, r3
 8001440:	f007 f958 	bl	80086f4 <USBD_LL_IsoINIncomplete>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800145a:	4618      	mov	r0, r3
 800145c:	f007 f964 	bl	8008728 <USBD_LL_DevConnected>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001476:	4618      	mov	r0, r3
 8001478:	f007 f961 	bl	800873e <USBD_LL_DevDisconnected>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d13f      	bne.n	8001514 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8001494:	4a22      	ldr	r2, [pc, #136]	; (8001520 <USBD_LL_Init+0x9c>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a20      	ldr	r2, [pc, #128]	; (8001520 <USBD_LL_Init+0x9c>)
 80014a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014a4:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <USBD_LL_Init+0x9c>)
 80014a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80014ac:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <USBD_LL_Init+0x9c>)
 80014ae:	2206      	movs	r2, #6
 80014b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <USBD_LL_Init+0x9c>)
 80014b4:	2202      	movs	r2, #2
 80014b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <USBD_LL_Init+0x9c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <USBD_LL_Init+0x9c>)
 80014c0:	2202      	movs	r2, #2
 80014c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <USBD_LL_Init+0x9c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <USBD_LL_Init+0x9c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014d0:	4b13      	ldr	r3, [pc, #76]	; (8001520 <USBD_LL_Init+0x9c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <USBD_LL_Init+0x9c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80014dc:	4b10      	ldr	r3, [pc, #64]	; (8001520 <USBD_LL_Init+0x9c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <USBD_LL_Init+0x9c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80014e8:	480d      	ldr	r0, [pc, #52]	; (8001520 <USBD_LL_Init+0x9c>)
 80014ea:	f000 fcae 	bl	8001e4a <HAL_PCD_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 80014f4:	f7ff fa92 	bl	8000a1c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80014f8:	2180      	movs	r1, #128	; 0x80
 80014fa:	4809      	ldr	r0, [pc, #36]	; (8001520 <USBD_LL_Init+0x9c>)
 80014fc:	f001 fe3f 	bl	800317e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8001500:	2240      	movs	r2, #64	; 0x40
 8001502:	2100      	movs	r1, #0
 8001504:	4806      	ldr	r0, [pc, #24]	; (8001520 <USBD_LL_Init+0x9c>)
 8001506:	f001 fdf3 	bl	80030f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800150a:	2280      	movs	r2, #128	; 0x80
 800150c:	2101      	movs	r1, #1
 800150e:	4804      	ldr	r0, [pc, #16]	; (8001520 <USBD_LL_Init+0x9c>)
 8001510:	f001 fdee 	bl	80030f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20005b80 	.word	0x20005b80

08001524 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800153a:	4618      	mov	r0, r3
 800153c:	f000 fda9 	bl	8002092 <HAL_PCD_Start>
 8001540:	4603      	mov	r3, r0
 8001542:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f92a 	bl	80017a0 <USBD_Get_USB_Status>
 800154c:	4603      	mov	r3, r0
 800154e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001550:	7bbb      	ldrb	r3, [r7, #14]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	4608      	mov	r0, r1
 8001564:	4611      	mov	r1, r2
 8001566:	461a      	mov	r2, r3
 8001568:	4603      	mov	r3, r0
 800156a:	70fb      	strb	r3, [r7, #3]
 800156c:	460b      	mov	r3, r1
 800156e:	70bb      	strb	r3, [r7, #2]
 8001570:	4613      	mov	r3, r2
 8001572:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001578:	2300      	movs	r3, #0
 800157a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8001582:	78bb      	ldrb	r3, [r7, #2]
 8001584:	883a      	ldrh	r2, [r7, #0]
 8001586:	78f9      	ldrb	r1, [r7, #3]
 8001588:	f001 f9ba 	bl	8002900 <HAL_PCD_EP_Open>
 800158c:	4603      	mov	r3, r0
 800158e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	4618      	mov	r0, r3
 8001594:	f000 f904 	bl	80017a0 <USBD_Get_USB_Status>
 8001598:	4603      	mov	r3, r0
 800159a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800159c:	7bbb      	ldrb	r3, [r7, #14]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b084      	sub	sp, #16
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	460b      	mov	r3, r1
 80015b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80015c0:	78fa      	ldrb	r2, [r7, #3]
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f001 fa03 	bl	80029d0 <HAL_PCD_EP_Close>
 80015ca:	4603      	mov	r3, r0
 80015cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 f8e5 	bl	80017a0 <USBD_Get_USB_Status>
 80015d6:	4603      	mov	r3, r0
 80015d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80015da:	7bbb      	ldrb	r3, [r7, #14]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80015fe:	78fa      	ldrb	r2, [r7, #3]
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f001 fadb 	bl	8002bbe <HAL_PCD_EP_SetStall>
 8001608:	4603      	mov	r3, r0
 800160a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	4618      	mov	r0, r3
 8001610:	f000 f8c6 	bl	80017a0 <USBD_Get_USB_Status>
 8001614:	4603      	mov	r3, r0
 8001616:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001618:	7bbb      	ldrb	r3, [r7, #14]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b084      	sub	sp, #16
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	460b      	mov	r3, r1
 800162c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800163c:	78fa      	ldrb	r2, [r7, #3]
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f001 fb20 	bl	8002c86 <HAL_PCD_EP_ClrStall>
 8001646:	4603      	mov	r3, r0
 8001648:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	4618      	mov	r0, r3
 800164e:	f000 f8a7 	bl	80017a0 <USBD_Get_USB_Status>
 8001652:	4603      	mov	r3, r0
 8001654:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001656:	7bbb      	ldrb	r3, [r7, #14]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001672:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8001674:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001678:	2b00      	cmp	r3, #0
 800167a:	da0b      	bge.n	8001694 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001682:	68f9      	ldr	r1, [r7, #12]
 8001684:	4613      	mov	r3, r2
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	1a9b      	subs	r3, r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	333e      	adds	r3, #62	; 0x3e
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	e00b      	b.n	80016ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800169a:	68f9      	ldr	r1, [r7, #12]
 800169c:	4613      	mov	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	1a9b      	subs	r3, r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80016aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80016d2:	78fa      	ldrb	r2, [r7, #3]
 80016d4:	4611      	mov	r1, r2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f001 f8ed 	bl	80028b6 <HAL_PCD_SetAddress>
 80016dc:	4603      	mov	r3, r0
 80016de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f85c 	bl	80017a0 <USBD_Get_USB_Status>
 80016e8:	4603      	mov	r3, r0
 80016ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80016ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b086      	sub	sp, #24
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	60f8      	str	r0, [r7, #12]
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	460b      	mov	r3, r1
 8001704:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8001714:	7af9      	ldrb	r1, [r7, #11]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	f001 fa06 	bl	8002b2a <HAL_PCD_EP_Transmit>
 800171e:	4603      	mov	r3, r0
 8001720:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001722:	7dfb      	ldrb	r3, [r7, #23]
 8001724:	4618      	mov	r0, r3
 8001726:	f000 f83b 	bl	80017a0 <USBD_Get_USB_Status>
 800172a:	4603      	mov	r3, r0
 800172c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800172e:	7dbb      	ldrb	r3, [r7, #22]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	460b      	mov	r3, r1
 8001746:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8001756:	7af9      	ldrb	r1, [r7, #11]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	f001 f982 	bl	8002a64 <HAL_PCD_EP_Receive>
 8001760:	4603      	mov	r3, r0
 8001762:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	4618      	mov	r0, r3
 8001768:	f000 f81a 	bl	80017a0 <USBD_Get_USB_Status>
 800176c:	4603      	mov	r3, r0
 800176e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8001770:	7dbb      	ldrb	r3, [r7, #22]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	460b      	mov	r3, r1
 8001784:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800178c:	78fa      	ldrb	r2, [r7, #3]
 800178e:	4611      	mov	r1, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f001 f9b2 	bl	8002afa <HAL_PCD_EP_GetRxCount>
 8001796:	4603      	mov	r3, r0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	d817      	bhi.n	80017e4 <USBD_Get_USB_Status+0x44>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <USBD_Get_USB_Status+0x1c>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	080017cd 	.word	0x080017cd
 80017c0:	080017d3 	.word	0x080017d3
 80017c4:	080017d9 	.word	0x080017d9
 80017c8:	080017df 	.word	0x080017df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80017cc:	2300      	movs	r3, #0
 80017ce:	73fb      	strb	r3, [r7, #15]
    break;
 80017d0:	e00b      	b.n	80017ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80017d2:	2303      	movs	r3, #3
 80017d4:	73fb      	strb	r3, [r7, #15]
    break;
 80017d6:	e008      	b.n	80017ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80017d8:	2301      	movs	r3, #1
 80017da:	73fb      	strb	r3, [r7, #15]
    break;
 80017dc:	e005      	b.n	80017ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80017de:	2303      	movs	r3, #3
 80017e0:	73fb      	strb	r3, [r7, #15]
    break;
 80017e2:	e002      	b.n	80017ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80017e4:	2303      	movs	r3, #3
 80017e6:	73fb      	strb	r3, [r7, #15]
    break;
 80017e8:	bf00      	nop
  }
  return usb_status;
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <SystemInit+0x28>)
 80017fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001802:	4a07      	ldr	r2, [pc, #28]	; (8001820 <SystemInit+0x28>)
 8001804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <SystemInit+0x28>)
 800180e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001812:	609a      	str	r2, [r3, #8]
#endif
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001828:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <HAL_Init+0x40>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0d      	ldr	r2, [pc, #52]	; (8001864 <HAL_Init+0x40>)
 800182e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001832:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_Init+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <HAL_Init+0x40>)
 800183a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800183e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a07      	ldr	r2, [pc, #28]	; (8001864 <HAL_Init+0x40>)
 8001846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184c:	2003      	movs	r0, #3
 800184e:	f000 f8fa 	bl	8001a46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001852:	2000      	movs	r0, #0
 8001854:	f7ff f912 	bl	8000a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001858:	f7ff f8e4 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023c00 	.word	0x40023c00

08001868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_IncTick+0x20>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	461a      	mov	r2, r3
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_IncTick+0x24>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4413      	add	r3, r2
 8001878:	4a04      	ldr	r2, [pc, #16]	; (800188c <HAL_IncTick+0x24>)
 800187a:	6013      	str	r3, [r2, #0]
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	2000007c 	.word	0x2000007c
 800188c:	20005f88 	.word	0x20005f88

08001890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return uwTick;
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <HAL_GetTick+0x14>)
 8001896:	681b      	ldr	r3, [r3, #0]
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20005f88 	.word	0x20005f88

080018a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b0:	f7ff ffee 	bl	8001890 <HAL_GetTick>
 80018b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c0:	d005      	beq.n	80018ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_Delay+0x40>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4413      	add	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ce:	bf00      	nop
 80018d0:	f7ff ffde 	bl	8001890 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d8f7      	bhi.n	80018d0 <HAL_Delay+0x28>
  {
  }
}
 80018e0:	bf00      	nop
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	2000007c 	.word	0x2000007c

080018ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001908:	4013      	ands	r3, r2
 800190a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800191c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191e:	4a04      	ldr	r2, [pc, #16]	; (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	60d3      	str	r3, [r2, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <__NVIC_GetPriorityGrouping+0x18>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	0a1b      	lsrs	r3, r3, #8
 800193e:	f003 0307 	and.w	r3, r3, #7
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	db0b      	blt.n	800197a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	f003 021f 	and.w	r2, r3, #31
 8001968:	4907      	ldr	r1, [pc, #28]	; (8001988 <__NVIC_EnableIRQ+0x38>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	2001      	movs	r0, #1
 8001972:	fa00 f202 	lsl.w	r2, r0, r2
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000e100 	.word	0xe000e100

0800198c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	2b00      	cmp	r3, #0
 800199e:	db0a      	blt.n	80019b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	490c      	ldr	r1, [pc, #48]	; (80019d8 <__NVIC_SetPriority+0x4c>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	0112      	lsls	r2, r2, #4
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	440b      	add	r3, r1
 80019b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b4:	e00a      	b.n	80019cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4908      	ldr	r1, [pc, #32]	; (80019dc <__NVIC_SetPriority+0x50>)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	3b04      	subs	r3, #4
 80019c4:	0112      	lsls	r2, r2, #4
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	440b      	add	r3, r1
 80019ca:	761a      	strb	r2, [r3, #24]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000e100 	.word	0xe000e100
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f1c3 0307 	rsb	r3, r3, #7
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	bf28      	it	cs
 80019fe:	2304      	movcs	r3, #4
 8001a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3304      	adds	r3, #4
 8001a06:	2b06      	cmp	r3, #6
 8001a08:	d902      	bls.n	8001a10 <NVIC_EncodePriority+0x30>
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3b03      	subs	r3, #3
 8001a0e:	e000      	b.n	8001a12 <NVIC_EncodePriority+0x32>
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	f04f 32ff 	mov.w	r2, #4294967295
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	401a      	ands	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a28:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a32:	43d9      	mvns	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	4313      	orrs	r3, r2
         );
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3724      	adds	r7, #36	; 0x24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ff4c 	bl	80018ec <__NVIC_SetPriorityGrouping>
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
 8001a68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a6e:	f7ff ff61 	bl	8001934 <__NVIC_GetPriorityGrouping>
 8001a72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	68b9      	ldr	r1, [r7, #8]
 8001a78:	6978      	ldr	r0, [r7, #20]
 8001a7a:	f7ff ffb1 	bl	80019e0 <NVIC_EncodePriority>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ff80 	bl	800198c <__NVIC_SetPriority>
}
 8001a8c:	bf00      	nop
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff ff54 	bl	8001950 <__NVIC_EnableIRQ>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d004      	beq.n	8001ace <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2280      	movs	r2, #128	; 0x80
 8001ac8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00c      	b.n	8001ae8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2205      	movs	r2, #5
 8001ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0201 	bic.w	r2, r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
 8001b0e:	e165      	b.n	8001ddc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b10:	2201      	movs	r2, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	f040 8154 	bne.w	8001dd6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d00b      	beq.n	8001b4e <HAL_GPIO_Init+0x5a>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d007      	beq.n	8001b4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b42:	2b11      	cmp	r3, #17
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b12      	cmp	r3, #18
 8001b4c:	d130      	bne.n	8001bb0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	2203      	movs	r2, #3
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b84:	2201      	movs	r2, #1
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f003 0201 	and.w	r2, r3, #1
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	2203      	movs	r2, #3
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d003      	beq.n	8001bf0 <HAL_GPIO_Init+0xfc>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b12      	cmp	r3, #18
 8001bee:	d123      	bne.n	8001c38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	08da      	lsrs	r2, r3, #3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3208      	adds	r2, #8
 8001bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	220f      	movs	r2, #15
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	691a      	ldr	r2, [r3, #16]
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	08da      	lsrs	r2, r3, #3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3208      	adds	r2, #8
 8001c32:	69b9      	ldr	r1, [r7, #24]
 8001c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	2203      	movs	r2, #3
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0203 	and.w	r2, r3, #3
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 80ae 	beq.w	8001dd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b5c      	ldr	r3, [pc, #368]	; (8001df0 <HAL_GPIO_Init+0x2fc>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	4a5b      	ldr	r2, [pc, #364]	; (8001df0 <HAL_GPIO_Init+0x2fc>)
 8001c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c88:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8a:	4b59      	ldr	r3, [pc, #356]	; (8001df0 <HAL_GPIO_Init+0x2fc>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c96:	4a57      	ldr	r2, [pc, #348]	; (8001df4 <HAL_GPIO_Init+0x300>)
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	089b      	lsrs	r3, r3, #2
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	220f      	movs	r2, #15
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4e      	ldr	r2, [pc, #312]	; (8001df8 <HAL_GPIO_Init+0x304>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d025      	beq.n	8001d0e <HAL_GPIO_Init+0x21a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a4d      	ldr	r2, [pc, #308]	; (8001dfc <HAL_GPIO_Init+0x308>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d01f      	beq.n	8001d0a <HAL_GPIO_Init+0x216>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a4c      	ldr	r2, [pc, #304]	; (8001e00 <HAL_GPIO_Init+0x30c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d019      	beq.n	8001d06 <HAL_GPIO_Init+0x212>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4b      	ldr	r2, [pc, #300]	; (8001e04 <HAL_GPIO_Init+0x310>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d013      	beq.n	8001d02 <HAL_GPIO_Init+0x20e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a4a      	ldr	r2, [pc, #296]	; (8001e08 <HAL_GPIO_Init+0x314>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d00d      	beq.n	8001cfe <HAL_GPIO_Init+0x20a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a49      	ldr	r2, [pc, #292]	; (8001e0c <HAL_GPIO_Init+0x318>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d007      	beq.n	8001cfa <HAL_GPIO_Init+0x206>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a48      	ldr	r2, [pc, #288]	; (8001e10 <HAL_GPIO_Init+0x31c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d101      	bne.n	8001cf6 <HAL_GPIO_Init+0x202>
 8001cf2:	2306      	movs	r3, #6
 8001cf4:	e00c      	b.n	8001d10 <HAL_GPIO_Init+0x21c>
 8001cf6:	2307      	movs	r3, #7
 8001cf8:	e00a      	b.n	8001d10 <HAL_GPIO_Init+0x21c>
 8001cfa:	2305      	movs	r3, #5
 8001cfc:	e008      	b.n	8001d10 <HAL_GPIO_Init+0x21c>
 8001cfe:	2304      	movs	r3, #4
 8001d00:	e006      	b.n	8001d10 <HAL_GPIO_Init+0x21c>
 8001d02:	2303      	movs	r3, #3
 8001d04:	e004      	b.n	8001d10 <HAL_GPIO_Init+0x21c>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e002      	b.n	8001d10 <HAL_GPIO_Init+0x21c>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <HAL_GPIO_Init+0x21c>
 8001d0e:	2300      	movs	r3, #0
 8001d10:	69fa      	ldr	r2, [r7, #28]
 8001d12:	f002 0203 	and.w	r2, r2, #3
 8001d16:	0092      	lsls	r2, r2, #2
 8001d18:	4093      	lsls	r3, r2
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d20:	4934      	ldr	r1, [pc, #208]	; (8001df4 <HAL_GPIO_Init+0x300>)
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	089b      	lsrs	r3, r3, #2
 8001d26:	3302      	adds	r3, #2
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d2e:	4b39      	ldr	r3, [pc, #228]	; (8001e14 <HAL_GPIO_Init+0x320>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d52:	4a30      	ldr	r2, [pc, #192]	; (8001e14 <HAL_GPIO_Init+0x320>)
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d58:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <HAL_GPIO_Init+0x320>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d7c:	4a25      	ldr	r2, [pc, #148]	; (8001e14 <HAL_GPIO_Init+0x320>)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d82:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <HAL_GPIO_Init+0x320>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001da6:	4a1b      	ldr	r2, [pc, #108]	; (8001e14 <HAL_GPIO_Init+0x320>)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dac:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <HAL_GPIO_Init+0x320>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dd0:	4a10      	ldr	r2, [pc, #64]	; (8001e14 <HAL_GPIO_Init+0x320>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	61fb      	str	r3, [r7, #28]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	2b0f      	cmp	r3, #15
 8001de0:	f67f ae96 	bls.w	8001b10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001de4:	bf00      	nop
 8001de6:	3724      	adds	r7, #36	; 0x24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40013800 	.word	0x40013800
 8001df8:	40020000 	.word	0x40020000
 8001dfc:	40020400 	.word	0x40020400
 8001e00:	40020800 	.word	0x40020800
 8001e04:	40020c00 	.word	0x40020c00
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40021400 	.word	0x40021400
 8001e10:	40021800 	.word	0x40021800
 8001e14:	40013c00 	.word	0x40013c00

08001e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
 8001e24:	4613      	mov	r3, r2
 8001e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e28:	787b      	ldrb	r3, [r7, #1]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e34:	e003      	b.n	8001e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	041a      	lsls	r2, r3, #16
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	619a      	str	r2, [r3, #24]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e4c:	b08f      	sub	sp, #60	; 0x3c
 8001e4e:	af0a      	add	r7, sp, #40	; 0x28
 8001e50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e116      	b.n	800208a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d106      	bne.n	8001e7c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff f9c8 	bl	800120c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2203      	movs	r2, #3
 8001e80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d102      	bne.n	8001e96 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f003 faa1 	bl	80053e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	687e      	ldr	r6, [r7, #4]
 8001ea8:	466d      	mov	r5, sp
 8001eaa:	f106 0410 	add.w	r4, r6, #16
 8001eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eba:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ebe:	1d33      	adds	r3, r6, #4
 8001ec0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ec2:	6838      	ldr	r0, [r7, #0]
 8001ec4:	f003 f978 	bl	80051b8 <USB_CoreInit>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d005      	beq.n	8001eda <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e0d7      	b.n	800208a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f003 fa8f 	bl	8005404 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73fb      	strb	r3, [r7, #15]
 8001eea:	e04a      	b.n	8001f82 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	1a9b      	subs	r3, r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	333d      	adds	r3, #61	; 0x3d
 8001efc:	2201      	movs	r2, #1
 8001efe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f00:	7bfa      	ldrb	r2, [r7, #15]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	333c      	adds	r3, #60	; 0x3c
 8001f10:	7bfa      	ldrb	r2, [r7, #15]
 8001f12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	b298      	uxth	r0, r3
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	1a9b      	subs	r3, r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	3342      	adds	r3, #66	; 0x42
 8001f28:	4602      	mov	r2, r0
 8001f2a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	1a9b      	subs	r3, r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	333f      	adds	r3, #63	; 0x3f
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f40:	7bfa      	ldrb	r2, [r7, #15]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	3344      	adds	r3, #68	; 0x44
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f54:	7bfa      	ldrb	r2, [r7, #15]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	1a9b      	subs	r3, r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	3348      	adds	r3, #72	; 0x48
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	1a9b      	subs	r3, r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	3350      	adds	r3, #80	; 0x50
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	73fb      	strb	r3, [r7, #15]
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d3af      	bcc.n	8001eec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]
 8001f90:	e044      	b.n	800201c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	1a9b      	subs	r3, r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001fba:	7bfa      	ldrb	r2, [r7, #15]
 8001fbc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fbe:	7bfa      	ldrb	r2, [r7, #15]
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fea:	7bfa      	ldrb	r2, [r7, #15]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002000:	7bfa      	ldrb	r2, [r7, #15]
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	3301      	adds	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	429a      	cmp	r2, r3
 8002024:	d3b5      	bcc.n	8001f92 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	687e      	ldr	r6, [r7, #4]
 800202e:	466d      	mov	r5, sp
 8002030:	f106 0410 	add.w	r4, r6, #16
 8002034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800203a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800203c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002040:	e885 0003 	stmia.w	r5, {r0, r1}
 8002044:	1d33      	adds	r3, r6, #4
 8002046:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002048:	6838      	ldr	r0, [r7, #0]
 800204a:	f003 fa05 	bl	8005458 <USB_DevInit>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2202      	movs	r2, #2
 8002058:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e014      	b.n	800208a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	2b01      	cmp	r3, #1
 8002076:	d102      	bne.n	800207e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f001 f891 	bl	80031a0 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f004 fa40 	bl	8006508 <USB_DevDisconnect>

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002092 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b084      	sub	sp, #16
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_PCD_Start+0x1c>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e020      	b.n	80020f0 <HAL_PCD_Start+0x5e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d109      	bne.n	80020d2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d005      	beq.n	80020d2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f003 f972 	bl	80053c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f004 f9f0 	bl	80064c6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020f8:	b590      	push	{r4, r7, lr}
 80020fa:	b08d      	sub	sp, #52	; 0x34
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002106:	6a3b      	ldr	r3, [r7, #32]
 8002108:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f004 faae 	bl	8006670 <USB_GetMode>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	f040 83ca 	bne.w	80028b0 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f004 fa12 	bl	800654a <USB_ReadInterrupts>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 83c0 	beq.w	80028ae <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f004 fa09 	bl	800654a <USB_ReadInterrupts>
 8002138:	4603      	mov	r3, r0
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b02      	cmp	r3, #2
 8002140:	d107      	bne.n	8002152 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695a      	ldr	r2, [r3, #20]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f002 0202 	and.w	r2, r2, #2
 8002150:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f004 f9f7 	bl	800654a <USB_ReadInterrupts>
 800215c:	4603      	mov	r3, r0
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	2b10      	cmp	r3, #16
 8002164:	d161      	bne.n	800222a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	699a      	ldr	r2, [r3, #24]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0210 	bic.w	r2, r2, #16
 8002174:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	f003 020f 	and.w	r2, r3, #15
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	1a9b      	subs	r3, r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	3304      	adds	r3, #4
 8002194:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	0c5b      	lsrs	r3, r3, #17
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d124      	bne.n	80021ec <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d035      	beq.n	800221a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	091b      	lsrs	r3, r3, #4
 80021b6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021bc:	b29b      	uxth	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	6a38      	ldr	r0, [r7, #32]
 80021c2:	f004 f85d 	bl	8006280 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021d2:	441a      	add	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	699a      	ldr	r2, [r3, #24]
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	091b      	lsrs	r3, r3, #4
 80021e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021e4:	441a      	add	r2, r3
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	619a      	str	r2, [r3, #24]
 80021ea:	e016      	b.n	800221a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	0c5b      	lsrs	r3, r3, #17
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	2b06      	cmp	r3, #6
 80021f6:	d110      	bne.n	800221a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021fe:	2208      	movs	r2, #8
 8002200:	4619      	mov	r1, r3
 8002202:	6a38      	ldr	r0, [r7, #32]
 8002204:	f004 f83c 	bl	8006280 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	699a      	ldr	r2, [r3, #24]
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	091b      	lsrs	r3, r3, #4
 8002210:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002214:	441a      	add	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	699a      	ldr	r2, [r3, #24]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0210 	orr.w	r2, r2, #16
 8002228:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f004 f98b 	bl	800654a <USB_ReadInterrupts>
 8002234:	4603      	mov	r3, r0
 8002236:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800223a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800223e:	d16e      	bne.n	800231e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f004 f991 	bl	8006570 <USB_ReadDevAllOutEpInterrupt>
 800224e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002250:	e062      	b.n	8002318 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	d057      	beq.n	800230c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	4611      	mov	r1, r2
 8002266:	4618      	mov	r0, r3
 8002268:	f004 f9b6 	bl	80065d8 <USB_ReadDevOutEPInterrupt>
 800226c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00c      	beq.n	8002292 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	4413      	add	r3, r2
 8002280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002284:	461a      	mov	r2, r3
 8002286:	2301      	movs	r3, #1
 8002288:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800228a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 fddd 	bl	8002e4c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00c      	beq.n	80022b6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a8:	461a      	mov	r2, r3
 80022aa:	2308      	movs	r3, #8
 80022ac:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80022ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 fed7 	bl	8003064 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	f003 0310 	and.w	r3, r3, #16
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d008      	beq.n	80022d2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022cc:	461a      	mov	r2, r3
 80022ce:	2310      	movs	r3, #16
 80022d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	f003 0320 	and.w	r3, r3, #32
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d008      	beq.n	80022ee <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e8:	461a      	mov	r2, r3
 80022ea:	2320      	movs	r3, #32
 80022ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d009      	beq.n	800230c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002304:	461a      	mov	r2, r3
 8002306:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800230a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	3301      	adds	r3, #1
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002314:	085b      	lsrs	r3, r3, #1
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231a:	2b00      	cmp	r3, #0
 800231c:	d199      	bne.n	8002252 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f004 f911 	bl	800654a <USB_ReadInterrupts>
 8002328:	4603      	mov	r3, r0
 800232a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800232e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002332:	f040 80c0 	bne.w	80024b6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f004 f932 	bl	80065a4 <USB_ReadDevAllInEpInterrupt>
 8002340:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002346:	e0b2      	b.n	80024ae <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 80a7 	beq.w	80024a2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f004 f958 	bl	8006614 <USB_ReadDevInEPInterrupt>
 8002364:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b00      	cmp	r3, #0
 800236e:	d057      	beq.n	8002420 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	2201      	movs	r2, #1
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	43db      	mvns	r3, r3
 800238a:	69f9      	ldr	r1, [r7, #28]
 800238c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002390:	4013      	ands	r3, r2
 8002392:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	4413      	add	r3, r2
 800239c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023a0:	461a      	mov	r2, r3
 80023a2:	2301      	movs	r3, #1
 80023a4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d132      	bne.n	8002414 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b2:	4613      	mov	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	1a9b      	subs	r3, r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	3348      	adds	r3, #72	; 0x48
 80023be:	6819      	ldr	r1, [r3, #0]
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	1a9b      	subs	r3, r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4403      	add	r3, r0
 80023ce:	3344      	adds	r3, #68	; 0x44
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4419      	add	r1, r3
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d8:	4613      	mov	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4403      	add	r3, r0
 80023e2:	3348      	adds	r3, #72	; 0x48
 80023e4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d113      	bne.n	8002414 <HAL_PCD_IRQHandler+0x31c>
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	3350      	adds	r3, #80	; 0x50
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d108      	bne.n	8002414 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800240c:	461a      	mov	r2, r3
 800240e:	2101      	movs	r1, #1
 8002410:	f004 f960 	bl	80066d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	b2db      	uxtb	r3, r3
 8002418:	4619      	mov	r1, r3
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fe ff77 	bl	800130e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d008      	beq.n	800243c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	4413      	add	r3, r2
 8002432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002436:	461a      	mov	r2, r3
 8002438:	2308      	movs	r3, #8
 800243a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	2b00      	cmp	r3, #0
 8002444:	d008      	beq.n	8002458 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	015a      	lsls	r2, r3, #5
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	4413      	add	r3, r2
 800244e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002452:	461a      	mov	r2, r3
 8002454:	2310      	movs	r3, #16
 8002456:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245e:	2b00      	cmp	r3, #0
 8002460:	d008      	beq.n	8002474 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	4413      	add	r3, r2
 800246a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800246e:	461a      	mov	r2, r3
 8002470:	2340      	movs	r3, #64	; 0x40
 8002472:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d008      	beq.n	8002490 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	4413      	add	r3, r2
 8002486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800248a:	461a      	mov	r2, r3
 800248c:	2302      	movs	r3, #2
 800248e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800249a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 fc48 	bl	8002d32 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	3301      	adds	r3, #1
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024aa:	085b      	lsrs	r3, r3, #1
 80024ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f47f af49 	bne.w	8002348 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f004 f845 	bl	800654a <USB_ReadInterrupts>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024ca:	d122      	bne.n	8002512 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024da:	f023 0301 	bic.w	r3, r3, #1
 80024de:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d108      	bne.n	80024fc <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024f2:	2100      	movs	r1, #0
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 fe77 	bl	80031e8 <HAL_PCDEx_LPM_Callback>
 80024fa:	e002      	b.n	8002502 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7fe ff73 	bl	80013e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695a      	ldr	r2, [r3, #20]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002510:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f004 f817 	bl	800654a <USB_ReadInterrupts>
 800251c:	4603      	mov	r3, r0
 800251e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002526:	d112      	bne.n	800254e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b01      	cmp	r3, #1
 8002536:	d102      	bne.n	800253e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7fe ff2f 	bl	800139c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695a      	ldr	r2, [r3, #20]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800254c:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f003 fff9 	bl	800654a <USB_ReadInterrupts>
 8002558:	4603      	mov	r3, r0
 800255a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800255e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002562:	d121      	bne.n	80025a8 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695a      	ldr	r2, [r3, #20]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002572:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800257a:	2b00      	cmp	r3, #0
 800257c:	d111      	bne.n	80025a2 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258c:	089b      	lsrs	r3, r3, #2
 800258e:	f003 020f 	and.w	r2, r3, #15
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002598:	2101      	movs	r1, #1
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 fe24 	bl	80031e8 <HAL_PCDEx_LPM_Callback>
 80025a0:	e002      	b.n	80025a8 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7fe fefa 	bl	800139c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f003 ffcc 	bl	800654a <USB_ReadInterrupts>
 80025b2:	4603      	mov	r3, r0
 80025b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025bc:	f040 80c7 	bne.w	800274e <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	69fa      	ldr	r2, [r7, #28]
 80025ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ce:	f023 0301 	bic.w	r3, r3, #1
 80025d2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2110      	movs	r1, #16
 80025da:	4618      	mov	r0, r3
 80025dc:	f003 f89a 	bl	8005714 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e0:	2300      	movs	r3, #0
 80025e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025e4:	e056      	b.n	8002694 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80025e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025f2:	461a      	mov	r2, r3
 80025f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025f8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80025fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	4413      	add	r3, r2
 8002602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800260a:	0151      	lsls	r1, r2, #5
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	440a      	add	r2, r1
 8002610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002614:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002618:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	4413      	add	r3, r2
 8002622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800262a:	0151      	lsls	r1, r2, #5
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	440a      	add	r2, r1
 8002630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002634:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002638:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800263a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	4413      	add	r3, r2
 8002642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002646:	461a      	mov	r2, r3
 8002648:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800264c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	4413      	add	r3, r2
 8002656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800265e:	0151      	lsls	r1, r2, #5
 8002660:	69fa      	ldr	r2, [r7, #28]
 8002662:	440a      	add	r2, r1
 8002664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002668:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800266c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800266e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	4413      	add	r3, r2
 8002676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800267e:	0151      	lsls	r1, r2, #5
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	440a      	add	r2, r1
 8002684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002688:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800268c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002690:	3301      	adds	r3, #1
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800269a:	429a      	cmp	r2, r3
 800269c:	d3a3      	bcc.n	80025e6 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	69fa      	ldr	r2, [r7, #28]
 80026a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80026b0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d016      	beq.n	80026e8 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ca:	f043 030b 	orr.w	r3, r3, #11
 80026ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	69fa      	ldr	r2, [r7, #28]
 80026dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026e0:	f043 030b 	orr.w	r3, r3, #11
 80026e4:	6453      	str	r3, [r2, #68]	; 0x44
 80026e6:	e015      	b.n	8002714 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	69fa      	ldr	r2, [r7, #28]
 80026f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026fa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80026fe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	69fa      	ldr	r2, [r7, #28]
 800270a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800270e:	f043 030b 	orr.w	r3, r3, #11
 8002712:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002722:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002726:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002738:	461a      	mov	r2, r3
 800273a:	f003 ffcb 	bl	80066d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800274c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f003 fef9 	bl	800654a <USB_ReadInterrupts>
 8002758:	4603      	mov	r3, r0
 800275a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800275e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002762:	d124      	bne.n	80027ae <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f003 ff8f 	bl	800668c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f003 f82f 	bl	80057d6 <USB_GetDevSpeed>
 8002778:	4603      	mov	r3, r0
 800277a:	461a      	mov	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681c      	ldr	r4, [r3, #0]
 8002784:	f000 fefa 	bl	800357c <HAL_RCC_GetHCLKFreq>
 8002788:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800278e:	b2db      	uxtb	r3, r3
 8002790:	461a      	mov	r2, r3
 8002792:	4620      	mov	r0, r4
 8002794:	f002 fd72 	bl	800527c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7fe fde0 	bl	800135e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80027ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f003 fec9 	bl	800654a <USB_ReadInterrupts>
 80027b8:	4603      	mov	r3, r0
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d10a      	bne.n	80027d8 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7fe fdbd 	bl	8001342 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f002 0208 	and.w	r2, r2, #8
 80027d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f003 feb4 	bl	800654a <USB_ReadInterrupts>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027ec:	d10f      	bne.n	800280e <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	4619      	mov	r1, r3
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7fe fe15 	bl	8001428 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695a      	ldr	r2, [r3, #20]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800280c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f003 fe99 	bl	800654a <USB_ReadInterrupts>
 8002818:	4603      	mov	r3, r0
 800281a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800281e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002822:	d10f      	bne.n	8002844 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	b2db      	uxtb	r3, r3
 800282c:	4619      	mov	r1, r3
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7fe fde8 	bl	8001404 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002842:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f003 fe7e 	bl	800654a <USB_ReadInterrupts>
 800284e:	4603      	mov	r3, r0
 8002850:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002858:	d10a      	bne.n	8002870 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fe fdf6 	bl	800144c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695a      	ldr	r2, [r3, #20]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800286e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f003 fe68 	bl	800654a <USB_ReadInterrupts>
 800287a:	4603      	mov	r3, r0
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b04      	cmp	r3, #4
 8002882:	d115      	bne.n	80028b0 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fe fde6 	bl	8001468 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6859      	ldr	r1, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	e000      	b.n	80028b0 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80028ae:	bf00      	nop
    }
  }
}
 80028b0:	3734      	adds	r7, #52	; 0x34
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd90      	pop	{r4, r7, pc}

080028b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	460b      	mov	r3, r1
 80028c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_PCD_SetAddress+0x1a>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e013      	b.n	80028f8 <HAL_PCD_SetAddress+0x42>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	78fa      	ldrb	r2, [r7, #3]
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f003 fdc6 	bl	800647a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	4608      	mov	r0, r1
 800290a:	4611      	mov	r1, r2
 800290c:	461a      	mov	r2, r3
 800290e:	4603      	mov	r3, r0
 8002910:	70fb      	strb	r3, [r7, #3]
 8002912:	460b      	mov	r3, r1
 8002914:	803b      	strh	r3, [r7, #0]
 8002916:	4613      	mov	r3, r2
 8002918:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800291e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002922:	2b00      	cmp	r3, #0
 8002924:	da0f      	bge.n	8002946 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002926:	78fb      	ldrb	r3, [r7, #3]
 8002928:	f003 020f 	and.w	r2, r3, #15
 800292c:	4613      	mov	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	3338      	adds	r3, #56	; 0x38
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	3304      	adds	r3, #4
 800293c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2201      	movs	r2, #1
 8002942:	705a      	strb	r2, [r3, #1]
 8002944:	e00f      	b.n	8002966 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002946:	78fb      	ldrb	r3, [r7, #3]
 8002948:	f003 020f 	and.w	r2, r3, #15
 800294c:	4613      	mov	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	4413      	add	r3, r2
 800295c:	3304      	adds	r3, #4
 800295e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	f003 030f 	and.w	r3, r3, #15
 800296c:	b2da      	uxtb	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002972:	883a      	ldrh	r2, [r7, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	78ba      	ldrb	r2, [r7, #2]
 800297c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	785b      	ldrb	r3, [r3, #1]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d004      	beq.n	8002990 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002990:	78bb      	ldrb	r3, [r7, #2]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d102      	bne.n	800299c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_PCD_EP_Open+0xaa>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e00e      	b.n	80029c8 <HAL_PCD_EP_Open+0xc8>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68f9      	ldr	r1, [r7, #12]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f002 ff31 	bl	8005820 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80029c6:	7afb      	ldrb	r3, [r7, #11]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	da0f      	bge.n	8002a04 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	f003 020f 	and.w	r2, r3, #15
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	1a9b      	subs	r3, r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	3338      	adds	r3, #56	; 0x38
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	4413      	add	r3, r2
 80029f8:	3304      	adds	r3, #4
 80029fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2201      	movs	r2, #1
 8002a00:	705a      	strb	r2, [r3, #1]
 8002a02:	e00f      	b.n	8002a24 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	f003 020f 	and.w	r2, r3, #15
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	4413      	add	r3, r2
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_PCD_EP_Close+0x6e>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e00e      	b.n	8002a5c <HAL_PCD_EP_Close+0x8c>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68f9      	ldr	r1, [r7, #12]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f002 ff6f 	bl	8005930 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	460b      	mov	r3, r1
 8002a72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a74:	7afb      	ldrb	r3, [r7, #11]
 8002a76:	f003 020f 	and.w	r2, r3, #15
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	1a9b      	subs	r3, r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	4413      	add	r3, r2
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aa6:	7afb      	ldrb	r3, [r7, #11]
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d102      	bne.n	8002ac0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ac0:	7afb      	ldrb	r3, [r7, #11]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	6979      	ldr	r1, [r7, #20]
 8002ad8:	f003 fa4a 	bl	8005f70 <USB_EP0StartXfer>
 8002adc:	e008      	b.n	8002af0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	6979      	ldr	r1, [r7, #20]
 8002aec:	f002 fffc 	bl	8005ae8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	460b      	mov	r3, r1
 8002b04:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b06:	78fb      	ldrb	r3, [r7, #3]
 8002b08:	f003 020f 	and.w	r2, r3, #15
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002b1c:	681b      	ldr	r3, [r3, #0]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b086      	sub	sp, #24
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	603b      	str	r3, [r7, #0]
 8002b36:	460b      	mov	r3, r1
 8002b38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b3a:	7afb      	ldrb	r3, [r7, #11]
 8002b3c:	f003 020f 	and.w	r2, r3, #15
 8002b40:	4613      	mov	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	3338      	adds	r3, #56	; 0x38
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3304      	adds	r3, #4
 8002b50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2200      	movs	r2, #0
 8002b62:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2201      	movs	r2, #1
 8002b68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b6a:	7afb      	ldrb	r3, [r7, #11]
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d102      	bne.n	8002b84 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b84:	7afb      	ldrb	r3, [r7, #11]
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	461a      	mov	r2, r3
 8002b9a:	6979      	ldr	r1, [r7, #20]
 8002b9c:	f003 f9e8 	bl	8005f70 <USB_EP0StartXfer>
 8002ba0:	e008      	b.n	8002bb4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	461a      	mov	r2, r3
 8002bae:	6979      	ldr	r1, [r7, #20]
 8002bb0:	f002 ff9a 	bl	8005ae8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bca:	78fb      	ldrb	r3, [r7, #3]
 8002bcc:	f003 020f 	and.w	r2, r3, #15
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d901      	bls.n	8002bdc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e050      	b.n	8002c7e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	da0f      	bge.n	8002c04 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	f003 020f 	and.w	r2, r3, #15
 8002bea:	4613      	mov	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	3338      	adds	r3, #56	; 0x38
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	705a      	strb	r2, [r3, #1]
 8002c02:	e00d      	b.n	8002c20 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c04:	78fa      	ldrb	r2, [r7, #3]
 8002c06:	4613      	mov	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	1a9b      	subs	r3, r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	4413      	add	r3, r2
 8002c16:	3304      	adds	r3, #4
 8002c18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_PCD_EP_SetStall+0x82>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e01e      	b.n	8002c7e <HAL_PCD_EP_SetStall+0xc0>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68f9      	ldr	r1, [r7, #12]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f003 fb3f 	bl	80062d2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10a      	bne.n	8002c74 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	b2d9      	uxtb	r1, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c6e:	461a      	mov	r2, r3
 8002c70:	f003 fd30 	bl	80066d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b084      	sub	sp, #16
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	f003 020f 	and.w	r2, r3, #15
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d901      	bls.n	8002ca4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e042      	b.n	8002d2a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	da0f      	bge.n	8002ccc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	f003 020f 	and.w	r2, r3, #15
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	1a9b      	subs	r3, r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	3338      	adds	r3, #56	; 0x38
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	705a      	strb	r2, [r3, #1]
 8002cca:	e00f      	b.n	8002cec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	f003 020f 	and.w	r2, r3, #15
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_PCD_EP_ClrStall+0x86>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e00e      	b.n	8002d2a <HAL_PCD_EP_ClrStall+0xa4>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68f9      	ldr	r1, [r7, #12]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f003 fb47 	bl	80063ae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b08a      	sub	sp, #40	; 0x28
 8002d36:	af02      	add	r7, sp, #8
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	3338      	adds	r3, #56	; 0x38
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	3304      	adds	r3, #4
 8002d58:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	699a      	ldr	r2, [r3, #24]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d901      	bls.n	8002d6a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e06c      	b.n	8002e44 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d902      	bls.n	8002d86 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3303      	adds	r3, #3
 8002d8a:	089b      	lsrs	r3, r3, #2
 8002d8c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d8e:	e02b      	b.n	8002de8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	695a      	ldr	r2, [r3, #20]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	69fa      	ldr	r2, [r7, #28]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d902      	bls.n	8002dac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	3303      	adds	r3, #3
 8002db0:	089b      	lsrs	r3, r3, #2
 8002db2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	68d9      	ldr	r1, [r3, #12]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	4603      	mov	r3, r0
 8002dca:	6978      	ldr	r0, [r7, #20]
 8002dcc:	f003 fa23 	bl	8006216 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	441a      	add	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	699a      	ldr	r2, [r3, #24]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	441a      	add	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d809      	bhi.n	8002e12 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d203      	bcs.n	8002e12 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1be      	bne.n	8002d90 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d811      	bhi.n	8002e42 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	2201      	movs	r2, #1
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	6939      	ldr	r1, [r7, #16]
 8002e3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e3e:	4013      	ands	r3, r2
 8002e40:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3720      	adds	r7, #32
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	333c      	adds	r3, #60	; 0x3c
 8002e64:	3304      	adds	r3, #4
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	f040 80a0 	bne.w	8002fc4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d015      	beq.n	8002eba <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4a72      	ldr	r2, [pc, #456]	; (800305c <PCD_EP_OutXfrComplete_int+0x210>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	f240 80dd 	bls.w	8003052 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 80d7 	beq.w	8003052 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eb6:	6093      	str	r3, [r2, #8]
 8002eb8:	e0cb      	b.n	8003052 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f003 0320 	and.w	r3, r3, #32
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d009      	beq.n	8002ed8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	2320      	movs	r3, #32
 8002ed4:	6093      	str	r3, [r2, #8]
 8002ed6:	e0bc      	b.n	8003052 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f040 80b7 	bne.w	8003052 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4a5d      	ldr	r2, [pc, #372]	; (800305c <PCD_EP_OutXfrComplete_int+0x210>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d90f      	bls.n	8002f0c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00a      	beq.n	8002f0c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f02:	461a      	mov	r2, r3
 8002f04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f08:	6093      	str	r3, [r2, #8]
 8002f0a:	e0a2      	b.n	8003052 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	4613      	mov	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	1a9b      	subs	r3, r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f1e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	0159      	lsls	r1, r3, #5
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	440b      	add	r3, r1
 8002f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002f32:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	1a9b      	subs	r3, r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4403      	add	r3, r0
 8002f42:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002f46:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	1a9b      	subs	r3, r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f5a:	6819      	ldr	r1, [r3, #0]
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4403      	add	r3, r0
 8002f6a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4419      	add	r1, r3
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	4613      	mov	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4403      	add	r3, r0
 8002f80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f84:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d114      	bne.n	8002fb6 <PCD_EP_OutXfrComplete_int+0x16a>
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d108      	bne.n	8002fb6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fae:	461a      	mov	r2, r3
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	f003 fb8f 	bl	80066d4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	4619      	mov	r1, r3
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7fe f98b 	bl	80012d8 <HAL_PCD_DataOutStageCallback>
 8002fc2:	e046      	b.n	8003052 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4a26      	ldr	r2, [pc, #152]	; (8003060 <PCD_EP_OutXfrComplete_int+0x214>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d124      	bne.n	8003016 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fe8:	6093      	str	r3, [r2, #8]
 8002fea:	e032      	b.n	8003052 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d008      	beq.n	8003008 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	015a      	lsls	r2, r3, #5
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003002:	461a      	mov	r2, r3
 8003004:	2320      	movs	r3, #32
 8003006:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	4619      	mov	r1, r3
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fe f962 	bl	80012d8 <HAL_PCD_DataOutStageCallback>
 8003014:	e01d      	b.n	8003052 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d114      	bne.n	8003046 <PCD_EP_OutXfrComplete_int+0x1fa>
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	4613      	mov	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d108      	bne.n	8003046 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800303e:	461a      	mov	r2, r3
 8003040:	2100      	movs	r1, #0
 8003042:	f003 fb47 	bl	80066d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	4619      	mov	r1, r3
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7fe f943 	bl	80012d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	4f54300a 	.word	0x4f54300a
 8003060:	4f54310a 	.word	0x4f54310a

08003064 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	333c      	adds	r3, #60	; 0x3c
 800307c:	3304      	adds	r3, #4
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4413      	add	r3, r2
 800308a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4a15      	ldr	r2, [pc, #84]	; (80030ec <PCD_EP_OutSetupPacket_int+0x88>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d90e      	bls.n	80030b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d009      	beq.n	80030b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b0:	461a      	mov	r2, r3
 80030b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7fe f8fb 	bl	80012b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <PCD_EP_OutSetupPacket_int+0x88>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d90c      	bls.n	80030e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d108      	bne.n	80030e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80030d8:	461a      	mov	r2, r3
 80030da:	2101      	movs	r1, #1
 80030dc:	f003 fafa 	bl	80066d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	4f54300a 	.word	0x4f54300a

080030f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	70fb      	strb	r3, [r7, #3]
 80030fc:	4613      	mov	r3, r2
 80030fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d107      	bne.n	800311e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800310e:	883b      	ldrh	r3, [r7, #0]
 8003110:	0419      	lsls	r1, r3, #16
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	430a      	orrs	r2, r1
 800311a:	629a      	str	r2, [r3, #40]	; 0x28
 800311c:	e028      	b.n	8003170 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003124:	0c1b      	lsrs	r3, r3, #16
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	4413      	add	r3, r2
 800312a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800312c:	2300      	movs	r3, #0
 800312e:	73fb      	strb	r3, [r7, #15]
 8003130:	e00d      	b.n	800314e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	3340      	adds	r3, #64	; 0x40
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	0c1b      	lsrs	r3, r3, #16
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	4413      	add	r3, r2
 8003146:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	3301      	adds	r3, #1
 800314c:	73fb      	strb	r3, [r7, #15]
 800314e:	7bfa      	ldrb	r2, [r7, #15]
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	3b01      	subs	r3, #1
 8003154:	429a      	cmp	r2, r3
 8003156:	d3ec      	bcc.n	8003132 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003158:	883b      	ldrh	r3, [r7, #0]
 800315a:	0418      	lsls	r0, r3, #16
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6819      	ldr	r1, [r3, #0]
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	3b01      	subs	r3, #1
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	4302      	orrs	r2, r0
 8003168:	3340      	adds	r3, #64	; 0x40
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	460b      	mov	r3, r1
 8003188:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	887a      	ldrh	r2, [r7, #2]
 8003190:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d2:	f043 0303 	orr.w	r3, r3, #3
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0cc      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003214:	4b68      	ldr	r3, [pc, #416]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d90c      	bls.n	800323c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	4b65      	ldr	r3, [pc, #404]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322a:	4b63      	ldr	r3, [pc, #396]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0b8      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d020      	beq.n	800328a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003254:	4b59      	ldr	r3, [pc, #356]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	4a58      	ldr	r2, [pc, #352]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800325e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800326c:	4b53      	ldr	r3, [pc, #332]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	4a52      	ldr	r2, [pc, #328]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003276:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003278:	4b50      	ldr	r3, [pc, #320]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	494d      	ldr	r1, [pc, #308]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d044      	beq.n	8003320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	4b47      	ldr	r3, [pc, #284]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d119      	bne.n	80032de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e07f      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d003      	beq.n	80032be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d107      	bne.n	80032ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032be:	4b3f      	ldr	r3, [pc, #252]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e06f      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ce:	4b3b      	ldr	r3, [pc, #236]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e067      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032de:	4b37      	ldr	r3, [pc, #220]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f023 0203 	bic.w	r2, r3, #3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	4934      	ldr	r1, [pc, #208]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032f0:	f7fe face 	bl	8001890 <HAL_GetTick>
 80032f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f6:	e00a      	b.n	800330e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f8:	f7fe faca 	bl	8001890 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	f241 3288 	movw	r2, #5000	; 0x1388
 8003306:	4293      	cmp	r3, r2
 8003308:	d901      	bls.n	800330e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e04f      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330e:	4b2b      	ldr	r3, [pc, #172]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 020c 	and.w	r2, r3, #12
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	429a      	cmp	r2, r3
 800331e:	d1eb      	bne.n	80032f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003320:	4b25      	ldr	r3, [pc, #148]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d20c      	bcs.n	8003348 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332e:	4b22      	ldr	r3, [pc, #136]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003336:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e032      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003354:	4b19      	ldr	r3, [pc, #100]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	4916      	ldr	r1, [pc, #88]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d009      	beq.n	8003386 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003372:	4b12      	ldr	r3, [pc, #72]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	490e      	ldr	r1, [pc, #56]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	4313      	orrs	r3, r2
 8003384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003386:	f000 f821 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 800338a:	4601      	mov	r1, r0
 800338c:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	091b      	lsrs	r3, r3, #4
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	4a0a      	ldr	r2, [pc, #40]	; (80033c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003398:	5cd3      	ldrb	r3, [r2, r3]
 800339a:	fa21 f303 	lsr.w	r3, r1, r3
 800339e:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 80033a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033a2:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fd fb68 	bl	8000a7c <HAL_InitTick>

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40023c00 	.word	0x40023c00
 80033bc:	40023800 	.word	0x40023800
 80033c0:	0800968c 	.word	0x0800968c
 80033c4:	20000074 	.word	0x20000074
 80033c8:	20000078 	.word	0x20000078

080033cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	607b      	str	r3, [r7, #4]
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	2300      	movs	r3, #0
 80033dc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033e2:	4b63      	ldr	r3, [pc, #396]	; (8003570 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d007      	beq.n	80033fe <HAL_RCC_GetSysClockFreq+0x32>
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d008      	beq.n	8003404 <HAL_RCC_GetSysClockFreq+0x38>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f040 80b4 	bne.w	8003560 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033f8:	4b5e      	ldr	r3, [pc, #376]	; (8003574 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80033fa:	60bb      	str	r3, [r7, #8]
       break;
 80033fc:	e0b3      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033fe:	4b5e      	ldr	r3, [pc, #376]	; (8003578 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003400:	60bb      	str	r3, [r7, #8]
      break;
 8003402:	e0b0      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003404:	4b5a      	ldr	r3, [pc, #360]	; (8003570 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800340c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800340e:	4b58      	ldr	r3, [pc, #352]	; (8003570 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d04a      	beq.n	80034b0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800341a:	4b55      	ldr	r3, [pc, #340]	; (8003570 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	099b      	lsrs	r3, r3, #6
 8003420:	f04f 0400 	mov.w	r4, #0
 8003424:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	ea03 0501 	and.w	r5, r3, r1
 8003430:	ea04 0602 	and.w	r6, r4, r2
 8003434:	4629      	mov	r1, r5
 8003436:	4632      	mov	r2, r6
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	f04f 0400 	mov.w	r4, #0
 8003440:	0154      	lsls	r4, r2, #5
 8003442:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003446:	014b      	lsls	r3, r1, #5
 8003448:	4619      	mov	r1, r3
 800344a:	4622      	mov	r2, r4
 800344c:	1b49      	subs	r1, r1, r5
 800344e:	eb62 0206 	sbc.w	r2, r2, r6
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	f04f 0400 	mov.w	r4, #0
 800345a:	0194      	lsls	r4, r2, #6
 800345c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003460:	018b      	lsls	r3, r1, #6
 8003462:	1a5b      	subs	r3, r3, r1
 8003464:	eb64 0402 	sbc.w	r4, r4, r2
 8003468:	f04f 0100 	mov.w	r1, #0
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	00e2      	lsls	r2, r4, #3
 8003472:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003476:	00d9      	lsls	r1, r3, #3
 8003478:	460b      	mov	r3, r1
 800347a:	4614      	mov	r4, r2
 800347c:	195b      	adds	r3, r3, r5
 800347e:	eb44 0406 	adc.w	r4, r4, r6
 8003482:	f04f 0100 	mov.w	r1, #0
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	0262      	lsls	r2, r4, #9
 800348c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003490:	0259      	lsls	r1, r3, #9
 8003492:	460b      	mov	r3, r1
 8003494:	4614      	mov	r4, r2
 8003496:	4618      	mov	r0, r3
 8003498:	4621      	mov	r1, r4
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f04f 0400 	mov.w	r4, #0
 80034a0:	461a      	mov	r2, r3
 80034a2:	4623      	mov	r3, r4
 80034a4:	f7fc febc 	bl	8000220 <__aeabi_uldivmod>
 80034a8:	4603      	mov	r3, r0
 80034aa:	460c      	mov	r4, r1
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	e049      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034b0:	4b2f      	ldr	r3, [pc, #188]	; (8003570 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	099b      	lsrs	r3, r3, #6
 80034b6:	f04f 0400 	mov.w	r4, #0
 80034ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	ea03 0501 	and.w	r5, r3, r1
 80034c6:	ea04 0602 	and.w	r6, r4, r2
 80034ca:	4629      	mov	r1, r5
 80034cc:	4632      	mov	r2, r6
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	f04f 0400 	mov.w	r4, #0
 80034d6:	0154      	lsls	r4, r2, #5
 80034d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034dc:	014b      	lsls	r3, r1, #5
 80034de:	4619      	mov	r1, r3
 80034e0:	4622      	mov	r2, r4
 80034e2:	1b49      	subs	r1, r1, r5
 80034e4:	eb62 0206 	sbc.w	r2, r2, r6
 80034e8:	f04f 0300 	mov.w	r3, #0
 80034ec:	f04f 0400 	mov.w	r4, #0
 80034f0:	0194      	lsls	r4, r2, #6
 80034f2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034f6:	018b      	lsls	r3, r1, #6
 80034f8:	1a5b      	subs	r3, r3, r1
 80034fa:	eb64 0402 	sbc.w	r4, r4, r2
 80034fe:	f04f 0100 	mov.w	r1, #0
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	00e2      	lsls	r2, r4, #3
 8003508:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800350c:	00d9      	lsls	r1, r3, #3
 800350e:	460b      	mov	r3, r1
 8003510:	4614      	mov	r4, r2
 8003512:	195b      	adds	r3, r3, r5
 8003514:	eb44 0406 	adc.w	r4, r4, r6
 8003518:	f04f 0100 	mov.w	r1, #0
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	02a2      	lsls	r2, r4, #10
 8003522:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003526:	0299      	lsls	r1, r3, #10
 8003528:	460b      	mov	r3, r1
 800352a:	4614      	mov	r4, r2
 800352c:	4618      	mov	r0, r3
 800352e:	4621      	mov	r1, r4
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f04f 0400 	mov.w	r4, #0
 8003536:	461a      	mov	r2, r3
 8003538:	4623      	mov	r3, r4
 800353a:	f7fc fe71 	bl	8000220 <__aeabi_uldivmod>
 800353e:	4603      	mov	r3, r0
 8003540:	460c      	mov	r4, r1
 8003542:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003544:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	0c1b      	lsrs	r3, r3, #16
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	3301      	adds	r3, #1
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	fbb2 f3f3 	udiv	r3, r2, r3
 800355c:	60bb      	str	r3, [r7, #8]
      break;
 800355e:	e002      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003560:	4b04      	ldr	r3, [pc, #16]	; (8003574 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003562:	60bb      	str	r3, [r7, #8]
      break;
 8003564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003566:	68bb      	ldr	r3, [r7, #8]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003570:	40023800 	.word	0x40023800
 8003574:	00f42400 	.word	0x00f42400
 8003578:	007a1200 	.word	0x007a1200

0800357c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003580:	4b03      	ldr	r3, [pc, #12]	; (8003590 <HAL_RCC_GetHCLKFreq+0x14>)
 8003582:	681b      	ldr	r3, [r3, #0]
}
 8003584:	4618      	mov	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000074 	.word	0x20000074

08003594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003598:	f7ff fff0 	bl	800357c <HAL_RCC_GetHCLKFreq>
 800359c:	4601      	mov	r1, r0
 800359e:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	0a9b      	lsrs	r3, r3, #10
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	4a03      	ldr	r2, [pc, #12]	; (80035b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035aa:	5cd3      	ldrb	r3, [r2, r3]
 80035ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40023800 	.word	0x40023800
 80035b8:	0800969c 	.word	0x0800969c

080035bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035c0:	f7ff ffdc 	bl	800357c <HAL_RCC_GetHCLKFreq>
 80035c4:	4601      	mov	r1, r0
 80035c6:	4b05      	ldr	r3, [pc, #20]	; (80035dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	0b5b      	lsrs	r3, r3, #13
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	4a03      	ldr	r2, [pc, #12]	; (80035e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035d2:	5cd3      	ldrb	r3, [r2, r3]
 80035d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035d8:	4618      	mov	r0, r3
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40023800 	.word	0x40023800
 80035e0:	0800969c 	.word	0x0800969c

080035e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	220f      	movs	r2, #15
 80035f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035f4:	4b12      	ldr	r3, [pc, #72]	; (8003640 <HAL_RCC_GetClockConfig+0x5c>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 0203 	and.w	r2, r3, #3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003600:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <HAL_RCC_GetClockConfig+0x5c>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800360c:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <HAL_RCC_GetClockConfig+0x5c>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003618:	4b09      	ldr	r3, [pc, #36]	; (8003640 <HAL_RCC_GetClockConfig+0x5c>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	08db      	lsrs	r3, r3, #3
 800361e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003626:	4b07      	ldr	r3, [pc, #28]	; (8003644 <HAL_RCC_GetClockConfig+0x60>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 020f 	and.w	r2, r3, #15
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	601a      	str	r2, [r3, #0]
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40023800 	.word	0x40023800
 8003644:	40023c00 	.word	0x40023c00

08003648 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	d010      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800366c:	4b7a      	ldr	r3, [pc, #488]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800366e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003672:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	4977      	ldr	r1, [pc, #476]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 800368a:	2301      	movs	r3, #1
 800368c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d010      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800369a:	4b6f      	ldr	r3, [pc, #444]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800369c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036a0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	496b      	ldr	r1, [pc, #428]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80036b8:	2301      	movs	r3, #1
 80036ba:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d022      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80036c8:	4b63      	ldr	r3, [pc, #396]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80036ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d6:	4960      	ldr	r1, [pc, #384]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 80036e6:	2301      	movs	r3, #1
 80036e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036f2:	d10c      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80036f4:	4b58      	ldr	r3, [pc, #352]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80036f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036fa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	3b01      	subs	r3, #1
 8003704:	021b      	lsls	r3, r3, #8
 8003706:	4954      	ldr	r1, [pc, #336]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d022      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 800371a:	4b4f      	ldr	r3, [pc, #316]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800371c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003720:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003728:	494b      	ldr	r1, [pc, #300]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003738:	2301      	movs	r3, #1
 800373a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003740:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003744:	d10c      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8003746:	4b44      	ldr	r3, [pc, #272]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800374c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	3b01      	subs	r3, #1
 8003756:	021b      	lsls	r3, r3, #8
 8003758:	493f      	ldr	r1, [pc, #252]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800375a:	4313      	orrs	r3, r2
 800375c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0308 	and.w	r3, r3, #8
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 808a 	beq.w	8003882 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	4b39      	ldr	r3, [pc, #228]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	4a38      	ldr	r2, [pc, #224]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800377c:	6413      	str	r3, [r2, #64]	; 0x40
 800377e:	4b36      	ldr	r3, [pc, #216]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800378a:	4b34      	ldr	r3, [pc, #208]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a33      	ldr	r2, [pc, #204]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8003790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003794:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003796:	f7fe f87b 	bl	8001890 <HAL_GetTick>
 800379a:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800379c:	e008      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800379e:	f7fe f877 	bl	8001890 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e1d1      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037b0:	4b2a      	ldr	r3, [pc, #168]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0f0      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037bc:	4b26      	ldr	r3, [pc, #152]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c4:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d02f      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d028      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037da:	4b1f      	ldr	r3, [pc, #124]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80037dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e2:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037e4:	4b1e      	ldr	r3, [pc, #120]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80037e6:	2201      	movs	r2, #1
 80037e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037ea:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80037f0:	4a19      	ldr	r2, [pc, #100]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037f6:	4b18      	ldr	r3, [pc, #96]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d114      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003802:	f7fe f845 	bl	8001890 <HAL_GetTick>
 8003806:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003808:	e00a      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800380a:	f7fe f841 	bl	8001890 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	f241 3288 	movw	r2, #5000	; 0x1388
 8003818:	4293      	cmp	r3, r2
 800381a:	d901      	bls.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e199      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003820:	4b0d      	ldr	r3, [pc, #52]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0ee      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003834:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003838:	d114      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800383a:	4b07      	ldr	r3, [pc, #28]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800384a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800384e:	4902      	ldr	r1, [pc, #8]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003850:	4313      	orrs	r3, r2
 8003852:	608b      	str	r3, [r1, #8]
 8003854:	e00c      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8003856:	bf00      	nop
 8003858:	40023800 	.word	0x40023800
 800385c:	40007000 	.word	0x40007000
 8003860:	42470e40 	.word	0x42470e40
 8003864:	4b89      	ldr	r3, [pc, #548]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4a88      	ldr	r2, [pc, #544]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800386a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800386e:	6093      	str	r3, [r2, #8]
 8003870:	4b86      	ldr	r3, [pc, #536]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003872:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387c:	4983      	ldr	r1, [pc, #524]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800387e:	4313      	orrs	r3, r2
 8003880:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	d004      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8003894:	4b7e      	ldr	r3, [pc, #504]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8003896:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80038a4:	4b79      	ldr	r3, [pc, #484]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80038a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b2:	4976      	ldr	r1, [pc, #472]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d011      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038c6:	4b71      	ldr	r3, [pc, #452]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80038c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	496d      	ldr	r1, [pc, #436]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038e4:	d101      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 80038e6:	2301      	movs	r3, #1
 80038e8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80038f6:	4b65      	ldr	r3, [pc, #404]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80038f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038fc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003904:	4961      	ldr	r1, [pc, #388]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d004      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b80      	cmp	r3, #128	; 0x80
 8003918:	f040 80c6 	bne.w	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800391c:	4b5d      	ldr	r3, [pc, #372]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003922:	f7fd ffb5 	bl	8001890 <HAL_GetTick>
 8003926:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003928:	e008      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800392a:	f7fd ffb1 	bl	8001890 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e10b      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800393c:	4b53      	ldr	r3, [pc, #332]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1f0      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8003948:	4a53      	ldr	r2, [pc, #332]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800394e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d023      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d019      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003980:	2b00      	cmp	r3, #0
 8003982:	d004      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003988:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800398c:	d00e      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003996:	2b00      	cmp	r3, #0
 8003998:	d019      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d115      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x386>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039aa:	d110      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	019b      	lsls	r3, r3, #6
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	061b      	lsls	r3, r3, #24
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	071b      	lsls	r3, r3, #28
 80039c6:	4931      	ldr	r1, [pc, #196]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d026      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d122      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039f6:	4b25      	ldr	r3, [pc, #148]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80039f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039fc:	0e1b      	lsrs	r3, r3, #24
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	019b      	lsls	r3, r3, #6
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	061b      	lsls	r3, r3, #24
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	071b      	lsls	r3, r3, #28
 8003a1c:	491b      	ldr	r1, [pc, #108]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8003a24:	4b19      	ldr	r3, [pc, #100]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a2a:	f023 021f 	bic.w	r2, r3, #31
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	4915      	ldr	r1, [pc, #84]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d010      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	019b      	lsls	r3, r3, #6
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	061b      	lsls	r3, r3, #24
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	071b      	lsls	r3, r3, #28
 8003a62:	490a      	ldr	r1, [pc, #40]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a70:	f7fd ff0e 	bl	8001890 <HAL_GetTick>
 8003a74:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a76:	e011      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a78:	f7fd ff0a 	bl	8001890 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d90a      	bls.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e064      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003a8a:	bf00      	nop
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	424711e0 	.word	0x424711e0
 8003a94:	42470068 	.word	0x42470068
 8003a98:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a9c:	4b2f      	ldr	r3, [pc, #188]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0e7      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00a      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ab4:	4b29      	ldr	r3, [pc, #164]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac2:	4926      	ldr	r1, [pc, #152]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ad6:	4b21      	ldr	r3, [pc, #132]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003adc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae4:	491d      	ldr	r1, [pc, #116]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00a      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003af8:	4b18      	ldr	r3, [pc, #96]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003afe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	4915      	ldr	r1, [pc, #84]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8003b1a:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b20:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	490c      	ldr	r1, [pc, #48]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00a      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b3c:	4b07      	ldr	r3, [pc, #28]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b42:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4a:	4904      	ldr	r1, [pc, #16]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3720      	adds	r7, #32
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40023800 	.word	0x40023800

08003b60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d075      	beq.n	8003c64 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b78:	4ba2      	ldr	r3, [pc, #648]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 030c 	and.w	r3, r3, #12
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d00c      	beq.n	8003b9e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b84:	4b9f      	ldr	r3, [pc, #636]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d112      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b90:	4b9c      	ldr	r3, [pc, #624]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b9c:	d10b      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b9e:	4b99      	ldr	r3, [pc, #612]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d05b      	beq.n	8003c62 <HAL_RCC_OscConfig+0x102>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d157      	bne.n	8003c62 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e20b      	b.n	8003fce <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bbe:	d106      	bne.n	8003bce <HAL_RCC_OscConfig+0x6e>
 8003bc0:	4b90      	ldr	r3, [pc, #576]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a8f      	ldr	r2, [pc, #572]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	e01d      	b.n	8003c0a <HAL_RCC_OscConfig+0xaa>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bd6:	d10c      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x92>
 8003bd8:	4b8a      	ldr	r3, [pc, #552]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a89      	ldr	r2, [pc, #548]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003bde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	4b87      	ldr	r3, [pc, #540]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a86      	ldr	r2, [pc, #536]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	e00b      	b.n	8003c0a <HAL_RCC_OscConfig+0xaa>
 8003bf2:	4b84      	ldr	r3, [pc, #528]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a83      	ldr	r2, [pc, #524]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	4b81      	ldr	r3, [pc, #516]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a80      	ldr	r2, [pc, #512]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c08:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d013      	beq.n	8003c3a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c12:	f7fd fe3d 	bl	8001890 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c1a:	f7fd fe39 	bl	8001890 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b64      	cmp	r3, #100	; 0x64
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e1d0      	b.n	8003fce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2c:	4b75      	ldr	r3, [pc, #468]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0f0      	beq.n	8003c1a <HAL_RCC_OscConfig+0xba>
 8003c38:	e014      	b.n	8003c64 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3a:	f7fd fe29 	bl	8001890 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c42:	f7fd fe25 	bl	8001890 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b64      	cmp	r3, #100	; 0x64
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e1bc      	b.n	8003fce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c54:	4b6b      	ldr	r3, [pc, #428]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1f0      	bne.n	8003c42 <HAL_RCC_OscConfig+0xe2>
 8003c60:	e000      	b.n	8003c64 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c62:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d063      	beq.n	8003d38 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c70:	4b64      	ldr	r3, [pc, #400]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 030c 	and.w	r3, r3, #12
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00b      	beq.n	8003c94 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c7c:	4b61      	ldr	r3, [pc, #388]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d11c      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c88:	4b5e      	ldr	r3, [pc, #376]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d116      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c94:	4b5b      	ldr	r3, [pc, #364]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <HAL_RCC_OscConfig+0x14c>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e190      	b.n	8003fce <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cac:	4b55      	ldr	r3, [pc, #340]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4952      	ldr	r1, [pc, #328]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc0:	e03a      	b.n	8003d38 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d020      	beq.n	8003d0c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cca:	4b4f      	ldr	r3, [pc, #316]	; (8003e08 <HAL_RCC_OscConfig+0x2a8>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd0:	f7fd fdde 	bl	8001890 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cd8:	f7fd fdda 	bl	8001890 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e171      	b.n	8003fce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cea:	4b46      	ldr	r3, [pc, #280]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf6:	4b43      	ldr	r3, [pc, #268]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	493f      	ldr	r1, [pc, #252]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	600b      	str	r3, [r1, #0]
 8003d0a:	e015      	b.n	8003d38 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d0c:	4b3e      	ldr	r3, [pc, #248]	; (8003e08 <HAL_RCC_OscConfig+0x2a8>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d12:	f7fd fdbd 	bl	8001890 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d1a:	f7fd fdb9 	bl	8001890 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e150      	b.n	8003fce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d2c:	4b35      	ldr	r3, [pc, #212]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f0      	bne.n	8003d1a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d030      	beq.n	8003da6 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d016      	beq.n	8003d7a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d4c:	4b2f      	ldr	r3, [pc, #188]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003d4e:	2201      	movs	r2, #1
 8003d50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d52:	f7fd fd9d 	bl	8001890 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d5a:	f7fd fd99 	bl	8001890 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e130      	b.n	8003fce <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d6c:	4b25      	ldr	r3, [pc, #148]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0f0      	beq.n	8003d5a <HAL_RCC_OscConfig+0x1fa>
 8003d78:	e015      	b.n	8003da6 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d7a:	4b24      	ldr	r3, [pc, #144]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d80:	f7fd fd86 	bl	8001890 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d88:	f7fd fd82 	bl	8001890 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e119      	b.n	8003fce <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d9a:	4b1a      	ldr	r3, [pc, #104]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f0      	bne.n	8003d88 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 809f 	beq.w	8003ef2 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003db4:	2300      	movs	r3, #0
 8003db6:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003db8:	4b12      	ldr	r3, [pc, #72]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10f      	bne.n	8003de4 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	4b0e      	ldr	r3, [pc, #56]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	4a0d      	ldr	r2, [pc, #52]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <HAL_RCC_OscConfig+0x2a4>)
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003de0:	2301      	movs	r3, #1
 8003de2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de4:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <HAL_RCC_OscConfig+0x2b0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d120      	bne.n	8003e32 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003df0:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <HAL_RCC_OscConfig+0x2b0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a06      	ldr	r2, [pc, #24]	; (8003e10 <HAL_RCC_OscConfig+0x2b0>)
 8003df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dfc:	f7fd fd48 	bl	8001890 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e02:	e010      	b.n	8003e26 <HAL_RCC_OscConfig+0x2c6>
 8003e04:	40023800 	.word	0x40023800
 8003e08:	42470000 	.word	0x42470000
 8003e0c:	42470e80 	.word	0x42470e80
 8003e10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e14:	f7fd fd3c 	bl	8001890 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e0d3      	b.n	8003fce <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e26:	4b6c      	ldr	r3, [pc, #432]	; (8003fd8 <HAL_RCC_OscConfig+0x478>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d106      	bne.n	8003e48 <HAL_RCC_OscConfig+0x2e8>
 8003e3a:	4b68      	ldr	r3, [pc, #416]	; (8003fdc <HAL_RCC_OscConfig+0x47c>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3e:	4a67      	ldr	r2, [pc, #412]	; (8003fdc <HAL_RCC_OscConfig+0x47c>)
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	6713      	str	r3, [r2, #112]	; 0x70
 8003e46:	e01c      	b.n	8003e82 <HAL_RCC_OscConfig+0x322>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b05      	cmp	r3, #5
 8003e4e:	d10c      	bne.n	8003e6a <HAL_RCC_OscConfig+0x30a>
 8003e50:	4b62      	ldr	r3, [pc, #392]	; (8003fdc <HAL_RCC_OscConfig+0x47c>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	4a61      	ldr	r2, [pc, #388]	; (8003fdc <HAL_RCC_OscConfig+0x47c>)
 8003e56:	f043 0304 	orr.w	r3, r3, #4
 8003e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5c:	4b5f      	ldr	r3, [pc, #380]	; (8003fdc <HAL_RCC_OscConfig+0x47c>)
 8003e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e60:	4a5e      	ldr	r2, [pc, #376]	; (8003fdc <HAL_RCC_OscConfig+0x47c>)
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	6713      	str	r3, [r2, #112]	; 0x70
 8003e68:	e00b      	b.n	8003e82 <HAL_RCC_OscConfig+0x322>
 8003e6a:	4b5c      	ldr	r3, [pc, #368]	; (8003fdc <HAL_RCC_OscConfig+0x47c>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	4a5b      	ldr	r2, [pc, #364]	; (8003fdc <HAL_RCC_OscConfig+0x47c>)
 8003e70:	f023 0301 	bic.w	r3, r3, #1
 8003e74:	6713      	str	r3, [r2, #112]	; 0x70
 8003e76:	4b59      	ldr	r3, [pc, #356]	; (8003fdc <HAL_RCC_OscConfig+0x47c>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	4a58      	ldr	r2, [pc, #352]	; (8003fdc <HAL_RCC_OscConfig+0x47c>)
 8003e7c:	f023 0304 	bic.w	r3, r3, #4
 8003e80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d015      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8a:	f7fd fd01 	bl	8001890 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e90:	e00a      	b.n	8003ea8 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e92:	f7fd fcfd 	bl	8001890 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e092      	b.n	8003fce <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea8:	4b4c      	ldr	r3, [pc, #304]	; (8003fdc <HAL_RCC_OscConfig+0x47c>)
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0ee      	beq.n	8003e92 <HAL_RCC_OscConfig+0x332>
 8003eb4:	e014      	b.n	8003ee0 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb6:	f7fd fceb 	bl	8001890 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ebc:	e00a      	b.n	8003ed4 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ebe:	f7fd fce7 	bl	8001890 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e07c      	b.n	8003fce <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed4:	4b41      	ldr	r3, [pc, #260]	; (8003fdc <HAL_RCC_OscConfig+0x47c>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1ee      	bne.n	8003ebe <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ee0:	7dfb      	ldrb	r3, [r7, #23]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d105      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ee6:	4b3d      	ldr	r3, [pc, #244]	; (8003fdc <HAL_RCC_OscConfig+0x47c>)
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	4a3c      	ldr	r2, [pc, #240]	; (8003fdc <HAL_RCC_OscConfig+0x47c>)
 8003eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ef0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d068      	beq.n	8003fcc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003efa:	4b38      	ldr	r3, [pc, #224]	; (8003fdc <HAL_RCC_OscConfig+0x47c>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 030c 	and.w	r3, r3, #12
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d060      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d145      	bne.n	8003f9a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f0e:	4b34      	ldr	r3, [pc, #208]	; (8003fe0 <HAL_RCC_OscConfig+0x480>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f14:	f7fd fcbc 	bl	8001890 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f1c:	f7fd fcb8 	bl	8001890 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e04f      	b.n	8003fce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f2e:	4b2b      	ldr	r3, [pc, #172]	; (8003fdc <HAL_RCC_OscConfig+0x47c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1f0      	bne.n	8003f1c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69da      	ldr	r2, [r3, #28]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	019b      	lsls	r3, r3, #6
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	085b      	lsrs	r3, r3, #1
 8003f52:	3b01      	subs	r3, #1
 8003f54:	041b      	lsls	r3, r3, #16
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	061b      	lsls	r3, r3, #24
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f64:	071b      	lsls	r3, r3, #28
 8003f66:	491d      	ldr	r1, [pc, #116]	; (8003fdc <HAL_RCC_OscConfig+0x47c>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f6c:	4b1c      	ldr	r3, [pc, #112]	; (8003fe0 <HAL_RCC_OscConfig+0x480>)
 8003f6e:	2201      	movs	r2, #1
 8003f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f72:	f7fd fc8d 	bl	8001890 <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f7a:	f7fd fc89 	bl	8001890 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e020      	b.n	8003fce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8c:	4b13      	ldr	r3, [pc, #76]	; (8003fdc <HAL_RCC_OscConfig+0x47c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0f0      	beq.n	8003f7a <HAL_RCC_OscConfig+0x41a>
 8003f98:	e018      	b.n	8003fcc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f9a:	4b11      	ldr	r3, [pc, #68]	; (8003fe0 <HAL_RCC_OscConfig+0x480>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7fd fc76 	bl	8001890 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa8:	f7fd fc72 	bl	8001890 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e009      	b.n	8003fce <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fba:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <HAL_RCC_OscConfig+0x47c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1f0      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x448>
 8003fc6:	e001      	b.n	8003fcc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e000      	b.n	8003fce <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40007000 	.word	0x40007000
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	42470060 	.word	0x42470060

08003fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e01d      	b.n	8004032 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f815 	bl	800403a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3304      	adds	r3, #4
 8004020:	4619      	mov	r1, r3
 8004022:	4610      	mov	r0, r2
 8004024:	f000 f968 	bl	80042f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800404e:	b480      	push	{r7}
 8004050:	b085      	sub	sp, #20
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0201 	orr.w	r2, r2, #1
 8004064:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b06      	cmp	r3, #6
 8004076:	d007      	beq.n	8004088 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d122      	bne.n	80040f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d11b      	bne.n	80040f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f06f 0202 	mvn.w	r2, #2
 80040c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f8ee 	bl	80042ba <HAL_TIM_IC_CaptureCallback>
 80040de:	e005      	b.n	80040ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f8e0 	bl	80042a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f8f1 	bl	80042ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d122      	bne.n	8004146 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b04      	cmp	r3, #4
 800410c:	d11b      	bne.n	8004146 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f06f 0204 	mvn.w	r2, #4
 8004116:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f8c4 	bl	80042ba <HAL_TIM_IC_CaptureCallback>
 8004132:	e005      	b.n	8004140 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f8b6 	bl	80042a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f8c7 	bl	80042ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b08      	cmp	r3, #8
 8004152:	d122      	bne.n	800419a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b08      	cmp	r3, #8
 8004160:	d11b      	bne.n	800419a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f06f 0208 	mvn.w	r2, #8
 800416a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2204      	movs	r2, #4
 8004170:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f89a 	bl	80042ba <HAL_TIM_IC_CaptureCallback>
 8004186:	e005      	b.n	8004194 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f88c 	bl	80042a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f89d 	bl	80042ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	f003 0310 	and.w	r3, r3, #16
 80041a4:	2b10      	cmp	r3, #16
 80041a6:	d122      	bne.n	80041ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f003 0310 	and.w	r3, r3, #16
 80041b2:	2b10      	cmp	r3, #16
 80041b4:	d11b      	bne.n	80041ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f06f 0210 	mvn.w	r2, #16
 80041be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2208      	movs	r2, #8
 80041c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f870 	bl	80042ba <HAL_TIM_IC_CaptureCallback>
 80041da:	e005      	b.n	80041e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f862 	bl	80042a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f873 	bl	80042ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d10e      	bne.n	800421a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b01      	cmp	r3, #1
 8004208:	d107      	bne.n	800421a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f06f 0201 	mvn.w	r2, #1
 8004212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7fc fbef 	bl	80009f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004224:	2b80      	cmp	r3, #128	; 0x80
 8004226:	d10e      	bne.n	8004246 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004232:	2b80      	cmp	r3, #128	; 0x80
 8004234:	d107      	bne.n	8004246 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800423e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f903 	bl	800444c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004250:	2b40      	cmp	r3, #64	; 0x40
 8004252:	d10e      	bne.n	8004272 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425e:	2b40      	cmp	r3, #64	; 0x40
 8004260:	d107      	bne.n	8004272 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800426a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f838 	bl	80042e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f003 0320 	and.w	r3, r3, #32
 800427c:	2b20      	cmp	r3, #32
 800427e:	d10e      	bne.n	800429e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b20      	cmp	r3, #32
 800428c:	d107      	bne.n	800429e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f06f 0220 	mvn.w	r2, #32
 8004296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f8cd 	bl	8004438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
	...

080042f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a40      	ldr	r2, [pc, #256]	; (800440c <TIM_Base_SetConfig+0x114>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d013      	beq.n	8004338 <TIM_Base_SetConfig+0x40>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004316:	d00f      	beq.n	8004338 <TIM_Base_SetConfig+0x40>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a3d      	ldr	r2, [pc, #244]	; (8004410 <TIM_Base_SetConfig+0x118>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d00b      	beq.n	8004338 <TIM_Base_SetConfig+0x40>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a3c      	ldr	r2, [pc, #240]	; (8004414 <TIM_Base_SetConfig+0x11c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d007      	beq.n	8004338 <TIM_Base_SetConfig+0x40>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a3b      	ldr	r2, [pc, #236]	; (8004418 <TIM_Base_SetConfig+0x120>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d003      	beq.n	8004338 <TIM_Base_SetConfig+0x40>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a3a      	ldr	r2, [pc, #232]	; (800441c <TIM_Base_SetConfig+0x124>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d108      	bne.n	800434a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	4313      	orrs	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a2f      	ldr	r2, [pc, #188]	; (800440c <TIM_Base_SetConfig+0x114>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d02b      	beq.n	80043aa <TIM_Base_SetConfig+0xb2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004358:	d027      	beq.n	80043aa <TIM_Base_SetConfig+0xb2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a2c      	ldr	r2, [pc, #176]	; (8004410 <TIM_Base_SetConfig+0x118>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d023      	beq.n	80043aa <TIM_Base_SetConfig+0xb2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a2b      	ldr	r2, [pc, #172]	; (8004414 <TIM_Base_SetConfig+0x11c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d01f      	beq.n	80043aa <TIM_Base_SetConfig+0xb2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a2a      	ldr	r2, [pc, #168]	; (8004418 <TIM_Base_SetConfig+0x120>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d01b      	beq.n	80043aa <TIM_Base_SetConfig+0xb2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a29      	ldr	r2, [pc, #164]	; (800441c <TIM_Base_SetConfig+0x124>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d017      	beq.n	80043aa <TIM_Base_SetConfig+0xb2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a28      	ldr	r2, [pc, #160]	; (8004420 <TIM_Base_SetConfig+0x128>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d013      	beq.n	80043aa <TIM_Base_SetConfig+0xb2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a27      	ldr	r2, [pc, #156]	; (8004424 <TIM_Base_SetConfig+0x12c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00f      	beq.n	80043aa <TIM_Base_SetConfig+0xb2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a26      	ldr	r2, [pc, #152]	; (8004428 <TIM_Base_SetConfig+0x130>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00b      	beq.n	80043aa <TIM_Base_SetConfig+0xb2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a25      	ldr	r2, [pc, #148]	; (800442c <TIM_Base_SetConfig+0x134>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d007      	beq.n	80043aa <TIM_Base_SetConfig+0xb2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a24      	ldr	r2, [pc, #144]	; (8004430 <TIM_Base_SetConfig+0x138>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d003      	beq.n	80043aa <TIM_Base_SetConfig+0xb2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a23      	ldr	r2, [pc, #140]	; (8004434 <TIM_Base_SetConfig+0x13c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d108      	bne.n	80043bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a0a      	ldr	r2, [pc, #40]	; (800440c <TIM_Base_SetConfig+0x114>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d003      	beq.n	80043f0 <TIM_Base_SetConfig+0xf8>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a0c      	ldr	r2, [pc, #48]	; (800441c <TIM_Base_SetConfig+0x124>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d103      	bne.n	80043f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	615a      	str	r2, [r3, #20]
}
 80043fe:	bf00      	nop
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	40010000 	.word	0x40010000
 8004410:	40000400 	.word	0x40000400
 8004414:	40000800 	.word	0x40000800
 8004418:	40000c00 	.word	0x40000c00
 800441c:	40010400 	.word	0x40010400
 8004420:	40014000 	.word	0x40014000
 8004424:	40014400 	.word	0x40014400
 8004428:	40014800 	.word	0x40014800
 800442c:	40001800 	.word	0x40001800
 8004430:	40001c00 	.word	0x40001c00
 8004434:	40002000 	.word	0x40002000

08004438 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e03f      	b.n	80044f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d106      	bne.n	800448c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fc fc1a 	bl	8000cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2224      	movs	r2, #36	; 0x24
 8004490:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 faef 	bl	8004a88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	691a      	ldr	r2, [r3, #16]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695a      	ldr	r2, [r3, #20]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b085      	sub	sp, #20
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	4613      	mov	r3, r2
 8004506:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b20      	cmp	r3, #32
 8004512:	d130      	bne.n	8004576 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <HAL_UART_Transmit_IT+0x26>
 800451a:	88fb      	ldrh	r3, [r7, #6]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e029      	b.n	8004578 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800452a:	2b01      	cmp	r3, #1
 800452c:	d101      	bne.n	8004532 <HAL_UART_Transmit_IT+0x38>
 800452e:	2302      	movs	r3, #2
 8004530:	e022      	b.n	8004578 <HAL_UART_Transmit_IT+0x7e>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	88fa      	ldrh	r2, [r7, #6]
 8004544:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	88fa      	ldrh	r2, [r7, #6]
 800454a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2221      	movs	r2, #33	; 0x21
 8004556:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004570:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	e000      	b.n	8004578 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004576:	2302      	movs	r3, #2
  }
}
 8004578:	4618      	mov	r0, r3
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	4613      	mov	r3, r2
 8004590:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b20      	cmp	r3, #32
 800459c:	d140      	bne.n	8004620 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <HAL_UART_Receive_IT+0x26>
 80045a4:	88fb      	ldrh	r3, [r7, #6]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e039      	b.n	8004622 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_UART_Receive_IT+0x38>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e032      	b.n	8004622 <HAL_UART_Receive_IT+0x9e>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	88fa      	ldrh	r2, [r7, #6]
 80045ce:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	88fa      	ldrh	r2, [r7, #6]
 80045d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2222      	movs	r2, #34	; 0x22
 80045e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045fa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695a      	ldr	r2, [r3, #20]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0220 	orr.w	r2, r2, #32
 800461a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	e000      	b.n	8004622 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004620:	2302      	movs	r3, #2
  }
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
	...

08004630 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b088      	sub	sp, #32
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004650:	2300      	movs	r3, #0
 8004652:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004654:	2300      	movs	r3, #0
 8004656:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10d      	bne.n	8004682 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	2b00      	cmp	r3, #0
 800466e:	d008      	beq.n	8004682 <HAL_UART_IRQHandler+0x52>
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f982 	bl	8004984 <UART_Receive_IT>
      return;
 8004680:	e0d1      	b.n	8004826 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 80b0 	beq.w	80047ea <HAL_UART_IRQHandler+0x1ba>
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d105      	bne.n	80046a0 <HAL_UART_IRQHandler+0x70>
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 80a5 	beq.w	80047ea <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <HAL_UART_IRQHandler+0x90>
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b8:	f043 0201 	orr.w	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <HAL_UART_IRQHandler+0xb0>
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d005      	beq.n	80046e0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d8:	f043 0202 	orr.w	r2, r3, #2
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <HAL_UART_IRQHandler+0xd0>
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f8:	f043 0204 	orr.w	r2, r3, #4
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00f      	beq.n	800472a <HAL_UART_IRQHandler+0xfa>
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	f003 0320 	and.w	r3, r3, #32
 8004710:	2b00      	cmp	r3, #0
 8004712:	d104      	bne.n	800471e <HAL_UART_IRQHandler+0xee>
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d005      	beq.n	800472a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004722:	f043 0208 	orr.w	r2, r3, #8
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472e:	2b00      	cmp	r3, #0
 8004730:	d078      	beq.n	8004824 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	f003 0320 	and.w	r3, r3, #32
 8004738:	2b00      	cmp	r3, #0
 800473a:	d007      	beq.n	800474c <HAL_UART_IRQHandler+0x11c>
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	f003 0320 	and.w	r3, r3, #32
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f91c 	bl	8004984 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004756:	2b40      	cmp	r3, #64	; 0x40
 8004758:	bf0c      	ite	eq
 800475a:	2301      	moveq	r3, #1
 800475c:	2300      	movne	r3, #0
 800475e:	b2db      	uxtb	r3, r3
 8004760:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b00      	cmp	r3, #0
 800476c:	d102      	bne.n	8004774 <HAL_UART_IRQHandler+0x144>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d031      	beq.n	80047d8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f865 	bl	8004844 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004784:	2b40      	cmp	r3, #64	; 0x40
 8004786:	d123      	bne.n	80047d0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695a      	ldr	r2, [r3, #20]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004796:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479c:	2b00      	cmp	r3, #0
 800479e:	d013      	beq.n	80047c8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a4:	4a21      	ldr	r2, [pc, #132]	; (800482c <HAL_UART_IRQHandler+0x1fc>)
 80047a6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fd f97f 	bl	8001ab0 <HAL_DMA_Abort_IT>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d016      	beq.n	80047e6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047c2:	4610      	mov	r0, r2
 80047c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c6:	e00e      	b.n	80047e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f831 	bl	8004830 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ce:	e00a      	b.n	80047e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f82d 	bl	8004830 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d6:	e006      	b.n	80047e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f829 	bl	8004830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80047e4:	e01e      	b.n	8004824 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e6:	bf00      	nop
    return;
 80047e8:	e01c      	b.n	8004824 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d008      	beq.n	8004806 <HAL_UART_IRQHandler+0x1d6>
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f852 	bl	80048a8 <UART_Transmit_IT>
    return;
 8004804:	e00f      	b.n	8004826 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <HAL_UART_IRQHandler+0x1f6>
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004816:	2b00      	cmp	r3, #0
 8004818:	d005      	beq.n	8004826 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f89a 	bl	8004954 <UART_EndTransmit_IT>
    return;
 8004820:	bf00      	nop
 8004822:	e000      	b.n	8004826 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004824:	bf00      	nop
  }
}
 8004826:	3720      	adds	r7, #32
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	08004881 	.word	0x08004881

08004830 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800485a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695a      	ldr	r2, [r3, #20]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0201 	bic.w	r2, r2, #1
 800486a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f7ff ffc8 	bl	8004830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048a0:	bf00      	nop
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b21      	cmp	r3, #33	; 0x21
 80048ba:	d144      	bne.n	8004946 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c4:	d11a      	bne.n	80048fc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	461a      	mov	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048da:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d105      	bne.n	80048f0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	1c9a      	adds	r2, r3, #2
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	621a      	str	r2, [r3, #32]
 80048ee:	e00e      	b.n	800490e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	621a      	str	r2, [r3, #32]
 80048fa:	e008      	b.n	800490e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	1c59      	adds	r1, r3, #1
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6211      	str	r1, [r2, #32]
 8004906:	781a      	ldrb	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29b      	uxth	r3, r3
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	4619      	mov	r1, r3
 800491c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10f      	bne.n	8004942 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68da      	ldr	r2, [r3, #12]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004930:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68da      	ldr	r2, [r3, #12]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004940:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	e000      	b.n	8004948 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004946:	2302      	movs	r3, #2
  }
}
 8004948:	4618      	mov	r0, r3
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800496a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7fb febb 	bl	80006f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b22      	cmp	r3, #34	; 0x22
 8004996:	d171      	bne.n	8004a7c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a0:	d123      	bne.n	80049ea <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10e      	bne.n	80049ce <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c6:	1c9a      	adds	r2, r3, #2
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	629a      	str	r2, [r3, #40]	; 0x28
 80049cc:	e029      	b.n	8004a22 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	b29a      	uxth	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e2:	1c5a      	adds	r2, r3, #1
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	629a      	str	r2, [r3, #40]	; 0x28
 80049e8:	e01b      	b.n	8004a22 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10a      	bne.n	8004a08 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6858      	ldr	r0, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fc:	1c59      	adds	r1, r3, #1
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6291      	str	r1, [r2, #40]	; 0x28
 8004a02:	b2c2      	uxtb	r2, r0
 8004a04:	701a      	strb	r2, [r3, #0]
 8004a06:	e00c      	b.n	8004a22 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a14:	1c58      	adds	r0, r3, #1
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	6288      	str	r0, [r1, #40]	; 0x28
 8004a1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	4619      	mov	r1, r3
 8004a30:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d120      	bne.n	8004a78 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68da      	ldr	r2, [r3, #12]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0220 	bic.w	r2, r2, #32
 8004a44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695a      	ldr	r2, [r3, #20]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0201 	bic.w	r2, r2, #1
 8004a64:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fb fe62 	bl	8000738 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004a74:	2300      	movs	r3, #0
 8004a76:	e002      	b.n	8004a7e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	e000      	b.n	8004a7e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004a7c:	2302      	movs	r3, #2
  }
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a8c:	b085      	sub	sp, #20
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004aca:	f023 030c 	bic.w	r3, r3, #12
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6812      	ldr	r2, [r2, #0]
 8004ad2:	68f9      	ldr	r1, [r7, #12]
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	699a      	ldr	r2, [r3, #24]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af6:	f040 8199 	bne.w	8004e2c <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4ac6      	ldr	r2, [pc, #792]	; (8004e18 <UART_SetConfig+0x390>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00f      	beq.n	8004b24 <UART_SetConfig+0x9c>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4ac4      	ldr	r2, [pc, #784]	; (8004e1c <UART_SetConfig+0x394>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00a      	beq.n	8004b24 <UART_SetConfig+0x9c>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4ac3      	ldr	r2, [pc, #780]	; (8004e20 <UART_SetConfig+0x398>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d005      	beq.n	8004b24 <UART_SetConfig+0x9c>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4ac1      	ldr	r2, [pc, #772]	; (8004e24 <UART_SetConfig+0x39c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	f040 80bd 	bne.w	8004c9e <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b24:	f7fe fd4a 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 8004b28:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	461d      	mov	r5, r3
 8004b2e:	f04f 0600 	mov.w	r6, #0
 8004b32:	46a8      	mov	r8, r5
 8004b34:	46b1      	mov	r9, r6
 8004b36:	eb18 0308 	adds.w	r3, r8, r8
 8004b3a:	eb49 0409 	adc.w	r4, r9, r9
 8004b3e:	4698      	mov	r8, r3
 8004b40:	46a1      	mov	r9, r4
 8004b42:	eb18 0805 	adds.w	r8, r8, r5
 8004b46:	eb49 0906 	adc.w	r9, r9, r6
 8004b4a:	f04f 0100 	mov.w	r1, #0
 8004b4e:	f04f 0200 	mov.w	r2, #0
 8004b52:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b56:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b5a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004b5e:	4688      	mov	r8, r1
 8004b60:	4691      	mov	r9, r2
 8004b62:	eb18 0005 	adds.w	r0, r8, r5
 8004b66:	eb49 0106 	adc.w	r1, r9, r6
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	461d      	mov	r5, r3
 8004b70:	f04f 0600 	mov.w	r6, #0
 8004b74:	196b      	adds	r3, r5, r5
 8004b76:	eb46 0406 	adc.w	r4, r6, r6
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	4623      	mov	r3, r4
 8004b7e:	f7fb fb4f 	bl	8000220 <__aeabi_uldivmod>
 8004b82:	4603      	mov	r3, r0
 8004b84:	460c      	mov	r4, r1
 8004b86:	461a      	mov	r2, r3
 8004b88:	4ba7      	ldr	r3, [pc, #668]	; (8004e28 <UART_SetConfig+0x3a0>)
 8004b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	461d      	mov	r5, r3
 8004b98:	f04f 0600 	mov.w	r6, #0
 8004b9c:	46a9      	mov	r9, r5
 8004b9e:	46b2      	mov	sl, r6
 8004ba0:	eb19 0309 	adds.w	r3, r9, r9
 8004ba4:	eb4a 040a 	adc.w	r4, sl, sl
 8004ba8:	4699      	mov	r9, r3
 8004baa:	46a2      	mov	sl, r4
 8004bac:	eb19 0905 	adds.w	r9, r9, r5
 8004bb0:	eb4a 0a06 	adc.w	sl, sl, r6
 8004bb4:	f04f 0100 	mov.w	r1, #0
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bc8:	4689      	mov	r9, r1
 8004bca:	4692      	mov	sl, r2
 8004bcc:	eb19 0005 	adds.w	r0, r9, r5
 8004bd0:	eb4a 0106 	adc.w	r1, sl, r6
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	461d      	mov	r5, r3
 8004bda:	f04f 0600 	mov.w	r6, #0
 8004bde:	196b      	adds	r3, r5, r5
 8004be0:	eb46 0406 	adc.w	r4, r6, r6
 8004be4:	461a      	mov	r2, r3
 8004be6:	4623      	mov	r3, r4
 8004be8:	f7fb fb1a 	bl	8000220 <__aeabi_uldivmod>
 8004bec:	4603      	mov	r3, r0
 8004bee:	460c      	mov	r4, r1
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	4b8d      	ldr	r3, [pc, #564]	; (8004e28 <UART_SetConfig+0x3a0>)
 8004bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	2164      	movs	r1, #100	; 0x64
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	3332      	adds	r3, #50	; 0x32
 8004c06:	4a88      	ldr	r2, [pc, #544]	; (8004e28 <UART_SetConfig+0x3a0>)
 8004c08:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0c:	095b      	lsrs	r3, r3, #5
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c14:	4498      	add	r8, r3
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	461d      	mov	r5, r3
 8004c1a:	f04f 0600 	mov.w	r6, #0
 8004c1e:	46a9      	mov	r9, r5
 8004c20:	46b2      	mov	sl, r6
 8004c22:	eb19 0309 	adds.w	r3, r9, r9
 8004c26:	eb4a 040a 	adc.w	r4, sl, sl
 8004c2a:	4699      	mov	r9, r3
 8004c2c:	46a2      	mov	sl, r4
 8004c2e:	eb19 0905 	adds.w	r9, r9, r5
 8004c32:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c36:	f04f 0100 	mov.w	r1, #0
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c4a:	4689      	mov	r9, r1
 8004c4c:	4692      	mov	sl, r2
 8004c4e:	eb19 0005 	adds.w	r0, r9, r5
 8004c52:	eb4a 0106 	adc.w	r1, sl, r6
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	461d      	mov	r5, r3
 8004c5c:	f04f 0600 	mov.w	r6, #0
 8004c60:	196b      	adds	r3, r5, r5
 8004c62:	eb46 0406 	adc.w	r4, r6, r6
 8004c66:	461a      	mov	r2, r3
 8004c68:	4623      	mov	r3, r4
 8004c6a:	f7fb fad9 	bl	8000220 <__aeabi_uldivmod>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	460c      	mov	r4, r1
 8004c72:	461a      	mov	r2, r3
 8004c74:	4b6c      	ldr	r3, [pc, #432]	; (8004e28 <UART_SetConfig+0x3a0>)
 8004c76:	fba3 1302 	umull	r1, r3, r3, r2
 8004c7a:	095b      	lsrs	r3, r3, #5
 8004c7c:	2164      	movs	r1, #100	; 0x64
 8004c7e:	fb01 f303 	mul.w	r3, r1, r3
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	3332      	adds	r3, #50	; 0x32
 8004c88:	4a67      	ldr	r2, [pc, #412]	; (8004e28 <UART_SetConfig+0x3a0>)
 8004c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8e:	095b      	lsrs	r3, r3, #5
 8004c90:	f003 0207 	and.w	r2, r3, #7
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4442      	add	r2, r8
 8004c9a:	609a      	str	r2, [r3, #8]
 8004c9c:	e27d      	b.n	800519a <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c9e:	f7fe fc79 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
 8004ca2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	461d      	mov	r5, r3
 8004ca8:	f04f 0600 	mov.w	r6, #0
 8004cac:	46a8      	mov	r8, r5
 8004cae:	46b1      	mov	r9, r6
 8004cb0:	eb18 0308 	adds.w	r3, r8, r8
 8004cb4:	eb49 0409 	adc.w	r4, r9, r9
 8004cb8:	4698      	mov	r8, r3
 8004cba:	46a1      	mov	r9, r4
 8004cbc:	eb18 0805 	adds.w	r8, r8, r5
 8004cc0:	eb49 0906 	adc.w	r9, r9, r6
 8004cc4:	f04f 0100 	mov.w	r1, #0
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004cd0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004cd4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004cd8:	4688      	mov	r8, r1
 8004cda:	4691      	mov	r9, r2
 8004cdc:	eb18 0005 	adds.w	r0, r8, r5
 8004ce0:	eb49 0106 	adc.w	r1, r9, r6
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	461d      	mov	r5, r3
 8004cea:	f04f 0600 	mov.w	r6, #0
 8004cee:	196b      	adds	r3, r5, r5
 8004cf0:	eb46 0406 	adc.w	r4, r6, r6
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	4623      	mov	r3, r4
 8004cf8:	f7fb fa92 	bl	8000220 <__aeabi_uldivmod>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	460c      	mov	r4, r1
 8004d00:	461a      	mov	r2, r3
 8004d02:	4b49      	ldr	r3, [pc, #292]	; (8004e28 <UART_SetConfig+0x3a0>)
 8004d04:	fba3 2302 	umull	r2, r3, r3, r2
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	461d      	mov	r5, r3
 8004d12:	f04f 0600 	mov.w	r6, #0
 8004d16:	46a9      	mov	r9, r5
 8004d18:	46b2      	mov	sl, r6
 8004d1a:	eb19 0309 	adds.w	r3, r9, r9
 8004d1e:	eb4a 040a 	adc.w	r4, sl, sl
 8004d22:	4699      	mov	r9, r3
 8004d24:	46a2      	mov	sl, r4
 8004d26:	eb19 0905 	adds.w	r9, r9, r5
 8004d2a:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d2e:	f04f 0100 	mov.w	r1, #0
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d42:	4689      	mov	r9, r1
 8004d44:	4692      	mov	sl, r2
 8004d46:	eb19 0005 	adds.w	r0, r9, r5
 8004d4a:	eb4a 0106 	adc.w	r1, sl, r6
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	461d      	mov	r5, r3
 8004d54:	f04f 0600 	mov.w	r6, #0
 8004d58:	196b      	adds	r3, r5, r5
 8004d5a:	eb46 0406 	adc.w	r4, r6, r6
 8004d5e:	461a      	mov	r2, r3
 8004d60:	4623      	mov	r3, r4
 8004d62:	f7fb fa5d 	bl	8000220 <__aeabi_uldivmod>
 8004d66:	4603      	mov	r3, r0
 8004d68:	460c      	mov	r4, r1
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	4b2e      	ldr	r3, [pc, #184]	; (8004e28 <UART_SetConfig+0x3a0>)
 8004d6e:	fba3 1302 	umull	r1, r3, r3, r2
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	2164      	movs	r1, #100	; 0x64
 8004d76:	fb01 f303 	mul.w	r3, r1, r3
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	3332      	adds	r3, #50	; 0x32
 8004d80:	4a29      	ldr	r2, [pc, #164]	; (8004e28 <UART_SetConfig+0x3a0>)
 8004d82:	fba2 2303 	umull	r2, r3, r2, r3
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d8e:	4498      	add	r8, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	461d      	mov	r5, r3
 8004d94:	f04f 0600 	mov.w	r6, #0
 8004d98:	46a9      	mov	r9, r5
 8004d9a:	46b2      	mov	sl, r6
 8004d9c:	eb19 0309 	adds.w	r3, r9, r9
 8004da0:	eb4a 040a 	adc.w	r4, sl, sl
 8004da4:	4699      	mov	r9, r3
 8004da6:	46a2      	mov	sl, r4
 8004da8:	eb19 0905 	adds.w	r9, r9, r5
 8004dac:	eb4a 0a06 	adc.w	sl, sl, r6
 8004db0:	f04f 0100 	mov.w	r1, #0
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dbc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004dc0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004dc4:	4689      	mov	r9, r1
 8004dc6:	4692      	mov	sl, r2
 8004dc8:	eb19 0005 	adds.w	r0, r9, r5
 8004dcc:	eb4a 0106 	adc.w	r1, sl, r6
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	461d      	mov	r5, r3
 8004dd6:	f04f 0600 	mov.w	r6, #0
 8004dda:	196b      	adds	r3, r5, r5
 8004ddc:	eb46 0406 	adc.w	r4, r6, r6
 8004de0:	461a      	mov	r2, r3
 8004de2:	4623      	mov	r3, r4
 8004de4:	f7fb fa1c 	bl	8000220 <__aeabi_uldivmod>
 8004de8:	4603      	mov	r3, r0
 8004dea:	460c      	mov	r4, r1
 8004dec:	461a      	mov	r2, r3
 8004dee:	4b0e      	ldr	r3, [pc, #56]	; (8004e28 <UART_SetConfig+0x3a0>)
 8004df0:	fba3 1302 	umull	r1, r3, r3, r2
 8004df4:	095b      	lsrs	r3, r3, #5
 8004df6:	2164      	movs	r1, #100	; 0x64
 8004df8:	fb01 f303 	mul.w	r3, r1, r3
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	3332      	adds	r3, #50	; 0x32
 8004e02:	4a09      	ldr	r2, [pc, #36]	; (8004e28 <UART_SetConfig+0x3a0>)
 8004e04:	fba2 2303 	umull	r2, r3, r2, r3
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	f003 0207 	and.w	r2, r3, #7
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4442      	add	r2, r8
 8004e14:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004e16:	e1c0      	b.n	800519a <UART_SetConfig+0x712>
 8004e18:	40011000 	.word	0x40011000
 8004e1c:	40011400 	.word	0x40011400
 8004e20:	40011800 	.word	0x40011800
 8004e24:	40011c00 	.word	0x40011c00
 8004e28:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4adc      	ldr	r2, [pc, #880]	; (80051a4 <UART_SetConfig+0x71c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00f      	beq.n	8004e56 <UART_SetConfig+0x3ce>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4adb      	ldr	r2, [pc, #876]	; (80051a8 <UART_SetConfig+0x720>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00a      	beq.n	8004e56 <UART_SetConfig+0x3ce>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4ad9      	ldr	r2, [pc, #868]	; (80051ac <UART_SetConfig+0x724>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d005      	beq.n	8004e56 <UART_SetConfig+0x3ce>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4ad8      	ldr	r2, [pc, #864]	; (80051b0 <UART_SetConfig+0x728>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	f040 80d1 	bne.w	8004ff8 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e56:	f7fe fbb1 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 8004e5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	469a      	mov	sl, r3
 8004e60:	f04f 0b00 	mov.w	fp, #0
 8004e64:	46d0      	mov	r8, sl
 8004e66:	46d9      	mov	r9, fp
 8004e68:	eb18 0308 	adds.w	r3, r8, r8
 8004e6c:	eb49 0409 	adc.w	r4, r9, r9
 8004e70:	4698      	mov	r8, r3
 8004e72:	46a1      	mov	r9, r4
 8004e74:	eb18 080a 	adds.w	r8, r8, sl
 8004e78:	eb49 090b 	adc.w	r9, r9, fp
 8004e7c:	f04f 0100 	mov.w	r1, #0
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004e88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004e8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004e90:	4688      	mov	r8, r1
 8004e92:	4691      	mov	r9, r2
 8004e94:	eb1a 0508 	adds.w	r5, sl, r8
 8004e98:	eb4b 0609 	adc.w	r6, fp, r9
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	f04f 0400 	mov.w	r4, #0
 8004eae:	0094      	lsls	r4, r2, #2
 8004eb0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004eb4:	008b      	lsls	r3, r1, #2
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	4623      	mov	r3, r4
 8004eba:	4628      	mov	r0, r5
 8004ebc:	4631      	mov	r1, r6
 8004ebe:	f7fb f9af 	bl	8000220 <__aeabi_uldivmod>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	460c      	mov	r4, r1
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	4bba      	ldr	r3, [pc, #744]	; (80051b4 <UART_SetConfig+0x72c>)
 8004eca:	fba3 2302 	umull	r2, r3, r3, r2
 8004ece:	095b      	lsrs	r3, r3, #5
 8004ed0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	469b      	mov	fp, r3
 8004ed8:	f04f 0c00 	mov.w	ip, #0
 8004edc:	46d9      	mov	r9, fp
 8004ede:	46e2      	mov	sl, ip
 8004ee0:	eb19 0309 	adds.w	r3, r9, r9
 8004ee4:	eb4a 040a 	adc.w	r4, sl, sl
 8004ee8:	4699      	mov	r9, r3
 8004eea:	46a2      	mov	sl, r4
 8004eec:	eb19 090b 	adds.w	r9, r9, fp
 8004ef0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004ef4:	f04f 0100 	mov.w	r1, #0
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f08:	4689      	mov	r9, r1
 8004f0a:	4692      	mov	sl, r2
 8004f0c:	eb1b 0509 	adds.w	r5, fp, r9
 8004f10:	eb4c 060a 	adc.w	r6, ip, sl
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	4619      	mov	r1, r3
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	f04f 0300 	mov.w	r3, #0
 8004f22:	f04f 0400 	mov.w	r4, #0
 8004f26:	0094      	lsls	r4, r2, #2
 8004f28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f2c:	008b      	lsls	r3, r1, #2
 8004f2e:	461a      	mov	r2, r3
 8004f30:	4623      	mov	r3, r4
 8004f32:	4628      	mov	r0, r5
 8004f34:	4631      	mov	r1, r6
 8004f36:	f7fb f973 	bl	8000220 <__aeabi_uldivmod>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	460c      	mov	r4, r1
 8004f3e:	461a      	mov	r2, r3
 8004f40:	4b9c      	ldr	r3, [pc, #624]	; (80051b4 <UART_SetConfig+0x72c>)
 8004f42:	fba3 1302 	umull	r1, r3, r3, r2
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	2164      	movs	r1, #100	; 0x64
 8004f4a:	fb01 f303 	mul.w	r3, r1, r3
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	3332      	adds	r3, #50	; 0x32
 8004f54:	4a97      	ldr	r2, [pc, #604]	; (80051b4 <UART_SetConfig+0x72c>)
 8004f56:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f60:	4498      	add	r8, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	469b      	mov	fp, r3
 8004f66:	f04f 0c00 	mov.w	ip, #0
 8004f6a:	46d9      	mov	r9, fp
 8004f6c:	46e2      	mov	sl, ip
 8004f6e:	eb19 0309 	adds.w	r3, r9, r9
 8004f72:	eb4a 040a 	adc.w	r4, sl, sl
 8004f76:	4699      	mov	r9, r3
 8004f78:	46a2      	mov	sl, r4
 8004f7a:	eb19 090b 	adds.w	r9, r9, fp
 8004f7e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f82:	f04f 0100 	mov.w	r1, #0
 8004f86:	f04f 0200 	mov.w	r2, #0
 8004f8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f96:	4689      	mov	r9, r1
 8004f98:	4692      	mov	sl, r2
 8004f9a:	eb1b 0509 	adds.w	r5, fp, r9
 8004f9e:	eb4c 060a 	adc.w	r6, ip, sl
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	f04f 0400 	mov.w	r4, #0
 8004fb4:	0094      	lsls	r4, r2, #2
 8004fb6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004fba:	008b      	lsls	r3, r1, #2
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	4623      	mov	r3, r4
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	4631      	mov	r1, r6
 8004fc4:	f7fb f92c 	bl	8000220 <__aeabi_uldivmod>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	460c      	mov	r4, r1
 8004fcc:	461a      	mov	r2, r3
 8004fce:	4b79      	ldr	r3, [pc, #484]	; (80051b4 <UART_SetConfig+0x72c>)
 8004fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	2164      	movs	r1, #100	; 0x64
 8004fd8:	fb01 f303 	mul.w	r3, r1, r3
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	3332      	adds	r3, #50	; 0x32
 8004fe2:	4a74      	ldr	r2, [pc, #464]	; (80051b4 <UART_SetConfig+0x72c>)
 8004fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe8:	095b      	lsrs	r3, r3, #5
 8004fea:	f003 020f 	and.w	r2, r3, #15
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4442      	add	r2, r8
 8004ff4:	609a      	str	r2, [r3, #8]
 8004ff6:	e0d0      	b.n	800519a <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ff8:	f7fe facc 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
 8004ffc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	469a      	mov	sl, r3
 8005002:	f04f 0b00 	mov.w	fp, #0
 8005006:	46d0      	mov	r8, sl
 8005008:	46d9      	mov	r9, fp
 800500a:	eb18 0308 	adds.w	r3, r8, r8
 800500e:	eb49 0409 	adc.w	r4, r9, r9
 8005012:	4698      	mov	r8, r3
 8005014:	46a1      	mov	r9, r4
 8005016:	eb18 080a 	adds.w	r8, r8, sl
 800501a:	eb49 090b 	adc.w	r9, r9, fp
 800501e:	f04f 0100 	mov.w	r1, #0
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800502a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800502e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005032:	4688      	mov	r8, r1
 8005034:	4691      	mov	r9, r2
 8005036:	eb1a 0508 	adds.w	r5, sl, r8
 800503a:	eb4b 0609 	adc.w	r6, fp, r9
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	4619      	mov	r1, r3
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	f04f 0400 	mov.w	r4, #0
 8005050:	0094      	lsls	r4, r2, #2
 8005052:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005056:	008b      	lsls	r3, r1, #2
 8005058:	461a      	mov	r2, r3
 800505a:	4623      	mov	r3, r4
 800505c:	4628      	mov	r0, r5
 800505e:	4631      	mov	r1, r6
 8005060:	f7fb f8de 	bl	8000220 <__aeabi_uldivmod>
 8005064:	4603      	mov	r3, r0
 8005066:	460c      	mov	r4, r1
 8005068:	461a      	mov	r2, r3
 800506a:	4b52      	ldr	r3, [pc, #328]	; (80051b4 <UART_SetConfig+0x72c>)
 800506c:	fba3 2302 	umull	r2, r3, r3, r2
 8005070:	095b      	lsrs	r3, r3, #5
 8005072:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	469b      	mov	fp, r3
 800507a:	f04f 0c00 	mov.w	ip, #0
 800507e:	46d9      	mov	r9, fp
 8005080:	46e2      	mov	sl, ip
 8005082:	eb19 0309 	adds.w	r3, r9, r9
 8005086:	eb4a 040a 	adc.w	r4, sl, sl
 800508a:	4699      	mov	r9, r3
 800508c:	46a2      	mov	sl, r4
 800508e:	eb19 090b 	adds.w	r9, r9, fp
 8005092:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005096:	f04f 0100 	mov.w	r1, #0
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050aa:	4689      	mov	r9, r1
 80050ac:	4692      	mov	sl, r2
 80050ae:	eb1b 0509 	adds.w	r5, fp, r9
 80050b2:	eb4c 060a 	adc.w	r6, ip, sl
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	4619      	mov	r1, r3
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	f04f 0400 	mov.w	r4, #0
 80050c8:	0094      	lsls	r4, r2, #2
 80050ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050ce:	008b      	lsls	r3, r1, #2
 80050d0:	461a      	mov	r2, r3
 80050d2:	4623      	mov	r3, r4
 80050d4:	4628      	mov	r0, r5
 80050d6:	4631      	mov	r1, r6
 80050d8:	f7fb f8a2 	bl	8000220 <__aeabi_uldivmod>
 80050dc:	4603      	mov	r3, r0
 80050de:	460c      	mov	r4, r1
 80050e0:	461a      	mov	r2, r3
 80050e2:	4b34      	ldr	r3, [pc, #208]	; (80051b4 <UART_SetConfig+0x72c>)
 80050e4:	fba3 1302 	umull	r1, r3, r3, r2
 80050e8:	095b      	lsrs	r3, r3, #5
 80050ea:	2164      	movs	r1, #100	; 0x64
 80050ec:	fb01 f303 	mul.w	r3, r1, r3
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	3332      	adds	r3, #50	; 0x32
 80050f6:	4a2f      	ldr	r2, [pc, #188]	; (80051b4 <UART_SetConfig+0x72c>)
 80050f8:	fba2 2303 	umull	r2, r3, r2, r3
 80050fc:	095b      	lsrs	r3, r3, #5
 80050fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005102:	4498      	add	r8, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	469b      	mov	fp, r3
 8005108:	f04f 0c00 	mov.w	ip, #0
 800510c:	46d9      	mov	r9, fp
 800510e:	46e2      	mov	sl, ip
 8005110:	eb19 0309 	adds.w	r3, r9, r9
 8005114:	eb4a 040a 	adc.w	r4, sl, sl
 8005118:	4699      	mov	r9, r3
 800511a:	46a2      	mov	sl, r4
 800511c:	eb19 090b 	adds.w	r9, r9, fp
 8005120:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005124:	f04f 0100 	mov.w	r1, #0
 8005128:	f04f 0200 	mov.w	r2, #0
 800512c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005130:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005134:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005138:	4689      	mov	r9, r1
 800513a:	4692      	mov	sl, r2
 800513c:	eb1b 0509 	adds.w	r5, fp, r9
 8005140:	eb4c 060a 	adc.w	r6, ip, sl
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	4619      	mov	r1, r3
 800514a:	f04f 0200 	mov.w	r2, #0
 800514e:	f04f 0300 	mov.w	r3, #0
 8005152:	f04f 0400 	mov.w	r4, #0
 8005156:	0094      	lsls	r4, r2, #2
 8005158:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800515c:	008b      	lsls	r3, r1, #2
 800515e:	461a      	mov	r2, r3
 8005160:	4623      	mov	r3, r4
 8005162:	4628      	mov	r0, r5
 8005164:	4631      	mov	r1, r6
 8005166:	f7fb f85b 	bl	8000220 <__aeabi_uldivmod>
 800516a:	4603      	mov	r3, r0
 800516c:	460c      	mov	r4, r1
 800516e:	461a      	mov	r2, r3
 8005170:	4b10      	ldr	r3, [pc, #64]	; (80051b4 <UART_SetConfig+0x72c>)
 8005172:	fba3 1302 	umull	r1, r3, r3, r2
 8005176:	095b      	lsrs	r3, r3, #5
 8005178:	2164      	movs	r1, #100	; 0x64
 800517a:	fb01 f303 	mul.w	r3, r1, r3
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	3332      	adds	r3, #50	; 0x32
 8005184:	4a0b      	ldr	r2, [pc, #44]	; (80051b4 <UART_SetConfig+0x72c>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	095b      	lsrs	r3, r3, #5
 800518c:	f003 020f 	and.w	r2, r3, #15
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4442      	add	r2, r8
 8005196:	609a      	str	r2, [r3, #8]
}
 8005198:	e7ff      	b.n	800519a <UART_SetConfig+0x712>
 800519a:	bf00      	nop
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a4:	40011000 	.word	0x40011000
 80051a8:	40011400 	.word	0x40011400
 80051ac:	40011800 	.word	0x40011800
 80051b0:	40011c00 	.word	0x40011c00
 80051b4:	51eb851f 	.word	0x51eb851f

080051b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051b8:	b084      	sub	sp, #16
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	f107 001c 	add.w	r0, r7, #28
 80051c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d122      	bne.n	8005216 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80051e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d105      	bne.n	800520a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f001 fac0 	bl	8006790 <USB_CoreReset>
 8005210:	4603      	mov	r3, r0
 8005212:	73fb      	strb	r3, [r7, #15]
 8005214:	e01a      	b.n	800524c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f001 fab4 	bl	8006790 <USB_CoreReset>
 8005228:	4603      	mov	r3, r0
 800522a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800522c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800522e:	2b00      	cmp	r3, #0
 8005230:	d106      	bne.n	8005240 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005236:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	639a      	str	r2, [r3, #56]	; 0x38
 800523e:	e005      	b.n	800524c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800524c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524e:	2b01      	cmp	r3, #1
 8005250:	d10b      	bne.n	800526a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f043 0206 	orr.w	r2, r3, #6
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f043 0220 	orr.w	r2, r3, #32
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800526a:	7bfb      	ldrb	r3, [r7, #15]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005276:	b004      	add	sp, #16
 8005278:	4770      	bx	lr
	...

0800527c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	4613      	mov	r3, r2
 8005288:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800528a:	79fb      	ldrb	r3, [r7, #7]
 800528c:	2b02      	cmp	r3, #2
 800528e:	d165      	bne.n	800535c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4a41      	ldr	r2, [pc, #260]	; (8005398 <USB_SetTurnaroundTime+0x11c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d906      	bls.n	80052a6 <USB_SetTurnaroundTime+0x2a>
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	4a40      	ldr	r2, [pc, #256]	; (800539c <USB_SetTurnaroundTime+0x120>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d802      	bhi.n	80052a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80052a0:	230f      	movs	r3, #15
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	e062      	b.n	800536c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	4a3c      	ldr	r2, [pc, #240]	; (800539c <USB_SetTurnaroundTime+0x120>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d906      	bls.n	80052bc <USB_SetTurnaroundTime+0x40>
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	4a3b      	ldr	r2, [pc, #236]	; (80053a0 <USB_SetTurnaroundTime+0x124>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d802      	bhi.n	80052bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80052b6:	230e      	movs	r3, #14
 80052b8:	617b      	str	r3, [r7, #20]
 80052ba:	e057      	b.n	800536c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4a38      	ldr	r2, [pc, #224]	; (80053a0 <USB_SetTurnaroundTime+0x124>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d906      	bls.n	80052d2 <USB_SetTurnaroundTime+0x56>
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	4a37      	ldr	r2, [pc, #220]	; (80053a4 <USB_SetTurnaroundTime+0x128>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d802      	bhi.n	80052d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80052cc:	230d      	movs	r3, #13
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	e04c      	b.n	800536c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	4a33      	ldr	r2, [pc, #204]	; (80053a4 <USB_SetTurnaroundTime+0x128>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d906      	bls.n	80052e8 <USB_SetTurnaroundTime+0x6c>
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	4a32      	ldr	r2, [pc, #200]	; (80053a8 <USB_SetTurnaroundTime+0x12c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d802      	bhi.n	80052e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80052e2:	230c      	movs	r3, #12
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	e041      	b.n	800536c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4a2f      	ldr	r2, [pc, #188]	; (80053a8 <USB_SetTurnaroundTime+0x12c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d906      	bls.n	80052fe <USB_SetTurnaroundTime+0x82>
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4a2e      	ldr	r2, [pc, #184]	; (80053ac <USB_SetTurnaroundTime+0x130>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d802      	bhi.n	80052fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80052f8:	230b      	movs	r3, #11
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	e036      	b.n	800536c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4a2a      	ldr	r2, [pc, #168]	; (80053ac <USB_SetTurnaroundTime+0x130>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d906      	bls.n	8005314 <USB_SetTurnaroundTime+0x98>
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	4a29      	ldr	r2, [pc, #164]	; (80053b0 <USB_SetTurnaroundTime+0x134>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d802      	bhi.n	8005314 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800530e:	230a      	movs	r3, #10
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	e02b      	b.n	800536c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4a26      	ldr	r2, [pc, #152]	; (80053b0 <USB_SetTurnaroundTime+0x134>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d906      	bls.n	800532a <USB_SetTurnaroundTime+0xae>
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	4a25      	ldr	r2, [pc, #148]	; (80053b4 <USB_SetTurnaroundTime+0x138>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d802      	bhi.n	800532a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005324:	2309      	movs	r3, #9
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	e020      	b.n	800536c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	4a21      	ldr	r2, [pc, #132]	; (80053b4 <USB_SetTurnaroundTime+0x138>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d906      	bls.n	8005340 <USB_SetTurnaroundTime+0xc4>
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	4a20      	ldr	r2, [pc, #128]	; (80053b8 <USB_SetTurnaroundTime+0x13c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d802      	bhi.n	8005340 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800533a:	2308      	movs	r3, #8
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	e015      	b.n	800536c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4a1d      	ldr	r2, [pc, #116]	; (80053b8 <USB_SetTurnaroundTime+0x13c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d906      	bls.n	8005356 <USB_SetTurnaroundTime+0xda>
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4a1c      	ldr	r2, [pc, #112]	; (80053bc <USB_SetTurnaroundTime+0x140>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d802      	bhi.n	8005356 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005350:	2307      	movs	r3, #7
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	e00a      	b.n	800536c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005356:	2306      	movs	r3, #6
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	e007      	b.n	800536c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800535c:	79fb      	ldrb	r3, [r7, #7]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d102      	bne.n	8005368 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005362:	2309      	movs	r3, #9
 8005364:	617b      	str	r3, [r7, #20]
 8005366:	e001      	b.n	800536c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005368:	2309      	movs	r3, #9
 800536a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	68da      	ldr	r2, [r3, #12]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	029b      	lsls	r3, r3, #10
 8005380:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005384:	431a      	orrs	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	371c      	adds	r7, #28
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	00d8acbf 	.word	0x00d8acbf
 800539c:	00e4e1bf 	.word	0x00e4e1bf
 80053a0:	00f423ff 	.word	0x00f423ff
 80053a4:	0106737f 	.word	0x0106737f
 80053a8:	011a499f 	.word	0x011a499f
 80053ac:	01312cff 	.word	0x01312cff
 80053b0:	014ca43f 	.word	0x014ca43f
 80053b4:	016e35ff 	.word	0x016e35ff
 80053b8:	01a6ab1f 	.word	0x01a6ab1f
 80053bc:	01e847ff 	.word	0x01e847ff

080053c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f043 0201 	orr.w	r2, r3, #1
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f023 0201 	bic.w	r2, r3, #1
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	460b      	mov	r3, r1
 800540e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800541c:	78fb      	ldrb	r3, [r7, #3]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d106      	bne.n	8005430 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	60da      	str	r2, [r3, #12]
 800542e:	e00b      	b.n	8005448 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005430:	78fb      	ldrb	r3, [r7, #3]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	60da      	str	r2, [r3, #12]
 8005442:	e001      	b.n	8005448 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e003      	b.n	8005450 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005448:	2032      	movs	r0, #50	; 0x32
 800544a:	f7fc fa2d 	bl	80018a8 <HAL_Delay>

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005458:	b084      	sub	sp, #16
 800545a:	b580      	push	{r7, lr}
 800545c:	b086      	sub	sp, #24
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005466:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005472:	2300      	movs	r3, #0
 8005474:	613b      	str	r3, [r7, #16]
 8005476:	e009      	b.n	800548c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	3340      	adds	r3, #64	; 0x40
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	2200      	movs	r2, #0
 8005484:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	3301      	adds	r3, #1
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	2b0e      	cmp	r3, #14
 8005490:	d9f2      	bls.n	8005478 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005494:	2b00      	cmp	r3, #0
 8005496:	d11c      	bne.n	80054d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054a6:	f043 0302 	orr.w	r3, r3, #2
 80054aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	e005      	b.n	80054de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054e4:	461a      	mov	r2, r3
 80054e6:	2300      	movs	r3, #0
 80054e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f0:	4619      	mov	r1, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f8:	461a      	mov	r2, r3
 80054fa:	680b      	ldr	r3, [r1, #0]
 80054fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005500:	2b01      	cmp	r3, #1
 8005502:	d10c      	bne.n	800551e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005506:	2b00      	cmp	r3, #0
 8005508:	d104      	bne.n	8005514 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800550a:	2100      	movs	r1, #0
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f949 	bl	80057a4 <USB_SetDevSpeed>
 8005512:	e008      	b.n	8005526 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005514:	2101      	movs	r1, #1
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f944 	bl	80057a4 <USB_SetDevSpeed>
 800551c:	e003      	b.n	8005526 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800551e:	2103      	movs	r1, #3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f93f 	bl	80057a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005526:	2110      	movs	r1, #16
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f8f3 	bl	8005714 <USB_FlushTxFifo>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f911 	bl	8005760 <USB_FlushRxFifo>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554e:	461a      	mov	r2, r3
 8005550:	2300      	movs	r3, #0
 8005552:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555a:	461a      	mov	r2, r3
 800555c:	2300      	movs	r3, #0
 800555e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005566:	461a      	mov	r2, r3
 8005568:	2300      	movs	r3, #0
 800556a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800556c:	2300      	movs	r3, #0
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	e043      	b.n	80055fa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005588:	d118      	bne.n	80055bc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10a      	bne.n	80055a6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559c:	461a      	mov	r2, r3
 800559e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	e013      	b.n	80055ce <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b2:	461a      	mov	r2, r3
 80055b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	e008      	b.n	80055ce <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c8:	461a      	mov	r2, r3
 80055ca:	2300      	movs	r3, #0
 80055cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055da:	461a      	mov	r2, r3
 80055dc:	2300      	movs	r3, #0
 80055de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ec:	461a      	mov	r2, r3
 80055ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	3301      	adds	r3, #1
 80055f8:	613b      	str	r3, [r7, #16]
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d3b7      	bcc.n	8005572 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005602:	2300      	movs	r3, #0
 8005604:	613b      	str	r3, [r7, #16]
 8005606:	e043      	b.n	8005690 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800561a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800561e:	d118      	bne.n	8005652 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10a      	bne.n	800563c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005632:	461a      	mov	r2, r3
 8005634:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005638:	6013      	str	r3, [r2, #0]
 800563a:	e013      	b.n	8005664 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005648:	461a      	mov	r2, r3
 800564a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	e008      	b.n	8005664 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565e:	461a      	mov	r2, r3
 8005660:	2300      	movs	r3, #0
 8005662:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005670:	461a      	mov	r2, r3
 8005672:	2300      	movs	r3, #0
 8005674:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005682:	461a      	mov	r2, r3
 8005684:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005688:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	3301      	adds	r3, #1
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	429a      	cmp	r2, r3
 8005696:	d3b7      	bcc.n	8005608 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80056b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80056ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d105      	bne.n	80056cc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	f043 0210 	orr.w	r2, r3, #16
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	699a      	ldr	r2, [r3, #24]
 80056d0:	4b0f      	ldr	r3, [pc, #60]	; (8005710 <USB_DevInit+0x2b8>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80056d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d005      	beq.n	80056ea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	f043 0208 	orr.w	r2, r3, #8
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80056ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d107      	bne.n	8005700 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056f8:	f043 0304 	orr.w	r3, r3, #4
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005700:	7dfb      	ldrb	r3, [r7, #23]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800570c:	b004      	add	sp, #16
 800570e:	4770      	bx	lr
 8005710:	803c3800 	.word	0x803c3800

08005714 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	019b      	lsls	r3, r3, #6
 8005726:	f043 0220 	orr.w	r2, r3, #32
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	3301      	adds	r3, #1
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4a09      	ldr	r2, [pc, #36]	; (800575c <USB_FlushTxFifo+0x48>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d901      	bls.n	8005740 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e006      	b.n	800574e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	f003 0320 	and.w	r3, r3, #32
 8005748:	2b20      	cmp	r3, #32
 800574a:	d0f0      	beq.n	800572e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	00030d40 	.word	0x00030d40

08005760 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005768:	2300      	movs	r3, #0
 800576a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2210      	movs	r2, #16
 8005770:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3301      	adds	r3, #1
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4a09      	ldr	r2, [pc, #36]	; (80057a0 <USB_FlushRxFifo+0x40>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d901      	bls.n	8005784 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e006      	b.n	8005792 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	f003 0310 	and.w	r3, r3, #16
 800578c:	2b10      	cmp	r3, #16
 800578e:	d0f0      	beq.n	8005772 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	00030d40 	.word	0x00030d40

080057a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	460b      	mov	r3, r1
 80057ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	78fb      	ldrb	r3, [r7, #3]
 80057be:	68f9      	ldr	r1, [r7, #12]
 80057c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057c4:	4313      	orrs	r3, r2
 80057c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b087      	sub	sp, #28
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f003 0306 	and.w	r3, r3, #6
 80057ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d102      	bne.n	80057fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80057f6:	2300      	movs	r3, #0
 80057f8:	75fb      	strb	r3, [r7, #23]
 80057fa:	e00a      	b.n	8005812 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d002      	beq.n	8005808 <USB_GetDevSpeed+0x32>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2b06      	cmp	r3, #6
 8005806:	d102      	bne.n	800580e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005808:	2302      	movs	r3, #2
 800580a:	75fb      	strb	r3, [r7, #23]
 800580c:	e001      	b.n	8005812 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800580e:	230f      	movs	r3, #15
 8005810:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005812:	7dfb      	ldrb	r3, [r7, #23]
}
 8005814:	4618      	mov	r0, r3
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	785b      	ldrb	r3, [r3, #1]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d13a      	bne.n	80058b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005842:	69da      	ldr	r2, [r3, #28]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	f003 030f 	and.w	r3, r3, #15
 800584c:	2101      	movs	r1, #1
 800584e:	fa01 f303 	lsl.w	r3, r1, r3
 8005852:	b29b      	uxth	r3, r3
 8005854:	68f9      	ldr	r1, [r7, #12]
 8005856:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800585a:	4313      	orrs	r3, r2
 800585c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4413      	add	r3, r2
 8005866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d155      	bne.n	8005920 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	78db      	ldrb	r3, [r3, #3]
 800588e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005890:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	059b      	lsls	r3, r3, #22
 8005896:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005898:	4313      	orrs	r3, r2
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	0151      	lsls	r1, r2, #5
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	440a      	add	r2, r1
 80058a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ae:	6013      	str	r3, [r2, #0]
 80058b0:	e036      	b.n	8005920 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b8:	69da      	ldr	r2, [r3, #28]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	2101      	movs	r1, #1
 80058c4:	fa01 f303 	lsl.w	r3, r1, r3
 80058c8:	041b      	lsls	r3, r3, #16
 80058ca:	68f9      	ldr	r1, [r7, #12]
 80058cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058d0:	4313      	orrs	r3, r2
 80058d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d11a      	bne.n	8005920 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	78db      	ldrb	r3, [r3, #3]
 8005904:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005906:	430b      	orrs	r3, r1
 8005908:	4313      	orrs	r3, r2
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	0151      	lsls	r1, r2, #5
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	440a      	add	r2, r1
 8005912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800591a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800591e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
	...

08005930 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	785b      	ldrb	r3, [r3, #1]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d161      	bne.n	8005a10 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800595e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005962:	d11f      	bne.n	80059a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	0151      	lsls	r1, r2, #5
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	440a      	add	r2, r1
 800597a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800597e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005982:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	0151      	lsls	r1, r2, #5
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	440a      	add	r2, r1
 800599a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800599e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	f003 030f 	and.w	r3, r3, #15
 80059b4:	2101      	movs	r1, #1
 80059b6:	fa01 f303 	lsl.w	r3, r1, r3
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	43db      	mvns	r3, r3
 80059be:	68f9      	ldr	r1, [r7, #12]
 80059c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059c4:	4013      	ands	r3, r2
 80059c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ce:	69da      	ldr	r2, [r3, #28]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	f003 030f 	and.w	r3, r3, #15
 80059d8:	2101      	movs	r1, #1
 80059da:	fa01 f303 	lsl.w	r3, r1, r3
 80059de:	b29b      	uxth	r3, r3
 80059e0:	43db      	mvns	r3, r3
 80059e2:	68f9      	ldr	r1, [r7, #12]
 80059e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059e8:	4013      	ands	r3, r2
 80059ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	0159      	lsls	r1, r3, #5
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	440b      	add	r3, r1
 8005a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a06:	4619      	mov	r1, r3
 8005a08:	4b35      	ldr	r3, [pc, #212]	; (8005ae0 <USB_DeactivateEndpoint+0x1b0>)
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	600b      	str	r3, [r1, #0]
 8005a0e:	e060      	b.n	8005ad2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a26:	d11f      	bne.n	8005a68 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	0151      	lsls	r1, r2, #5
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	440a      	add	r2, r1
 8005a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a46:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	0151      	lsls	r1, r2, #5
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	440a      	add	r2, r1
 8005a5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	f003 030f 	and.w	r3, r3, #15
 8005a78:	2101      	movs	r1, #1
 8005a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7e:	041b      	lsls	r3, r3, #16
 8005a80:	43db      	mvns	r3, r3
 8005a82:	68f9      	ldr	r1, [r7, #12]
 8005a84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a88:	4013      	ands	r3, r2
 8005a8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a92:	69da      	ldr	r2, [r3, #28]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	f003 030f 	and.w	r3, r3, #15
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa2:	041b      	lsls	r3, r3, #16
 8005aa4:	43db      	mvns	r3, r3
 8005aa6:	68f9      	ldr	r1, [r7, #12]
 8005aa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005aac:	4013      	ands	r3, r2
 8005aae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	0159      	lsls	r1, r3, #5
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	440b      	add	r3, r1
 8005ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aca:	4619      	mov	r1, r3
 8005acc:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <USB_DeactivateEndpoint+0x1b4>)
 8005ace:	4013      	ands	r3, r2
 8005ad0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	ec337800 	.word	0xec337800
 8005ae4:	eff37800 	.word	0xeff37800

08005ae8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b08a      	sub	sp, #40	; 0x28
 8005aec:	af02      	add	r7, sp, #8
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	4613      	mov	r3, r2
 8005af4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	785b      	ldrb	r3, [r3, #1]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	f040 815c 	bne.w	8005dc2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d132      	bne.n	8005b78 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	0151      	lsls	r1, r2, #5
 8005b24:	69fa      	ldr	r2, [r7, #28]
 8005b26:	440a      	add	r2, r1
 8005b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	0151      	lsls	r1, r2, #5
 8005b48:	69fa      	ldr	r2, [r7, #28]
 8005b4a:	440a      	add	r2, r1
 8005b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	0151      	lsls	r1, r2, #5
 8005b68:	69fa      	ldr	r2, [r7, #28]
 8005b6a:	440a      	add	r2, r1
 8005b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b70:	0cdb      	lsrs	r3, r3, #19
 8005b72:	04db      	lsls	r3, r3, #19
 8005b74:	6113      	str	r3, [r2, #16]
 8005b76:	e074      	b.n	8005c62 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	0151      	lsls	r1, r2, #5
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	440a      	add	r2, r1
 8005b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b92:	0cdb      	lsrs	r3, r3, #19
 8005b94:	04db      	lsls	r3, r3, #19
 8005b96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	0151      	lsls	r1, r2, #5
 8005baa:	69fa      	ldr	r2, [r7, #28]
 8005bac:	440a      	add	r2, r1
 8005bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bb6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc8:	691a      	ldr	r2, [r3, #16]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	6959      	ldr	r1, [r3, #20]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	440b      	add	r3, r1
 8005bd4:	1e59      	subs	r1, r3, #1
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bde:	04d9      	lsls	r1, r3, #19
 8005be0:	4b9d      	ldr	r3, [pc, #628]	; (8005e58 <USB_EPStartXfer+0x370>)
 8005be2:	400b      	ands	r3, r1
 8005be4:	69b9      	ldr	r1, [r7, #24]
 8005be6:	0148      	lsls	r0, r1, #5
 8005be8:	69f9      	ldr	r1, [r7, #28]
 8005bea:	4401      	add	r1, r0
 8005bec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c00:	691a      	ldr	r2, [r3, #16]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c0a:	69b9      	ldr	r1, [r7, #24]
 8005c0c:	0148      	lsls	r0, r1, #5
 8005c0e:	69f9      	ldr	r1, [r7, #28]
 8005c10:	4401      	add	r1, r0
 8005c12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c16:	4313      	orrs	r3, r2
 8005c18:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	78db      	ldrb	r3, [r3, #3]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d11f      	bne.n	8005c62 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	0151      	lsls	r1, r2, #5
 8005c34:	69fa      	ldr	r2, [r7, #28]
 8005c36:	440a      	add	r2, r1
 8005c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c3c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005c40:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	0151      	lsls	r1, r2, #5
 8005c54:	69fa      	ldr	r2, [r7, #28]
 8005c56:	440a      	add	r2, r1
 8005c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c60:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d14b      	bne.n	8005d00 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d009      	beq.n	8005c84 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	78db      	ldrb	r3, [r3, #3]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d128      	bne.n	8005cde <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d110      	bne.n	8005cbe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	0151      	lsls	r1, r2, #5
 8005cae:	69fa      	ldr	r2, [r7, #28]
 8005cb0:	440a      	add	r2, r1
 8005cb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	e00f      	b.n	8005cde <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	0151      	lsls	r1, r2, #5
 8005cd0:	69fa      	ldr	r2, [r7, #28]
 8005cd2:	440a      	add	r2, r1
 8005cd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cdc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	0151      	lsls	r1, r2, #5
 8005cf0:	69fa      	ldr	r2, [r7, #28]
 8005cf2:	440a      	add	r2, r1
 8005cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	e12f      	b.n	8005f60 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	0151      	lsls	r1, r2, #5
 8005d12:	69fa      	ldr	r2, [r7, #28]
 8005d14:	440a      	add	r2, r1
 8005d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d1e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	78db      	ldrb	r3, [r3, #3]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d015      	beq.n	8005d54 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 8117 	beq.w	8005f60 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	f003 030f 	and.w	r3, r3, #15
 8005d42:	2101      	movs	r1, #1
 8005d44:	fa01 f303 	lsl.w	r3, r1, r3
 8005d48:	69f9      	ldr	r1, [r7, #28]
 8005d4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	634b      	str	r3, [r1, #52]	; 0x34
 8005d52:	e105      	b.n	8005f60 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d110      	bne.n	8005d86 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	0151      	lsls	r1, r2, #5
 8005d76:	69fa      	ldr	r2, [r7, #28]
 8005d78:	440a      	add	r2, r1
 8005d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d82:	6013      	str	r3, [r2, #0]
 8005d84:	e00f      	b.n	8005da6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	0151      	lsls	r1, r2, #5
 8005d98:	69fa      	ldr	r2, [r7, #28]
 8005d9a:	440a      	add	r2, r1
 8005d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	68d9      	ldr	r1, [r3, #12]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	781a      	ldrb	r2, [r3, #0]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	b298      	uxth	r0, r3
 8005db4:	79fb      	ldrb	r3, [r7, #7]
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	4603      	mov	r3, r0
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 fa2b 	bl	8006216 <USB_WritePacket>
 8005dc0:	e0ce      	b.n	8005f60 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	0151      	lsls	r1, r2, #5
 8005dd4:	69fa      	ldr	r2, [r7, #28]
 8005dd6:	440a      	add	r2, r1
 8005dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ddc:	0cdb      	lsrs	r3, r3, #19
 8005dde:	04db      	lsls	r3, r3, #19
 8005de0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dfc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e04:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d126      	bne.n	8005e5c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1a:	691a      	ldr	r2, [r3, #16]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e24:	69b9      	ldr	r1, [r7, #24]
 8005e26:	0148      	lsls	r0, r1, #5
 8005e28:	69f9      	ldr	r1, [r7, #28]
 8005e2a:	4401      	add	r1, r0
 8005e2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e30:	4313      	orrs	r3, r2
 8005e32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	0151      	lsls	r1, r2, #5
 8005e46:	69fa      	ldr	r2, [r7, #28]
 8005e48:	440a      	add	r2, r1
 8005e4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e52:	6113      	str	r3, [r2, #16]
 8005e54:	e036      	b.n	8005ec4 <USB_EPStartXfer+0x3dc>
 8005e56:	bf00      	nop
 8005e58:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	695a      	ldr	r2, [r3, #20]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	4413      	add	r3, r2
 8005e66:	1e5a      	subs	r2, r3, #1
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e70:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7e:	691a      	ldr	r2, [r3, #16]
 8005e80:	8afb      	ldrh	r3, [r7, #22]
 8005e82:	04d9      	lsls	r1, r3, #19
 8005e84:	4b39      	ldr	r3, [pc, #228]	; (8005f6c <USB_EPStartXfer+0x484>)
 8005e86:	400b      	ands	r3, r1
 8005e88:	69b9      	ldr	r1, [r7, #24]
 8005e8a:	0148      	lsls	r0, r1, #5
 8005e8c:	69f9      	ldr	r1, [r7, #28]
 8005e8e:	4401      	add	r1, r0
 8005e90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e94:	4313      	orrs	r3, r2
 8005e96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea4:	691a      	ldr	r2, [r3, #16]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	8af9      	ldrh	r1, [r7, #22]
 8005eac:	fb01 f303 	mul.w	r3, r1, r3
 8005eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eb4:	69b9      	ldr	r1, [r7, #24]
 8005eb6:	0148      	lsls	r0, r1, #5
 8005eb8:	69f9      	ldr	r1, [r7, #28]
 8005eba:	4401      	add	r1, r0
 8005ebc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ec4:	79fb      	ldrb	r3, [r7, #7]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d10d      	bne.n	8005ee6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d009      	beq.n	8005ee6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	68d9      	ldr	r1, [r3, #12]
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee2:	460a      	mov	r2, r1
 8005ee4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	78db      	ldrb	r3, [r3, #3]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d128      	bne.n	8005f40 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d110      	bne.n	8005f20 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	0151      	lsls	r1, r2, #5
 8005f10:	69fa      	ldr	r2, [r7, #28]
 8005f12:	440a      	add	r2, r1
 8005f14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	e00f      	b.n	8005f40 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	0151      	lsls	r1, r2, #5
 8005f32:	69fa      	ldr	r2, [r7, #28]
 8005f34:	440a      	add	r2, r1
 8005f36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f3e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	0151      	lsls	r1, r2, #5
 8005f52:	69fa      	ldr	r2, [r7, #28]
 8005f54:	440a      	add	r2, r1
 8005f56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3720      	adds	r7, #32
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	1ff80000 	.word	0x1ff80000

08005f70 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b087      	sub	sp, #28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	785b      	ldrb	r3, [r3, #1]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	f040 80cd 	bne.w	800612c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d132      	bne.n	8006000 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	0151      	lsls	r1, r2, #5
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	440a      	add	r2, r1
 8005fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	0151      	lsls	r1, r2, #5
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	440a      	add	r2, r1
 8005fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	0151      	lsls	r1, r2, #5
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	440a      	add	r2, r1
 8005ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff8:	0cdb      	lsrs	r3, r3, #19
 8005ffa:	04db      	lsls	r3, r3, #19
 8005ffc:	6113      	str	r3, [r2, #16]
 8005ffe:	e04e      	b.n	800609e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	0151      	lsls	r1, r2, #5
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	440a      	add	r2, r1
 8006016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800601a:	0cdb      	lsrs	r3, r3, #19
 800601c:	04db      	lsls	r3, r3, #19
 800601e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	0151      	lsls	r1, r2, #5
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	440a      	add	r2, r1
 8006036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800603a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800603e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006042:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	695a      	ldr	r2, [r3, #20]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	429a      	cmp	r2, r3
 800604e:	d903      	bls.n	8006058 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	0151      	lsls	r1, r2, #5
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	440a      	add	r2, r1
 800606e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006072:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006076:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006084:	691a      	ldr	r2, [r3, #16]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800608e:	6939      	ldr	r1, [r7, #16]
 8006090:	0148      	lsls	r0, r1, #5
 8006092:	6979      	ldr	r1, [r7, #20]
 8006094:	4401      	add	r1, r0
 8006096:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800609a:	4313      	orrs	r3, r2
 800609c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800609e:	79fb      	ldrb	r3, [r7, #7]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d11e      	bne.n	80060e2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d009      	beq.n	80060c0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b8:	461a      	mov	r2, r3
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	0151      	lsls	r1, r2, #5
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	440a      	add	r2, r1
 80060d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060de:	6013      	str	r3, [r2, #0]
 80060e0:	e092      	b.n	8006208 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	0151      	lsls	r1, r2, #5
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	440a      	add	r2, r1
 80060f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006100:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d07e      	beq.n	8006208 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	f003 030f 	and.w	r3, r3, #15
 800611a:	2101      	movs	r1, #1
 800611c:	fa01 f303 	lsl.w	r3, r1, r3
 8006120:	6979      	ldr	r1, [r7, #20]
 8006122:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006126:	4313      	orrs	r3, r2
 8006128:	634b      	str	r3, [r1, #52]	; 0x34
 800612a:	e06d      	b.n	8006208 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	0151      	lsls	r1, r2, #5
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	440a      	add	r2, r1
 8006142:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006146:	0cdb      	lsrs	r3, r3, #19
 8006148:	04db      	lsls	r3, r3, #19
 800614a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	0151      	lsls	r1, r2, #5
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	440a      	add	r2, r1
 8006162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006166:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800616a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800616e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	0151      	lsls	r1, r2, #5
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	440a      	add	r2, r1
 8006196:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800619a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800619e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ac:	691a      	ldr	r2, [r3, #16]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061b6:	6939      	ldr	r1, [r7, #16]
 80061b8:	0148      	lsls	r0, r1, #5
 80061ba:	6979      	ldr	r1, [r7, #20]
 80061bc:	4401      	add	r1, r0
 80061be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061c2:	4313      	orrs	r3, r2
 80061c4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80061c6:	79fb      	ldrb	r3, [r7, #7]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d10d      	bne.n	80061e8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d009      	beq.n	80061e8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	68d9      	ldr	r1, [r3, #12]
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e4:	460a      	mov	r2, r1
 80061e6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	0151      	lsls	r1, r2, #5
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	440a      	add	r2, r1
 80061fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006202:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006206:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006216:	b480      	push	{r7}
 8006218:	b089      	sub	sp, #36	; 0x24
 800621a:	af00      	add	r7, sp, #0
 800621c:	60f8      	str	r0, [r7, #12]
 800621e:	60b9      	str	r1, [r7, #8]
 8006220:	4611      	mov	r1, r2
 8006222:	461a      	mov	r2, r3
 8006224:	460b      	mov	r3, r1
 8006226:	71fb      	strb	r3, [r7, #7]
 8006228:	4613      	mov	r3, r2
 800622a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006234:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006238:	2b00      	cmp	r3, #0
 800623a:	d11a      	bne.n	8006272 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800623c:	88bb      	ldrh	r3, [r7, #4]
 800623e:	3303      	adds	r3, #3
 8006240:	089b      	lsrs	r3, r3, #2
 8006242:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006244:	2300      	movs	r3, #0
 8006246:	61bb      	str	r3, [r7, #24]
 8006248:	e00f      	b.n	800626a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800624a:	79fb      	ldrb	r3, [r7, #7]
 800624c:	031a      	lsls	r2, r3, #12
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	4413      	add	r3, r2
 8006252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006256:	461a      	mov	r2, r3
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	3304      	adds	r3, #4
 8006262:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	3301      	adds	r3, #1
 8006268:	61bb      	str	r3, [r7, #24]
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	429a      	cmp	r2, r3
 8006270:	d3eb      	bcc.n	800624a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3724      	adds	r7, #36	; 0x24
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006280:	b480      	push	{r7}
 8006282:	b089      	sub	sp, #36	; 0x24
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	4613      	mov	r3, r2
 800628c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006296:	88fb      	ldrh	r3, [r7, #6]
 8006298:	3303      	adds	r3, #3
 800629a:	089b      	lsrs	r3, r3, #2
 800629c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800629e:	2300      	movs	r3, #0
 80062a0:	61bb      	str	r3, [r7, #24]
 80062a2:	e00b      	b.n	80062bc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	3304      	adds	r3, #4
 80062b4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	3301      	adds	r3, #1
 80062ba:	61bb      	str	r3, [r7, #24]
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d3ef      	bcc.n	80062a4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80062c4:	69fb      	ldr	r3, [r7, #28]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3724      	adds	r7, #36	; 0x24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b085      	sub	sp, #20
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	785b      	ldrb	r3, [r3, #1]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d12c      	bne.n	8006348 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	db12      	blt.n	8006326 <USB_EPSetStall+0x54>
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00f      	beq.n	8006326 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	0151      	lsls	r1, r2, #5
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	440a      	add	r2, r1
 800631c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006320:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006324:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4413      	add	r3, r2
 800632e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	0151      	lsls	r1, r2, #5
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	440a      	add	r2, r1
 800633c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006340:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	e02b      	b.n	80063a0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	db12      	blt.n	8006380 <USB_EPSetStall+0xae>
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00f      	beq.n	8006380 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	0151      	lsls	r1, r2, #5
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	440a      	add	r2, r1
 8006376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800637a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800637e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	0151      	lsls	r1, r2, #5
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	440a      	add	r2, r1
 8006396:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800639a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800639e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b085      	sub	sp, #20
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	785b      	ldrb	r3, [r3, #1]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d128      	bne.n	800641c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	0151      	lsls	r1, r2, #5
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	440a      	add	r2, r1
 80063e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	78db      	ldrb	r3, [r3, #3]
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d003      	beq.n	80063fa <USB_EPClearStall+0x4c>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	78db      	ldrb	r3, [r3, #3]
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d138      	bne.n	800646c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4413      	add	r3, r2
 8006402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	0151      	lsls	r1, r2, #5
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	440a      	add	r2, r1
 8006410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	e027      	b.n	800646c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4413      	add	r3, r2
 8006424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	0151      	lsls	r1, r2, #5
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	440a      	add	r2, r1
 8006432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006436:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800643a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	78db      	ldrb	r3, [r3, #3]
 8006440:	2b03      	cmp	r3, #3
 8006442:	d003      	beq.n	800644c <USB_EPClearStall+0x9e>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	78db      	ldrb	r3, [r3, #3]
 8006448:	2b02      	cmp	r3, #2
 800644a:	d10f      	bne.n	800646c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	0151      	lsls	r1, r2, #5
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	440a      	add	r2, r1
 8006462:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800646a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800647a:	b480      	push	{r7}
 800647c:	b085      	sub	sp, #20
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	460b      	mov	r3, r1
 8006484:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006498:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800649c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	78fb      	ldrb	r3, [r7, #3]
 80064a8:	011b      	lsls	r3, r3, #4
 80064aa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80064ae:	68f9      	ldr	r1, [r7, #12]
 80064b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064b4:	4313      	orrs	r3, r2
 80064b6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b085      	sub	sp, #20
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064e0:	f023 0303 	bic.w	r3, r3, #3
 80064e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064f4:	f023 0302 	bic.w	r3, r3, #2
 80064f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006522:	f023 0303 	bic.w	r3, r3, #3
 8006526:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006536:	f043 0302 	orr.w	r3, r3, #2
 800653a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800654a:	b480      	push	{r7}
 800654c:	b085      	sub	sp, #20
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	4013      	ands	r3, r2
 8006560:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006562:	68fb      	ldr	r3, [r7, #12]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	4013      	ands	r3, r2
 8006592:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	0c1b      	lsrs	r3, r3, #16
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	4013      	ands	r3, r2
 80065c6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	b29b      	uxth	r3, r3
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	460b      	mov	r3, r1
 80065e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	4013      	ands	r3, r2
 8006604:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006606:	68bb      	ldr	r3, [r7, #8]
}
 8006608:	4618      	mov	r0, r3
 800660a:	3714      	adds	r7, #20
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	460b      	mov	r3, r1
 800661e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006636:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006638:	78fb      	ldrb	r3, [r7, #3]
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	fa22 f303 	lsr.w	r3, r2, r3
 8006644:	01db      	lsls	r3, r3, #7
 8006646:	b2db      	uxtb	r3, r3
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	4313      	orrs	r3, r2
 800664c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800664e:	78fb      	ldrb	r3, [r7, #3]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	4013      	ands	r3, r2
 8006660:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006662:	68bb      	ldr	r3, [r7, #8]
}
 8006664:	4618      	mov	r0, r3
 8006666:	371c      	adds	r7, #28
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	f003 0301 	and.w	r3, r3, #1
}
 8006680:	4618      	mov	r0, r3
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80066aa:	f023 0307 	bic.w	r3, r3, #7
 80066ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
	...

080066d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	460b      	mov	r3, r1
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	333c      	adds	r3, #60	; 0x3c
 80066ea:	3304      	adds	r3, #4
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	4a26      	ldr	r2, [pc, #152]	; (800678c <USB_EP0_OutStart+0xb8>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d90a      	bls.n	800670e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006704:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006708:	d101      	bne.n	800670e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	e037      	b.n	800677e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006714:	461a      	mov	r2, r3
 8006716:	2300      	movs	r3, #0
 8006718:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006728:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800672c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800673c:	f043 0318 	orr.w	r3, r3, #24
 8006740:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006750:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006754:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006756:	7afb      	ldrb	r3, [r7, #11]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d10f      	bne.n	800677c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006762:	461a      	mov	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006776:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800677a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	371c      	adds	r7, #28
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	4f54300a 	.word	0x4f54300a

08006790 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006798:	2300      	movs	r3, #0
 800679a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	3301      	adds	r3, #1
 80067a0:	60fb      	str	r3, [r7, #12]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	4a13      	ldr	r2, [pc, #76]	; (80067f4 <USB_CoreReset+0x64>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d901      	bls.n	80067ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e01b      	b.n	80067e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	daf2      	bge.n	800679c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	f043 0201 	orr.w	r2, r3, #1
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	3301      	adds	r3, #1
 80067ca:	60fb      	str	r3, [r7, #12]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4a09      	ldr	r2, [pc, #36]	; (80067f4 <USB_CoreReset+0x64>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d901      	bls.n	80067d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e006      	b.n	80067e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d0f0      	beq.n	80067c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	00030d40 	.word	0x00030d40

080067f8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	4603      	mov	r3, r0
 8006800:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006802:	2300      	movs	r3, #0
 8006804:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800680a:	2b84      	cmp	r3, #132	; 0x84
 800680c:	d005      	beq.n	800681a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800680e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4413      	add	r3, r2
 8006816:	3303      	adds	r3, #3
 8006818:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800681a:	68fb      	ldr	r3, [r7, #12]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800682c:	f000 feb6 	bl	800759c <vTaskStartScheduler>
  
  return osOK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	bd80      	pop	{r7, pc}

08006836 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006836:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006838:	b089      	sub	sp, #36	; 0x24
 800683a:	af04      	add	r7, sp, #16
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d020      	beq.n	800688a <osThreadCreate+0x54>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01c      	beq.n	800688a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685c      	ldr	r4, [r3, #4]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681d      	ldr	r5, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	691e      	ldr	r6, [r3, #16]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006862:	4618      	mov	r0, r3
 8006864:	f7ff ffc8 	bl	80067f8 <makeFreeRtosPriority>
 8006868:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006872:	9202      	str	r2, [sp, #8]
 8006874:	9301      	str	r3, [sp, #4]
 8006876:	9100      	str	r1, [sp, #0]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	4632      	mov	r2, r6
 800687c:	4629      	mov	r1, r5
 800687e:	4620      	mov	r0, r4
 8006880:	f000 fcc8 	bl	8007214 <xTaskCreateStatic>
 8006884:	4603      	mov	r3, r0
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	e01c      	b.n	80068c4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685c      	ldr	r4, [r3, #4]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006896:	b29e      	uxth	r6, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800689e:	4618      	mov	r0, r3
 80068a0:	f7ff ffaa 	bl	80067f8 <makeFreeRtosPriority>
 80068a4:	4602      	mov	r2, r0
 80068a6:	f107 030c 	add.w	r3, r7, #12
 80068aa:	9301      	str	r3, [sp, #4]
 80068ac:	9200      	str	r2, [sp, #0]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	4632      	mov	r2, r6
 80068b2:	4629      	mov	r1, r5
 80068b4:	4620      	mov	r0, r4
 80068b6:	f000 fd07 	bl	80072c8 <xTaskCreate>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d001      	beq.n	80068c4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80068c0:	2300      	movs	r3, #0
 80068c2:	e000      	b.n	80068c6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80068c4:	68fb      	ldr	r3, [r7, #12]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080068ce <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b084      	sub	sp, #16
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d001      	beq.n	80068e4 <osDelay+0x16>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	e000      	b.n	80068e6 <osDelay+0x18>
 80068e4:	2301      	movs	r3, #1
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 fe24 	bl	8007534 <vTaskDelay>
  
  return osOK;
 80068ec:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
	...

080068f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08a      	sub	sp, #40	; 0x28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006900:	2300      	movs	r3, #0
 8006902:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006904:	f000 fea8 	bl	8007658 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006908:	4b57      	ldr	r3, [pc, #348]	; (8006a68 <pvPortMalloc+0x170>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006910:	f000 f90c 	bl	8006b2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006914:	4b55      	ldr	r3, [pc, #340]	; (8006a6c <pvPortMalloc+0x174>)
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4013      	ands	r3, r2
 800691c:	2b00      	cmp	r3, #0
 800691e:	f040 808c 	bne.w	8006a3a <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d01c      	beq.n	8006962 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006928:	2208      	movs	r2, #8
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4413      	add	r3, r2
 800692e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f003 0307 	and.w	r3, r3, #7
 8006936:	2b00      	cmp	r3, #0
 8006938:	d013      	beq.n	8006962 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f023 0307 	bic.w	r3, r3, #7
 8006940:	3308      	adds	r3, #8
 8006942:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f003 0307 	and.w	r3, r3, #7
 800694a:	2b00      	cmp	r3, #0
 800694c:	d009      	beq.n	8006962 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	e7fe      	b.n	8006960 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d068      	beq.n	8006a3a <pvPortMalloc+0x142>
 8006968:	4b41      	ldr	r3, [pc, #260]	; (8006a70 <pvPortMalloc+0x178>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	429a      	cmp	r2, r3
 8006970:	d863      	bhi.n	8006a3a <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006972:	4b40      	ldr	r3, [pc, #256]	; (8006a74 <pvPortMalloc+0x17c>)
 8006974:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006976:	4b3f      	ldr	r3, [pc, #252]	; (8006a74 <pvPortMalloc+0x17c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800697c:	e004      	b.n	8006988 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	429a      	cmp	r2, r3
 8006990:	d903      	bls.n	800699a <pvPortMalloc+0xa2>
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1f1      	bne.n	800697e <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800699a:	4b33      	ldr	r3, [pc, #204]	; (8006a68 <pvPortMalloc+0x170>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d04a      	beq.n	8006a3a <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2208      	movs	r2, #8
 80069aa:	4413      	add	r3, r2
 80069ac:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	6a3b      	ldr	r3, [r7, #32]
 80069b4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	1ad2      	subs	r2, r2, r3
 80069be:	2308      	movs	r3, #8
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d91e      	bls.n	8006a04 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80069c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4413      	add	r3, r2
 80069cc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	f003 0307 	and.w	r3, r3, #7
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d009      	beq.n	80069ec <pvPortMalloc+0xf4>
 80069d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	613b      	str	r3, [r7, #16]
 80069ea:	e7fe      	b.n	80069ea <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	1ad2      	subs	r2, r2, r3
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80069fe:	69b8      	ldr	r0, [r7, #24]
 8006a00:	f000 f8f6 	bl	8006bf0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a04:	4b1a      	ldr	r3, [pc, #104]	; (8006a70 <pvPortMalloc+0x178>)
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	4a18      	ldr	r2, [pc, #96]	; (8006a70 <pvPortMalloc+0x178>)
 8006a10:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a12:	4b17      	ldr	r3, [pc, #92]	; (8006a70 <pvPortMalloc+0x178>)
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	4b18      	ldr	r3, [pc, #96]	; (8006a78 <pvPortMalloc+0x180>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d203      	bcs.n	8006a26 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a1e:	4b14      	ldr	r3, [pc, #80]	; (8006a70 <pvPortMalloc+0x178>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a15      	ldr	r2, [pc, #84]	; (8006a78 <pvPortMalloc+0x180>)
 8006a24:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	4b10      	ldr	r3, [pc, #64]	; (8006a6c <pvPortMalloc+0x174>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	2200      	movs	r2, #0
 8006a38:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a3a:	f000 fe1b 	bl	8007674 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	f003 0307 	and.w	r3, r3, #7
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d009      	beq.n	8006a5c <pvPortMalloc+0x164>
 8006a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	e7fe      	b.n	8006a5a <pvPortMalloc+0x162>
	return pvReturn;
 8006a5c:	69fb      	ldr	r3, [r7, #28]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3728      	adds	r7, #40	; 0x28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	2000409c 	.word	0x2000409c
 8006a6c:	200040a8 	.word	0x200040a8
 8006a70:	200040a0 	.word	0x200040a0
 8006a74:	20004094 	.word	0x20004094
 8006a78:	200040a4 	.word	0x200040a4

08006a7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d046      	beq.n	8006b1c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a8e:	2308      	movs	r3, #8
 8006a90:	425b      	negs	r3, r3
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	4413      	add	r3, r2
 8006a96:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	4b20      	ldr	r3, [pc, #128]	; (8006b24 <vPortFree+0xa8>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d109      	bne.n	8006abe <vPortFree+0x42>
 8006aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	e7fe      	b.n	8006abc <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d009      	beq.n	8006ada <vPortFree+0x5e>
 8006ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aca:	f383 8811 	msr	BASEPRI, r3
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	60bb      	str	r3, [r7, #8]
 8006ad8:	e7fe      	b.n	8006ad8 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	685a      	ldr	r2, [r3, #4]
 8006ade:	4b11      	ldr	r3, [pc, #68]	; (8006b24 <vPortFree+0xa8>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d019      	beq.n	8006b1c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d115      	bne.n	8006b1c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	4b0b      	ldr	r3, [pc, #44]	; (8006b24 <vPortFree+0xa8>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	43db      	mvns	r3, r3
 8006afa:	401a      	ands	r2, r3
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b00:	f000 fdaa 	bl	8007658 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	4b07      	ldr	r3, [pc, #28]	; (8006b28 <vPortFree+0xac>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	4a06      	ldr	r2, [pc, #24]	; (8006b28 <vPortFree+0xac>)
 8006b10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b12:	6938      	ldr	r0, [r7, #16]
 8006b14:	f000 f86c 	bl	8006bf0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006b18:	f000 fdac 	bl	8007674 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b1c:	bf00      	nop
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	200040a8 	.word	0x200040a8
 8006b28:	200040a0 	.word	0x200040a0

08006b2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b32:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006b36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b38:	4b27      	ldr	r3, [pc, #156]	; (8006bd8 <prvHeapInit+0xac>)
 8006b3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f003 0307 	and.w	r3, r3, #7
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00c      	beq.n	8006b60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	3307      	adds	r3, #7
 8006b4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 0307 	bic.w	r3, r3, #7
 8006b52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b54:	68ba      	ldr	r2, [r7, #8]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	4a1f      	ldr	r2, [pc, #124]	; (8006bd8 <prvHeapInit+0xac>)
 8006b5c:	4413      	add	r3, r2
 8006b5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b64:	4a1d      	ldr	r2, [pc, #116]	; (8006bdc <prvHeapInit+0xb0>)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b6a:	4b1c      	ldr	r3, [pc, #112]	; (8006bdc <prvHeapInit+0xb0>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	4413      	add	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b78:	2208      	movs	r2, #8
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	1a9b      	subs	r3, r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0307 	bic.w	r3, r3, #7
 8006b86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4a15      	ldr	r2, [pc, #84]	; (8006be0 <prvHeapInit+0xb4>)
 8006b8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b8e:	4b14      	ldr	r3, [pc, #80]	; (8006be0 <prvHeapInit+0xb4>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2200      	movs	r2, #0
 8006b94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b96:	4b12      	ldr	r3, [pc, #72]	; (8006be0 <prvHeapInit+0xb4>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	1ad2      	subs	r2, r2, r3
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006bac:	4b0c      	ldr	r3, [pc, #48]	; (8006be0 <prvHeapInit+0xb4>)
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	4a0a      	ldr	r2, [pc, #40]	; (8006be4 <prvHeapInit+0xb8>)
 8006bba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	4a09      	ldr	r2, [pc, #36]	; (8006be8 <prvHeapInit+0xbc>)
 8006bc2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006bc4:	4b09      	ldr	r3, [pc, #36]	; (8006bec <prvHeapInit+0xc0>)
 8006bc6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006bca:	601a      	str	r2, [r3, #0]
}
 8006bcc:	bf00      	nop
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	20000494 	.word	0x20000494
 8006bdc:	20004094 	.word	0x20004094
 8006be0:	2000409c 	.word	0x2000409c
 8006be4:	200040a4 	.word	0x200040a4
 8006be8:	200040a0 	.word	0x200040a0
 8006bec:	200040a8 	.word	0x200040a8

08006bf0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006bf8:	4b28      	ldr	r3, [pc, #160]	; (8006c9c <prvInsertBlockIntoFreeList+0xac>)
 8006bfa:	60fb      	str	r3, [r7, #12]
 8006bfc:	e002      	b.n	8006c04 <prvInsertBlockIntoFreeList+0x14>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d8f7      	bhi.n	8006bfe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	4413      	add	r3, r2
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d108      	bne.n	8006c32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	441a      	add	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	441a      	add	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d118      	bne.n	8006c78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	4b15      	ldr	r3, [pc, #84]	; (8006ca0 <prvInsertBlockIntoFreeList+0xb0>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d00d      	beq.n	8006c6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	441a      	add	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	601a      	str	r2, [r3, #0]
 8006c6c:	e008      	b.n	8006c80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ca0 <prvInsertBlockIntoFreeList+0xb0>)
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	e003      	b.n	8006c80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d002      	beq.n	8006c8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c8e:	bf00      	nop
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	20004094 	.word	0x20004094
 8006ca0:	2000409c 	.word	0x2000409c

08006ca4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f103 0208 	add.w	r2, r3, #8
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f103 0208 	add.w	r2, r3, #8
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f103 0208 	add.w	r2, r3, #8
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006cf2:	bf00      	nop
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b085      	sub	sp, #20
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	1c5a      	adds	r2, r3, #1
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	601a      	str	r2, [r3, #0]
}
 8006d3a:	bf00      	nop
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d46:	b480      	push	{r7}
 8006d48:	b085      	sub	sp, #20
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5c:	d103      	bne.n	8006d66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	60fb      	str	r3, [r7, #12]
 8006d64:	e00c      	b.n	8006d80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	3308      	adds	r3, #8
 8006d6a:	60fb      	str	r3, [r7, #12]
 8006d6c:	e002      	b.n	8006d74 <vListInsert+0x2e>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	60fb      	str	r3, [r7, #12]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d2f6      	bcs.n	8006d6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	1c5a      	adds	r2, r3, #1
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	601a      	str	r2, [r3, #0]
}
 8006dac:	bf00      	nop
 8006dae:	3714      	adds	r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	6892      	ldr	r2, [r2, #8]
 8006dce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	6852      	ldr	r2, [r2, #4]
 8006dd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d103      	bne.n	8006dec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689a      	ldr	r2, [r3, #8]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	1e5a      	subs	r2, r3, #1
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	3b04      	subs	r3, #4
 8006e1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	3b04      	subs	r3, #4
 8006e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f023 0201 	bic.w	r2, r3, #1
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	3b04      	subs	r3, #4
 8006e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e3c:	4a0c      	ldr	r2, [pc, #48]	; (8006e70 <pxPortInitialiseStack+0x64>)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	3b14      	subs	r3, #20
 8006e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	3b04      	subs	r3, #4
 8006e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f06f 0202 	mvn.w	r2, #2
 8006e5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	3b20      	subs	r3, #32
 8006e60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e62:	68fb      	ldr	r3, [r7, #12]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	08006e75 	.word	0x08006e75

08006e74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e7e:	4b11      	ldr	r3, [pc, #68]	; (8006ec4 <prvTaskExitError+0x50>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e86:	d009      	beq.n	8006e9c <prvTaskExitError+0x28>
 8006e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	60fb      	str	r3, [r7, #12]
 8006e9a:	e7fe      	b.n	8006e9a <prvTaskExitError+0x26>
 8006e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006eae:	bf00      	nop
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0fc      	beq.n	8006eb0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006eb6:	bf00      	nop
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	20000080 	.word	0x20000080
	...

08006ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ed0:	4b07      	ldr	r3, [pc, #28]	; (8006ef0 <pxCurrentTCBConst2>)
 8006ed2:	6819      	ldr	r1, [r3, #0]
 8006ed4:	6808      	ldr	r0, [r1, #0]
 8006ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eda:	f380 8809 	msr	PSP, r0
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f04f 0000 	mov.w	r0, #0
 8006ee6:	f380 8811 	msr	BASEPRI, r0
 8006eea:	4770      	bx	lr
 8006eec:	f3af 8000 	nop.w

08006ef0 <pxCurrentTCBConst2>:
 8006ef0:	200040b4 	.word	0x200040b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ef4:	bf00      	nop
 8006ef6:	bf00      	nop

08006ef8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ef8:	4808      	ldr	r0, [pc, #32]	; (8006f1c <prvPortStartFirstTask+0x24>)
 8006efa:	6800      	ldr	r0, [r0, #0]
 8006efc:	6800      	ldr	r0, [r0, #0]
 8006efe:	f380 8808 	msr	MSP, r0
 8006f02:	f04f 0000 	mov.w	r0, #0
 8006f06:	f380 8814 	msr	CONTROL, r0
 8006f0a:	b662      	cpsie	i
 8006f0c:	b661      	cpsie	f
 8006f0e:	f3bf 8f4f 	dsb	sy
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	df00      	svc	0
 8006f18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f1a:	bf00      	nop
 8006f1c:	e000ed08 	.word	0xe000ed08

08006f20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f26:	4b44      	ldr	r3, [pc, #272]	; (8007038 <xPortStartScheduler+0x118>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a44      	ldr	r2, [pc, #272]	; (800703c <xPortStartScheduler+0x11c>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d109      	bne.n	8006f44 <xPortStartScheduler+0x24>
 8006f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	613b      	str	r3, [r7, #16]
 8006f42:	e7fe      	b.n	8006f42 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f44:	4b3c      	ldr	r3, [pc, #240]	; (8007038 <xPortStartScheduler+0x118>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a3d      	ldr	r2, [pc, #244]	; (8007040 <xPortStartScheduler+0x120>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d109      	bne.n	8006f62 <xPortStartScheduler+0x42>
 8006f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	60fb      	str	r3, [r7, #12]
 8006f60:	e7fe      	b.n	8006f60 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f62:	4b38      	ldr	r3, [pc, #224]	; (8007044 <xPortStartScheduler+0x124>)
 8006f64:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	22ff      	movs	r2, #255	; 0xff
 8006f72:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f7c:	78fb      	ldrb	r3, [r7, #3]
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f84:	b2da      	uxtb	r2, r3
 8006f86:	4b30      	ldr	r3, [pc, #192]	; (8007048 <xPortStartScheduler+0x128>)
 8006f88:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f8a:	4b30      	ldr	r3, [pc, #192]	; (800704c <xPortStartScheduler+0x12c>)
 8006f8c:	2207      	movs	r2, #7
 8006f8e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f90:	e009      	b.n	8006fa6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006f92:	4b2e      	ldr	r3, [pc, #184]	; (800704c <xPortStartScheduler+0x12c>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	4a2c      	ldr	r2, [pc, #176]	; (800704c <xPortStartScheduler+0x12c>)
 8006f9a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f9c:	78fb      	ldrb	r3, [r7, #3]
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	005b      	lsls	r3, r3, #1
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fa6:	78fb      	ldrb	r3, [r7, #3]
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fae:	2b80      	cmp	r3, #128	; 0x80
 8006fb0:	d0ef      	beq.n	8006f92 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006fb2:	4b26      	ldr	r3, [pc, #152]	; (800704c <xPortStartScheduler+0x12c>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f1c3 0307 	rsb	r3, r3, #7
 8006fba:	2b04      	cmp	r3, #4
 8006fbc:	d009      	beq.n	8006fd2 <xPortStartScheduler+0xb2>
 8006fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	60bb      	str	r3, [r7, #8]
 8006fd0:	e7fe      	b.n	8006fd0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006fd2:	4b1e      	ldr	r3, [pc, #120]	; (800704c <xPortStartScheduler+0x12c>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	021b      	lsls	r3, r3, #8
 8006fd8:	4a1c      	ldr	r2, [pc, #112]	; (800704c <xPortStartScheduler+0x12c>)
 8006fda:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006fdc:	4b1b      	ldr	r3, [pc, #108]	; (800704c <xPortStartScheduler+0x12c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fe4:	4a19      	ldr	r2, [pc, #100]	; (800704c <xPortStartScheduler+0x12c>)
 8006fe6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ff0:	4b17      	ldr	r3, [pc, #92]	; (8007050 <xPortStartScheduler+0x130>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a16      	ldr	r2, [pc, #88]	; (8007050 <xPortStartScheduler+0x130>)
 8006ff6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ffa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ffc:	4b14      	ldr	r3, [pc, #80]	; (8007050 <xPortStartScheduler+0x130>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a13      	ldr	r2, [pc, #76]	; (8007050 <xPortStartScheduler+0x130>)
 8007002:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007006:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007008:	f000 f8d6 	bl	80071b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800700c:	4b11      	ldr	r3, [pc, #68]	; (8007054 <xPortStartScheduler+0x134>)
 800700e:	2200      	movs	r2, #0
 8007010:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007012:	f000 f8f5 	bl	8007200 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007016:	4b10      	ldr	r3, [pc, #64]	; (8007058 <xPortStartScheduler+0x138>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a0f      	ldr	r2, [pc, #60]	; (8007058 <xPortStartScheduler+0x138>)
 800701c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007020:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007022:	f7ff ff69 	bl	8006ef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007026:	f000 fc79 	bl	800791c <vTaskSwitchContext>
	prvTaskExitError();
 800702a:	f7ff ff23 	bl	8006e74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3718      	adds	r7, #24
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	e000ed00 	.word	0xe000ed00
 800703c:	410fc271 	.word	0x410fc271
 8007040:	410fc270 	.word	0x410fc270
 8007044:	e000e400 	.word	0xe000e400
 8007048:	200040ac 	.word	0x200040ac
 800704c:	200040b0 	.word	0x200040b0
 8007050:	e000ed20 	.word	0xe000ed20
 8007054:	20000080 	.word	0x20000080
 8007058:	e000ef34 	.word	0xe000ef34

0800705c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007074:	4b0e      	ldr	r3, [pc, #56]	; (80070b0 <vPortEnterCritical+0x54>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3301      	adds	r3, #1
 800707a:	4a0d      	ldr	r2, [pc, #52]	; (80070b0 <vPortEnterCritical+0x54>)
 800707c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800707e:	4b0c      	ldr	r3, [pc, #48]	; (80070b0 <vPortEnterCritical+0x54>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d10e      	bne.n	80070a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007086:	4b0b      	ldr	r3, [pc, #44]	; (80070b4 <vPortEnterCritical+0x58>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	d009      	beq.n	80070a4 <vPortEnterCritical+0x48>
 8007090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	603b      	str	r3, [r7, #0]
 80070a2:	e7fe      	b.n	80070a2 <vPortEnterCritical+0x46>
	}
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	20000080 	.word	0x20000080
 80070b4:	e000ed04 	.word	0xe000ed04

080070b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80070be:	4b11      	ldr	r3, [pc, #68]	; (8007104 <vPortExitCritical+0x4c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d109      	bne.n	80070da <vPortExitCritical+0x22>
 80070c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	607b      	str	r3, [r7, #4]
 80070d8:	e7fe      	b.n	80070d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80070da:	4b0a      	ldr	r3, [pc, #40]	; (8007104 <vPortExitCritical+0x4c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	3b01      	subs	r3, #1
 80070e0:	4a08      	ldr	r2, [pc, #32]	; (8007104 <vPortExitCritical+0x4c>)
 80070e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070e4:	4b07      	ldr	r3, [pc, #28]	; (8007104 <vPortExitCritical+0x4c>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d104      	bne.n	80070f6 <vPortExitCritical+0x3e>
 80070ec:	2300      	movs	r3, #0
 80070ee:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80070f6:	bf00      	nop
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	20000080 	.word	0x20000080
	...

08007110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007110:	f3ef 8009 	mrs	r0, PSP
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	4b15      	ldr	r3, [pc, #84]	; (8007170 <pxCurrentTCBConst>)
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	f01e 0f10 	tst.w	lr, #16
 8007120:	bf08      	it	eq
 8007122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712a:	6010      	str	r0, [r2, #0]
 800712c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007130:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007134:	f380 8811 	msr	BASEPRI, r0
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f000 fbec 	bl	800791c <vTaskSwitchContext>
 8007144:	f04f 0000 	mov.w	r0, #0
 8007148:	f380 8811 	msr	BASEPRI, r0
 800714c:	bc09      	pop	{r0, r3}
 800714e:	6819      	ldr	r1, [r3, #0]
 8007150:	6808      	ldr	r0, [r1, #0]
 8007152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007156:	f01e 0f10 	tst.w	lr, #16
 800715a:	bf08      	it	eq
 800715c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007160:	f380 8809 	msr	PSP, r0
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	f3af 8000 	nop.w

08007170 <pxCurrentTCBConst>:
 8007170:	200040b4 	.word	0x200040b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007174:	bf00      	nop
 8007176:	bf00      	nop

08007178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
	__asm volatile
 800717e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007190:	f000 fb0c 	bl	80077ac <xTaskIncrementTick>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d003      	beq.n	80071a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800719a:	4b06      	ldr	r3, [pc, #24]	; (80071b4 <SysTick_Handler+0x3c>)
 800719c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071a0:	601a      	str	r2, [r3, #0]
 80071a2:	2300      	movs	r3, #0
 80071a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80071ac:	bf00      	nop
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	e000ed04 	.word	0xe000ed04

080071b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80071b8:	b480      	push	{r7}
 80071ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80071bc:	4b0b      	ldr	r3, [pc, #44]	; (80071ec <vPortSetupTimerInterrupt+0x34>)
 80071be:	2200      	movs	r2, #0
 80071c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80071c2:	4b0b      	ldr	r3, [pc, #44]	; (80071f0 <vPortSetupTimerInterrupt+0x38>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80071c8:	4b0a      	ldr	r3, [pc, #40]	; (80071f4 <vPortSetupTimerInterrupt+0x3c>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a0a      	ldr	r2, [pc, #40]	; (80071f8 <vPortSetupTimerInterrupt+0x40>)
 80071ce:	fba2 2303 	umull	r2, r3, r2, r3
 80071d2:	099b      	lsrs	r3, r3, #6
 80071d4:	4a09      	ldr	r2, [pc, #36]	; (80071fc <vPortSetupTimerInterrupt+0x44>)
 80071d6:	3b01      	subs	r3, #1
 80071d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80071da:	4b04      	ldr	r3, [pc, #16]	; (80071ec <vPortSetupTimerInterrupt+0x34>)
 80071dc:	2207      	movs	r2, #7
 80071de:	601a      	str	r2, [r3, #0]
}
 80071e0:	bf00      	nop
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	e000e010 	.word	0xe000e010
 80071f0:	e000e018 	.word	0xe000e018
 80071f4:	20000074 	.word	0x20000074
 80071f8:	10624dd3 	.word	0x10624dd3
 80071fc:	e000e014 	.word	0xe000e014

08007200 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007200:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007210 <vPortEnableVFP+0x10>
 8007204:	6801      	ldr	r1, [r0, #0]
 8007206:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800720a:	6001      	str	r1, [r0, #0]
 800720c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800720e:	bf00      	nop
 8007210:	e000ed88 	.word	0xe000ed88

08007214 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007214:	b580      	push	{r7, lr}
 8007216:	b08e      	sub	sp, #56	; 0x38
 8007218:	af04      	add	r7, sp, #16
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
 8007220:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007224:	2b00      	cmp	r3, #0
 8007226:	d109      	bne.n	800723c <xTaskCreateStatic+0x28>
	__asm volatile
 8007228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722c:	f383 8811 	msr	BASEPRI, r3
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	623b      	str	r3, [r7, #32]
 800723a:	e7fe      	b.n	800723a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800723c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723e:	2b00      	cmp	r3, #0
 8007240:	d109      	bne.n	8007256 <xTaskCreateStatic+0x42>
 8007242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007246:	f383 8811 	msr	BASEPRI, r3
 800724a:	f3bf 8f6f 	isb	sy
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	61fb      	str	r3, [r7, #28]
 8007254:	e7fe      	b.n	8007254 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007256:	2354      	movs	r3, #84	; 0x54
 8007258:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	2b54      	cmp	r3, #84	; 0x54
 800725e:	d009      	beq.n	8007274 <xTaskCreateStatic+0x60>
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	61bb      	str	r3, [r7, #24]
 8007272:	e7fe      	b.n	8007272 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007274:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007278:	2b00      	cmp	r3, #0
 800727a:	d01e      	beq.n	80072ba <xTaskCreateStatic+0xa6>
 800727c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800727e:	2b00      	cmp	r3, #0
 8007280:	d01b      	beq.n	80072ba <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007284:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007288:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800728a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	2202      	movs	r2, #2
 8007290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007294:	2300      	movs	r3, #0
 8007296:	9303      	str	r3, [sp, #12]
 8007298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729a:	9302      	str	r3, [sp, #8]
 800729c:	f107 0314 	add.w	r3, r7, #20
 80072a0:	9301      	str	r3, [sp, #4]
 80072a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	68b9      	ldr	r1, [r7, #8]
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 f850 	bl	8007352 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072b4:	f000 f8d4 	bl	8007460 <prvAddNewTaskToReadyList>
 80072b8:	e001      	b.n	80072be <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80072be:	697b      	ldr	r3, [r7, #20]
	}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3728      	adds	r7, #40	; 0x28
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b08c      	sub	sp, #48	; 0x30
 80072cc:	af04      	add	r7, sp, #16
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	603b      	str	r3, [r7, #0]
 80072d4:	4613      	mov	r3, r2
 80072d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80072d8:	88fb      	ldrh	r3, [r7, #6]
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4618      	mov	r0, r3
 80072de:	f7ff fb0b 	bl	80068f8 <pvPortMalloc>
 80072e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00e      	beq.n	8007308 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80072ea:	2054      	movs	r0, #84	; 0x54
 80072ec:	f7ff fb04 	bl	80068f8 <pvPortMalloc>
 80072f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d003      	beq.n	8007300 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	631a      	str	r2, [r3, #48]	; 0x30
 80072fe:	e005      	b.n	800730c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007300:	6978      	ldr	r0, [r7, #20]
 8007302:	f7ff fbbb 	bl	8006a7c <vPortFree>
 8007306:	e001      	b.n	800730c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007308:	2300      	movs	r3, #0
 800730a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d017      	beq.n	8007342 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800731a:	88fa      	ldrh	r2, [r7, #6]
 800731c:	2300      	movs	r3, #0
 800731e:	9303      	str	r3, [sp, #12]
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	9302      	str	r3, [sp, #8]
 8007324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007326:	9301      	str	r3, [sp, #4]
 8007328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	68b9      	ldr	r1, [r7, #8]
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f000 f80e 	bl	8007352 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007336:	69f8      	ldr	r0, [r7, #28]
 8007338:	f000 f892 	bl	8007460 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800733c:	2301      	movs	r3, #1
 800733e:	61bb      	str	r3, [r7, #24]
 8007340:	e002      	b.n	8007348 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007342:	f04f 33ff 	mov.w	r3, #4294967295
 8007346:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007348:	69bb      	ldr	r3, [r7, #24]
	}
 800734a:	4618      	mov	r0, r3
 800734c:	3720      	adds	r7, #32
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b088      	sub	sp, #32
 8007356:	af00      	add	r7, sp, #0
 8007358:	60f8      	str	r0, [r7, #12]
 800735a:	60b9      	str	r1, [r7, #8]
 800735c:	607a      	str	r2, [r7, #4]
 800735e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800736a:	3b01      	subs	r3, #1
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	f023 0307 	bic.w	r3, r3, #7
 8007378:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	f003 0307 	and.w	r3, r3, #7
 8007380:	2b00      	cmp	r3, #0
 8007382:	d009      	beq.n	8007398 <prvInitialiseNewTask+0x46>
 8007384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	617b      	str	r3, [r7, #20]
 8007396:	e7fe      	b.n	8007396 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d01f      	beq.n	80073de <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800739e:	2300      	movs	r3, #0
 80073a0:	61fb      	str	r3, [r7, #28]
 80073a2:	e012      	b.n	80073ca <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	4413      	add	r3, r2
 80073aa:	7819      	ldrb	r1, [r3, #0]
 80073ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	4413      	add	r3, r2
 80073b2:	3334      	adds	r3, #52	; 0x34
 80073b4:	460a      	mov	r2, r1
 80073b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	4413      	add	r3, r2
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d006      	beq.n	80073d2 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	3301      	adds	r3, #1
 80073c8:	61fb      	str	r3, [r7, #28]
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	2b0f      	cmp	r3, #15
 80073ce:	d9e9      	bls.n	80073a4 <prvInitialiseNewTask+0x52>
 80073d0:	e000      	b.n	80073d4 <prvInitialiseNewTask+0x82>
			{
				break;
 80073d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073dc:	e003      	b.n	80073e6 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80073de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e8:	2b06      	cmp	r3, #6
 80073ea:	d901      	bls.n	80073f0 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073ec:	2306      	movs	r3, #6
 80073ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073fa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80073fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fe:	2200      	movs	r2, #0
 8007400:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007404:	3304      	adds	r3, #4
 8007406:	4618      	mov	r0, r3
 8007408:	f7ff fc6c 	bl	8006ce4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800740c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740e:	3318      	adds	r3, #24
 8007410:	4618      	mov	r0, r3
 8007412:	f7ff fc67 	bl	8006ce4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800741a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800741c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741e:	f1c3 0207 	rsb	r2, r3, #7
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800742a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800742c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742e:	2200      	movs	r2, #0
 8007430:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	68f9      	ldr	r1, [r7, #12]
 800743e:	69b8      	ldr	r0, [r7, #24]
 8007440:	f7ff fce4 	bl	8006e0c <pxPortInitialiseStack>
 8007444:	4602      	mov	r2, r0
 8007446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007448:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800744a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007456:	bf00      	nop
 8007458:	3720      	adds	r7, #32
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
	...

08007460 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007468:	f7ff fdf8 	bl	800705c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800746c:	4b2a      	ldr	r3, [pc, #168]	; (8007518 <prvAddNewTaskToReadyList+0xb8>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3301      	adds	r3, #1
 8007472:	4a29      	ldr	r2, [pc, #164]	; (8007518 <prvAddNewTaskToReadyList+0xb8>)
 8007474:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007476:	4b29      	ldr	r3, [pc, #164]	; (800751c <prvAddNewTaskToReadyList+0xbc>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d109      	bne.n	8007492 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800747e:	4a27      	ldr	r2, [pc, #156]	; (800751c <prvAddNewTaskToReadyList+0xbc>)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007484:	4b24      	ldr	r3, [pc, #144]	; (8007518 <prvAddNewTaskToReadyList+0xb8>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d110      	bne.n	80074ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800748c:	f000 fab8 	bl	8007a00 <prvInitialiseTaskLists>
 8007490:	e00d      	b.n	80074ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007492:	4b23      	ldr	r3, [pc, #140]	; (8007520 <prvAddNewTaskToReadyList+0xc0>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d109      	bne.n	80074ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800749a:	4b20      	ldr	r3, [pc, #128]	; (800751c <prvAddNewTaskToReadyList+0xbc>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d802      	bhi.n	80074ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074a8:	4a1c      	ldr	r2, [pc, #112]	; (800751c <prvAddNewTaskToReadyList+0xbc>)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074ae:	4b1d      	ldr	r3, [pc, #116]	; (8007524 <prvAddNewTaskToReadyList+0xc4>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	3301      	adds	r3, #1
 80074b4:	4a1b      	ldr	r2, [pc, #108]	; (8007524 <prvAddNewTaskToReadyList+0xc4>)
 80074b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	2201      	movs	r2, #1
 80074be:	409a      	lsls	r2, r3
 80074c0:	4b19      	ldr	r3, [pc, #100]	; (8007528 <prvAddNewTaskToReadyList+0xc8>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	4a18      	ldr	r2, [pc, #96]	; (8007528 <prvAddNewTaskToReadyList+0xc8>)
 80074c8:	6013      	str	r3, [r2, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ce:	4613      	mov	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4a15      	ldr	r2, [pc, #84]	; (800752c <prvAddNewTaskToReadyList+0xcc>)
 80074d8:	441a      	add	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	3304      	adds	r3, #4
 80074de:	4619      	mov	r1, r3
 80074e0:	4610      	mov	r0, r2
 80074e2:	f7ff fc0c 	bl	8006cfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074e6:	f7ff fde7 	bl	80070b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074ea:	4b0d      	ldr	r3, [pc, #52]	; (8007520 <prvAddNewTaskToReadyList+0xc0>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00e      	beq.n	8007510 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074f2:	4b0a      	ldr	r3, [pc, #40]	; (800751c <prvAddNewTaskToReadyList+0xbc>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d207      	bcs.n	8007510 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007500:	4b0b      	ldr	r3, [pc, #44]	; (8007530 <prvAddNewTaskToReadyList+0xd0>)
 8007502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007510:	bf00      	nop
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	200041b4 	.word	0x200041b4
 800751c:	200040b4 	.word	0x200040b4
 8007520:	200041c0 	.word	0x200041c0
 8007524:	200041d0 	.word	0x200041d0
 8007528:	200041bc 	.word	0x200041bc
 800752c:	200040b8 	.word	0x200040b8
 8007530:	e000ed04 	.word	0xe000ed04

08007534 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800753c:	2300      	movs	r3, #0
 800753e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d016      	beq.n	8007574 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007546:	4b13      	ldr	r3, [pc, #76]	; (8007594 <vTaskDelay+0x60>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d009      	beq.n	8007562 <vTaskDelay+0x2e>
 800754e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	60bb      	str	r3, [r7, #8]
 8007560:	e7fe      	b.n	8007560 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007562:	f000 f879 	bl	8007658 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007566:	2100      	movs	r1, #0
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fb03 	bl	8007b74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800756e:	f000 f881 	bl	8007674 <xTaskResumeAll>
 8007572:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d107      	bne.n	800758a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800757a:	4b07      	ldr	r3, [pc, #28]	; (8007598 <vTaskDelay+0x64>)
 800757c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800758a:	bf00      	nop
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	200041dc 	.word	0x200041dc
 8007598:	e000ed04 	.word	0xe000ed04

0800759c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b08a      	sub	sp, #40	; 0x28
 80075a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80075a2:	2300      	movs	r3, #0
 80075a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80075aa:	463a      	mov	r2, r7
 80075ac:	1d39      	adds	r1, r7, #4
 80075ae:	f107 0308 	add.w	r3, r7, #8
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7f8 ffb4 	bl	8000520 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	9202      	str	r2, [sp, #8]
 80075c0:	9301      	str	r3, [sp, #4]
 80075c2:	2300      	movs	r3, #0
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	2300      	movs	r3, #0
 80075c8:	460a      	mov	r2, r1
 80075ca:	491d      	ldr	r1, [pc, #116]	; (8007640 <vTaskStartScheduler+0xa4>)
 80075cc:	481d      	ldr	r0, [pc, #116]	; (8007644 <vTaskStartScheduler+0xa8>)
 80075ce:	f7ff fe21 	bl	8007214 <xTaskCreateStatic>
 80075d2:	4602      	mov	r2, r0
 80075d4:	4b1c      	ldr	r3, [pc, #112]	; (8007648 <vTaskStartScheduler+0xac>)
 80075d6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80075d8:	4b1b      	ldr	r3, [pc, #108]	; (8007648 <vTaskStartScheduler+0xac>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80075e0:	2301      	movs	r3, #1
 80075e2:	617b      	str	r3, [r7, #20]
 80075e4:	e001      	b.n	80075ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80075e6:	2300      	movs	r3, #0
 80075e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d115      	bne.n	800761c <vTaskStartScheduler+0x80>
 80075f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007602:	4b12      	ldr	r3, [pc, #72]	; (800764c <vTaskStartScheduler+0xb0>)
 8007604:	f04f 32ff 	mov.w	r2, #4294967295
 8007608:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800760a:	4b11      	ldr	r3, [pc, #68]	; (8007650 <vTaskStartScheduler+0xb4>)
 800760c:	2201      	movs	r2, #1
 800760e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007610:	4b10      	ldr	r3, [pc, #64]	; (8007654 <vTaskStartScheduler+0xb8>)
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007616:	f7ff fc83 	bl	8006f20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800761a:	e00d      	b.n	8007638 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007622:	d109      	bne.n	8007638 <vTaskStartScheduler+0x9c>
 8007624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007628:	f383 8811 	msr	BASEPRI, r3
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	60fb      	str	r3, [r7, #12]
 8007636:	e7fe      	b.n	8007636 <vTaskStartScheduler+0x9a>
}
 8007638:	bf00      	nop
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	08009684 	.word	0x08009684
 8007644:	080079d1 	.word	0x080079d1
 8007648:	200041d8 	.word	0x200041d8
 800764c:	200041d4 	.word	0x200041d4
 8007650:	200041c0 	.word	0x200041c0
 8007654:	200041b8 	.word	0x200041b8

08007658 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007658:	b480      	push	{r7}
 800765a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800765c:	4b04      	ldr	r3, [pc, #16]	; (8007670 <vTaskSuspendAll+0x18>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	3301      	adds	r3, #1
 8007662:	4a03      	ldr	r2, [pc, #12]	; (8007670 <vTaskSuspendAll+0x18>)
 8007664:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007666:	bf00      	nop
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	200041dc 	.word	0x200041dc

08007674 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800767a:	2300      	movs	r3, #0
 800767c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800767e:	2300      	movs	r3, #0
 8007680:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007682:	4b41      	ldr	r3, [pc, #260]	; (8007788 <xTaskResumeAll+0x114>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d109      	bne.n	800769e <xTaskResumeAll+0x2a>
 800768a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	603b      	str	r3, [r7, #0]
 800769c:	e7fe      	b.n	800769c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800769e:	f7ff fcdd 	bl	800705c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80076a2:	4b39      	ldr	r3, [pc, #228]	; (8007788 <xTaskResumeAll+0x114>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3b01      	subs	r3, #1
 80076a8:	4a37      	ldr	r2, [pc, #220]	; (8007788 <xTaskResumeAll+0x114>)
 80076aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076ac:	4b36      	ldr	r3, [pc, #216]	; (8007788 <xTaskResumeAll+0x114>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d161      	bne.n	8007778 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80076b4:	4b35      	ldr	r3, [pc, #212]	; (800778c <xTaskResumeAll+0x118>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d05d      	beq.n	8007778 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076bc:	e02e      	b.n	800771c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076be:	4b34      	ldr	r3, [pc, #208]	; (8007790 <xTaskResumeAll+0x11c>)
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	3318      	adds	r3, #24
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7ff fb74 	bl	8006db8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	3304      	adds	r3, #4
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7ff fb6f 	bl	8006db8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076de:	2201      	movs	r2, #1
 80076e0:	409a      	lsls	r2, r3
 80076e2:	4b2c      	ldr	r3, [pc, #176]	; (8007794 <xTaskResumeAll+0x120>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	4a2a      	ldr	r2, [pc, #168]	; (8007794 <xTaskResumeAll+0x120>)
 80076ea:	6013      	str	r3, [r2, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f0:	4613      	mov	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4413      	add	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4a27      	ldr	r2, [pc, #156]	; (8007798 <xTaskResumeAll+0x124>)
 80076fa:	441a      	add	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3304      	adds	r3, #4
 8007700:	4619      	mov	r1, r3
 8007702:	4610      	mov	r0, r2
 8007704:	f7ff fafb 	bl	8006cfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800770c:	4b23      	ldr	r3, [pc, #140]	; (800779c <xTaskResumeAll+0x128>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007712:	429a      	cmp	r2, r3
 8007714:	d302      	bcc.n	800771c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8007716:	4b22      	ldr	r3, [pc, #136]	; (80077a0 <xTaskResumeAll+0x12c>)
 8007718:	2201      	movs	r2, #1
 800771a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800771c:	4b1c      	ldr	r3, [pc, #112]	; (8007790 <xTaskResumeAll+0x11c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1cc      	bne.n	80076be <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800772a:	f000 fa03 	bl	8007b34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800772e:	4b1d      	ldr	r3, [pc, #116]	; (80077a4 <xTaskResumeAll+0x130>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d010      	beq.n	800775c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800773a:	f000 f837 	bl	80077ac <xTaskIncrementTick>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007744:	4b16      	ldr	r3, [pc, #88]	; (80077a0 <xTaskResumeAll+0x12c>)
 8007746:	2201      	movs	r2, #1
 8007748:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	3b01      	subs	r3, #1
 800774e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1f1      	bne.n	800773a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007756:	4b13      	ldr	r3, [pc, #76]	; (80077a4 <xTaskResumeAll+0x130>)
 8007758:	2200      	movs	r2, #0
 800775a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800775c:	4b10      	ldr	r3, [pc, #64]	; (80077a0 <xTaskResumeAll+0x12c>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d009      	beq.n	8007778 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007764:	2301      	movs	r3, #1
 8007766:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007768:	4b0f      	ldr	r3, [pc, #60]	; (80077a8 <xTaskResumeAll+0x134>)
 800776a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800776e:	601a      	str	r2, [r3, #0]
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007778:	f7ff fc9e 	bl	80070b8 <vPortExitCritical>

	return xAlreadyYielded;
 800777c:	68bb      	ldr	r3, [r7, #8]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	200041dc 	.word	0x200041dc
 800778c:	200041b4 	.word	0x200041b4
 8007790:	20004174 	.word	0x20004174
 8007794:	200041bc 	.word	0x200041bc
 8007798:	200040b8 	.word	0x200040b8
 800779c:	200040b4 	.word	0x200040b4
 80077a0:	200041c8 	.word	0x200041c8
 80077a4:	200041c4 	.word	0x200041c4
 80077a8:	e000ed04 	.word	0xe000ed04

080077ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80077b2:	2300      	movs	r3, #0
 80077b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077b6:	4b4e      	ldr	r3, [pc, #312]	; (80078f0 <xTaskIncrementTick+0x144>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f040 8087 	bne.w	80078ce <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80077c0:	4b4c      	ldr	r3, [pc, #304]	; (80078f4 <xTaskIncrementTick+0x148>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3301      	adds	r3, #1
 80077c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80077c8:	4a4a      	ldr	r2, [pc, #296]	; (80078f4 <xTaskIncrementTick+0x148>)
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d11f      	bne.n	8007814 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80077d4:	4b48      	ldr	r3, [pc, #288]	; (80078f8 <xTaskIncrementTick+0x14c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d009      	beq.n	80077f2 <xTaskIncrementTick+0x46>
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	603b      	str	r3, [r7, #0]
 80077f0:	e7fe      	b.n	80077f0 <xTaskIncrementTick+0x44>
 80077f2:	4b41      	ldr	r3, [pc, #260]	; (80078f8 <xTaskIncrementTick+0x14c>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	60fb      	str	r3, [r7, #12]
 80077f8:	4b40      	ldr	r3, [pc, #256]	; (80078fc <xTaskIncrementTick+0x150>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a3e      	ldr	r2, [pc, #248]	; (80078f8 <xTaskIncrementTick+0x14c>)
 80077fe:	6013      	str	r3, [r2, #0]
 8007800:	4a3e      	ldr	r2, [pc, #248]	; (80078fc <xTaskIncrementTick+0x150>)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6013      	str	r3, [r2, #0]
 8007806:	4b3e      	ldr	r3, [pc, #248]	; (8007900 <xTaskIncrementTick+0x154>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3301      	adds	r3, #1
 800780c:	4a3c      	ldr	r2, [pc, #240]	; (8007900 <xTaskIncrementTick+0x154>)
 800780e:	6013      	str	r3, [r2, #0]
 8007810:	f000 f990 	bl	8007b34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007814:	4b3b      	ldr	r3, [pc, #236]	; (8007904 <xTaskIncrementTick+0x158>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	429a      	cmp	r2, r3
 800781c:	d348      	bcc.n	80078b0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800781e:	4b36      	ldr	r3, [pc, #216]	; (80078f8 <xTaskIncrementTick+0x14c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d104      	bne.n	8007832 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007828:	4b36      	ldr	r3, [pc, #216]	; (8007904 <xTaskIncrementTick+0x158>)
 800782a:	f04f 32ff 	mov.w	r2, #4294967295
 800782e:	601a      	str	r2, [r3, #0]
					break;
 8007830:	e03e      	b.n	80078b0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007832:	4b31      	ldr	r3, [pc, #196]	; (80078f8 <xTaskIncrementTick+0x14c>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007842:	693a      	ldr	r2, [r7, #16]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	429a      	cmp	r2, r3
 8007848:	d203      	bcs.n	8007852 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800784a:	4a2e      	ldr	r2, [pc, #184]	; (8007904 <xTaskIncrementTick+0x158>)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007850:	e02e      	b.n	80078b0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	3304      	adds	r3, #4
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff faae 	bl	8006db8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007860:	2b00      	cmp	r3, #0
 8007862:	d004      	beq.n	800786e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	3318      	adds	r3, #24
 8007868:	4618      	mov	r0, r3
 800786a:	f7ff faa5 	bl	8006db8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007872:	2201      	movs	r2, #1
 8007874:	409a      	lsls	r2, r3
 8007876:	4b24      	ldr	r3, [pc, #144]	; (8007908 <xTaskIncrementTick+0x15c>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4313      	orrs	r3, r2
 800787c:	4a22      	ldr	r2, [pc, #136]	; (8007908 <xTaskIncrementTick+0x15c>)
 800787e:	6013      	str	r3, [r2, #0]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007884:	4613      	mov	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4a1f      	ldr	r2, [pc, #124]	; (800790c <xTaskIncrementTick+0x160>)
 800788e:	441a      	add	r2, r3
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	3304      	adds	r3, #4
 8007894:	4619      	mov	r1, r3
 8007896:	4610      	mov	r0, r2
 8007898:	f7ff fa31 	bl	8006cfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a0:	4b1b      	ldr	r3, [pc, #108]	; (8007910 <xTaskIncrementTick+0x164>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d3b9      	bcc.n	800781e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80078aa:	2301      	movs	r3, #1
 80078ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078ae:	e7b6      	b.n	800781e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80078b0:	4b17      	ldr	r3, [pc, #92]	; (8007910 <xTaskIncrementTick+0x164>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b6:	4915      	ldr	r1, [pc, #84]	; (800790c <xTaskIncrementTick+0x160>)
 80078b8:	4613      	mov	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	4413      	add	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	440b      	add	r3, r1
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d907      	bls.n	80078d8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80078c8:	2301      	movs	r3, #1
 80078ca:	617b      	str	r3, [r7, #20]
 80078cc:	e004      	b.n	80078d8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80078ce:	4b11      	ldr	r3, [pc, #68]	; (8007914 <xTaskIncrementTick+0x168>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3301      	adds	r3, #1
 80078d4:	4a0f      	ldr	r2, [pc, #60]	; (8007914 <xTaskIncrementTick+0x168>)
 80078d6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80078d8:	4b0f      	ldr	r3, [pc, #60]	; (8007918 <xTaskIncrementTick+0x16c>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80078e0:	2301      	movs	r3, #1
 80078e2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80078e4:	697b      	ldr	r3, [r7, #20]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	200041dc 	.word	0x200041dc
 80078f4:	200041b8 	.word	0x200041b8
 80078f8:	2000416c 	.word	0x2000416c
 80078fc:	20004170 	.word	0x20004170
 8007900:	200041cc 	.word	0x200041cc
 8007904:	200041d4 	.word	0x200041d4
 8007908:	200041bc 	.word	0x200041bc
 800790c:	200040b8 	.word	0x200040b8
 8007910:	200040b4 	.word	0x200040b4
 8007914:	200041c4 	.word	0x200041c4
 8007918:	200041c8 	.word	0x200041c8

0800791c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800791c:	b480      	push	{r7}
 800791e:	b087      	sub	sp, #28
 8007920:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007922:	4b26      	ldr	r3, [pc, #152]	; (80079bc <vTaskSwitchContext+0xa0>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d003      	beq.n	8007932 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800792a:	4b25      	ldr	r3, [pc, #148]	; (80079c0 <vTaskSwitchContext+0xa4>)
 800792c:	2201      	movs	r2, #1
 800792e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007930:	e03e      	b.n	80079b0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007932:	4b23      	ldr	r3, [pc, #140]	; (80079c0 <vTaskSwitchContext+0xa4>)
 8007934:	2200      	movs	r2, #0
 8007936:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007938:	4b22      	ldr	r3, [pc, #136]	; (80079c4 <vTaskSwitchContext+0xa8>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	fab3 f383 	clz	r3, r3
 8007944:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007946:	7afb      	ldrb	r3, [r7, #11]
 8007948:	f1c3 031f 	rsb	r3, r3, #31
 800794c:	617b      	str	r3, [r7, #20]
 800794e:	491e      	ldr	r1, [pc, #120]	; (80079c8 <vTaskSwitchContext+0xac>)
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	4613      	mov	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4413      	add	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	440b      	add	r3, r1
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d109      	bne.n	8007976 <vTaskSwitchContext+0x5a>
	__asm volatile
 8007962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	607b      	str	r3, [r7, #4]
 8007974:	e7fe      	b.n	8007974 <vTaskSwitchContext+0x58>
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	4613      	mov	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4413      	add	r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4a11      	ldr	r2, [pc, #68]	; (80079c8 <vTaskSwitchContext+0xac>)
 8007982:	4413      	add	r3, r2
 8007984:	613b      	str	r3, [r7, #16]
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	605a      	str	r2, [r3, #4]
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	3308      	adds	r3, #8
 8007998:	429a      	cmp	r2, r3
 800799a:	d104      	bne.n	80079a6 <vTaskSwitchContext+0x8a>
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	685a      	ldr	r2, [r3, #4]
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	605a      	str	r2, [r3, #4]
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	4a07      	ldr	r2, [pc, #28]	; (80079cc <vTaskSwitchContext+0xb0>)
 80079ae:	6013      	str	r3, [r2, #0]
}
 80079b0:	bf00      	nop
 80079b2:	371c      	adds	r7, #28
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	200041dc 	.word	0x200041dc
 80079c0:	200041c8 	.word	0x200041c8
 80079c4:	200041bc 	.word	0x200041bc
 80079c8:	200040b8 	.word	0x200040b8
 80079cc:	200040b4 	.word	0x200040b4

080079d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80079d8:	f000 f852 	bl	8007a80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80079dc:	4b06      	ldr	r3, [pc, #24]	; (80079f8 <prvIdleTask+0x28>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d9f9      	bls.n	80079d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80079e4:	4b05      	ldr	r3, [pc, #20]	; (80079fc <prvIdleTask+0x2c>)
 80079e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80079f4:	e7f0      	b.n	80079d8 <prvIdleTask+0x8>
 80079f6:	bf00      	nop
 80079f8:	200040b8 	.word	0x200040b8
 80079fc:	e000ed04 	.word	0xe000ed04

08007a00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a06:	2300      	movs	r3, #0
 8007a08:	607b      	str	r3, [r7, #4]
 8007a0a:	e00c      	b.n	8007a26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4413      	add	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4a12      	ldr	r2, [pc, #72]	; (8007a60 <prvInitialiseTaskLists+0x60>)
 8007a18:	4413      	add	r3, r2
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7ff f942 	bl	8006ca4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	3301      	adds	r3, #1
 8007a24:	607b      	str	r3, [r7, #4]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b06      	cmp	r3, #6
 8007a2a:	d9ef      	bls.n	8007a0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a2c:	480d      	ldr	r0, [pc, #52]	; (8007a64 <prvInitialiseTaskLists+0x64>)
 8007a2e:	f7ff f939 	bl	8006ca4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a32:	480d      	ldr	r0, [pc, #52]	; (8007a68 <prvInitialiseTaskLists+0x68>)
 8007a34:	f7ff f936 	bl	8006ca4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a38:	480c      	ldr	r0, [pc, #48]	; (8007a6c <prvInitialiseTaskLists+0x6c>)
 8007a3a:	f7ff f933 	bl	8006ca4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a3e:	480c      	ldr	r0, [pc, #48]	; (8007a70 <prvInitialiseTaskLists+0x70>)
 8007a40:	f7ff f930 	bl	8006ca4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a44:	480b      	ldr	r0, [pc, #44]	; (8007a74 <prvInitialiseTaskLists+0x74>)
 8007a46:	f7ff f92d 	bl	8006ca4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a4a:	4b0b      	ldr	r3, [pc, #44]	; (8007a78 <prvInitialiseTaskLists+0x78>)
 8007a4c:	4a05      	ldr	r2, [pc, #20]	; (8007a64 <prvInitialiseTaskLists+0x64>)
 8007a4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a50:	4b0a      	ldr	r3, [pc, #40]	; (8007a7c <prvInitialiseTaskLists+0x7c>)
 8007a52:	4a05      	ldr	r2, [pc, #20]	; (8007a68 <prvInitialiseTaskLists+0x68>)
 8007a54:	601a      	str	r2, [r3, #0]
}
 8007a56:	bf00      	nop
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	200040b8 	.word	0x200040b8
 8007a64:	20004144 	.word	0x20004144
 8007a68:	20004158 	.word	0x20004158
 8007a6c:	20004174 	.word	0x20004174
 8007a70:	20004188 	.word	0x20004188
 8007a74:	200041a0 	.word	0x200041a0
 8007a78:	2000416c 	.word	0x2000416c
 8007a7c:	20004170 	.word	0x20004170

08007a80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a86:	e019      	b.n	8007abc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a88:	f7ff fae8 	bl	800705c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a8c:	4b0f      	ldr	r3, [pc, #60]	; (8007acc <prvCheckTasksWaitingTermination+0x4c>)
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	3304      	adds	r3, #4
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7ff f98d 	bl	8006db8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a9e:	4b0c      	ldr	r3, [pc, #48]	; (8007ad0 <prvCheckTasksWaitingTermination+0x50>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	4a0a      	ldr	r2, [pc, #40]	; (8007ad0 <prvCheckTasksWaitingTermination+0x50>)
 8007aa6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007aa8:	4b0a      	ldr	r3, [pc, #40]	; (8007ad4 <prvCheckTasksWaitingTermination+0x54>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3b01      	subs	r3, #1
 8007aae:	4a09      	ldr	r2, [pc, #36]	; (8007ad4 <prvCheckTasksWaitingTermination+0x54>)
 8007ab0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ab2:	f7ff fb01 	bl	80070b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f80e 	bl	8007ad8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007abc:	4b05      	ldr	r3, [pc, #20]	; (8007ad4 <prvCheckTasksWaitingTermination+0x54>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e1      	bne.n	8007a88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ac4:	bf00      	nop
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	20004188 	.word	0x20004188
 8007ad0:	200041b4 	.word	0x200041b4
 8007ad4:	2000419c 	.word	0x2000419c

08007ad8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d108      	bne.n	8007afc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fe ffc4 	bl	8006a7c <vPortFree>
				vPortFree( pxTCB );
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7fe ffc1 	bl	8006a7c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007afa:	e017      	b.n	8007b2c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d103      	bne.n	8007b0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7fe ffb8 	bl	8006a7c <vPortFree>
	}
 8007b0c:	e00e      	b.n	8007b2c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d009      	beq.n	8007b2c <prvDeleteTCB+0x54>
 8007b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1c:	f383 8811 	msr	BASEPRI, r3
 8007b20:	f3bf 8f6f 	isb	sy
 8007b24:	f3bf 8f4f 	dsb	sy
 8007b28:	60fb      	str	r3, [r7, #12]
 8007b2a:	e7fe      	b.n	8007b2a <prvDeleteTCB+0x52>
	}
 8007b2c:	bf00      	nop
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b3a:	4b0c      	ldr	r3, [pc, #48]	; (8007b6c <prvResetNextTaskUnblockTime+0x38>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d104      	bne.n	8007b4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b44:	4b0a      	ldr	r3, [pc, #40]	; (8007b70 <prvResetNextTaskUnblockTime+0x3c>)
 8007b46:	f04f 32ff 	mov.w	r2, #4294967295
 8007b4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b4c:	e008      	b.n	8007b60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b4e:	4b07      	ldr	r3, [pc, #28]	; (8007b6c <prvResetNextTaskUnblockTime+0x38>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	4a04      	ldr	r2, [pc, #16]	; (8007b70 <prvResetNextTaskUnblockTime+0x3c>)
 8007b5e:	6013      	str	r3, [r2, #0]
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	2000416c 	.word	0x2000416c
 8007b70:	200041d4 	.word	0x200041d4

08007b74 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b7e:	4b29      	ldr	r3, [pc, #164]	; (8007c24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b84:	4b28      	ldr	r3, [pc, #160]	; (8007c28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3304      	adds	r3, #4
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7ff f914 	bl	8006db8 <uxListRemove>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10b      	bne.n	8007bae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007b96:	4b24      	ldr	r3, [pc, #144]	; (8007c28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba2:	43da      	mvns	r2, r3
 8007ba4:	4b21      	ldr	r3, [pc, #132]	; (8007c2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4013      	ands	r3, r2
 8007baa:	4a20      	ldr	r2, [pc, #128]	; (8007c2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007bac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb4:	d10a      	bne.n	8007bcc <prvAddCurrentTaskToDelayedList+0x58>
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d007      	beq.n	8007bcc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bbc:	4b1a      	ldr	r3, [pc, #104]	; (8007c28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	481a      	ldr	r0, [pc, #104]	; (8007c30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007bc6:	f7ff f89a 	bl	8006cfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007bca:	e026      	b.n	8007c1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007bd4:	4b14      	ldr	r3, [pc, #80]	; (8007c28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d209      	bcs.n	8007bf8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007be4:	4b13      	ldr	r3, [pc, #76]	; (8007c34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	4b0f      	ldr	r3, [pc, #60]	; (8007c28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	3304      	adds	r3, #4
 8007bee:	4619      	mov	r1, r3
 8007bf0:	4610      	mov	r0, r2
 8007bf2:	f7ff f8a8 	bl	8006d46 <vListInsert>
}
 8007bf6:	e010      	b.n	8007c1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bf8:	4b0f      	ldr	r3, [pc, #60]	; (8007c38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	4b0a      	ldr	r3, [pc, #40]	; (8007c28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	3304      	adds	r3, #4
 8007c02:	4619      	mov	r1, r3
 8007c04:	4610      	mov	r0, r2
 8007c06:	f7ff f89e 	bl	8006d46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c0a:	4b0c      	ldr	r3, [pc, #48]	; (8007c3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d202      	bcs.n	8007c1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007c14:	4a09      	ldr	r2, [pc, #36]	; (8007c3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	6013      	str	r3, [r2, #0]
}
 8007c1a:	bf00      	nop
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	200041b8 	.word	0x200041b8
 8007c28:	200040b4 	.word	0x200040b4
 8007c2c:	200041bc 	.word	0x200041bc
 8007c30:	200041a0 	.word	0x200041a0
 8007c34:	20004170 	.word	0x20004170
 8007c38:	2000416c 	.word	0x2000416c
 8007c3c:	200041d4 	.word	0x200041d4

08007c40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007c4c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007c50:	f001 fbfc 	bl	800944c <malloc>
 8007c54:	4603      	mov	r3, r0
 8007c56:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d105      	bne.n	8007c6a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007c66:	2302      	movs	r3, #2
 8007c68:	e066      	b.n	8007d38 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	7c1b      	ldrb	r3, [r3, #16]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d119      	bne.n	8007cae <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c7e:	2202      	movs	r2, #2
 8007c80:	2181      	movs	r1, #129	; 0x81
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7f9 fc69 	bl	800155a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c92:	2202      	movs	r2, #2
 8007c94:	2101      	movs	r1, #1
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7f9 fc5f 	bl	800155a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2210      	movs	r2, #16
 8007ca8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007cac:	e016      	b.n	8007cdc <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007cae:	2340      	movs	r3, #64	; 0x40
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	2181      	movs	r1, #129	; 0x81
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f7f9 fc50 	bl	800155a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007cc0:	2340      	movs	r3, #64	; 0x40
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	2101      	movs	r1, #1
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f7f9 fc47 	bl	800155a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2210      	movs	r2, #16
 8007cd8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007cdc:	2308      	movs	r3, #8
 8007cde:	2203      	movs	r2, #3
 8007ce0:	2182      	movs	r1, #130	; 0x82
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7f9 fc39 	bl	800155a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	7c1b      	ldrb	r3, [r3, #16]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d109      	bne.n	8007d26 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7f9 fd0a 	bl	8001738 <USBD_LL_PrepareReceive>
 8007d24:	e007      	b.n	8007d36 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d2c:	2340      	movs	r3, #64	; 0x40
 8007d2e:	2101      	movs	r1, #1
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f7f9 fd01 	bl	8001738 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	460b      	mov	r3, r1
 8007d4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007d50:	2181      	movs	r1, #129	; 0x81
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7f9 fc27 	bl	80015a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007d5e:	2101      	movs	r1, #1
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7f9 fc20 	bl	80015a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007d6e:	2182      	movs	r1, #130	; 0x82
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f7f9 fc18 	bl	80015a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00e      	beq.n	8007dae <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007da0:	4618      	mov	r0, r3
 8007da2:	f001 fb5b 	bl	800945c <free>
    pdev->pClassData = NULL;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dc8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d03a      	beq.n	8007e58 <USBD_CDC_Setup+0xa0>
 8007de2:	2b20      	cmp	r3, #32
 8007de4:	f040 8097 	bne.w	8007f16 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	88db      	ldrh	r3, [r3, #6]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d029      	beq.n	8007e44 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	b25b      	sxtb	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	da11      	bge.n	8007e1e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007e06:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	88d2      	ldrh	r2, [r2, #6]
 8007e0c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007e0e:	6939      	ldr	r1, [r7, #16]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	88db      	ldrh	r3, [r3, #6]
 8007e14:	461a      	mov	r2, r3
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f001 fa6d 	bl	80092f6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007e1c:	e082      	b.n	8007f24 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	785a      	ldrb	r2, [r3, #1]
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	88db      	ldrh	r3, [r3, #6]
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007e34:	6939      	ldr	r1, [r7, #16]
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	88db      	ldrh	r3, [r3, #6]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f001 fa86 	bl	800934e <USBD_CtlPrepareRx>
    break;
 8007e42:	e06f      	b.n	8007f24 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	7850      	ldrb	r0, [r2, #1]
 8007e50:	2200      	movs	r2, #0
 8007e52:	6839      	ldr	r1, [r7, #0]
 8007e54:	4798      	blx	r3
    break;
 8007e56:	e065      	b.n	8007f24 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	785b      	ldrb	r3, [r3, #1]
 8007e5c:	2b0b      	cmp	r3, #11
 8007e5e:	d84f      	bhi.n	8007f00 <USBD_CDC_Setup+0x148>
 8007e60:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <USBD_CDC_Setup+0xb0>)
 8007e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e66:	bf00      	nop
 8007e68:	08007e99 	.word	0x08007e99
 8007e6c:	08007f0f 	.word	0x08007f0f
 8007e70:	08007f01 	.word	0x08007f01
 8007e74:	08007f01 	.word	0x08007f01
 8007e78:	08007f01 	.word	0x08007f01
 8007e7c:	08007f01 	.word	0x08007f01
 8007e80:	08007f01 	.word	0x08007f01
 8007e84:	08007f01 	.word	0x08007f01
 8007e88:	08007f01 	.word	0x08007f01
 8007e8c:	08007f01 	.word	0x08007f01
 8007e90:	08007ec1 	.word	0x08007ec1
 8007e94:	08007ee9 	.word	0x08007ee9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d107      	bne.n	8007eb2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ea2:	f107 030c 	add.w	r3, r7, #12
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f001 fa23 	bl	80092f6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007eb0:	e030      	b.n	8007f14 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f001 f9ad 	bl	8009214 <USBD_CtlError>
        ret = USBD_FAIL;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	75fb      	strb	r3, [r7, #23]
      break;
 8007ebe:	e029      	b.n	8007f14 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d107      	bne.n	8007eda <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007eca:	f107 030f 	add.w	r3, r7, #15
 8007ece:	2201      	movs	r2, #1
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f001 fa0f 	bl	80092f6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007ed8:	e01c      	b.n	8007f14 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f001 f999 	bl	8009214 <USBD_CtlError>
        ret = USBD_FAIL;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ee6:	e015      	b.n	8007f14 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eee:	2b03      	cmp	r3, #3
 8007ef0:	d00f      	beq.n	8007f12 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f001 f98d 	bl	8009214 <USBD_CtlError>
        ret = USBD_FAIL;
 8007efa:	2303      	movs	r3, #3
 8007efc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007efe:	e008      	b.n	8007f12 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f001 f986 	bl	8009214 <USBD_CtlError>
      ret = USBD_FAIL;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f0c:	e002      	b.n	8007f14 <USBD_CDC_Setup+0x15c>
      break;
 8007f0e:	bf00      	nop
 8007f10:	e008      	b.n	8007f24 <USBD_CDC_Setup+0x16c>
      break;
 8007f12:	bf00      	nop
    }
    break;
 8007f14:	e006      	b.n	8007f24 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007f16:	6839      	ldr	r1, [r7, #0]
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f001 f97b 	bl	8009214 <USBD_CtlError>
    ret = USBD_FAIL;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	75fb      	strb	r3, [r7, #23]
    break;
 8007f22:	bf00      	nop
  }

  return (uint8_t)ret;
 8007f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3718      	adds	r7, #24
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop

08007f30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e049      	b.n	8007fe6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007f5a:	78fa      	ldrb	r2, [r7, #3]
 8007f5c:	6879      	ldr	r1, [r7, #4]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4413      	add	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	440b      	add	r3, r1
 8007f68:	3318      	adds	r3, #24
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d029      	beq.n	8007fc4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007f70:	78fa      	ldrb	r2, [r7, #3]
 8007f72:	6879      	ldr	r1, [r7, #4]
 8007f74:	4613      	mov	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4413      	add	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	440b      	add	r3, r1
 8007f7e:	3318      	adds	r3, #24
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	78f9      	ldrb	r1, [r7, #3]
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	460b      	mov	r3, r1
 8007f88:	00db      	lsls	r3, r3, #3
 8007f8a:	1a5b      	subs	r3, r3, r1
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4403      	add	r3, r0
 8007f90:	3344      	adds	r3, #68	; 0x44
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f98:	fb03 f301 	mul.w	r3, r3, r1
 8007f9c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d110      	bne.n	8007fc4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007fa2:	78fa      	ldrb	r2, [r7, #3]
 8007fa4:	6879      	ldr	r1, [r7, #4]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	440b      	add	r3, r1
 8007fb0:	3318      	adds	r3, #24
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007fb6:	78f9      	ldrb	r1, [r7, #3]
 8007fb8:	2300      	movs	r3, #0
 8007fba:	2200      	movs	r2, #0
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7f9 fb9a 	bl	80016f6 <USBD_LL_Transmit>
 8007fc2:	e00f      	b.n	8007fe4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007fe0:	78fa      	ldrb	r2, [r7, #3]
 8007fe2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b084      	sub	sp, #16
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008000:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800800c:	2303      	movs	r3, #3
 800800e:	e015      	b.n	800803c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008010:	78fb      	ldrb	r3, [r7, #3]
 8008012:	4619      	mov	r1, r3
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f7f9 fbb0 	bl	800177a <USBD_LL_GetRxDataSize>
 800801a:	4602      	mov	r2, r0
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008036:	4611      	mov	r1, r2
 8008038:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008052:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d015      	beq.n	800808a <USBD_CDC_EP0_RxReady+0x46>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008064:	2bff      	cmp	r3, #255	; 0xff
 8008066:	d010      	beq.n	800808a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008076:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800807e:	b292      	uxth	r2, r2
 8008080:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	22ff      	movs	r2, #255	; 0xff
 8008086:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2243      	movs	r2, #67	; 0x43
 80080a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80080a2:	4b03      	ldr	r3, [pc, #12]	; (80080b0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr
 80080b0:	2000010c 	.word	0x2000010c

080080b4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2243      	movs	r2, #67	; 0x43
 80080c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80080c2:	4b03      	ldr	r3, [pc, #12]	; (80080d0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	200000c8 	.word	0x200000c8

080080d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2243      	movs	r2, #67	; 0x43
 80080e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80080e2:	4b03      	ldr	r3, [pc, #12]	; (80080f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr
 80080f0:	20000150 	.word	0x20000150

080080f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	220a      	movs	r2, #10
 8008100:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008102:	4b03      	ldr	r3, [pc, #12]	; (8008110 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008104:	4618      	mov	r0, r3
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	20000084 	.word	0x20000084

08008114 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d101      	bne.n	8008128 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008124:	2303      	movs	r3, #3
 8008126:	e004      	b.n	8008132 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	370c      	adds	r7, #12
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr

0800813e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800813e:	b480      	push	{r7}
 8008140:	b087      	sub	sp, #28
 8008142:	af00      	add	r7, sp, #0
 8008144:	60f8      	str	r0, [r7, #12]
 8008146:	60b9      	str	r1, [r7, #8]
 8008148:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008150:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	371c      	adds	r7, #28
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008180:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	683a      	ldr	r2, [r7, #0]
 8008186:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d101      	bne.n	80081b6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e016      	b.n	80081e4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	7c1b      	ldrb	r3, [r3, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d109      	bne.n	80081d2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081c8:	2101      	movs	r1, #1
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f7f9 fab4 	bl	8001738 <USBD_LL_PrepareReceive>
 80081d0:	e007      	b.n	80081e2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081d8:	2340      	movs	r3, #64	; 0x40
 80081da:	2101      	movs	r1, #1
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7f9 faab 	bl	8001738 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	4613      	mov	r3, r2
 80081f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d101      	bne.n	8008204 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008200:	2303      	movs	r3, #3
 8008202:	e025      	b.n	8008250 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800820a:	2b00      	cmp	r3, #0
 800820c:	d003      	beq.n	8008216 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800821c:	2b00      	cmp	r3, #0
 800821e:	d003      	beq.n	8008228 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	79fa      	ldrb	r2, [r7, #7]
 8008242:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f7f9 f91d 	bl	8001484 <USBD_LL_Init>
 800824a:	4603      	mov	r3, r0
 800824c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800824e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008250:	4618      	mov	r0, r3
 8008252:	3718      	adds	r7, #24
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008262:	2300      	movs	r3, #0
 8008264:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d101      	bne.n	8008270 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800826c:	2303      	movs	r3, #3
 800826e:	e010      	b.n	8008292 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	683a      	ldr	r2, [r7, #0]
 8008274:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800827e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008280:	f107 020e 	add.w	r2, r7, #14
 8008284:	4610      	mov	r0, r2
 8008286:	4798      	blx	r3
 8008288:	4602      	mov	r2, r0
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b082      	sub	sp, #8
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f7f9 f93e 	bl	8001524 <USBD_LL_Start>
 80082a8:	4603      	mov	r3, r0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b083      	sub	sp, #12
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	460b      	mov	r3, r1
 80082d2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80082d4:	2303      	movs	r3, #3
 80082d6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d009      	beq.n	80082f6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	78fa      	ldrb	r2, [r7, #3]
 80082ec:	4611      	mov	r1, r2
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	4798      	blx	r3
 80082f2:	4603      	mov	r3, r0
 80082f4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80082f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	460b      	mov	r3, r1
 800830a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008312:	2b00      	cmp	r3, #0
 8008314:	d007      	beq.n	8008326 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	78fa      	ldrb	r2, [r7, #3]
 8008320:	4611      	mov	r1, r2
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	4798      	blx	r3
  }

  return USBD_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	4618      	mov	r0, r3
 8008344:	f000 ff2c 	bl	80091a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008356:	461a      	mov	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008364:	f003 031f 	and.w	r3, r3, #31
 8008368:	2b01      	cmp	r3, #1
 800836a:	d00e      	beq.n	800838a <USBD_LL_SetupStage+0x5a>
 800836c:	2b01      	cmp	r3, #1
 800836e:	d302      	bcc.n	8008376 <USBD_LL_SetupStage+0x46>
 8008370:	2b02      	cmp	r3, #2
 8008372:	d014      	beq.n	800839e <USBD_LL_SetupStage+0x6e>
 8008374:	e01d      	b.n	80083b2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800837c:	4619      	mov	r1, r3
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fa18 	bl	80087b4 <USBD_StdDevReq>
 8008384:	4603      	mov	r3, r0
 8008386:	73fb      	strb	r3, [r7, #15]
      break;
 8008388:	e020      	b.n	80083cc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008390:	4619      	mov	r1, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fa7c 	bl	8008890 <USBD_StdItfReq>
 8008398:	4603      	mov	r3, r0
 800839a:	73fb      	strb	r3, [r7, #15]
      break;
 800839c:	e016      	b.n	80083cc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083a4:	4619      	mov	r1, r3
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fab8 	bl	800891c <USBD_StdEPReq>
 80083ac:	4603      	mov	r3, r0
 80083ae:	73fb      	strb	r3, [r7, #15]
      break;
 80083b0:	e00c      	b.n	80083cc <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80083b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7f9 f90f 	bl	80015e4 <USBD_LL_StallEP>
 80083c6:	4603      	mov	r3, r0
 80083c8:	73fb      	strb	r3, [r7, #15]
      break;
 80083ca:	bf00      	nop
  }

  return ret;
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b086      	sub	sp, #24
 80083da:	af00      	add	r7, sp, #0
 80083dc:	60f8      	str	r0, [r7, #12]
 80083de:	460b      	mov	r3, r1
 80083e0:	607a      	str	r2, [r7, #4]
 80083e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80083e4:	7afb      	ldrb	r3, [r7, #11]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d137      	bne.n	800845a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80083f0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083f8:	2b03      	cmp	r3, #3
 80083fa:	d14a      	bne.n	8008492 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	689a      	ldr	r2, [r3, #8]
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	429a      	cmp	r2, r3
 8008406:	d913      	bls.n	8008430 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	689a      	ldr	r2, [r3, #8]
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	1ad2      	subs	r2, r2, r3
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	68da      	ldr	r2, [r3, #12]
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	4293      	cmp	r3, r2
 8008420:	bf28      	it	cs
 8008422:	4613      	movcs	r3, r2
 8008424:	461a      	mov	r2, r3
 8008426:	6879      	ldr	r1, [r7, #4]
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f000 ffad 	bl	8009388 <USBD_CtlContinueRx>
 800842e:	e030      	b.n	8008492 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00a      	beq.n	8008452 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008442:	2b03      	cmp	r3, #3
 8008444:	d105      	bne.n	8008452 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f000 ffa9 	bl	80093aa <USBD_CtlSendStatus>
 8008458:	e01b      	b.n	8008492 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d013      	beq.n	800848e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800846c:	2b03      	cmp	r3, #3
 800846e:	d10e      	bne.n	800848e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	7afa      	ldrb	r2, [r7, #11]
 800847a:	4611      	mov	r1, r2
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	4798      	blx	r3
 8008480:	4603      	mov	r3, r0
 8008482:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008484:	7dfb      	ldrb	r3, [r7, #23]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d003      	beq.n	8008492 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800848a:	7dfb      	ldrb	r3, [r7, #23]
 800848c:	e002      	b.n	8008494 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800848e:	2303      	movs	r3, #3
 8008490:	e000      	b.n	8008494 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3718      	adds	r7, #24
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	460b      	mov	r3, r1
 80084a6:	607a      	str	r2, [r7, #4]
 80084a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80084aa:	7afb      	ldrb	r3, [r7, #11]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d16a      	bne.n	8008586 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	3314      	adds	r3, #20
 80084b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d155      	bne.n	800856c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	689a      	ldr	r2, [r3, #8]
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d914      	bls.n	80084f6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	689a      	ldr	r2, [r3, #8]
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	1ad2      	subs	r2, r2, r3
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	461a      	mov	r2, r3
 80084e0:	6879      	ldr	r1, [r7, #4]
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f000 ff22 	bl	800932c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084e8:	2300      	movs	r3, #0
 80084ea:	2200      	movs	r2, #0
 80084ec:	2100      	movs	r1, #0
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f7f9 f922 	bl	8001738 <USBD_LL_PrepareReceive>
 80084f4:	e03a      	b.n	800856c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	68da      	ldr	r2, [r3, #12]
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d11c      	bne.n	800853c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800850a:	429a      	cmp	r2, r3
 800850c:	d316      	bcc.n	800853c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	685a      	ldr	r2, [r3, #4]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008518:	429a      	cmp	r2, r3
 800851a:	d20f      	bcs.n	800853c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800851c:	2200      	movs	r2, #0
 800851e:	2100      	movs	r1, #0
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f000 ff03 	bl	800932c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800852e:	2300      	movs	r3, #0
 8008530:	2200      	movs	r2, #0
 8008532:	2100      	movs	r1, #0
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f7f9 f8ff 	bl	8001738 <USBD_LL_PrepareReceive>
 800853a:	e017      	b.n	800856c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00a      	beq.n	800855e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800854e:	2b03      	cmp	r3, #3
 8008550:	d105      	bne.n	800855e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800855e:	2180      	movs	r1, #128	; 0x80
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f7f9 f83f 	bl	80015e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f000 ff32 	bl	80093d0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008572:	2b01      	cmp	r3, #1
 8008574:	d123      	bne.n	80085be <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f7ff fe9b 	bl	80082b2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008584:	e01b      	b.n	80085be <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800858c:	695b      	ldr	r3, [r3, #20]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d013      	beq.n	80085ba <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008598:	2b03      	cmp	r3, #3
 800859a:	d10e      	bne.n	80085ba <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085a2:	695b      	ldr	r3, [r3, #20]
 80085a4:	7afa      	ldrb	r2, [r7, #11]
 80085a6:	4611      	mov	r1, r2
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	4798      	blx	r3
 80085ac:	4603      	mov	r3, r0
 80085ae:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80085b0:	7dfb      	ldrb	r3, [r7, #23]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d003      	beq.n	80085be <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80085b6:	7dfb      	ldrb	r3, [r7, #23]
 80085b8:	e002      	b.n	80085c0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e000      	b.n	80085c0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3718      	adds	r7, #24
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d009      	beq.n	800860c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	6852      	ldr	r2, [r2, #4]
 8008604:	b2d2      	uxtb	r2, r2
 8008606:	4611      	mov	r1, r2
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800860c:	2340      	movs	r3, #64	; 0x40
 800860e:	2200      	movs	r2, #0
 8008610:	2100      	movs	r1, #0
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7f8 ffa1 	bl	800155a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2240      	movs	r2, #64	; 0x40
 8008624:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008628:	2340      	movs	r3, #64	; 0x40
 800862a:	2200      	movs	r2, #0
 800862c:	2180      	movs	r1, #128	; 0x80
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7f8 ff93 	bl	800155a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2240      	movs	r2, #64	; 0x40
 800863e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800864a:	b480      	push	{r7}
 800864c:	b083      	sub	sp, #12
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
 8008652:	460b      	mov	r3, r1
 8008654:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	78fa      	ldrb	r2, [r7, #3]
 800865a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	370c      	adds	r7, #12
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr

0800866a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800866a:	b480      	push	{r7}
 800866c:	b083      	sub	sp, #12
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2204      	movs	r2, #4
 8008682:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	d105      	bne.n	80086b2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ce:	2b03      	cmp	r3, #3
 80086d0:	d10b      	bne.n	80086ea <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d8:	69db      	ldr	r3, [r3, #28]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d005      	beq.n	80086ea <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086e4:	69db      	ldr	r3, [r3, #28]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	460b      	mov	r3, r1
 80086fe:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	370c      	adds	r7, #12
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800870e:	b480      	push	{r7}
 8008710:	b083      	sub	sp, #12
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	460b      	mov	r3, r1
 8008718:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	370c      	adds	r7, #12
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b082      	sub	sp, #8
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008754:	2b00      	cmp	r3, #0
 8008756:	d009      	beq.n	800876c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	6852      	ldr	r2, [r2, #4]
 8008764:	b2d2      	uxtb	r2, r2
 8008766:	4611      	mov	r1, r2
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	4798      	blx	r3
  }

  return USBD_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008776:	b480      	push	{r7}
 8008778:	b087      	sub	sp, #28
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	3301      	adds	r3, #1
 800878c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008794:	8a3b      	ldrh	r3, [r7, #16]
 8008796:	021b      	lsls	r3, r3, #8
 8008798:	b21a      	sxth	r2, r3
 800879a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800879e:	4313      	orrs	r3, r2
 80087a0:	b21b      	sxth	r3, r3
 80087a2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80087a4:	89fb      	ldrh	r3, [r7, #14]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	371c      	adds	r7, #28
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
	...

080087b4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087be:	2300      	movs	r3, #0
 80087c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087ca:	2b20      	cmp	r3, #32
 80087cc:	d004      	beq.n	80087d8 <USBD_StdDevReq+0x24>
 80087ce:	2b40      	cmp	r3, #64	; 0x40
 80087d0:	d002      	beq.n	80087d8 <USBD_StdDevReq+0x24>
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00a      	beq.n	80087ec <USBD_StdDevReq+0x38>
 80087d6:	e050      	b.n	800887a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	4798      	blx	r3
 80087e6:	4603      	mov	r3, r0
 80087e8:	73fb      	strb	r3, [r7, #15]
    break;
 80087ea:	e04b      	b.n	8008884 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	785b      	ldrb	r3, [r3, #1]
 80087f0:	2b09      	cmp	r3, #9
 80087f2:	d83c      	bhi.n	800886e <USBD_StdDevReq+0xba>
 80087f4:	a201      	add	r2, pc, #4	; (adr r2, 80087fc <USBD_StdDevReq+0x48>)
 80087f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fa:	bf00      	nop
 80087fc:	08008851 	.word	0x08008851
 8008800:	08008865 	.word	0x08008865
 8008804:	0800886f 	.word	0x0800886f
 8008808:	0800885b 	.word	0x0800885b
 800880c:	0800886f 	.word	0x0800886f
 8008810:	0800882f 	.word	0x0800882f
 8008814:	08008825 	.word	0x08008825
 8008818:	0800886f 	.word	0x0800886f
 800881c:	08008847 	.word	0x08008847
 8008820:	08008839 	.word	0x08008839
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f9ce 	bl	8008bc8 <USBD_GetDescriptor>
      break;
 800882c:	e024      	b.n	8008878 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fb33 	bl	8008e9c <USBD_SetAddress>
      break;
 8008836:	e01f      	b.n	8008878 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fb70 	bl	8008f20 <USBD_SetConfig>
 8008840:	4603      	mov	r3, r0
 8008842:	73fb      	strb	r3, [r7, #15]
      break;
 8008844:	e018      	b.n	8008878 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fc0d 	bl	8009068 <USBD_GetConfig>
      break;
 800884e:	e013      	b.n	8008878 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fc3c 	bl	80090d0 <USBD_GetStatus>
      break;
 8008858:	e00e      	b.n	8008878 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800885a:	6839      	ldr	r1, [r7, #0]
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 fc6a 	bl	8009136 <USBD_SetFeature>
      break;
 8008862:	e009      	b.n	8008878 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008864:	6839      	ldr	r1, [r7, #0]
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 fc79 	bl	800915e <USBD_ClrFeature>
      break;
 800886c:	e004      	b.n	8008878 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fccf 	bl	8009214 <USBD_CtlError>
      break;
 8008876:	bf00      	nop
    }
    break;
 8008878:	e004      	b.n	8008884 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800887a:	6839      	ldr	r1, [r7, #0]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fcc9 	bl	8009214 <USBD_CtlError>
    break;
 8008882:	bf00      	nop
  }

  return ret;
 8008884:	7bfb      	ldrb	r3, [r7, #15]
}
 8008886:	4618      	mov	r0, r3
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop

08008890 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800889a:	2300      	movs	r3, #0
 800889c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088a6:	2b20      	cmp	r3, #32
 80088a8:	d003      	beq.n	80088b2 <USBD_StdItfReq+0x22>
 80088aa:	2b40      	cmp	r3, #64	; 0x40
 80088ac:	d001      	beq.n	80088b2 <USBD_StdItfReq+0x22>
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d12a      	bne.n	8008908 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088b8:	3b01      	subs	r3, #1
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d81d      	bhi.n	80088fa <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	889b      	ldrh	r3, [r3, #4]
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d813      	bhi.n	80088f0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	6839      	ldr	r1, [r7, #0]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	4798      	blx	r3
 80088d6:	4603      	mov	r3, r0
 80088d8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	88db      	ldrh	r3, [r3, #6]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d110      	bne.n	8008904 <USBD_StdItfReq+0x74>
 80088e2:	7bfb      	ldrb	r3, [r7, #15]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10d      	bne.n	8008904 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fd5e 	bl	80093aa <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80088ee:	e009      	b.n	8008904 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80088f0:	6839      	ldr	r1, [r7, #0]
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fc8e 	bl	8009214 <USBD_CtlError>
      break;
 80088f8:	e004      	b.n	8008904 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80088fa:	6839      	ldr	r1, [r7, #0]
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fc89 	bl	8009214 <USBD_CtlError>
      break;
 8008902:	e000      	b.n	8008906 <USBD_StdItfReq+0x76>
      break;
 8008904:	bf00      	nop
    }
    break;
 8008906:	e004      	b.n	8008912 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fc82 	bl	8009214 <USBD_CtlError>
    break;
 8008910:	bf00      	nop
  }

  return ret;
 8008912:	7bfb      	ldrb	r3, [r7, #15]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	889b      	ldrh	r3, [r3, #4]
 800892e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008938:	2b20      	cmp	r3, #32
 800893a:	d004      	beq.n	8008946 <USBD_StdEPReq+0x2a>
 800893c:	2b40      	cmp	r3, #64	; 0x40
 800893e:	d002      	beq.n	8008946 <USBD_StdEPReq+0x2a>
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00a      	beq.n	800895a <USBD_StdEPReq+0x3e>
 8008944:	e135      	b.n	8008bb2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	6839      	ldr	r1, [r7, #0]
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	4798      	blx	r3
 8008954:	4603      	mov	r3, r0
 8008956:	73fb      	strb	r3, [r7, #15]
    break;
 8008958:	e130      	b.n	8008bbc <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	785b      	ldrb	r3, [r3, #1]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d03e      	beq.n	80089e0 <USBD_StdEPReq+0xc4>
 8008962:	2b03      	cmp	r3, #3
 8008964:	d002      	beq.n	800896c <USBD_StdEPReq+0x50>
 8008966:	2b00      	cmp	r3, #0
 8008968:	d077      	beq.n	8008a5a <USBD_StdEPReq+0x13e>
 800896a:	e11c      	b.n	8008ba6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008972:	2b02      	cmp	r3, #2
 8008974:	d002      	beq.n	800897c <USBD_StdEPReq+0x60>
 8008976:	2b03      	cmp	r3, #3
 8008978:	d015      	beq.n	80089a6 <USBD_StdEPReq+0x8a>
 800897a:	e02b      	b.n	80089d4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800897c:	7bbb      	ldrb	r3, [r7, #14]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00c      	beq.n	800899c <USBD_StdEPReq+0x80>
 8008982:	7bbb      	ldrb	r3, [r7, #14]
 8008984:	2b80      	cmp	r3, #128	; 0x80
 8008986:	d009      	beq.n	800899c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008988:	7bbb      	ldrb	r3, [r7, #14]
 800898a:	4619      	mov	r1, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f7f8 fe29 	bl	80015e4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008992:	2180      	movs	r1, #128	; 0x80
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f7f8 fe25 	bl	80015e4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800899a:	e020      	b.n	80089de <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fc38 	bl	8009214 <USBD_CtlError>
        break;
 80089a4:	e01b      	b.n	80089de <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	885b      	ldrh	r3, [r3, #2]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d10e      	bne.n	80089cc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00b      	beq.n	80089cc <USBD_StdEPReq+0xb0>
 80089b4:	7bbb      	ldrb	r3, [r7, #14]
 80089b6:	2b80      	cmp	r3, #128	; 0x80
 80089b8:	d008      	beq.n	80089cc <USBD_StdEPReq+0xb0>
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	88db      	ldrh	r3, [r3, #6]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d104      	bne.n	80089cc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80089c2:	7bbb      	ldrb	r3, [r7, #14]
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7f8 fe0c 	bl	80015e4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fcec 	bl	80093aa <USBD_CtlSendStatus>

        break;
 80089d2:	e004      	b.n	80089de <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80089d4:	6839      	ldr	r1, [r7, #0]
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fc1c 	bl	8009214 <USBD_CtlError>
        break;
 80089dc:	bf00      	nop
      }
      break;
 80089de:	e0e7      	b.n	8008bb0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d002      	beq.n	80089f0 <USBD_StdEPReq+0xd4>
 80089ea:	2b03      	cmp	r3, #3
 80089ec:	d015      	beq.n	8008a1a <USBD_StdEPReq+0xfe>
 80089ee:	e02d      	b.n	8008a4c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089f0:	7bbb      	ldrb	r3, [r7, #14]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00c      	beq.n	8008a10 <USBD_StdEPReq+0xf4>
 80089f6:	7bbb      	ldrb	r3, [r7, #14]
 80089f8:	2b80      	cmp	r3, #128	; 0x80
 80089fa:	d009      	beq.n	8008a10 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80089fc:	7bbb      	ldrb	r3, [r7, #14]
 80089fe:	4619      	mov	r1, r3
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f7f8 fdef 	bl	80015e4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a06:	2180      	movs	r1, #128	; 0x80
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7f8 fdeb 	bl	80015e4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008a0e:	e023      	b.n	8008a58 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fbfe 	bl	8009214 <USBD_CtlError>
        break;
 8008a18:	e01e      	b.n	8008a58 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	885b      	ldrh	r3, [r3, #2]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d119      	bne.n	8008a56 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008a22:	7bbb      	ldrb	r3, [r7, #14]
 8008a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d004      	beq.n	8008a36 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a2c:	7bbb      	ldrb	r3, [r7, #14]
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7f8 fdf6 	bl	8001622 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fcb7 	bl	80093aa <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	4798      	blx	r3
        }
        break;
 8008a4a:	e004      	b.n	8008a56 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008a4c:	6839      	ldr	r1, [r7, #0]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fbe0 	bl	8009214 <USBD_CtlError>
        break;
 8008a54:	e000      	b.n	8008a58 <USBD_StdEPReq+0x13c>
        break;
 8008a56:	bf00      	nop
      }
      break;
 8008a58:	e0aa      	b.n	8008bb0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d002      	beq.n	8008a6a <USBD_StdEPReq+0x14e>
 8008a64:	2b03      	cmp	r3, #3
 8008a66:	d032      	beq.n	8008ace <USBD_StdEPReq+0x1b2>
 8008a68:	e097      	b.n	8008b9a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a6a:	7bbb      	ldrb	r3, [r7, #14]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d007      	beq.n	8008a80 <USBD_StdEPReq+0x164>
 8008a70:	7bbb      	ldrb	r3, [r7, #14]
 8008a72:	2b80      	cmp	r3, #128	; 0x80
 8008a74:	d004      	beq.n	8008a80 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008a76:	6839      	ldr	r1, [r7, #0]
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 fbcb 	bl	8009214 <USBD_CtlError>
          break;
 8008a7e:	e091      	b.n	8008ba4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	da0b      	bge.n	8008aa0 <USBD_StdEPReq+0x184>
 8008a88:	7bbb      	ldrb	r3, [r7, #14]
 8008a8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a8e:	4613      	mov	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4413      	add	r3, r2
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	3310      	adds	r3, #16
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	e00b      	b.n	8008ab8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008aa0:	7bbb      	ldrb	r3, [r7, #14]
 8008aa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4413      	add	r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	3304      	adds	r3, #4
 8008ab8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	2200      	movs	r2, #0
 8008abe:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fc15 	bl	80092f6 <USBD_CtlSendData>
        break;
 8008acc:	e06a      	b.n	8008ba4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008ace:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	da11      	bge.n	8008afa <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008ad6:	7bbb      	ldrb	r3, [r7, #14]
 8008ad8:	f003 020f 	and.w	r2, r3, #15
 8008adc:	6879      	ldr	r1, [r7, #4]
 8008ade:	4613      	mov	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	4413      	add	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	440b      	add	r3, r1
 8008ae8:	3324      	adds	r3, #36	; 0x24
 8008aea:	881b      	ldrh	r3, [r3, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d117      	bne.n	8008b20 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fb8e 	bl	8009214 <USBD_CtlError>
            break;
 8008af8:	e054      	b.n	8008ba4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008afa:	7bbb      	ldrb	r3, [r7, #14]
 8008afc:	f003 020f 	and.w	r2, r3, #15
 8008b00:	6879      	ldr	r1, [r7, #4]
 8008b02:	4613      	mov	r3, r2
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	4413      	add	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	440b      	add	r3, r1
 8008b0c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b10:	881b      	ldrh	r3, [r3, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d104      	bne.n	8008b20 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fb7b 	bl	8009214 <USBD_CtlError>
            break;
 8008b1e:	e041      	b.n	8008ba4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	da0b      	bge.n	8008b40 <USBD_StdEPReq+0x224>
 8008b28:	7bbb      	ldrb	r3, [r7, #14]
 8008b2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b2e:	4613      	mov	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4413      	add	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	3310      	adds	r3, #16
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	3304      	adds	r3, #4
 8008b3e:	e00b      	b.n	8008b58 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008b40:	7bbb      	ldrb	r3, [r7, #14]
 8008b42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b46:	4613      	mov	r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	4413      	add	r3, r2
 8008b56:	3304      	adds	r3, #4
 8008b58:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b5a:	7bbb      	ldrb	r3, [r7, #14]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d002      	beq.n	8008b66 <USBD_StdEPReq+0x24a>
 8008b60:	7bbb      	ldrb	r3, [r7, #14]
 8008b62:	2b80      	cmp	r3, #128	; 0x80
 8008b64:	d103      	bne.n	8008b6e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	601a      	str	r2, [r3, #0]
 8008b6c:	e00e      	b.n	8008b8c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008b6e:	7bbb      	ldrb	r3, [r7, #14]
 8008b70:	4619      	mov	r1, r3
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7f8 fd74 	bl	8001660 <USBD_LL_IsStallEP>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d003      	beq.n	8008b86 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	2201      	movs	r2, #1
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	e002      	b.n	8008b8c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	2202      	movs	r2, #2
 8008b90:	4619      	mov	r1, r3
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 fbaf 	bl	80092f6 <USBD_CtlSendData>
          break;
 8008b98:	e004      	b.n	8008ba4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008b9a:	6839      	ldr	r1, [r7, #0]
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 fb39 	bl	8009214 <USBD_CtlError>
        break;
 8008ba2:	bf00      	nop
      }
      break;
 8008ba4:	e004      	b.n	8008bb0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fb33 	bl	8009214 <USBD_CtlError>
      break;
 8008bae:	bf00      	nop
    }
    break;
 8008bb0:	e004      	b.n	8008bbc <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fb2d 	bl	8009214 <USBD_CtlError>
    break;
 8008bba:	bf00      	nop
  }

  return ret;
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
	...

08008bc8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	885b      	ldrh	r3, [r3, #2]
 8008be2:	0a1b      	lsrs	r3, r3, #8
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	3b01      	subs	r3, #1
 8008be8:	2b06      	cmp	r3, #6
 8008bea:	f200 8128 	bhi.w	8008e3e <USBD_GetDescriptor+0x276>
 8008bee:	a201      	add	r2, pc, #4	; (adr r2, 8008bf4 <USBD_GetDescriptor+0x2c>)
 8008bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf4:	08008c11 	.word	0x08008c11
 8008bf8:	08008c29 	.word	0x08008c29
 8008bfc:	08008c69 	.word	0x08008c69
 8008c00:	08008e3f 	.word	0x08008e3f
 8008c04:	08008e3f 	.word	0x08008e3f
 8008c08:	08008ddf 	.word	0x08008ddf
 8008c0c:	08008e0b 	.word	0x08008e0b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	7c12      	ldrb	r2, [r2, #16]
 8008c1c:	f107 0108 	add.w	r1, r7, #8
 8008c20:	4610      	mov	r0, r2
 8008c22:	4798      	blx	r3
 8008c24:	60f8      	str	r0, [r7, #12]
    break;
 8008c26:	e112      	b.n	8008e4e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	7c1b      	ldrb	r3, [r3, #16]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10d      	bne.n	8008c4c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c38:	f107 0208 	add.w	r2, r7, #8
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	4798      	blx	r3
 8008c40:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	3301      	adds	r3, #1
 8008c46:	2202      	movs	r2, #2
 8008c48:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008c4a:	e100      	b.n	8008e4e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c54:	f107 0208 	add.w	r2, r7, #8
 8008c58:	4610      	mov	r0, r2
 8008c5a:	4798      	blx	r3
 8008c5c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	3301      	adds	r3, #1
 8008c62:	2202      	movs	r2, #2
 8008c64:	701a      	strb	r2, [r3, #0]
    break;
 8008c66:	e0f2      	b.n	8008e4e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	885b      	ldrh	r3, [r3, #2]
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b05      	cmp	r3, #5
 8008c70:	f200 80ac 	bhi.w	8008dcc <USBD_GetDescriptor+0x204>
 8008c74:	a201      	add	r2, pc, #4	; (adr r2, 8008c7c <USBD_GetDescriptor+0xb4>)
 8008c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7a:	bf00      	nop
 8008c7c:	08008c95 	.word	0x08008c95
 8008c80:	08008cc9 	.word	0x08008cc9
 8008c84:	08008cfd 	.word	0x08008cfd
 8008c88:	08008d31 	.word	0x08008d31
 8008c8c:	08008d65 	.word	0x08008d65
 8008c90:	08008d99 	.word	0x08008d99
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00b      	beq.n	8008cb8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	7c12      	ldrb	r2, [r2, #16]
 8008cac:	f107 0108 	add.w	r1, r7, #8
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	4798      	blx	r3
 8008cb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cb6:	e091      	b.n	8008ddc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008cb8:	6839      	ldr	r1, [r7, #0]
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 faaa 	bl	8009214 <USBD_CtlError>
        err++;
 8008cc0:	7afb      	ldrb	r3, [r7, #11]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	72fb      	strb	r3, [r7, #11]
      break;
 8008cc6:	e089      	b.n	8008ddc <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00b      	beq.n	8008cec <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	7c12      	ldrb	r2, [r2, #16]
 8008ce0:	f107 0108 	add.w	r1, r7, #8
 8008ce4:	4610      	mov	r0, r2
 8008ce6:	4798      	blx	r3
 8008ce8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cea:	e077      	b.n	8008ddc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008cec:	6839      	ldr	r1, [r7, #0]
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 fa90 	bl	8009214 <USBD_CtlError>
        err++;
 8008cf4:	7afb      	ldrb	r3, [r7, #11]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	72fb      	strb	r3, [r7, #11]
      break;
 8008cfa:	e06f      	b.n	8008ddc <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00b      	beq.n	8008d20 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	7c12      	ldrb	r2, [r2, #16]
 8008d14:	f107 0108 	add.w	r1, r7, #8
 8008d18:	4610      	mov	r0, r2
 8008d1a:	4798      	blx	r3
 8008d1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d1e:	e05d      	b.n	8008ddc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fa76 	bl	8009214 <USBD_CtlError>
        err++;
 8008d28:	7afb      	ldrb	r3, [r7, #11]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	72fb      	strb	r3, [r7, #11]
      break;
 8008d2e:	e055      	b.n	8008ddc <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00b      	beq.n	8008d54 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	7c12      	ldrb	r2, [r2, #16]
 8008d48:	f107 0108 	add.w	r1, r7, #8
 8008d4c:	4610      	mov	r0, r2
 8008d4e:	4798      	blx	r3
 8008d50:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d52:	e043      	b.n	8008ddc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fa5c 	bl	8009214 <USBD_CtlError>
        err++;
 8008d5c:	7afb      	ldrb	r3, [r7, #11]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	72fb      	strb	r3, [r7, #11]
      break;
 8008d62:	e03b      	b.n	8008ddc <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d6a:	695b      	ldr	r3, [r3, #20]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00b      	beq.n	8008d88 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d76:	695b      	ldr	r3, [r3, #20]
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	7c12      	ldrb	r2, [r2, #16]
 8008d7c:	f107 0108 	add.w	r1, r7, #8
 8008d80:	4610      	mov	r0, r2
 8008d82:	4798      	blx	r3
 8008d84:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d86:	e029      	b.n	8008ddc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fa42 	bl	8009214 <USBD_CtlError>
        err++;
 8008d90:	7afb      	ldrb	r3, [r7, #11]
 8008d92:	3301      	adds	r3, #1
 8008d94:	72fb      	strb	r3, [r7, #11]
      break;
 8008d96:	e021      	b.n	8008ddc <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d9e:	699b      	ldr	r3, [r3, #24]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00b      	beq.n	8008dbc <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	7c12      	ldrb	r2, [r2, #16]
 8008db0:	f107 0108 	add.w	r1, r7, #8
 8008db4:	4610      	mov	r0, r2
 8008db6:	4798      	blx	r3
 8008db8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dba:	e00f      	b.n	8008ddc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008dbc:	6839      	ldr	r1, [r7, #0]
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fa28 	bl	8009214 <USBD_CtlError>
        err++;
 8008dc4:	7afb      	ldrb	r3, [r7, #11]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	72fb      	strb	r3, [r7, #11]
      break;
 8008dca:	e007      	b.n	8008ddc <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008dcc:	6839      	ldr	r1, [r7, #0]
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fa20 	bl	8009214 <USBD_CtlError>
      err++;
 8008dd4:	7afb      	ldrb	r3, [r7, #11]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008dda:	bf00      	nop
    }
    break;
 8008ddc:	e037      	b.n	8008e4e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	7c1b      	ldrb	r3, [r3, #16]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d109      	bne.n	8008dfa <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dee:	f107 0208 	add.w	r2, r7, #8
 8008df2:	4610      	mov	r0, r2
 8008df4:	4798      	blx	r3
 8008df6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008df8:	e029      	b.n	8008e4e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fa09 	bl	8009214 <USBD_CtlError>
      err++;
 8008e02:	7afb      	ldrb	r3, [r7, #11]
 8008e04:	3301      	adds	r3, #1
 8008e06:	72fb      	strb	r3, [r7, #11]
    break;
 8008e08:	e021      	b.n	8008e4e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	7c1b      	ldrb	r3, [r3, #16]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d10d      	bne.n	8008e2e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1a:	f107 0208 	add.w	r2, r7, #8
 8008e1e:	4610      	mov	r0, r2
 8008e20:	4798      	blx	r3
 8008e22:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	3301      	adds	r3, #1
 8008e28:	2207      	movs	r2, #7
 8008e2a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008e2c:	e00f      	b.n	8008e4e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 f9ef 	bl	8009214 <USBD_CtlError>
      err++;
 8008e36:	7afb      	ldrb	r3, [r7, #11]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	72fb      	strb	r3, [r7, #11]
    break;
 8008e3c:	e007      	b.n	8008e4e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008e3e:	6839      	ldr	r1, [r7, #0]
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f9e7 	bl	8009214 <USBD_CtlError>
    err++;
 8008e46:	7afb      	ldrb	r3, [r7, #11]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	72fb      	strb	r3, [r7, #11]
    break;
 8008e4c:	bf00      	nop
  }

  if (err != 0U)
 8008e4e:	7afb      	ldrb	r3, [r7, #11]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d11e      	bne.n	8008e92 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	88db      	ldrh	r3, [r3, #6]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d016      	beq.n	8008e8a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008e5c:	893b      	ldrh	r3, [r7, #8]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00e      	beq.n	8008e80 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	88da      	ldrh	r2, [r3, #6]
 8008e66:	893b      	ldrh	r3, [r7, #8]
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	bf28      	it	cs
 8008e6c:	4613      	movcs	r3, r2
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e72:	893b      	ldrh	r3, [r7, #8]
 8008e74:	461a      	mov	r2, r3
 8008e76:	68f9      	ldr	r1, [r7, #12]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fa3c 	bl	80092f6 <USBD_CtlSendData>
 8008e7e:	e009      	b.n	8008e94 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f9c6 	bl	8009214 <USBD_CtlError>
 8008e88:	e004      	b.n	8008e94 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fa8d 	bl	80093aa <USBD_CtlSendStatus>
 8008e90:	e000      	b.n	8008e94 <USBD_GetDescriptor+0x2cc>
    return;
 8008e92:	bf00      	nop
    }
  }
}
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop

08008e9c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	889b      	ldrh	r3, [r3, #4]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d130      	bne.n	8008f10 <USBD_SetAddress+0x74>
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	88db      	ldrh	r3, [r3, #6]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d12c      	bne.n	8008f10 <USBD_SetAddress+0x74>
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	885b      	ldrh	r3, [r3, #2]
 8008eba:	2b7f      	cmp	r3, #127	; 0x7f
 8008ebc:	d828      	bhi.n	8008f10 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	885b      	ldrh	r3, [r3, #2]
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ec8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ed0:	2b03      	cmp	r3, #3
 8008ed2:	d104      	bne.n	8008ede <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008ed4:	6839      	ldr	r1, [r7, #0]
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f99c 	bl	8009214 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008edc:	e01c      	b.n	8008f18 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	7bfa      	ldrb	r2, [r7, #15]
 8008ee2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
 8008ee8:	4619      	mov	r1, r3
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f7f8 fbe4 	bl	80016b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 fa5a 	bl	80093aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ef6:	7bfb      	ldrb	r3, [r7, #15]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d004      	beq.n	8008f06 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2202      	movs	r2, #2
 8008f00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f04:	e008      	b.n	8008f18 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f0e:	e003      	b.n	8008f18 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 f97e 	bl	8009214 <USBD_CtlError>
  }
}
 8008f18:	bf00      	nop
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	885b      	ldrh	r3, [r3, #2]
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	4b4b      	ldr	r3, [pc, #300]	; (8009064 <USBD_SetConfig+0x144>)
 8008f36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008f38:	4b4a      	ldr	r3, [pc, #296]	; (8009064 <USBD_SetConfig+0x144>)
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d905      	bls.n	8008f4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f966 	bl	8009214 <USBD_CtlError>
    return USBD_FAIL;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	e087      	b.n	800905c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d002      	beq.n	8008f5c <USBD_SetConfig+0x3c>
 8008f56:	2b03      	cmp	r3, #3
 8008f58:	d025      	beq.n	8008fa6 <USBD_SetConfig+0x86>
 8008f5a:	e071      	b.n	8009040 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008f5c:	4b41      	ldr	r3, [pc, #260]	; (8009064 <USBD_SetConfig+0x144>)
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d01c      	beq.n	8008f9e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008f64:	4b3f      	ldr	r3, [pc, #252]	; (8009064 <USBD_SetConfig+0x144>)
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	461a      	mov	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f6e:	4b3d      	ldr	r3, [pc, #244]	; (8009064 <USBD_SetConfig+0x144>)
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	4619      	mov	r1, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7ff f9a7 	bl	80082c8 <USBD_SetClassConfig>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d004      	beq.n	8008f8e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f944 	bl	8009214 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008f8c:	e065      	b.n	800905a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fa0b 	bl	80093aa <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2203      	movs	r2, #3
 8008f98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008f9c:	e05d      	b.n	800905a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fa03 	bl	80093aa <USBD_CtlSendStatus>
    break;
 8008fa4:	e059      	b.n	800905a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008fa6:	4b2f      	ldr	r3, [pc, #188]	; (8009064 <USBD_SetConfig+0x144>)
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d112      	bne.n	8008fd4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2202      	movs	r2, #2
 8008fb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008fb6:	4b2b      	ldr	r3, [pc, #172]	; (8009064 <USBD_SetConfig+0x144>)
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	461a      	mov	r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fc0:	4b28      	ldr	r3, [pc, #160]	; (8009064 <USBD_SetConfig+0x144>)
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f7ff f99a 	bl	8008300 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 f9ec 	bl	80093aa <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008fd2:	e042      	b.n	800905a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008fd4:	4b23      	ldr	r3, [pc, #140]	; (8009064 <USBD_SetConfig+0x144>)
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d02a      	beq.n	8009038 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	4619      	mov	r1, r3
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7ff f988 	bl	8008300 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008ff0:	4b1c      	ldr	r3, [pc, #112]	; (8009064 <USBD_SetConfig+0x144>)
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ffa:	4b1a      	ldr	r3, [pc, #104]	; (8009064 <USBD_SetConfig+0x144>)
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f7ff f961 	bl	80082c8 <USBD_SetClassConfig>
 8009006:	4603      	mov	r3, r0
 8009008:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800900a:	7bfb      	ldrb	r3, [r7, #15]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00f      	beq.n	8009030 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f8fe 	bl	8009214 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	b2db      	uxtb	r3, r3
 800901e:	4619      	mov	r1, r3
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f7ff f96d 	bl	8008300 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2202      	movs	r2, #2
 800902a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800902e:	e014      	b.n	800905a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f9ba 	bl	80093aa <USBD_CtlSendStatus>
    break;
 8009036:	e010      	b.n	800905a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 f9b6 	bl	80093aa <USBD_CtlSendStatus>
    break;
 800903e:	e00c      	b.n	800905a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009040:	6839      	ldr	r1, [r7, #0]
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 f8e6 	bl	8009214 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009048:	4b06      	ldr	r3, [pc, #24]	; (8009064 <USBD_SetConfig+0x144>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7ff f956 	bl	8008300 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009054:	2303      	movs	r3, #3
 8009056:	73fb      	strb	r3, [r7, #15]
    break;
 8009058:	bf00      	nop
  }

  return ret;
 800905a:	7bfb      	ldrb	r3, [r7, #15]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	200041e0 	.word	0x200041e0

08009068 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	88db      	ldrh	r3, [r3, #6]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d004      	beq.n	8009084 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800907a:	6839      	ldr	r1, [r7, #0]
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 f8c9 	bl	8009214 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8009082:	e021      	b.n	80090c8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800908a:	2b01      	cmp	r3, #1
 800908c:	db17      	blt.n	80090be <USBD_GetConfig+0x56>
 800908e:	2b02      	cmp	r3, #2
 8009090:	dd02      	ble.n	8009098 <USBD_GetConfig+0x30>
 8009092:	2b03      	cmp	r3, #3
 8009094:	d00b      	beq.n	80090ae <USBD_GetConfig+0x46>
 8009096:	e012      	b.n	80090be <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	3308      	adds	r3, #8
 80090a2:	2201      	movs	r2, #1
 80090a4:	4619      	mov	r1, r3
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f925 	bl	80092f6 <USBD_CtlSendData>
      break;
 80090ac:	e00c      	b.n	80090c8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	3304      	adds	r3, #4
 80090b2:	2201      	movs	r2, #1
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 f91d 	bl	80092f6 <USBD_CtlSendData>
      break;
 80090bc:	e004      	b.n	80090c8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80090be:	6839      	ldr	r1, [r7, #0]
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f8a7 	bl	8009214 <USBD_CtlError>
      break;
 80090c6:	bf00      	nop
}
 80090c8:	bf00      	nop
 80090ca:	3708      	adds	r7, #8
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090e0:	3b01      	subs	r3, #1
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d81e      	bhi.n	8009124 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	88db      	ldrh	r3, [r3, #6]
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d004      	beq.n	80090f8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f88f 	bl	8009214 <USBD_CtlError>
      break;
 80090f6:	e01a      	b.n	800912e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009104:	2b00      	cmp	r3, #0
 8009106:	d005      	beq.n	8009114 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	f043 0202 	orr.w	r2, r3, #2
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	330c      	adds	r3, #12
 8009118:	2202      	movs	r2, #2
 800911a:	4619      	mov	r1, r3
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 f8ea 	bl	80092f6 <USBD_CtlSendData>
    break;
 8009122:	e004      	b.n	800912e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009124:	6839      	ldr	r1, [r7, #0]
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f874 	bl	8009214 <USBD_CtlError>
    break;
 800912c:	bf00      	nop
  }
}
 800912e:	bf00      	nop
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b082      	sub	sp, #8
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	885b      	ldrh	r3, [r3, #2]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d106      	bne.n	8009156 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f92a 	bl	80093aa <USBD_CtlSendStatus>
  }
}
 8009156:	bf00      	nop
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b082      	sub	sp, #8
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
 8009166:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800916e:	3b01      	subs	r3, #1
 8009170:	2b02      	cmp	r3, #2
 8009172:	d80b      	bhi.n	800918c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	885b      	ldrh	r3, [r3, #2]
 8009178:	2b01      	cmp	r3, #1
 800917a:	d10c      	bne.n	8009196 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f910 	bl	80093aa <USBD_CtlSendStatus>
      }
      break;
 800918a:	e004      	b.n	8009196 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800918c:	6839      	ldr	r1, [r7, #0]
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f840 	bl	8009214 <USBD_CtlError>
      break;
 8009194:	e000      	b.n	8009198 <USBD_ClrFeature+0x3a>
      break;
 8009196:	bf00      	nop
  }
}
 8009198:	bf00      	nop
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	781a      	ldrb	r2, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	3301      	adds	r3, #1
 80091ba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	781a      	ldrb	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	3301      	adds	r3, #1
 80091c8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f7ff fad3 	bl	8008776 <SWAPBYTE>
 80091d0:	4603      	mov	r3, r0
 80091d2:	461a      	mov	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	3301      	adds	r3, #1
 80091dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	3301      	adds	r3, #1
 80091e2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f7ff fac6 	bl	8008776 <SWAPBYTE>
 80091ea:	4603      	mov	r3, r0
 80091ec:	461a      	mov	r2, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	3301      	adds	r3, #1
 80091f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	3301      	adds	r3, #1
 80091fc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f7ff fab9 	bl	8008776 <SWAPBYTE>
 8009204:	4603      	mov	r3, r0
 8009206:	461a      	mov	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	80da      	strh	r2, [r3, #6]
}
 800920c:	bf00      	nop
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800921e:	2180      	movs	r1, #128	; 0x80
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f7f8 f9df 	bl	80015e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009226:	2100      	movs	r1, #0
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7f8 f9db 	bl	80015e4 <USBD_LL_StallEP>
}
 800922e:	bf00      	nop
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b086      	sub	sp, #24
 800923a:	af00      	add	r7, sp, #0
 800923c:	60f8      	str	r0, [r7, #12]
 800923e:	60b9      	str	r1, [r7, #8]
 8009240:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009242:	2300      	movs	r3, #0
 8009244:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d036      	beq.n	80092ba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009250:	6938      	ldr	r0, [r7, #16]
 8009252:	f000 f836 	bl	80092c2 <USBD_GetLen>
 8009256:	4603      	mov	r3, r0
 8009258:	3301      	adds	r3, #1
 800925a:	b29b      	uxth	r3, r3
 800925c:	005b      	lsls	r3, r3, #1
 800925e:	b29a      	uxth	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009264:	7dfb      	ldrb	r3, [r7, #23]
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	4413      	add	r3, r2
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	7812      	ldrb	r2, [r2, #0]
 800926e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009270:	7dfb      	ldrb	r3, [r7, #23]
 8009272:	3301      	adds	r3, #1
 8009274:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009276:	7dfb      	ldrb	r3, [r7, #23]
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	4413      	add	r3, r2
 800927c:	2203      	movs	r2, #3
 800927e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009280:	7dfb      	ldrb	r3, [r7, #23]
 8009282:	3301      	adds	r3, #1
 8009284:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009286:	e013      	b.n	80092b0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009288:	7dfb      	ldrb	r3, [r7, #23]
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	4413      	add	r3, r2
 800928e:	693a      	ldr	r2, [r7, #16]
 8009290:	7812      	ldrb	r2, [r2, #0]
 8009292:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	3301      	adds	r3, #1
 8009298:	613b      	str	r3, [r7, #16]
    idx++;
 800929a:	7dfb      	ldrb	r3, [r7, #23]
 800929c:	3301      	adds	r3, #1
 800929e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80092a0:	7dfb      	ldrb	r3, [r7, #23]
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	4413      	add	r3, r2
 80092a6:	2200      	movs	r2, #0
 80092a8:	701a      	strb	r2, [r3, #0]
    idx++;
 80092aa:	7dfb      	ldrb	r3, [r7, #23]
 80092ac:	3301      	adds	r3, #1
 80092ae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d1e7      	bne.n	8009288 <USBD_GetString+0x52>
 80092b8:	e000      	b.n	80092bc <USBD_GetString+0x86>
    return;
 80092ba:	bf00      	nop
  }
}
 80092bc:	3718      	adds	r7, #24
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80092c2:	b480      	push	{r7}
 80092c4:	b085      	sub	sp, #20
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80092ca:	2300      	movs	r3, #0
 80092cc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80092d2:	e005      	b.n	80092e0 <USBD_GetLen+0x1e>
  {
    len++;
 80092d4:	7bfb      	ldrb	r3, [r7, #15]
 80092d6:	3301      	adds	r3, #1
 80092d8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	3301      	adds	r3, #1
 80092de:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1f5      	bne.n	80092d4 <USBD_GetLen+0x12>
  }

  return len;
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3714      	adds	r7, #20
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b084      	sub	sp, #16
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	60f8      	str	r0, [r7, #12]
 80092fe:	60b9      	str	r1, [r7, #8]
 8009300:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2202      	movs	r2, #2
 8009306:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	2100      	movs	r1, #0
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f7f8 f9ea 	bl	80016f6 <USBD_LL_Transmit>

  return USBD_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	2100      	movs	r1, #0
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f7f8 f9d9 	bl	80016f6 <USBD_LL_Transmit>

  return USBD_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b084      	sub	sp, #16
 8009352:	af00      	add	r7, sp, #0
 8009354:	60f8      	str	r0, [r7, #12]
 8009356:	60b9      	str	r1, [r7, #8]
 8009358:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2203      	movs	r2, #3
 800935e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	2100      	movs	r1, #0
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	f7f8 f9dd 	bl	8001738 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	68ba      	ldr	r2, [r7, #8]
 8009398:	2100      	movs	r1, #0
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f7f8 f9cc 	bl	8001738 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b082      	sub	sp, #8
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2204      	movs	r2, #4
 80093b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80093ba:	2300      	movs	r3, #0
 80093bc:	2200      	movs	r2, #0
 80093be:	2100      	movs	r1, #0
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f7f8 f998 	bl	80016f6 <USBD_LL_Transmit>

  return USBD_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2205      	movs	r2, #5
 80093dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093e0:	2300      	movs	r3, #0
 80093e2:	2200      	movs	r2, #0
 80093e4:	2100      	movs	r1, #0
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f7f8 f9a6 	bl	8001738 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3708      	adds	r7, #8
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
	...

080093f8 <__errno>:
 80093f8:	4b01      	ldr	r3, [pc, #4]	; (8009400 <__errno+0x8>)
 80093fa:	6818      	ldr	r0, [r3, #0]
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop
 8009400:	20000194 	.word	0x20000194

08009404 <__libc_init_array>:
 8009404:	b570      	push	{r4, r5, r6, lr}
 8009406:	4e0d      	ldr	r6, [pc, #52]	; (800943c <__libc_init_array+0x38>)
 8009408:	4c0d      	ldr	r4, [pc, #52]	; (8009440 <__libc_init_array+0x3c>)
 800940a:	1ba4      	subs	r4, r4, r6
 800940c:	10a4      	asrs	r4, r4, #2
 800940e:	2500      	movs	r5, #0
 8009410:	42a5      	cmp	r5, r4
 8009412:	d109      	bne.n	8009428 <__libc_init_array+0x24>
 8009414:	4e0b      	ldr	r6, [pc, #44]	; (8009444 <__libc_init_array+0x40>)
 8009416:	4c0c      	ldr	r4, [pc, #48]	; (8009448 <__libc_init_array+0x44>)
 8009418:	f000 f8ea 	bl	80095f0 <_init>
 800941c:	1ba4      	subs	r4, r4, r6
 800941e:	10a4      	asrs	r4, r4, #2
 8009420:	2500      	movs	r5, #0
 8009422:	42a5      	cmp	r5, r4
 8009424:	d105      	bne.n	8009432 <__libc_init_array+0x2e>
 8009426:	bd70      	pop	{r4, r5, r6, pc}
 8009428:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800942c:	4798      	blx	r3
 800942e:	3501      	adds	r5, #1
 8009430:	e7ee      	b.n	8009410 <__libc_init_array+0xc>
 8009432:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009436:	4798      	blx	r3
 8009438:	3501      	adds	r5, #1
 800943a:	e7f2      	b.n	8009422 <__libc_init_array+0x1e>
 800943c:	080096ac 	.word	0x080096ac
 8009440:	080096ac 	.word	0x080096ac
 8009444:	080096ac 	.word	0x080096ac
 8009448:	080096b0 	.word	0x080096b0

0800944c <malloc>:
 800944c:	4b02      	ldr	r3, [pc, #8]	; (8009458 <malloc+0xc>)
 800944e:	4601      	mov	r1, r0
 8009450:	6818      	ldr	r0, [r3, #0]
 8009452:	f000 b861 	b.w	8009518 <_malloc_r>
 8009456:	bf00      	nop
 8009458:	20000194 	.word	0x20000194

0800945c <free>:
 800945c:	4b02      	ldr	r3, [pc, #8]	; (8009468 <free+0xc>)
 800945e:	4601      	mov	r1, r0
 8009460:	6818      	ldr	r0, [r3, #0]
 8009462:	f000 b80b 	b.w	800947c <_free_r>
 8009466:	bf00      	nop
 8009468:	20000194 	.word	0x20000194

0800946c <memset>:
 800946c:	4402      	add	r2, r0
 800946e:	4603      	mov	r3, r0
 8009470:	4293      	cmp	r3, r2
 8009472:	d100      	bne.n	8009476 <memset+0xa>
 8009474:	4770      	bx	lr
 8009476:	f803 1b01 	strb.w	r1, [r3], #1
 800947a:	e7f9      	b.n	8009470 <memset+0x4>

0800947c <_free_r>:
 800947c:	b538      	push	{r3, r4, r5, lr}
 800947e:	4605      	mov	r5, r0
 8009480:	2900      	cmp	r1, #0
 8009482:	d045      	beq.n	8009510 <_free_r+0x94>
 8009484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009488:	1f0c      	subs	r4, r1, #4
 800948a:	2b00      	cmp	r3, #0
 800948c:	bfb8      	it	lt
 800948e:	18e4      	addlt	r4, r4, r3
 8009490:	f000 f8ac 	bl	80095ec <__malloc_lock>
 8009494:	4a1f      	ldr	r2, [pc, #124]	; (8009514 <_free_r+0x98>)
 8009496:	6813      	ldr	r3, [r2, #0]
 8009498:	4610      	mov	r0, r2
 800949a:	b933      	cbnz	r3, 80094aa <_free_r+0x2e>
 800949c:	6063      	str	r3, [r4, #4]
 800949e:	6014      	str	r4, [r2, #0]
 80094a0:	4628      	mov	r0, r5
 80094a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094a6:	f000 b8a2 	b.w	80095ee <__malloc_unlock>
 80094aa:	42a3      	cmp	r3, r4
 80094ac:	d90c      	bls.n	80094c8 <_free_r+0x4c>
 80094ae:	6821      	ldr	r1, [r4, #0]
 80094b0:	1862      	adds	r2, r4, r1
 80094b2:	4293      	cmp	r3, r2
 80094b4:	bf04      	itt	eq
 80094b6:	681a      	ldreq	r2, [r3, #0]
 80094b8:	685b      	ldreq	r3, [r3, #4]
 80094ba:	6063      	str	r3, [r4, #4]
 80094bc:	bf04      	itt	eq
 80094be:	1852      	addeq	r2, r2, r1
 80094c0:	6022      	streq	r2, [r4, #0]
 80094c2:	6004      	str	r4, [r0, #0]
 80094c4:	e7ec      	b.n	80094a0 <_free_r+0x24>
 80094c6:	4613      	mov	r3, r2
 80094c8:	685a      	ldr	r2, [r3, #4]
 80094ca:	b10a      	cbz	r2, 80094d0 <_free_r+0x54>
 80094cc:	42a2      	cmp	r2, r4
 80094ce:	d9fa      	bls.n	80094c6 <_free_r+0x4a>
 80094d0:	6819      	ldr	r1, [r3, #0]
 80094d2:	1858      	adds	r0, r3, r1
 80094d4:	42a0      	cmp	r0, r4
 80094d6:	d10b      	bne.n	80094f0 <_free_r+0x74>
 80094d8:	6820      	ldr	r0, [r4, #0]
 80094da:	4401      	add	r1, r0
 80094dc:	1858      	adds	r0, r3, r1
 80094de:	4282      	cmp	r2, r0
 80094e0:	6019      	str	r1, [r3, #0]
 80094e2:	d1dd      	bne.n	80094a0 <_free_r+0x24>
 80094e4:	6810      	ldr	r0, [r2, #0]
 80094e6:	6852      	ldr	r2, [r2, #4]
 80094e8:	605a      	str	r2, [r3, #4]
 80094ea:	4401      	add	r1, r0
 80094ec:	6019      	str	r1, [r3, #0]
 80094ee:	e7d7      	b.n	80094a0 <_free_r+0x24>
 80094f0:	d902      	bls.n	80094f8 <_free_r+0x7c>
 80094f2:	230c      	movs	r3, #12
 80094f4:	602b      	str	r3, [r5, #0]
 80094f6:	e7d3      	b.n	80094a0 <_free_r+0x24>
 80094f8:	6820      	ldr	r0, [r4, #0]
 80094fa:	1821      	adds	r1, r4, r0
 80094fc:	428a      	cmp	r2, r1
 80094fe:	bf04      	itt	eq
 8009500:	6811      	ldreq	r1, [r2, #0]
 8009502:	6852      	ldreq	r2, [r2, #4]
 8009504:	6062      	str	r2, [r4, #4]
 8009506:	bf04      	itt	eq
 8009508:	1809      	addeq	r1, r1, r0
 800950a:	6021      	streq	r1, [r4, #0]
 800950c:	605c      	str	r4, [r3, #4]
 800950e:	e7c7      	b.n	80094a0 <_free_r+0x24>
 8009510:	bd38      	pop	{r3, r4, r5, pc}
 8009512:	bf00      	nop
 8009514:	200041e4 	.word	0x200041e4

08009518 <_malloc_r>:
 8009518:	b570      	push	{r4, r5, r6, lr}
 800951a:	1ccd      	adds	r5, r1, #3
 800951c:	f025 0503 	bic.w	r5, r5, #3
 8009520:	3508      	adds	r5, #8
 8009522:	2d0c      	cmp	r5, #12
 8009524:	bf38      	it	cc
 8009526:	250c      	movcc	r5, #12
 8009528:	2d00      	cmp	r5, #0
 800952a:	4606      	mov	r6, r0
 800952c:	db01      	blt.n	8009532 <_malloc_r+0x1a>
 800952e:	42a9      	cmp	r1, r5
 8009530:	d903      	bls.n	800953a <_malloc_r+0x22>
 8009532:	230c      	movs	r3, #12
 8009534:	6033      	str	r3, [r6, #0]
 8009536:	2000      	movs	r0, #0
 8009538:	bd70      	pop	{r4, r5, r6, pc}
 800953a:	f000 f857 	bl	80095ec <__malloc_lock>
 800953e:	4a21      	ldr	r2, [pc, #132]	; (80095c4 <_malloc_r+0xac>)
 8009540:	6814      	ldr	r4, [r2, #0]
 8009542:	4621      	mov	r1, r4
 8009544:	b991      	cbnz	r1, 800956c <_malloc_r+0x54>
 8009546:	4c20      	ldr	r4, [pc, #128]	; (80095c8 <_malloc_r+0xb0>)
 8009548:	6823      	ldr	r3, [r4, #0]
 800954a:	b91b      	cbnz	r3, 8009554 <_malloc_r+0x3c>
 800954c:	4630      	mov	r0, r6
 800954e:	f000 f83d 	bl	80095cc <_sbrk_r>
 8009552:	6020      	str	r0, [r4, #0]
 8009554:	4629      	mov	r1, r5
 8009556:	4630      	mov	r0, r6
 8009558:	f000 f838 	bl	80095cc <_sbrk_r>
 800955c:	1c43      	adds	r3, r0, #1
 800955e:	d124      	bne.n	80095aa <_malloc_r+0x92>
 8009560:	230c      	movs	r3, #12
 8009562:	6033      	str	r3, [r6, #0]
 8009564:	4630      	mov	r0, r6
 8009566:	f000 f842 	bl	80095ee <__malloc_unlock>
 800956a:	e7e4      	b.n	8009536 <_malloc_r+0x1e>
 800956c:	680b      	ldr	r3, [r1, #0]
 800956e:	1b5b      	subs	r3, r3, r5
 8009570:	d418      	bmi.n	80095a4 <_malloc_r+0x8c>
 8009572:	2b0b      	cmp	r3, #11
 8009574:	d90f      	bls.n	8009596 <_malloc_r+0x7e>
 8009576:	600b      	str	r3, [r1, #0]
 8009578:	50cd      	str	r5, [r1, r3]
 800957a:	18cc      	adds	r4, r1, r3
 800957c:	4630      	mov	r0, r6
 800957e:	f000 f836 	bl	80095ee <__malloc_unlock>
 8009582:	f104 000b 	add.w	r0, r4, #11
 8009586:	1d23      	adds	r3, r4, #4
 8009588:	f020 0007 	bic.w	r0, r0, #7
 800958c:	1ac3      	subs	r3, r0, r3
 800958e:	d0d3      	beq.n	8009538 <_malloc_r+0x20>
 8009590:	425a      	negs	r2, r3
 8009592:	50e2      	str	r2, [r4, r3]
 8009594:	e7d0      	b.n	8009538 <_malloc_r+0x20>
 8009596:	428c      	cmp	r4, r1
 8009598:	684b      	ldr	r3, [r1, #4]
 800959a:	bf16      	itet	ne
 800959c:	6063      	strne	r3, [r4, #4]
 800959e:	6013      	streq	r3, [r2, #0]
 80095a0:	460c      	movne	r4, r1
 80095a2:	e7eb      	b.n	800957c <_malloc_r+0x64>
 80095a4:	460c      	mov	r4, r1
 80095a6:	6849      	ldr	r1, [r1, #4]
 80095a8:	e7cc      	b.n	8009544 <_malloc_r+0x2c>
 80095aa:	1cc4      	adds	r4, r0, #3
 80095ac:	f024 0403 	bic.w	r4, r4, #3
 80095b0:	42a0      	cmp	r0, r4
 80095b2:	d005      	beq.n	80095c0 <_malloc_r+0xa8>
 80095b4:	1a21      	subs	r1, r4, r0
 80095b6:	4630      	mov	r0, r6
 80095b8:	f000 f808 	bl	80095cc <_sbrk_r>
 80095bc:	3001      	adds	r0, #1
 80095be:	d0cf      	beq.n	8009560 <_malloc_r+0x48>
 80095c0:	6025      	str	r5, [r4, #0]
 80095c2:	e7db      	b.n	800957c <_malloc_r+0x64>
 80095c4:	200041e4 	.word	0x200041e4
 80095c8:	200041e8 	.word	0x200041e8

080095cc <_sbrk_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	4c06      	ldr	r4, [pc, #24]	; (80095e8 <_sbrk_r+0x1c>)
 80095d0:	2300      	movs	r3, #0
 80095d2:	4605      	mov	r5, r0
 80095d4:	4608      	mov	r0, r1
 80095d6:	6023      	str	r3, [r4, #0]
 80095d8:	f7f7 fae8 	bl	8000bac <_sbrk>
 80095dc:	1c43      	adds	r3, r0, #1
 80095de:	d102      	bne.n	80095e6 <_sbrk_r+0x1a>
 80095e0:	6823      	ldr	r3, [r4, #0]
 80095e2:	b103      	cbz	r3, 80095e6 <_sbrk_r+0x1a>
 80095e4:	602b      	str	r3, [r5, #0]
 80095e6:	bd38      	pop	{r3, r4, r5, pc}
 80095e8:	20005f8c 	.word	0x20005f8c

080095ec <__malloc_lock>:
 80095ec:	4770      	bx	lr

080095ee <__malloc_unlock>:
 80095ee:	4770      	bx	lr

080095f0 <_init>:
 80095f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f2:	bf00      	nop
 80095f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f6:	bc08      	pop	{r3}
 80095f8:	469e      	mov	lr, r3
 80095fa:	4770      	bx	lr

080095fc <_fini>:
 80095fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fe:	bf00      	nop
 8009600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009602:	bc08      	pop	{r3}
 8009604:	469e      	mov	lr, r3
 8009606:	4770      	bx	lr
