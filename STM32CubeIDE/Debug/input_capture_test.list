
input_capture_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005078  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08005204  08005204  00015204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052cc  080052cc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080052cc  080052cc  000152cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052d4  080052d4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052d4  080052d4  000152d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052d8  080052d8  000152d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080052dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000070  0800534c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  0800534c  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b42  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000219a  00000000  00000000  00030be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f38  00000000  00000000  00032d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e20  00000000  00000000  00033cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003997  00000000  00000000  00034ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c691  00000000  00000000  0003846f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000abb3b  00000000  00000000  00044b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f063b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044c0  00000000  00000000  000f06b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000070 	.word	0x20000070
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080051ec 	.word	0x080051ec

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000074 	.word	0x20000074
 80001c8:	080051ec 	.word	0x080051ec

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <__io_putchar>:
#else
    #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80004d4:	1d39      	adds	r1, r7, #4
 80004d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004da:	2201      	movs	r2, #1
 80004dc:	4803      	ldr	r0, [pc, #12]	; (80004ec <__io_putchar+0x20>)
 80004de:	f003 fdbf 	bl	8004060 <HAL_UART_Transmit>
  return ch;
 80004e2:	687b      	ldr	r3, [r7, #4]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000180 	.word	0x20000180

080004f0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <HAL_TIM_IC_CaptureCallback+0x44>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d106      	bne.n	8000510 <HAL_TIM_IC_CaptureCallback+0x20>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	7f1b      	ldrb	r3, [r3, #28]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d102      	bne.n	8000510 <HAL_TIM_IC_CaptureCallback+0x20>
  {
    ch1done = true;
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <HAL_TIM_IC_CaptureCallback+0x48>)
 800050c:	2201      	movs	r2, #1
 800050e:	701a      	strb	r2, [r3, #0]
  }

  if(htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a07      	ldr	r2, [pc, #28]	; (8000534 <HAL_TIM_IC_CaptureCallback+0x44>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d106      	bne.n	8000528 <HAL_TIM_IC_CaptureCallback+0x38>
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	7f1b      	ldrb	r3, [r3, #28]
 800051e:	2b02      	cmp	r3, #2
 8000520:	d102      	bne.n	8000528 <HAL_TIM_IC_CaptureCallback+0x38>
  {
    ch2done = true;
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000524:	2201      	movs	r2, #1
 8000526:	701a      	strb	r2, [r3, #0]
  }
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	40012c00 	.word	0x40012c00
 8000538:	2000008c 	.word	0x2000008c
 800053c:	2000008d 	.word	0x2000008d

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fd78 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f83c 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 fa34 	bl	80009b8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000550:	f000 f8a2 	bl	8000698 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000554:	f000 f926 	bl	80007a4 <MX_TIM2_Init>
  MX_TIM15_Init();
 8000558:	f000 f978 	bl	800084c <MX_TIM15_Init>
  MX_USART2_UART_Init();
 800055c:	f000 f9fc 	bl	8000958 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000560:	2100      	movs	r1, #0
 8000562:	4811      	ldr	r0, [pc, #68]	; (80005a8 <main+0x68>)
 8000564:	f002 fab8 	bl	8002ad8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000568:	2104      	movs	r1, #4
 800056a:	480f      	ldr	r0, [pc, #60]	; (80005a8 <main+0x68>)
 800056c:	f002 fab4 	bl	8002ad8 <HAL_TIM_IC_Start_IT>

  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000570:	2104      	movs	r1, #4
 8000572:	480e      	ldr	r0, [pc, #56]	; (80005ac <main+0x6c>)
 8000574:	f002 f97a 	bl	800286c <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("start!!!! \r\n");
 8000578:	480d      	ldr	r0, [pc, #52]	; (80005b0 <main+0x70>)
 800057a:	f004 fa2b 	bl	80049d4 <puts>
  while (1)
  {
    if (ch1done)
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <main+0x74>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d005      	beq.n	8000592 <main+0x52>
    {
      printf("ch1 \r\n");
 8000586:	480c      	ldr	r0, [pc, #48]	; (80005b8 <main+0x78>)
 8000588:	f004 fa24 	bl	80049d4 <puts>
      ch1done = false;
 800058c:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <main+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
    }
    if (ch2done)
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <main+0x7c>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d0f1      	beq.n	800057e <main+0x3e>
    {
      printf("ch2 \r\n");
 800059a:	4809      	ldr	r0, [pc, #36]	; (80005c0 <main+0x80>)
 800059c:	f004 fa1a 	bl	80049d4 <puts>
      ch2done = false;
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <main+0x7c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
    if (ch1done)
 80005a6:	e7ea      	b.n	800057e <main+0x3e>
 80005a8:	200000e8 	.word	0x200000e8
 80005ac:	2000009c 	.word	0x2000009c
 80005b0:	08005204 	.word	0x08005204
 80005b4:	2000008c 	.word	0x2000008c
 80005b8:	08005210 	.word	0x08005210
 80005bc:	2000008d 	.word	0x2000008d
 80005c0:	08005218 	.word	0x08005218

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b0a4      	sub	sp, #144	; 0x90
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005ce:	2244      	movs	r2, #68	; 0x44
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f004 f99a 	bl	800490c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2234      	movs	r2, #52	; 0x34
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f004 f98c 	bl	800490c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f8:	f001 f844 	bl	8001684 <HAL_PWREx_ControlVoltageScaling>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000602:	f000 fa65 	bl	8000ad0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000606:	2310      	movs	r3, #16
 8000608:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800060a:	2301      	movs	r3, #1
 800060c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000612:	2360      	movs	r3, #96	; 0x60
 8000614:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000616:	2302      	movs	r3, #2
 8000618:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800061a:	2301      	movs	r3, #1
 800061c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800061e:	2301      	movs	r3, #1
 8000620:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000624:	2328      	movs	r3, #40	; 0x28
 8000626:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000636:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800063a:	4618      	mov	r0, r3
 800063c:	f001 f878 	bl	8001730 <HAL_RCC_OscConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000646:	f000 fa43 	bl	8000ad0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	230f      	movs	r3, #15
 800064c:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2303      	movs	r3, #3
 8000650:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800065e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000662:	2104      	movs	r1, #4
 8000664:	4618      	mov	r0, r3
 8000666:	f001 fcc9 	bl	8001ffc <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000670:	f000 fa2e 	bl	8000ad0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000674:	2302      	movs	r3, #2
 8000676:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	4618      	mov	r0, r3
 8000680:	f001 fec0 	bl	8002404 <HAL_RCCEx_PeriphCLKConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800068a:	f000 fa21 	bl	8000ad0 <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3790      	adds	r7, #144	; 0x90
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08c      	sub	sp, #48	; 0x30
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006c4:	4b35      	ldr	r3, [pc, #212]	; (800079c <MX_TIM1_Init+0x104>)
 80006c6:	4a36      	ldr	r2, [pc, #216]	; (80007a0 <MX_TIM1_Init+0x108>)
 80006c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9-1;
 80006ca:	4b34      	ldr	r3, [pc, #208]	; (800079c <MX_TIM1_Init+0x104>)
 80006cc:	2208      	movs	r2, #8
 80006ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d0:	4b32      	ldr	r3, [pc, #200]	; (800079c <MX_TIM1_Init+0x104>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65536-1;
 80006d6:	4b31      	ldr	r3, [pc, #196]	; (800079c <MX_TIM1_Init+0x104>)
 80006d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006de:	4b2f      	ldr	r3, [pc, #188]	; (800079c <MX_TIM1_Init+0x104>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006e4:	4b2d      	ldr	r3, [pc, #180]	; (800079c <MX_TIM1_Init+0x104>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ea:	4b2c      	ldr	r3, [pc, #176]	; (800079c <MX_TIM1_Init+0x104>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006f0:	482a      	ldr	r0, [pc, #168]	; (800079c <MX_TIM1_Init+0x104>)
 80006f2:	f002 f80d 	bl	8002710 <HAL_TIM_Base_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80006fc:	f000 f9e8 	bl	8000ad0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000704:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	4619      	mov	r1, r3
 800070c:	4823      	ldr	r0, [pc, #140]	; (800079c <MX_TIM1_Init+0x104>)
 800070e:	f002 fdcd 	bl	80032ac <HAL_TIM_ConfigClockSource>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000718:	f000 f9da 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800071c:	481f      	ldr	r0, [pc, #124]	; (800079c <MX_TIM1_Init+0x104>)
 800071e:	f002 f983 	bl	8002a28 <HAL_TIM_IC_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000728:	f000 f9d2 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	4817      	ldr	r0, [pc, #92]	; (800079c <MX_TIM1_Init+0x104>)
 8000740:	f003 fb44 	bl	8003dcc <HAL_TIMEx_MasterConfigSynchronization>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800074a:	f000 f9c1 	bl	8000ad0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000752:	2301      	movs	r3, #1
 8000754:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2200      	movs	r2, #0
 8000762:	4619      	mov	r1, r3
 8000764:	480d      	ldr	r0, [pc, #52]	; (800079c <MX_TIM1_Init+0x104>)
 8000766:	f002 fbfc 	bl	8002f62 <HAL_TIM_IC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000770:	f000 f9ae 	bl	8000ad0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000774:	2302      	movs	r3, #2
 8000776:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000778:	2302      	movs	r3, #2
 800077a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2204      	movs	r2, #4
 8000780:	4619      	mov	r1, r3
 8000782:	4806      	ldr	r0, [pc, #24]	; (800079c <MX_TIM1_Init+0x104>)
 8000784:	f002 fbed 	bl	8002f62 <HAL_TIM_IC_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800078e:	f000 f99f 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	3730      	adds	r7, #48	; 0x30
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000e8 	.word	0x200000e8
 80007a0:	40012c00 	.word	0x40012c00

080007a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c2:	4b21      	ldr	r3, [pc, #132]	; (8000848 <MX_TIM2_Init+0xa4>)
 80007c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_TIM2_Init+0xa4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d0:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_TIM2_Init+0xa4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_TIM2_Init+0xa4>)
 80007d8:	f04f 32ff 	mov.w	r2, #4294967295
 80007dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_TIM2_Init+0xa4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_TIM2_Init+0xa4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80007ea:	4817      	ldr	r0, [pc, #92]	; (8000848 <MX_TIM2_Init+0xa4>)
 80007ec:	f002 f91c 	bl	8002a28 <HAL_TIM_IC_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007f6:	f000 f96b 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	480f      	ldr	r0, [pc, #60]	; (8000848 <MX_TIM2_Init+0xa4>)
 800080a:	f003 fadf 	bl	8003dcc <HAL_TIMEx_MasterConfigSynchronization>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000814:	f000 f95c 	bl	8000ad0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800081c:	2301      	movs	r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	4619      	mov	r1, r3
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <MX_TIM2_Init+0xa4>)
 8000830:	f002 fb97 	bl	8002f62 <HAL_TIM_IC_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800083a:	f000 f949 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	3720      	adds	r7, #32
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000134 	.word	0x20000134

0800084c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b096      	sub	sp, #88	; 0x58
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000852:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800085e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
 800086e:	615a      	str	r2, [r3, #20]
 8000870:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	222c      	movs	r2, #44	; 0x2c
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f004 f847 	bl	800490c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800087e:	4b34      	ldr	r3, [pc, #208]	; (8000950 <MX_TIM15_Init+0x104>)
 8000880:	4a34      	ldr	r2, [pc, #208]	; (8000954 <MX_TIM15_Init+0x108>)
 8000882:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 8000884:	4b32      	ldr	r3, [pc, #200]	; (8000950 <MX_TIM15_Init+0x104>)
 8000886:	224f      	movs	r2, #79	; 0x4f
 8000888:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088a:	4b31      	ldr	r3, [pc, #196]	; (8000950 <MX_TIM15_Init+0x104>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 8000890:	4b2f      	ldr	r3, [pc, #188]	; (8000950 <MX_TIM15_Init+0x104>)
 8000892:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000896:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000898:	4b2d      	ldr	r3, [pc, #180]	; (8000950 <MX_TIM15_Init+0x104>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800089e:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <MX_TIM15_Init+0x104>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a4:	4b2a      	ldr	r3, [pc, #168]	; (8000950 <MX_TIM15_Init+0x104>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80008aa:	4829      	ldr	r0, [pc, #164]	; (8000950 <MX_TIM15_Init+0x104>)
 80008ac:	f001 ff87 	bl	80027be <HAL_TIM_PWM_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 f90b 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ba:	2300      	movs	r3, #0
 80008bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80008c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008c6:	4619      	mov	r1, r3
 80008c8:	4821      	ldr	r0, [pc, #132]	; (8000950 <MX_TIM15_Init+0x104>)
 80008ca:	f003 fa7f 	bl	8003dcc <HAL_TIMEx_MasterConfigSynchronization>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80008d4:	f000 f8fc 	bl	8000ad0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d8:	2360      	movs	r3, #96	; 0x60
 80008da:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 500;
 80008dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e2:	2300      	movs	r3, #0
 80008e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008e6:	2300      	movs	r3, #0
 80008e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008ee:	2300      	movs	r3, #0
 80008f0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008fa:	2204      	movs	r2, #4
 80008fc:	4619      	mov	r1, r3
 80008fe:	4814      	ldr	r0, [pc, #80]	; (8000950 <MX_TIM15_Init+0x104>)
 8000900:	f002 fbc4 	bl	800308c <HAL_TIM_PWM_ConfigChannel>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 800090a:	f000 f8e1 	bl	8000ad0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000926:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	4619      	mov	r1, r3
 8000930:	4807      	ldr	r0, [pc, #28]	; (8000950 <MX_TIM15_Init+0x104>)
 8000932:	f003 fab1 	bl	8003e98 <HAL_TIMEx_ConfigBreakDeadTime>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM15_Init+0xf4>
  {
    Error_Handler();
 800093c:	f000 f8c8 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000940:	4803      	ldr	r0, [pc, #12]	; (8000950 <MX_TIM15_Init+0x104>)
 8000942:	f000 fa9f 	bl	8000e84 <HAL_TIM_MspPostInit>

}
 8000946:	bf00      	nop
 8000948:	3758      	adds	r7, #88	; 0x58
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2000009c 	.word	0x2000009c
 8000954:	40014000 	.word	0x40014000

08000958 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 800095e:	4a15      	ldr	r2, [pc, #84]	; (80009b4 <MX_USART2_UART_Init+0x5c>)
 8000960:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000962:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 8000964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000968:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 800099c:	f003 fb12 	bl	8003fc4 <HAL_UART_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009a6:	f000 f893 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000180 	.word	0x20000180
 80009b4:	40004400 	.word	0x40004400

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	4b3c      	ldr	r3, [pc, #240]	; (8000ac0 <MX_GPIO_Init+0x108>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	4a3b      	ldr	r2, [pc, #236]	; (8000ac0 <MX_GPIO_Init+0x108>)
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009da:	4b39      	ldr	r3, [pc, #228]	; (8000ac0 <MX_GPIO_Init+0x108>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	f003 0304 	and.w	r3, r3, #4
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e6:	4b36      	ldr	r3, [pc, #216]	; (8000ac0 <MX_GPIO_Init+0x108>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	4a35      	ldr	r2, [pc, #212]	; (8000ac0 <MX_GPIO_Init+0x108>)
 80009ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f2:	4b33      	ldr	r3, [pc, #204]	; (8000ac0 <MX_GPIO_Init+0x108>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	4b30      	ldr	r3, [pc, #192]	; (8000ac0 <MX_GPIO_Init+0x108>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	4a2f      	ldr	r2, [pc, #188]	; (8000ac0 <MX_GPIO_Init+0x108>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0a:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <MX_GPIO_Init+0x108>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <MX_GPIO_Init+0x108>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	4a29      	ldr	r2, [pc, #164]	; (8000ac0 <MX_GPIO_Init+0x108>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a22:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <MX_GPIO_Init+0x108>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	21b0      	movs	r1, #176	; 0xb0
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a36:	f000 fdff 	bl	8001638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a40:	4820      	ldr	r0, [pc, #128]	; (8000ac4 <MX_GPIO_Init+0x10c>)
 8000a42:	f000 fdf9 	bl	8001638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <MX_GPIO_Init+0x110>)
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	481c      	ldr	r0, [pc, #112]	; (8000acc <MX_GPIO_Init+0x114>)
 8000a5c:	f000 fc7a 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000a60:	23b0      	movs	r3, #176	; 0xb0
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7a:	f000 fc6b 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000a7e:	2340      	movs	r3, #64	; 0x40
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a94:	f000 fc5e 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <MX_GPIO_Init+0x10c>)
 8000ab2:	f000 fc4f 	bl	8001354 <HAL_GPIO_Init>

}
 8000ab6:	bf00      	nop
 8000ab8:	3728      	adds	r7, #40	; 0x28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	48000400 	.word	0x48000400
 8000ac8:	10210000 	.word	0x10210000
 8000acc:	48000800 	.word	0x48000800

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <Error_Handler+0x6>

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_MspInit+0x44>)
 8000ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <HAL_MspInit+0x44>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6613      	str	r3, [r2, #96]	; 0x60
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <HAL_MspInit+0x44>)
 8000aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_MspInit+0x44>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <HAL_MspInit+0x44>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b00:	6593      	str	r3, [r2, #88]	; 0x58
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_MspInit+0x44>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <NMI_Handler+0x4>

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <MemManage_Handler+0x4>

08000b32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6c:	f000 fac0 	bl	80010f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b78:	4803      	ldr	r0, [pc, #12]	; (8000b88 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8000b7a:	f002 f8d3 	bl	8002d24 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8000b7e:	4803      	ldr	r0, [pc, #12]	; (8000b8c <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8000b80:	f002 f8d0 	bl	8002d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200000e8 	.word	0x200000e8
 8000b8c:	2000009c 	.word	0x2000009c

08000b90 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <TIM1_TRG_COM_IRQHandler+0x10>)
 8000b96:	f002 f8c5 	bl	8002d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200000e8 	.word	0x200000e8

08000ba4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <TIM1_CC_IRQHandler+0x10>)
 8000baa:	f002 f8bb 	bl	8002d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000e8 	.word	0x200000e8

08000bb8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	e00a      	b.n	8000be0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bca:	f3af 8000 	nop.w
 8000bce:	4601      	mov	r1, r0
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	1c5a      	adds	r2, r3, #1
 8000bd4:	60ba      	str	r2, [r7, #8]
 8000bd6:	b2ca      	uxtb	r2, r1
 8000bd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	dbf0      	blt.n	8000bca <_read+0x12>
	}

return len;
 8000be8:	687b      	ldr	r3, [r7, #4]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b086      	sub	sp, #24
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	60f8      	str	r0, [r7, #12]
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	e009      	b.n	8000c18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	1c5a      	adds	r2, r3, #1
 8000c08:	60ba      	str	r2, [r7, #8]
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fc5d 	bl	80004cc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	3301      	adds	r3, #1
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697a      	ldr	r2, [r7, #20]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	dbf1      	blt.n	8000c04 <_write+0x12>
	}
	return len;
 8000c20:	687b      	ldr	r3, [r7, #4]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <_close>:

int _close(int file)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
	return -1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
 8000c4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c52:	605a      	str	r2, [r3, #4]
	return 0;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <_isatty>:

int _isatty(int file)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b083      	sub	sp, #12
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
	return 1;
 8000c6a:	2301      	movs	r3, #1
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
	return 0;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c9c:	4a14      	ldr	r2, [pc, #80]	; (8000cf0 <_sbrk+0x5c>)
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <_sbrk+0x60>)
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <_sbrk+0x64>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d102      	bne.n	8000cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <_sbrk+0x64>)
 8000cb2:	4a12      	ldr	r2, [pc, #72]	; (8000cfc <_sbrk+0x68>)
 8000cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <_sbrk+0x64>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d207      	bcs.n	8000cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc4:	f003 fdf8 	bl	80048b8 <__errno>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	230c      	movs	r3, #12
 8000ccc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	e009      	b.n	8000ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <_sbrk+0x64>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <_sbrk+0x64>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <_sbrk+0x64>)
 8000ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	2000a000 	.word	0x2000a000
 8000cf4:	00000400 	.word	0x00000400
 8000cf8:	20000090 	.word	0x20000090
 8000cfc:	20000208 	.word	0x20000208

08000d00 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim15);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a24      	ldr	r2, [pc, #144]	; (8000db0 <HAL_TIM_Base_MspInit+0xb0>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d141      	bne.n	8000da6 <HAL_TIM_Base_MspInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d22:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <HAL_TIM_Base_MspInit+0xb4>)
 8000d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d26:	4a23      	ldr	r2, [pc, #140]	; (8000db4 <HAL_TIM_Base_MspInit+0xb4>)
 8000d28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d2e:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <HAL_TIM_Base_MspInit+0xb4>)
 8000d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <HAL_TIM_Base_MspInit+0xb4>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	4a1d      	ldr	r2, [pc, #116]	; (8000db4 <HAL_TIM_Base_MspInit+0xb4>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d46:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <HAL_TIM_Base_MspInit+0xb4>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d64:	2301      	movs	r3, #1
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d72:	f000 faef 	bl	8001354 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	2018      	movs	r0, #24
 8000d7c:	f000 fab3 	bl	80012e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000d80:	2018      	movs	r0, #24
 8000d82:	f000 facc 	bl	800131e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	201a      	movs	r0, #26
 8000d8c:	f000 faab 	bl	80012e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000d90:	201a      	movs	r0, #26
 8000d92:	f000 fac4 	bl	800131e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	201b      	movs	r0, #27
 8000d9c:	f000 faa3 	bl	80012e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000da0:	201b      	movs	r0, #27
 8000da2:	f000 fabc 	bl	800131e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	; 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40012c00 	.word	0x40012c00
 8000db4:	40021000 	.word	0x40021000

08000db8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd8:	d128      	bne.n	8000e2c <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <HAL_TIM_IC_MspInit+0x7c>)
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dde:	4a15      	ldr	r2, [pc, #84]	; (8000e34 <HAL_TIM_IC_MspInit+0x7c>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6593      	str	r3, [r2, #88]	; 0x58
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <HAL_TIM_IC_MspInit+0x7c>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <HAL_TIM_IC_MspInit+0x7c>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	4a0f      	ldr	r2, [pc, #60]	; (8000e34 <HAL_TIM_IC_MspInit+0x7c>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <HAL_TIM_IC_MspInit+0x7c>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e28:	f000 fa94 	bl	8001354 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40021000 	.word	0x40021000

08000e38 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <HAL_TIM_PWM_MspInit+0x44>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d113      	bne.n	8000e72 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <HAL_TIM_PWM_MspInit+0x48>)
 8000e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4e:	4a0c      	ldr	r2, [pc, #48]	; (8000e80 <HAL_TIM_PWM_MspInit+0x48>)
 8000e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e54:	6613      	str	r3, [r2, #96]	; 0x60
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_TIM_PWM_MspInit+0x48>)
 8000e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	2018      	movs	r0, #24
 8000e68:	f000 fa3d 	bl	80012e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000e6c:	2018      	movs	r0, #24
 8000e6e:	f000 fa56 	bl	800131e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40014000 	.word	0x40014000
 8000e80:	40021000 	.word	0x40021000

08000e84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a11      	ldr	r2, [pc, #68]	; (8000ee8 <HAL_TIM_MspPostInit+0x64>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d11c      	bne.n	8000ee0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_TIM_MspPostInit+0x68>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	4a10      	ldr	r2, [pc, #64]	; (8000eec <HAL_TIM_MspPostInit+0x68>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_TIM_MspPostInit+0x68>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PB15     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = PWM_Output_Pin;
 8000ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ec2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000ed0:	230e      	movs	r3, #14
 8000ed2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_Output_GPIO_Port, &GPIO_InitStruct);
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <HAL_TIM_MspPostInit+0x6c>)
 8000edc:	f000 fa3a 	bl	8001354 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000ee0:	bf00      	nop
 8000ee2:	3720      	adds	r7, #32
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40014000 	.word	0x40014000
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	48000400 	.word	0x48000400

08000ef4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a17      	ldr	r2, [pc, #92]	; (8000f70 <HAL_UART_MspInit+0x7c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d128      	bne.n	8000f68 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <HAL_UART_MspInit+0x80>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1a:	4a16      	ldr	r2, [pc, #88]	; (8000f74 <HAL_UART_MspInit+0x80>)
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f20:	6593      	str	r3, [r2, #88]	; 0x58
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <HAL_UART_MspInit+0x80>)
 8000f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_UART_MspInit+0x80>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	4a10      	ldr	r2, [pc, #64]	; (8000f74 <HAL_UART_MspInit+0x80>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <HAL_UART_MspInit+0x80>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f46:	230c      	movs	r3, #12
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f56:	2307      	movs	r3, #7
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f64:	f000 f9f6 	bl	8001354 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f68:	bf00      	nop
 8000f6a:	3728      	adds	r7, #40	; 0x28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40004400 	.word	0x40004400
 8000f74:	40021000 	.word	0x40021000

08000f78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f7c:	f000 f826 	bl	8000fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f80:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f82:	e003      	b.n	8000f8c <LoopCopyDataInit>

08000f84 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f86:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f88:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f8a:	3104      	adds	r1, #4

08000f8c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f8c:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f90:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f92:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f94:	d3f6      	bcc.n	8000f84 <CopyDataInit>
	ldr	r2, =_sbss
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f98:	e002      	b.n	8000fa0 <LoopFillZerobss>

08000f9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f9a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f9c:	f842 3b04 	str.w	r3, [r2], #4

08000fa0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <LoopForever+0x16>)
	cmp	r2, r3
 8000fa2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fa4:	d3f9      	bcc.n	8000f9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa6:	f003 fc8d 	bl	80048c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000faa:	f7ff fac9 	bl	8000540 <main>

08000fae <LoopForever>:

LoopForever:
    b LoopForever
 8000fae:	e7fe      	b.n	8000fae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fb0:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000fb4:	080052dc 	.word	0x080052dc
	ldr	r0, =_sdata
 8000fb8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000fbc:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000fc0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000fc4:	20000208 	.word	0x20000208

08000fc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC1_2_IRQHandler>
	...

08000fcc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <SystemInit+0x64>)
 8000fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd6:	4a16      	ldr	r2, [pc, #88]	; (8001030 <SystemInit+0x64>)
 8000fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <SystemInit+0x68>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a13      	ldr	r2, [pc, #76]	; (8001034 <SystemInit+0x68>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <SystemInit+0x68>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <SystemInit+0x68>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a0f      	ldr	r2, [pc, #60]	; (8001034 <SystemInit+0x68>)
 8000ff8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ffc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001000:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <SystemInit+0x68>)
 8001004:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001008:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <SystemInit+0x68>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a09      	ldr	r2, [pc, #36]	; (8001034 <SystemInit+0x68>)
 8001010:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001014:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <SystemInit+0x68>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <SystemInit+0x64>)
 800101e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001022:	609a      	str	r2, [r3, #8]
#endif
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000ed00 	.word	0xe000ed00
 8001034:	40021000 	.word	0x40021000

08001038 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_Init+0x3c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <HAL_Init+0x3c>)
 8001048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104e:	2003      	movs	r0, #3
 8001050:	f000 f93e 	bl	80012d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001054:	2000      	movs	r0, #0
 8001056:	f000 f80f 	bl	8001078 <HAL_InitTick>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d002      	beq.n	8001066 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	e001      	b.n	800106a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001066:	f7ff fd37 	bl	8000ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800106a:	79fb      	ldrb	r3, [r7, #7]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40022000 	.word	0x40022000

08001078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001080:	2300      	movs	r3, #0
 8001082:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_InitTick+0x6c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d023      	beq.n	80010d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <HAL_InitTick+0x70>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_InitTick+0x6c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109a:	fbb3 f3f1 	udiv	r3, r3, r1
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f949 	bl	800133a <HAL_SYSTICK_Config>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10f      	bne.n	80010ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	d809      	bhi.n	80010c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f000 f913 	bl	80012e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010c0:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <HAL_InitTick+0x74>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e007      	b.n	80010d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	e004      	b.n	80010d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	e001      	b.n	80010d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000008 	.word	0x20000008
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000004 	.word	0x20000004

080010f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_IncTick+0x20>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x24>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	4a04      	ldr	r2, [pc, #16]	; (8001114 <HAL_IncTick+0x24>)
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000008 	.word	0x20000008
 8001114:	20000200 	.word	0x20000200

08001118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <HAL_GetTick+0x14>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000200 	.word	0x20000200

08001130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800114c:	4013      	ands	r3, r2
 800114e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800115c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001162:	4a04      	ldr	r2, [pc, #16]	; (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	60d3      	str	r3, [r2, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <__NVIC_GetPriorityGrouping+0x18>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	f003 0307 	and.w	r3, r3, #7
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	db0b      	blt.n	80011be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	f003 021f 	and.w	r2, r3, #31
 80011ac:	4907      	ldr	r1, [pc, #28]	; (80011cc <__NVIC_EnableIRQ+0x38>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	095b      	lsrs	r3, r3, #5
 80011b4:	2001      	movs	r0, #1
 80011b6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	db0a      	blt.n	80011fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	490c      	ldr	r1, [pc, #48]	; (800121c <__NVIC_SetPriority+0x4c>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	0112      	lsls	r2, r2, #4
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	440b      	add	r3, r1
 80011f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f8:	e00a      	b.n	8001210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4908      	ldr	r1, [pc, #32]	; (8001220 <__NVIC_SetPriority+0x50>)
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	3b04      	subs	r3, #4
 8001208:	0112      	lsls	r2, r2, #4
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	440b      	add	r3, r1
 800120e:	761a      	strb	r2, [r3, #24]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000e100 	.word	0xe000e100
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	; 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f1c3 0307 	rsb	r3, r3, #7
 800123e:	2b04      	cmp	r3, #4
 8001240:	bf28      	it	cs
 8001242:	2304      	movcs	r3, #4
 8001244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3304      	adds	r3, #4
 800124a:	2b06      	cmp	r3, #6
 800124c:	d902      	bls.n	8001254 <NVIC_EncodePriority+0x30>
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3b03      	subs	r3, #3
 8001252:	e000      	b.n	8001256 <NVIC_EncodePriority+0x32>
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	f04f 32ff 	mov.w	r2, #4294967295
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43da      	mvns	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	401a      	ands	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800126c:	f04f 31ff 	mov.w	r1, #4294967295
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	fa01 f303 	lsl.w	r3, r1, r3
 8001276:	43d9      	mvns	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	4313      	orrs	r3, r2
         );
}
 800127e:	4618      	mov	r0, r3
 8001280:	3724      	adds	r7, #36	; 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800129c:	d301      	bcc.n	80012a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800129e:	2301      	movs	r3, #1
 80012a0:	e00f      	b.n	80012c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <SysTick_Config+0x40>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012aa:	210f      	movs	r1, #15
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295
 80012b0:	f7ff ff8e 	bl	80011d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <SysTick_Config+0x40>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ba:	4b04      	ldr	r3, [pc, #16]	; (80012cc <SysTick_Config+0x40>)
 80012bc:	2207      	movs	r2, #7
 80012be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	e000e010 	.word	0xe000e010

080012d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff ff29 	bl	8001130 <__NVIC_SetPriorityGrouping>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b086      	sub	sp, #24
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
 80012f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012f8:	f7ff ff3e 	bl	8001178 <__NVIC_GetPriorityGrouping>
 80012fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	6978      	ldr	r0, [r7, #20]
 8001304:	f7ff ff8e 	bl	8001224 <NVIC_EncodePriority>
 8001308:	4602      	mov	r2, r0
 800130a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff5d 	bl	80011d0 <__NVIC_SetPriority>
}
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff31 	bl	8001194 <__NVIC_EnableIRQ>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ffa2 	bl	800128c <SysTick_Config>
 8001348:	4603      	mov	r3, r0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001354:	b480      	push	{r7}
 8001356:	b087      	sub	sp, #28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001362:	e14e      	b.n	8001602 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	2101      	movs	r1, #1
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	fa01 f303 	lsl.w	r3, r1, r3
 8001370:	4013      	ands	r3, r2
 8001372:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 8140 	beq.w	80015fc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d00b      	beq.n	800139c <HAL_GPIO_Init+0x48>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d007      	beq.n	800139c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001390:	2b11      	cmp	r3, #17
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b12      	cmp	r3, #18
 800139a:	d130      	bne.n	80013fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013d2:	2201      	movs	r2, #1
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	091b      	lsrs	r3, r3, #4
 80013e8:	f003 0201 	and.w	r2, r3, #1
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	2203      	movs	r2, #3
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0xea>
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b12      	cmp	r3, #18
 800143c:	d123      	bne.n	8001486 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	08da      	lsrs	r2, r3, #3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3208      	adds	r2, #8
 8001446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	220f      	movs	r2, #15
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	691a      	ldr	r2, [r3, #16]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	08da      	lsrs	r2, r3, #3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3208      	adds	r2, #8
 8001480:	6939      	ldr	r1, [r7, #16]
 8001482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	2203      	movs	r2, #3
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 0203 	and.w	r2, r3, #3
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 809a 	beq.w	80015fc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c8:	4b55      	ldr	r3, [pc, #340]	; (8001620 <HAL_GPIO_Init+0x2cc>)
 80014ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014cc:	4a54      	ldr	r2, [pc, #336]	; (8001620 <HAL_GPIO_Init+0x2cc>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6613      	str	r3, [r2, #96]	; 0x60
 80014d4:	4b52      	ldr	r3, [pc, #328]	; (8001620 <HAL_GPIO_Init+0x2cc>)
 80014d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014e0:	4a50      	ldr	r2, [pc, #320]	; (8001624 <HAL_GPIO_Init+0x2d0>)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	089b      	lsrs	r3, r3, #2
 80014e6:	3302      	adds	r3, #2
 80014e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	220f      	movs	r2, #15
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800150a:	d013      	beq.n	8001534 <HAL_GPIO_Init+0x1e0>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a46      	ldr	r2, [pc, #280]	; (8001628 <HAL_GPIO_Init+0x2d4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d00d      	beq.n	8001530 <HAL_GPIO_Init+0x1dc>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a45      	ldr	r2, [pc, #276]	; (800162c <HAL_GPIO_Init+0x2d8>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d007      	beq.n	800152c <HAL_GPIO_Init+0x1d8>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a44      	ldr	r2, [pc, #272]	; (8001630 <HAL_GPIO_Init+0x2dc>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d101      	bne.n	8001528 <HAL_GPIO_Init+0x1d4>
 8001524:	2303      	movs	r3, #3
 8001526:	e006      	b.n	8001536 <HAL_GPIO_Init+0x1e2>
 8001528:	2307      	movs	r3, #7
 800152a:	e004      	b.n	8001536 <HAL_GPIO_Init+0x1e2>
 800152c:	2302      	movs	r3, #2
 800152e:	e002      	b.n	8001536 <HAL_GPIO_Init+0x1e2>
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <HAL_GPIO_Init+0x1e2>
 8001534:	2300      	movs	r3, #0
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	f002 0203 	and.w	r2, r2, #3
 800153c:	0092      	lsls	r2, r2, #2
 800153e:	4093      	lsls	r3, r2
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001546:	4937      	ldr	r1, [pc, #220]	; (8001624 <HAL_GPIO_Init+0x2d0>)
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	089b      	lsrs	r3, r3, #2
 800154c:	3302      	adds	r3, #2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001554:	4b37      	ldr	r3, [pc, #220]	; (8001634 <HAL_GPIO_Init+0x2e0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	43db      	mvns	r3, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001578:	4a2e      	ldr	r2, [pc, #184]	; (8001634 <HAL_GPIO_Init+0x2e0>)
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800157e:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <HAL_GPIO_Init+0x2e0>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	43db      	mvns	r3, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4313      	orrs	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015a2:	4a24      	ldr	r2, [pc, #144]	; (8001634 <HAL_GPIO_Init+0x2e0>)
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015a8:	4b22      	ldr	r3, [pc, #136]	; (8001634 <HAL_GPIO_Init+0x2e0>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015cc:	4a19      	ldr	r2, [pc, #100]	; (8001634 <HAL_GPIO_Init+0x2e0>)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015d2:	4b18      	ldr	r3, [pc, #96]	; (8001634 <HAL_GPIO_Init+0x2e0>)
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	43db      	mvns	r3, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015f6:	4a0f      	ldr	r2, [pc, #60]	; (8001634 <HAL_GPIO_Init+0x2e0>)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	3301      	adds	r3, #1
 8001600:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	fa22 f303 	lsr.w	r3, r2, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	f47f aea9 	bne.w	8001364 <HAL_GPIO_Init+0x10>
  }
}
 8001612:	bf00      	nop
 8001614:	371c      	adds	r7, #28
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000
 8001624:	40010000 	.word	0x40010000
 8001628:	48000400 	.word	0x48000400
 800162c:	48000800 	.word	0x48000800
 8001630:	48000c00 	.word	0x48000c00
 8001634:	40010400 	.word	0x40010400

08001638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	807b      	strh	r3, [r7, #2]
 8001644:	4613      	mov	r3, r2
 8001646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001648:	787b      	ldrb	r3, [r7, #1]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800164e:	887a      	ldrh	r2, [r7, #2]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001654:	e002      	b.n	800165c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001656:	887a      	ldrh	r2, [r7, #2]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <HAL_PWREx_GetVoltageRange+0x18>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40007000 	.word	0x40007000

08001684 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001692:	d130      	bne.n	80016f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001694:	4b23      	ldr	r3, [pc, #140]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800169c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016a0:	d038      	beq.n	8001714 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016aa:	4a1e      	ldr	r2, [pc, #120]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016b2:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2232      	movs	r2, #50	; 0x32
 80016b8:	fb02 f303 	mul.w	r3, r2, r3
 80016bc:	4a1b      	ldr	r2, [pc, #108]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016be:	fba2 2303 	umull	r2, r3, r2, r3
 80016c2:	0c9b      	lsrs	r3, r3, #18
 80016c4:	3301      	adds	r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016c8:	e002      	b.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	3b01      	subs	r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016dc:	d102      	bne.n	80016e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1f2      	bne.n	80016ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f0:	d110      	bne.n	8001714 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e00f      	b.n	8001716 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001702:	d007      	beq.n	8001714 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800170c:	4a05      	ldr	r2, [pc, #20]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001712:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40007000 	.word	0x40007000
 8001728:	20000000 	.word	0x20000000
 800172c:	431bde83 	.word	0x431bde83

08001730 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	; 0x28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d102      	bne.n	8001744 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	f000 bc56 	b.w	8001ff0 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001744:	4ba1      	ldr	r3, [pc, #644]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800174e:	4b9f      	ldr	r3, [pc, #636]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0310 	and.w	r3, r3, #16
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 80e6 	beq.w	8001932 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d007      	beq.n	800177c <HAL_RCC_OscConfig+0x4c>
 800176c:	6a3b      	ldr	r3, [r7, #32]
 800176e:	2b0c      	cmp	r3, #12
 8001770:	f040 808d 	bne.w	800188e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	2b01      	cmp	r3, #1
 8001778:	f040 8089 	bne.w	800188e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800177c:	4b93      	ldr	r3, [pc, #588]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d006      	beq.n	8001796 <HAL_RCC_OscConfig+0x66>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d102      	bne.n	8001796 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	f000 bc2d 	b.w	8001ff0 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800179a:	4b8c      	ldr	r3, [pc, #560]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d004      	beq.n	80017b0 <HAL_RCC_OscConfig+0x80>
 80017a6:	4b89      	ldr	r3, [pc, #548]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017ae:	e005      	b.n	80017bc <HAL_RCC_OscConfig+0x8c>
 80017b0:	4b86      	ldr	r3, [pc, #536]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 80017b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b6:	091b      	lsrs	r3, r3, #4
 80017b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017bc:	4293      	cmp	r3, r2
 80017be:	d224      	bcs.n	800180a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 fdbd 	bl	8002344 <RCC_SetFlashLatencyFromMSIRange>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d002      	beq.n	80017d6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	f000 bc0d 	b.w	8001ff0 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017d6:	4b7d      	ldr	r3, [pc, #500]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a7c      	ldr	r2, [pc, #496]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 80017dc:	f043 0308 	orr.w	r3, r3, #8
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	4977      	ldr	r1, [pc, #476]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017f4:	4b75      	ldr	r3, [pc, #468]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	021b      	lsls	r3, r3, #8
 8001802:	4972      	ldr	r1, [pc, #456]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
 8001808:	e025      	b.n	8001856 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800180a:	4b70      	ldr	r3, [pc, #448]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a6f      	ldr	r2, [pc, #444]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 8001810:	f043 0308 	orr.w	r3, r3, #8
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	4b6d      	ldr	r3, [pc, #436]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	496a      	ldr	r1, [pc, #424]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 8001824:	4313      	orrs	r3, r2
 8001826:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001828:	4b68      	ldr	r3, [pc, #416]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	021b      	lsls	r3, r3, #8
 8001836:	4965      	ldr	r1, [pc, #404]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	4618      	mov	r0, r3
 8001848:	f000 fd7c 	bl	8002344 <RCC_SetFlashLatencyFromMSIRange>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e3cc      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001856:	f000 fcb3 	bl	80021c0 <HAL_RCC_GetSysClockFreq>
 800185a:	4601      	mov	r1, r0
 800185c:	4b5b      	ldr	r3, [pc, #364]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	4a5a      	ldr	r2, [pc, #360]	; (80019d0 <HAL_RCC_OscConfig+0x2a0>)
 8001868:	5cd3      	ldrb	r3, [r2, r3]
 800186a:	f003 031f 	and.w	r3, r3, #31
 800186e:	fa21 f303 	lsr.w	r3, r1, r3
 8001872:	4a58      	ldr	r2, [pc, #352]	; (80019d4 <HAL_RCC_OscConfig+0x2a4>)
 8001874:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001876:	4b58      	ldr	r3, [pc, #352]	; (80019d8 <HAL_RCC_OscConfig+0x2a8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fbfc 	bl	8001078 <HAL_InitTick>
 8001880:	4603      	mov	r3, r0
 8001882:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001884:	7dfb      	ldrb	r3, [r7, #23]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d052      	beq.n	8001930 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800188a:	7dfb      	ldrb	r3, [r7, #23]
 800188c:	e3b0      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d032      	beq.n	80018fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001896:	4b4d      	ldr	r3, [pc, #308]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a4c      	ldr	r2, [pc, #304]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018a2:	f7ff fc39 	bl	8001118 <HAL_GetTick>
 80018a6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018aa:	f7ff fc35 	bl	8001118 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e399      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018bc:	4b43      	ldr	r3, [pc, #268]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c8:	4b40      	ldr	r3, [pc, #256]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a3f      	ldr	r2, [pc, #252]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 80018ce:	f043 0308 	orr.w	r3, r3, #8
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b3d      	ldr	r3, [pc, #244]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	493a      	ldr	r1, [pc, #232]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018e6:	4b39      	ldr	r3, [pc, #228]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	4935      	ldr	r1, [pc, #212]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
 80018fa:	e01a      	b.n	8001932 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018fc:	4b33      	ldr	r3, [pc, #204]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a32      	ldr	r2, [pc, #200]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001908:	f7ff fc06 	bl	8001118 <HAL_GetTick>
 800190c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001910:	f7ff fc02 	bl	8001118 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e366      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001922:	4b2a      	ldr	r3, [pc, #168]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x1e0>
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001930:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d073      	beq.n	8001a26 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	2b08      	cmp	r3, #8
 8001942:	d005      	beq.n	8001950 <HAL_RCC_OscConfig+0x220>
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	2b0c      	cmp	r3, #12
 8001948:	d10e      	bne.n	8001968 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d10b      	bne.n	8001968 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001950:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d063      	beq.n	8001a24 <HAL_RCC_OscConfig+0x2f4>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d15f      	bne.n	8001a24 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e343      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001970:	d106      	bne.n	8001980 <HAL_RCC_OscConfig+0x250>
 8001972:	4b16      	ldr	r3, [pc, #88]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a15      	ldr	r2, [pc, #84]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 8001978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	e01d      	b.n	80019bc <HAL_RCC_OscConfig+0x28c>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001988:	d10c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x274>
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a0f      	ldr	r2, [pc, #60]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 8001990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a0c      	ldr	r2, [pc, #48]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 800199c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	e00b      	b.n	80019bc <HAL_RCC_OscConfig+0x28c>
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a08      	ldr	r2, [pc, #32]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 80019aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a05      	ldr	r2, [pc, #20]	; (80019cc <HAL_RCC_OscConfig+0x29c>)
 80019b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d01b      	beq.n	80019fc <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff fba8 	bl	8001118 <HAL_GetTick>
 80019c8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ca:	e010      	b.n	80019ee <HAL_RCC_OscConfig+0x2be>
 80019cc:	40021000 	.word	0x40021000
 80019d0:	08005220 	.word	0x08005220
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019dc:	f7ff fb9c 	bl	8001118 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b64      	cmp	r3, #100	; 0x64
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e300      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ee:	4ba0      	ldr	r3, [pc, #640]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x2ac>
 80019fa:	e014      	b.n	8001a26 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7ff fb8c 	bl	8001118 <HAL_GetTick>
 8001a00:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a04:	f7ff fb88 	bl	8001118 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b64      	cmp	r3, #100	; 0x64
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e2ec      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a16:	4b96      	ldr	r3, [pc, #600]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x2d4>
 8001a22:	e000      	b.n	8001a26 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d060      	beq.n	8001af4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d005      	beq.n	8001a44 <HAL_RCC_OscConfig+0x314>
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	2b0c      	cmp	r3, #12
 8001a3c:	d119      	bne.n	8001a72 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d116      	bne.n	8001a72 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a44:	4b8a      	ldr	r3, [pc, #552]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_OscConfig+0x32c>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e2c9      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5c:	4b84      	ldr	r3, [pc, #528]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	061b      	lsls	r3, r3, #24
 8001a6a:	4981      	ldr	r1, [pc, #516]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a70:	e040      	b.n	8001af4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d023      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a7a:	4b7d      	ldr	r3, [pc, #500]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a7c      	ldr	r2, [pc, #496]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a86:	f7ff fb47 	bl	8001118 <HAL_GetTick>
 8001a8a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8e:	f7ff fb43 	bl	8001118 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e2a7      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa0:	4b73      	ldr	r3, [pc, #460]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aac:	4b70      	ldr	r3, [pc, #448]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	061b      	lsls	r3, r3, #24
 8001aba:	496d      	ldr	r1, [pc, #436]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	604b      	str	r3, [r1, #4]
 8001ac0:	e018      	b.n	8001af4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ac2:	4b6b      	ldr	r3, [pc, #428]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a6a      	ldr	r2, [pc, #424]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ace:	f7ff fb23 	bl	8001118 <HAL_GetTick>
 8001ad2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad6:	f7ff fb1f 	bl	8001118 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e283      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ae8:	4b61      	ldr	r3, [pc, #388]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f0      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d07f      	beq.n	8001c00 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d05f      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001b08:	4b59      	ldr	r3, [pc, #356]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b0e:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	699a      	ldr	r2, [r3, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d037      	beq.n	8001b8e <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d006      	beq.n	8001b36 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e25c      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d01b      	beq.n	8001b78 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8001b40:	4b4b      	ldr	r3, [pc, #300]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b46:	4a4a      	ldr	r2, [pc, #296]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001b48:	f023 0301 	bic.w	r3, r3, #1
 8001b4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b50:	f7ff fae2 	bl	8001118 <HAL_GetTick>
 8001b54:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b58:	f7ff fade 	bl	8001118 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b11      	cmp	r3, #17
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e242      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b6a:	4b41      	ldr	r3, [pc, #260]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1ef      	bne.n	8001b58 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001b78:	4b3d      	ldr	r3, [pc, #244]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b7e:	f023 0210 	bic.w	r2, r3, #16
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	493a      	ldr	r1, [pc, #232]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b8e:	4b38      	ldr	r3, [pc, #224]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b94:	4a36      	ldr	r2, [pc, #216]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9e:	f7ff fabb 	bl	8001118 <HAL_GetTick>
 8001ba2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba6:	f7ff fab7 	bl	8001118 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b11      	cmp	r3, #17
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e21b      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0ef      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x476>
 8001bc6:	e01b      	b.n	8001c00 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc8:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bce:	4a28      	ldr	r2, [pc, #160]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd8:	f7ff fa9e 	bl	8001118 <HAL_GetTick>
 8001bdc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be0:	f7ff fa9a 	bl	8001118 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b11      	cmp	r3, #17
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e1fe      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bf2:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1ef      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80c1 	beq.w	8001d90 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c14:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10e      	bne.n	8001c3e <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c24:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c2c:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <HAL_RCC_OscConfig+0x540>)
 8001c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <HAL_RCC_OscConfig+0x544>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d11c      	bne.n	8001c84 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_RCC_OscConfig+0x544>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a09      	ldr	r2, [pc, #36]	; (8001c74 <HAL_RCC_OscConfig+0x544>)
 8001c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c56:	f7ff fa5f 	bl	8001118 <HAL_GetTick>
 8001c5a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c5c:	e00c      	b.n	8001c78 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5e:	f7ff fa5b 	bl	8001118 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d905      	bls.n	8001c78 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e1bf      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c78:	4bb1      	ldr	r3, [pc, #708]	; (8001f40 <HAL_RCC_OscConfig+0x810>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0ec      	beq.n	8001c5e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d02c      	beq.n	8001cea <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001c90:	4bac      	ldr	r3, [pc, #688]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca2:	49a8      	ldr	r1, [pc, #672]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d010      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001cb6:	4ba3      	ldr	r3, [pc, #652]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cbc:	4aa1      	ldr	r2, [pc, #644]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001cbe:	f043 0304 	orr.w	r3, r3, #4
 8001cc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cc6:	4b9f      	ldr	r3, [pc, #636]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ccc:	4a9d      	ldr	r2, [pc, #628]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cd6:	e018      	b.n	8001d0a <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cd8:	4b9a      	ldr	r3, [pc, #616]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cde:	4a99      	ldr	r2, [pc, #612]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ce8:	e00f      	b.n	8001d0a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cea:	4b96      	ldr	r3, [pc, #600]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	4a94      	ldr	r2, [pc, #592]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001cf2:	f023 0301 	bic.w	r3, r3, #1
 8001cf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001cfa:	4b92      	ldr	r3, [pc, #584]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d00:	4a90      	ldr	r2, [pc, #576]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001d02:	f023 0304 	bic.w	r3, r3, #4
 8001d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d016      	beq.n	8001d40 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d12:	f7ff fa01 	bl	8001118 <HAL_GetTick>
 8001d16:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d18:	e00a      	b.n	8001d30 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1a:	f7ff f9fd 	bl	8001118 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e15f      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d30:	4b84      	ldr	r3, [pc, #528]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0ed      	beq.n	8001d1a <HAL_RCC_OscConfig+0x5ea>
 8001d3e:	e01d      	b.n	8001d7c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d40:	f7ff f9ea 	bl	8001118 <HAL_GetTick>
 8001d44:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d46:	e00a      	b.n	8001d5e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d48:	f7ff f9e6 	bl	8001118 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e148      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d5e:	4b79      	ldr	r3, [pc, #484]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1ed      	bne.n	8001d48 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001d6c:	4b75      	ldr	r3, [pc, #468]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d72:	4a74      	ldr	r2, [pc, #464]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d105      	bne.n	8001d90 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d84:	4b6f      	ldr	r3, [pc, #444]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d88:	4a6e      	ldr	r2, [pc, #440]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0320 	and.w	r3, r3, #32
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d03c      	beq.n	8001e16 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d01c      	beq.n	8001dde <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001da4:	4b67      	ldr	r3, [pc, #412]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001da6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001daa:	4a66      	ldr	r2, [pc, #408]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db4:	f7ff f9b0 	bl	8001118 <HAL_GetTick>
 8001db8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dbc:	f7ff f9ac 	bl	8001118 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e110      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dce:	4b5d      	ldr	r3, [pc, #372]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001dd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0ef      	beq.n	8001dbc <HAL_RCC_OscConfig+0x68c>
 8001ddc:	e01b      	b.n	8001e16 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dde:	4b59      	ldr	r3, [pc, #356]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001de0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001de4:	4a57      	ldr	r2, [pc, #348]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001de6:	f023 0301 	bic.w	r3, r3, #1
 8001dea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dee:	f7ff f993 	bl	8001118 <HAL_GetTick>
 8001df2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001df6:	f7ff f98f 	bl	8001118 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e0f3      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e08:	4b4e      	ldr	r3, [pc, #312]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001e0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1ef      	bne.n	8001df6 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 80e7 	beq.w	8001fee <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	f040 80b7 	bne.w	8001f98 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e2a:	4b46      	ldr	r3, [pc, #280]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0203 	and.w	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d124      	bne.n	8001e88 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d11b      	bne.n	8001e88 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d113      	bne.n	8001e88 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6a:	085b      	lsrs	r3, r3, #1
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d109      	bne.n	8001e88 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	085b      	lsrs	r3, r3, #1
 8001e80:	3b01      	subs	r3, #1
 8001e82:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d061      	beq.n	8001f4c <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	2b0c      	cmp	r3, #12
 8001e8c:	d056      	beq.n	8001f3c <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e8e:	4b2d      	ldr	r3, [pc, #180]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a2c      	ldr	r2, [pc, #176]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001e94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e98:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e9a:	f7ff f93d 	bl	8001118 <HAL_GetTick>
 8001e9e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea2:	f7ff f939 	bl	8001118 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e09d      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb4:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f0      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec0:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <HAL_RCC_OscConfig+0x818>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ed0:	3a01      	subs	r2, #1
 8001ed2:	0112      	lsls	r2, r2, #4
 8001ed4:	4311      	orrs	r1, r2
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001eda:	0212      	lsls	r2, r2, #8
 8001edc:	4311      	orrs	r1, r2
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ee2:	0852      	lsrs	r2, r2, #1
 8001ee4:	3a01      	subs	r2, #1
 8001ee6:	0552      	lsls	r2, r2, #21
 8001ee8:	4311      	orrs	r1, r2
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001eee:	0852      	lsrs	r2, r2, #1
 8001ef0:	3a01      	subs	r2, #1
 8001ef2:	0652      	lsls	r2, r2, #25
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	4913      	ldr	r1, [pc, #76]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a10      	ldr	r2, [pc, #64]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f08:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4a0d      	ldr	r2, [pc, #52]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f14:	f7ff f900 	bl	8001118 <HAL_GetTick>
 8001f18:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7ff f8fc 	bl	8001118 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e060      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_RCC_OscConfig+0x814>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f3a:	e058      	b.n	8001fee <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e057      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
 8001f40:	40007000 	.word	0x40007000
 8001f44:	40021000 	.word	0x40021000
 8001f48:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <HAL_RCC_OscConfig+0x8c8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d14a      	bne.n	8001fee <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f58:	4b27      	ldr	r3, [pc, #156]	; (8001ff8 <HAL_RCC_OscConfig+0x8c8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a26      	ldr	r2, [pc, #152]	; (8001ff8 <HAL_RCC_OscConfig+0x8c8>)
 8001f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <HAL_RCC_OscConfig+0x8c8>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	4a23      	ldr	r2, [pc, #140]	; (8001ff8 <HAL_RCC_OscConfig+0x8c8>)
 8001f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f70:	f7ff f8d2 	bl	8001118 <HAL_GetTick>
 8001f74:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f78:	f7ff f8ce 	bl	8001118 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e032      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <HAL_RCC_OscConfig+0x8c8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0x848>
 8001f96:	e02a      	b.n	8001fee <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	2b0c      	cmp	r3, #12
 8001f9c:	d025      	beq.n	8001fea <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9e:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <HAL_RCC_OscConfig+0x8c8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a15      	ldr	r2, [pc, #84]	; (8001ff8 <HAL_RCC_OscConfig+0x8c8>)
 8001fa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fa8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001faa:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <HAL_RCC_OscConfig+0x8c8>)
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <HAL_RCC_OscConfig+0x8c8>)
 8001fb0:	f023 0303 	bic.w	r3, r3, #3
 8001fb4:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <HAL_RCC_OscConfig+0x8c8>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	4a0f      	ldr	r2, [pc, #60]	; (8001ff8 <HAL_RCC_OscConfig+0x8c8>)
 8001fbc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001fc0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc2:	f7ff f8a9 	bl	8001118 <HAL_GetTick>
 8001fc6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fca:	f7ff f8a5 	bl	8001118 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e009      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_RCC_OscConfig+0x8c8>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f0      	bne.n	8001fca <HAL_RCC_OscConfig+0x89a>
 8001fe8:	e001      	b.n	8001fee <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3728      	adds	r7, #40	; 0x28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40021000 	.word	0x40021000

08001ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0c8      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002010:	4b66      	ldr	r3, [pc, #408]	; (80021ac <HAL_RCC_ClockConfig+0x1b0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	429a      	cmp	r2, r3
 800201c:	d910      	bls.n	8002040 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201e:	4b63      	ldr	r3, [pc, #396]	; (80021ac <HAL_RCC_ClockConfig+0x1b0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f023 0207 	bic.w	r2, r3, #7
 8002026:	4961      	ldr	r1, [pc, #388]	; (80021ac <HAL_RCC_ClockConfig+0x1b0>)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	4313      	orrs	r3, r2
 800202c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202e:	4b5f      	ldr	r3, [pc, #380]	; (80021ac <HAL_RCC_ClockConfig+0x1b0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d001      	beq.n	8002040 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e0b0      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d04c      	beq.n	80020e6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b03      	cmp	r3, #3
 8002052:	d107      	bne.n	8002064 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002054:	4b56      	ldr	r3, [pc, #344]	; (80021b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d121      	bne.n	80020a4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e09e      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b02      	cmp	r3, #2
 800206a:	d107      	bne.n	800207c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800206c:	4b50      	ldr	r3, [pc, #320]	; (80021b0 <HAL_RCC_ClockConfig+0x1b4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d115      	bne.n	80020a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e092      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d107      	bne.n	8002094 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002084:	4b4a      	ldr	r3, [pc, #296]	; (80021b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d109      	bne.n	80020a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e086      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002094:	4b46      	ldr	r3, [pc, #280]	; (80021b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e07e      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020a4:	4b42      	ldr	r3, [pc, #264]	; (80021b0 <HAL_RCC_ClockConfig+0x1b4>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f023 0203 	bic.w	r2, r3, #3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	493f      	ldr	r1, [pc, #252]	; (80021b0 <HAL_RCC_ClockConfig+0x1b4>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020b6:	f7ff f82f 	bl	8001118 <HAL_GetTick>
 80020ba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020bc:	e00a      	b.n	80020d4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020be:	f7ff f82b 	bl	8001118 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e066      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d4:	4b36      	ldr	r3, [pc, #216]	; (80021b0 <HAL_RCC_ClockConfig+0x1b4>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 020c 	and.w	r2, r3, #12
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d1eb      	bne.n	80020be <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d008      	beq.n	8002104 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f2:	4b2f      	ldr	r3, [pc, #188]	; (80021b0 <HAL_RCC_ClockConfig+0x1b4>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	492c      	ldr	r1, [pc, #176]	; (80021b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002100:	4313      	orrs	r3, r2
 8002102:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002104:	4b29      	ldr	r3, [pc, #164]	; (80021ac <HAL_RCC_ClockConfig+0x1b0>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d210      	bcs.n	8002134 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002112:	4b26      	ldr	r3, [pc, #152]	; (80021ac <HAL_RCC_ClockConfig+0x1b0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 0207 	bic.w	r2, r3, #7
 800211a:	4924      	ldr	r1, [pc, #144]	; (80021ac <HAL_RCC_ClockConfig+0x1b0>)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002122:	4b22      	ldr	r3, [pc, #136]	; (80021ac <HAL_RCC_ClockConfig+0x1b0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e036      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002140:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	4918      	ldr	r1, [pc, #96]	; (80021b0 <HAL_RCC_ClockConfig+0x1b4>)
 800214e:	4313      	orrs	r3, r2
 8002150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d009      	beq.n	8002172 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800215e:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4910      	ldr	r1, [pc, #64]	; (80021b0 <HAL_RCC_ClockConfig+0x1b4>)
 800216e:	4313      	orrs	r3, r2
 8002170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002172:	f000 f825 	bl	80021c0 <HAL_RCC_GetSysClockFreq>
 8002176:	4601      	mov	r1, r0
 8002178:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <HAL_RCC_ClockConfig+0x1b4>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	4a0c      	ldr	r2, [pc, #48]	; (80021b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002184:	5cd3      	ldrb	r3, [r2, r3]
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	fa21 f303 	lsr.w	r3, r1, r3
 800218e:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_RCC_ClockConfig+0x1c0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe ff6e 	bl	8001078 <HAL_InitTick>
 800219c:	4603      	mov	r3, r0
 800219e:	72fb      	strb	r3, [r7, #11]

  return status;
 80021a0:	7afb      	ldrb	r3, [r7, #11]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40022000 	.word	0x40022000
 80021b0:	40021000 	.word	0x40021000
 80021b4:	08005220 	.word	0x08005220
 80021b8:	20000000 	.word	0x20000000
 80021bc:	20000004 	.word	0x20000004

080021c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b089      	sub	sp, #36	; 0x24
 80021c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ce:	4b3d      	ldr	r3, [pc, #244]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x104>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021d8:	4b3a      	ldr	r3, [pc, #232]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x104>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0x34>
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	2b0c      	cmp	r3, #12
 80021ec:	d121      	bne.n	8002232 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d11e      	bne.n	8002232 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021f4:	4b33      	ldr	r3, [pc, #204]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x104>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d107      	bne.n	8002210 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002200:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002206:	0a1b      	lsrs	r3, r3, #8
 8002208:	f003 030f 	and.w	r3, r3, #15
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	e005      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002210:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800221c:	4a2a      	ldr	r2, [pc, #168]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002224:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10d      	bne.n	8002248 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002230:	e00a      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	2b04      	cmp	r3, #4
 8002236:	d102      	bne.n	800223e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002238:	4b24      	ldr	r3, [pc, #144]	; (80022cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800223a:	61bb      	str	r3, [r7, #24]
 800223c:	e004      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	2b08      	cmp	r3, #8
 8002242:	d101      	bne.n	8002248 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002244:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002246:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	2b0c      	cmp	r3, #12
 800224c:	d133      	bne.n	80022b6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800224e:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d002      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0xa4>
 800225e:	2b03      	cmp	r3, #3
 8002260:	d003      	beq.n	800226a <HAL_RCC_GetSysClockFreq+0xaa>
 8002262:	e005      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002266:	617b      	str	r3, [r7, #20]
      break;
 8002268:	e005      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800226c:	617b      	str	r3, [r7, #20]
      break;
 800226e:	e002      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	617b      	str	r3, [r7, #20]
      break;
 8002274:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	091b      	lsrs	r3, r3, #4
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	3301      	adds	r3, #1
 8002282:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002284:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	fb02 f203 	mul.w	r2, r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	fbb2 f3f3 	udiv	r3, r2, r3
 800229a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800229c:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x104>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	0e5b      	lsrs	r3, r3, #25
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	3301      	adds	r3, #1
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022b6:	69bb      	ldr	r3, [r7, #24]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3724      	adds	r7, #36	; 0x24
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	40021000 	.word	0x40021000
 80022c8:	08005238 	.word	0x08005238
 80022cc:	00f42400 	.word	0x00f42400
 80022d0:	007a1200 	.word	0x007a1200

080022d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000000 	.word	0x20000000

080022ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022f0:	f7ff fff0 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 80022f4:	4601      	mov	r1, r0
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	4a04      	ldr	r2, [pc, #16]	; (8002314 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002302:	5cd3      	ldrb	r3, [r2, r3]
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	fa21 f303 	lsr.w	r3, r1, r3
}
 800230c:	4618      	mov	r0, r3
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40021000 	.word	0x40021000
 8002314:	08005230 	.word	0x08005230

08002318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800231c:	f7ff ffda 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 8002320:	4601      	mov	r1, r0
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	0adb      	lsrs	r3, r3, #11
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	4a04      	ldr	r2, [pc, #16]	; (8002340 <HAL_RCC_GetPCLK2Freq+0x28>)
 800232e:	5cd3      	ldrb	r3, [r2, r3]
 8002330:	f003 031f 	and.w	r3, r3, #31
 8002334:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002338:	4618      	mov	r0, r3
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000
 8002340:	08005230 	.word	0x08005230

08002344 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800234c:	2300      	movs	r3, #0
 800234e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002350:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800235c:	f7ff f984 	bl	8001668 <HAL_PWREx_GetVoltageRange>
 8002360:	6178      	str	r0, [r7, #20]
 8002362:	e014      	b.n	800238e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002364:	4b25      	ldr	r3, [pc, #148]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	4a24      	ldr	r2, [pc, #144]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800236a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236e:	6593      	str	r3, [r2, #88]	; 0x58
 8002370:	4b22      	ldr	r3, [pc, #136]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800237c:	f7ff f974 	bl	8001668 <HAL_PWREx_GetVoltageRange>
 8002380:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002382:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002386:	4a1d      	ldr	r2, [pc, #116]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800238c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002394:	d10b      	bne.n	80023ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b80      	cmp	r3, #128	; 0x80
 800239a:	d919      	bls.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2ba0      	cmp	r3, #160	; 0xa0
 80023a0:	d902      	bls.n	80023a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023a2:	2302      	movs	r3, #2
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	e013      	b.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023a8:	2301      	movs	r3, #1
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	e010      	b.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b80      	cmp	r3, #128	; 0x80
 80023b2:	d902      	bls.n	80023ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023b4:	2303      	movs	r3, #3
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	e00a      	b.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b80      	cmp	r3, #128	; 0x80
 80023be:	d102      	bne.n	80023c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023c0:	2302      	movs	r3, #2
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	e004      	b.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b70      	cmp	r3, #112	; 0x70
 80023ca:	d101      	bne.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023cc:	2301      	movs	r3, #1
 80023ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f023 0207 	bic.w	r2, r3, #7
 80023d8:	4909      	ldr	r1, [pc, #36]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023e0:	4b07      	ldr	r3, [pc, #28]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d001      	beq.n	80023f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	40022000 	.word	0x40022000

08002404 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800240c:	2300      	movs	r3, #0
 800240e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002410:	2300      	movs	r3, #0
 8002412:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 809e 	beq.w	800255e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002422:	2300      	movs	r3, #0
 8002424:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002426:	4b46      	ldr	r3, [pc, #280]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002436:	2300      	movs	r3, #0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00d      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800243c:	4b40      	ldr	r3, [pc, #256]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	4a3f      	ldr	r2, [pc, #252]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002446:	6593      	str	r3, [r2, #88]	; 0x58
 8002448:	4b3d      	ldr	r3, [pc, #244]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800244a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002454:	2301      	movs	r3, #1
 8002456:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002458:	4b3a      	ldr	r3, [pc, #232]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a39      	ldr	r2, [pc, #228]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800245e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002462:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002464:	f7fe fe58 	bl	8001118 <HAL_GetTick>
 8002468:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800246a:	e009      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246c:	f7fe fe54 	bl	8001118 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d902      	bls.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	74fb      	strb	r3, [r7, #19]
        break;
 800247e:	e005      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002480:	4b30      	ldr	r3, [pc, #192]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0ef      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800248c:	7cfb      	ldrb	r3, [r7, #19]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d15a      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002492:	4b2b      	ldr	r3, [pc, #172]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d01e      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d019      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024ae:	4b24      	ldr	r3, [pc, #144]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80024b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024ba:	4b21      	ldr	r3, [pc, #132]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80024bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c0:	4a1f      	ldr	r2, [pc, #124]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80024c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024ca:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80024cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d0:	4a1b      	ldr	r2, [pc, #108]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80024d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024da:	4a19      	ldr	r2, [pc, #100]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d016      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ec:	f7fe fe14 	bl	8001118 <HAL_GetTick>
 80024f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024f2:	e00b      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f4:	f7fe fe10 	bl	8001118 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002502:	4293      	cmp	r3, r2
 8002504:	d902      	bls.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	74fb      	strb	r3, [r7, #19]
            break;
 800250a:	e006      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0ec      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800251a:	7cfb      	ldrb	r3, [r7, #19]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10b      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002520:	4b07      	ldr	r3, [pc, #28]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002526:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	4904      	ldr	r1, [pc, #16]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002530:	4313      	orrs	r3, r2
 8002532:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002536:	e009      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002538:	7cfb      	ldrb	r3, [r7, #19]
 800253a:	74bb      	strb	r3, [r7, #18]
 800253c:	e006      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800253e:	bf00      	nop
 8002540:	40021000 	.word	0x40021000
 8002544:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002548:	7cfb      	ldrb	r3, [r7, #19]
 800254a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800254c:	7c7b      	ldrb	r3, [r7, #17]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d105      	bne.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002552:	4b6e      	ldr	r3, [pc, #440]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002556:	4a6d      	ldr	r2, [pc, #436]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800255c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00a      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800256a:	4b68      	ldr	r3, [pc, #416]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800256c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002570:	f023 0203 	bic.w	r2, r3, #3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	4964      	ldr	r1, [pc, #400]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00a      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800258c:	4b5f      	ldr	r3, [pc, #380]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	f023 020c 	bic.w	r2, r3, #12
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	495c      	ldr	r1, [pc, #368]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00a      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025ae:	4b57      	ldr	r3, [pc, #348]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4953      	ldr	r1, [pc, #332]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00a      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025d0:	4b4e      	ldr	r3, [pc, #312]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	494b      	ldr	r1, [pc, #300]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00a      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025f2:	4b46      	ldr	r3, [pc, #280]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	4942      	ldr	r1, [pc, #264]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002614:	4b3d      	ldr	r3, [pc, #244]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	493a      	ldr	r1, [pc, #232]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002636:	4b35      	ldr	r3, [pc, #212]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	4931      	ldr	r1, [pc, #196]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002658:	4b2c      	ldr	r3, [pc, #176]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	4929      	ldr	r1, [pc, #164]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800267a:	4b24      	ldr	r3, [pc, #144]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800267c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002680:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	4920      	ldr	r1, [pc, #128]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d015      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800269c:	4b1b      	ldr	r3, [pc, #108]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	4918      	ldr	r1, [pc, #96]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026ba:	d105      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026bc:	4b13      	ldr	r3, [pc, #76]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4a12      	ldr	r2, [pc, #72]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d015      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026d4:	4b0d      	ldr	r3, [pc, #52]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e2:	490a      	ldr	r1, [pc, #40]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026f2:	d105      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	4a04      	ldr	r2, [pc, #16]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002700:	7cbb      	ldrb	r3, [r7, #18]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000

08002710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e049      	b.n	80027b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fae2 	bl	8000d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3304      	adds	r3, #4
 800274c:	4619      	mov	r1, r3
 800274e:	4610      	mov	r0, r2
 8002750:	f000 fe8e 	bl	8003470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e049      	b.n	8002864 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d106      	bne.n	80027ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7fe fb27 	bl	8000e38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2202      	movs	r2, #2
 80027ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3304      	adds	r3, #4
 80027fa:	4619      	mov	r1, r3
 80027fc:	4610      	mov	r0, r2
 80027fe:	f000 fe37 	bl	8003470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d109      	bne.n	8002890 <HAL_TIM_PWM_Start+0x24>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b01      	cmp	r3, #1
 8002886:	bf14      	ite	ne
 8002888:	2301      	movne	r3, #1
 800288a:	2300      	moveq	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	e03c      	b.n	800290a <HAL_TIM_PWM_Start+0x9e>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	2b04      	cmp	r3, #4
 8002894:	d109      	bne.n	80028aa <HAL_TIM_PWM_Start+0x3e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b01      	cmp	r3, #1
 80028a0:	bf14      	ite	ne
 80028a2:	2301      	movne	r3, #1
 80028a4:	2300      	moveq	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	e02f      	b.n	800290a <HAL_TIM_PWM_Start+0x9e>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d109      	bne.n	80028c4 <HAL_TIM_PWM_Start+0x58>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	bf14      	ite	ne
 80028bc:	2301      	movne	r3, #1
 80028be:	2300      	moveq	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	e022      	b.n	800290a <HAL_TIM_PWM_Start+0x9e>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	2b0c      	cmp	r3, #12
 80028c8:	d109      	bne.n	80028de <HAL_TIM_PWM_Start+0x72>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	bf14      	ite	ne
 80028d6:	2301      	movne	r3, #1
 80028d8:	2300      	moveq	r3, #0
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	e015      	b.n	800290a <HAL_TIM_PWM_Start+0x9e>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b10      	cmp	r3, #16
 80028e2:	d109      	bne.n	80028f8 <HAL_TIM_PWM_Start+0x8c>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	bf14      	ite	ne
 80028f0:	2301      	movne	r3, #1
 80028f2:	2300      	moveq	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	e008      	b.n	800290a <HAL_TIM_PWM_Start+0x9e>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b01      	cmp	r3, #1
 8002902:	bf14      	ite	ne
 8002904:	2301      	movne	r3, #1
 8002906:	2300      	moveq	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e07e      	b.n	8002a10 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d104      	bne.n	8002922 <HAL_TIM_PWM_Start+0xb6>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002920:	e023      	b.n	800296a <HAL_TIM_PWM_Start+0xfe>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b04      	cmp	r3, #4
 8002926:	d104      	bne.n	8002932 <HAL_TIM_PWM_Start+0xc6>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002930:	e01b      	b.n	800296a <HAL_TIM_PWM_Start+0xfe>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b08      	cmp	r3, #8
 8002936:	d104      	bne.n	8002942 <HAL_TIM_PWM_Start+0xd6>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002940:	e013      	b.n	800296a <HAL_TIM_PWM_Start+0xfe>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b0c      	cmp	r3, #12
 8002946:	d104      	bne.n	8002952 <HAL_TIM_PWM_Start+0xe6>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002950:	e00b      	b.n	800296a <HAL_TIM_PWM_Start+0xfe>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b10      	cmp	r3, #16
 8002956:	d104      	bne.n	8002962 <HAL_TIM_PWM_Start+0xf6>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002960:	e003      	b.n	800296a <HAL_TIM_PWM_Start+0xfe>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2202      	movs	r2, #2
 8002966:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2201      	movs	r2, #1
 8002970:	6839      	ldr	r1, [r7, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f001 fa04 	bl	8003d80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a26      	ldr	r2, [pc, #152]	; (8002a18 <HAL_TIM_PWM_Start+0x1ac>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d009      	beq.n	8002996 <HAL_TIM_PWM_Start+0x12a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a25      	ldr	r2, [pc, #148]	; (8002a1c <HAL_TIM_PWM_Start+0x1b0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d004      	beq.n	8002996 <HAL_TIM_PWM_Start+0x12a>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a23      	ldr	r2, [pc, #140]	; (8002a20 <HAL_TIM_PWM_Start+0x1b4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d101      	bne.n	800299a <HAL_TIM_PWM_Start+0x12e>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <HAL_TIM_PWM_Start+0x130>
 800299a:	2300      	movs	r3, #0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d007      	beq.n	80029b0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a18      	ldr	r2, [pc, #96]	; (8002a18 <HAL_TIM_PWM_Start+0x1ac>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d009      	beq.n	80029ce <HAL_TIM_PWM_Start+0x162>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c2:	d004      	beq.n	80029ce <HAL_TIM_PWM_Start+0x162>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a14      	ldr	r2, [pc, #80]	; (8002a1c <HAL_TIM_PWM_Start+0x1b0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d115      	bne.n	80029fa <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <HAL_TIM_PWM_Start+0x1b8>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2b06      	cmp	r3, #6
 80029de:	d015      	beq.n	8002a0c <HAL_TIM_PWM_Start+0x1a0>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e6:	d011      	beq.n	8002a0c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f8:	e008      	b.n	8002a0c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0201 	orr.w	r2, r2, #1
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	e000      	b.n	8002a0e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40012c00 	.word	0x40012c00
 8002a1c:	40014000 	.word	0x40014000
 8002a20:	40014400 	.word	0x40014400
 8002a24:	00010007 	.word	0x00010007

08002a28 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e049      	b.n	8002ace <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d106      	bne.n	8002a54 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7fe f9b2 	bl	8000db8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3304      	adds	r3, #4
 8002a64:	4619      	mov	r1, r3
 8002a66:	4610      	mov	r0, r2
 8002a68:	f000 fd02 	bl	8003470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d104      	bne.n	8002af2 <HAL_TIM_IC_Start_IT+0x1a>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	e023      	b.n	8002b3a <HAL_TIM_IC_Start_IT+0x62>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d104      	bne.n	8002b02 <HAL_TIM_IC_Start_IT+0x2a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	e01b      	b.n	8002b3a <HAL_TIM_IC_Start_IT+0x62>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d104      	bne.n	8002b12 <HAL_TIM_IC_Start_IT+0x3a>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	e013      	b.n	8002b3a <HAL_TIM_IC_Start_IT+0x62>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b0c      	cmp	r3, #12
 8002b16:	d104      	bne.n	8002b22 <HAL_TIM_IC_Start_IT+0x4a>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	e00b      	b.n	8002b3a <HAL_TIM_IC_Start_IT+0x62>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b10      	cmp	r3, #16
 8002b26:	d104      	bne.n	8002b32 <HAL_TIM_IC_Start_IT+0x5a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	e003      	b.n	8002b3a <HAL_TIM_IC_Start_IT+0x62>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d104      	bne.n	8002b4c <HAL_TIM_IC_Start_IT+0x74>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	e013      	b.n	8002b74 <HAL_TIM_IC_Start_IT+0x9c>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d104      	bne.n	8002b5c <HAL_TIM_IC_Start_IT+0x84>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	e00b      	b.n	8002b74 <HAL_TIM_IC_Start_IT+0x9c>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d104      	bne.n	8002b6c <HAL_TIM_IC_Start_IT+0x94>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	e003      	b.n	8002b74 <HAL_TIM_IC_Start_IT+0x9c>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d102      	bne.n	8002b82 <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b7c:	7bbb      	ldrb	r3, [r7, #14]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d001      	beq.n	8002b86 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e0c4      	b.n	8002d10 <HAL_TIM_IC_Start_IT+0x238>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d104      	bne.n	8002b96 <HAL_TIM_IC_Start_IT+0xbe>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b94:	e023      	b.n	8002bde <HAL_TIM_IC_Start_IT+0x106>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d104      	bne.n	8002ba6 <HAL_TIM_IC_Start_IT+0xce>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ba4:	e01b      	b.n	8002bde <HAL_TIM_IC_Start_IT+0x106>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d104      	bne.n	8002bb6 <HAL_TIM_IC_Start_IT+0xde>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bb4:	e013      	b.n	8002bde <HAL_TIM_IC_Start_IT+0x106>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b0c      	cmp	r3, #12
 8002bba:	d104      	bne.n	8002bc6 <HAL_TIM_IC_Start_IT+0xee>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bc4:	e00b      	b.n	8002bde <HAL_TIM_IC_Start_IT+0x106>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b10      	cmp	r3, #16
 8002bca:	d104      	bne.n	8002bd6 <HAL_TIM_IC_Start_IT+0xfe>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bd4:	e003      	b.n	8002bde <HAL_TIM_IC_Start_IT+0x106>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2202      	movs	r2, #2
 8002bda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d104      	bne.n	8002bee <HAL_TIM_IC_Start_IT+0x116>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bec:	e013      	b.n	8002c16 <HAL_TIM_IC_Start_IT+0x13e>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d104      	bne.n	8002bfe <HAL_TIM_IC_Start_IT+0x126>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bfc:	e00b      	b.n	8002c16 <HAL_TIM_IC_Start_IT+0x13e>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d104      	bne.n	8002c0e <HAL_TIM_IC_Start_IT+0x136>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c0c:	e003      	b.n	8002c16 <HAL_TIM_IC_Start_IT+0x13e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2202      	movs	r2, #2
 8002c12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b0c      	cmp	r3, #12
 8002c1a:	d841      	bhi.n	8002ca0 <HAL_TIM_IC_Start_IT+0x1c8>
 8002c1c:	a201      	add	r2, pc, #4	; (adr r2, 8002c24 <HAL_TIM_IC_Start_IT+0x14c>)
 8002c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c22:	bf00      	nop
 8002c24:	08002c59 	.word	0x08002c59
 8002c28:	08002ca1 	.word	0x08002ca1
 8002c2c:	08002ca1 	.word	0x08002ca1
 8002c30:	08002ca1 	.word	0x08002ca1
 8002c34:	08002c6b 	.word	0x08002c6b
 8002c38:	08002ca1 	.word	0x08002ca1
 8002c3c:	08002ca1 	.word	0x08002ca1
 8002c40:	08002ca1 	.word	0x08002ca1
 8002c44:	08002c7d 	.word	0x08002c7d
 8002c48:	08002ca1 	.word	0x08002ca1
 8002c4c:	08002ca1 	.word	0x08002ca1
 8002c50:	08002ca1 	.word	0x08002ca1
 8002c54:	08002c8f 	.word	0x08002c8f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0202 	orr.w	r2, r2, #2
 8002c66:	60da      	str	r2, [r3, #12]
      break;
 8002c68:	e01b      	b.n	8002ca2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 0204 	orr.w	r2, r2, #4
 8002c78:	60da      	str	r2, [r3, #12]
      break;
 8002c7a:	e012      	b.n	8002ca2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0208 	orr.w	r2, r2, #8
 8002c8a:	60da      	str	r2, [r3, #12]
      break;
 8002c8c:	e009      	b.n	8002ca2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f042 0210 	orr.w	r2, r2, #16
 8002c9c:	60da      	str	r2, [r3, #12]
      break;
 8002c9e:	e000      	b.n	8002ca2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8002ca0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	6839      	ldr	r1, [r7, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f001 f868 	bl	8003d80 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a18      	ldr	r2, [pc, #96]	; (8002d18 <HAL_TIM_IC_Start_IT+0x240>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d009      	beq.n	8002cce <HAL_TIM_IC_Start_IT+0x1f6>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc2:	d004      	beq.n	8002cce <HAL_TIM_IC_Start_IT+0x1f6>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <HAL_TIM_IC_Start_IT+0x244>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d115      	bne.n	8002cfa <HAL_TIM_IC_Start_IT+0x222>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_TIM_IC_Start_IT+0x248>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b06      	cmp	r3, #6
 8002cde:	d015      	beq.n	8002d0c <HAL_TIM_IC_Start_IT+0x234>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce6:	d011      	beq.n	8002d0c <HAL_TIM_IC_Start_IT+0x234>
    {
      __HAL_TIM_ENABLE(htim);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf8:	e008      	b.n	8002d0c <HAL_TIM_IC_Start_IT+0x234>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 0201 	orr.w	r2, r2, #1
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	e000      	b.n	8002d0e <HAL_TIM_IC_Start_IT+0x236>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40012c00 	.word	0x40012c00
 8002d1c:	40014000 	.word	0x40014000
 8002d20:	00010007 	.word	0x00010007

08002d24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d122      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d11b      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0202 	mvn.w	r2, #2
 8002d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fd fbc2 	bl	80004f0 <HAL_TIM_IC_CaptureCallback>
 8002d6c:	e005      	b.n	8002d7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fb5f 	bl	8003432 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fb66 	bl	8003446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d122      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d11b      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0204 	mvn.w	r2, #4
 8002da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2202      	movs	r2, #2
 8002daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fd fb98 	bl	80004f0 <HAL_TIM_IC_CaptureCallback>
 8002dc0:	e005      	b.n	8002dce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fb35 	bl	8003432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 fb3c 	bl	8003446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d122      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d11b      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0208 	mvn.w	r2, #8
 8002df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fd fb6e 	bl	80004f0 <HAL_TIM_IC_CaptureCallback>
 8002e14:	e005      	b.n	8002e22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fb0b 	bl	8003432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 fb12 	bl	8003446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	2b10      	cmp	r3, #16
 8002e34:	d122      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	2b10      	cmp	r3, #16
 8002e42:	d11b      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0210 	mvn.w	r2, #16
 8002e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2208      	movs	r2, #8
 8002e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7fd fb44 	bl	80004f0 <HAL_TIM_IC_CaptureCallback>
 8002e68:	e005      	b.n	8002e76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fae1 	bl	8003432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fae8 	bl	8003446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d10e      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d107      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0201 	mvn.w	r2, #1
 8002ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fabb 	bl	800341e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb2:	2b80      	cmp	r3, #128	; 0x80
 8002eb4:	d10e      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec0:	2b80      	cmp	r3, #128	; 0x80
 8002ec2:	d107      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f001 f864 	bl	8003f9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ee2:	d10e      	bne.n	8002f02 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eee:	2b80      	cmp	r3, #128	; 0x80
 8002ef0:	d107      	bne.n	8002f02 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f001 f857 	bl	8003fb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0c:	2b40      	cmp	r3, #64	; 0x40
 8002f0e:	d10e      	bne.n	8002f2e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1a:	2b40      	cmp	r3, #64	; 0x40
 8002f1c:	d107      	bne.n	8002f2e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fa96 	bl	800345a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	f003 0320 	and.w	r3, r3, #32
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d10e      	bne.n	8002f5a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b20      	cmp	r3, #32
 8002f48:	d107      	bne.n	8002f5a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f06f 0220 	mvn.w	r2, #32
 8002f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f001 f817 	bl	8003f88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b084      	sub	sp, #16
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	60f8      	str	r0, [r7, #12]
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_TIM_IC_ConfigChannel+0x1a>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e082      	b.n	8003082 <HAL_TIM_IC_ConfigChannel+0x120>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d11b      	bne.n	8002fc2 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6818      	ldr	r0, [r3, #0]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	6819      	ldr	r1, [r3, #0]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f000 fd4b 	bl	8003a34 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	699a      	ldr	r2, [r3, #24]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 020c 	bic.w	r2, r2, #12
 8002fac:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6999      	ldr	r1, [r3, #24]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	619a      	str	r2, [r3, #24]
 8002fc0:	e05a      	b.n	8003078 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d11c      	bne.n	8003002 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6818      	ldr	r0, [r3, #0]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	6819      	ldr	r1, [r3, #0]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f000 fdb1 	bl	8003b3e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699a      	ldr	r2, [r3, #24]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002fea:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6999      	ldr	r1, [r3, #24]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	021a      	lsls	r2, r3, #8
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	619a      	str	r2, [r3, #24]
 8003000:	e03a      	b.n	8003078 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b08      	cmp	r3, #8
 8003006:	d11b      	bne.n	8003040 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6818      	ldr	r0, [r3, #0]
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	6819      	ldr	r1, [r3, #0]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f000 fdfe 	bl	8003c18 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69da      	ldr	r2, [r3, #28]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 020c 	bic.w	r2, r2, #12
 800302a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	69d9      	ldr	r1, [r3, #28]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	61da      	str	r2, [r3, #28]
 800303e:	e01b      	b.n	8003078 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	6819      	ldr	r1, [r3, #0]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f000 fe1e 	bl	8003c90 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	69da      	ldr	r2, [r3, #28]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003062:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	69d9      	ldr	r1, [r3, #28]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	021a      	lsls	r2, r3, #8
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e0fd      	b.n	80032a2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b14      	cmp	r3, #20
 80030b2:	f200 80f0 	bhi.w	8003296 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80030b6:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80030b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030bc:	08003111 	.word	0x08003111
 80030c0:	08003297 	.word	0x08003297
 80030c4:	08003297 	.word	0x08003297
 80030c8:	08003297 	.word	0x08003297
 80030cc:	08003151 	.word	0x08003151
 80030d0:	08003297 	.word	0x08003297
 80030d4:	08003297 	.word	0x08003297
 80030d8:	08003297 	.word	0x08003297
 80030dc:	08003193 	.word	0x08003193
 80030e0:	08003297 	.word	0x08003297
 80030e4:	08003297 	.word	0x08003297
 80030e8:	08003297 	.word	0x08003297
 80030ec:	080031d3 	.word	0x080031d3
 80030f0:	08003297 	.word	0x08003297
 80030f4:	08003297 	.word	0x08003297
 80030f8:	08003297 	.word	0x08003297
 80030fc:	08003215 	.word	0x08003215
 8003100:	08003297 	.word	0x08003297
 8003104:	08003297 	.word	0x08003297
 8003108:	08003297 	.word	0x08003297
 800310c:	08003255 	.word	0x08003255
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fa0e 	bl	8003538 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699a      	ldr	r2, [r3, #24]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0208 	orr.w	r2, r2, #8
 800312a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0204 	bic.w	r2, r2, #4
 800313a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6999      	ldr	r1, [r3, #24]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	619a      	str	r2, [r3, #24]
      break;
 800314e:	e0a3      	b.n	8003298 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	4618      	mov	r0, r3
 8003158:	f000 fa6a 	bl	8003630 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699a      	ldr	r2, [r3, #24]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800316a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800317a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6999      	ldr	r1, [r3, #24]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	021a      	lsls	r2, r3, #8
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	619a      	str	r2, [r3, #24]
      break;
 8003190:	e082      	b.n	8003298 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	4618      	mov	r0, r3
 800319a:	f000 fac3 	bl	8003724 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	69da      	ldr	r2, [r3, #28]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0208 	orr.w	r2, r2, #8
 80031ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0204 	bic.w	r2, r2, #4
 80031bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69d9      	ldr	r1, [r3, #28]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	61da      	str	r2, [r3, #28]
      break;
 80031d0:	e062      	b.n	8003298 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 fb1b 	bl	8003814 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69da      	ldr	r2, [r3, #28]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69d9      	ldr	r1, [r3, #28]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	021a      	lsls	r2, r3, #8
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	61da      	str	r2, [r3, #28]
      break;
 8003212:	e041      	b.n	8003298 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fb58 	bl	80038d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0208 	orr.w	r2, r2, #8
 800322e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0204 	bic.w	r2, r2, #4
 800323e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	691a      	ldr	r2, [r3, #16]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003252:	e021      	b.n	8003298 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	4618      	mov	r0, r3
 800325c:	f000 fb90 	bl	8003980 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800326e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	021a      	lsls	r2, r3, #8
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003294:	e000      	b.n	8003298 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003296:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop

080032ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_TIM_ConfigClockSource+0x18>
 80032c0:	2302      	movs	r3, #2
 80032c2:	e0a8      	b.n	8003416 <HAL_TIM_ConfigClockSource+0x16a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b40      	cmp	r3, #64	; 0x40
 80032fe:	d067      	beq.n	80033d0 <HAL_TIM_ConfigClockSource+0x124>
 8003300:	2b40      	cmp	r3, #64	; 0x40
 8003302:	d80b      	bhi.n	800331c <HAL_TIM_ConfigClockSource+0x70>
 8003304:	2b10      	cmp	r3, #16
 8003306:	d073      	beq.n	80033f0 <HAL_TIM_ConfigClockSource+0x144>
 8003308:	2b10      	cmp	r3, #16
 800330a:	d802      	bhi.n	8003312 <HAL_TIM_ConfigClockSource+0x66>
 800330c:	2b00      	cmp	r3, #0
 800330e:	d06f      	beq.n	80033f0 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003310:	e078      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003312:	2b20      	cmp	r3, #32
 8003314:	d06c      	beq.n	80033f0 <HAL_TIM_ConfigClockSource+0x144>
 8003316:	2b30      	cmp	r3, #48	; 0x30
 8003318:	d06a      	beq.n	80033f0 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800331a:	e073      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800331c:	2b70      	cmp	r3, #112	; 0x70
 800331e:	d00d      	beq.n	800333c <HAL_TIM_ConfigClockSource+0x90>
 8003320:	2b70      	cmp	r3, #112	; 0x70
 8003322:	d804      	bhi.n	800332e <HAL_TIM_ConfigClockSource+0x82>
 8003324:	2b50      	cmp	r3, #80	; 0x50
 8003326:	d033      	beq.n	8003390 <HAL_TIM_ConfigClockSource+0xe4>
 8003328:	2b60      	cmp	r3, #96	; 0x60
 800332a:	d041      	beq.n	80033b0 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800332c:	e06a      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800332e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003332:	d066      	beq.n	8003402 <HAL_TIM_ConfigClockSource+0x156>
 8003334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003338:	d017      	beq.n	800336a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800333a:	e063      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6818      	ldr	r0, [r3, #0]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	6899      	ldr	r1, [r3, #8]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f000 fcf8 	bl	8003d40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800335e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	609a      	str	r2, [r3, #8]
      break;
 8003368:	e04c      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6899      	ldr	r1, [r3, #8]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f000 fce1 	bl	8003d40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800338c:	609a      	str	r2, [r3, #8]
      break;
 800338e:	e039      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	6859      	ldr	r1, [r3, #4]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	461a      	mov	r2, r3
 800339e:	f000 fb9f 	bl	8003ae0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2150      	movs	r1, #80	; 0x50
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 fcae 	bl	8003d0a <TIM_ITRx_SetConfig>
      break;
 80033ae:	e029      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6818      	ldr	r0, [r3, #0]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	6859      	ldr	r1, [r3, #4]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	461a      	mov	r2, r3
 80033be:	f000 fbfb 	bl	8003bb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2160      	movs	r1, #96	; 0x60
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fc9e 	bl	8003d0a <TIM_ITRx_SetConfig>
      break;
 80033ce:	e019      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6818      	ldr	r0, [r3, #0]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	461a      	mov	r2, r3
 80033de:	f000 fb7f 	bl	8003ae0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2140      	movs	r1, #64	; 0x40
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fc8e 	bl	8003d0a <TIM_ITRx_SetConfig>
      break;
 80033ee:	e009      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4619      	mov	r1, r3
 80033fa:	4610      	mov	r0, r2
 80033fc:	f000 fc85 	bl	8003d0a <TIM_ITRx_SetConfig>
        break;
 8003400:	e000      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003402:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a2a      	ldr	r2, [pc, #168]	; (800352c <TIM_Base_SetConfig+0xbc>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d003      	beq.n	8003490 <TIM_Base_SetConfig+0x20>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348e:	d108      	bne.n	80034a2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a21      	ldr	r2, [pc, #132]	; (800352c <TIM_Base_SetConfig+0xbc>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00b      	beq.n	80034c2 <TIM_Base_SetConfig+0x52>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b0:	d007      	beq.n	80034c2 <TIM_Base_SetConfig+0x52>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a1e      	ldr	r2, [pc, #120]	; (8003530 <TIM_Base_SetConfig+0xc0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d003      	beq.n	80034c2 <TIM_Base_SetConfig+0x52>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a1d      	ldr	r2, [pc, #116]	; (8003534 <TIM_Base_SetConfig+0xc4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d108      	bne.n	80034d4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a0c      	ldr	r2, [pc, #48]	; (800352c <TIM_Base_SetConfig+0xbc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d007      	beq.n	8003510 <TIM_Base_SetConfig+0xa0>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a0b      	ldr	r2, [pc, #44]	; (8003530 <TIM_Base_SetConfig+0xc0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d003      	beq.n	8003510 <TIM_Base_SetConfig+0xa0>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a0a      	ldr	r2, [pc, #40]	; (8003534 <TIM_Base_SetConfig+0xc4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d103      	bne.n	8003518 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	615a      	str	r2, [r3, #20]
}
 800351e:	bf00      	nop
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40012c00 	.word	0x40012c00
 8003530:	40014000 	.word	0x40014000
 8003534:	40014400 	.word	0x40014400

08003538 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	f023 0201 	bic.w	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0303 	bic.w	r3, r3, #3
 8003572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f023 0302 	bic.w	r3, r3, #2
 8003584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4313      	orrs	r3, r2
 800358e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a24      	ldr	r2, [pc, #144]	; (8003624 <TIM_OC1_SetConfig+0xec>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d007      	beq.n	80035a8 <TIM_OC1_SetConfig+0x70>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a23      	ldr	r2, [pc, #140]	; (8003628 <TIM_OC1_SetConfig+0xf0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d003      	beq.n	80035a8 <TIM_OC1_SetConfig+0x70>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a22      	ldr	r2, [pc, #136]	; (800362c <TIM_OC1_SetConfig+0xf4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d10c      	bne.n	80035c2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f023 0308 	bic.w	r3, r3, #8
 80035ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f023 0304 	bic.w	r3, r3, #4
 80035c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a17      	ldr	r2, [pc, #92]	; (8003624 <TIM_OC1_SetConfig+0xec>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d007      	beq.n	80035da <TIM_OC1_SetConfig+0xa2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a16      	ldr	r2, [pc, #88]	; (8003628 <TIM_OC1_SetConfig+0xf0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d003      	beq.n	80035da <TIM_OC1_SetConfig+0xa2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a15      	ldr	r2, [pc, #84]	; (800362c <TIM_OC1_SetConfig+0xf4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d111      	bne.n	80035fe <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	621a      	str	r2, [r3, #32]
}
 8003618:	bf00      	nop
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	40012c00 	.word	0x40012c00
 8003628:	40014000 	.word	0x40014000
 800362c:	40014400 	.word	0x40014400

08003630 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	f023 0210 	bic.w	r2, r3, #16
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800365e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	021b      	lsls	r3, r3, #8
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f023 0320 	bic.w	r3, r3, #32
 800367e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a22      	ldr	r2, [pc, #136]	; (8003718 <TIM_OC2_SetConfig+0xe8>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d10d      	bne.n	80036b0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800369a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a19      	ldr	r2, [pc, #100]	; (8003718 <TIM_OC2_SetConfig+0xe8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d007      	beq.n	80036c8 <TIM_OC2_SetConfig+0x98>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a18      	ldr	r2, [pc, #96]	; (800371c <TIM_OC2_SetConfig+0xec>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d003      	beq.n	80036c8 <TIM_OC2_SetConfig+0x98>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a17      	ldr	r2, [pc, #92]	; (8003720 <TIM_OC2_SetConfig+0xf0>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d113      	bne.n	80036f0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	621a      	str	r2, [r3, #32]
}
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40012c00 	.word	0x40012c00
 800371c:	40014000 	.word	0x40014000
 8003720:	40014400 	.word	0x40014400

08003724 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0303 	bic.w	r3, r3, #3
 800375e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	021b      	lsls	r3, r3, #8
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	4313      	orrs	r3, r2
 800377c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a21      	ldr	r2, [pc, #132]	; (8003808 <TIM_OC3_SetConfig+0xe4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d10d      	bne.n	80037a2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800378c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	021b      	lsls	r3, r3, #8
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	4313      	orrs	r3, r2
 8003798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a18      	ldr	r2, [pc, #96]	; (8003808 <TIM_OC3_SetConfig+0xe4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d007      	beq.n	80037ba <TIM_OC3_SetConfig+0x96>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a17      	ldr	r2, [pc, #92]	; (800380c <TIM_OC3_SetConfig+0xe8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d003      	beq.n	80037ba <TIM_OC3_SetConfig+0x96>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a16      	ldr	r2, [pc, #88]	; (8003810 <TIM_OC3_SetConfig+0xec>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d113      	bne.n	80037e2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4313      	orrs	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	621a      	str	r2, [r3, #32]
}
 80037fc:	bf00      	nop
 80037fe:	371c      	adds	r7, #28
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	40012c00 	.word	0x40012c00
 800380c:	40014000 	.word	0x40014000
 8003810:	40014400 	.word	0x40014400

08003814 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800384e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	021b      	lsls	r3, r3, #8
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4313      	orrs	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003862:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	031b      	lsls	r3, r3, #12
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a14      	ldr	r2, [pc, #80]	; (80038c4 <TIM_OC4_SetConfig+0xb0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d007      	beq.n	8003888 <TIM_OC4_SetConfig+0x74>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a13      	ldr	r2, [pc, #76]	; (80038c8 <TIM_OC4_SetConfig+0xb4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d003      	beq.n	8003888 <TIM_OC4_SetConfig+0x74>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a12      	ldr	r2, [pc, #72]	; (80038cc <TIM_OC4_SetConfig+0xb8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d109      	bne.n	800389c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800388e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	019b      	lsls	r3, r3, #6
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	621a      	str	r2, [r3, #32]
}
 80038b6:	bf00      	nop
 80038b8:	371c      	adds	r7, #28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40012c00 	.word	0x40012c00
 80038c8:	40014000 	.word	0x40014000
 80038cc:	40014400 	.word	0x40014400

080038d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003914:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	041b      	lsls	r3, r3, #16
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a13      	ldr	r2, [pc, #76]	; (8003974 <TIM_OC5_SetConfig+0xa4>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d007      	beq.n	800393a <TIM_OC5_SetConfig+0x6a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a12      	ldr	r2, [pc, #72]	; (8003978 <TIM_OC5_SetConfig+0xa8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d003      	beq.n	800393a <TIM_OC5_SetConfig+0x6a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a11      	ldr	r2, [pc, #68]	; (800397c <TIM_OC5_SetConfig+0xac>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d109      	bne.n	800394e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003940:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	021b      	lsls	r3, r3, #8
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	4313      	orrs	r3, r2
 800394c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	621a      	str	r2, [r3, #32]
}
 8003968:	bf00      	nop
 800396a:	371c      	adds	r7, #28
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	40012c00 	.word	0x40012c00
 8003978:	40014000 	.word	0x40014000
 800397c:	40014400 	.word	0x40014400

08003980 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	021b      	lsls	r3, r3, #8
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	051b      	lsls	r3, r3, #20
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a14      	ldr	r2, [pc, #80]	; (8003a28 <TIM_OC6_SetConfig+0xa8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d007      	beq.n	80039ec <TIM_OC6_SetConfig+0x6c>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a13      	ldr	r2, [pc, #76]	; (8003a2c <TIM_OC6_SetConfig+0xac>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d003      	beq.n	80039ec <TIM_OC6_SetConfig+0x6c>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a12      	ldr	r2, [pc, #72]	; (8003a30 <TIM_OC6_SetConfig+0xb0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d109      	bne.n	8003a00 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	029b      	lsls	r3, r3, #10
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	621a      	str	r2, [r3, #32]
}
 8003a1a:	bf00      	nop
 8003a1c:	371c      	adds	r7, #28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40012c00 	.word	0x40012c00
 8003a2c:	40014000 	.word	0x40014000
 8003a30:	40014400 	.word	0x40014400

08003a34 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	f023 0201 	bic.w	r2, r3, #1
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4a1e      	ldr	r2, [pc, #120]	; (8003ad8 <TIM_TI1_SetConfig+0xa4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d007      	beq.n	8003a72 <TIM_TI1_SetConfig+0x3e>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a68:	d003      	beq.n	8003a72 <TIM_TI1_SetConfig+0x3e>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4a1b      	ldr	r2, [pc, #108]	; (8003adc <TIM_TI1_SetConfig+0xa8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d101      	bne.n	8003a76 <TIM_TI1_SetConfig+0x42>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <TIM_TI1_SetConfig+0x44>
 8003a76:	2300      	movs	r3, #0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f023 0303 	bic.w	r3, r3, #3
 8003a82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	e003      	b.n	8003a96 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f023 030a 	bic.w	r3, r3, #10
 8003ab0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f003 030a 	and.w	r3, r3, #10
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	621a      	str	r2, [r3, #32]
}
 8003aca:	bf00      	nop
 8003acc:	371c      	adds	r7, #28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40012c00 	.word	0x40012c00
 8003adc:	40014000 	.word	0x40014000

08003ae0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	f023 0201 	bic.w	r2, r3, #1
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f023 030a 	bic.w	r3, r3, #10
 8003b1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	621a      	str	r2, [r3, #32]
}
 8003b32:	bf00      	nop
 8003b34:	371c      	adds	r7, #28
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b087      	sub	sp, #28
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607a      	str	r2, [r7, #4]
 8003b4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	f023 0210 	bic.w	r2, r3, #16
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	021b      	lsls	r3, r3, #8
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	031b      	lsls	r3, r3, #12
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b90:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	621a      	str	r2, [r3, #32]
}
 8003bac:	bf00      	nop
 8003bae:	371c      	adds	r7, #28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	f023 0210 	bic.w	r2, r3, #16
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003be2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	031b      	lsls	r3, r3, #12
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bf4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	621a      	str	r2, [r3, #32]
}
 8003c0c:	bf00      	nop
 8003c0e:	371c      	adds	r7, #28
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f023 0303 	bic.w	r3, r3, #3
 8003c44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003c68:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	021b      	lsls	r3, r3, #8
 8003c6e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	621a      	str	r2, [r3, #32]
}
 8003c84:	bf00      	nop
 8003c86:	371c      	adds	r7, #28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cbc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	031b      	lsls	r3, r3, #12
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003ce2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	031b      	lsls	r3, r3, #12
 8003ce8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	621a      	str	r2, [r3, #32]
}
 8003cfe:	bf00      	nop
 8003d00:	371c      	adds	r7, #28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b085      	sub	sp, #20
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f043 0307 	orr.w	r3, r3, #7
 8003d2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	609a      	str	r2, [r3, #8]
}
 8003d34:	bf00      	nop
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
 8003d4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	021a      	lsls	r2, r3, #8
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	609a      	str	r2, [r3, #8]
}
 8003d74:	bf00      	nop
 8003d76:	371c      	adds	r7, #28
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f003 031f 	and.w	r3, r3, #31
 8003d92:	2201      	movs	r2, #1
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a1a      	ldr	r2, [r3, #32]
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	43db      	mvns	r3, r3
 8003da2:	401a      	ands	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a1a      	ldr	r2, [r3, #32]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f003 031f 	and.w	r3, r3, #31
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	fa01 f303 	lsl.w	r3, r1, r3
 8003db8:	431a      	orrs	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	621a      	str	r2, [r3, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
	...

08003dcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e04f      	b.n	8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a21      	ldr	r2, [pc, #132]	; (8003e90 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d108      	bne.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e14:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a14      	ldr	r2, [pc, #80]	; (8003e90 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d009      	beq.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4c:	d004      	beq.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a10      	ldr	r2, [pc, #64]	; (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d10c      	bne.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	40012c00 	.word	0x40012c00
 8003e94:	40014000 	.word	0x40014000

08003e98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e060      	b.n	8003f76 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	041b      	lsls	r3, r3, #16
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a14      	ldr	r2, [pc, #80]	; (8003f84 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d115      	bne.n	8003f64 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	051b      	lsls	r3, r3, #20
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40012c00 	.word	0x40012c00

08003f88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e040      	b.n	8004058 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d106      	bne.n	8003fec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7fc ff84 	bl	8000ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2224      	movs	r2, #36	; 0x24
 8003ff0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0201 	bic.w	r2, r2, #1
 8004000:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f8c0 	bl	8004188 <UART_SetConfig>
 8004008:	4603      	mov	r3, r0
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e022      	b.n	8004058 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 faea 	bl	80045f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800402e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800403e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 fb71 	bl	8004738 <UART_CheckIdleState>
 8004056:	4603      	mov	r3, r0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08a      	sub	sp, #40	; 0x28
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	4613      	mov	r3, r2
 800406e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004074:	2b20      	cmp	r3, #32
 8004076:	f040 8081 	bne.w	800417c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <HAL_UART_Transmit+0x26>
 8004080:	88fb      	ldrh	r3, [r7, #6]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e079      	b.n	800417e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_UART_Transmit+0x38>
 8004094:	2302      	movs	r3, #2
 8004096:	e072      	b.n	800417e <HAL_UART_Transmit+0x11e>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2221      	movs	r2, #33	; 0x21
 80040aa:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80040ac:	f7fd f834 	bl	8001118 <HAL_GetTick>
 80040b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	88fa      	ldrh	r2, [r7, #6]
 80040b6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	88fa      	ldrh	r2, [r7, #6]
 80040be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ca:	d108      	bne.n	80040de <HAL_UART_Transmit+0x7e>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d104      	bne.n	80040de <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	61bb      	str	r3, [r7, #24]
 80040dc:	e003      	b.n	80040e6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80040ee:	e02d      	b.n	800414c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2200      	movs	r2, #0
 80040f8:	2180      	movs	r1, #128	; 0x80
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 fb61 	bl	80047c2 <UART_WaitOnFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e039      	b.n	800417e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10b      	bne.n	8004128 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	881a      	ldrh	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800411c:	b292      	uxth	r2, r2
 800411e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	3302      	adds	r3, #2
 8004124:	61bb      	str	r3, [r7, #24]
 8004126:	e008      	b.n	800413a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	781a      	ldrb	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	b292      	uxth	r2, r2
 8004132:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	3301      	adds	r3, #1
 8004138:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1cb      	bne.n	80040f0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2200      	movs	r2, #0
 8004160:	2140      	movs	r1, #64	; 0x40
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 fb2d 	bl	80047c2 <UART_WaitOnFlagUntilTimeout>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e005      	b.n	800417e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2220      	movs	r2, #32
 8004176:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	e000      	b.n	800417e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800417c:	2302      	movs	r3, #2
  }
}
 800417e:	4618      	mov	r0, r3
 8004180:	3720      	adds	r7, #32
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004188:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800418c:	b088      	sub	sp, #32
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	4baa      	ldr	r3, [pc, #680]	; (8004460 <UART_SetConfig+0x2d8>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6812      	ldr	r2, [r2, #0]
 80041bc:	69f9      	ldr	r1, [r7, #28]
 80041be:	430b      	orrs	r3, r1
 80041c0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4aa0      	ldr	r2, [pc, #640]	; (8004464 <UART_SetConfig+0x2dc>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d004      	beq.n	80041f2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	430a      	orrs	r2, r1
 8004204:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a97      	ldr	r2, [pc, #604]	; (8004468 <UART_SetConfig+0x2e0>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d121      	bne.n	8004254 <UART_SetConfig+0xcc>
 8004210:	4b96      	ldr	r3, [pc, #600]	; (800446c <UART_SetConfig+0x2e4>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	2b03      	cmp	r3, #3
 800421c:	d816      	bhi.n	800424c <UART_SetConfig+0xc4>
 800421e:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <UART_SetConfig+0x9c>)
 8004220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004224:	08004235 	.word	0x08004235
 8004228:	08004241 	.word	0x08004241
 800422c:	0800423b 	.word	0x0800423b
 8004230:	08004247 	.word	0x08004247
 8004234:	2301      	movs	r3, #1
 8004236:	76fb      	strb	r3, [r7, #27]
 8004238:	e098      	b.n	800436c <UART_SetConfig+0x1e4>
 800423a:	2302      	movs	r3, #2
 800423c:	76fb      	strb	r3, [r7, #27]
 800423e:	e095      	b.n	800436c <UART_SetConfig+0x1e4>
 8004240:	2304      	movs	r3, #4
 8004242:	76fb      	strb	r3, [r7, #27]
 8004244:	e092      	b.n	800436c <UART_SetConfig+0x1e4>
 8004246:	2308      	movs	r3, #8
 8004248:	76fb      	strb	r3, [r7, #27]
 800424a:	e08f      	b.n	800436c <UART_SetConfig+0x1e4>
 800424c:	2310      	movs	r3, #16
 800424e:	76fb      	strb	r3, [r7, #27]
 8004250:	bf00      	nop
 8004252:	e08b      	b.n	800436c <UART_SetConfig+0x1e4>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a85      	ldr	r2, [pc, #532]	; (8004470 <UART_SetConfig+0x2e8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d134      	bne.n	80042c8 <UART_SetConfig+0x140>
 800425e:	4b83      	ldr	r3, [pc, #524]	; (800446c <UART_SetConfig+0x2e4>)
 8004260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004264:	f003 030c 	and.w	r3, r3, #12
 8004268:	2b0c      	cmp	r3, #12
 800426a:	d829      	bhi.n	80042c0 <UART_SetConfig+0x138>
 800426c:	a201      	add	r2, pc, #4	; (adr r2, 8004274 <UART_SetConfig+0xec>)
 800426e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004272:	bf00      	nop
 8004274:	080042a9 	.word	0x080042a9
 8004278:	080042c1 	.word	0x080042c1
 800427c:	080042c1 	.word	0x080042c1
 8004280:	080042c1 	.word	0x080042c1
 8004284:	080042b5 	.word	0x080042b5
 8004288:	080042c1 	.word	0x080042c1
 800428c:	080042c1 	.word	0x080042c1
 8004290:	080042c1 	.word	0x080042c1
 8004294:	080042af 	.word	0x080042af
 8004298:	080042c1 	.word	0x080042c1
 800429c:	080042c1 	.word	0x080042c1
 80042a0:	080042c1 	.word	0x080042c1
 80042a4:	080042bb 	.word	0x080042bb
 80042a8:	2300      	movs	r3, #0
 80042aa:	76fb      	strb	r3, [r7, #27]
 80042ac:	e05e      	b.n	800436c <UART_SetConfig+0x1e4>
 80042ae:	2302      	movs	r3, #2
 80042b0:	76fb      	strb	r3, [r7, #27]
 80042b2:	e05b      	b.n	800436c <UART_SetConfig+0x1e4>
 80042b4:	2304      	movs	r3, #4
 80042b6:	76fb      	strb	r3, [r7, #27]
 80042b8:	e058      	b.n	800436c <UART_SetConfig+0x1e4>
 80042ba:	2308      	movs	r3, #8
 80042bc:	76fb      	strb	r3, [r7, #27]
 80042be:	e055      	b.n	800436c <UART_SetConfig+0x1e4>
 80042c0:	2310      	movs	r3, #16
 80042c2:	76fb      	strb	r3, [r7, #27]
 80042c4:	bf00      	nop
 80042c6:	e051      	b.n	800436c <UART_SetConfig+0x1e4>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a69      	ldr	r2, [pc, #420]	; (8004474 <UART_SetConfig+0x2ec>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d120      	bne.n	8004314 <UART_SetConfig+0x18c>
 80042d2:	4b66      	ldr	r3, [pc, #408]	; (800446c <UART_SetConfig+0x2e4>)
 80042d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042dc:	2b10      	cmp	r3, #16
 80042de:	d00f      	beq.n	8004300 <UART_SetConfig+0x178>
 80042e0:	2b10      	cmp	r3, #16
 80042e2:	d802      	bhi.n	80042ea <UART_SetConfig+0x162>
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d005      	beq.n	80042f4 <UART_SetConfig+0x16c>
 80042e8:	e010      	b.n	800430c <UART_SetConfig+0x184>
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	d005      	beq.n	80042fa <UART_SetConfig+0x172>
 80042ee:	2b30      	cmp	r3, #48	; 0x30
 80042f0:	d009      	beq.n	8004306 <UART_SetConfig+0x17e>
 80042f2:	e00b      	b.n	800430c <UART_SetConfig+0x184>
 80042f4:	2300      	movs	r3, #0
 80042f6:	76fb      	strb	r3, [r7, #27]
 80042f8:	e038      	b.n	800436c <UART_SetConfig+0x1e4>
 80042fa:	2302      	movs	r3, #2
 80042fc:	76fb      	strb	r3, [r7, #27]
 80042fe:	e035      	b.n	800436c <UART_SetConfig+0x1e4>
 8004300:	2304      	movs	r3, #4
 8004302:	76fb      	strb	r3, [r7, #27]
 8004304:	e032      	b.n	800436c <UART_SetConfig+0x1e4>
 8004306:	2308      	movs	r3, #8
 8004308:	76fb      	strb	r3, [r7, #27]
 800430a:	e02f      	b.n	800436c <UART_SetConfig+0x1e4>
 800430c:	2310      	movs	r3, #16
 800430e:	76fb      	strb	r3, [r7, #27]
 8004310:	bf00      	nop
 8004312:	e02b      	b.n	800436c <UART_SetConfig+0x1e4>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a52      	ldr	r2, [pc, #328]	; (8004464 <UART_SetConfig+0x2dc>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d124      	bne.n	8004368 <UART_SetConfig+0x1e0>
 800431e:	4b53      	ldr	r3, [pc, #332]	; (800446c <UART_SetConfig+0x2e4>)
 8004320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004324:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800432c:	d012      	beq.n	8004354 <UART_SetConfig+0x1cc>
 800432e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004332:	d802      	bhi.n	800433a <UART_SetConfig+0x1b2>
 8004334:	2b00      	cmp	r3, #0
 8004336:	d007      	beq.n	8004348 <UART_SetConfig+0x1c0>
 8004338:	e012      	b.n	8004360 <UART_SetConfig+0x1d8>
 800433a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800433e:	d006      	beq.n	800434e <UART_SetConfig+0x1c6>
 8004340:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004344:	d009      	beq.n	800435a <UART_SetConfig+0x1d2>
 8004346:	e00b      	b.n	8004360 <UART_SetConfig+0x1d8>
 8004348:	2300      	movs	r3, #0
 800434a:	76fb      	strb	r3, [r7, #27]
 800434c:	e00e      	b.n	800436c <UART_SetConfig+0x1e4>
 800434e:	2302      	movs	r3, #2
 8004350:	76fb      	strb	r3, [r7, #27]
 8004352:	e00b      	b.n	800436c <UART_SetConfig+0x1e4>
 8004354:	2304      	movs	r3, #4
 8004356:	76fb      	strb	r3, [r7, #27]
 8004358:	e008      	b.n	800436c <UART_SetConfig+0x1e4>
 800435a:	2308      	movs	r3, #8
 800435c:	76fb      	strb	r3, [r7, #27]
 800435e:	e005      	b.n	800436c <UART_SetConfig+0x1e4>
 8004360:	2310      	movs	r3, #16
 8004362:	76fb      	strb	r3, [r7, #27]
 8004364:	bf00      	nop
 8004366:	e001      	b.n	800436c <UART_SetConfig+0x1e4>
 8004368:	2310      	movs	r3, #16
 800436a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a3c      	ldr	r2, [pc, #240]	; (8004464 <UART_SetConfig+0x2dc>)
 8004372:	4293      	cmp	r3, r2
 8004374:	f040 8082 	bne.w	800447c <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004378:	7efb      	ldrb	r3, [r7, #27]
 800437a:	2b08      	cmp	r3, #8
 800437c:	d823      	bhi.n	80043c6 <UART_SetConfig+0x23e>
 800437e:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <UART_SetConfig+0x1fc>)
 8004380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004384:	080043a9 	.word	0x080043a9
 8004388:	080043c7 	.word	0x080043c7
 800438c:	080043b1 	.word	0x080043b1
 8004390:	080043c7 	.word	0x080043c7
 8004394:	080043b7 	.word	0x080043b7
 8004398:	080043c7 	.word	0x080043c7
 800439c:	080043c7 	.word	0x080043c7
 80043a0:	080043c7 	.word	0x080043c7
 80043a4:	080043bf 	.word	0x080043bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043a8:	f7fd ffa0 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 80043ac:	6178      	str	r0, [r7, #20]
        break;
 80043ae:	e00f      	b.n	80043d0 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043b0:	4b31      	ldr	r3, [pc, #196]	; (8004478 <UART_SetConfig+0x2f0>)
 80043b2:	617b      	str	r3, [r7, #20]
        break;
 80043b4:	e00c      	b.n	80043d0 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043b6:	f7fd ff03 	bl	80021c0 <HAL_RCC_GetSysClockFreq>
 80043ba:	6178      	str	r0, [r7, #20]
        break;
 80043bc:	e008      	b.n	80043d0 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043c2:	617b      	str	r3, [r7, #20]
        break;
 80043c4:	e004      	b.n	80043d0 <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	76bb      	strb	r3, [r7, #26]
        break;
 80043ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 8100 	beq.w	80045d8 <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	4613      	mov	r3, r2
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	4413      	add	r3, r2
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d305      	bcc.n	80043f4 <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d902      	bls.n	80043fa <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	76bb      	strb	r3, [r7, #26]
 80043f8:	e0ee      	b.n	80045d8 <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	4619      	mov	r1, r3
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	f04f 0300 	mov.w	r3, #0
 8004406:	f04f 0400 	mov.w	r4, #0
 800440a:	0214      	lsls	r4, r2, #8
 800440c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004410:	020b      	lsls	r3, r1, #8
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6852      	ldr	r2, [r2, #4]
 8004416:	0852      	lsrs	r2, r2, #1
 8004418:	4611      	mov	r1, r2
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	eb13 0b01 	adds.w	fp, r3, r1
 8004422:	eb44 0c02 	adc.w	ip, r4, r2
 8004426:	4658      	mov	r0, fp
 8004428:	4661      	mov	r1, ip
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f04f 0400 	mov.w	r4, #0
 8004432:	461a      	mov	r2, r3
 8004434:	4623      	mov	r3, r4
 8004436:	f7fb fec9 	bl	80001cc <__aeabi_uldivmod>
 800443a:	4603      	mov	r3, r0
 800443c:	460c      	mov	r4, r1
 800443e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004446:	d308      	bcc.n	800445a <UART_SetConfig+0x2d2>
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800444e:	d204      	bcs.n	800445a <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	60da      	str	r2, [r3, #12]
 8004458:	e0be      	b.n	80045d8 <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	76bb      	strb	r3, [r7, #26]
 800445e:	e0bb      	b.n	80045d8 <UART_SetConfig+0x450>
 8004460:	efff69f3 	.word	0xefff69f3
 8004464:	40008000 	.word	0x40008000
 8004468:	40013800 	.word	0x40013800
 800446c:	40021000 	.word	0x40021000
 8004470:	40004400 	.word	0x40004400
 8004474:	40004800 	.word	0x40004800
 8004478:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004484:	d15c      	bne.n	8004540 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8004486:	7efb      	ldrb	r3, [r7, #27]
 8004488:	2b08      	cmp	r3, #8
 800448a:	d828      	bhi.n	80044de <UART_SetConfig+0x356>
 800448c:	a201      	add	r2, pc, #4	; (adr r2, 8004494 <UART_SetConfig+0x30c>)
 800448e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004492:	bf00      	nop
 8004494:	080044b9 	.word	0x080044b9
 8004498:	080044c1 	.word	0x080044c1
 800449c:	080044c9 	.word	0x080044c9
 80044a0:	080044df 	.word	0x080044df
 80044a4:	080044cf 	.word	0x080044cf
 80044a8:	080044df 	.word	0x080044df
 80044ac:	080044df 	.word	0x080044df
 80044b0:	080044df 	.word	0x080044df
 80044b4:	080044d7 	.word	0x080044d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044b8:	f7fd ff18 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 80044bc:	6178      	str	r0, [r7, #20]
        break;
 80044be:	e013      	b.n	80044e8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044c0:	f7fd ff2a 	bl	8002318 <HAL_RCC_GetPCLK2Freq>
 80044c4:	6178      	str	r0, [r7, #20]
        break;
 80044c6:	e00f      	b.n	80044e8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044c8:	4b49      	ldr	r3, [pc, #292]	; (80045f0 <UART_SetConfig+0x468>)
 80044ca:	617b      	str	r3, [r7, #20]
        break;
 80044cc:	e00c      	b.n	80044e8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ce:	f7fd fe77 	bl	80021c0 <HAL_RCC_GetSysClockFreq>
 80044d2:	6178      	str	r0, [r7, #20]
        break;
 80044d4:	e008      	b.n	80044e8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044da:	617b      	str	r3, [r7, #20]
        break;
 80044dc:	e004      	b.n	80044e8 <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	76bb      	strb	r3, [r7, #26]
        break;
 80044e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d074      	beq.n	80045d8 <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	005a      	lsls	r2, r3, #1
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	085b      	lsrs	r3, r3, #1
 80044f8:	441a      	add	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004502:	b29b      	uxth	r3, r3
 8004504:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	2b0f      	cmp	r3, #15
 800450a:	d916      	bls.n	800453a <UART_SetConfig+0x3b2>
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004512:	d212      	bcs.n	800453a <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	b29b      	uxth	r3, r3
 8004518:	f023 030f 	bic.w	r3, r3, #15
 800451c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	085b      	lsrs	r3, r3, #1
 8004522:	b29b      	uxth	r3, r3
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	b29a      	uxth	r2, r3
 800452a:	89fb      	ldrh	r3, [r7, #14]
 800452c:	4313      	orrs	r3, r2
 800452e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	89fa      	ldrh	r2, [r7, #14]
 8004536:	60da      	str	r2, [r3, #12]
 8004538:	e04e      	b.n	80045d8 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	76bb      	strb	r3, [r7, #26]
 800453e:	e04b      	b.n	80045d8 <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004540:	7efb      	ldrb	r3, [r7, #27]
 8004542:	2b08      	cmp	r3, #8
 8004544:	d827      	bhi.n	8004596 <UART_SetConfig+0x40e>
 8004546:	a201      	add	r2, pc, #4	; (adr r2, 800454c <UART_SetConfig+0x3c4>)
 8004548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454c:	08004571 	.word	0x08004571
 8004550:	08004579 	.word	0x08004579
 8004554:	08004581 	.word	0x08004581
 8004558:	08004597 	.word	0x08004597
 800455c:	08004587 	.word	0x08004587
 8004560:	08004597 	.word	0x08004597
 8004564:	08004597 	.word	0x08004597
 8004568:	08004597 	.word	0x08004597
 800456c:	0800458f 	.word	0x0800458f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004570:	f7fd febc 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 8004574:	6178      	str	r0, [r7, #20]
        break;
 8004576:	e013      	b.n	80045a0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004578:	f7fd fece 	bl	8002318 <HAL_RCC_GetPCLK2Freq>
 800457c:	6178      	str	r0, [r7, #20]
        break;
 800457e:	e00f      	b.n	80045a0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004580:	4b1b      	ldr	r3, [pc, #108]	; (80045f0 <UART_SetConfig+0x468>)
 8004582:	617b      	str	r3, [r7, #20]
        break;
 8004584:	e00c      	b.n	80045a0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004586:	f7fd fe1b 	bl	80021c0 <HAL_RCC_GetSysClockFreq>
 800458a:	6178      	str	r0, [r7, #20]
        break;
 800458c:	e008      	b.n	80045a0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800458e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004592:	617b      	str	r3, [r7, #20]
        break;
 8004594:	e004      	b.n	80045a0 <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	76bb      	strb	r3, [r7, #26]
        break;
 800459e:	bf00      	nop
    }

    if (pclk != 0U)
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d018      	beq.n	80045d8 <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	085a      	lsrs	r2, r3, #1
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	441a      	add	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	2b0f      	cmp	r3, #15
 80045c0:	d908      	bls.n	80045d4 <UART_SetConfig+0x44c>
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c8:	d204      	bcs.n	80045d4 <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	60da      	str	r2, [r3, #12]
 80045d2:	e001      	b.n	80045d8 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80045e4:	7ebb      	ldrb	r3, [r7, #26]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3720      	adds	r7, #32
 80045ea:	46bd      	mov	sp, r7
 80045ec:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80045f0:	00f42400 	.word	0x00f42400

080045f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00a      	beq.n	800461e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01a      	beq.n	800470a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046f2:	d10a      	bne.n	800470a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	605a      	str	r2, [r3, #4]
  }
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af02      	add	r7, sp, #8
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004746:	f7fc fce7 	bl	8001118 <HAL_GetTick>
 800474a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b08      	cmp	r3, #8
 8004758:	d10e      	bne.n	8004778 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800475a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f82a 	bl	80047c2 <UART_WaitOnFlagUntilTimeout>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e020      	b.n	80047ba <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b04      	cmp	r3, #4
 8004784:	d10e      	bne.n	80047a4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004786:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f814 	bl	80047c2 <UART_WaitOnFlagUntilTimeout>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e00a      	b.n	80047ba <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2220      	movs	r2, #32
 80047a8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2220      	movs	r2, #32
 80047ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	603b      	str	r3, [r7, #0]
 80047ce:	4613      	mov	r3, r2
 80047d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d2:	e05d      	b.n	8004890 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047da:	d059      	beq.n	8004890 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047dc:	f7fc fc9c 	bl	8001118 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d302      	bcc.n	80047f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d11b      	bne.n	800482a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004800:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0201 	bic.w	r2, r2, #1
 8004810:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2220      	movs	r2, #32
 8004816:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2220      	movs	r2, #32
 800481c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e042      	b.n	80048b0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d02b      	beq.n	8004890 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004846:	d123      	bne.n	8004890 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004850:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004860:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0201 	bic.w	r2, r2, #1
 8004870:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2220      	movs	r2, #32
 8004876:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2220      	movs	r2, #32
 800487c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2220      	movs	r2, #32
 8004882:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e00f      	b.n	80048b0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	69da      	ldr	r2, [r3, #28]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	4013      	ands	r3, r2
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	429a      	cmp	r2, r3
 800489e:	bf0c      	ite	eq
 80048a0:	2301      	moveq	r3, #1
 80048a2:	2300      	movne	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	461a      	mov	r2, r3
 80048a8:	79fb      	ldrb	r3, [r7, #7]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d092      	beq.n	80047d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <__errno>:
 80048b8:	4b01      	ldr	r3, [pc, #4]	; (80048c0 <__errno+0x8>)
 80048ba:	6818      	ldr	r0, [r3, #0]
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	2000000c 	.word	0x2000000c

080048c4 <__libc_init_array>:
 80048c4:	b570      	push	{r4, r5, r6, lr}
 80048c6:	4e0d      	ldr	r6, [pc, #52]	; (80048fc <__libc_init_array+0x38>)
 80048c8:	4c0d      	ldr	r4, [pc, #52]	; (8004900 <__libc_init_array+0x3c>)
 80048ca:	1ba4      	subs	r4, r4, r6
 80048cc:	10a4      	asrs	r4, r4, #2
 80048ce:	2500      	movs	r5, #0
 80048d0:	42a5      	cmp	r5, r4
 80048d2:	d109      	bne.n	80048e8 <__libc_init_array+0x24>
 80048d4:	4e0b      	ldr	r6, [pc, #44]	; (8004904 <__libc_init_array+0x40>)
 80048d6:	4c0c      	ldr	r4, [pc, #48]	; (8004908 <__libc_init_array+0x44>)
 80048d8:	f000 fc88 	bl	80051ec <_init>
 80048dc:	1ba4      	subs	r4, r4, r6
 80048de:	10a4      	asrs	r4, r4, #2
 80048e0:	2500      	movs	r5, #0
 80048e2:	42a5      	cmp	r5, r4
 80048e4:	d105      	bne.n	80048f2 <__libc_init_array+0x2e>
 80048e6:	bd70      	pop	{r4, r5, r6, pc}
 80048e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048ec:	4798      	blx	r3
 80048ee:	3501      	adds	r5, #1
 80048f0:	e7ee      	b.n	80048d0 <__libc_init_array+0xc>
 80048f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048f6:	4798      	blx	r3
 80048f8:	3501      	adds	r5, #1
 80048fa:	e7f2      	b.n	80048e2 <__libc_init_array+0x1e>
 80048fc:	080052d4 	.word	0x080052d4
 8004900:	080052d4 	.word	0x080052d4
 8004904:	080052d4 	.word	0x080052d4
 8004908:	080052d8 	.word	0x080052d8

0800490c <memset>:
 800490c:	4402      	add	r2, r0
 800490e:	4603      	mov	r3, r0
 8004910:	4293      	cmp	r3, r2
 8004912:	d100      	bne.n	8004916 <memset+0xa>
 8004914:	4770      	bx	lr
 8004916:	f803 1b01 	strb.w	r1, [r3], #1
 800491a:	e7f9      	b.n	8004910 <memset+0x4>

0800491c <_puts_r>:
 800491c:	b570      	push	{r4, r5, r6, lr}
 800491e:	460e      	mov	r6, r1
 8004920:	4605      	mov	r5, r0
 8004922:	b118      	cbz	r0, 800492c <_puts_r+0x10>
 8004924:	6983      	ldr	r3, [r0, #24]
 8004926:	b90b      	cbnz	r3, 800492c <_puts_r+0x10>
 8004928:	f000 fa0c 	bl	8004d44 <__sinit>
 800492c:	69ab      	ldr	r3, [r5, #24]
 800492e:	68ac      	ldr	r4, [r5, #8]
 8004930:	b913      	cbnz	r3, 8004938 <_puts_r+0x1c>
 8004932:	4628      	mov	r0, r5
 8004934:	f000 fa06 	bl	8004d44 <__sinit>
 8004938:	4b23      	ldr	r3, [pc, #140]	; (80049c8 <_puts_r+0xac>)
 800493a:	429c      	cmp	r4, r3
 800493c:	d117      	bne.n	800496e <_puts_r+0x52>
 800493e:	686c      	ldr	r4, [r5, #4]
 8004940:	89a3      	ldrh	r3, [r4, #12]
 8004942:	071b      	lsls	r3, r3, #28
 8004944:	d51d      	bpl.n	8004982 <_puts_r+0x66>
 8004946:	6923      	ldr	r3, [r4, #16]
 8004948:	b1db      	cbz	r3, 8004982 <_puts_r+0x66>
 800494a:	3e01      	subs	r6, #1
 800494c:	68a3      	ldr	r3, [r4, #8]
 800494e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004952:	3b01      	subs	r3, #1
 8004954:	60a3      	str	r3, [r4, #8]
 8004956:	b9e9      	cbnz	r1, 8004994 <_puts_r+0x78>
 8004958:	2b00      	cmp	r3, #0
 800495a:	da2e      	bge.n	80049ba <_puts_r+0x9e>
 800495c:	4622      	mov	r2, r4
 800495e:	210a      	movs	r1, #10
 8004960:	4628      	mov	r0, r5
 8004962:	f000 f83f 	bl	80049e4 <__swbuf_r>
 8004966:	3001      	adds	r0, #1
 8004968:	d011      	beq.n	800498e <_puts_r+0x72>
 800496a:	200a      	movs	r0, #10
 800496c:	e011      	b.n	8004992 <_puts_r+0x76>
 800496e:	4b17      	ldr	r3, [pc, #92]	; (80049cc <_puts_r+0xb0>)
 8004970:	429c      	cmp	r4, r3
 8004972:	d101      	bne.n	8004978 <_puts_r+0x5c>
 8004974:	68ac      	ldr	r4, [r5, #8]
 8004976:	e7e3      	b.n	8004940 <_puts_r+0x24>
 8004978:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <_puts_r+0xb4>)
 800497a:	429c      	cmp	r4, r3
 800497c:	bf08      	it	eq
 800497e:	68ec      	ldreq	r4, [r5, #12]
 8004980:	e7de      	b.n	8004940 <_puts_r+0x24>
 8004982:	4621      	mov	r1, r4
 8004984:	4628      	mov	r0, r5
 8004986:	f000 f87f 	bl	8004a88 <__swsetup_r>
 800498a:	2800      	cmp	r0, #0
 800498c:	d0dd      	beq.n	800494a <_puts_r+0x2e>
 800498e:	f04f 30ff 	mov.w	r0, #4294967295
 8004992:	bd70      	pop	{r4, r5, r6, pc}
 8004994:	2b00      	cmp	r3, #0
 8004996:	da04      	bge.n	80049a2 <_puts_r+0x86>
 8004998:	69a2      	ldr	r2, [r4, #24]
 800499a:	429a      	cmp	r2, r3
 800499c:	dc06      	bgt.n	80049ac <_puts_r+0x90>
 800499e:	290a      	cmp	r1, #10
 80049a0:	d004      	beq.n	80049ac <_puts_r+0x90>
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	6022      	str	r2, [r4, #0]
 80049a8:	7019      	strb	r1, [r3, #0]
 80049aa:	e7cf      	b.n	800494c <_puts_r+0x30>
 80049ac:	4622      	mov	r2, r4
 80049ae:	4628      	mov	r0, r5
 80049b0:	f000 f818 	bl	80049e4 <__swbuf_r>
 80049b4:	3001      	adds	r0, #1
 80049b6:	d1c9      	bne.n	800494c <_puts_r+0x30>
 80049b8:	e7e9      	b.n	800498e <_puts_r+0x72>
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	200a      	movs	r0, #10
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	6022      	str	r2, [r4, #0]
 80049c2:	7018      	strb	r0, [r3, #0]
 80049c4:	e7e5      	b.n	8004992 <_puts_r+0x76>
 80049c6:	bf00      	nop
 80049c8:	0800528c 	.word	0x0800528c
 80049cc:	080052ac 	.word	0x080052ac
 80049d0:	0800526c 	.word	0x0800526c

080049d4 <puts>:
 80049d4:	4b02      	ldr	r3, [pc, #8]	; (80049e0 <puts+0xc>)
 80049d6:	4601      	mov	r1, r0
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	f7ff bf9f 	b.w	800491c <_puts_r>
 80049de:	bf00      	nop
 80049e0:	2000000c 	.word	0x2000000c

080049e4 <__swbuf_r>:
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e6:	460e      	mov	r6, r1
 80049e8:	4614      	mov	r4, r2
 80049ea:	4605      	mov	r5, r0
 80049ec:	b118      	cbz	r0, 80049f6 <__swbuf_r+0x12>
 80049ee:	6983      	ldr	r3, [r0, #24]
 80049f0:	b90b      	cbnz	r3, 80049f6 <__swbuf_r+0x12>
 80049f2:	f000 f9a7 	bl	8004d44 <__sinit>
 80049f6:	4b21      	ldr	r3, [pc, #132]	; (8004a7c <__swbuf_r+0x98>)
 80049f8:	429c      	cmp	r4, r3
 80049fa:	d12a      	bne.n	8004a52 <__swbuf_r+0x6e>
 80049fc:	686c      	ldr	r4, [r5, #4]
 80049fe:	69a3      	ldr	r3, [r4, #24]
 8004a00:	60a3      	str	r3, [r4, #8]
 8004a02:	89a3      	ldrh	r3, [r4, #12]
 8004a04:	071a      	lsls	r2, r3, #28
 8004a06:	d52e      	bpl.n	8004a66 <__swbuf_r+0x82>
 8004a08:	6923      	ldr	r3, [r4, #16]
 8004a0a:	b363      	cbz	r3, 8004a66 <__swbuf_r+0x82>
 8004a0c:	6923      	ldr	r3, [r4, #16]
 8004a0e:	6820      	ldr	r0, [r4, #0]
 8004a10:	1ac0      	subs	r0, r0, r3
 8004a12:	6963      	ldr	r3, [r4, #20]
 8004a14:	b2f6      	uxtb	r6, r6
 8004a16:	4283      	cmp	r3, r0
 8004a18:	4637      	mov	r7, r6
 8004a1a:	dc04      	bgt.n	8004a26 <__swbuf_r+0x42>
 8004a1c:	4621      	mov	r1, r4
 8004a1e:	4628      	mov	r0, r5
 8004a20:	f000 f926 	bl	8004c70 <_fflush_r>
 8004a24:	bb28      	cbnz	r0, 8004a72 <__swbuf_r+0x8e>
 8004a26:	68a3      	ldr	r3, [r4, #8]
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	60a3      	str	r3, [r4, #8]
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	6022      	str	r2, [r4, #0]
 8004a32:	701e      	strb	r6, [r3, #0]
 8004a34:	6963      	ldr	r3, [r4, #20]
 8004a36:	3001      	adds	r0, #1
 8004a38:	4283      	cmp	r3, r0
 8004a3a:	d004      	beq.n	8004a46 <__swbuf_r+0x62>
 8004a3c:	89a3      	ldrh	r3, [r4, #12]
 8004a3e:	07db      	lsls	r3, r3, #31
 8004a40:	d519      	bpl.n	8004a76 <__swbuf_r+0x92>
 8004a42:	2e0a      	cmp	r6, #10
 8004a44:	d117      	bne.n	8004a76 <__swbuf_r+0x92>
 8004a46:	4621      	mov	r1, r4
 8004a48:	4628      	mov	r0, r5
 8004a4a:	f000 f911 	bl	8004c70 <_fflush_r>
 8004a4e:	b190      	cbz	r0, 8004a76 <__swbuf_r+0x92>
 8004a50:	e00f      	b.n	8004a72 <__swbuf_r+0x8e>
 8004a52:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <__swbuf_r+0x9c>)
 8004a54:	429c      	cmp	r4, r3
 8004a56:	d101      	bne.n	8004a5c <__swbuf_r+0x78>
 8004a58:	68ac      	ldr	r4, [r5, #8]
 8004a5a:	e7d0      	b.n	80049fe <__swbuf_r+0x1a>
 8004a5c:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <__swbuf_r+0xa0>)
 8004a5e:	429c      	cmp	r4, r3
 8004a60:	bf08      	it	eq
 8004a62:	68ec      	ldreq	r4, [r5, #12]
 8004a64:	e7cb      	b.n	80049fe <__swbuf_r+0x1a>
 8004a66:	4621      	mov	r1, r4
 8004a68:	4628      	mov	r0, r5
 8004a6a:	f000 f80d 	bl	8004a88 <__swsetup_r>
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	d0cc      	beq.n	8004a0c <__swbuf_r+0x28>
 8004a72:	f04f 37ff 	mov.w	r7, #4294967295
 8004a76:	4638      	mov	r0, r7
 8004a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	0800528c 	.word	0x0800528c
 8004a80:	080052ac 	.word	0x080052ac
 8004a84:	0800526c 	.word	0x0800526c

08004a88 <__swsetup_r>:
 8004a88:	4b32      	ldr	r3, [pc, #200]	; (8004b54 <__swsetup_r+0xcc>)
 8004a8a:	b570      	push	{r4, r5, r6, lr}
 8004a8c:	681d      	ldr	r5, [r3, #0]
 8004a8e:	4606      	mov	r6, r0
 8004a90:	460c      	mov	r4, r1
 8004a92:	b125      	cbz	r5, 8004a9e <__swsetup_r+0x16>
 8004a94:	69ab      	ldr	r3, [r5, #24]
 8004a96:	b913      	cbnz	r3, 8004a9e <__swsetup_r+0x16>
 8004a98:	4628      	mov	r0, r5
 8004a9a:	f000 f953 	bl	8004d44 <__sinit>
 8004a9e:	4b2e      	ldr	r3, [pc, #184]	; (8004b58 <__swsetup_r+0xd0>)
 8004aa0:	429c      	cmp	r4, r3
 8004aa2:	d10f      	bne.n	8004ac4 <__swsetup_r+0x3c>
 8004aa4:	686c      	ldr	r4, [r5, #4]
 8004aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	0715      	lsls	r5, r2, #28
 8004aae:	d42c      	bmi.n	8004b0a <__swsetup_r+0x82>
 8004ab0:	06d0      	lsls	r0, r2, #27
 8004ab2:	d411      	bmi.n	8004ad8 <__swsetup_r+0x50>
 8004ab4:	2209      	movs	r2, #9
 8004ab6:	6032      	str	r2, [r6, #0]
 8004ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004abc:	81a3      	strh	r3, [r4, #12]
 8004abe:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac2:	e03e      	b.n	8004b42 <__swsetup_r+0xba>
 8004ac4:	4b25      	ldr	r3, [pc, #148]	; (8004b5c <__swsetup_r+0xd4>)
 8004ac6:	429c      	cmp	r4, r3
 8004ac8:	d101      	bne.n	8004ace <__swsetup_r+0x46>
 8004aca:	68ac      	ldr	r4, [r5, #8]
 8004acc:	e7eb      	b.n	8004aa6 <__swsetup_r+0x1e>
 8004ace:	4b24      	ldr	r3, [pc, #144]	; (8004b60 <__swsetup_r+0xd8>)
 8004ad0:	429c      	cmp	r4, r3
 8004ad2:	bf08      	it	eq
 8004ad4:	68ec      	ldreq	r4, [r5, #12]
 8004ad6:	e7e6      	b.n	8004aa6 <__swsetup_r+0x1e>
 8004ad8:	0751      	lsls	r1, r2, #29
 8004ada:	d512      	bpl.n	8004b02 <__swsetup_r+0x7a>
 8004adc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ade:	b141      	cbz	r1, 8004af2 <__swsetup_r+0x6a>
 8004ae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ae4:	4299      	cmp	r1, r3
 8004ae6:	d002      	beq.n	8004aee <__swsetup_r+0x66>
 8004ae8:	4630      	mov	r0, r6
 8004aea:	f000 fa19 	bl	8004f20 <_free_r>
 8004aee:	2300      	movs	r3, #0
 8004af0:	6363      	str	r3, [r4, #52]	; 0x34
 8004af2:	89a3      	ldrh	r3, [r4, #12]
 8004af4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004af8:	81a3      	strh	r3, [r4, #12]
 8004afa:	2300      	movs	r3, #0
 8004afc:	6063      	str	r3, [r4, #4]
 8004afe:	6923      	ldr	r3, [r4, #16]
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	89a3      	ldrh	r3, [r4, #12]
 8004b04:	f043 0308 	orr.w	r3, r3, #8
 8004b08:	81a3      	strh	r3, [r4, #12]
 8004b0a:	6923      	ldr	r3, [r4, #16]
 8004b0c:	b94b      	cbnz	r3, 8004b22 <__swsetup_r+0x9a>
 8004b0e:	89a3      	ldrh	r3, [r4, #12]
 8004b10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b18:	d003      	beq.n	8004b22 <__swsetup_r+0x9a>
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	4630      	mov	r0, r6
 8004b1e:	f000 f9bf 	bl	8004ea0 <__smakebuf_r>
 8004b22:	89a2      	ldrh	r2, [r4, #12]
 8004b24:	f012 0301 	ands.w	r3, r2, #1
 8004b28:	d00c      	beq.n	8004b44 <__swsetup_r+0xbc>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60a3      	str	r3, [r4, #8]
 8004b2e:	6963      	ldr	r3, [r4, #20]
 8004b30:	425b      	negs	r3, r3
 8004b32:	61a3      	str	r3, [r4, #24]
 8004b34:	6923      	ldr	r3, [r4, #16]
 8004b36:	b953      	cbnz	r3, 8004b4e <__swsetup_r+0xc6>
 8004b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b3c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004b40:	d1ba      	bne.n	8004ab8 <__swsetup_r+0x30>
 8004b42:	bd70      	pop	{r4, r5, r6, pc}
 8004b44:	0792      	lsls	r2, r2, #30
 8004b46:	bf58      	it	pl
 8004b48:	6963      	ldrpl	r3, [r4, #20]
 8004b4a:	60a3      	str	r3, [r4, #8]
 8004b4c:	e7f2      	b.n	8004b34 <__swsetup_r+0xac>
 8004b4e:	2000      	movs	r0, #0
 8004b50:	e7f7      	b.n	8004b42 <__swsetup_r+0xba>
 8004b52:	bf00      	nop
 8004b54:	2000000c 	.word	0x2000000c
 8004b58:	0800528c 	.word	0x0800528c
 8004b5c:	080052ac 	.word	0x080052ac
 8004b60:	0800526c 	.word	0x0800526c

08004b64 <__sflush_r>:
 8004b64:	898a      	ldrh	r2, [r1, #12]
 8004b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b6a:	4605      	mov	r5, r0
 8004b6c:	0710      	lsls	r0, r2, #28
 8004b6e:	460c      	mov	r4, r1
 8004b70:	d458      	bmi.n	8004c24 <__sflush_r+0xc0>
 8004b72:	684b      	ldr	r3, [r1, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	dc05      	bgt.n	8004b84 <__sflush_r+0x20>
 8004b78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	dc02      	bgt.n	8004b84 <__sflush_r+0x20>
 8004b7e:	2000      	movs	r0, #0
 8004b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b86:	2e00      	cmp	r6, #0
 8004b88:	d0f9      	beq.n	8004b7e <__sflush_r+0x1a>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b90:	682f      	ldr	r7, [r5, #0]
 8004b92:	6a21      	ldr	r1, [r4, #32]
 8004b94:	602b      	str	r3, [r5, #0]
 8004b96:	d032      	beq.n	8004bfe <__sflush_r+0x9a>
 8004b98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b9a:	89a3      	ldrh	r3, [r4, #12]
 8004b9c:	075a      	lsls	r2, r3, #29
 8004b9e:	d505      	bpl.n	8004bac <__sflush_r+0x48>
 8004ba0:	6863      	ldr	r3, [r4, #4]
 8004ba2:	1ac0      	subs	r0, r0, r3
 8004ba4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ba6:	b10b      	cbz	r3, 8004bac <__sflush_r+0x48>
 8004ba8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004baa:	1ac0      	subs	r0, r0, r3
 8004bac:	2300      	movs	r3, #0
 8004bae:	4602      	mov	r2, r0
 8004bb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bb2:	6a21      	ldr	r1, [r4, #32]
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	47b0      	blx	r6
 8004bb8:	1c43      	adds	r3, r0, #1
 8004bba:	89a3      	ldrh	r3, [r4, #12]
 8004bbc:	d106      	bne.n	8004bcc <__sflush_r+0x68>
 8004bbe:	6829      	ldr	r1, [r5, #0]
 8004bc0:	291d      	cmp	r1, #29
 8004bc2:	d848      	bhi.n	8004c56 <__sflush_r+0xf2>
 8004bc4:	4a29      	ldr	r2, [pc, #164]	; (8004c6c <__sflush_r+0x108>)
 8004bc6:	40ca      	lsrs	r2, r1
 8004bc8:	07d6      	lsls	r6, r2, #31
 8004bca:	d544      	bpl.n	8004c56 <__sflush_r+0xf2>
 8004bcc:	2200      	movs	r2, #0
 8004bce:	6062      	str	r2, [r4, #4]
 8004bd0:	04d9      	lsls	r1, r3, #19
 8004bd2:	6922      	ldr	r2, [r4, #16]
 8004bd4:	6022      	str	r2, [r4, #0]
 8004bd6:	d504      	bpl.n	8004be2 <__sflush_r+0x7e>
 8004bd8:	1c42      	adds	r2, r0, #1
 8004bda:	d101      	bne.n	8004be0 <__sflush_r+0x7c>
 8004bdc:	682b      	ldr	r3, [r5, #0]
 8004bde:	b903      	cbnz	r3, 8004be2 <__sflush_r+0x7e>
 8004be0:	6560      	str	r0, [r4, #84]	; 0x54
 8004be2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004be4:	602f      	str	r7, [r5, #0]
 8004be6:	2900      	cmp	r1, #0
 8004be8:	d0c9      	beq.n	8004b7e <__sflush_r+0x1a>
 8004bea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bee:	4299      	cmp	r1, r3
 8004bf0:	d002      	beq.n	8004bf8 <__sflush_r+0x94>
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	f000 f994 	bl	8004f20 <_free_r>
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	6360      	str	r0, [r4, #52]	; 0x34
 8004bfc:	e7c0      	b.n	8004b80 <__sflush_r+0x1c>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	4628      	mov	r0, r5
 8004c02:	47b0      	blx	r6
 8004c04:	1c41      	adds	r1, r0, #1
 8004c06:	d1c8      	bne.n	8004b9a <__sflush_r+0x36>
 8004c08:	682b      	ldr	r3, [r5, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0c5      	beq.n	8004b9a <__sflush_r+0x36>
 8004c0e:	2b1d      	cmp	r3, #29
 8004c10:	d001      	beq.n	8004c16 <__sflush_r+0xb2>
 8004c12:	2b16      	cmp	r3, #22
 8004c14:	d101      	bne.n	8004c1a <__sflush_r+0xb6>
 8004c16:	602f      	str	r7, [r5, #0]
 8004c18:	e7b1      	b.n	8004b7e <__sflush_r+0x1a>
 8004c1a:	89a3      	ldrh	r3, [r4, #12]
 8004c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c20:	81a3      	strh	r3, [r4, #12]
 8004c22:	e7ad      	b.n	8004b80 <__sflush_r+0x1c>
 8004c24:	690f      	ldr	r7, [r1, #16]
 8004c26:	2f00      	cmp	r7, #0
 8004c28:	d0a9      	beq.n	8004b7e <__sflush_r+0x1a>
 8004c2a:	0793      	lsls	r3, r2, #30
 8004c2c:	680e      	ldr	r6, [r1, #0]
 8004c2e:	bf08      	it	eq
 8004c30:	694b      	ldreq	r3, [r1, #20]
 8004c32:	600f      	str	r7, [r1, #0]
 8004c34:	bf18      	it	ne
 8004c36:	2300      	movne	r3, #0
 8004c38:	eba6 0807 	sub.w	r8, r6, r7
 8004c3c:	608b      	str	r3, [r1, #8]
 8004c3e:	f1b8 0f00 	cmp.w	r8, #0
 8004c42:	dd9c      	ble.n	8004b7e <__sflush_r+0x1a>
 8004c44:	4643      	mov	r3, r8
 8004c46:	463a      	mov	r2, r7
 8004c48:	6a21      	ldr	r1, [r4, #32]
 8004c4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	47b0      	blx	r6
 8004c50:	2800      	cmp	r0, #0
 8004c52:	dc06      	bgt.n	8004c62 <__sflush_r+0xfe>
 8004c54:	89a3      	ldrh	r3, [r4, #12]
 8004c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c5a:	81a3      	strh	r3, [r4, #12]
 8004c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c60:	e78e      	b.n	8004b80 <__sflush_r+0x1c>
 8004c62:	4407      	add	r7, r0
 8004c64:	eba8 0800 	sub.w	r8, r8, r0
 8004c68:	e7e9      	b.n	8004c3e <__sflush_r+0xda>
 8004c6a:	bf00      	nop
 8004c6c:	20400001 	.word	0x20400001

08004c70 <_fflush_r>:
 8004c70:	b538      	push	{r3, r4, r5, lr}
 8004c72:	690b      	ldr	r3, [r1, #16]
 8004c74:	4605      	mov	r5, r0
 8004c76:	460c      	mov	r4, r1
 8004c78:	b1db      	cbz	r3, 8004cb2 <_fflush_r+0x42>
 8004c7a:	b118      	cbz	r0, 8004c84 <_fflush_r+0x14>
 8004c7c:	6983      	ldr	r3, [r0, #24]
 8004c7e:	b90b      	cbnz	r3, 8004c84 <_fflush_r+0x14>
 8004c80:	f000 f860 	bl	8004d44 <__sinit>
 8004c84:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <_fflush_r+0x48>)
 8004c86:	429c      	cmp	r4, r3
 8004c88:	d109      	bne.n	8004c9e <_fflush_r+0x2e>
 8004c8a:	686c      	ldr	r4, [r5, #4]
 8004c8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c90:	b17b      	cbz	r3, 8004cb2 <_fflush_r+0x42>
 8004c92:	4621      	mov	r1, r4
 8004c94:	4628      	mov	r0, r5
 8004c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c9a:	f7ff bf63 	b.w	8004b64 <__sflush_r>
 8004c9e:	4b07      	ldr	r3, [pc, #28]	; (8004cbc <_fflush_r+0x4c>)
 8004ca0:	429c      	cmp	r4, r3
 8004ca2:	d101      	bne.n	8004ca8 <_fflush_r+0x38>
 8004ca4:	68ac      	ldr	r4, [r5, #8]
 8004ca6:	e7f1      	b.n	8004c8c <_fflush_r+0x1c>
 8004ca8:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <_fflush_r+0x50>)
 8004caa:	429c      	cmp	r4, r3
 8004cac:	bf08      	it	eq
 8004cae:	68ec      	ldreq	r4, [r5, #12]
 8004cb0:	e7ec      	b.n	8004c8c <_fflush_r+0x1c>
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	bd38      	pop	{r3, r4, r5, pc}
 8004cb6:	bf00      	nop
 8004cb8:	0800528c 	.word	0x0800528c
 8004cbc:	080052ac 	.word	0x080052ac
 8004cc0:	0800526c 	.word	0x0800526c

08004cc4 <std>:
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	b510      	push	{r4, lr}
 8004cc8:	4604      	mov	r4, r0
 8004cca:	e9c0 3300 	strd	r3, r3, [r0]
 8004cce:	6083      	str	r3, [r0, #8]
 8004cd0:	8181      	strh	r1, [r0, #12]
 8004cd2:	6643      	str	r3, [r0, #100]	; 0x64
 8004cd4:	81c2      	strh	r2, [r0, #14]
 8004cd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cda:	6183      	str	r3, [r0, #24]
 8004cdc:	4619      	mov	r1, r3
 8004cde:	2208      	movs	r2, #8
 8004ce0:	305c      	adds	r0, #92	; 0x5c
 8004ce2:	f7ff fe13 	bl	800490c <memset>
 8004ce6:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <std+0x38>)
 8004ce8:	6263      	str	r3, [r4, #36]	; 0x24
 8004cea:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <std+0x3c>)
 8004cec:	62a3      	str	r3, [r4, #40]	; 0x28
 8004cee:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <std+0x40>)
 8004cf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004cf2:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <std+0x44>)
 8004cf4:	6224      	str	r4, [r4, #32]
 8004cf6:	6323      	str	r3, [r4, #48]	; 0x30
 8004cf8:	bd10      	pop	{r4, pc}
 8004cfa:	bf00      	nop
 8004cfc:	08005091 	.word	0x08005091
 8004d00:	080050b3 	.word	0x080050b3
 8004d04:	080050eb 	.word	0x080050eb
 8004d08:	0800510f 	.word	0x0800510f

08004d0c <_cleanup_r>:
 8004d0c:	4901      	ldr	r1, [pc, #4]	; (8004d14 <_cleanup_r+0x8>)
 8004d0e:	f000 b885 	b.w	8004e1c <_fwalk_reent>
 8004d12:	bf00      	nop
 8004d14:	08004c71 	.word	0x08004c71

08004d18 <__sfmoreglue>:
 8004d18:	b570      	push	{r4, r5, r6, lr}
 8004d1a:	1e4a      	subs	r2, r1, #1
 8004d1c:	2568      	movs	r5, #104	; 0x68
 8004d1e:	4355      	muls	r5, r2
 8004d20:	460e      	mov	r6, r1
 8004d22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d26:	f000 f949 	bl	8004fbc <_malloc_r>
 8004d2a:	4604      	mov	r4, r0
 8004d2c:	b140      	cbz	r0, 8004d40 <__sfmoreglue+0x28>
 8004d2e:	2100      	movs	r1, #0
 8004d30:	e9c0 1600 	strd	r1, r6, [r0]
 8004d34:	300c      	adds	r0, #12
 8004d36:	60a0      	str	r0, [r4, #8]
 8004d38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d3c:	f7ff fde6 	bl	800490c <memset>
 8004d40:	4620      	mov	r0, r4
 8004d42:	bd70      	pop	{r4, r5, r6, pc}

08004d44 <__sinit>:
 8004d44:	6983      	ldr	r3, [r0, #24]
 8004d46:	b510      	push	{r4, lr}
 8004d48:	4604      	mov	r4, r0
 8004d4a:	bb33      	cbnz	r3, 8004d9a <__sinit+0x56>
 8004d4c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004d50:	6503      	str	r3, [r0, #80]	; 0x50
 8004d52:	4b12      	ldr	r3, [pc, #72]	; (8004d9c <__sinit+0x58>)
 8004d54:	4a12      	ldr	r2, [pc, #72]	; (8004da0 <__sinit+0x5c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6282      	str	r2, [r0, #40]	; 0x28
 8004d5a:	4298      	cmp	r0, r3
 8004d5c:	bf04      	itt	eq
 8004d5e:	2301      	moveq	r3, #1
 8004d60:	6183      	streq	r3, [r0, #24]
 8004d62:	f000 f81f 	bl	8004da4 <__sfp>
 8004d66:	6060      	str	r0, [r4, #4]
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f000 f81b 	bl	8004da4 <__sfp>
 8004d6e:	60a0      	str	r0, [r4, #8]
 8004d70:	4620      	mov	r0, r4
 8004d72:	f000 f817 	bl	8004da4 <__sfp>
 8004d76:	2200      	movs	r2, #0
 8004d78:	60e0      	str	r0, [r4, #12]
 8004d7a:	2104      	movs	r1, #4
 8004d7c:	6860      	ldr	r0, [r4, #4]
 8004d7e:	f7ff ffa1 	bl	8004cc4 <std>
 8004d82:	2201      	movs	r2, #1
 8004d84:	2109      	movs	r1, #9
 8004d86:	68a0      	ldr	r0, [r4, #8]
 8004d88:	f7ff ff9c 	bl	8004cc4 <std>
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	2112      	movs	r1, #18
 8004d90:	68e0      	ldr	r0, [r4, #12]
 8004d92:	f7ff ff97 	bl	8004cc4 <std>
 8004d96:	2301      	movs	r3, #1
 8004d98:	61a3      	str	r3, [r4, #24]
 8004d9a:	bd10      	pop	{r4, pc}
 8004d9c:	08005268 	.word	0x08005268
 8004da0:	08004d0d 	.word	0x08004d0d

08004da4 <__sfp>:
 8004da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da6:	4b1b      	ldr	r3, [pc, #108]	; (8004e14 <__sfp+0x70>)
 8004da8:	681e      	ldr	r6, [r3, #0]
 8004daa:	69b3      	ldr	r3, [r6, #24]
 8004dac:	4607      	mov	r7, r0
 8004dae:	b913      	cbnz	r3, 8004db6 <__sfp+0x12>
 8004db0:	4630      	mov	r0, r6
 8004db2:	f7ff ffc7 	bl	8004d44 <__sinit>
 8004db6:	3648      	adds	r6, #72	; 0x48
 8004db8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	d503      	bpl.n	8004dc8 <__sfp+0x24>
 8004dc0:	6833      	ldr	r3, [r6, #0]
 8004dc2:	b133      	cbz	r3, 8004dd2 <__sfp+0x2e>
 8004dc4:	6836      	ldr	r6, [r6, #0]
 8004dc6:	e7f7      	b.n	8004db8 <__sfp+0x14>
 8004dc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004dcc:	b16d      	cbz	r5, 8004dea <__sfp+0x46>
 8004dce:	3468      	adds	r4, #104	; 0x68
 8004dd0:	e7f4      	b.n	8004dbc <__sfp+0x18>
 8004dd2:	2104      	movs	r1, #4
 8004dd4:	4638      	mov	r0, r7
 8004dd6:	f7ff ff9f 	bl	8004d18 <__sfmoreglue>
 8004dda:	6030      	str	r0, [r6, #0]
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d1f1      	bne.n	8004dc4 <__sfp+0x20>
 8004de0:	230c      	movs	r3, #12
 8004de2:	603b      	str	r3, [r7, #0]
 8004de4:	4604      	mov	r4, r0
 8004de6:	4620      	mov	r0, r4
 8004de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dea:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <__sfp+0x74>)
 8004dec:	6665      	str	r5, [r4, #100]	; 0x64
 8004dee:	e9c4 5500 	strd	r5, r5, [r4]
 8004df2:	60a5      	str	r5, [r4, #8]
 8004df4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004df8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004dfc:	2208      	movs	r2, #8
 8004dfe:	4629      	mov	r1, r5
 8004e00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e04:	f7ff fd82 	bl	800490c <memset>
 8004e08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e10:	e7e9      	b.n	8004de6 <__sfp+0x42>
 8004e12:	bf00      	nop
 8004e14:	08005268 	.word	0x08005268
 8004e18:	ffff0001 	.word	0xffff0001

08004e1c <_fwalk_reent>:
 8004e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e20:	4680      	mov	r8, r0
 8004e22:	4689      	mov	r9, r1
 8004e24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e28:	2600      	movs	r6, #0
 8004e2a:	b914      	cbnz	r4, 8004e32 <_fwalk_reent+0x16>
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e32:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004e36:	3f01      	subs	r7, #1
 8004e38:	d501      	bpl.n	8004e3e <_fwalk_reent+0x22>
 8004e3a:	6824      	ldr	r4, [r4, #0]
 8004e3c:	e7f5      	b.n	8004e2a <_fwalk_reent+0xe>
 8004e3e:	89ab      	ldrh	r3, [r5, #12]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d907      	bls.n	8004e54 <_fwalk_reent+0x38>
 8004e44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	d003      	beq.n	8004e54 <_fwalk_reent+0x38>
 8004e4c:	4629      	mov	r1, r5
 8004e4e:	4640      	mov	r0, r8
 8004e50:	47c8      	blx	r9
 8004e52:	4306      	orrs	r6, r0
 8004e54:	3568      	adds	r5, #104	; 0x68
 8004e56:	e7ee      	b.n	8004e36 <_fwalk_reent+0x1a>

08004e58 <__swhatbuf_r>:
 8004e58:	b570      	push	{r4, r5, r6, lr}
 8004e5a:	460e      	mov	r6, r1
 8004e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e60:	2900      	cmp	r1, #0
 8004e62:	b096      	sub	sp, #88	; 0x58
 8004e64:	4614      	mov	r4, r2
 8004e66:	461d      	mov	r5, r3
 8004e68:	da07      	bge.n	8004e7a <__swhatbuf_r+0x22>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	602b      	str	r3, [r5, #0]
 8004e6e:	89b3      	ldrh	r3, [r6, #12]
 8004e70:	061a      	lsls	r2, r3, #24
 8004e72:	d410      	bmi.n	8004e96 <__swhatbuf_r+0x3e>
 8004e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e78:	e00e      	b.n	8004e98 <__swhatbuf_r+0x40>
 8004e7a:	466a      	mov	r2, sp
 8004e7c:	f000 f96e 	bl	800515c <_fstat_r>
 8004e80:	2800      	cmp	r0, #0
 8004e82:	dbf2      	blt.n	8004e6a <__swhatbuf_r+0x12>
 8004e84:	9a01      	ldr	r2, [sp, #4]
 8004e86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004e8e:	425a      	negs	r2, r3
 8004e90:	415a      	adcs	r2, r3
 8004e92:	602a      	str	r2, [r5, #0]
 8004e94:	e7ee      	b.n	8004e74 <__swhatbuf_r+0x1c>
 8004e96:	2340      	movs	r3, #64	; 0x40
 8004e98:	2000      	movs	r0, #0
 8004e9a:	6023      	str	r3, [r4, #0]
 8004e9c:	b016      	add	sp, #88	; 0x58
 8004e9e:	bd70      	pop	{r4, r5, r6, pc}

08004ea0 <__smakebuf_r>:
 8004ea0:	898b      	ldrh	r3, [r1, #12]
 8004ea2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ea4:	079d      	lsls	r5, r3, #30
 8004ea6:	4606      	mov	r6, r0
 8004ea8:	460c      	mov	r4, r1
 8004eaa:	d507      	bpl.n	8004ebc <__smakebuf_r+0x1c>
 8004eac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	6123      	str	r3, [r4, #16]
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	6163      	str	r3, [r4, #20]
 8004eb8:	b002      	add	sp, #8
 8004eba:	bd70      	pop	{r4, r5, r6, pc}
 8004ebc:	ab01      	add	r3, sp, #4
 8004ebe:	466a      	mov	r2, sp
 8004ec0:	f7ff ffca 	bl	8004e58 <__swhatbuf_r>
 8004ec4:	9900      	ldr	r1, [sp, #0]
 8004ec6:	4605      	mov	r5, r0
 8004ec8:	4630      	mov	r0, r6
 8004eca:	f000 f877 	bl	8004fbc <_malloc_r>
 8004ece:	b948      	cbnz	r0, 8004ee4 <__smakebuf_r+0x44>
 8004ed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ed4:	059a      	lsls	r2, r3, #22
 8004ed6:	d4ef      	bmi.n	8004eb8 <__smakebuf_r+0x18>
 8004ed8:	f023 0303 	bic.w	r3, r3, #3
 8004edc:	f043 0302 	orr.w	r3, r3, #2
 8004ee0:	81a3      	strh	r3, [r4, #12]
 8004ee2:	e7e3      	b.n	8004eac <__smakebuf_r+0xc>
 8004ee4:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <__smakebuf_r+0x7c>)
 8004ee6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ee8:	89a3      	ldrh	r3, [r4, #12]
 8004eea:	6020      	str	r0, [r4, #0]
 8004eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ef0:	81a3      	strh	r3, [r4, #12]
 8004ef2:	9b00      	ldr	r3, [sp, #0]
 8004ef4:	6163      	str	r3, [r4, #20]
 8004ef6:	9b01      	ldr	r3, [sp, #4]
 8004ef8:	6120      	str	r0, [r4, #16]
 8004efa:	b15b      	cbz	r3, 8004f14 <__smakebuf_r+0x74>
 8004efc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f00:	4630      	mov	r0, r6
 8004f02:	f000 f93d 	bl	8005180 <_isatty_r>
 8004f06:	b128      	cbz	r0, 8004f14 <__smakebuf_r+0x74>
 8004f08:	89a3      	ldrh	r3, [r4, #12]
 8004f0a:	f023 0303 	bic.w	r3, r3, #3
 8004f0e:	f043 0301 	orr.w	r3, r3, #1
 8004f12:	81a3      	strh	r3, [r4, #12]
 8004f14:	89a3      	ldrh	r3, [r4, #12]
 8004f16:	431d      	orrs	r5, r3
 8004f18:	81a5      	strh	r5, [r4, #12]
 8004f1a:	e7cd      	b.n	8004eb8 <__smakebuf_r+0x18>
 8004f1c:	08004d0d 	.word	0x08004d0d

08004f20 <_free_r>:
 8004f20:	b538      	push	{r3, r4, r5, lr}
 8004f22:	4605      	mov	r5, r0
 8004f24:	2900      	cmp	r1, #0
 8004f26:	d045      	beq.n	8004fb4 <_free_r+0x94>
 8004f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f2c:	1f0c      	subs	r4, r1, #4
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	bfb8      	it	lt
 8004f32:	18e4      	addlt	r4, r4, r3
 8004f34:	f000 f946 	bl	80051c4 <__malloc_lock>
 8004f38:	4a1f      	ldr	r2, [pc, #124]	; (8004fb8 <_free_r+0x98>)
 8004f3a:	6813      	ldr	r3, [r2, #0]
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	b933      	cbnz	r3, 8004f4e <_free_r+0x2e>
 8004f40:	6063      	str	r3, [r4, #4]
 8004f42:	6014      	str	r4, [r2, #0]
 8004f44:	4628      	mov	r0, r5
 8004f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f4a:	f000 b93c 	b.w	80051c6 <__malloc_unlock>
 8004f4e:	42a3      	cmp	r3, r4
 8004f50:	d90c      	bls.n	8004f6c <_free_r+0x4c>
 8004f52:	6821      	ldr	r1, [r4, #0]
 8004f54:	1862      	adds	r2, r4, r1
 8004f56:	4293      	cmp	r3, r2
 8004f58:	bf04      	itt	eq
 8004f5a:	681a      	ldreq	r2, [r3, #0]
 8004f5c:	685b      	ldreq	r3, [r3, #4]
 8004f5e:	6063      	str	r3, [r4, #4]
 8004f60:	bf04      	itt	eq
 8004f62:	1852      	addeq	r2, r2, r1
 8004f64:	6022      	streq	r2, [r4, #0]
 8004f66:	6004      	str	r4, [r0, #0]
 8004f68:	e7ec      	b.n	8004f44 <_free_r+0x24>
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	b10a      	cbz	r2, 8004f74 <_free_r+0x54>
 8004f70:	42a2      	cmp	r2, r4
 8004f72:	d9fa      	bls.n	8004f6a <_free_r+0x4a>
 8004f74:	6819      	ldr	r1, [r3, #0]
 8004f76:	1858      	adds	r0, r3, r1
 8004f78:	42a0      	cmp	r0, r4
 8004f7a:	d10b      	bne.n	8004f94 <_free_r+0x74>
 8004f7c:	6820      	ldr	r0, [r4, #0]
 8004f7e:	4401      	add	r1, r0
 8004f80:	1858      	adds	r0, r3, r1
 8004f82:	4282      	cmp	r2, r0
 8004f84:	6019      	str	r1, [r3, #0]
 8004f86:	d1dd      	bne.n	8004f44 <_free_r+0x24>
 8004f88:	6810      	ldr	r0, [r2, #0]
 8004f8a:	6852      	ldr	r2, [r2, #4]
 8004f8c:	605a      	str	r2, [r3, #4]
 8004f8e:	4401      	add	r1, r0
 8004f90:	6019      	str	r1, [r3, #0]
 8004f92:	e7d7      	b.n	8004f44 <_free_r+0x24>
 8004f94:	d902      	bls.n	8004f9c <_free_r+0x7c>
 8004f96:	230c      	movs	r3, #12
 8004f98:	602b      	str	r3, [r5, #0]
 8004f9a:	e7d3      	b.n	8004f44 <_free_r+0x24>
 8004f9c:	6820      	ldr	r0, [r4, #0]
 8004f9e:	1821      	adds	r1, r4, r0
 8004fa0:	428a      	cmp	r2, r1
 8004fa2:	bf04      	itt	eq
 8004fa4:	6811      	ldreq	r1, [r2, #0]
 8004fa6:	6852      	ldreq	r2, [r2, #4]
 8004fa8:	6062      	str	r2, [r4, #4]
 8004faa:	bf04      	itt	eq
 8004fac:	1809      	addeq	r1, r1, r0
 8004fae:	6021      	streq	r1, [r4, #0]
 8004fb0:	605c      	str	r4, [r3, #4]
 8004fb2:	e7c7      	b.n	8004f44 <_free_r+0x24>
 8004fb4:	bd38      	pop	{r3, r4, r5, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000094 	.word	0x20000094

08004fbc <_malloc_r>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	1ccd      	adds	r5, r1, #3
 8004fc0:	f025 0503 	bic.w	r5, r5, #3
 8004fc4:	3508      	adds	r5, #8
 8004fc6:	2d0c      	cmp	r5, #12
 8004fc8:	bf38      	it	cc
 8004fca:	250c      	movcc	r5, #12
 8004fcc:	2d00      	cmp	r5, #0
 8004fce:	4606      	mov	r6, r0
 8004fd0:	db01      	blt.n	8004fd6 <_malloc_r+0x1a>
 8004fd2:	42a9      	cmp	r1, r5
 8004fd4:	d903      	bls.n	8004fde <_malloc_r+0x22>
 8004fd6:	230c      	movs	r3, #12
 8004fd8:	6033      	str	r3, [r6, #0]
 8004fda:	2000      	movs	r0, #0
 8004fdc:	bd70      	pop	{r4, r5, r6, pc}
 8004fde:	f000 f8f1 	bl	80051c4 <__malloc_lock>
 8004fe2:	4a21      	ldr	r2, [pc, #132]	; (8005068 <_malloc_r+0xac>)
 8004fe4:	6814      	ldr	r4, [r2, #0]
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	b991      	cbnz	r1, 8005010 <_malloc_r+0x54>
 8004fea:	4c20      	ldr	r4, [pc, #128]	; (800506c <_malloc_r+0xb0>)
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	b91b      	cbnz	r3, 8004ff8 <_malloc_r+0x3c>
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	f000 f83d 	bl	8005070 <_sbrk_r>
 8004ff6:	6020      	str	r0, [r4, #0]
 8004ff8:	4629      	mov	r1, r5
 8004ffa:	4630      	mov	r0, r6
 8004ffc:	f000 f838 	bl	8005070 <_sbrk_r>
 8005000:	1c43      	adds	r3, r0, #1
 8005002:	d124      	bne.n	800504e <_malloc_r+0x92>
 8005004:	230c      	movs	r3, #12
 8005006:	6033      	str	r3, [r6, #0]
 8005008:	4630      	mov	r0, r6
 800500a:	f000 f8dc 	bl	80051c6 <__malloc_unlock>
 800500e:	e7e4      	b.n	8004fda <_malloc_r+0x1e>
 8005010:	680b      	ldr	r3, [r1, #0]
 8005012:	1b5b      	subs	r3, r3, r5
 8005014:	d418      	bmi.n	8005048 <_malloc_r+0x8c>
 8005016:	2b0b      	cmp	r3, #11
 8005018:	d90f      	bls.n	800503a <_malloc_r+0x7e>
 800501a:	600b      	str	r3, [r1, #0]
 800501c:	50cd      	str	r5, [r1, r3]
 800501e:	18cc      	adds	r4, r1, r3
 8005020:	4630      	mov	r0, r6
 8005022:	f000 f8d0 	bl	80051c6 <__malloc_unlock>
 8005026:	f104 000b 	add.w	r0, r4, #11
 800502a:	1d23      	adds	r3, r4, #4
 800502c:	f020 0007 	bic.w	r0, r0, #7
 8005030:	1ac3      	subs	r3, r0, r3
 8005032:	d0d3      	beq.n	8004fdc <_malloc_r+0x20>
 8005034:	425a      	negs	r2, r3
 8005036:	50e2      	str	r2, [r4, r3]
 8005038:	e7d0      	b.n	8004fdc <_malloc_r+0x20>
 800503a:	428c      	cmp	r4, r1
 800503c:	684b      	ldr	r3, [r1, #4]
 800503e:	bf16      	itet	ne
 8005040:	6063      	strne	r3, [r4, #4]
 8005042:	6013      	streq	r3, [r2, #0]
 8005044:	460c      	movne	r4, r1
 8005046:	e7eb      	b.n	8005020 <_malloc_r+0x64>
 8005048:	460c      	mov	r4, r1
 800504a:	6849      	ldr	r1, [r1, #4]
 800504c:	e7cc      	b.n	8004fe8 <_malloc_r+0x2c>
 800504e:	1cc4      	adds	r4, r0, #3
 8005050:	f024 0403 	bic.w	r4, r4, #3
 8005054:	42a0      	cmp	r0, r4
 8005056:	d005      	beq.n	8005064 <_malloc_r+0xa8>
 8005058:	1a21      	subs	r1, r4, r0
 800505a:	4630      	mov	r0, r6
 800505c:	f000 f808 	bl	8005070 <_sbrk_r>
 8005060:	3001      	adds	r0, #1
 8005062:	d0cf      	beq.n	8005004 <_malloc_r+0x48>
 8005064:	6025      	str	r5, [r4, #0]
 8005066:	e7db      	b.n	8005020 <_malloc_r+0x64>
 8005068:	20000094 	.word	0x20000094
 800506c:	20000098 	.word	0x20000098

08005070 <_sbrk_r>:
 8005070:	b538      	push	{r3, r4, r5, lr}
 8005072:	4c06      	ldr	r4, [pc, #24]	; (800508c <_sbrk_r+0x1c>)
 8005074:	2300      	movs	r3, #0
 8005076:	4605      	mov	r5, r0
 8005078:	4608      	mov	r0, r1
 800507a:	6023      	str	r3, [r4, #0]
 800507c:	f7fb fe0a 	bl	8000c94 <_sbrk>
 8005080:	1c43      	adds	r3, r0, #1
 8005082:	d102      	bne.n	800508a <_sbrk_r+0x1a>
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	b103      	cbz	r3, 800508a <_sbrk_r+0x1a>
 8005088:	602b      	str	r3, [r5, #0]
 800508a:	bd38      	pop	{r3, r4, r5, pc}
 800508c:	20000204 	.word	0x20000204

08005090 <__sread>:
 8005090:	b510      	push	{r4, lr}
 8005092:	460c      	mov	r4, r1
 8005094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005098:	f000 f896 	bl	80051c8 <_read_r>
 800509c:	2800      	cmp	r0, #0
 800509e:	bfab      	itete	ge
 80050a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80050a2:	89a3      	ldrhlt	r3, [r4, #12]
 80050a4:	181b      	addge	r3, r3, r0
 80050a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80050aa:	bfac      	ite	ge
 80050ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80050ae:	81a3      	strhlt	r3, [r4, #12]
 80050b0:	bd10      	pop	{r4, pc}

080050b2 <__swrite>:
 80050b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050b6:	461f      	mov	r7, r3
 80050b8:	898b      	ldrh	r3, [r1, #12]
 80050ba:	05db      	lsls	r3, r3, #23
 80050bc:	4605      	mov	r5, r0
 80050be:	460c      	mov	r4, r1
 80050c0:	4616      	mov	r6, r2
 80050c2:	d505      	bpl.n	80050d0 <__swrite+0x1e>
 80050c4:	2302      	movs	r3, #2
 80050c6:	2200      	movs	r2, #0
 80050c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050cc:	f000 f868 	bl	80051a0 <_lseek_r>
 80050d0:	89a3      	ldrh	r3, [r4, #12]
 80050d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050da:	81a3      	strh	r3, [r4, #12]
 80050dc:	4632      	mov	r2, r6
 80050de:	463b      	mov	r3, r7
 80050e0:	4628      	mov	r0, r5
 80050e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050e6:	f000 b817 	b.w	8005118 <_write_r>

080050ea <__sseek>:
 80050ea:	b510      	push	{r4, lr}
 80050ec:	460c      	mov	r4, r1
 80050ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050f2:	f000 f855 	bl	80051a0 <_lseek_r>
 80050f6:	1c43      	adds	r3, r0, #1
 80050f8:	89a3      	ldrh	r3, [r4, #12]
 80050fa:	bf15      	itete	ne
 80050fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80050fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005106:	81a3      	strheq	r3, [r4, #12]
 8005108:	bf18      	it	ne
 800510a:	81a3      	strhne	r3, [r4, #12]
 800510c:	bd10      	pop	{r4, pc}

0800510e <__sclose>:
 800510e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005112:	f000 b813 	b.w	800513c <_close_r>
	...

08005118 <_write_r>:
 8005118:	b538      	push	{r3, r4, r5, lr}
 800511a:	4c07      	ldr	r4, [pc, #28]	; (8005138 <_write_r+0x20>)
 800511c:	4605      	mov	r5, r0
 800511e:	4608      	mov	r0, r1
 8005120:	4611      	mov	r1, r2
 8005122:	2200      	movs	r2, #0
 8005124:	6022      	str	r2, [r4, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	f7fb fd63 	bl	8000bf2 <_write>
 800512c:	1c43      	adds	r3, r0, #1
 800512e:	d102      	bne.n	8005136 <_write_r+0x1e>
 8005130:	6823      	ldr	r3, [r4, #0]
 8005132:	b103      	cbz	r3, 8005136 <_write_r+0x1e>
 8005134:	602b      	str	r3, [r5, #0]
 8005136:	bd38      	pop	{r3, r4, r5, pc}
 8005138:	20000204 	.word	0x20000204

0800513c <_close_r>:
 800513c:	b538      	push	{r3, r4, r5, lr}
 800513e:	4c06      	ldr	r4, [pc, #24]	; (8005158 <_close_r+0x1c>)
 8005140:	2300      	movs	r3, #0
 8005142:	4605      	mov	r5, r0
 8005144:	4608      	mov	r0, r1
 8005146:	6023      	str	r3, [r4, #0]
 8005148:	f7fb fd6f 	bl	8000c2a <_close>
 800514c:	1c43      	adds	r3, r0, #1
 800514e:	d102      	bne.n	8005156 <_close_r+0x1a>
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	b103      	cbz	r3, 8005156 <_close_r+0x1a>
 8005154:	602b      	str	r3, [r5, #0]
 8005156:	bd38      	pop	{r3, r4, r5, pc}
 8005158:	20000204 	.word	0x20000204

0800515c <_fstat_r>:
 800515c:	b538      	push	{r3, r4, r5, lr}
 800515e:	4c07      	ldr	r4, [pc, #28]	; (800517c <_fstat_r+0x20>)
 8005160:	2300      	movs	r3, #0
 8005162:	4605      	mov	r5, r0
 8005164:	4608      	mov	r0, r1
 8005166:	4611      	mov	r1, r2
 8005168:	6023      	str	r3, [r4, #0]
 800516a:	f7fb fd6a 	bl	8000c42 <_fstat>
 800516e:	1c43      	adds	r3, r0, #1
 8005170:	d102      	bne.n	8005178 <_fstat_r+0x1c>
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	b103      	cbz	r3, 8005178 <_fstat_r+0x1c>
 8005176:	602b      	str	r3, [r5, #0]
 8005178:	bd38      	pop	{r3, r4, r5, pc}
 800517a:	bf00      	nop
 800517c:	20000204 	.word	0x20000204

08005180 <_isatty_r>:
 8005180:	b538      	push	{r3, r4, r5, lr}
 8005182:	4c06      	ldr	r4, [pc, #24]	; (800519c <_isatty_r+0x1c>)
 8005184:	2300      	movs	r3, #0
 8005186:	4605      	mov	r5, r0
 8005188:	4608      	mov	r0, r1
 800518a:	6023      	str	r3, [r4, #0]
 800518c:	f7fb fd69 	bl	8000c62 <_isatty>
 8005190:	1c43      	adds	r3, r0, #1
 8005192:	d102      	bne.n	800519a <_isatty_r+0x1a>
 8005194:	6823      	ldr	r3, [r4, #0]
 8005196:	b103      	cbz	r3, 800519a <_isatty_r+0x1a>
 8005198:	602b      	str	r3, [r5, #0]
 800519a:	bd38      	pop	{r3, r4, r5, pc}
 800519c:	20000204 	.word	0x20000204

080051a0 <_lseek_r>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	4c07      	ldr	r4, [pc, #28]	; (80051c0 <_lseek_r+0x20>)
 80051a4:	4605      	mov	r5, r0
 80051a6:	4608      	mov	r0, r1
 80051a8:	4611      	mov	r1, r2
 80051aa:	2200      	movs	r2, #0
 80051ac:	6022      	str	r2, [r4, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	f7fb fd62 	bl	8000c78 <_lseek>
 80051b4:	1c43      	adds	r3, r0, #1
 80051b6:	d102      	bne.n	80051be <_lseek_r+0x1e>
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	b103      	cbz	r3, 80051be <_lseek_r+0x1e>
 80051bc:	602b      	str	r3, [r5, #0]
 80051be:	bd38      	pop	{r3, r4, r5, pc}
 80051c0:	20000204 	.word	0x20000204

080051c4 <__malloc_lock>:
 80051c4:	4770      	bx	lr

080051c6 <__malloc_unlock>:
 80051c6:	4770      	bx	lr

080051c8 <_read_r>:
 80051c8:	b538      	push	{r3, r4, r5, lr}
 80051ca:	4c07      	ldr	r4, [pc, #28]	; (80051e8 <_read_r+0x20>)
 80051cc:	4605      	mov	r5, r0
 80051ce:	4608      	mov	r0, r1
 80051d0:	4611      	mov	r1, r2
 80051d2:	2200      	movs	r2, #0
 80051d4:	6022      	str	r2, [r4, #0]
 80051d6:	461a      	mov	r2, r3
 80051d8:	f7fb fcee 	bl	8000bb8 <_read>
 80051dc:	1c43      	adds	r3, r0, #1
 80051de:	d102      	bne.n	80051e6 <_read_r+0x1e>
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	b103      	cbz	r3, 80051e6 <_read_r+0x1e>
 80051e4:	602b      	str	r3, [r5, #0]
 80051e6:	bd38      	pop	{r3, r4, r5, pc}
 80051e8:	20000204 	.word	0x20000204

080051ec <_init>:
 80051ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ee:	bf00      	nop
 80051f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051f2:	bc08      	pop	{r3}
 80051f4:	469e      	mov	lr, r3
 80051f6:	4770      	bx	lr

080051f8 <_fini>:
 80051f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fa:	bf00      	nop
 80051fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051fe:	bc08      	pop	{r3}
 8005200:	469e      	mov	lr, r3
 8005202:	4770      	bx	lr
