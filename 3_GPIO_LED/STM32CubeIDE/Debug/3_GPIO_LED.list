
3_GPIO_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001784  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001910  08001910  00011910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001950  08001950  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001950  08001950  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001950  08001950  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001950  08001950  00011950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001954  08001954  00011954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001964  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001964  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000058ac  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010df  00000000  00000000  000258e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000578  00000000  00000000  000269c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004d0  00000000  00000000  00026f40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001804a  00000000  00000000  00027410  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005340  00000000  00000000  0003f45a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096d1d  00000000  00000000  0004479a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000db4b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001394  00000000  00000000  000db534  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080018f8 	.word	0x080018f8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080018f8 	.word	0x080018f8

080001cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d2:	f107 030c 	add.w	r3, r7, #12
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]
 80001e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001e2:	4b23      	ldr	r3, [pc, #140]	; (8000270 <MX_GPIO_Init+0xa4>)
 80001e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001e6:	4a22      	ldr	r2, [pc, #136]	; (8000270 <MX_GPIO_Init+0xa4>)
 80001e8:	f043 0304 	orr.w	r3, r3, #4
 80001ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001ee:	4b20      	ldr	r3, [pc, #128]	; (8000270 <MX_GPIO_Init+0xa4>)
 80001f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f2:	f003 0304 	and.w	r3, r3, #4
 80001f6:	60bb      	str	r3, [r7, #8]
 80001f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001fa:	4b1d      	ldr	r3, [pc, #116]	; (8000270 <MX_GPIO_Init+0xa4>)
 80001fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001fe:	4a1c      	ldr	r2, [pc, #112]	; (8000270 <MX_GPIO_Init+0xa4>)
 8000200:	f043 0302 	orr.w	r3, r3, #2
 8000204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000206:	4b1a      	ldr	r3, [pc, #104]	; (8000270 <MX_GPIO_Init+0xa4>)
 8000208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800020a:	f003 0302 	and.w	r3, r3, #2
 800020e:	607b      	str	r3, [r7, #4]
 8000210:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_USER_GPIO_Port, LD4_USER_Pin, GPIO_PIN_RESET);
 8000212:	2200      	movs	r2, #0
 8000214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000218:	4816      	ldr	r0, [pc, #88]	; (8000274 <MX_GPIO_Init+0xa8>)
 800021a:	f000 fc7b 	bl	8000b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_USER_Pin;
 800021e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000222:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000224:	4b14      	ldr	r3, [pc, #80]	; (8000278 <MX_GPIO_Init+0xac>)
 8000226:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000228:	2300      	movs	r3, #0
 800022a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_USER_GPIO_Port, &GPIO_InitStruct);
 800022c:	f107 030c 	add.w	r3, r7, #12
 8000230:	4619      	mov	r1, r3
 8000232:	4812      	ldr	r0, [pc, #72]	; (800027c <MX_GPIO_Init+0xb0>)
 8000234:	f000 fae4 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_USER_Pin;
 8000238:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800023c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800023e:	2301      	movs	r3, #1
 8000240:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000242:	2300      	movs	r3, #0
 8000244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000246:	2300      	movs	r3, #0
 8000248:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD4_USER_GPIO_Port, &GPIO_InitStruct);
 800024a:	f107 030c 	add.w	r3, r7, #12
 800024e:	4619      	mov	r1, r3
 8000250:	4808      	ldr	r0, [pc, #32]	; (8000274 <MX_GPIO_Init+0xa8>)
 8000252:	f000 fad5 	bl	8000800 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000256:	2200      	movs	r2, #0
 8000258:	2100      	movs	r1, #0
 800025a:	2028      	movs	r0, #40	; 0x28
 800025c:	f000 fa99 	bl	8000792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000260:	2028      	movs	r0, #40	; 0x28
 8000262:	f000 fab2 	bl	80007ca <HAL_NVIC_EnableIRQ>

}
 8000266:	bf00      	nop
 8000268:	3720      	adds	r7, #32
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40021000 	.word	0x40021000
 8000274:	48000400 	.word	0x48000400
 8000278:	10310000 	.word	0x10310000
 800027c:	48000800 	.word	0x48000800

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 f936 	bl	80004f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f803 	bl	8000292 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f7ff ff9e 	bl	80001cc <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000290:	e7fe      	b.n	8000290 <main+0x10>

08000292 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	b096      	sub	sp, #88	; 0x58
 8000296:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000298:	f107 0314 	add.w	r3, r7, #20
 800029c:	2244      	movs	r2, #68	; 0x44
 800029e:	2100      	movs	r1, #0
 80002a0:	4618      	mov	r0, r3
 80002a2:	f001 fb21 	bl	80018e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a6:	463b      	mov	r3, r7
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002b8:	f000 fc6a 	bl	8000b90 <HAL_PWREx_ControlVoltageScaling>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002c2:	f000 f85d 	bl	8000380 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002c6:	2310      	movs	r3, #16
 80002c8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002ca:	2301      	movs	r3, #1
 80002cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002d2:	2360      	movs	r3, #96	; 0x60
 80002d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d6:	2302      	movs	r3, #2
 80002d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002da:	2301      	movs	r3, #1
 80002dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002de:	2301      	movs	r3, #1
 80002e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 80002e2:	2328      	movs	r3, #40	; 0x28
 80002e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002e6:	2302      	movs	r3, #2
 80002e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ea:	2302      	movs	r3, #2
 80002ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 fca2 	bl	8000c3c <HAL_RCC_OscConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80002fe:	f000 f83f 	bl	8000380 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000302:	230f      	movs	r3, #15
 8000304:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000306:	2303      	movs	r3, #3
 8000308:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000316:	463b      	mov	r3, r7
 8000318:	2104      	movs	r1, #4
 800031a:	4618      	mov	r0, r3
 800031c:	f001 f8f4 	bl	8001508 <HAL_RCC_ClockConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000326:	f000 f82b 	bl	8000380 <Error_Handler>
  }
}
 800032a:	bf00      	nop
 800032c:	3758      	adds	r7, #88	; 0x58
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == B1_USER_Pin)
 800033e:	88fb      	ldrh	r3, [r7, #6]
 8000340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000344:	d114      	bne.n	8000370 <HAL_GPIO_EXTI_Callback+0x3c>
  {
    if (HAL_GPIO_ReadPin(B1_USER_GPIO_Port, B1_USER_Pin) == GPIO_PIN_SET)
 8000346:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800034a:	480b      	ldr	r0, [pc, #44]	; (8000378 <HAL_GPIO_EXTI_Callback+0x44>)
 800034c:	f000 fbca 	bl	8000ae4 <HAL_GPIO_ReadPin>
 8000350:	4603      	mov	r3, r0
 8000352:	2b01      	cmp	r3, #1
 8000354:	d106      	bne.n	8000364 <HAL_GPIO_EXTI_Callback+0x30>
    {
      HAL_GPIO_WritePin(LD4_USER_GPIO_Port, LD4_USER_Pin, GPIO_PIN_SET);
 8000356:	2201      	movs	r2, #1
 8000358:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800035c:	4807      	ldr	r0, [pc, #28]	; (800037c <HAL_GPIO_EXTI_Callback+0x48>)
 800035e:	f000 fbd9 	bl	8000b14 <HAL_GPIO_WritePin>
    else
    {
      HAL_GPIO_WritePin(LD4_USER_GPIO_Port, LD4_USER_Pin, GPIO_PIN_RESET);
    }
  }
}
 8000362:	e005      	b.n	8000370 <HAL_GPIO_EXTI_Callback+0x3c>
      HAL_GPIO_WritePin(LD4_USER_GPIO_Port, LD4_USER_Pin, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800036a:	4804      	ldr	r0, [pc, #16]	; (800037c <HAL_GPIO_EXTI_Callback+0x48>)
 800036c:	f000 fbd2 	bl	8000b14 <HAL_GPIO_WritePin>
}
 8000370:	bf00      	nop
 8000372:	3708      	adds	r7, #8
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	48000800 	.word	0x48000800
 800037c:	48000400 	.word	0x48000400

08000380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000384:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000386:	e7fe      	b.n	8000386 <Error_Handler+0x6>

08000388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800038e:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <HAL_MspInit+0x44>)
 8000390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000392:	4a0e      	ldr	r2, [pc, #56]	; (80003cc <HAL_MspInit+0x44>)
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6613      	str	r3, [r2, #96]	; 0x60
 800039a:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <HAL_MspInit+0x44>)
 800039c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a6:	4b09      	ldr	r3, [pc, #36]	; (80003cc <HAL_MspInit+0x44>)
 80003a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003aa:	4a08      	ldr	r2, [pc, #32]	; (80003cc <HAL_MspInit+0x44>)
 80003ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b0:	6593      	str	r3, [r2, #88]	; 0x58
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <HAL_MspInit+0x44>)
 80003b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ba:	603b      	str	r3, [r7, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000

080003d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003d4:	e7fe      	b.n	80003d4 <NMI_Handler+0x4>

080003d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d6:	b480      	push	{r7}
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003da:	e7fe      	b.n	80003da <HardFault_Handler+0x4>

080003dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003e0:	e7fe      	b.n	80003e0 <MemManage_Handler+0x4>

080003e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003e6:	e7fe      	b.n	80003e6 <BusFault_Handler+0x4>

080003e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003ec:	e7fe      	b.n	80003ec <UsageFault_Handler+0x4>

080003ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ee:	b480      	push	{r7}
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003f2:	bf00      	nop
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr

080003fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr

0800040a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800040a:	b480      	push	{r7}
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800040e:	bf00      	nop
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800041c:	f000 f8be 	bl	800059c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}

08000424 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000428:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800042c:	f000 fb8a 	bl	8000b44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}

08000434 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800046c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000438:	f000 f826 	bl	8000488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800043c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800043e:	e003      	b.n	8000448 <LoopCopyDataInit>

08000440 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000440:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000442:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000444:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000446:	3104      	adds	r1, #4

08000448 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000448:	480a      	ldr	r0, [pc, #40]	; (8000474 <LoopForever+0xa>)
	ldr	r3, =_edata
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <LoopForever+0xe>)
	adds	r2, r0, r1
 800044c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800044e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000450:	d3f6      	bcc.n	8000440 <CopyDataInit>
	ldr	r2, =_sbss
 8000452:	4a0a      	ldr	r2, [pc, #40]	; (800047c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000454:	e002      	b.n	800045c <LoopFillZerobss>

08000456 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000456:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000458:	f842 3b04 	str.w	r3, [r2], #4

0800045c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <LoopForever+0x16>)
	cmp	r2, r3
 800045e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000460:	d3f9      	bcc.n	8000456 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000462:	f001 fa1d 	bl	80018a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000466:	f7ff ff0b 	bl	8000280 <main>

0800046a <LoopForever>:

LoopForever:
    b LoopForever
 800046a:	e7fe      	b.n	800046a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800046c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000470:	08001958 	.word	0x08001958
	ldr	r0, =_sdata
 8000474:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000478:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800047c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000480:	2000002c 	.word	0x2000002c

08000484 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000484:	e7fe      	b.n	8000484 <ADC1_2_IRQHandler>
	...

08000488 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800048c:	4b17      	ldr	r3, [pc, #92]	; (80004ec <SystemInit+0x64>)
 800048e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000492:	4a16      	ldr	r2, [pc, #88]	; (80004ec <SystemInit+0x64>)
 8000494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800049c:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <SystemInit+0x68>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a13      	ldr	r2, [pc, #76]	; (80004f0 <SystemInit+0x68>)
 80004a2:	f043 0301 	orr.w	r3, r3, #1
 80004a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80004a8:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <SystemInit+0x68>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80004ae:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <SystemInit+0x68>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a0f      	ldr	r2, [pc, #60]	; (80004f0 <SystemInit+0x68>)
 80004b4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80004b8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80004bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80004be:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <SystemInit+0x68>)
 80004c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004c4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004c6:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <SystemInit+0x68>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a09      	ldr	r2, [pc, #36]	; (80004f0 <SystemInit+0x68>)
 80004cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80004d2:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <SystemInit+0x68>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004d8:	4b04      	ldr	r3, [pc, #16]	; (80004ec <SystemInit+0x64>)
 80004da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004de:	609a      	str	r2, [r3, #8]
#endif
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	e000ed00 	.word	0xe000ed00
 80004f0:	40021000 	.word	0x40021000

080004f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004fa:	2300      	movs	r3, #0
 80004fc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fe:	2003      	movs	r0, #3
 8000500:	f000 f93c 	bl	800077c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000504:	2000      	movs	r0, #0
 8000506:	f000 f80d 	bl	8000524 <HAL_InitTick>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d002      	beq.n	8000516 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000510:	2301      	movs	r3, #1
 8000512:	71fb      	strb	r3, [r7, #7]
 8000514:	e001      	b.n	800051a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000516:	f7ff ff37 	bl	8000388 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800051a:	79fb      	ldrb	r3, [r7, #7]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800052c:	2300      	movs	r3, #0
 800052e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000530:	4b17      	ldr	r3, [pc, #92]	; (8000590 <HAL_InitTick+0x6c>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d023      	beq.n	8000580 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000538:	4b16      	ldr	r3, [pc, #88]	; (8000594 <HAL_InitTick+0x70>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b14      	ldr	r3, [pc, #80]	; (8000590 <HAL_InitTick+0x6c>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	fbb3 f3f1 	udiv	r3, r3, r1
 800054a:	fbb2 f3f3 	udiv	r3, r2, r3
 800054e:	4618      	mov	r0, r3
 8000550:	f000 f949 	bl	80007e6 <HAL_SYSTICK_Config>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d10f      	bne.n	800057a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2b0f      	cmp	r3, #15
 800055e:	d809      	bhi.n	8000574 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000560:	2200      	movs	r2, #0
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	f04f 30ff 	mov.w	r0, #4294967295
 8000568:	f000 f913 	bl	8000792 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800056c:	4a0a      	ldr	r2, [pc, #40]	; (8000598 <HAL_InitTick+0x74>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6013      	str	r3, [r2, #0]
 8000572:	e007      	b.n	8000584 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000574:	2301      	movs	r3, #1
 8000576:	73fb      	strb	r3, [r7, #15]
 8000578:	e004      	b.n	8000584 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800057a:	2301      	movs	r3, #1
 800057c:	73fb      	strb	r3, [r7, #15]
 800057e:	e001      	b.n	8000584 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000580:	2301      	movs	r3, #1
 8000582:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000584:	7bfb      	ldrb	r3, [r7, #15]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000008 	.word	0x20000008
 8000594:	20000000 	.word	0x20000000
 8000598:	20000004 	.word	0x20000004

0800059c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <HAL_IncTick+0x20>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x24>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4413      	add	r3, r2
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <HAL_IncTick+0x24>)
 80005ae:	6013      	str	r3, [r2, #0]
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000008 	.word	0x20000008
 80005c0:	20000028 	.word	0x20000028

080005c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  return uwTick;
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <HAL_GetTick+0x14>)
 80005ca:	681b      	ldr	r3, [r3, #0]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000028 	.word	0x20000028

080005dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f003 0307 	and.w	r3, r3, #7
 80005ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <__NVIC_SetPriorityGrouping+0x44>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f2:	68ba      	ldr	r2, [r7, #8]
 80005f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005f8:	4013      	ands	r3, r2
 80005fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800060e:	4a04      	ldr	r2, [pc, #16]	; (8000620 <__NVIC_SetPriorityGrouping+0x44>)
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	60d3      	str	r3, [r2, #12]
}
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <__NVIC_GetPriorityGrouping+0x18>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	0a1b      	lsrs	r3, r3, #8
 800062e:	f003 0307 	and.w	r3, r3, #7
}
 8000632:	4618      	mov	r0, r3
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	2b00      	cmp	r3, #0
 8000650:	db0b      	blt.n	800066a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	f003 021f 	and.w	r2, r3, #31
 8000658:	4907      	ldr	r1, [pc, #28]	; (8000678 <__NVIC_EnableIRQ+0x38>)
 800065a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065e:	095b      	lsrs	r3, r3, #5
 8000660:	2001      	movs	r0, #1
 8000662:	fa00 f202 	lsl.w	r2, r0, r2
 8000666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000e100 	.word	0xe000e100

0800067c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	6039      	str	r1, [r7, #0]
 8000686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068c:	2b00      	cmp	r3, #0
 800068e:	db0a      	blt.n	80006a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	b2da      	uxtb	r2, r3
 8000694:	490c      	ldr	r1, [pc, #48]	; (80006c8 <__NVIC_SetPriority+0x4c>)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	0112      	lsls	r2, r2, #4
 800069c:	b2d2      	uxtb	r2, r2
 800069e:	440b      	add	r3, r1
 80006a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a4:	e00a      	b.n	80006bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4908      	ldr	r1, [pc, #32]	; (80006cc <__NVIC_SetPriority+0x50>)
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	f003 030f 	and.w	r3, r3, #15
 80006b2:	3b04      	subs	r3, #4
 80006b4:	0112      	lsls	r2, r2, #4
 80006b6:	b2d2      	uxtb	r2, r2
 80006b8:	440b      	add	r3, r1
 80006ba:	761a      	strb	r2, [r3, #24]
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	e000e100 	.word	0xe000e100
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b089      	sub	sp, #36	; 0x24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	f1c3 0307 	rsb	r3, r3, #7
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	bf28      	it	cs
 80006ee:	2304      	movcs	r3, #4
 80006f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	3304      	adds	r3, #4
 80006f6:	2b06      	cmp	r3, #6
 80006f8:	d902      	bls.n	8000700 <NVIC_EncodePriority+0x30>
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	3b03      	subs	r3, #3
 80006fe:	e000      	b.n	8000702 <NVIC_EncodePriority+0x32>
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	f04f 32ff 	mov.w	r2, #4294967295
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	fa02 f303 	lsl.w	r3, r2, r3
 800070e:	43da      	mvns	r2, r3
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	401a      	ands	r2, r3
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000718:	f04f 31ff 	mov.w	r1, #4294967295
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	fa01 f303 	lsl.w	r3, r1, r3
 8000722:	43d9      	mvns	r1, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	4313      	orrs	r3, r2
         );
}
 800072a:	4618      	mov	r0, r3
 800072c:	3724      	adds	r7, #36	; 0x24
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
	...

08000738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3b01      	subs	r3, #1
 8000744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000748:	d301      	bcc.n	800074e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800074a:	2301      	movs	r3, #1
 800074c:	e00f      	b.n	800076e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <SysTick_Config+0x40>)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3b01      	subs	r3, #1
 8000754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000756:	210f      	movs	r1, #15
 8000758:	f04f 30ff 	mov.w	r0, #4294967295
 800075c:	f7ff ff8e 	bl	800067c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <SysTick_Config+0x40>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000766:	4b04      	ldr	r3, [pc, #16]	; (8000778 <SysTick_Config+0x40>)
 8000768:	2207      	movs	r2, #7
 800076a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	e000e010 	.word	0xe000e010

0800077c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff ff29 	bl	80005dc <__NVIC_SetPriorityGrouping>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b086      	sub	sp, #24
 8000796:	af00      	add	r7, sp, #0
 8000798:	4603      	mov	r3, r0
 800079a:	60b9      	str	r1, [r7, #8]
 800079c:	607a      	str	r2, [r7, #4]
 800079e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007a4:	f7ff ff3e 	bl	8000624 <__NVIC_GetPriorityGrouping>
 80007a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	68b9      	ldr	r1, [r7, #8]
 80007ae:	6978      	ldr	r0, [r7, #20]
 80007b0:	f7ff ff8e 	bl	80006d0 <NVIC_EncodePriority>
 80007b4:	4602      	mov	r2, r0
 80007b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ba:	4611      	mov	r1, r2
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff5d 	bl	800067c <__NVIC_SetPriority>
}
 80007c2:	bf00      	nop
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff31 	bl	8000640 <__NVIC_EnableIRQ>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff ffa2 	bl	8000738 <SysTick_Config>
 80007f4:	4603      	mov	r3, r0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000800:	b480      	push	{r7}
 8000802:	b087      	sub	sp, #28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800080e:	e14e      	b.n	8000aae <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	2101      	movs	r1, #1
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	fa01 f303 	lsl.w	r3, r1, r3
 800081c:	4013      	ands	r3, r2
 800081e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	2b00      	cmp	r3, #0
 8000824:	f000 8140 	beq.w	8000aa8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d00b      	beq.n	8000848 <HAL_GPIO_Init+0x48>
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	2b02      	cmp	r3, #2
 8000836:	d007      	beq.n	8000848 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800083c:	2b11      	cmp	r3, #17
 800083e:	d003      	beq.n	8000848 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	2b12      	cmp	r3, #18
 8000846:	d130      	bne.n	80008aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	2203      	movs	r2, #3
 8000854:	fa02 f303 	lsl.w	r3, r2, r3
 8000858:	43db      	mvns	r3, r3
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	4013      	ands	r3, r2
 800085e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	68da      	ldr	r2, [r3, #12]
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	693a      	ldr	r2, [r7, #16]
 800086e:	4313      	orrs	r3, r2
 8000870:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	693a      	ldr	r2, [r7, #16]
 8000876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800087e:	2201      	movs	r2, #1
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	43db      	mvns	r3, r3
 8000888:	693a      	ldr	r2, [r7, #16]
 800088a:	4013      	ands	r3, r2
 800088c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	091b      	lsrs	r3, r3, #4
 8000894:	f003 0201 	and.w	r2, r3, #1
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	2203      	movs	r2, #3
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	43db      	mvns	r3, r3
 80008bc:	693a      	ldr	r2, [r7, #16]
 80008be:	4013      	ands	r3, r2
 80008c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d003      	beq.n	80008ea <HAL_GPIO_Init+0xea>
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	2b12      	cmp	r3, #18
 80008e8:	d123      	bne.n	8000932 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	08da      	lsrs	r2, r3, #3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3208      	adds	r2, #8
 80008f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	220f      	movs	r2, #15
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43db      	mvns	r3, r3
 8000908:	693a      	ldr	r2, [r7, #16]
 800090a:	4013      	ands	r3, r2
 800090c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	691a      	ldr	r2, [r3, #16]
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	f003 0307 	and.w	r3, r3, #7
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	4313      	orrs	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	08da      	lsrs	r2, r3, #3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3208      	adds	r2, #8
 800092c:	6939      	ldr	r1, [r7, #16]
 800092e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	2203      	movs	r2, #3
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	4013      	ands	r3, r2
 8000948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	f003 0203 	and.w	r2, r3, #3
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	4313      	orrs	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	2b00      	cmp	r3, #0
 8000970:	f000 809a 	beq.w	8000aa8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000974:	4b55      	ldr	r3, [pc, #340]	; (8000acc <HAL_GPIO_Init+0x2cc>)
 8000976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000978:	4a54      	ldr	r2, [pc, #336]	; (8000acc <HAL_GPIO_Init+0x2cc>)
 800097a:	f043 0301 	orr.w	r3, r3, #1
 800097e:	6613      	str	r3, [r2, #96]	; 0x60
 8000980:	4b52      	ldr	r3, [pc, #328]	; (8000acc <HAL_GPIO_Init+0x2cc>)
 8000982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000984:	f003 0301 	and.w	r3, r3, #1
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800098c:	4a50      	ldr	r2, [pc, #320]	; (8000ad0 <HAL_GPIO_Init+0x2d0>)
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	089b      	lsrs	r3, r3, #2
 8000992:	3302      	adds	r3, #2
 8000994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000998:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	f003 0303 	and.w	r3, r3, #3
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	220f      	movs	r2, #15
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	43db      	mvns	r3, r3
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4013      	ands	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009b6:	d013      	beq.n	80009e0 <HAL_GPIO_Init+0x1e0>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a46      	ldr	r2, [pc, #280]	; (8000ad4 <HAL_GPIO_Init+0x2d4>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d00d      	beq.n	80009dc <HAL_GPIO_Init+0x1dc>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a45      	ldr	r2, [pc, #276]	; (8000ad8 <HAL_GPIO_Init+0x2d8>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d007      	beq.n	80009d8 <HAL_GPIO_Init+0x1d8>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a44      	ldr	r2, [pc, #272]	; (8000adc <HAL_GPIO_Init+0x2dc>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d101      	bne.n	80009d4 <HAL_GPIO_Init+0x1d4>
 80009d0:	2303      	movs	r3, #3
 80009d2:	e006      	b.n	80009e2 <HAL_GPIO_Init+0x1e2>
 80009d4:	2307      	movs	r3, #7
 80009d6:	e004      	b.n	80009e2 <HAL_GPIO_Init+0x1e2>
 80009d8:	2302      	movs	r3, #2
 80009da:	e002      	b.n	80009e2 <HAL_GPIO_Init+0x1e2>
 80009dc:	2301      	movs	r3, #1
 80009de:	e000      	b.n	80009e2 <HAL_GPIO_Init+0x1e2>
 80009e0:	2300      	movs	r3, #0
 80009e2:	697a      	ldr	r2, [r7, #20]
 80009e4:	f002 0203 	and.w	r2, r2, #3
 80009e8:	0092      	lsls	r2, r2, #2
 80009ea:	4093      	lsls	r3, r2
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009f2:	4937      	ldr	r1, [pc, #220]	; (8000ad0 <HAL_GPIO_Init+0x2d0>)
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	089b      	lsrs	r3, r3, #2
 80009f8:	3302      	adds	r3, #2
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a00:	4b37      	ldr	r3, [pc, #220]	; (8000ae0 <HAL_GPIO_Init+0x2e0>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d003      	beq.n	8000a24 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a24:	4a2e      	ldr	r2, [pc, #184]	; (8000ae0 <HAL_GPIO_Init+0x2e0>)
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <HAL_GPIO_Init+0x2e0>)
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	43db      	mvns	r3, r3
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	4013      	ands	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d003      	beq.n	8000a4e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a4e:	4a24      	ldr	r2, [pc, #144]	; (8000ae0 <HAL_GPIO_Init+0x2e0>)
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a54:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <HAL_GPIO_Init+0x2e0>)
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4013      	ands	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d003      	beq.n	8000a78 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a78:	4a19      	ldr	r2, [pc, #100]	; (8000ae0 <HAL_GPIO_Init+0x2e0>)
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <HAL_GPIO_Init+0x2e0>)
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	43db      	mvns	r3, r3
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d003      	beq.n	8000aa2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000aa2:	4a0f      	ldr	r2, [pc, #60]	; (8000ae0 <HAL_GPIO_Init+0x2e0>)
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	f47f aea9 	bne.w	8000810 <HAL_GPIO_Init+0x10>
  }
}
 8000abe:	bf00      	nop
 8000ac0:	371c      	adds	r7, #28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	40010000 	.word	0x40010000
 8000ad4:	48000400 	.word	0x48000400
 8000ad8:	48000800 	.word	0x48000800
 8000adc:	48000c00 	.word	0x48000c00
 8000ae0:	40010400 	.word	0x40010400

08000ae4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	460b      	mov	r3, r1
 8000aee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	691a      	ldr	r2, [r3, #16]
 8000af4:	887b      	ldrh	r3, [r7, #2]
 8000af6:	4013      	ands	r3, r2
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d002      	beq.n	8000b02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000afc:	2301      	movs	r3, #1
 8000afe:	73fb      	strb	r3, [r7, #15]
 8000b00:	e001      	b.n	8000b06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b02:	2300      	movs	r3, #0
 8000b04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	807b      	strh	r3, [r7, #2]
 8000b20:	4613      	mov	r3, r2
 8000b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b24:	787b      	ldrb	r3, [r7, #1]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b2a:	887a      	ldrh	r2, [r7, #2]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b30:	e002      	b.n	8000b38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b32:	887a      	ldrh	r2, [r7, #2]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b50:	695a      	ldr	r2, [r3, #20]
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	4013      	ands	r3, r2
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d006      	beq.n	8000b68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b5a:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b5c:	88fb      	ldrh	r3, [r7, #6]
 8000b5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fbe6 	bl	8000334 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40010400 	.word	0x40010400

08000b74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <HAL_PWREx_GetVoltageRange+0x18>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40007000 	.word	0x40007000

08000b90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b9e:	d130      	bne.n	8000c02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ba0:	4b23      	ldr	r3, [pc, #140]	; (8000c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bac:	d038      	beq.n	8000c20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bae:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bb6:	4a1e      	ldr	r2, [pc, #120]	; (8000c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bbc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2232      	movs	r2, #50	; 0x32
 8000bc4:	fb02 f303 	mul.w	r3, r2, r3
 8000bc8:	4a1b      	ldr	r2, [pc, #108]	; (8000c38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000bca:	fba2 2303 	umull	r2, r3, r2, r3
 8000bce:	0c9b      	lsrs	r3, r3, #18
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bd4:	e002      	b.n	8000bdc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000be8:	d102      	bne.n	8000bf0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1f2      	bne.n	8000bd6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf2:	695b      	ldr	r3, [r3, #20]
 8000bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bfc:	d110      	bne.n	8000c20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	e00f      	b.n	8000c22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c0e:	d007      	beq.n	8000c20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c18:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40007000 	.word	0x40007000
 8000c34:	20000000 	.word	0x20000000
 8000c38:	431bde83 	.word	0x431bde83

08000c3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d102      	bne.n	8000c50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	f000 bc56 	b.w	80014fc <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c50:	4ba1      	ldr	r3, [pc, #644]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	f003 030c 	and.w	r3, r3, #12
 8000c58:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c5a:	4b9f      	ldr	r3, [pc, #636]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
 8000c62:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f003 0310 	and.w	r3, r3, #16
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	f000 80e6 	beq.w	8000e3e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c72:	6a3b      	ldr	r3, [r7, #32]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d007      	beq.n	8000c88 <HAL_RCC_OscConfig+0x4c>
 8000c78:	6a3b      	ldr	r3, [r7, #32]
 8000c7a:	2b0c      	cmp	r3, #12
 8000c7c:	f040 808d 	bne.w	8000d9a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	f040 8089 	bne.w	8000d9a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c88:	4b93      	ldr	r3, [pc, #588]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 0302 	and.w	r3, r3, #2
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d006      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x66>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	69db      	ldr	r3, [r3, #28]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	f000 bc2d 	b.w	80014fc <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ca6:	4b8c      	ldr	r3, [pc, #560]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0308 	and.w	r3, r3, #8
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d004      	beq.n	8000cbc <HAL_RCC_OscConfig+0x80>
 8000cb2:	4b89      	ldr	r3, [pc, #548]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cba:	e005      	b.n	8000cc8 <HAL_RCC_OscConfig+0x8c>
 8000cbc:	4b86      	ldr	r3, [pc, #536]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cc2:	091b      	lsrs	r3, r3, #4
 8000cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d224      	bcs.n	8000d16 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 fd85 	bl	80017e0 <RCC_SetFlashLatencyFromMSIRange>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d002      	beq.n	8000ce2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f000 bc0d 	b.w	80014fc <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ce2:	4b7d      	ldr	r3, [pc, #500]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a7c      	ldr	r2, [pc, #496]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000ce8:	f043 0308 	orr.w	r3, r3, #8
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	4b7a      	ldr	r3, [pc, #488]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfa:	4977      	ldr	r1, [pc, #476]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d00:	4b75      	ldr	r3, [pc, #468]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a1b      	ldr	r3, [r3, #32]
 8000d0c:	021b      	lsls	r3, r3, #8
 8000d0e:	4972      	ldr	r1, [pc, #456]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000d10:	4313      	orrs	r3, r2
 8000d12:	604b      	str	r3, [r1, #4]
 8000d14:	e025      	b.n	8000d62 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d16:	4b70      	ldr	r3, [pc, #448]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a6f      	ldr	r2, [pc, #444]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	4b6d      	ldr	r3, [pc, #436]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2e:	496a      	ldr	r1, [pc, #424]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000d30:	4313      	orrs	r3, r2
 8000d32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d34:	4b68      	ldr	r3, [pc, #416]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a1b      	ldr	r3, [r3, #32]
 8000d40:	021b      	lsls	r3, r3, #8
 8000d42:	4965      	ldr	r1, [pc, #404]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000d44:	4313      	orrs	r3, r2
 8000d46:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d48:	6a3b      	ldr	r3, [r7, #32]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d109      	bne.n	8000d62 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 fd44 	bl	80017e0 <RCC_SetFlashLatencyFromMSIRange>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e3cc      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d62:	f000 fcb3 	bl	80016cc <HAL_RCC_GetSysClockFreq>
 8000d66:	4601      	mov	r1, r0
 8000d68:	4b5b      	ldr	r3, [pc, #364]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	091b      	lsrs	r3, r3, #4
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	4a5a      	ldr	r2, [pc, #360]	; (8000edc <HAL_RCC_OscConfig+0x2a0>)
 8000d74:	5cd3      	ldrb	r3, [r2, r3]
 8000d76:	f003 031f 	and.w	r3, r3, #31
 8000d7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d7e:	4a58      	ldr	r2, [pc, #352]	; (8000ee0 <HAL_RCC_OscConfig+0x2a4>)
 8000d80:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d82:	4b58      	ldr	r3, [pc, #352]	; (8000ee4 <HAL_RCC_OscConfig+0x2a8>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fbcc 	bl	8000524 <HAL_InitTick>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8000d90:	7dfb      	ldrb	r3, [r7, #23]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d052      	beq.n	8000e3c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8000d96:	7dfb      	ldrb	r3, [r7, #23]
 8000d98:	e3b0      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d032      	beq.n	8000e08 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000da2:	4b4d      	ldr	r3, [pc, #308]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a4c      	ldr	r2, [pc, #304]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000dae:	f7ff fc09 	bl	80005c4 <HAL_GetTick>
 8000db2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000db4:	e008      	b.n	8000dc8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000db6:	f7ff fc05 	bl	80005c4 <HAL_GetTick>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d901      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	e399      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dc8:	4b43      	ldr	r3, [pc, #268]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d0f0      	beq.n	8000db6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dd4:	4b40      	ldr	r3, [pc, #256]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a3f      	ldr	r2, [pc, #252]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000dda:	f043 0308 	orr.w	r3, r3, #8
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	4b3d      	ldr	r3, [pc, #244]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dec:	493a      	ldr	r1, [pc, #232]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000dee:	4313      	orrs	r3, r2
 8000df0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000df2:	4b39      	ldr	r3, [pc, #228]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a1b      	ldr	r3, [r3, #32]
 8000dfe:	021b      	lsls	r3, r3, #8
 8000e00:	4935      	ldr	r1, [pc, #212]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000e02:	4313      	orrs	r3, r2
 8000e04:	604b      	str	r3, [r1, #4]
 8000e06:	e01a      	b.n	8000e3e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e08:	4b33      	ldr	r3, [pc, #204]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a32      	ldr	r2, [pc, #200]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000e0e:	f023 0301 	bic.w	r3, r3, #1
 8000e12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e14:	f7ff fbd6 	bl	80005c4 <HAL_GetTick>
 8000e18:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e1c:	f7ff fbd2 	bl	80005c4 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e366      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f0      	bne.n	8000e1c <HAL_RCC_OscConfig+0x1e0>
 8000e3a:	e000      	b.n	8000e3e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d073      	beq.n	8000f32 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e4a:	6a3b      	ldr	r3, [r7, #32]
 8000e4c:	2b08      	cmp	r3, #8
 8000e4e:	d005      	beq.n	8000e5c <HAL_RCC_OscConfig+0x220>
 8000e50:	6a3b      	ldr	r3, [r7, #32]
 8000e52:	2b0c      	cmp	r3, #12
 8000e54:	d10e      	bne.n	8000e74 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	2b03      	cmp	r3, #3
 8000e5a:	d10b      	bne.n	8000e74 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d063      	beq.n	8000f30 <HAL_RCC_OscConfig+0x2f4>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d15f      	bne.n	8000f30 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e343      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e7c:	d106      	bne.n	8000e8c <HAL_RCC_OscConfig+0x250>
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a15      	ldr	r2, [pc, #84]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	e01d      	b.n	8000ec8 <HAL_RCC_OscConfig+0x28c>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e94:	d10c      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x274>
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a0f      	ldr	r2, [pc, #60]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a0c      	ldr	r2, [pc, #48]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	e00b      	b.n	8000ec8 <HAL_RCC_OscConfig+0x28c>
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <HAL_RCC_OscConfig+0x29c>)
 8000ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d01b      	beq.n	8000f08 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed0:	f7ff fb78 	bl	80005c4 <HAL_GetTick>
 8000ed4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ed6:	e010      	b.n	8000efa <HAL_RCC_OscConfig+0x2be>
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	08001910 	.word	0x08001910
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ee8:	f7ff fb6c 	bl	80005c4 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b64      	cmp	r3, #100	; 0x64
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e300      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000efa:	4ba0      	ldr	r3, [pc, #640]	; (800117c <HAL_RCC_OscConfig+0x540>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0f0      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x2ac>
 8000f06:	e014      	b.n	8000f32 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f08:	f7ff fb5c 	bl	80005c4 <HAL_GetTick>
 8000f0c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f10:	f7ff fb58 	bl	80005c4 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b64      	cmp	r3, #100	; 0x64
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e2ec      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f22:	4b96      	ldr	r3, [pc, #600]	; (800117c <HAL_RCC_OscConfig+0x540>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f0      	bne.n	8000f10 <HAL_RCC_OscConfig+0x2d4>
 8000f2e:	e000      	b.n	8000f32 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d060      	beq.n	8001000 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f3e:	6a3b      	ldr	r3, [r7, #32]
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d005      	beq.n	8000f50 <HAL_RCC_OscConfig+0x314>
 8000f44:	6a3b      	ldr	r3, [r7, #32]
 8000f46:	2b0c      	cmp	r3, #12
 8000f48:	d119      	bne.n	8000f7e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d116      	bne.n	8000f7e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f50:	4b8a      	ldr	r3, [pc, #552]	; (800117c <HAL_RCC_OscConfig+0x540>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d005      	beq.n	8000f68 <HAL_RCC_OscConfig+0x32c>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d101      	bne.n	8000f68 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e2c9      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f68:	4b84      	ldr	r3, [pc, #528]	; (800117c <HAL_RCC_OscConfig+0x540>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	061b      	lsls	r3, r3, #24
 8000f76:	4981      	ldr	r1, [pc, #516]	; (800117c <HAL_RCC_OscConfig+0x540>)
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f7c:	e040      	b.n	8001000 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d023      	beq.n	8000fce <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f86:	4b7d      	ldr	r3, [pc, #500]	; (800117c <HAL_RCC_OscConfig+0x540>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a7c      	ldr	r2, [pc, #496]	; (800117c <HAL_RCC_OscConfig+0x540>)
 8000f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f92:	f7ff fb17 	bl	80005c4 <HAL_GetTick>
 8000f96:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f98:	e008      	b.n	8000fac <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f9a:	f7ff fb13 	bl	80005c4 <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d901      	bls.n	8000fac <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e2a7      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fac:	4b73      	ldr	r3, [pc, #460]	; (800117c <HAL_RCC_OscConfig+0x540>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0f0      	beq.n	8000f9a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb8:	4b70      	ldr	r3, [pc, #448]	; (800117c <HAL_RCC_OscConfig+0x540>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	061b      	lsls	r3, r3, #24
 8000fc6:	496d      	ldr	r1, [pc, #436]	; (800117c <HAL_RCC_OscConfig+0x540>)
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	604b      	str	r3, [r1, #4]
 8000fcc:	e018      	b.n	8001000 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fce:	4b6b      	ldr	r3, [pc, #428]	; (800117c <HAL_RCC_OscConfig+0x540>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a6a      	ldr	r2, [pc, #424]	; (800117c <HAL_RCC_OscConfig+0x540>)
 8000fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fda:	f7ff faf3 	bl	80005c4 <HAL_GetTick>
 8000fde:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fe2:	f7ff faef 	bl	80005c4 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e283      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ff4:	4b61      	ldr	r3, [pc, #388]	; (800117c <HAL_RCC_OscConfig+0x540>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1f0      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0308 	and.w	r3, r3, #8
 8001008:	2b00      	cmp	r3, #0
 800100a:	d07f      	beq.n	800110c <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d05f      	beq.n	80010d4 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001014:	4b59      	ldr	r3, [pc, #356]	; (800117c <HAL_RCC_OscConfig+0x540>)
 8001016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800101a:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	699a      	ldr	r2, [r3, #24]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	f003 0310 	and.w	r3, r3, #16
 8001026:	429a      	cmp	r2, r3
 8001028:	d037      	beq.n	800109a <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d006      	beq.n	8001042 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e25c      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b00      	cmp	r3, #0
 800104a:	d01b      	beq.n	8001084 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 800104c:	4b4b      	ldr	r3, [pc, #300]	; (800117c <HAL_RCC_OscConfig+0x540>)
 800104e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001052:	4a4a      	ldr	r2, [pc, #296]	; (800117c <HAL_RCC_OscConfig+0x540>)
 8001054:	f023 0301 	bic.w	r3, r3, #1
 8001058:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800105c:	f7ff fab2 	bl	80005c4 <HAL_GetTick>
 8001060:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001064:	f7ff faae 	bl	80005c4 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b11      	cmp	r3, #17
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e242      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001076:	4b41      	ldr	r3, [pc, #260]	; (800117c <HAL_RCC_OscConfig+0x540>)
 8001078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1ef      	bne.n	8001064 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001084:	4b3d      	ldr	r3, [pc, #244]	; (800117c <HAL_RCC_OscConfig+0x540>)
 8001086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800108a:	f023 0210 	bic.w	r2, r3, #16
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	493a      	ldr	r1, [pc, #232]	; (800117c <HAL_RCC_OscConfig+0x540>)
 8001094:	4313      	orrs	r3, r2
 8001096:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800109a:	4b38      	ldr	r3, [pc, #224]	; (800117c <HAL_RCC_OscConfig+0x540>)
 800109c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010a0:	4a36      	ldr	r2, [pc, #216]	; (800117c <HAL_RCC_OscConfig+0x540>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010aa:	f7ff fa8b 	bl	80005c4 <HAL_GetTick>
 80010ae:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b2:	f7ff fa87 	bl	80005c4 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b11      	cmp	r3, #17
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e21b      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010c4:	4b2d      	ldr	r3, [pc, #180]	; (800117c <HAL_RCC_OscConfig+0x540>)
 80010c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0ef      	beq.n	80010b2 <HAL_RCC_OscConfig+0x476>
 80010d2:	e01b      	b.n	800110c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010d4:	4b29      	ldr	r3, [pc, #164]	; (800117c <HAL_RCC_OscConfig+0x540>)
 80010d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010da:	4a28      	ldr	r2, [pc, #160]	; (800117c <HAL_RCC_OscConfig+0x540>)
 80010dc:	f023 0301 	bic.w	r3, r3, #1
 80010e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010e4:	f7ff fa6e 	bl	80005c4 <HAL_GetTick>
 80010e8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ec:	f7ff fa6a 	bl	80005c4 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b11      	cmp	r3, #17
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e1fe      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010fe:	4b1f      	ldr	r3, [pc, #124]	; (800117c <HAL_RCC_OscConfig+0x540>)
 8001100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1ef      	bne.n	80010ec <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 80c1 	beq.w	800129c <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <HAL_RCC_OscConfig+0x540>)
 8001122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10e      	bne.n	800114a <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <HAL_RCC_OscConfig+0x540>)
 800112e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001130:	4a12      	ldr	r2, [pc, #72]	; (800117c <HAL_RCC_OscConfig+0x540>)
 8001132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001136:	6593      	str	r3, [r2, #88]	; 0x58
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <HAL_RCC_OscConfig+0x540>)
 800113a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001144:	2301      	movs	r3, #1
 8001146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800114a:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <HAL_RCC_OscConfig+0x544>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001152:	2b00      	cmp	r3, #0
 8001154:	d11c      	bne.n	8001190 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_RCC_OscConfig+0x544>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a09      	ldr	r2, [pc, #36]	; (8001180 <HAL_RCC_OscConfig+0x544>)
 800115c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001162:	f7ff fa2f 	bl	80005c4 <HAL_GetTick>
 8001166:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001168:	e00c      	b.n	8001184 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800116a:	f7ff fa2b 	bl	80005c4 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d905      	bls.n	8001184 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e1bf      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
 800117c:	40021000 	.word	0x40021000
 8001180:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001184:	4bb1      	ldr	r3, [pc, #708]	; (800144c <HAL_RCC_OscConfig+0x810>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0ec      	beq.n	800116a <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d02c      	beq.n	80011f6 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800119c:	4bac      	ldr	r3, [pc, #688]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 800119e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ae:	49a8      	ldr	r1, [pc, #672]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d010      	beq.n	80011e4 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80011c2:	4ba3      	ldr	r3, [pc, #652]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 80011c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011c8:	4aa1      	ldr	r2, [pc, #644]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80011d2:	4b9f      	ldr	r3, [pc, #636]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 80011d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011d8:	4a9d      	ldr	r2, [pc, #628]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011e2:	e018      	b.n	8001216 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80011e4:	4b9a      	ldr	r3, [pc, #616]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 80011e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ea:	4a99      	ldr	r2, [pc, #612]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011f4:	e00f      	b.n	8001216 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80011f6:	4b96      	ldr	r3, [pc, #600]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 80011f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011fc:	4a94      	ldr	r2, [pc, #592]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 80011fe:	f023 0301 	bic.w	r3, r3, #1
 8001202:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001206:	4b92      	ldr	r3, [pc, #584]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 8001208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800120c:	4a90      	ldr	r2, [pc, #576]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 800120e:	f023 0304 	bic.w	r3, r3, #4
 8001212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d016      	beq.n	800124c <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800121e:	f7ff f9d1 	bl	80005c4 <HAL_GetTick>
 8001222:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001224:	e00a      	b.n	800123c <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001226:	f7ff f9cd 	bl	80005c4 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	f241 3288 	movw	r2, #5000	; 0x1388
 8001234:	4293      	cmp	r3, r2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e15f      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800123c:	4b84      	ldr	r3, [pc, #528]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 800123e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0ed      	beq.n	8001226 <HAL_RCC_OscConfig+0x5ea>
 800124a:	e01d      	b.n	8001288 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124c:	f7ff f9ba 	bl	80005c4 <HAL_GetTick>
 8001250:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001252:	e00a      	b.n	800126a <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001254:	f7ff f9b6 	bl	80005c4 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001262:	4293      	cmp	r3, r2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e148      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800126a:	4b79      	ldr	r3, [pc, #484]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 800126c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1ed      	bne.n	8001254 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001278:	4b75      	ldr	r3, [pc, #468]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 800127a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800127e:	4a74      	ldr	r2, [pc, #464]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 8001280:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800128c:	2b01      	cmp	r3, #1
 800128e:	d105      	bne.n	800129c <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001290:	4b6f      	ldr	r3, [pc, #444]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 8001292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001294:	4a6e      	ldr	r2, [pc, #440]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 8001296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800129a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0320 	and.w	r3, r3, #32
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d03c      	beq.n	8001322 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d01c      	beq.n	80012ea <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012b0:	4b67      	ldr	r3, [pc, #412]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 80012b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012b6:	4a66      	ldr	r2, [pc, #408]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c0:	f7ff f980 	bl	80005c4 <HAL_GetTick>
 80012c4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012c8:	f7ff f97c 	bl	80005c4 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e110      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012da:	4b5d      	ldr	r3, [pc, #372]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 80012dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0ef      	beq.n	80012c8 <HAL_RCC_OscConfig+0x68c>
 80012e8:	e01b      	b.n	8001322 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012ea:	4b59      	ldr	r3, [pc, #356]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 80012ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012f0:	4a57      	ldr	r2, [pc, #348]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 80012f2:	f023 0301 	bic.w	r3, r3, #1
 80012f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fa:	f7ff f963 	bl	80005c4 <HAL_GetTick>
 80012fe:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001302:	f7ff f95f 	bl	80005c4 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e0f3      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001314:	4b4e      	ldr	r3, [pc, #312]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 8001316:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1ef      	bne.n	8001302 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 80e7 	beq.w	80014fa <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001330:	2b02      	cmp	r3, #2
 8001332:	f040 80b7 	bne.w	80014a4 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001336:	4b46      	ldr	r3, [pc, #280]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0203 	and.w	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	429a      	cmp	r2, r3
 8001348:	d124      	bne.n	8001394 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001354:	3b01      	subs	r3, #1
 8001356:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001358:	429a      	cmp	r2, r3
 800135a:	d11b      	bne.n	8001394 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001366:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001368:	429a      	cmp	r2, r3
 800136a:	d113      	bne.n	8001394 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001376:	085b      	lsrs	r3, r3, #1
 8001378:	3b01      	subs	r3, #1
 800137a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800137c:	429a      	cmp	r2, r3
 800137e:	d109      	bne.n	8001394 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	085b      	lsrs	r3, r3, #1
 800138c:	3b01      	subs	r3, #1
 800138e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001390:	429a      	cmp	r2, r3
 8001392:	d061      	beq.n	8001458 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	2b0c      	cmp	r3, #12
 8001398:	d056      	beq.n	8001448 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800139a:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a2c      	ldr	r2, [pc, #176]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 80013a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013a6:	f7ff f90d 	bl	80005c4 <HAL_GetTick>
 80013aa:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ae:	f7ff f909 	bl	80005c4 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e09d      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013c0:	4b23      	ldr	r3, [pc, #140]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f0      	bne.n	80013ae <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013cc:	4b20      	ldr	r3, [pc, #128]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 80013ce:	68da      	ldr	r2, [r3, #12]
 80013d0:	4b20      	ldr	r3, [pc, #128]	; (8001454 <HAL_RCC_OscConfig+0x818>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013dc:	3a01      	subs	r2, #1
 80013de:	0112      	lsls	r2, r2, #4
 80013e0:	4311      	orrs	r1, r2
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013e6:	0212      	lsls	r2, r2, #8
 80013e8:	4311      	orrs	r1, r2
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80013ee:	0852      	lsrs	r2, r2, #1
 80013f0:	3a01      	subs	r2, #1
 80013f2:	0552      	lsls	r2, r2, #21
 80013f4:	4311      	orrs	r1, r2
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013fa:	0852      	lsrs	r2, r2, #1
 80013fc:	3a01      	subs	r2, #1
 80013fe:	0652      	lsls	r2, r2, #25
 8001400:	430a      	orrs	r2, r1
 8001402:	4913      	ldr	r1, [pc, #76]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 8001404:	4313      	orrs	r3, r2
 8001406:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a10      	ldr	r2, [pc, #64]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 800140e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001412:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 800141a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800141e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001420:	f7ff f8d0 	bl	80005c4 <HAL_GetTick>
 8001424:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001428:	f7ff f8cc 	bl	80005c4 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e060      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <HAL_RCC_OscConfig+0x814>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001446:	e058      	b.n	80014fa <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e057      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
 800144c:	40007000 	.word	0x40007000
 8001450:	40021000 	.word	0x40021000
 8001454:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001458:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <HAL_RCC_OscConfig+0x8c8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d14a      	bne.n	80014fa <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001464:	4b27      	ldr	r3, [pc, #156]	; (8001504 <HAL_RCC_OscConfig+0x8c8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a26      	ldr	r2, [pc, #152]	; (8001504 <HAL_RCC_OscConfig+0x8c8>)
 800146a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800146e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001470:	4b24      	ldr	r3, [pc, #144]	; (8001504 <HAL_RCC_OscConfig+0x8c8>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	4a23      	ldr	r2, [pc, #140]	; (8001504 <HAL_RCC_OscConfig+0x8c8>)
 8001476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800147a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800147c:	f7ff f8a2 	bl	80005c4 <HAL_GetTick>
 8001480:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001484:	f7ff f89e 	bl	80005c4 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e032      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_RCC_OscConfig+0x8c8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0x848>
 80014a2:	e02a      	b.n	80014fa <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014a4:	6a3b      	ldr	r3, [r7, #32]
 80014a6:	2b0c      	cmp	r3, #12
 80014a8:	d025      	beq.n	80014f6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <HAL_RCC_OscConfig+0x8c8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a15      	ldr	r2, [pc, #84]	; (8001504 <HAL_RCC_OscConfig+0x8c8>)
 80014b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014b4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <HAL_RCC_OscConfig+0x8c8>)
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	4a12      	ldr	r2, [pc, #72]	; (8001504 <HAL_RCC_OscConfig+0x8c8>)
 80014bc:	f023 0303 	bic.w	r3, r3, #3
 80014c0:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <HAL_RCC_OscConfig+0x8c8>)
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	4a0f      	ldr	r2, [pc, #60]	; (8001504 <HAL_RCC_OscConfig+0x8c8>)
 80014c8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80014cc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ce:	f7ff f879 	bl	80005c4 <HAL_GetTick>
 80014d2:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d6:	f7ff f875 	bl	80005c4 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e009      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_RCC_OscConfig+0x8c8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f0      	bne.n	80014d6 <HAL_RCC_OscConfig+0x89a>
 80014f4:	e001      	b.n	80014fa <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3728      	adds	r7, #40	; 0x28
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021000 	.word	0x40021000

08001508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e0c8      	b.n	80016ae <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800151c:	4b66      	ldr	r3, [pc, #408]	; (80016b8 <HAL_RCC_ClockConfig+0x1b0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d910      	bls.n	800154c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152a:	4b63      	ldr	r3, [pc, #396]	; (80016b8 <HAL_RCC_ClockConfig+0x1b0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f023 0207 	bic.w	r2, r3, #7
 8001532:	4961      	ldr	r1, [pc, #388]	; (80016b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	4313      	orrs	r3, r2
 8001538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153a:	4b5f      	ldr	r3, [pc, #380]	; (80016b8 <HAL_RCC_ClockConfig+0x1b0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d001      	beq.n	800154c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0b0      	b.n	80016ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b00      	cmp	r3, #0
 8001556:	d04c      	beq.n	80015f2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b03      	cmp	r3, #3
 800155e:	d107      	bne.n	8001570 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001560:	4b56      	ldr	r3, [pc, #344]	; (80016bc <HAL_RCC_ClockConfig+0x1b4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d121      	bne.n	80015b0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e09e      	b.n	80016ae <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b02      	cmp	r3, #2
 8001576:	d107      	bne.n	8001588 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001578:	4b50      	ldr	r3, [pc, #320]	; (80016bc <HAL_RCC_ClockConfig+0x1b4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d115      	bne.n	80015b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e092      	b.n	80016ae <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001590:	4b4a      	ldr	r3, [pc, #296]	; (80016bc <HAL_RCC_ClockConfig+0x1b4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d109      	bne.n	80015b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e086      	b.n	80016ae <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a0:	4b46      	ldr	r3, [pc, #280]	; (80016bc <HAL_RCC_ClockConfig+0x1b4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e07e      	b.n	80016ae <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015b0:	4b42      	ldr	r3, [pc, #264]	; (80016bc <HAL_RCC_ClockConfig+0x1b4>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f023 0203 	bic.w	r2, r3, #3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	493f      	ldr	r1, [pc, #252]	; (80016bc <HAL_RCC_ClockConfig+0x1b4>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015c2:	f7fe ffff 	bl	80005c4 <HAL_GetTick>
 80015c6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c8:	e00a      	b.n	80015e0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ca:	f7fe fffb 	bl	80005c4 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d8:	4293      	cmp	r3, r2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e066      	b.n	80016ae <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015e0:	4b36      	ldr	r3, [pc, #216]	; (80016bc <HAL_RCC_ClockConfig+0x1b4>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 020c 	and.w	r2, r3, #12
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d1eb      	bne.n	80015ca <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d008      	beq.n	8001610 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015fe:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <HAL_RCC_ClockConfig+0x1b4>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	492c      	ldr	r1, [pc, #176]	; (80016bc <HAL_RCC_ClockConfig+0x1b4>)
 800160c:	4313      	orrs	r3, r2
 800160e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001610:	4b29      	ldr	r3, [pc, #164]	; (80016b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d210      	bcs.n	8001640 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161e:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f023 0207 	bic.w	r2, r3, #7
 8001626:	4924      	ldr	r1, [pc, #144]	; (80016b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	4313      	orrs	r3, r2
 800162c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800162e:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e036      	b.n	80016ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d008      	beq.n	800165e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <HAL_RCC_ClockConfig+0x1b4>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	4918      	ldr	r1, [pc, #96]	; (80016bc <HAL_RCC_ClockConfig+0x1b4>)
 800165a:	4313      	orrs	r3, r2
 800165c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b00      	cmp	r3, #0
 8001668:	d009      	beq.n	800167e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <HAL_RCC_ClockConfig+0x1b4>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4910      	ldr	r1, [pc, #64]	; (80016bc <HAL_RCC_ClockConfig+0x1b4>)
 800167a:	4313      	orrs	r3, r2
 800167c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800167e:	f000 f825 	bl	80016cc <HAL_RCC_GetSysClockFreq>
 8001682:	4601      	mov	r1, r0
 8001684:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <HAL_RCC_ClockConfig+0x1b4>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	091b      	lsrs	r3, r3, #4
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	4a0c      	ldr	r2, [pc, #48]	; (80016c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001690:	5cd3      	ldrb	r3, [r2, r3]
 8001692:	f003 031f 	and.w	r3, r3, #31
 8001696:	fa21 f303 	lsr.w	r3, r1, r3
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe ff3e 	bl	8000524 <HAL_InitTick>
 80016a8:	4603      	mov	r3, r0
 80016aa:	72fb      	strb	r3, [r7, #11]

  return status;
 80016ac:	7afb      	ldrb	r3, [r7, #11]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40022000 	.word	0x40022000
 80016bc:	40021000 	.word	0x40021000
 80016c0:	08001910 	.word	0x08001910
 80016c4:	20000000 	.word	0x20000000
 80016c8:	20000004 	.word	0x20000004

080016cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	; 0x24
 80016d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016da:	4b3d      	ldr	r3, [pc, #244]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016e4:	4b3a      	ldr	r3, [pc, #232]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_RCC_GetSysClockFreq+0x34>
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	2b0c      	cmp	r3, #12
 80016f8:	d121      	bne.n	800173e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d11e      	bne.n	800173e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001700:	4b33      	ldr	r3, [pc, #204]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0308 	and.w	r3, r3, #8
 8001708:	2b00      	cmp	r3, #0
 800170a:	d107      	bne.n	800171c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800170c:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800170e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001712:	0a1b      	lsrs	r3, r3, #8
 8001714:	f003 030f 	and.w	r3, r3, #15
 8001718:	61fb      	str	r3, [r7, #28]
 800171a:	e005      	b.n	8001728 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800171c:	4b2c      	ldr	r3, [pc, #176]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	091b      	lsrs	r3, r3, #4
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001728:	4a2a      	ldr	r2, [pc, #168]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001730:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10d      	bne.n	8001754 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800173c:	e00a      	b.n	8001754 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	2b04      	cmp	r3, #4
 8001742:	d102      	bne.n	800174a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001744:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001746:	61bb      	str	r3, [r7, #24]
 8001748:	e004      	b.n	8001754 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	2b08      	cmp	r3, #8
 800174e:	d101      	bne.n	8001754 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001750:	4b22      	ldr	r3, [pc, #136]	; (80017dc <HAL_RCC_GetSysClockFreq+0x110>)
 8001752:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	2b0c      	cmp	r3, #12
 8001758:	d133      	bne.n	80017c2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d002      	beq.n	8001770 <HAL_RCC_GetSysClockFreq+0xa4>
 800176a:	2b03      	cmp	r3, #3
 800176c:	d003      	beq.n	8001776 <HAL_RCC_GetSysClockFreq+0xaa>
 800176e:	e005      	b.n	800177c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001770:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001772:	617b      	str	r3, [r7, #20]
      break;
 8001774:	e005      	b.n	8001782 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001776:	4b19      	ldr	r3, [pc, #100]	; (80017dc <HAL_RCC_GetSysClockFreq+0x110>)
 8001778:	617b      	str	r3, [r7, #20]
      break;
 800177a:	e002      	b.n	8001782 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	617b      	str	r3, [r7, #20]
      break;
 8001780:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001782:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	091b      	lsrs	r3, r3, #4
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	3301      	adds	r3, #1
 800178e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	fb02 f203 	mul.w	r2, r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	0e5b      	lsrs	r3, r3, #25
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	3301      	adds	r3, #1
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80017c2:	69bb      	ldr	r3, [r7, #24]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3724      	adds	r7, #36	; 0x24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	40021000 	.word	0x40021000
 80017d4:	08001920 	.word	0x08001920
 80017d8:	00f42400 	.word	0x00f42400
 80017dc:	007a1200 	.word	0x007a1200

080017e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80017ec:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80017f8:	f7ff f9bc 	bl	8000b74 <HAL_PWREx_GetVoltageRange>
 80017fc:	6178      	str	r0, [r7, #20]
 80017fe:	e014      	b.n	800182a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001800:	4b25      	ldr	r3, [pc, #148]	; (8001898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001804:	4a24      	ldr	r2, [pc, #144]	; (8001898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180a:	6593      	str	r3, [r2, #88]	; 0x58
 800180c:	4b22      	ldr	r3, [pc, #136]	; (8001898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800180e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001818:	f7ff f9ac 	bl	8000b74 <HAL_PWREx_GetVoltageRange>
 800181c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800181e:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001822:	4a1d      	ldr	r2, [pc, #116]	; (8001898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001828:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001830:	d10b      	bne.n	800184a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b80      	cmp	r3, #128	; 0x80
 8001836:	d919      	bls.n	800186c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2ba0      	cmp	r3, #160	; 0xa0
 800183c:	d902      	bls.n	8001844 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800183e:	2302      	movs	r3, #2
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	e013      	b.n	800186c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001844:	2301      	movs	r3, #1
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	e010      	b.n	800186c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b80      	cmp	r3, #128	; 0x80
 800184e:	d902      	bls.n	8001856 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001850:	2303      	movs	r3, #3
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	e00a      	b.n	800186c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b80      	cmp	r3, #128	; 0x80
 800185a:	d102      	bne.n	8001862 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800185c:	2302      	movs	r3, #2
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	e004      	b.n	800186c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b70      	cmp	r3, #112	; 0x70
 8001866:	d101      	bne.n	800186c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001868:	2301      	movs	r3, #1
 800186a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f023 0207 	bic.w	r2, r3, #7
 8001874:	4909      	ldr	r1, [pc, #36]	; (800189c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	429a      	cmp	r2, r3
 8001888:	d001      	beq.n	800188e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40021000 	.word	0x40021000
 800189c:	40022000 	.word	0x40022000

080018a0 <__libc_init_array>:
 80018a0:	b570      	push	{r4, r5, r6, lr}
 80018a2:	4e0d      	ldr	r6, [pc, #52]	; (80018d8 <__libc_init_array+0x38>)
 80018a4:	4c0d      	ldr	r4, [pc, #52]	; (80018dc <__libc_init_array+0x3c>)
 80018a6:	1ba4      	subs	r4, r4, r6
 80018a8:	10a4      	asrs	r4, r4, #2
 80018aa:	2500      	movs	r5, #0
 80018ac:	42a5      	cmp	r5, r4
 80018ae:	d109      	bne.n	80018c4 <__libc_init_array+0x24>
 80018b0:	4e0b      	ldr	r6, [pc, #44]	; (80018e0 <__libc_init_array+0x40>)
 80018b2:	4c0c      	ldr	r4, [pc, #48]	; (80018e4 <__libc_init_array+0x44>)
 80018b4:	f000 f820 	bl	80018f8 <_init>
 80018b8:	1ba4      	subs	r4, r4, r6
 80018ba:	10a4      	asrs	r4, r4, #2
 80018bc:	2500      	movs	r5, #0
 80018be:	42a5      	cmp	r5, r4
 80018c0:	d105      	bne.n	80018ce <__libc_init_array+0x2e>
 80018c2:	bd70      	pop	{r4, r5, r6, pc}
 80018c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018c8:	4798      	blx	r3
 80018ca:	3501      	adds	r5, #1
 80018cc:	e7ee      	b.n	80018ac <__libc_init_array+0xc>
 80018ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018d2:	4798      	blx	r3
 80018d4:	3501      	adds	r5, #1
 80018d6:	e7f2      	b.n	80018be <__libc_init_array+0x1e>
 80018d8:	08001950 	.word	0x08001950
 80018dc:	08001950 	.word	0x08001950
 80018e0:	08001950 	.word	0x08001950
 80018e4:	08001954 	.word	0x08001954

080018e8 <memset>:
 80018e8:	4402      	add	r2, r0
 80018ea:	4603      	mov	r3, r0
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d100      	bne.n	80018f2 <memset+0xa>
 80018f0:	4770      	bx	lr
 80018f2:	f803 1b01 	strb.w	r1, [r3], #1
 80018f6:	e7f9      	b.n	80018ec <memset+0x4>

080018f8 <_init>:
 80018f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018fa:	bf00      	nop
 80018fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018fe:	bc08      	pop	{r3}
 8001900:	469e      	mov	lr, r3
 8001902:	4770      	bx	lr

08001904 <_fini>:
 8001904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001906:	bf00      	nop
 8001908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800190a:	bc08      	pop	{r3}
 800190c:	469e      	mov	lr, r3
 800190e:	4770      	bx	lr
