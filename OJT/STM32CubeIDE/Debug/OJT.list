
OJT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000387c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08003a0c  08003a0c  00013a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b10  08003b10  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003b10  08003b10  00013b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b18  08003b18  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b18  08003b18  00013b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b1c  08003b1c  00013b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  08003b90  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003b90  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af47  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b07  00000000  00000000  0002afe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000948  00000000  00000000  0002caf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000850  00000000  00000000  0002d438  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a8e2  00000000  00000000  0002dc88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000879b  00000000  00000000  0004856a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a143d  00000000  00000000  00050d05  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f2142  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b08  00000000  00000000  000f21c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080039f4 	.word	0x080039f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080039f4 	.word	0x080039f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 030c 	add.w	r3, r7, #12
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	4b25      	ldr	r3, [pc, #148]	; (800061c <MX_GPIO_Init+0xac>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	4a24      	ldr	r2, [pc, #144]	; (800061c <MX_GPIO_Init+0xac>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000592:	4b22      	ldr	r3, [pc, #136]	; (800061c <MX_GPIO_Init+0xac>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b1f      	ldr	r3, [pc, #124]	; (800061c <MX_GPIO_Init+0xac>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a2:	4a1e      	ldr	r2, [pc, #120]	; (800061c <MX_GPIO_Init+0xac>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005aa:	4b1c      	ldr	r3, [pc, #112]	; (800061c <MX_GPIO_Init+0xac>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b6:	4b19      	ldr	r3, [pc, #100]	; (800061c <MX_GPIO_Init+0xac>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	4a18      	ldr	r2, [pc, #96]	; (800061c <MX_GPIO_Init+0xac>)
 80005bc:	f043 0302 	orr.w	r3, r3, #2
 80005c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c2:	4b16      	ldr	r3, [pc, #88]	; (800061c <MX_GPIO_Init+0xac>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	f003 0302 	and.w	r3, r3, #2
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_USER_GPIO_Port, LD4_USER_Pin, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d4:	4812      	ldr	r0, [pc, #72]	; (8000620 <MX_GPIO_Init+0xb0>)
 80005d6:	f000 fdad 	bl	8001134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_USER_Pin;
 80005da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e0:	2300      	movs	r3, #0
 80005e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_USER_GPIO_Port, &GPIO_InitStruct);
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	4619      	mov	r1, r3
 80005ee:	480d      	ldr	r0, [pc, #52]	; (8000624 <MX_GPIO_Init+0xb4>)
 80005f0:	f000 fc16 	bl	8000e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_USER_Pin;
 80005f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD4_USER_GPIO_Port, &GPIO_InitStruct);
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	4619      	mov	r1, r3
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <MX_GPIO_Init+0xb0>)
 800060e:	f000 fc07 	bl	8000e20 <HAL_GPIO_Init>

}
 8000612:	bf00      	nop
 8000614:	3720      	adds	r7, #32
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40021000 	.word	0x40021000
 8000620:	48000400 	.word	0x48000400
 8000624:	48000800 	.word	0x48000800

08000628 <__io_putchar>:
#else
    #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000630:	1d39      	adds	r1, r7, #4
 8000632:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000636:	2201      	movs	r2, #1
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <__io_putchar+0x20>)
 800063a:	f001 fe35 	bl	80022a8 <HAL_UART_Transmit>
  return ch;
 800063e:	687b      	ldr	r3, [r7, #4]
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000098 	.word	0x20000098

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f000 fa69 	bl	8000b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 f835 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065a:	f7ff ff89 	bl	8000570 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800065e:	f000 f991 	bl	8000984 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t check_button;
  uint8_t cnt_from_start = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
	  cnt_from_start++;
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	3301      	adds	r3, #1
 800066a:	71fb      	strb	r3, [r7, #7]
	  printf("Hello DongSik!! \r\n");
 800066c:	4811      	ldr	r0, [pc, #68]	; (80006b4 <main+0x68>)
 800066e:	f002 faed 	bl	8002c4c <puts>
	  printf("time : %d \r\n", cnt_from_start);
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	4619      	mov	r1, r3
 8000676:	4810      	ldr	r0, [pc, #64]	; (80006b8 <main+0x6c>)
 8000678:	f002 fa74 	bl	8002b64 <iprintf>
	  HAL_Delay(1000);
 800067c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000680:	f000 fac6 	bl	8000c10 <HAL_Delay>

	  /*polling*/
	  check_button = HAL_GPIO_ReadPin(B1_USER_GPIO_Port, B1_USER_Pin);
 8000684:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000688:	480c      	ldr	r0, [pc, #48]	; (80006bc <main+0x70>)
 800068a:	f000 fd3b 	bl	8001104 <HAL_GPIO_ReadPin>
 800068e:	4603      	mov	r3, r0
 8000690:	71bb      	strb	r3, [r7, #6]
	  if (check_button)
 8000692:	79bb      	ldrb	r3, [r7, #6]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d006      	beq.n	80006a6 <main+0x5a>
	  {
		  HAL_GPIO_WritePin(LD4_USER_GPIO_Port, LD4_USER_Pin, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069e:	4808      	ldr	r0, [pc, #32]	; (80006c0 <main+0x74>)
 80006a0:	f000 fd48 	bl	8001134 <HAL_GPIO_WritePin>
 80006a4:	e7df      	b.n	8000666 <main+0x1a>
	  } else
	  {
		  HAL_GPIO_WritePin(LD4_USER_GPIO_Port, LD4_USER_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <main+0x74>)
 80006ae:	f000 fd41 	bl	8001134 <HAL_GPIO_WritePin>
	  cnt_from_start++;
 80006b2:	e7d8      	b.n	8000666 <main+0x1a>
 80006b4:	08003a0c 	.word	0x08003a0c
 80006b8:	08003a20 	.word	0x08003a20
 80006bc:	48000800 	.word	0x48000800
 80006c0:	48000400 	.word	0x48000400

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b0a4      	sub	sp, #144	; 0x90
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006ce:	2244      	movs	r2, #68	; 0x44
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fa3e 	bl	8002b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2234      	movs	r2, #52	; 0x34
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 fa30 	bl	8002b54 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006f8:	f000 fd42 	bl	8001180 <HAL_PWREx_ControlVoltageScaling>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000702:	f000 f848 	bl	8000796 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000706:	2310      	movs	r3, #16
 8000708:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800070a:	2301      	movs	r3, #1
 800070c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000712:	2360      	movs	r3, #96	; 0x60
 8000714:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000716:	2302      	movs	r3, #2
 8000718:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800071a:	2301      	movs	r3, #1
 800071c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800071e:	2301      	movs	r3, #1
 8000720:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000724:	2328      	movs	r3, #40	; 0x28
 8000726:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800072a:	2302      	movs	r3, #2
 800072c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fd76 	bl	800122c <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000746:	f000 f826 	bl	8000796 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	230f      	movs	r3, #15
 800074c:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2303      	movs	r3, #3
 8000750:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800075e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000762:	2104      	movs	r1, #4
 8000764:	4618      	mov	r0, r3
 8000766:	f001 f9c7 	bl	8001af8 <HAL_RCC_ClockConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000770:	f000 f811 	bl	8000796 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000774:	2302      	movs	r3, #2
 8000776:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	4618      	mov	r0, r3
 8000780:	f001 fbbe 	bl	8001f00 <HAL_RCCEx_PeriphCLKConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800078a:	f000 f804 	bl	8000796 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3790      	adds	r7, #144	; 0x90
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079a:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079c:	e7fe      	b.n	800079c <Error_Handler+0x6>
	...

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <HAL_MspInit+0x44>)
 80007a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007aa:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <HAL_MspInit+0x44>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6613      	str	r3, [r2, #96]	; 0x60
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <HAL_MspInit+0x44>)
 80007b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <HAL_MspInit+0x44>)
 80007c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c2:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <HAL_MspInit+0x44>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c8:	6593      	str	r3, [r2, #88]	; 0x58
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_MspInit+0x44>)
 80007cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <NMI_Handler+0x4>

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <MemManage_Handler+0x4>

080007fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <BusFault_Handler+0x4>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <UsageFault_Handler+0x4>

08000806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000834:	f000 f9cc 	bl	8000bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}

0800083c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	e00a      	b.n	8000864 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800084e:	f3af 8000 	nop.w
 8000852:	4601      	mov	r1, r0
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	1c5a      	adds	r2, r3, #1
 8000858:	60ba      	str	r2, [r7, #8]
 800085a:	b2ca      	uxtb	r2, r1
 800085c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	3301      	adds	r3, #1
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697a      	ldr	r2, [r7, #20]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	429a      	cmp	r2, r3
 800086a:	dbf0      	blt.n	800084e <_read+0x12>
	}

return len;
 800086c:	687b      	ldr	r3, [r7, #4]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3718      	adds	r7, #24
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b086      	sub	sp, #24
 800087a:	af00      	add	r7, sp, #0
 800087c:	60f8      	str	r0, [r7, #12]
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	e009      	b.n	800089c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	1c5a      	adds	r2, r3, #1
 800088c:	60ba      	str	r2, [r7, #8]
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fec9 	bl	8000628 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	3301      	adds	r3, #1
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	697a      	ldr	r2, [r7, #20]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	dbf1      	blt.n	8000888 <_write+0x12>
	}
	return len;
 80008a4:	687b      	ldr	r3, [r7, #4]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <_close>:

int _close(int file)
{
 80008ae:	b480      	push	{r7}
 80008b0:	b083      	sub	sp, #12
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
	return -1;
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
 80008ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008d6:	605a      	str	r2, [r3, #4]
	return 0;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <_isatty>:

int _isatty(int file)
{
 80008e6:	b480      	push	{r7}
 80008e8:	b083      	sub	sp, #12
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
	return 1;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
	return 0;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3714      	adds	r7, #20
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000920:	4a14      	ldr	r2, [pc, #80]	; (8000974 <_sbrk+0x5c>)
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <_sbrk+0x60>)
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800092c:	4b13      	ldr	r3, [pc, #76]	; (800097c <_sbrk+0x64>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d102      	bne.n	800093a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <_sbrk+0x64>)
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <_sbrk+0x68>)
 8000938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <_sbrk+0x64>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	429a      	cmp	r2, r3
 8000946:	d207      	bcs.n	8000958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000948:	f002 f8da 	bl	8002b00 <__errno>
 800094c:	4602      	mov	r2, r0
 800094e:	230c      	movs	r3, #12
 8000950:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000952:	f04f 33ff 	mov.w	r3, #4294967295
 8000956:	e009      	b.n	800096c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <_sbrk+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <_sbrk+0x64>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <_sbrk+0x64>)
 8000968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800096a:	68fb      	ldr	r3, [r7, #12]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000a000 	.word	0x2000a000
 8000978:	00000400 	.word	0x00000400
 800097c:	2000008c 	.word	0x2000008c
 8000980:	20000120 	.word	0x20000120

08000984 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_USART2_UART_Init+0x58>)
 800098a:	4a15      	ldr	r2, [pc, #84]	; (80009e0 <MX_USART2_UART_Init+0x5c>)
 800098c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_USART2_UART_Init+0x58>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_USART2_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_USART2_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_USART2_UART_Init+0x58>)
 80009c8:	f001 fc20 	bl	800220c <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009d2:	f7ff fee0 	bl	8000796 <Error_Handler>
  }

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000098 	.word	0x20000098
 80009e0:	40004400 	.word	0x40004400

080009e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a17      	ldr	r2, [pc, #92]	; (8000a60 <HAL_UART_MspInit+0x7c>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d128      	bne.n	8000a58 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <HAL_UART_MspInit+0x80>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0a:	4a16      	ldr	r2, [pc, #88]	; (8000a64 <HAL_UART_MspInit+0x80>)
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a10:	6593      	str	r3, [r2, #88]	; 0x58
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <HAL_UART_MspInit+0x80>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <HAL_UART_MspInit+0x80>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4a10      	ldr	r2, [pc, #64]	; (8000a64 <HAL_UART_MspInit+0x80>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_UART_MspInit+0x80>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000a36:	230c      	movs	r3, #12
 8000a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a46:	2307      	movs	r3, #7
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a54:	f000 f9e4 	bl	8000e20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3728      	adds	r7, #40	; 0x28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40004400 	.word	0x40004400
 8000a64:	40021000 	.word	0x40021000

08000a68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a6c:	f000 f826 	bl	8000abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a70:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a72:	e003      	b.n	8000a7c <LoopCopyDataInit>

08000a74 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a74:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a76:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a78:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a7a:	3104      	adds	r1, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a7c:	480a      	ldr	r0, [pc, #40]	; (8000aa8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a80:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a82:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a84:	d3f6      	bcc.n	8000a74 <CopyDataInit>
	ldr	r2, =_sbss
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a88:	e002      	b.n	8000a90 <LoopFillZerobss>

08000a8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a8a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a8c:	f842 3b04 	str.w	r3, [r2], #4

08000a90 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <LoopForever+0x16>)
	cmp	r2, r3
 8000a92:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a94:	d3f9      	bcc.n	8000a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a96:	f002 f839 	bl	8002b0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a9a:	f7ff fdd7 	bl	800064c <main>

08000a9e <LoopForever>:

LoopForever:
    b LoopForever
 8000a9e:	e7fe      	b.n	8000a9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000aa0:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000aa4:	08003b20 	.word	0x08003b20
	ldr	r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000aac:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000ab0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000ab4:	20000120 	.word	0x20000120

08000ab8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC1_2_IRQHandler>
	...

08000abc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <SystemInit+0x64>)
 8000ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac6:	4a16      	ldr	r2, [pc, #88]	; (8000b20 <SystemInit+0x64>)
 8000ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <SystemInit+0x68>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a13      	ldr	r2, [pc, #76]	; (8000b24 <SystemInit+0x68>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <SystemInit+0x68>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <SystemInit+0x68>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <SystemInit+0x68>)
 8000ae8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000aec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000af0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <SystemInit+0x68>)
 8000af4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000af8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <SystemInit+0x68>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a09      	ldr	r2, [pc, #36]	; (8000b24 <SystemInit+0x68>)
 8000b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <SystemInit+0x68>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <SystemInit+0x64>)
 8000b0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b12:	609a      	str	r2, [r3, #8]
#endif
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00
 8000b24:	40021000 	.word	0x40021000

08000b28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b32:	2003      	movs	r0, #3
 8000b34:	f000 f940 	bl	8000db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f000 f80d 	bl	8000b58 <HAL_InitTick>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d002      	beq.n	8000b4a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	71fb      	strb	r3, [r7, #7]
 8000b48:	e001      	b.n	8000b4e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b4a:	f7ff fe29 	bl	80007a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b60:	2300      	movs	r3, #0
 8000b62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b64:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <HAL_InitTick+0x6c>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d023      	beq.n	8000bb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <HAL_InitTick+0x70>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <HAL_InitTick+0x6c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4619      	mov	r1, r3
 8000b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 f93f 	bl	8000e06 <HAL_SYSTICK_Config>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d10f      	bne.n	8000bae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b0f      	cmp	r3, #15
 8000b92:	d809      	bhi.n	8000ba8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b94:	2200      	movs	r2, #0
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9c:	f000 f917 	bl	8000dce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <HAL_InitTick+0x74>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6013      	str	r3, [r2, #0]
 8000ba6:	e007      	b.n	8000bb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	73fb      	strb	r3, [r7, #15]
 8000bac:	e004      	b.n	8000bb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	73fb      	strb	r3, [r7, #15]
 8000bb2:	e001      	b.n	8000bb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000004 	.word	0x20000004

08000bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_IncTick+0x20>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x24>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_IncTick+0x24>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000118 	.word	0x20000118

08000bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <HAL_GetTick+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000118 	.word	0x20000118

08000c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c18:	f7ff ffee 	bl	8000bf8 <HAL_GetTick>
 8000c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c28:	d005      	beq.n	8000c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_Delay+0x40>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4413      	add	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c36:	bf00      	nop
 8000c38:	f7ff ffde 	bl	8000bf8 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d8f7      	bhi.n	8000c38 <HAL_Delay+0x28>
  {
  }
}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000008 	.word	0x20000008

08000c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c70:	4013      	ands	r3, r2
 8000c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c86:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	60d3      	str	r3, [r2, #12]
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	f003 0307 	and.w	r3, r3, #7
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	; (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
         );
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	; 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d84:	d301      	bcc.n	8000d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00f      	b.n	8000daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <SysTick_Config+0x40>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d92:	210f      	movs	r1, #15
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f7ff ff8e 	bl	8000cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <SysTick_Config+0x40>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da2:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <SysTick_Config+0x40>)
 8000da4:	2207      	movs	r2, #7
 8000da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	e000e010 	.word	0xe000e010

08000db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ff47 	bl	8000c54 <__NVIC_SetPriorityGrouping>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000de0:	f7ff ff5c 	bl	8000c9c <__NVIC_GetPriorityGrouping>
 8000de4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	68b9      	ldr	r1, [r7, #8]
 8000dea:	6978      	ldr	r0, [r7, #20]
 8000dec:	f7ff ff8e 	bl	8000d0c <NVIC_EncodePriority>
 8000df0:	4602      	mov	r2, r0
 8000df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df6:	4611      	mov	r1, r2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff5d 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ffb0 	bl	8000d74 <SysTick_Config>
 8000e14:	4603      	mov	r3, r0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b087      	sub	sp, #28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2e:	e14e      	b.n	80010ce <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	2101      	movs	r1, #1
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 8140 	beq.w	80010c8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d00b      	beq.n	8000e68 <HAL_GPIO_Init+0x48>
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d007      	beq.n	8000e68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e5c:	2b11      	cmp	r3, #17
 8000e5e:	d003      	beq.n	8000e68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b12      	cmp	r3, #18
 8000e66:	d130      	bne.n	8000eca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	091b      	lsrs	r3, r3, #4
 8000eb4:	f003 0201 	and.w	r2, r3, #1
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0xea>
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b12      	cmp	r3, #18
 8000f08:	d123      	bne.n	8000f52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	08da      	lsrs	r2, r3, #3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3208      	adds	r2, #8
 8000f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	220f      	movs	r2, #15
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	691a      	ldr	r2, [r3, #16]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	f003 0307 	and.w	r3, r3, #7
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	08da      	lsrs	r2, r3, #3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3208      	adds	r2, #8
 8000f4c:	6939      	ldr	r1, [r7, #16]
 8000f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0203 	and.w	r2, r3, #3
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 809a 	beq.w	80010c8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f94:	4b55      	ldr	r3, [pc, #340]	; (80010ec <HAL_GPIO_Init+0x2cc>)
 8000f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f98:	4a54      	ldr	r2, [pc, #336]	; (80010ec <HAL_GPIO_Init+0x2cc>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa0:	4b52      	ldr	r3, [pc, #328]	; (80010ec <HAL_GPIO_Init+0x2cc>)
 8000fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fac:	4a50      	ldr	r2, [pc, #320]	; (80010f0 <HAL_GPIO_Init+0x2d0>)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fd6:	d013      	beq.n	8001000 <HAL_GPIO_Init+0x1e0>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a46      	ldr	r2, [pc, #280]	; (80010f4 <HAL_GPIO_Init+0x2d4>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d00d      	beq.n	8000ffc <HAL_GPIO_Init+0x1dc>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a45      	ldr	r2, [pc, #276]	; (80010f8 <HAL_GPIO_Init+0x2d8>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d007      	beq.n	8000ff8 <HAL_GPIO_Init+0x1d8>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a44      	ldr	r2, [pc, #272]	; (80010fc <HAL_GPIO_Init+0x2dc>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d101      	bne.n	8000ff4 <HAL_GPIO_Init+0x1d4>
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e006      	b.n	8001002 <HAL_GPIO_Init+0x1e2>
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	e004      	b.n	8001002 <HAL_GPIO_Init+0x1e2>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e002      	b.n	8001002 <HAL_GPIO_Init+0x1e2>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e000      	b.n	8001002 <HAL_GPIO_Init+0x1e2>
 8001000:	2300      	movs	r3, #0
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	f002 0203 	and.w	r2, r2, #3
 8001008:	0092      	lsls	r2, r2, #2
 800100a:	4093      	lsls	r3, r2
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001012:	4937      	ldr	r1, [pc, #220]	; (80010f0 <HAL_GPIO_Init+0x2d0>)
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	3302      	adds	r3, #2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001020:	4b37      	ldr	r3, [pc, #220]	; (8001100 <HAL_GPIO_Init+0x2e0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001044:	4a2e      	ldr	r2, [pc, #184]	; (8001100 <HAL_GPIO_Init+0x2e0>)
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800104a:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <HAL_GPIO_Init+0x2e0>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	43db      	mvns	r3, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800106e:	4a24      	ldr	r2, [pc, #144]	; (8001100 <HAL_GPIO_Init+0x2e0>)
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001074:	4b22      	ldr	r3, [pc, #136]	; (8001100 <HAL_GPIO_Init+0x2e0>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	43db      	mvns	r3, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001098:	4a19      	ldr	r2, [pc, #100]	; (8001100 <HAL_GPIO_Init+0x2e0>)
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <HAL_GPIO_Init+0x2e0>)
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010c2:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <HAL_GPIO_Init+0x2e0>)
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	3301      	adds	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	fa22 f303 	lsr.w	r3, r2, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f47f aea9 	bne.w	8000e30 <HAL_GPIO_Init+0x10>
  }
}
 80010de:	bf00      	nop
 80010e0:	371c      	adds	r7, #28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40010000 	.word	0x40010000
 80010f4:	48000400 	.word	0x48000400
 80010f8:	48000800 	.word	0x48000800
 80010fc:	48000c00 	.word	0x48000c00
 8001100:	40010400 	.word	0x40010400

08001104 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	691a      	ldr	r2, [r3, #16]
 8001114:	887b      	ldrh	r3, [r7, #2]
 8001116:	4013      	ands	r3, r2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d002      	beq.n	8001122 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800111c:	2301      	movs	r3, #1
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e001      	b.n	8001126 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	807b      	strh	r3, [r7, #2]
 8001140:	4613      	mov	r3, r2
 8001142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001144:	787b      	ldrb	r3, [r7, #1]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800114a:	887a      	ldrh	r2, [r7, #2]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001150:	e002      	b.n	8001158 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <HAL_PWREx_GetVoltageRange+0x18>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40007000 	.word	0x40007000

08001180 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800118e:	d130      	bne.n	80011f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001190:	4b23      	ldr	r3, [pc, #140]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800119c:	d038      	beq.n	8001210 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800119e:	4b20      	ldr	r3, [pc, #128]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011a6:	4a1e      	ldr	r2, [pc, #120]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011ae:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2232      	movs	r2, #50	; 0x32
 80011b4:	fb02 f303 	mul.w	r3, r2, r3
 80011b8:	4a1b      	ldr	r2, [pc, #108]	; (8001228 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011ba:	fba2 2303 	umull	r2, r3, r2, r3
 80011be:	0c9b      	lsrs	r3, r3, #18
 80011c0:	3301      	adds	r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011c4:	e002      	b.n	80011cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011d8:	d102      	bne.n	80011e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1f2      	bne.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ec:	d110      	bne.n	8001210 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e00f      	b.n	8001212 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011fe:	d007      	beq.n	8001210 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001208:	4a05      	ldr	r2, [pc, #20]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40007000 	.word	0x40007000
 8001224:	20000000 	.word	0x20000000
 8001228:	431bde83 	.word	0x431bde83

0800122c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d102      	bne.n	8001240 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	f000 bc56 	b.w	8001aec <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001240:	4ba1      	ldr	r3, [pc, #644]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 030c 	and.w	r3, r3, #12
 8001248:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800124a:	4b9f      	ldr	r3, [pc, #636]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0310 	and.w	r3, r3, #16
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 80e6 	beq.w	800142e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d007      	beq.n	8001278 <HAL_RCC_OscConfig+0x4c>
 8001268:	6a3b      	ldr	r3, [r7, #32]
 800126a:	2b0c      	cmp	r3, #12
 800126c:	f040 808d 	bne.w	800138a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	2b01      	cmp	r3, #1
 8001274:	f040 8089 	bne.w	800138a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001278:	4b93      	ldr	r3, [pc, #588]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d006      	beq.n	8001292 <HAL_RCC_OscConfig+0x66>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69db      	ldr	r3, [r3, #28]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d102      	bne.n	8001292 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	f000 bc2d 	b.w	8001aec <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001296:	4b8c      	ldr	r3, [pc, #560]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d004      	beq.n	80012ac <HAL_RCC_OscConfig+0x80>
 80012a2:	4b89      	ldr	r3, [pc, #548]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012aa:	e005      	b.n	80012b8 <HAL_RCC_OscConfig+0x8c>
 80012ac:	4b86      	ldr	r3, [pc, #536]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 80012ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012b2:	091b      	lsrs	r3, r3, #4
 80012b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d224      	bcs.n	8001306 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 fdbd 	bl	8001e40 <RCC_SetFlashLatencyFromMSIRange>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	f000 bc0d 	b.w	8001aec <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012d2:	4b7d      	ldr	r3, [pc, #500]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a7c      	ldr	r2, [pc, #496]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 80012d8:	f043 0308 	orr.w	r3, r3, #8
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	4b7a      	ldr	r3, [pc, #488]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	4977      	ldr	r1, [pc, #476]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012f0:	4b75      	ldr	r3, [pc, #468]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	4972      	ldr	r1, [pc, #456]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 8001300:	4313      	orrs	r3, r2
 8001302:	604b      	str	r3, [r1, #4]
 8001304:	e025      	b.n	8001352 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001306:	4b70      	ldr	r3, [pc, #448]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a6f      	ldr	r2, [pc, #444]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 800130c:	f043 0308 	orr.w	r3, r3, #8
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	4b6d      	ldr	r3, [pc, #436]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131e:	496a      	ldr	r1, [pc, #424]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 8001320:	4313      	orrs	r3, r2
 8001322:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001324:	4b68      	ldr	r3, [pc, #416]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	021b      	lsls	r3, r3, #8
 8001332:	4965      	ldr	r1, [pc, #404]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001338:	6a3b      	ldr	r3, [r7, #32]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d109      	bne.n	8001352 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	4618      	mov	r0, r3
 8001344:	f000 fd7c 	bl	8001e40 <RCC_SetFlashLatencyFromMSIRange>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e3cc      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001352:	f000 fcb3 	bl	8001cbc <HAL_RCC_GetSysClockFreq>
 8001356:	4601      	mov	r1, r0
 8001358:	4b5b      	ldr	r3, [pc, #364]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	091b      	lsrs	r3, r3, #4
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	4a5a      	ldr	r2, [pc, #360]	; (80014cc <HAL_RCC_OscConfig+0x2a0>)
 8001364:	5cd3      	ldrb	r3, [r2, r3]
 8001366:	f003 031f 	and.w	r3, r3, #31
 800136a:	fa21 f303 	lsr.w	r3, r1, r3
 800136e:	4a58      	ldr	r2, [pc, #352]	; (80014d0 <HAL_RCC_OscConfig+0x2a4>)
 8001370:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001372:	4b58      	ldr	r3, [pc, #352]	; (80014d4 <HAL_RCC_OscConfig+0x2a8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fbee 	bl	8000b58 <HAL_InitTick>
 800137c:	4603      	mov	r3, r0
 800137e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d052      	beq.n	800142c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001386:	7dfb      	ldrb	r3, [r7, #23]
 8001388:	e3b0      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d032      	beq.n	80013f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001392:	4b4d      	ldr	r3, [pc, #308]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a4c      	ldr	r2, [pc, #304]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800139e:	f7ff fc2b 	bl	8000bf8 <HAL_GetTick>
 80013a2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013a6:	f7ff fc27 	bl	8000bf8 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e399      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013b8:	4b43      	ldr	r3, [pc, #268]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013c4:	4b40      	ldr	r3, [pc, #256]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a3f      	ldr	r2, [pc, #252]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 80013ca:	f043 0308 	orr.w	r3, r3, #8
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	4b3d      	ldr	r3, [pc, #244]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	493a      	ldr	r1, [pc, #232]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013e2:	4b39      	ldr	r3, [pc, #228]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	4935      	ldr	r1, [pc, #212]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	604b      	str	r3, [r1, #4]
 80013f6:	e01a      	b.n	800142e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013f8:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a32      	ldr	r2, [pc, #200]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 80013fe:	f023 0301 	bic.w	r3, r3, #1
 8001402:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001404:	f7ff fbf8 	bl	8000bf8 <HAL_GetTick>
 8001408:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800140c:	f7ff fbf4 	bl	8000bf8 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e366      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x1e0>
 800142a:	e000      	b.n	800142e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800142c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d073      	beq.n	8001522 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	2b08      	cmp	r3, #8
 800143e:	d005      	beq.n	800144c <HAL_RCC_OscConfig+0x220>
 8001440:	6a3b      	ldr	r3, [r7, #32]
 8001442:	2b0c      	cmp	r3, #12
 8001444:	d10e      	bne.n	8001464 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	2b03      	cmp	r3, #3
 800144a:	d10b      	bne.n	8001464 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d063      	beq.n	8001520 <HAL_RCC_OscConfig+0x2f4>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d15f      	bne.n	8001520 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e343      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800146c:	d106      	bne.n	800147c <HAL_RCC_OscConfig+0x250>
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a15      	ldr	r2, [pc, #84]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 8001474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e01d      	b.n	80014b8 <HAL_RCC_OscConfig+0x28c>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001484:	d10c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x274>
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 800148c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a0c      	ldr	r2, [pc, #48]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 8001498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	e00b      	b.n	80014b8 <HAL_RCC_OscConfig+0x28c>
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a08      	ldr	r2, [pc, #32]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 80014a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <HAL_RCC_OscConfig+0x29c>)
 80014b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d01b      	beq.n	80014f8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff fb9a 	bl	8000bf8 <HAL_GetTick>
 80014c4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014c6:	e010      	b.n	80014ea <HAL_RCC_OscConfig+0x2be>
 80014c8:	40021000 	.word	0x40021000
 80014cc:	08003a30 	.word	0x08003a30
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d8:	f7ff fb8e 	bl	8000bf8 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b64      	cmp	r3, #100	; 0x64
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e300      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ea:	4ba0      	ldr	r3, [pc, #640]	; (800176c <HAL_RCC_OscConfig+0x540>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0x2ac>
 80014f6:	e014      	b.n	8001522 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fb7e 	bl	8000bf8 <HAL_GetTick>
 80014fc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff fb7a 	bl	8000bf8 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	; 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e2ec      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001512:	4b96      	ldr	r3, [pc, #600]	; (800176c <HAL_RCC_OscConfig+0x540>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0x2d4>
 800151e:	e000      	b.n	8001522 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d060      	beq.n	80015f0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800152e:	6a3b      	ldr	r3, [r7, #32]
 8001530:	2b04      	cmp	r3, #4
 8001532:	d005      	beq.n	8001540 <HAL_RCC_OscConfig+0x314>
 8001534:	6a3b      	ldr	r3, [r7, #32]
 8001536:	2b0c      	cmp	r3, #12
 8001538:	d119      	bne.n	800156e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d116      	bne.n	800156e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001540:	4b8a      	ldr	r3, [pc, #552]	; (800176c <HAL_RCC_OscConfig+0x540>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_RCC_OscConfig+0x32c>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e2c9      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001558:	4b84      	ldr	r3, [pc, #528]	; (800176c <HAL_RCC_OscConfig+0x540>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	061b      	lsls	r3, r3, #24
 8001566:	4981      	ldr	r1, [pc, #516]	; (800176c <HAL_RCC_OscConfig+0x540>)
 8001568:	4313      	orrs	r3, r2
 800156a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800156c:	e040      	b.n	80015f0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d023      	beq.n	80015be <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001576:	4b7d      	ldr	r3, [pc, #500]	; (800176c <HAL_RCC_OscConfig+0x540>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a7c      	ldr	r2, [pc, #496]	; (800176c <HAL_RCC_OscConfig+0x540>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001582:	f7ff fb39 	bl	8000bf8 <HAL_GetTick>
 8001586:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800158a:	f7ff fb35 	bl	8000bf8 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e2a7      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800159c:	4b73      	ldr	r3, [pc, #460]	; (800176c <HAL_RCC_OscConfig+0x540>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a8:	4b70      	ldr	r3, [pc, #448]	; (800176c <HAL_RCC_OscConfig+0x540>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	061b      	lsls	r3, r3, #24
 80015b6:	496d      	ldr	r1, [pc, #436]	; (800176c <HAL_RCC_OscConfig+0x540>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
 80015bc:	e018      	b.n	80015f0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015be:	4b6b      	ldr	r3, [pc, #428]	; (800176c <HAL_RCC_OscConfig+0x540>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a6a      	ldr	r2, [pc, #424]	; (800176c <HAL_RCC_OscConfig+0x540>)
 80015c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ca:	f7ff fb15 	bl	8000bf8 <HAL_GetTick>
 80015ce:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d2:	f7ff fb11 	bl	8000bf8 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e283      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e4:	4b61      	ldr	r3, [pc, #388]	; (800176c <HAL_RCC_OscConfig+0x540>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f0      	bne.n	80015d2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d07f      	beq.n	80016fc <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d05f      	beq.n	80016c4 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001604:	4b59      	ldr	r3, [pc, #356]	; (800176c <HAL_RCC_OscConfig+0x540>)
 8001606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800160a:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	699a      	ldr	r2, [r3, #24]
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	429a      	cmp	r2, r3
 8001618:	d037      	beq.n	800168a <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d006      	beq.n	8001632 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e25c      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b00      	cmp	r3, #0
 800163a:	d01b      	beq.n	8001674 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 800163c:	4b4b      	ldr	r3, [pc, #300]	; (800176c <HAL_RCC_OscConfig+0x540>)
 800163e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001642:	4a4a      	ldr	r2, [pc, #296]	; (800176c <HAL_RCC_OscConfig+0x540>)
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800164c:	f7ff fad4 	bl	8000bf8 <HAL_GetTick>
 8001650:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001654:	f7ff fad0 	bl	8000bf8 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b11      	cmp	r3, #17
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e242      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001666:	4b41      	ldr	r3, [pc, #260]	; (800176c <HAL_RCC_OscConfig+0x540>)
 8001668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1ef      	bne.n	8001654 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001674:	4b3d      	ldr	r3, [pc, #244]	; (800176c <HAL_RCC_OscConfig+0x540>)
 8001676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800167a:	f023 0210 	bic.w	r2, r3, #16
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	493a      	ldr	r1, [pc, #232]	; (800176c <HAL_RCC_OscConfig+0x540>)
 8001684:	4313      	orrs	r3, r2
 8001686:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800168a:	4b38      	ldr	r3, [pc, #224]	; (800176c <HAL_RCC_OscConfig+0x540>)
 800168c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001690:	4a36      	ldr	r2, [pc, #216]	; (800176c <HAL_RCC_OscConfig+0x540>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169a:	f7ff faad 	bl	8000bf8 <HAL_GetTick>
 800169e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a2:	f7ff faa9 	bl	8000bf8 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b11      	cmp	r3, #17
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e21b      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016b4:	4b2d      	ldr	r3, [pc, #180]	; (800176c <HAL_RCC_OscConfig+0x540>)
 80016b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0ef      	beq.n	80016a2 <HAL_RCC_OscConfig+0x476>
 80016c2:	e01b      	b.n	80016fc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c4:	4b29      	ldr	r3, [pc, #164]	; (800176c <HAL_RCC_OscConfig+0x540>)
 80016c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ca:	4a28      	ldr	r2, [pc, #160]	; (800176c <HAL_RCC_OscConfig+0x540>)
 80016cc:	f023 0301 	bic.w	r3, r3, #1
 80016d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d4:	f7ff fa90 	bl	8000bf8 <HAL_GetTick>
 80016d8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016dc:	f7ff fa8c 	bl	8000bf8 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b11      	cmp	r3, #17
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e1fe      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016ee:	4b1f      	ldr	r3, [pc, #124]	; (800176c <HAL_RCC_OscConfig+0x540>)
 80016f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1ef      	bne.n	80016dc <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 80c1 	beq.w	800188c <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <HAL_RCC_OscConfig+0x540>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10e      	bne.n	800173a <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <HAL_RCC_OscConfig+0x540>)
 800171e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001720:	4a12      	ldr	r2, [pc, #72]	; (800176c <HAL_RCC_OscConfig+0x540>)
 8001722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001726:	6593      	str	r3, [r2, #88]	; 0x58
 8001728:	4b10      	ldr	r3, [pc, #64]	; (800176c <HAL_RCC_OscConfig+0x540>)
 800172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001734:	2301      	movs	r3, #1
 8001736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800173a:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <HAL_RCC_OscConfig+0x544>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001742:	2b00      	cmp	r3, #0
 8001744:	d11c      	bne.n	8001780 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_RCC_OscConfig+0x544>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a09      	ldr	r2, [pc, #36]	; (8001770 <HAL_RCC_OscConfig+0x544>)
 800174c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001752:	f7ff fa51 	bl	8000bf8 <HAL_GetTick>
 8001756:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001758:	e00c      	b.n	8001774 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800175a:	f7ff fa4d 	bl	8000bf8 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d905      	bls.n	8001774 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e1bf      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
 800176c:	40021000 	.word	0x40021000
 8001770:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001774:	4bb1      	ldr	r3, [pc, #708]	; (8001a3c <HAL_RCC_OscConfig+0x810>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0ec      	beq.n	800175a <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b00      	cmp	r3, #0
 800178a:	d02c      	beq.n	80017e6 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800178c:	4bac      	ldr	r3, [pc, #688]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 800178e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800179e:	49a8      	ldr	r1, [pc, #672]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d010      	beq.n	80017d4 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017b2:	4ba3      	ldr	r3, [pc, #652]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 80017b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b8:	4aa1      	ldr	r2, [pc, #644]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 80017ba:	f043 0304 	orr.w	r3, r3, #4
 80017be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017c2:	4b9f      	ldr	r3, [pc, #636]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 80017c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c8:	4a9d      	ldr	r2, [pc, #628]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017d2:	e018      	b.n	8001806 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017d4:	4b9a      	ldr	r3, [pc, #616]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 80017d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017da:	4a99      	ldr	r2, [pc, #612]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017e4:	e00f      	b.n	8001806 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017e6:	4b96      	ldr	r3, [pc, #600]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 80017e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ec:	4a94      	ldr	r2, [pc, #592]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017f6:	4b92      	ldr	r3, [pc, #584]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 80017f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fc:	4a90      	ldr	r2, [pc, #576]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 80017fe:	f023 0304 	bic.w	r3, r3, #4
 8001802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d016      	beq.n	800183c <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180e:	f7ff f9f3 	bl	8000bf8 <HAL_GetTick>
 8001812:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001814:	e00a      	b.n	800182c <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001816:	f7ff f9ef 	bl	8000bf8 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	f241 3288 	movw	r2, #5000	; 0x1388
 8001824:	4293      	cmp	r3, r2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e15f      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800182c:	4b84      	ldr	r3, [pc, #528]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 800182e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0ed      	beq.n	8001816 <HAL_RCC_OscConfig+0x5ea>
 800183a:	e01d      	b.n	8001878 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183c:	f7ff f9dc 	bl	8000bf8 <HAL_GetTick>
 8001840:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001842:	e00a      	b.n	800185a <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001844:	f7ff f9d8 	bl	8000bf8 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001852:	4293      	cmp	r3, r2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e148      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800185a:	4b79      	ldr	r3, [pc, #484]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 800185c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1ed      	bne.n	8001844 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001868:	4b75      	ldr	r3, [pc, #468]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 800186a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186e:	4a74      	ldr	r2, [pc, #464]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 8001870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800187c:	2b01      	cmp	r3, #1
 800187e:	d105      	bne.n	800188c <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001880:	4b6f      	ldr	r3, [pc, #444]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 8001882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001884:	4a6e      	ldr	r2, [pc, #440]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 8001886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800188a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0320 	and.w	r3, r3, #32
 8001894:	2b00      	cmp	r3, #0
 8001896:	d03c      	beq.n	8001912 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	d01c      	beq.n	80018da <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018a0:	4b67      	ldr	r3, [pc, #412]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 80018a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018a6:	4a66      	ldr	r2, [pc, #408]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b0:	f7ff f9a2 	bl	8000bf8 <HAL_GetTick>
 80018b4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018b8:	f7ff f99e 	bl	8000bf8 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e110      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018ca:	4b5d      	ldr	r3, [pc, #372]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 80018cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0ef      	beq.n	80018b8 <HAL_RCC_OscConfig+0x68c>
 80018d8:	e01b      	b.n	8001912 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018da:	4b59      	ldr	r3, [pc, #356]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 80018dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018e0:	4a57      	ldr	r2, [pc, #348]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 80018e2:	f023 0301 	bic.w	r3, r3, #1
 80018e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ea:	f7ff f985 	bl	8000bf8 <HAL_GetTick>
 80018ee:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018f2:	f7ff f981 	bl	8000bf8 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e0f3      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001904:	4b4e      	ldr	r3, [pc, #312]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 8001906:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1ef      	bne.n	80018f2 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 80e7 	beq.w	8001aea <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	2b02      	cmp	r3, #2
 8001922:	f040 80b7 	bne.w	8001a94 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001926:	4b46      	ldr	r3, [pc, #280]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f003 0203 	and.w	r2, r3, #3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	429a      	cmp	r2, r3
 8001938:	d124      	bne.n	8001984 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001944:	3b01      	subs	r3, #1
 8001946:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d11b      	bne.n	8001984 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001956:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001958:	429a      	cmp	r2, r3
 800195a:	d113      	bne.n	8001984 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001966:	085b      	lsrs	r3, r3, #1
 8001968:	3b01      	subs	r3, #1
 800196a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800196c:	429a      	cmp	r2, r3
 800196e:	d109      	bne.n	8001984 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	085b      	lsrs	r3, r3, #1
 800197c:	3b01      	subs	r3, #1
 800197e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d061      	beq.n	8001a48 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	2b0c      	cmp	r3, #12
 8001988:	d056      	beq.n	8001a38 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800198a:	4b2d      	ldr	r3, [pc, #180]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a2c      	ldr	r2, [pc, #176]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 8001990:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001994:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001996:	f7ff f92f 	bl	8000bf8 <HAL_GetTick>
 800199a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199e:	f7ff f92b 	bl	8000bf8 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e09d      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b0:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f0      	bne.n	800199e <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019bc:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_RCC_OscConfig+0x818>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019cc:	3a01      	subs	r2, #1
 80019ce:	0112      	lsls	r2, r2, #4
 80019d0:	4311      	orrs	r1, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019d6:	0212      	lsls	r2, r2, #8
 80019d8:	4311      	orrs	r1, r2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019de:	0852      	lsrs	r2, r2, #1
 80019e0:	3a01      	subs	r2, #1
 80019e2:	0552      	lsls	r2, r2, #21
 80019e4:	4311      	orrs	r1, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019ea:	0852      	lsrs	r2, r2, #1
 80019ec:	3a01      	subs	r2, #1
 80019ee:	0652      	lsls	r2, r2, #25
 80019f0:	430a      	orrs	r2, r1
 80019f2:	4913      	ldr	r1, [pc, #76]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 80019fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 8001a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a10:	f7ff f8f2 	bl	8000bf8 <HAL_GetTick>
 8001a14:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a18:	f7ff f8ee 	bl	8000bf8 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e060      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2a:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_RCC_OscConfig+0x814>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a36:	e058      	b.n	8001aea <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e057      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
 8001a3c:	40007000 	.word	0x40007000
 8001a40:	40021000 	.word	0x40021000
 8001a44:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a48:	4b2a      	ldr	r3, [pc, #168]	; (8001af4 <HAL_RCC_OscConfig+0x8c8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d14a      	bne.n	8001aea <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a54:	4b27      	ldr	r3, [pc, #156]	; (8001af4 <HAL_RCC_OscConfig+0x8c8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a26      	ldr	r2, [pc, #152]	; (8001af4 <HAL_RCC_OscConfig+0x8c8>)
 8001a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a60:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <HAL_RCC_OscConfig+0x8c8>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4a23      	ldr	r2, [pc, #140]	; (8001af4 <HAL_RCC_OscConfig+0x8c8>)
 8001a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a6c:	f7ff f8c4 	bl	8000bf8 <HAL_GetTick>
 8001a70:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a74:	f7ff f8c0 	bl	8000bf8 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e032      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a86:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <HAL_RCC_OscConfig+0x8c8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0x848>
 8001a92:	e02a      	b.n	8001aea <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	2b0c      	cmp	r3, #12
 8001a98:	d025      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9a:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <HAL_RCC_OscConfig+0x8c8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a15      	ldr	r2, [pc, #84]	; (8001af4 <HAL_RCC_OscConfig+0x8c8>)
 8001aa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aa4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001aa6:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <HAL_RCC_OscConfig+0x8c8>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <HAL_RCC_OscConfig+0x8c8>)
 8001aac:	f023 0303 	bic.w	r3, r3, #3
 8001ab0:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <HAL_RCC_OscConfig+0x8c8>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	4a0f      	ldr	r2, [pc, #60]	; (8001af4 <HAL_RCC_OscConfig+0x8c8>)
 8001ab8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001abc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abe:	f7ff f89b 	bl	8000bf8 <HAL_GetTick>
 8001ac2:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac6:	f7ff f897 	bl	8000bf8 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e009      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_RCC_OscConfig+0x8c8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f0      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x89a>
 8001ae4:	e001      	b.n	8001aea <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3728      	adds	r7, #40	; 0x28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40021000 	.word	0x40021000

08001af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0c8      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b0c:	4b66      	ldr	r3, [pc, #408]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d910      	bls.n	8001b3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1a:	4b63      	ldr	r3, [pc, #396]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 0207 	bic.w	r2, r3, #7
 8001b22:	4961      	ldr	r1, [pc, #388]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b0>)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2a:	4b5f      	ldr	r3, [pc, #380]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d001      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0b0      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d04c      	beq.n	8001be2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d107      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b50:	4b56      	ldr	r3, [pc, #344]	; (8001cac <HAL_RCC_ClockConfig+0x1b4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d121      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e09e      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d107      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b68:	4b50      	ldr	r3, [pc, #320]	; (8001cac <HAL_RCC_ClockConfig+0x1b4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d115      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e092      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d107      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b80:	4b4a      	ldr	r3, [pc, #296]	; (8001cac <HAL_RCC_ClockConfig+0x1b4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d109      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e086      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b90:	4b46      	ldr	r3, [pc, #280]	; (8001cac <HAL_RCC_ClockConfig+0x1b4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e07e      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ba0:	4b42      	ldr	r3, [pc, #264]	; (8001cac <HAL_RCC_ClockConfig+0x1b4>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f023 0203 	bic.w	r2, r3, #3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	493f      	ldr	r1, [pc, #252]	; (8001cac <HAL_RCC_ClockConfig+0x1b4>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bb2:	f7ff f821 	bl	8000bf8 <HAL_GetTick>
 8001bb6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb8:	e00a      	b.n	8001bd0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bba:	f7ff f81d 	bl	8000bf8 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e066      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd0:	4b36      	ldr	r3, [pc, #216]	; (8001cac <HAL_RCC_ClockConfig+0x1b4>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 020c 	and.w	r2, r3, #12
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d1eb      	bne.n	8001bba <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d008      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bee:	4b2f      	ldr	r3, [pc, #188]	; (8001cac <HAL_RCC_ClockConfig+0x1b4>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	492c      	ldr	r1, [pc, #176]	; (8001cac <HAL_RCC_ClockConfig+0x1b4>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c00:	4b29      	ldr	r3, [pc, #164]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d210      	bcs.n	8001c30 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 0207 	bic.w	r2, r3, #7
 8001c16:	4924      	ldr	r1, [pc, #144]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b0>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e036      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d008      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <HAL_RCC_ClockConfig+0x1b4>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4918      	ldr	r1, [pc, #96]	; (8001cac <HAL_RCC_ClockConfig+0x1b4>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d009      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c5a:	4b14      	ldr	r3, [pc, #80]	; (8001cac <HAL_RCC_ClockConfig+0x1b4>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4910      	ldr	r1, [pc, #64]	; (8001cac <HAL_RCC_ClockConfig+0x1b4>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c6e:	f000 f825 	bl	8001cbc <HAL_RCC_GetSysClockFreq>
 8001c72:	4601      	mov	r1, r0
 8001c74:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <HAL_RCC_ClockConfig+0x1b4>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	4a0c      	ldr	r2, [pc, #48]	; (8001cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c80:	5cd3      	ldrb	r3, [r2, r3]
 8001c82:	f003 031f 	and.w	r3, r3, #31
 8001c86:	fa21 f303 	lsr.w	r3, r1, r3
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe ff60 	bl	8000b58 <HAL_InitTick>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c9c:	7afb      	ldrb	r3, [r7, #11]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40022000 	.word	0x40022000
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	08003a30 	.word	0x08003a30
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	20000004 	.word	0x20000004

08001cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cca:	4b3d      	ldr	r3, [pc, #244]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cd4:	4b3a      	ldr	r3, [pc, #232]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	2b0c      	cmp	r3, #12
 8001ce8:	d121      	bne.n	8001d2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d11e      	bne.n	8001d2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cf0:	4b33      	ldr	r3, [pc, #204]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d107      	bne.n	8001d0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cfc:	4b30      	ldr	r3, [pc, #192]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d02:	0a1b      	lsrs	r3, r3, #8
 8001d04:	f003 030f 	and.w	r3, r3, #15
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	e005      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d0c:	4b2c      	ldr	r3, [pc, #176]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d18:	4a2a      	ldr	r2, [pc, #168]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10d      	bne.n	8001d44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d102      	bne.n	8001d3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d34:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d36:	61bb      	str	r3, [r7, #24]
 8001d38:	e004      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d40:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x110>)
 8001d42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	2b0c      	cmp	r3, #12
 8001d48:	d133      	bne.n	8001db2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d002      	beq.n	8001d60 <HAL_RCC_GetSysClockFreq+0xa4>
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d003      	beq.n	8001d66 <HAL_RCC_GetSysClockFreq+0xaa>
 8001d5e:	e005      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d62:	617b      	str	r3, [r7, #20]
      break;
 8001d64:	e005      	b.n	8001d72 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d66:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x110>)
 8001d68:	617b      	str	r3, [r7, #20]
      break;
 8001d6a:	e002      	b.n	8001d72 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	617b      	str	r3, [r7, #20]
      break;
 8001d70:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d72:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	091b      	lsrs	r3, r3, #4
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	0a1b      	lsrs	r3, r3, #8
 8001d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	fb02 f203 	mul.w	r2, r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d96:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	0e5b      	lsrs	r3, r3, #25
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	3301      	adds	r3, #1
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001db2:	69bb      	ldr	r3, [r7, #24]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3724      	adds	r7, #36	; 0x24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	08003a48 	.word	0x08003a48
 8001dc8:	00f42400 	.word	0x00f42400
 8001dcc:	007a1200 	.word	0x007a1200

08001dd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	20000000 	.word	0x20000000

08001de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001dec:	f7ff fff0 	bl	8001dd0 <HAL_RCC_GetHCLKFreq>
 8001df0:	4601      	mov	r1, r0
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	0a1b      	lsrs	r3, r3, #8
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dfe:	5cd3      	ldrb	r3, [r2, r3]
 8001e00:	f003 031f 	and.w	r3, r3, #31
 8001e04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	08003a40 	.word	0x08003a40

08001e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e18:	f7ff ffda 	bl	8001dd0 <HAL_RCC_GetHCLKFreq>
 8001e1c:	4601      	mov	r1, r0
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	0adb      	lsrs	r3, r3, #11
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e2a:	5cd3      	ldrb	r3, [r2, r3]
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	08003a40 	.word	0x08003a40

08001e40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e48:	2300      	movs	r3, #0
 8001e4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e58:	f7ff f984 	bl	8001164 <HAL_PWREx_GetVoltageRange>
 8001e5c:	6178      	str	r0, [r7, #20]
 8001e5e:	e014      	b.n	8001e8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e60:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e64:	4a24      	ldr	r2, [pc, #144]	; (8001ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e6c:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e78:	f7ff f974 	bl	8001164 <HAL_PWREx_GetVoltageRange>
 8001e7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	4a1d      	ldr	r2, [pc, #116]	; (8001ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e90:	d10b      	bne.n	8001eaa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b80      	cmp	r3, #128	; 0x80
 8001e96:	d919      	bls.n	8001ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2ba0      	cmp	r3, #160	; 0xa0
 8001e9c:	d902      	bls.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	e013      	b.n	8001ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	e010      	b.n	8001ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b80      	cmp	r3, #128	; 0x80
 8001eae:	d902      	bls.n	8001eb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	e00a      	b.n	8001ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b80      	cmp	r3, #128	; 0x80
 8001eba:	d102      	bne.n	8001ec2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	e004      	b.n	8001ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b70      	cmp	r3, #112	; 0x70
 8001ec6:	d101      	bne.n	8001ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ec8:	2301      	movs	r3, #1
 8001eca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f023 0207 	bic.w	r2, r3, #7
 8001ed4:	4909      	ldr	r1, [pc, #36]	; (8001efc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001edc:	4b07      	ldr	r3, [pc, #28]	; (8001efc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d001      	beq.n	8001eee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40022000 	.word	0x40022000

08001f00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f08:	2300      	movs	r3, #0
 8001f0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 809e 	beq.w	800205a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f22:	4b46      	ldr	r3, [pc, #280]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001f32:	2300      	movs	r3, #0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00d      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f38:	4b40      	ldr	r3, [pc, #256]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3c:	4a3f      	ldr	r2, [pc, #252]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f42:	6593      	str	r3, [r2, #88]	; 0x58
 8001f44:	4b3d      	ldr	r3, [pc, #244]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f50:	2301      	movs	r3, #1
 8001f52:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f54:	4b3a      	ldr	r3, [pc, #232]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a39      	ldr	r2, [pc, #228]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f60:	f7fe fe4a 	bl	8000bf8 <HAL_GetTick>
 8001f64:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f66:	e009      	b.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f68:	f7fe fe46 	bl	8000bf8 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d902      	bls.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	74fb      	strb	r3, [r7, #19]
        break;
 8001f7a:	e005      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f7c:	4b30      	ldr	r3, [pc, #192]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0ef      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8001f88:	7cfb      	ldrb	r3, [r7, #19]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d15a      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f8e:	4b2b      	ldr	r3, [pc, #172]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f98:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d01e      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d019      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fb6:	4b21      	ldr	r3, [pc, #132]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbc:	4a1f      	ldr	r2, [pc, #124]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fcc:	4a1b      	ldr	r2, [pc, #108]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fd6:	4a19      	ldr	r2, [pc, #100]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d016      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7fe fe06 	bl	8000bf8 <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fee:	e00b      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff0:	f7fe fe02 	bl	8000bf8 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d902      	bls.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	74fb      	strb	r3, [r7, #19]
            break;
 8002006:	e006      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0ec      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002016:	7cfb      	ldrb	r3, [r7, #19]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10b      	bne.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800201c:	4b07      	ldr	r3, [pc, #28]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002022:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	4904      	ldr	r1, [pc, #16]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002032:	e009      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002034:	7cfb      	ldrb	r3, [r7, #19]
 8002036:	74bb      	strb	r3, [r7, #18]
 8002038:	e006      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002044:	7cfb      	ldrb	r3, [r7, #19]
 8002046:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002048:	7c7b      	ldrb	r3, [r7, #17]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d105      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204e:	4b6e      	ldr	r3, [pc, #440]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002052:	4a6d      	ldr	r2, [pc, #436]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002058:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002066:	4b68      	ldr	r3, [pc, #416]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206c:	f023 0203 	bic.w	r2, r3, #3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	4964      	ldr	r1, [pc, #400]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00a      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002088:	4b5f      	ldr	r3, [pc, #380]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208e:	f023 020c 	bic.w	r2, r3, #12
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	495c      	ldr	r1, [pc, #368]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00a      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020aa:	4b57      	ldr	r3, [pc, #348]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4953      	ldr	r1, [pc, #332]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00a      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020cc:	4b4e      	ldr	r3, [pc, #312]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	494b      	ldr	r1, [pc, #300]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00a      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020ee:	4b46      	ldr	r3, [pc, #280]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4942      	ldr	r1, [pc, #264]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00a      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002110:	4b3d      	ldr	r3, [pc, #244]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002116:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	493a      	ldr	r1, [pc, #232]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002120:	4313      	orrs	r3, r2
 8002122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002132:	4b35      	ldr	r3, [pc, #212]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002138:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	4931      	ldr	r1, [pc, #196]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002154:	4b2c      	ldr	r3, [pc, #176]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	4929      	ldr	r1, [pc, #164]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002164:	4313      	orrs	r3, r2
 8002166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00a      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002176:	4b24      	ldr	r3, [pc, #144]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	4920      	ldr	r1, [pc, #128]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d015      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	4918      	ldr	r1, [pc, #96]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021b6:	d105      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4a12      	ldr	r2, [pc, #72]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d015      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021d0:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	490a      	ldr	r1, [pc, #40]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021ee:	d105      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000

0800220c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e040      	b.n	80022a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002222:	2b00      	cmp	r3, #0
 8002224:	d106      	bne.n	8002234 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7fe fbd8 	bl	80009e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2224      	movs	r2, #36	; 0x24
 8002238:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0201 	bic.w	r2, r2, #1
 8002248:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f8c0 	bl	80023d0 <UART_SetConfig>
 8002250:	4603      	mov	r3, r0
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e022      	b.n	80022a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 faea 	bl	800283c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002276:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002286:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 fb71 	bl	8002980 <UART_CheckIdleState>
 800229e:	4603      	mov	r3, r0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	; 0x28
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	4613      	mov	r3, r2
 80022b6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022bc:	2b20      	cmp	r3, #32
 80022be:	f040 8081 	bne.w	80023c4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d002      	beq.n	80022ce <HAL_UART_Transmit+0x26>
 80022c8:	88fb      	ldrh	r3, [r7, #6]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e079      	b.n	80023c6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_UART_Transmit+0x38>
 80022dc:	2302      	movs	r3, #2
 80022de:	e072      	b.n	80023c6 <HAL_UART_Transmit+0x11e>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2221      	movs	r2, #33	; 0x21
 80022f2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80022f4:	f7fe fc80 	bl	8000bf8 <HAL_GetTick>
 80022f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	88fa      	ldrh	r2, [r7, #6]
 80022fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	88fa      	ldrh	r2, [r7, #6]
 8002306:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002312:	d108      	bne.n	8002326 <HAL_UART_Transmit+0x7e>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d104      	bne.n	8002326 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	e003      	b.n	800232e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800232a:	2300      	movs	r3, #0
 800232c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002336:	e02d      	b.n	8002394 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2200      	movs	r2, #0
 8002340:	2180      	movs	r1, #128	; 0x80
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 fb61 	bl	8002a0a <UART_WaitOnFlagUntilTimeout>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e039      	b.n	80023c6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10b      	bne.n	8002370 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	881a      	ldrh	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002364:	b292      	uxth	r2, r2
 8002366:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	3302      	adds	r3, #2
 800236c:	61bb      	str	r3, [r7, #24]
 800236e:	e008      	b.n	8002382 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	781a      	ldrb	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	b292      	uxth	r2, r2
 800237a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	3301      	adds	r3, #1
 8002380:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002388:	b29b      	uxth	r3, r3
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1cb      	bne.n	8002338 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2200      	movs	r2, #0
 80023a8:	2140      	movs	r1, #64	; 0x40
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 fb2d 	bl	8002a0a <UART_WaitOnFlagUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e005      	b.n	80023c6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2220      	movs	r2, #32
 80023be:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	e000      	b.n	80023c6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80023c4:	2302      	movs	r3, #2
  }
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3720      	adds	r7, #32
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023d0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80023d4:	b088      	sub	sp, #32
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	431a      	orrs	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4baa      	ldr	r3, [pc, #680]	; (80026a8 <UART_SetConfig+0x2d8>)
 80023fe:	4013      	ands	r3, r2
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	69f9      	ldr	r1, [r7, #28]
 8002406:	430b      	orrs	r3, r1
 8002408:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4aa0      	ldr	r2, [pc, #640]	; (80026ac <UART_SetConfig+0x2dc>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d004      	beq.n	800243a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	4313      	orrs	r3, r2
 8002438:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	69fa      	ldr	r2, [r7, #28]
 800244a:	430a      	orrs	r2, r1
 800244c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a97      	ldr	r2, [pc, #604]	; (80026b0 <UART_SetConfig+0x2e0>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d121      	bne.n	800249c <UART_SetConfig+0xcc>
 8002458:	4b96      	ldr	r3, [pc, #600]	; (80026b4 <UART_SetConfig+0x2e4>)
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	2b03      	cmp	r3, #3
 8002464:	d816      	bhi.n	8002494 <UART_SetConfig+0xc4>
 8002466:	a201      	add	r2, pc, #4	; (adr r2, 800246c <UART_SetConfig+0x9c>)
 8002468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246c:	0800247d 	.word	0x0800247d
 8002470:	08002489 	.word	0x08002489
 8002474:	08002483 	.word	0x08002483
 8002478:	0800248f 	.word	0x0800248f
 800247c:	2301      	movs	r3, #1
 800247e:	76fb      	strb	r3, [r7, #27]
 8002480:	e098      	b.n	80025b4 <UART_SetConfig+0x1e4>
 8002482:	2302      	movs	r3, #2
 8002484:	76fb      	strb	r3, [r7, #27]
 8002486:	e095      	b.n	80025b4 <UART_SetConfig+0x1e4>
 8002488:	2304      	movs	r3, #4
 800248a:	76fb      	strb	r3, [r7, #27]
 800248c:	e092      	b.n	80025b4 <UART_SetConfig+0x1e4>
 800248e:	2308      	movs	r3, #8
 8002490:	76fb      	strb	r3, [r7, #27]
 8002492:	e08f      	b.n	80025b4 <UART_SetConfig+0x1e4>
 8002494:	2310      	movs	r3, #16
 8002496:	76fb      	strb	r3, [r7, #27]
 8002498:	bf00      	nop
 800249a:	e08b      	b.n	80025b4 <UART_SetConfig+0x1e4>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a85      	ldr	r2, [pc, #532]	; (80026b8 <UART_SetConfig+0x2e8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d134      	bne.n	8002510 <UART_SetConfig+0x140>
 80024a6:	4b83      	ldr	r3, [pc, #524]	; (80026b4 <UART_SetConfig+0x2e4>)
 80024a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ac:	f003 030c 	and.w	r3, r3, #12
 80024b0:	2b0c      	cmp	r3, #12
 80024b2:	d829      	bhi.n	8002508 <UART_SetConfig+0x138>
 80024b4:	a201      	add	r2, pc, #4	; (adr r2, 80024bc <UART_SetConfig+0xec>)
 80024b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ba:	bf00      	nop
 80024bc:	080024f1 	.word	0x080024f1
 80024c0:	08002509 	.word	0x08002509
 80024c4:	08002509 	.word	0x08002509
 80024c8:	08002509 	.word	0x08002509
 80024cc:	080024fd 	.word	0x080024fd
 80024d0:	08002509 	.word	0x08002509
 80024d4:	08002509 	.word	0x08002509
 80024d8:	08002509 	.word	0x08002509
 80024dc:	080024f7 	.word	0x080024f7
 80024e0:	08002509 	.word	0x08002509
 80024e4:	08002509 	.word	0x08002509
 80024e8:	08002509 	.word	0x08002509
 80024ec:	08002503 	.word	0x08002503
 80024f0:	2300      	movs	r3, #0
 80024f2:	76fb      	strb	r3, [r7, #27]
 80024f4:	e05e      	b.n	80025b4 <UART_SetConfig+0x1e4>
 80024f6:	2302      	movs	r3, #2
 80024f8:	76fb      	strb	r3, [r7, #27]
 80024fa:	e05b      	b.n	80025b4 <UART_SetConfig+0x1e4>
 80024fc:	2304      	movs	r3, #4
 80024fe:	76fb      	strb	r3, [r7, #27]
 8002500:	e058      	b.n	80025b4 <UART_SetConfig+0x1e4>
 8002502:	2308      	movs	r3, #8
 8002504:	76fb      	strb	r3, [r7, #27]
 8002506:	e055      	b.n	80025b4 <UART_SetConfig+0x1e4>
 8002508:	2310      	movs	r3, #16
 800250a:	76fb      	strb	r3, [r7, #27]
 800250c:	bf00      	nop
 800250e:	e051      	b.n	80025b4 <UART_SetConfig+0x1e4>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a69      	ldr	r2, [pc, #420]	; (80026bc <UART_SetConfig+0x2ec>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d120      	bne.n	800255c <UART_SetConfig+0x18c>
 800251a:	4b66      	ldr	r3, [pc, #408]	; (80026b4 <UART_SetConfig+0x2e4>)
 800251c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002520:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002524:	2b10      	cmp	r3, #16
 8002526:	d00f      	beq.n	8002548 <UART_SetConfig+0x178>
 8002528:	2b10      	cmp	r3, #16
 800252a:	d802      	bhi.n	8002532 <UART_SetConfig+0x162>
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <UART_SetConfig+0x16c>
 8002530:	e010      	b.n	8002554 <UART_SetConfig+0x184>
 8002532:	2b20      	cmp	r3, #32
 8002534:	d005      	beq.n	8002542 <UART_SetConfig+0x172>
 8002536:	2b30      	cmp	r3, #48	; 0x30
 8002538:	d009      	beq.n	800254e <UART_SetConfig+0x17e>
 800253a:	e00b      	b.n	8002554 <UART_SetConfig+0x184>
 800253c:	2300      	movs	r3, #0
 800253e:	76fb      	strb	r3, [r7, #27]
 8002540:	e038      	b.n	80025b4 <UART_SetConfig+0x1e4>
 8002542:	2302      	movs	r3, #2
 8002544:	76fb      	strb	r3, [r7, #27]
 8002546:	e035      	b.n	80025b4 <UART_SetConfig+0x1e4>
 8002548:	2304      	movs	r3, #4
 800254a:	76fb      	strb	r3, [r7, #27]
 800254c:	e032      	b.n	80025b4 <UART_SetConfig+0x1e4>
 800254e:	2308      	movs	r3, #8
 8002550:	76fb      	strb	r3, [r7, #27]
 8002552:	e02f      	b.n	80025b4 <UART_SetConfig+0x1e4>
 8002554:	2310      	movs	r3, #16
 8002556:	76fb      	strb	r3, [r7, #27]
 8002558:	bf00      	nop
 800255a:	e02b      	b.n	80025b4 <UART_SetConfig+0x1e4>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a52      	ldr	r2, [pc, #328]	; (80026ac <UART_SetConfig+0x2dc>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d124      	bne.n	80025b0 <UART_SetConfig+0x1e0>
 8002566:	4b53      	ldr	r3, [pc, #332]	; (80026b4 <UART_SetConfig+0x2e4>)
 8002568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002574:	d012      	beq.n	800259c <UART_SetConfig+0x1cc>
 8002576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800257a:	d802      	bhi.n	8002582 <UART_SetConfig+0x1b2>
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <UART_SetConfig+0x1c0>
 8002580:	e012      	b.n	80025a8 <UART_SetConfig+0x1d8>
 8002582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002586:	d006      	beq.n	8002596 <UART_SetConfig+0x1c6>
 8002588:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800258c:	d009      	beq.n	80025a2 <UART_SetConfig+0x1d2>
 800258e:	e00b      	b.n	80025a8 <UART_SetConfig+0x1d8>
 8002590:	2300      	movs	r3, #0
 8002592:	76fb      	strb	r3, [r7, #27]
 8002594:	e00e      	b.n	80025b4 <UART_SetConfig+0x1e4>
 8002596:	2302      	movs	r3, #2
 8002598:	76fb      	strb	r3, [r7, #27]
 800259a:	e00b      	b.n	80025b4 <UART_SetConfig+0x1e4>
 800259c:	2304      	movs	r3, #4
 800259e:	76fb      	strb	r3, [r7, #27]
 80025a0:	e008      	b.n	80025b4 <UART_SetConfig+0x1e4>
 80025a2:	2308      	movs	r3, #8
 80025a4:	76fb      	strb	r3, [r7, #27]
 80025a6:	e005      	b.n	80025b4 <UART_SetConfig+0x1e4>
 80025a8:	2310      	movs	r3, #16
 80025aa:	76fb      	strb	r3, [r7, #27]
 80025ac:	bf00      	nop
 80025ae:	e001      	b.n	80025b4 <UART_SetConfig+0x1e4>
 80025b0:	2310      	movs	r3, #16
 80025b2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a3c      	ldr	r2, [pc, #240]	; (80026ac <UART_SetConfig+0x2dc>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	f040 8082 	bne.w	80026c4 <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80025c0:	7efb      	ldrb	r3, [r7, #27]
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d823      	bhi.n	800260e <UART_SetConfig+0x23e>
 80025c6:	a201      	add	r2, pc, #4	; (adr r2, 80025cc <UART_SetConfig+0x1fc>)
 80025c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025cc:	080025f1 	.word	0x080025f1
 80025d0:	0800260f 	.word	0x0800260f
 80025d4:	080025f9 	.word	0x080025f9
 80025d8:	0800260f 	.word	0x0800260f
 80025dc:	080025ff 	.word	0x080025ff
 80025e0:	0800260f 	.word	0x0800260f
 80025e4:	0800260f 	.word	0x0800260f
 80025e8:	0800260f 	.word	0x0800260f
 80025ec:	08002607 	.word	0x08002607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025f0:	f7ff fbfa 	bl	8001de8 <HAL_RCC_GetPCLK1Freq>
 80025f4:	6178      	str	r0, [r7, #20]
        break;
 80025f6:	e00f      	b.n	8002618 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025f8:	4b31      	ldr	r3, [pc, #196]	; (80026c0 <UART_SetConfig+0x2f0>)
 80025fa:	617b      	str	r3, [r7, #20]
        break;
 80025fc:	e00c      	b.n	8002618 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025fe:	f7ff fb5d 	bl	8001cbc <HAL_RCC_GetSysClockFreq>
 8002602:	6178      	str	r0, [r7, #20]
        break;
 8002604:	e008      	b.n	8002618 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800260a:	617b      	str	r3, [r7, #20]
        break;
 800260c:	e004      	b.n	8002618 <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	76bb      	strb	r3, [r7, #26]
        break;
 8002616:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 8100 	beq.w	8002820 <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	4413      	add	r3, r2
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	429a      	cmp	r2, r3
 800262e:	d305      	bcc.n	800263c <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	429a      	cmp	r2, r3
 800263a:	d902      	bls.n	8002642 <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	76bb      	strb	r3, [r7, #26]
 8002640:	e0ee      	b.n	8002820 <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	4619      	mov	r1, r3
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	f04f 0400 	mov.w	r4, #0
 8002652:	0214      	lsls	r4, r2, #8
 8002654:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002658:	020b      	lsls	r3, r1, #8
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6852      	ldr	r2, [r2, #4]
 800265e:	0852      	lsrs	r2, r2, #1
 8002660:	4611      	mov	r1, r2
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	eb13 0b01 	adds.w	fp, r3, r1
 800266a:	eb44 0c02 	adc.w	ip, r4, r2
 800266e:	4658      	mov	r0, fp
 8002670:	4661      	mov	r1, ip
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f04f 0400 	mov.w	r4, #0
 800267a:	461a      	mov	r2, r3
 800267c:	4623      	mov	r3, r4
 800267e:	f7fd fdf7 	bl	8000270 <__aeabi_uldivmod>
 8002682:	4603      	mov	r3, r0
 8002684:	460c      	mov	r4, r1
 8002686:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800268e:	d308      	bcc.n	80026a2 <UART_SetConfig+0x2d2>
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002696:	d204      	bcs.n	80026a2 <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	60da      	str	r2, [r3, #12]
 80026a0:	e0be      	b.n	8002820 <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	76bb      	strb	r3, [r7, #26]
 80026a6:	e0bb      	b.n	8002820 <UART_SetConfig+0x450>
 80026a8:	efff69f3 	.word	0xefff69f3
 80026ac:	40008000 	.word	0x40008000
 80026b0:	40013800 	.word	0x40013800
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40004400 	.word	0x40004400
 80026bc:	40004800 	.word	0x40004800
 80026c0:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026cc:	d15c      	bne.n	8002788 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 80026ce:	7efb      	ldrb	r3, [r7, #27]
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d828      	bhi.n	8002726 <UART_SetConfig+0x356>
 80026d4:	a201      	add	r2, pc, #4	; (adr r2, 80026dc <UART_SetConfig+0x30c>)
 80026d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026da:	bf00      	nop
 80026dc:	08002701 	.word	0x08002701
 80026e0:	08002709 	.word	0x08002709
 80026e4:	08002711 	.word	0x08002711
 80026e8:	08002727 	.word	0x08002727
 80026ec:	08002717 	.word	0x08002717
 80026f0:	08002727 	.word	0x08002727
 80026f4:	08002727 	.word	0x08002727
 80026f8:	08002727 	.word	0x08002727
 80026fc:	0800271f 	.word	0x0800271f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002700:	f7ff fb72 	bl	8001de8 <HAL_RCC_GetPCLK1Freq>
 8002704:	6178      	str	r0, [r7, #20]
        break;
 8002706:	e013      	b.n	8002730 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002708:	f7ff fb84 	bl	8001e14 <HAL_RCC_GetPCLK2Freq>
 800270c:	6178      	str	r0, [r7, #20]
        break;
 800270e:	e00f      	b.n	8002730 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002710:	4b49      	ldr	r3, [pc, #292]	; (8002838 <UART_SetConfig+0x468>)
 8002712:	617b      	str	r3, [r7, #20]
        break;
 8002714:	e00c      	b.n	8002730 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002716:	f7ff fad1 	bl	8001cbc <HAL_RCC_GetSysClockFreq>
 800271a:	6178      	str	r0, [r7, #20]
        break;
 800271c:	e008      	b.n	8002730 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800271e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002722:	617b      	str	r3, [r7, #20]
        break;
 8002724:	e004      	b.n	8002730 <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	76bb      	strb	r3, [r7, #26]
        break;
 800272e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d074      	beq.n	8002820 <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	005a      	lsls	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	085b      	lsrs	r3, r3, #1
 8002740:	441a      	add	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	fbb2 f3f3 	udiv	r3, r2, r3
 800274a:	b29b      	uxth	r3, r3
 800274c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2b0f      	cmp	r3, #15
 8002752:	d916      	bls.n	8002782 <UART_SetConfig+0x3b2>
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800275a:	d212      	bcs.n	8002782 <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	b29b      	uxth	r3, r3
 8002760:	f023 030f 	bic.w	r3, r3, #15
 8002764:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	085b      	lsrs	r3, r3, #1
 800276a:	b29b      	uxth	r3, r3
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	b29a      	uxth	r2, r3
 8002772:	89fb      	ldrh	r3, [r7, #14]
 8002774:	4313      	orrs	r3, r2
 8002776:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	89fa      	ldrh	r2, [r7, #14]
 800277e:	60da      	str	r2, [r3, #12]
 8002780:	e04e      	b.n	8002820 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	76bb      	strb	r3, [r7, #26]
 8002786:	e04b      	b.n	8002820 <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002788:	7efb      	ldrb	r3, [r7, #27]
 800278a:	2b08      	cmp	r3, #8
 800278c:	d827      	bhi.n	80027de <UART_SetConfig+0x40e>
 800278e:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <UART_SetConfig+0x3c4>)
 8002790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002794:	080027b9 	.word	0x080027b9
 8002798:	080027c1 	.word	0x080027c1
 800279c:	080027c9 	.word	0x080027c9
 80027a0:	080027df 	.word	0x080027df
 80027a4:	080027cf 	.word	0x080027cf
 80027a8:	080027df 	.word	0x080027df
 80027ac:	080027df 	.word	0x080027df
 80027b0:	080027df 	.word	0x080027df
 80027b4:	080027d7 	.word	0x080027d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027b8:	f7ff fb16 	bl	8001de8 <HAL_RCC_GetPCLK1Freq>
 80027bc:	6178      	str	r0, [r7, #20]
        break;
 80027be:	e013      	b.n	80027e8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027c0:	f7ff fb28 	bl	8001e14 <HAL_RCC_GetPCLK2Freq>
 80027c4:	6178      	str	r0, [r7, #20]
        break;
 80027c6:	e00f      	b.n	80027e8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027c8:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <UART_SetConfig+0x468>)
 80027ca:	617b      	str	r3, [r7, #20]
        break;
 80027cc:	e00c      	b.n	80027e8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027ce:	f7ff fa75 	bl	8001cbc <HAL_RCC_GetSysClockFreq>
 80027d2:	6178      	str	r0, [r7, #20]
        break;
 80027d4:	e008      	b.n	80027e8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027da:	617b      	str	r3, [r7, #20]
        break;
 80027dc:	e004      	b.n	80027e8 <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	76bb      	strb	r3, [r7, #26]
        break;
 80027e6:	bf00      	nop
    }

    if (pclk != 0U)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d018      	beq.n	8002820 <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	085a      	lsrs	r2, r3, #1
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	441a      	add	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002800:	b29b      	uxth	r3, r3
 8002802:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	2b0f      	cmp	r3, #15
 8002808:	d908      	bls.n	800281c <UART_SetConfig+0x44c>
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002810:	d204      	bcs.n	800281c <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	e001      	b.n	8002820 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800282c:	7ebb      	ldrb	r3, [r7, #26]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3720      	adds	r7, #32
 8002832:	46bd      	mov	sp, r7
 8002834:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002838:	00f42400 	.word	0x00f42400

0800283c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00a      	beq.n	80028aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00a      	beq.n	80028ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002918:	2b00      	cmp	r3, #0
 800291a:	d01a      	beq.n	8002952 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800293a:	d10a      	bne.n	8002952 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	605a      	str	r2, [r3, #4]
  }
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af02      	add	r7, sp, #8
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800298e:	f7fe f933 	bl	8000bf8 <HAL_GetTick>
 8002992:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d10e      	bne.n	80029c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 f82a 	bl	8002a0a <UART_WaitOnFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e020      	b.n	8002a02 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d10e      	bne.n	80029ec <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f814 	bl	8002a0a <UART_WaitOnFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e00a      	b.n	8002a02 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2220      	movs	r2, #32
 80029f0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2220      	movs	r2, #32
 80029f6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b084      	sub	sp, #16
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	603b      	str	r3, [r7, #0]
 8002a16:	4613      	mov	r3, r2
 8002a18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a1a:	e05d      	b.n	8002ad8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a22:	d059      	beq.n	8002ad8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a24:	f7fe f8e8 	bl	8000bf8 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d302      	bcc.n	8002a3a <UART_WaitOnFlagUntilTimeout+0x30>
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d11b      	bne.n	8002a72 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a48:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0201 	bic.w	r2, r2, #1
 8002a58:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e042      	b.n	8002af8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d02b      	beq.n	8002ad8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a8e:	d123      	bne.n	8002ad8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002aa8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0201 	bic.w	r2, r2, #1
 8002ab8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2220      	movs	r2, #32
 8002abe:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e00f      	b.n	8002af8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69da      	ldr	r2, [r3, #28]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d092      	beq.n	8002a1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <__errno>:
 8002b00:	4b01      	ldr	r3, [pc, #4]	; (8002b08 <__errno+0x8>)
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	2000000c 	.word	0x2000000c

08002b0c <__libc_init_array>:
 8002b0c:	b570      	push	{r4, r5, r6, lr}
 8002b0e:	4e0d      	ldr	r6, [pc, #52]	; (8002b44 <__libc_init_array+0x38>)
 8002b10:	4c0d      	ldr	r4, [pc, #52]	; (8002b48 <__libc_init_array+0x3c>)
 8002b12:	1ba4      	subs	r4, r4, r6
 8002b14:	10a4      	asrs	r4, r4, #2
 8002b16:	2500      	movs	r5, #0
 8002b18:	42a5      	cmp	r5, r4
 8002b1a:	d109      	bne.n	8002b30 <__libc_init_array+0x24>
 8002b1c:	4e0b      	ldr	r6, [pc, #44]	; (8002b4c <__libc_init_array+0x40>)
 8002b1e:	4c0c      	ldr	r4, [pc, #48]	; (8002b50 <__libc_init_array+0x44>)
 8002b20:	f000 ff68 	bl	80039f4 <_init>
 8002b24:	1ba4      	subs	r4, r4, r6
 8002b26:	10a4      	asrs	r4, r4, #2
 8002b28:	2500      	movs	r5, #0
 8002b2a:	42a5      	cmp	r5, r4
 8002b2c:	d105      	bne.n	8002b3a <__libc_init_array+0x2e>
 8002b2e:	bd70      	pop	{r4, r5, r6, pc}
 8002b30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b34:	4798      	blx	r3
 8002b36:	3501      	adds	r5, #1
 8002b38:	e7ee      	b.n	8002b18 <__libc_init_array+0xc>
 8002b3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b3e:	4798      	blx	r3
 8002b40:	3501      	adds	r5, #1
 8002b42:	e7f2      	b.n	8002b2a <__libc_init_array+0x1e>
 8002b44:	08003b18 	.word	0x08003b18
 8002b48:	08003b18 	.word	0x08003b18
 8002b4c:	08003b18 	.word	0x08003b18
 8002b50:	08003b1c 	.word	0x08003b1c

08002b54 <memset>:
 8002b54:	4402      	add	r2, r0
 8002b56:	4603      	mov	r3, r0
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d100      	bne.n	8002b5e <memset+0xa>
 8002b5c:	4770      	bx	lr
 8002b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b62:	e7f9      	b.n	8002b58 <memset+0x4>

08002b64 <iprintf>:
 8002b64:	b40f      	push	{r0, r1, r2, r3}
 8002b66:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <iprintf+0x2c>)
 8002b68:	b513      	push	{r0, r1, r4, lr}
 8002b6a:	681c      	ldr	r4, [r3, #0]
 8002b6c:	b124      	cbz	r4, 8002b78 <iprintf+0x14>
 8002b6e:	69a3      	ldr	r3, [r4, #24]
 8002b70:	b913      	cbnz	r3, 8002b78 <iprintf+0x14>
 8002b72:	4620      	mov	r0, r4
 8002b74:	f000 fa22 	bl	8002fbc <__sinit>
 8002b78:	ab05      	add	r3, sp, #20
 8002b7a:	9a04      	ldr	r2, [sp, #16]
 8002b7c:	68a1      	ldr	r1, [r4, #8]
 8002b7e:	9301      	str	r3, [sp, #4]
 8002b80:	4620      	mov	r0, r4
 8002b82:	f000 fbdb 	bl	800333c <_vfiprintf_r>
 8002b86:	b002      	add	sp, #8
 8002b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b8c:	b004      	add	sp, #16
 8002b8e:	4770      	bx	lr
 8002b90:	2000000c 	.word	0x2000000c

08002b94 <_puts_r>:
 8002b94:	b570      	push	{r4, r5, r6, lr}
 8002b96:	460e      	mov	r6, r1
 8002b98:	4605      	mov	r5, r0
 8002b9a:	b118      	cbz	r0, 8002ba4 <_puts_r+0x10>
 8002b9c:	6983      	ldr	r3, [r0, #24]
 8002b9e:	b90b      	cbnz	r3, 8002ba4 <_puts_r+0x10>
 8002ba0:	f000 fa0c 	bl	8002fbc <__sinit>
 8002ba4:	69ab      	ldr	r3, [r5, #24]
 8002ba6:	68ac      	ldr	r4, [r5, #8]
 8002ba8:	b913      	cbnz	r3, 8002bb0 <_puts_r+0x1c>
 8002baa:	4628      	mov	r0, r5
 8002bac:	f000 fa06 	bl	8002fbc <__sinit>
 8002bb0:	4b23      	ldr	r3, [pc, #140]	; (8002c40 <_puts_r+0xac>)
 8002bb2:	429c      	cmp	r4, r3
 8002bb4:	d117      	bne.n	8002be6 <_puts_r+0x52>
 8002bb6:	686c      	ldr	r4, [r5, #4]
 8002bb8:	89a3      	ldrh	r3, [r4, #12]
 8002bba:	071b      	lsls	r3, r3, #28
 8002bbc:	d51d      	bpl.n	8002bfa <_puts_r+0x66>
 8002bbe:	6923      	ldr	r3, [r4, #16]
 8002bc0:	b1db      	cbz	r3, 8002bfa <_puts_r+0x66>
 8002bc2:	3e01      	subs	r6, #1
 8002bc4:	68a3      	ldr	r3, [r4, #8]
 8002bc6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	60a3      	str	r3, [r4, #8]
 8002bce:	b9e9      	cbnz	r1, 8002c0c <_puts_r+0x78>
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	da2e      	bge.n	8002c32 <_puts_r+0x9e>
 8002bd4:	4622      	mov	r2, r4
 8002bd6:	210a      	movs	r1, #10
 8002bd8:	4628      	mov	r0, r5
 8002bda:	f000 f83f 	bl	8002c5c <__swbuf_r>
 8002bde:	3001      	adds	r0, #1
 8002be0:	d011      	beq.n	8002c06 <_puts_r+0x72>
 8002be2:	200a      	movs	r0, #10
 8002be4:	e011      	b.n	8002c0a <_puts_r+0x76>
 8002be6:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <_puts_r+0xb0>)
 8002be8:	429c      	cmp	r4, r3
 8002bea:	d101      	bne.n	8002bf0 <_puts_r+0x5c>
 8002bec:	68ac      	ldr	r4, [r5, #8]
 8002bee:	e7e3      	b.n	8002bb8 <_puts_r+0x24>
 8002bf0:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <_puts_r+0xb4>)
 8002bf2:	429c      	cmp	r4, r3
 8002bf4:	bf08      	it	eq
 8002bf6:	68ec      	ldreq	r4, [r5, #12]
 8002bf8:	e7de      	b.n	8002bb8 <_puts_r+0x24>
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	f000 f87f 	bl	8002d00 <__swsetup_r>
 8002c02:	2800      	cmp	r0, #0
 8002c04:	d0dd      	beq.n	8002bc2 <_puts_r+0x2e>
 8002c06:	f04f 30ff 	mov.w	r0, #4294967295
 8002c0a:	bd70      	pop	{r4, r5, r6, pc}
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	da04      	bge.n	8002c1a <_puts_r+0x86>
 8002c10:	69a2      	ldr	r2, [r4, #24]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	dc06      	bgt.n	8002c24 <_puts_r+0x90>
 8002c16:	290a      	cmp	r1, #10
 8002c18:	d004      	beq.n	8002c24 <_puts_r+0x90>
 8002c1a:	6823      	ldr	r3, [r4, #0]
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	6022      	str	r2, [r4, #0]
 8002c20:	7019      	strb	r1, [r3, #0]
 8002c22:	e7cf      	b.n	8002bc4 <_puts_r+0x30>
 8002c24:	4622      	mov	r2, r4
 8002c26:	4628      	mov	r0, r5
 8002c28:	f000 f818 	bl	8002c5c <__swbuf_r>
 8002c2c:	3001      	adds	r0, #1
 8002c2e:	d1c9      	bne.n	8002bc4 <_puts_r+0x30>
 8002c30:	e7e9      	b.n	8002c06 <_puts_r+0x72>
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	200a      	movs	r0, #10
 8002c36:	1c5a      	adds	r2, r3, #1
 8002c38:	6022      	str	r2, [r4, #0]
 8002c3a:	7018      	strb	r0, [r3, #0]
 8002c3c:	e7e5      	b.n	8002c0a <_puts_r+0x76>
 8002c3e:	bf00      	nop
 8002c40:	08003a9c 	.word	0x08003a9c
 8002c44:	08003abc 	.word	0x08003abc
 8002c48:	08003a7c 	.word	0x08003a7c

08002c4c <puts>:
 8002c4c:	4b02      	ldr	r3, [pc, #8]	; (8002c58 <puts+0xc>)
 8002c4e:	4601      	mov	r1, r0
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	f7ff bf9f 	b.w	8002b94 <_puts_r>
 8002c56:	bf00      	nop
 8002c58:	2000000c 	.word	0x2000000c

08002c5c <__swbuf_r>:
 8002c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5e:	460e      	mov	r6, r1
 8002c60:	4614      	mov	r4, r2
 8002c62:	4605      	mov	r5, r0
 8002c64:	b118      	cbz	r0, 8002c6e <__swbuf_r+0x12>
 8002c66:	6983      	ldr	r3, [r0, #24]
 8002c68:	b90b      	cbnz	r3, 8002c6e <__swbuf_r+0x12>
 8002c6a:	f000 f9a7 	bl	8002fbc <__sinit>
 8002c6e:	4b21      	ldr	r3, [pc, #132]	; (8002cf4 <__swbuf_r+0x98>)
 8002c70:	429c      	cmp	r4, r3
 8002c72:	d12a      	bne.n	8002cca <__swbuf_r+0x6e>
 8002c74:	686c      	ldr	r4, [r5, #4]
 8002c76:	69a3      	ldr	r3, [r4, #24]
 8002c78:	60a3      	str	r3, [r4, #8]
 8002c7a:	89a3      	ldrh	r3, [r4, #12]
 8002c7c:	071a      	lsls	r2, r3, #28
 8002c7e:	d52e      	bpl.n	8002cde <__swbuf_r+0x82>
 8002c80:	6923      	ldr	r3, [r4, #16]
 8002c82:	b363      	cbz	r3, 8002cde <__swbuf_r+0x82>
 8002c84:	6923      	ldr	r3, [r4, #16]
 8002c86:	6820      	ldr	r0, [r4, #0]
 8002c88:	1ac0      	subs	r0, r0, r3
 8002c8a:	6963      	ldr	r3, [r4, #20]
 8002c8c:	b2f6      	uxtb	r6, r6
 8002c8e:	4283      	cmp	r3, r0
 8002c90:	4637      	mov	r7, r6
 8002c92:	dc04      	bgt.n	8002c9e <__swbuf_r+0x42>
 8002c94:	4621      	mov	r1, r4
 8002c96:	4628      	mov	r0, r5
 8002c98:	f000 f926 	bl	8002ee8 <_fflush_r>
 8002c9c:	bb28      	cbnz	r0, 8002cea <__swbuf_r+0x8e>
 8002c9e:	68a3      	ldr	r3, [r4, #8]
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	60a3      	str	r3, [r4, #8]
 8002ca4:	6823      	ldr	r3, [r4, #0]
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	6022      	str	r2, [r4, #0]
 8002caa:	701e      	strb	r6, [r3, #0]
 8002cac:	6963      	ldr	r3, [r4, #20]
 8002cae:	3001      	adds	r0, #1
 8002cb0:	4283      	cmp	r3, r0
 8002cb2:	d004      	beq.n	8002cbe <__swbuf_r+0x62>
 8002cb4:	89a3      	ldrh	r3, [r4, #12]
 8002cb6:	07db      	lsls	r3, r3, #31
 8002cb8:	d519      	bpl.n	8002cee <__swbuf_r+0x92>
 8002cba:	2e0a      	cmp	r6, #10
 8002cbc:	d117      	bne.n	8002cee <__swbuf_r+0x92>
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	4628      	mov	r0, r5
 8002cc2:	f000 f911 	bl	8002ee8 <_fflush_r>
 8002cc6:	b190      	cbz	r0, 8002cee <__swbuf_r+0x92>
 8002cc8:	e00f      	b.n	8002cea <__swbuf_r+0x8e>
 8002cca:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <__swbuf_r+0x9c>)
 8002ccc:	429c      	cmp	r4, r3
 8002cce:	d101      	bne.n	8002cd4 <__swbuf_r+0x78>
 8002cd0:	68ac      	ldr	r4, [r5, #8]
 8002cd2:	e7d0      	b.n	8002c76 <__swbuf_r+0x1a>
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <__swbuf_r+0xa0>)
 8002cd6:	429c      	cmp	r4, r3
 8002cd8:	bf08      	it	eq
 8002cda:	68ec      	ldreq	r4, [r5, #12]
 8002cdc:	e7cb      	b.n	8002c76 <__swbuf_r+0x1a>
 8002cde:	4621      	mov	r1, r4
 8002ce0:	4628      	mov	r0, r5
 8002ce2:	f000 f80d 	bl	8002d00 <__swsetup_r>
 8002ce6:	2800      	cmp	r0, #0
 8002ce8:	d0cc      	beq.n	8002c84 <__swbuf_r+0x28>
 8002cea:	f04f 37ff 	mov.w	r7, #4294967295
 8002cee:	4638      	mov	r0, r7
 8002cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	08003a9c 	.word	0x08003a9c
 8002cf8:	08003abc 	.word	0x08003abc
 8002cfc:	08003a7c 	.word	0x08003a7c

08002d00 <__swsetup_r>:
 8002d00:	4b32      	ldr	r3, [pc, #200]	; (8002dcc <__swsetup_r+0xcc>)
 8002d02:	b570      	push	{r4, r5, r6, lr}
 8002d04:	681d      	ldr	r5, [r3, #0]
 8002d06:	4606      	mov	r6, r0
 8002d08:	460c      	mov	r4, r1
 8002d0a:	b125      	cbz	r5, 8002d16 <__swsetup_r+0x16>
 8002d0c:	69ab      	ldr	r3, [r5, #24]
 8002d0e:	b913      	cbnz	r3, 8002d16 <__swsetup_r+0x16>
 8002d10:	4628      	mov	r0, r5
 8002d12:	f000 f953 	bl	8002fbc <__sinit>
 8002d16:	4b2e      	ldr	r3, [pc, #184]	; (8002dd0 <__swsetup_r+0xd0>)
 8002d18:	429c      	cmp	r4, r3
 8002d1a:	d10f      	bne.n	8002d3c <__swsetup_r+0x3c>
 8002d1c:	686c      	ldr	r4, [r5, #4]
 8002d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	0715      	lsls	r5, r2, #28
 8002d26:	d42c      	bmi.n	8002d82 <__swsetup_r+0x82>
 8002d28:	06d0      	lsls	r0, r2, #27
 8002d2a:	d411      	bmi.n	8002d50 <__swsetup_r+0x50>
 8002d2c:	2209      	movs	r2, #9
 8002d2e:	6032      	str	r2, [r6, #0]
 8002d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d34:	81a3      	strh	r3, [r4, #12]
 8002d36:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3a:	e03e      	b.n	8002dba <__swsetup_r+0xba>
 8002d3c:	4b25      	ldr	r3, [pc, #148]	; (8002dd4 <__swsetup_r+0xd4>)
 8002d3e:	429c      	cmp	r4, r3
 8002d40:	d101      	bne.n	8002d46 <__swsetup_r+0x46>
 8002d42:	68ac      	ldr	r4, [r5, #8]
 8002d44:	e7eb      	b.n	8002d1e <__swsetup_r+0x1e>
 8002d46:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <__swsetup_r+0xd8>)
 8002d48:	429c      	cmp	r4, r3
 8002d4a:	bf08      	it	eq
 8002d4c:	68ec      	ldreq	r4, [r5, #12]
 8002d4e:	e7e6      	b.n	8002d1e <__swsetup_r+0x1e>
 8002d50:	0751      	lsls	r1, r2, #29
 8002d52:	d512      	bpl.n	8002d7a <__swsetup_r+0x7a>
 8002d54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d56:	b141      	cbz	r1, 8002d6a <__swsetup_r+0x6a>
 8002d58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d5c:	4299      	cmp	r1, r3
 8002d5e:	d002      	beq.n	8002d66 <__swsetup_r+0x66>
 8002d60:	4630      	mov	r0, r6
 8002d62:	f000 fa19 	bl	8003198 <_free_r>
 8002d66:	2300      	movs	r3, #0
 8002d68:	6363      	str	r3, [r4, #52]	; 0x34
 8002d6a:	89a3      	ldrh	r3, [r4, #12]
 8002d6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002d70:	81a3      	strh	r3, [r4, #12]
 8002d72:	2300      	movs	r3, #0
 8002d74:	6063      	str	r3, [r4, #4]
 8002d76:	6923      	ldr	r3, [r4, #16]
 8002d78:	6023      	str	r3, [r4, #0]
 8002d7a:	89a3      	ldrh	r3, [r4, #12]
 8002d7c:	f043 0308 	orr.w	r3, r3, #8
 8002d80:	81a3      	strh	r3, [r4, #12]
 8002d82:	6923      	ldr	r3, [r4, #16]
 8002d84:	b94b      	cbnz	r3, 8002d9a <__swsetup_r+0x9a>
 8002d86:	89a3      	ldrh	r3, [r4, #12]
 8002d88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d90:	d003      	beq.n	8002d9a <__swsetup_r+0x9a>
 8002d92:	4621      	mov	r1, r4
 8002d94:	4630      	mov	r0, r6
 8002d96:	f000 f9bf 	bl	8003118 <__smakebuf_r>
 8002d9a:	89a2      	ldrh	r2, [r4, #12]
 8002d9c:	f012 0301 	ands.w	r3, r2, #1
 8002da0:	d00c      	beq.n	8002dbc <__swsetup_r+0xbc>
 8002da2:	2300      	movs	r3, #0
 8002da4:	60a3      	str	r3, [r4, #8]
 8002da6:	6963      	ldr	r3, [r4, #20]
 8002da8:	425b      	negs	r3, r3
 8002daa:	61a3      	str	r3, [r4, #24]
 8002dac:	6923      	ldr	r3, [r4, #16]
 8002dae:	b953      	cbnz	r3, 8002dc6 <__swsetup_r+0xc6>
 8002db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002db4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002db8:	d1ba      	bne.n	8002d30 <__swsetup_r+0x30>
 8002dba:	bd70      	pop	{r4, r5, r6, pc}
 8002dbc:	0792      	lsls	r2, r2, #30
 8002dbe:	bf58      	it	pl
 8002dc0:	6963      	ldrpl	r3, [r4, #20]
 8002dc2:	60a3      	str	r3, [r4, #8]
 8002dc4:	e7f2      	b.n	8002dac <__swsetup_r+0xac>
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	e7f7      	b.n	8002dba <__swsetup_r+0xba>
 8002dca:	bf00      	nop
 8002dcc:	2000000c 	.word	0x2000000c
 8002dd0:	08003a9c 	.word	0x08003a9c
 8002dd4:	08003abc 	.word	0x08003abc
 8002dd8:	08003a7c 	.word	0x08003a7c

08002ddc <__sflush_r>:
 8002ddc:	898a      	ldrh	r2, [r1, #12]
 8002dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002de2:	4605      	mov	r5, r0
 8002de4:	0710      	lsls	r0, r2, #28
 8002de6:	460c      	mov	r4, r1
 8002de8:	d458      	bmi.n	8002e9c <__sflush_r+0xc0>
 8002dea:	684b      	ldr	r3, [r1, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	dc05      	bgt.n	8002dfc <__sflush_r+0x20>
 8002df0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	dc02      	bgt.n	8002dfc <__sflush_r+0x20>
 8002df6:	2000      	movs	r0, #0
 8002df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002dfe:	2e00      	cmp	r6, #0
 8002e00:	d0f9      	beq.n	8002df6 <__sflush_r+0x1a>
 8002e02:	2300      	movs	r3, #0
 8002e04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e08:	682f      	ldr	r7, [r5, #0]
 8002e0a:	6a21      	ldr	r1, [r4, #32]
 8002e0c:	602b      	str	r3, [r5, #0]
 8002e0e:	d032      	beq.n	8002e76 <__sflush_r+0x9a>
 8002e10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e12:	89a3      	ldrh	r3, [r4, #12]
 8002e14:	075a      	lsls	r2, r3, #29
 8002e16:	d505      	bpl.n	8002e24 <__sflush_r+0x48>
 8002e18:	6863      	ldr	r3, [r4, #4]
 8002e1a:	1ac0      	subs	r0, r0, r3
 8002e1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e1e:	b10b      	cbz	r3, 8002e24 <__sflush_r+0x48>
 8002e20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e22:	1ac0      	subs	r0, r0, r3
 8002e24:	2300      	movs	r3, #0
 8002e26:	4602      	mov	r2, r0
 8002e28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e2a:	6a21      	ldr	r1, [r4, #32]
 8002e2c:	4628      	mov	r0, r5
 8002e2e:	47b0      	blx	r6
 8002e30:	1c43      	adds	r3, r0, #1
 8002e32:	89a3      	ldrh	r3, [r4, #12]
 8002e34:	d106      	bne.n	8002e44 <__sflush_r+0x68>
 8002e36:	6829      	ldr	r1, [r5, #0]
 8002e38:	291d      	cmp	r1, #29
 8002e3a:	d848      	bhi.n	8002ece <__sflush_r+0xf2>
 8002e3c:	4a29      	ldr	r2, [pc, #164]	; (8002ee4 <__sflush_r+0x108>)
 8002e3e:	40ca      	lsrs	r2, r1
 8002e40:	07d6      	lsls	r6, r2, #31
 8002e42:	d544      	bpl.n	8002ece <__sflush_r+0xf2>
 8002e44:	2200      	movs	r2, #0
 8002e46:	6062      	str	r2, [r4, #4]
 8002e48:	04d9      	lsls	r1, r3, #19
 8002e4a:	6922      	ldr	r2, [r4, #16]
 8002e4c:	6022      	str	r2, [r4, #0]
 8002e4e:	d504      	bpl.n	8002e5a <__sflush_r+0x7e>
 8002e50:	1c42      	adds	r2, r0, #1
 8002e52:	d101      	bne.n	8002e58 <__sflush_r+0x7c>
 8002e54:	682b      	ldr	r3, [r5, #0]
 8002e56:	b903      	cbnz	r3, 8002e5a <__sflush_r+0x7e>
 8002e58:	6560      	str	r0, [r4, #84]	; 0x54
 8002e5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e5c:	602f      	str	r7, [r5, #0]
 8002e5e:	2900      	cmp	r1, #0
 8002e60:	d0c9      	beq.n	8002df6 <__sflush_r+0x1a>
 8002e62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e66:	4299      	cmp	r1, r3
 8002e68:	d002      	beq.n	8002e70 <__sflush_r+0x94>
 8002e6a:	4628      	mov	r0, r5
 8002e6c:	f000 f994 	bl	8003198 <_free_r>
 8002e70:	2000      	movs	r0, #0
 8002e72:	6360      	str	r0, [r4, #52]	; 0x34
 8002e74:	e7c0      	b.n	8002df8 <__sflush_r+0x1c>
 8002e76:	2301      	movs	r3, #1
 8002e78:	4628      	mov	r0, r5
 8002e7a:	47b0      	blx	r6
 8002e7c:	1c41      	adds	r1, r0, #1
 8002e7e:	d1c8      	bne.n	8002e12 <__sflush_r+0x36>
 8002e80:	682b      	ldr	r3, [r5, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0c5      	beq.n	8002e12 <__sflush_r+0x36>
 8002e86:	2b1d      	cmp	r3, #29
 8002e88:	d001      	beq.n	8002e8e <__sflush_r+0xb2>
 8002e8a:	2b16      	cmp	r3, #22
 8002e8c:	d101      	bne.n	8002e92 <__sflush_r+0xb6>
 8002e8e:	602f      	str	r7, [r5, #0]
 8002e90:	e7b1      	b.n	8002df6 <__sflush_r+0x1a>
 8002e92:	89a3      	ldrh	r3, [r4, #12]
 8002e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e98:	81a3      	strh	r3, [r4, #12]
 8002e9a:	e7ad      	b.n	8002df8 <__sflush_r+0x1c>
 8002e9c:	690f      	ldr	r7, [r1, #16]
 8002e9e:	2f00      	cmp	r7, #0
 8002ea0:	d0a9      	beq.n	8002df6 <__sflush_r+0x1a>
 8002ea2:	0793      	lsls	r3, r2, #30
 8002ea4:	680e      	ldr	r6, [r1, #0]
 8002ea6:	bf08      	it	eq
 8002ea8:	694b      	ldreq	r3, [r1, #20]
 8002eaa:	600f      	str	r7, [r1, #0]
 8002eac:	bf18      	it	ne
 8002eae:	2300      	movne	r3, #0
 8002eb0:	eba6 0807 	sub.w	r8, r6, r7
 8002eb4:	608b      	str	r3, [r1, #8]
 8002eb6:	f1b8 0f00 	cmp.w	r8, #0
 8002eba:	dd9c      	ble.n	8002df6 <__sflush_r+0x1a>
 8002ebc:	4643      	mov	r3, r8
 8002ebe:	463a      	mov	r2, r7
 8002ec0:	6a21      	ldr	r1, [r4, #32]
 8002ec2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	47b0      	blx	r6
 8002ec8:	2800      	cmp	r0, #0
 8002eca:	dc06      	bgt.n	8002eda <__sflush_r+0xfe>
 8002ecc:	89a3      	ldrh	r3, [r4, #12]
 8002ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ed2:	81a3      	strh	r3, [r4, #12]
 8002ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed8:	e78e      	b.n	8002df8 <__sflush_r+0x1c>
 8002eda:	4407      	add	r7, r0
 8002edc:	eba8 0800 	sub.w	r8, r8, r0
 8002ee0:	e7e9      	b.n	8002eb6 <__sflush_r+0xda>
 8002ee2:	bf00      	nop
 8002ee4:	20400001 	.word	0x20400001

08002ee8 <_fflush_r>:
 8002ee8:	b538      	push	{r3, r4, r5, lr}
 8002eea:	690b      	ldr	r3, [r1, #16]
 8002eec:	4605      	mov	r5, r0
 8002eee:	460c      	mov	r4, r1
 8002ef0:	b1db      	cbz	r3, 8002f2a <_fflush_r+0x42>
 8002ef2:	b118      	cbz	r0, 8002efc <_fflush_r+0x14>
 8002ef4:	6983      	ldr	r3, [r0, #24]
 8002ef6:	b90b      	cbnz	r3, 8002efc <_fflush_r+0x14>
 8002ef8:	f000 f860 	bl	8002fbc <__sinit>
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <_fflush_r+0x48>)
 8002efe:	429c      	cmp	r4, r3
 8002f00:	d109      	bne.n	8002f16 <_fflush_r+0x2e>
 8002f02:	686c      	ldr	r4, [r5, #4]
 8002f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f08:	b17b      	cbz	r3, 8002f2a <_fflush_r+0x42>
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	4628      	mov	r0, r5
 8002f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f12:	f7ff bf63 	b.w	8002ddc <__sflush_r>
 8002f16:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <_fflush_r+0x4c>)
 8002f18:	429c      	cmp	r4, r3
 8002f1a:	d101      	bne.n	8002f20 <_fflush_r+0x38>
 8002f1c:	68ac      	ldr	r4, [r5, #8]
 8002f1e:	e7f1      	b.n	8002f04 <_fflush_r+0x1c>
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <_fflush_r+0x50>)
 8002f22:	429c      	cmp	r4, r3
 8002f24:	bf08      	it	eq
 8002f26:	68ec      	ldreq	r4, [r5, #12]
 8002f28:	e7ec      	b.n	8002f04 <_fflush_r+0x1c>
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	bd38      	pop	{r3, r4, r5, pc}
 8002f2e:	bf00      	nop
 8002f30:	08003a9c 	.word	0x08003a9c
 8002f34:	08003abc 	.word	0x08003abc
 8002f38:	08003a7c 	.word	0x08003a7c

08002f3c <std>:
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	b510      	push	{r4, lr}
 8002f40:	4604      	mov	r4, r0
 8002f42:	e9c0 3300 	strd	r3, r3, [r0]
 8002f46:	6083      	str	r3, [r0, #8]
 8002f48:	8181      	strh	r1, [r0, #12]
 8002f4a:	6643      	str	r3, [r0, #100]	; 0x64
 8002f4c:	81c2      	strh	r2, [r0, #14]
 8002f4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f52:	6183      	str	r3, [r0, #24]
 8002f54:	4619      	mov	r1, r3
 8002f56:	2208      	movs	r2, #8
 8002f58:	305c      	adds	r0, #92	; 0x5c
 8002f5a:	f7ff fdfb 	bl	8002b54 <memset>
 8002f5e:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <std+0x38>)
 8002f60:	6263      	str	r3, [r4, #36]	; 0x24
 8002f62:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <std+0x3c>)
 8002f64:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f66:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <std+0x40>)
 8002f68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <std+0x44>)
 8002f6c:	6224      	str	r4, [r4, #32]
 8002f6e:	6323      	str	r3, [r4, #48]	; 0x30
 8002f70:	bd10      	pop	{r4, pc}
 8002f72:	bf00      	nop
 8002f74:	08003899 	.word	0x08003899
 8002f78:	080038bb 	.word	0x080038bb
 8002f7c:	080038f3 	.word	0x080038f3
 8002f80:	08003917 	.word	0x08003917

08002f84 <_cleanup_r>:
 8002f84:	4901      	ldr	r1, [pc, #4]	; (8002f8c <_cleanup_r+0x8>)
 8002f86:	f000 b885 	b.w	8003094 <_fwalk_reent>
 8002f8a:	bf00      	nop
 8002f8c:	08002ee9 	.word	0x08002ee9

08002f90 <__sfmoreglue>:
 8002f90:	b570      	push	{r4, r5, r6, lr}
 8002f92:	1e4a      	subs	r2, r1, #1
 8002f94:	2568      	movs	r5, #104	; 0x68
 8002f96:	4355      	muls	r5, r2
 8002f98:	460e      	mov	r6, r1
 8002f9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002f9e:	f000 f949 	bl	8003234 <_malloc_r>
 8002fa2:	4604      	mov	r4, r0
 8002fa4:	b140      	cbz	r0, 8002fb8 <__sfmoreglue+0x28>
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	e9c0 1600 	strd	r1, r6, [r0]
 8002fac:	300c      	adds	r0, #12
 8002fae:	60a0      	str	r0, [r4, #8]
 8002fb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002fb4:	f7ff fdce 	bl	8002b54 <memset>
 8002fb8:	4620      	mov	r0, r4
 8002fba:	bd70      	pop	{r4, r5, r6, pc}

08002fbc <__sinit>:
 8002fbc:	6983      	ldr	r3, [r0, #24]
 8002fbe:	b510      	push	{r4, lr}
 8002fc0:	4604      	mov	r4, r0
 8002fc2:	bb33      	cbnz	r3, 8003012 <__sinit+0x56>
 8002fc4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002fc8:	6503      	str	r3, [r0, #80]	; 0x50
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <__sinit+0x58>)
 8002fcc:	4a12      	ldr	r2, [pc, #72]	; (8003018 <__sinit+0x5c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6282      	str	r2, [r0, #40]	; 0x28
 8002fd2:	4298      	cmp	r0, r3
 8002fd4:	bf04      	itt	eq
 8002fd6:	2301      	moveq	r3, #1
 8002fd8:	6183      	streq	r3, [r0, #24]
 8002fda:	f000 f81f 	bl	800301c <__sfp>
 8002fde:	6060      	str	r0, [r4, #4]
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	f000 f81b 	bl	800301c <__sfp>
 8002fe6:	60a0      	str	r0, [r4, #8]
 8002fe8:	4620      	mov	r0, r4
 8002fea:	f000 f817 	bl	800301c <__sfp>
 8002fee:	2200      	movs	r2, #0
 8002ff0:	60e0      	str	r0, [r4, #12]
 8002ff2:	2104      	movs	r1, #4
 8002ff4:	6860      	ldr	r0, [r4, #4]
 8002ff6:	f7ff ffa1 	bl	8002f3c <std>
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	2109      	movs	r1, #9
 8002ffe:	68a0      	ldr	r0, [r4, #8]
 8003000:	f7ff ff9c 	bl	8002f3c <std>
 8003004:	2202      	movs	r2, #2
 8003006:	2112      	movs	r1, #18
 8003008:	68e0      	ldr	r0, [r4, #12]
 800300a:	f7ff ff97 	bl	8002f3c <std>
 800300e:	2301      	movs	r3, #1
 8003010:	61a3      	str	r3, [r4, #24]
 8003012:	bd10      	pop	{r4, pc}
 8003014:	08003a78 	.word	0x08003a78
 8003018:	08002f85 	.word	0x08002f85

0800301c <__sfp>:
 800301c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301e:	4b1b      	ldr	r3, [pc, #108]	; (800308c <__sfp+0x70>)
 8003020:	681e      	ldr	r6, [r3, #0]
 8003022:	69b3      	ldr	r3, [r6, #24]
 8003024:	4607      	mov	r7, r0
 8003026:	b913      	cbnz	r3, 800302e <__sfp+0x12>
 8003028:	4630      	mov	r0, r6
 800302a:	f7ff ffc7 	bl	8002fbc <__sinit>
 800302e:	3648      	adds	r6, #72	; 0x48
 8003030:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003034:	3b01      	subs	r3, #1
 8003036:	d503      	bpl.n	8003040 <__sfp+0x24>
 8003038:	6833      	ldr	r3, [r6, #0]
 800303a:	b133      	cbz	r3, 800304a <__sfp+0x2e>
 800303c:	6836      	ldr	r6, [r6, #0]
 800303e:	e7f7      	b.n	8003030 <__sfp+0x14>
 8003040:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003044:	b16d      	cbz	r5, 8003062 <__sfp+0x46>
 8003046:	3468      	adds	r4, #104	; 0x68
 8003048:	e7f4      	b.n	8003034 <__sfp+0x18>
 800304a:	2104      	movs	r1, #4
 800304c:	4638      	mov	r0, r7
 800304e:	f7ff ff9f 	bl	8002f90 <__sfmoreglue>
 8003052:	6030      	str	r0, [r6, #0]
 8003054:	2800      	cmp	r0, #0
 8003056:	d1f1      	bne.n	800303c <__sfp+0x20>
 8003058:	230c      	movs	r3, #12
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	4604      	mov	r4, r0
 800305e:	4620      	mov	r0, r4
 8003060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003062:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <__sfp+0x74>)
 8003064:	6665      	str	r5, [r4, #100]	; 0x64
 8003066:	e9c4 5500 	strd	r5, r5, [r4]
 800306a:	60a5      	str	r5, [r4, #8]
 800306c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003070:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003074:	2208      	movs	r2, #8
 8003076:	4629      	mov	r1, r5
 8003078:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800307c:	f7ff fd6a 	bl	8002b54 <memset>
 8003080:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003084:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003088:	e7e9      	b.n	800305e <__sfp+0x42>
 800308a:	bf00      	nop
 800308c:	08003a78 	.word	0x08003a78
 8003090:	ffff0001 	.word	0xffff0001

08003094 <_fwalk_reent>:
 8003094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003098:	4680      	mov	r8, r0
 800309a:	4689      	mov	r9, r1
 800309c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80030a0:	2600      	movs	r6, #0
 80030a2:	b914      	cbnz	r4, 80030aa <_fwalk_reent+0x16>
 80030a4:	4630      	mov	r0, r6
 80030a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030aa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80030ae:	3f01      	subs	r7, #1
 80030b0:	d501      	bpl.n	80030b6 <_fwalk_reent+0x22>
 80030b2:	6824      	ldr	r4, [r4, #0]
 80030b4:	e7f5      	b.n	80030a2 <_fwalk_reent+0xe>
 80030b6:	89ab      	ldrh	r3, [r5, #12]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d907      	bls.n	80030cc <_fwalk_reent+0x38>
 80030bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80030c0:	3301      	adds	r3, #1
 80030c2:	d003      	beq.n	80030cc <_fwalk_reent+0x38>
 80030c4:	4629      	mov	r1, r5
 80030c6:	4640      	mov	r0, r8
 80030c8:	47c8      	blx	r9
 80030ca:	4306      	orrs	r6, r0
 80030cc:	3568      	adds	r5, #104	; 0x68
 80030ce:	e7ee      	b.n	80030ae <_fwalk_reent+0x1a>

080030d0 <__swhatbuf_r>:
 80030d0:	b570      	push	{r4, r5, r6, lr}
 80030d2:	460e      	mov	r6, r1
 80030d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030d8:	2900      	cmp	r1, #0
 80030da:	b096      	sub	sp, #88	; 0x58
 80030dc:	4614      	mov	r4, r2
 80030de:	461d      	mov	r5, r3
 80030e0:	da07      	bge.n	80030f2 <__swhatbuf_r+0x22>
 80030e2:	2300      	movs	r3, #0
 80030e4:	602b      	str	r3, [r5, #0]
 80030e6:	89b3      	ldrh	r3, [r6, #12]
 80030e8:	061a      	lsls	r2, r3, #24
 80030ea:	d410      	bmi.n	800310e <__swhatbuf_r+0x3e>
 80030ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030f0:	e00e      	b.n	8003110 <__swhatbuf_r+0x40>
 80030f2:	466a      	mov	r2, sp
 80030f4:	f000 fc36 	bl	8003964 <_fstat_r>
 80030f8:	2800      	cmp	r0, #0
 80030fa:	dbf2      	blt.n	80030e2 <__swhatbuf_r+0x12>
 80030fc:	9a01      	ldr	r2, [sp, #4]
 80030fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003102:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003106:	425a      	negs	r2, r3
 8003108:	415a      	adcs	r2, r3
 800310a:	602a      	str	r2, [r5, #0]
 800310c:	e7ee      	b.n	80030ec <__swhatbuf_r+0x1c>
 800310e:	2340      	movs	r3, #64	; 0x40
 8003110:	2000      	movs	r0, #0
 8003112:	6023      	str	r3, [r4, #0]
 8003114:	b016      	add	sp, #88	; 0x58
 8003116:	bd70      	pop	{r4, r5, r6, pc}

08003118 <__smakebuf_r>:
 8003118:	898b      	ldrh	r3, [r1, #12]
 800311a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800311c:	079d      	lsls	r5, r3, #30
 800311e:	4606      	mov	r6, r0
 8003120:	460c      	mov	r4, r1
 8003122:	d507      	bpl.n	8003134 <__smakebuf_r+0x1c>
 8003124:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003128:	6023      	str	r3, [r4, #0]
 800312a:	6123      	str	r3, [r4, #16]
 800312c:	2301      	movs	r3, #1
 800312e:	6163      	str	r3, [r4, #20]
 8003130:	b002      	add	sp, #8
 8003132:	bd70      	pop	{r4, r5, r6, pc}
 8003134:	ab01      	add	r3, sp, #4
 8003136:	466a      	mov	r2, sp
 8003138:	f7ff ffca 	bl	80030d0 <__swhatbuf_r>
 800313c:	9900      	ldr	r1, [sp, #0]
 800313e:	4605      	mov	r5, r0
 8003140:	4630      	mov	r0, r6
 8003142:	f000 f877 	bl	8003234 <_malloc_r>
 8003146:	b948      	cbnz	r0, 800315c <__smakebuf_r+0x44>
 8003148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800314c:	059a      	lsls	r2, r3, #22
 800314e:	d4ef      	bmi.n	8003130 <__smakebuf_r+0x18>
 8003150:	f023 0303 	bic.w	r3, r3, #3
 8003154:	f043 0302 	orr.w	r3, r3, #2
 8003158:	81a3      	strh	r3, [r4, #12]
 800315a:	e7e3      	b.n	8003124 <__smakebuf_r+0xc>
 800315c:	4b0d      	ldr	r3, [pc, #52]	; (8003194 <__smakebuf_r+0x7c>)
 800315e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003160:	89a3      	ldrh	r3, [r4, #12]
 8003162:	6020      	str	r0, [r4, #0]
 8003164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003168:	81a3      	strh	r3, [r4, #12]
 800316a:	9b00      	ldr	r3, [sp, #0]
 800316c:	6163      	str	r3, [r4, #20]
 800316e:	9b01      	ldr	r3, [sp, #4]
 8003170:	6120      	str	r0, [r4, #16]
 8003172:	b15b      	cbz	r3, 800318c <__smakebuf_r+0x74>
 8003174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003178:	4630      	mov	r0, r6
 800317a:	f000 fc05 	bl	8003988 <_isatty_r>
 800317e:	b128      	cbz	r0, 800318c <__smakebuf_r+0x74>
 8003180:	89a3      	ldrh	r3, [r4, #12]
 8003182:	f023 0303 	bic.w	r3, r3, #3
 8003186:	f043 0301 	orr.w	r3, r3, #1
 800318a:	81a3      	strh	r3, [r4, #12]
 800318c:	89a3      	ldrh	r3, [r4, #12]
 800318e:	431d      	orrs	r5, r3
 8003190:	81a5      	strh	r5, [r4, #12]
 8003192:	e7cd      	b.n	8003130 <__smakebuf_r+0x18>
 8003194:	08002f85 	.word	0x08002f85

08003198 <_free_r>:
 8003198:	b538      	push	{r3, r4, r5, lr}
 800319a:	4605      	mov	r5, r0
 800319c:	2900      	cmp	r1, #0
 800319e:	d045      	beq.n	800322c <_free_r+0x94>
 80031a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031a4:	1f0c      	subs	r4, r1, #4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	bfb8      	it	lt
 80031aa:	18e4      	addlt	r4, r4, r3
 80031ac:	f000 fc0e 	bl	80039cc <__malloc_lock>
 80031b0:	4a1f      	ldr	r2, [pc, #124]	; (8003230 <_free_r+0x98>)
 80031b2:	6813      	ldr	r3, [r2, #0]
 80031b4:	4610      	mov	r0, r2
 80031b6:	b933      	cbnz	r3, 80031c6 <_free_r+0x2e>
 80031b8:	6063      	str	r3, [r4, #4]
 80031ba:	6014      	str	r4, [r2, #0]
 80031bc:	4628      	mov	r0, r5
 80031be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031c2:	f000 bc04 	b.w	80039ce <__malloc_unlock>
 80031c6:	42a3      	cmp	r3, r4
 80031c8:	d90c      	bls.n	80031e4 <_free_r+0x4c>
 80031ca:	6821      	ldr	r1, [r4, #0]
 80031cc:	1862      	adds	r2, r4, r1
 80031ce:	4293      	cmp	r3, r2
 80031d0:	bf04      	itt	eq
 80031d2:	681a      	ldreq	r2, [r3, #0]
 80031d4:	685b      	ldreq	r3, [r3, #4]
 80031d6:	6063      	str	r3, [r4, #4]
 80031d8:	bf04      	itt	eq
 80031da:	1852      	addeq	r2, r2, r1
 80031dc:	6022      	streq	r2, [r4, #0]
 80031de:	6004      	str	r4, [r0, #0]
 80031e0:	e7ec      	b.n	80031bc <_free_r+0x24>
 80031e2:	4613      	mov	r3, r2
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	b10a      	cbz	r2, 80031ec <_free_r+0x54>
 80031e8:	42a2      	cmp	r2, r4
 80031ea:	d9fa      	bls.n	80031e2 <_free_r+0x4a>
 80031ec:	6819      	ldr	r1, [r3, #0]
 80031ee:	1858      	adds	r0, r3, r1
 80031f0:	42a0      	cmp	r0, r4
 80031f2:	d10b      	bne.n	800320c <_free_r+0x74>
 80031f4:	6820      	ldr	r0, [r4, #0]
 80031f6:	4401      	add	r1, r0
 80031f8:	1858      	adds	r0, r3, r1
 80031fa:	4282      	cmp	r2, r0
 80031fc:	6019      	str	r1, [r3, #0]
 80031fe:	d1dd      	bne.n	80031bc <_free_r+0x24>
 8003200:	6810      	ldr	r0, [r2, #0]
 8003202:	6852      	ldr	r2, [r2, #4]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	4401      	add	r1, r0
 8003208:	6019      	str	r1, [r3, #0]
 800320a:	e7d7      	b.n	80031bc <_free_r+0x24>
 800320c:	d902      	bls.n	8003214 <_free_r+0x7c>
 800320e:	230c      	movs	r3, #12
 8003210:	602b      	str	r3, [r5, #0]
 8003212:	e7d3      	b.n	80031bc <_free_r+0x24>
 8003214:	6820      	ldr	r0, [r4, #0]
 8003216:	1821      	adds	r1, r4, r0
 8003218:	428a      	cmp	r2, r1
 800321a:	bf04      	itt	eq
 800321c:	6811      	ldreq	r1, [r2, #0]
 800321e:	6852      	ldreq	r2, [r2, #4]
 8003220:	6062      	str	r2, [r4, #4]
 8003222:	bf04      	itt	eq
 8003224:	1809      	addeq	r1, r1, r0
 8003226:	6021      	streq	r1, [r4, #0]
 8003228:	605c      	str	r4, [r3, #4]
 800322a:	e7c7      	b.n	80031bc <_free_r+0x24>
 800322c:	bd38      	pop	{r3, r4, r5, pc}
 800322e:	bf00      	nop
 8003230:	20000090 	.word	0x20000090

08003234 <_malloc_r>:
 8003234:	b570      	push	{r4, r5, r6, lr}
 8003236:	1ccd      	adds	r5, r1, #3
 8003238:	f025 0503 	bic.w	r5, r5, #3
 800323c:	3508      	adds	r5, #8
 800323e:	2d0c      	cmp	r5, #12
 8003240:	bf38      	it	cc
 8003242:	250c      	movcc	r5, #12
 8003244:	2d00      	cmp	r5, #0
 8003246:	4606      	mov	r6, r0
 8003248:	db01      	blt.n	800324e <_malloc_r+0x1a>
 800324a:	42a9      	cmp	r1, r5
 800324c:	d903      	bls.n	8003256 <_malloc_r+0x22>
 800324e:	230c      	movs	r3, #12
 8003250:	6033      	str	r3, [r6, #0]
 8003252:	2000      	movs	r0, #0
 8003254:	bd70      	pop	{r4, r5, r6, pc}
 8003256:	f000 fbb9 	bl	80039cc <__malloc_lock>
 800325a:	4a21      	ldr	r2, [pc, #132]	; (80032e0 <_malloc_r+0xac>)
 800325c:	6814      	ldr	r4, [r2, #0]
 800325e:	4621      	mov	r1, r4
 8003260:	b991      	cbnz	r1, 8003288 <_malloc_r+0x54>
 8003262:	4c20      	ldr	r4, [pc, #128]	; (80032e4 <_malloc_r+0xb0>)
 8003264:	6823      	ldr	r3, [r4, #0]
 8003266:	b91b      	cbnz	r3, 8003270 <_malloc_r+0x3c>
 8003268:	4630      	mov	r0, r6
 800326a:	f000 fb05 	bl	8003878 <_sbrk_r>
 800326e:	6020      	str	r0, [r4, #0]
 8003270:	4629      	mov	r1, r5
 8003272:	4630      	mov	r0, r6
 8003274:	f000 fb00 	bl	8003878 <_sbrk_r>
 8003278:	1c43      	adds	r3, r0, #1
 800327a:	d124      	bne.n	80032c6 <_malloc_r+0x92>
 800327c:	230c      	movs	r3, #12
 800327e:	6033      	str	r3, [r6, #0]
 8003280:	4630      	mov	r0, r6
 8003282:	f000 fba4 	bl	80039ce <__malloc_unlock>
 8003286:	e7e4      	b.n	8003252 <_malloc_r+0x1e>
 8003288:	680b      	ldr	r3, [r1, #0]
 800328a:	1b5b      	subs	r3, r3, r5
 800328c:	d418      	bmi.n	80032c0 <_malloc_r+0x8c>
 800328e:	2b0b      	cmp	r3, #11
 8003290:	d90f      	bls.n	80032b2 <_malloc_r+0x7e>
 8003292:	600b      	str	r3, [r1, #0]
 8003294:	50cd      	str	r5, [r1, r3]
 8003296:	18cc      	adds	r4, r1, r3
 8003298:	4630      	mov	r0, r6
 800329a:	f000 fb98 	bl	80039ce <__malloc_unlock>
 800329e:	f104 000b 	add.w	r0, r4, #11
 80032a2:	1d23      	adds	r3, r4, #4
 80032a4:	f020 0007 	bic.w	r0, r0, #7
 80032a8:	1ac3      	subs	r3, r0, r3
 80032aa:	d0d3      	beq.n	8003254 <_malloc_r+0x20>
 80032ac:	425a      	negs	r2, r3
 80032ae:	50e2      	str	r2, [r4, r3]
 80032b0:	e7d0      	b.n	8003254 <_malloc_r+0x20>
 80032b2:	428c      	cmp	r4, r1
 80032b4:	684b      	ldr	r3, [r1, #4]
 80032b6:	bf16      	itet	ne
 80032b8:	6063      	strne	r3, [r4, #4]
 80032ba:	6013      	streq	r3, [r2, #0]
 80032bc:	460c      	movne	r4, r1
 80032be:	e7eb      	b.n	8003298 <_malloc_r+0x64>
 80032c0:	460c      	mov	r4, r1
 80032c2:	6849      	ldr	r1, [r1, #4]
 80032c4:	e7cc      	b.n	8003260 <_malloc_r+0x2c>
 80032c6:	1cc4      	adds	r4, r0, #3
 80032c8:	f024 0403 	bic.w	r4, r4, #3
 80032cc:	42a0      	cmp	r0, r4
 80032ce:	d005      	beq.n	80032dc <_malloc_r+0xa8>
 80032d0:	1a21      	subs	r1, r4, r0
 80032d2:	4630      	mov	r0, r6
 80032d4:	f000 fad0 	bl	8003878 <_sbrk_r>
 80032d8:	3001      	adds	r0, #1
 80032da:	d0cf      	beq.n	800327c <_malloc_r+0x48>
 80032dc:	6025      	str	r5, [r4, #0]
 80032de:	e7db      	b.n	8003298 <_malloc_r+0x64>
 80032e0:	20000090 	.word	0x20000090
 80032e4:	20000094 	.word	0x20000094

080032e8 <__sfputc_r>:
 80032e8:	6893      	ldr	r3, [r2, #8]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	b410      	push	{r4}
 80032f0:	6093      	str	r3, [r2, #8]
 80032f2:	da08      	bge.n	8003306 <__sfputc_r+0x1e>
 80032f4:	6994      	ldr	r4, [r2, #24]
 80032f6:	42a3      	cmp	r3, r4
 80032f8:	db01      	blt.n	80032fe <__sfputc_r+0x16>
 80032fa:	290a      	cmp	r1, #10
 80032fc:	d103      	bne.n	8003306 <__sfputc_r+0x1e>
 80032fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003302:	f7ff bcab 	b.w	8002c5c <__swbuf_r>
 8003306:	6813      	ldr	r3, [r2, #0]
 8003308:	1c58      	adds	r0, r3, #1
 800330a:	6010      	str	r0, [r2, #0]
 800330c:	7019      	strb	r1, [r3, #0]
 800330e:	4608      	mov	r0, r1
 8003310:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003314:	4770      	bx	lr

08003316 <__sfputs_r>:
 8003316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003318:	4606      	mov	r6, r0
 800331a:	460f      	mov	r7, r1
 800331c:	4614      	mov	r4, r2
 800331e:	18d5      	adds	r5, r2, r3
 8003320:	42ac      	cmp	r4, r5
 8003322:	d101      	bne.n	8003328 <__sfputs_r+0x12>
 8003324:	2000      	movs	r0, #0
 8003326:	e007      	b.n	8003338 <__sfputs_r+0x22>
 8003328:	463a      	mov	r2, r7
 800332a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800332e:	4630      	mov	r0, r6
 8003330:	f7ff ffda 	bl	80032e8 <__sfputc_r>
 8003334:	1c43      	adds	r3, r0, #1
 8003336:	d1f3      	bne.n	8003320 <__sfputs_r+0xa>
 8003338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800333c <_vfiprintf_r>:
 800333c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003340:	460c      	mov	r4, r1
 8003342:	b09d      	sub	sp, #116	; 0x74
 8003344:	4617      	mov	r7, r2
 8003346:	461d      	mov	r5, r3
 8003348:	4606      	mov	r6, r0
 800334a:	b118      	cbz	r0, 8003354 <_vfiprintf_r+0x18>
 800334c:	6983      	ldr	r3, [r0, #24]
 800334e:	b90b      	cbnz	r3, 8003354 <_vfiprintf_r+0x18>
 8003350:	f7ff fe34 	bl	8002fbc <__sinit>
 8003354:	4b7c      	ldr	r3, [pc, #496]	; (8003548 <_vfiprintf_r+0x20c>)
 8003356:	429c      	cmp	r4, r3
 8003358:	d158      	bne.n	800340c <_vfiprintf_r+0xd0>
 800335a:	6874      	ldr	r4, [r6, #4]
 800335c:	89a3      	ldrh	r3, [r4, #12]
 800335e:	0718      	lsls	r0, r3, #28
 8003360:	d55e      	bpl.n	8003420 <_vfiprintf_r+0xe4>
 8003362:	6923      	ldr	r3, [r4, #16]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d05b      	beq.n	8003420 <_vfiprintf_r+0xe4>
 8003368:	2300      	movs	r3, #0
 800336a:	9309      	str	r3, [sp, #36]	; 0x24
 800336c:	2320      	movs	r3, #32
 800336e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003372:	2330      	movs	r3, #48	; 0x30
 8003374:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003378:	9503      	str	r5, [sp, #12]
 800337a:	f04f 0b01 	mov.w	fp, #1
 800337e:	46b8      	mov	r8, r7
 8003380:	4645      	mov	r5, r8
 8003382:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003386:	b10b      	cbz	r3, 800338c <_vfiprintf_r+0x50>
 8003388:	2b25      	cmp	r3, #37	; 0x25
 800338a:	d154      	bne.n	8003436 <_vfiprintf_r+0xfa>
 800338c:	ebb8 0a07 	subs.w	sl, r8, r7
 8003390:	d00b      	beq.n	80033aa <_vfiprintf_r+0x6e>
 8003392:	4653      	mov	r3, sl
 8003394:	463a      	mov	r2, r7
 8003396:	4621      	mov	r1, r4
 8003398:	4630      	mov	r0, r6
 800339a:	f7ff ffbc 	bl	8003316 <__sfputs_r>
 800339e:	3001      	adds	r0, #1
 80033a0:	f000 80c2 	beq.w	8003528 <_vfiprintf_r+0x1ec>
 80033a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033a6:	4453      	add	r3, sl
 80033a8:	9309      	str	r3, [sp, #36]	; 0x24
 80033aa:	f898 3000 	ldrb.w	r3, [r8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 80ba 	beq.w	8003528 <_vfiprintf_r+0x1ec>
 80033b4:	2300      	movs	r3, #0
 80033b6:	f04f 32ff 	mov.w	r2, #4294967295
 80033ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033be:	9304      	str	r3, [sp, #16]
 80033c0:	9307      	str	r3, [sp, #28]
 80033c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033c6:	931a      	str	r3, [sp, #104]	; 0x68
 80033c8:	46a8      	mov	r8, r5
 80033ca:	2205      	movs	r2, #5
 80033cc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80033d0:	485e      	ldr	r0, [pc, #376]	; (800354c <_vfiprintf_r+0x210>)
 80033d2:	f7fc fefd 	bl	80001d0 <memchr>
 80033d6:	9b04      	ldr	r3, [sp, #16]
 80033d8:	bb78      	cbnz	r0, 800343a <_vfiprintf_r+0xfe>
 80033da:	06d9      	lsls	r1, r3, #27
 80033dc:	bf44      	itt	mi
 80033de:	2220      	movmi	r2, #32
 80033e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033e4:	071a      	lsls	r2, r3, #28
 80033e6:	bf44      	itt	mi
 80033e8:	222b      	movmi	r2, #43	; 0x2b
 80033ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033ee:	782a      	ldrb	r2, [r5, #0]
 80033f0:	2a2a      	cmp	r2, #42	; 0x2a
 80033f2:	d02a      	beq.n	800344a <_vfiprintf_r+0x10e>
 80033f4:	9a07      	ldr	r2, [sp, #28]
 80033f6:	46a8      	mov	r8, r5
 80033f8:	2000      	movs	r0, #0
 80033fa:	250a      	movs	r5, #10
 80033fc:	4641      	mov	r1, r8
 80033fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003402:	3b30      	subs	r3, #48	; 0x30
 8003404:	2b09      	cmp	r3, #9
 8003406:	d969      	bls.n	80034dc <_vfiprintf_r+0x1a0>
 8003408:	b360      	cbz	r0, 8003464 <_vfiprintf_r+0x128>
 800340a:	e024      	b.n	8003456 <_vfiprintf_r+0x11a>
 800340c:	4b50      	ldr	r3, [pc, #320]	; (8003550 <_vfiprintf_r+0x214>)
 800340e:	429c      	cmp	r4, r3
 8003410:	d101      	bne.n	8003416 <_vfiprintf_r+0xda>
 8003412:	68b4      	ldr	r4, [r6, #8]
 8003414:	e7a2      	b.n	800335c <_vfiprintf_r+0x20>
 8003416:	4b4f      	ldr	r3, [pc, #316]	; (8003554 <_vfiprintf_r+0x218>)
 8003418:	429c      	cmp	r4, r3
 800341a:	bf08      	it	eq
 800341c:	68f4      	ldreq	r4, [r6, #12]
 800341e:	e79d      	b.n	800335c <_vfiprintf_r+0x20>
 8003420:	4621      	mov	r1, r4
 8003422:	4630      	mov	r0, r6
 8003424:	f7ff fc6c 	bl	8002d00 <__swsetup_r>
 8003428:	2800      	cmp	r0, #0
 800342a:	d09d      	beq.n	8003368 <_vfiprintf_r+0x2c>
 800342c:	f04f 30ff 	mov.w	r0, #4294967295
 8003430:	b01d      	add	sp, #116	; 0x74
 8003432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003436:	46a8      	mov	r8, r5
 8003438:	e7a2      	b.n	8003380 <_vfiprintf_r+0x44>
 800343a:	4a44      	ldr	r2, [pc, #272]	; (800354c <_vfiprintf_r+0x210>)
 800343c:	1a80      	subs	r0, r0, r2
 800343e:	fa0b f000 	lsl.w	r0, fp, r0
 8003442:	4318      	orrs	r0, r3
 8003444:	9004      	str	r0, [sp, #16]
 8003446:	4645      	mov	r5, r8
 8003448:	e7be      	b.n	80033c8 <_vfiprintf_r+0x8c>
 800344a:	9a03      	ldr	r2, [sp, #12]
 800344c:	1d11      	adds	r1, r2, #4
 800344e:	6812      	ldr	r2, [r2, #0]
 8003450:	9103      	str	r1, [sp, #12]
 8003452:	2a00      	cmp	r2, #0
 8003454:	db01      	blt.n	800345a <_vfiprintf_r+0x11e>
 8003456:	9207      	str	r2, [sp, #28]
 8003458:	e004      	b.n	8003464 <_vfiprintf_r+0x128>
 800345a:	4252      	negs	r2, r2
 800345c:	f043 0302 	orr.w	r3, r3, #2
 8003460:	9207      	str	r2, [sp, #28]
 8003462:	9304      	str	r3, [sp, #16]
 8003464:	f898 3000 	ldrb.w	r3, [r8]
 8003468:	2b2e      	cmp	r3, #46	; 0x2e
 800346a:	d10e      	bne.n	800348a <_vfiprintf_r+0x14e>
 800346c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003470:	2b2a      	cmp	r3, #42	; 0x2a
 8003472:	d138      	bne.n	80034e6 <_vfiprintf_r+0x1aa>
 8003474:	9b03      	ldr	r3, [sp, #12]
 8003476:	1d1a      	adds	r2, r3, #4
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	9203      	str	r2, [sp, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	bfb8      	it	lt
 8003480:	f04f 33ff 	movlt.w	r3, #4294967295
 8003484:	f108 0802 	add.w	r8, r8, #2
 8003488:	9305      	str	r3, [sp, #20]
 800348a:	4d33      	ldr	r5, [pc, #204]	; (8003558 <_vfiprintf_r+0x21c>)
 800348c:	f898 1000 	ldrb.w	r1, [r8]
 8003490:	2203      	movs	r2, #3
 8003492:	4628      	mov	r0, r5
 8003494:	f7fc fe9c 	bl	80001d0 <memchr>
 8003498:	b140      	cbz	r0, 80034ac <_vfiprintf_r+0x170>
 800349a:	2340      	movs	r3, #64	; 0x40
 800349c:	1b40      	subs	r0, r0, r5
 800349e:	fa03 f000 	lsl.w	r0, r3, r0
 80034a2:	9b04      	ldr	r3, [sp, #16]
 80034a4:	4303      	orrs	r3, r0
 80034a6:	f108 0801 	add.w	r8, r8, #1
 80034aa:	9304      	str	r3, [sp, #16]
 80034ac:	f898 1000 	ldrb.w	r1, [r8]
 80034b0:	482a      	ldr	r0, [pc, #168]	; (800355c <_vfiprintf_r+0x220>)
 80034b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034b6:	2206      	movs	r2, #6
 80034b8:	f108 0701 	add.w	r7, r8, #1
 80034bc:	f7fc fe88 	bl	80001d0 <memchr>
 80034c0:	2800      	cmp	r0, #0
 80034c2:	d037      	beq.n	8003534 <_vfiprintf_r+0x1f8>
 80034c4:	4b26      	ldr	r3, [pc, #152]	; (8003560 <_vfiprintf_r+0x224>)
 80034c6:	bb1b      	cbnz	r3, 8003510 <_vfiprintf_r+0x1d4>
 80034c8:	9b03      	ldr	r3, [sp, #12]
 80034ca:	3307      	adds	r3, #7
 80034cc:	f023 0307 	bic.w	r3, r3, #7
 80034d0:	3308      	adds	r3, #8
 80034d2:	9303      	str	r3, [sp, #12]
 80034d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034d6:	444b      	add	r3, r9
 80034d8:	9309      	str	r3, [sp, #36]	; 0x24
 80034da:	e750      	b.n	800337e <_vfiprintf_r+0x42>
 80034dc:	fb05 3202 	mla	r2, r5, r2, r3
 80034e0:	2001      	movs	r0, #1
 80034e2:	4688      	mov	r8, r1
 80034e4:	e78a      	b.n	80033fc <_vfiprintf_r+0xc0>
 80034e6:	2300      	movs	r3, #0
 80034e8:	f108 0801 	add.w	r8, r8, #1
 80034ec:	9305      	str	r3, [sp, #20]
 80034ee:	4619      	mov	r1, r3
 80034f0:	250a      	movs	r5, #10
 80034f2:	4640      	mov	r0, r8
 80034f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034f8:	3a30      	subs	r2, #48	; 0x30
 80034fa:	2a09      	cmp	r2, #9
 80034fc:	d903      	bls.n	8003506 <_vfiprintf_r+0x1ca>
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0c3      	beq.n	800348a <_vfiprintf_r+0x14e>
 8003502:	9105      	str	r1, [sp, #20]
 8003504:	e7c1      	b.n	800348a <_vfiprintf_r+0x14e>
 8003506:	fb05 2101 	mla	r1, r5, r1, r2
 800350a:	2301      	movs	r3, #1
 800350c:	4680      	mov	r8, r0
 800350e:	e7f0      	b.n	80034f2 <_vfiprintf_r+0x1b6>
 8003510:	ab03      	add	r3, sp, #12
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	4622      	mov	r2, r4
 8003516:	4b13      	ldr	r3, [pc, #76]	; (8003564 <_vfiprintf_r+0x228>)
 8003518:	a904      	add	r1, sp, #16
 800351a:	4630      	mov	r0, r6
 800351c:	f3af 8000 	nop.w
 8003520:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003524:	4681      	mov	r9, r0
 8003526:	d1d5      	bne.n	80034d4 <_vfiprintf_r+0x198>
 8003528:	89a3      	ldrh	r3, [r4, #12]
 800352a:	065b      	lsls	r3, r3, #25
 800352c:	f53f af7e 	bmi.w	800342c <_vfiprintf_r+0xf0>
 8003530:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003532:	e77d      	b.n	8003430 <_vfiprintf_r+0xf4>
 8003534:	ab03      	add	r3, sp, #12
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	4622      	mov	r2, r4
 800353a:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <_vfiprintf_r+0x228>)
 800353c:	a904      	add	r1, sp, #16
 800353e:	4630      	mov	r0, r6
 8003540:	f000 f888 	bl	8003654 <_printf_i>
 8003544:	e7ec      	b.n	8003520 <_vfiprintf_r+0x1e4>
 8003546:	bf00      	nop
 8003548:	08003a9c 	.word	0x08003a9c
 800354c:	08003adc 	.word	0x08003adc
 8003550:	08003abc 	.word	0x08003abc
 8003554:	08003a7c 	.word	0x08003a7c
 8003558:	08003ae2 	.word	0x08003ae2
 800355c:	08003ae6 	.word	0x08003ae6
 8003560:	00000000 	.word	0x00000000
 8003564:	08003317 	.word	0x08003317

08003568 <_printf_common>:
 8003568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800356c:	4691      	mov	r9, r2
 800356e:	461f      	mov	r7, r3
 8003570:	688a      	ldr	r2, [r1, #8]
 8003572:	690b      	ldr	r3, [r1, #16]
 8003574:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003578:	4293      	cmp	r3, r2
 800357a:	bfb8      	it	lt
 800357c:	4613      	movlt	r3, r2
 800357e:	f8c9 3000 	str.w	r3, [r9]
 8003582:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003586:	4606      	mov	r6, r0
 8003588:	460c      	mov	r4, r1
 800358a:	b112      	cbz	r2, 8003592 <_printf_common+0x2a>
 800358c:	3301      	adds	r3, #1
 800358e:	f8c9 3000 	str.w	r3, [r9]
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	0699      	lsls	r1, r3, #26
 8003596:	bf42      	ittt	mi
 8003598:	f8d9 3000 	ldrmi.w	r3, [r9]
 800359c:	3302      	addmi	r3, #2
 800359e:	f8c9 3000 	strmi.w	r3, [r9]
 80035a2:	6825      	ldr	r5, [r4, #0]
 80035a4:	f015 0506 	ands.w	r5, r5, #6
 80035a8:	d107      	bne.n	80035ba <_printf_common+0x52>
 80035aa:	f104 0a19 	add.w	sl, r4, #25
 80035ae:	68e3      	ldr	r3, [r4, #12]
 80035b0:	f8d9 2000 	ldr.w	r2, [r9]
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	42ab      	cmp	r3, r5
 80035b8:	dc28      	bgt.n	800360c <_printf_common+0xa4>
 80035ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80035be:	6822      	ldr	r2, [r4, #0]
 80035c0:	3300      	adds	r3, #0
 80035c2:	bf18      	it	ne
 80035c4:	2301      	movne	r3, #1
 80035c6:	0692      	lsls	r2, r2, #26
 80035c8:	d42d      	bmi.n	8003626 <_printf_common+0xbe>
 80035ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035ce:	4639      	mov	r1, r7
 80035d0:	4630      	mov	r0, r6
 80035d2:	47c0      	blx	r8
 80035d4:	3001      	adds	r0, #1
 80035d6:	d020      	beq.n	800361a <_printf_common+0xb2>
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	68e5      	ldr	r5, [r4, #12]
 80035dc:	f8d9 2000 	ldr.w	r2, [r9]
 80035e0:	f003 0306 	and.w	r3, r3, #6
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	bf08      	it	eq
 80035e8:	1aad      	subeq	r5, r5, r2
 80035ea:	68a3      	ldr	r3, [r4, #8]
 80035ec:	6922      	ldr	r2, [r4, #16]
 80035ee:	bf0c      	ite	eq
 80035f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035f4:	2500      	movne	r5, #0
 80035f6:	4293      	cmp	r3, r2
 80035f8:	bfc4      	itt	gt
 80035fa:	1a9b      	subgt	r3, r3, r2
 80035fc:	18ed      	addgt	r5, r5, r3
 80035fe:	f04f 0900 	mov.w	r9, #0
 8003602:	341a      	adds	r4, #26
 8003604:	454d      	cmp	r5, r9
 8003606:	d11a      	bne.n	800363e <_printf_common+0xd6>
 8003608:	2000      	movs	r0, #0
 800360a:	e008      	b.n	800361e <_printf_common+0xb6>
 800360c:	2301      	movs	r3, #1
 800360e:	4652      	mov	r2, sl
 8003610:	4639      	mov	r1, r7
 8003612:	4630      	mov	r0, r6
 8003614:	47c0      	blx	r8
 8003616:	3001      	adds	r0, #1
 8003618:	d103      	bne.n	8003622 <_printf_common+0xba>
 800361a:	f04f 30ff 	mov.w	r0, #4294967295
 800361e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003622:	3501      	adds	r5, #1
 8003624:	e7c3      	b.n	80035ae <_printf_common+0x46>
 8003626:	18e1      	adds	r1, r4, r3
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	2030      	movs	r0, #48	; 0x30
 800362c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003630:	4422      	add	r2, r4
 8003632:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003636:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800363a:	3302      	adds	r3, #2
 800363c:	e7c5      	b.n	80035ca <_printf_common+0x62>
 800363e:	2301      	movs	r3, #1
 8003640:	4622      	mov	r2, r4
 8003642:	4639      	mov	r1, r7
 8003644:	4630      	mov	r0, r6
 8003646:	47c0      	blx	r8
 8003648:	3001      	adds	r0, #1
 800364a:	d0e6      	beq.n	800361a <_printf_common+0xb2>
 800364c:	f109 0901 	add.w	r9, r9, #1
 8003650:	e7d8      	b.n	8003604 <_printf_common+0x9c>
	...

08003654 <_printf_i>:
 8003654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003658:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800365c:	460c      	mov	r4, r1
 800365e:	7e09      	ldrb	r1, [r1, #24]
 8003660:	b085      	sub	sp, #20
 8003662:	296e      	cmp	r1, #110	; 0x6e
 8003664:	4617      	mov	r7, r2
 8003666:	4606      	mov	r6, r0
 8003668:	4698      	mov	r8, r3
 800366a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800366c:	f000 80b3 	beq.w	80037d6 <_printf_i+0x182>
 8003670:	d822      	bhi.n	80036b8 <_printf_i+0x64>
 8003672:	2963      	cmp	r1, #99	; 0x63
 8003674:	d036      	beq.n	80036e4 <_printf_i+0x90>
 8003676:	d80a      	bhi.n	800368e <_printf_i+0x3a>
 8003678:	2900      	cmp	r1, #0
 800367a:	f000 80b9 	beq.w	80037f0 <_printf_i+0x19c>
 800367e:	2958      	cmp	r1, #88	; 0x58
 8003680:	f000 8083 	beq.w	800378a <_printf_i+0x136>
 8003684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003688:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800368c:	e032      	b.n	80036f4 <_printf_i+0xa0>
 800368e:	2964      	cmp	r1, #100	; 0x64
 8003690:	d001      	beq.n	8003696 <_printf_i+0x42>
 8003692:	2969      	cmp	r1, #105	; 0x69
 8003694:	d1f6      	bne.n	8003684 <_printf_i+0x30>
 8003696:	6820      	ldr	r0, [r4, #0]
 8003698:	6813      	ldr	r3, [r2, #0]
 800369a:	0605      	lsls	r5, r0, #24
 800369c:	f103 0104 	add.w	r1, r3, #4
 80036a0:	d52a      	bpl.n	80036f8 <_printf_i+0xa4>
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6011      	str	r1, [r2, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	da03      	bge.n	80036b2 <_printf_i+0x5e>
 80036aa:	222d      	movs	r2, #45	; 0x2d
 80036ac:	425b      	negs	r3, r3
 80036ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80036b2:	486f      	ldr	r0, [pc, #444]	; (8003870 <_printf_i+0x21c>)
 80036b4:	220a      	movs	r2, #10
 80036b6:	e039      	b.n	800372c <_printf_i+0xd8>
 80036b8:	2973      	cmp	r1, #115	; 0x73
 80036ba:	f000 809d 	beq.w	80037f8 <_printf_i+0x1a4>
 80036be:	d808      	bhi.n	80036d2 <_printf_i+0x7e>
 80036c0:	296f      	cmp	r1, #111	; 0x6f
 80036c2:	d020      	beq.n	8003706 <_printf_i+0xb2>
 80036c4:	2970      	cmp	r1, #112	; 0x70
 80036c6:	d1dd      	bne.n	8003684 <_printf_i+0x30>
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	f043 0320 	orr.w	r3, r3, #32
 80036ce:	6023      	str	r3, [r4, #0]
 80036d0:	e003      	b.n	80036da <_printf_i+0x86>
 80036d2:	2975      	cmp	r1, #117	; 0x75
 80036d4:	d017      	beq.n	8003706 <_printf_i+0xb2>
 80036d6:	2978      	cmp	r1, #120	; 0x78
 80036d8:	d1d4      	bne.n	8003684 <_printf_i+0x30>
 80036da:	2378      	movs	r3, #120	; 0x78
 80036dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036e0:	4864      	ldr	r0, [pc, #400]	; (8003874 <_printf_i+0x220>)
 80036e2:	e055      	b.n	8003790 <_printf_i+0x13c>
 80036e4:	6813      	ldr	r3, [r2, #0]
 80036e6:	1d19      	adds	r1, r3, #4
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6011      	str	r1, [r2, #0]
 80036ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036f4:	2301      	movs	r3, #1
 80036f6:	e08c      	b.n	8003812 <_printf_i+0x1be>
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6011      	str	r1, [r2, #0]
 80036fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003700:	bf18      	it	ne
 8003702:	b21b      	sxthne	r3, r3
 8003704:	e7cf      	b.n	80036a6 <_printf_i+0x52>
 8003706:	6813      	ldr	r3, [r2, #0]
 8003708:	6825      	ldr	r5, [r4, #0]
 800370a:	1d18      	adds	r0, r3, #4
 800370c:	6010      	str	r0, [r2, #0]
 800370e:	0628      	lsls	r0, r5, #24
 8003710:	d501      	bpl.n	8003716 <_printf_i+0xc2>
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	e002      	b.n	800371c <_printf_i+0xc8>
 8003716:	0668      	lsls	r0, r5, #25
 8003718:	d5fb      	bpl.n	8003712 <_printf_i+0xbe>
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	4854      	ldr	r0, [pc, #336]	; (8003870 <_printf_i+0x21c>)
 800371e:	296f      	cmp	r1, #111	; 0x6f
 8003720:	bf14      	ite	ne
 8003722:	220a      	movne	r2, #10
 8003724:	2208      	moveq	r2, #8
 8003726:	2100      	movs	r1, #0
 8003728:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800372c:	6865      	ldr	r5, [r4, #4]
 800372e:	60a5      	str	r5, [r4, #8]
 8003730:	2d00      	cmp	r5, #0
 8003732:	f2c0 8095 	blt.w	8003860 <_printf_i+0x20c>
 8003736:	6821      	ldr	r1, [r4, #0]
 8003738:	f021 0104 	bic.w	r1, r1, #4
 800373c:	6021      	str	r1, [r4, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d13d      	bne.n	80037be <_printf_i+0x16a>
 8003742:	2d00      	cmp	r5, #0
 8003744:	f040 808e 	bne.w	8003864 <_printf_i+0x210>
 8003748:	4665      	mov	r5, ip
 800374a:	2a08      	cmp	r2, #8
 800374c:	d10b      	bne.n	8003766 <_printf_i+0x112>
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	07db      	lsls	r3, r3, #31
 8003752:	d508      	bpl.n	8003766 <_printf_i+0x112>
 8003754:	6923      	ldr	r3, [r4, #16]
 8003756:	6862      	ldr	r2, [r4, #4]
 8003758:	429a      	cmp	r2, r3
 800375a:	bfde      	ittt	le
 800375c:	2330      	movle	r3, #48	; 0x30
 800375e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003762:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003766:	ebac 0305 	sub.w	r3, ip, r5
 800376a:	6123      	str	r3, [r4, #16]
 800376c:	f8cd 8000 	str.w	r8, [sp]
 8003770:	463b      	mov	r3, r7
 8003772:	aa03      	add	r2, sp, #12
 8003774:	4621      	mov	r1, r4
 8003776:	4630      	mov	r0, r6
 8003778:	f7ff fef6 	bl	8003568 <_printf_common>
 800377c:	3001      	adds	r0, #1
 800377e:	d14d      	bne.n	800381c <_printf_i+0x1c8>
 8003780:	f04f 30ff 	mov.w	r0, #4294967295
 8003784:	b005      	add	sp, #20
 8003786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800378a:	4839      	ldr	r0, [pc, #228]	; (8003870 <_printf_i+0x21c>)
 800378c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003790:	6813      	ldr	r3, [r2, #0]
 8003792:	6821      	ldr	r1, [r4, #0]
 8003794:	1d1d      	adds	r5, r3, #4
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6015      	str	r5, [r2, #0]
 800379a:	060a      	lsls	r2, r1, #24
 800379c:	d50b      	bpl.n	80037b6 <_printf_i+0x162>
 800379e:	07ca      	lsls	r2, r1, #31
 80037a0:	bf44      	itt	mi
 80037a2:	f041 0120 	orrmi.w	r1, r1, #32
 80037a6:	6021      	strmi	r1, [r4, #0]
 80037a8:	b91b      	cbnz	r3, 80037b2 <_printf_i+0x15e>
 80037aa:	6822      	ldr	r2, [r4, #0]
 80037ac:	f022 0220 	bic.w	r2, r2, #32
 80037b0:	6022      	str	r2, [r4, #0]
 80037b2:	2210      	movs	r2, #16
 80037b4:	e7b7      	b.n	8003726 <_printf_i+0xd2>
 80037b6:	064d      	lsls	r5, r1, #25
 80037b8:	bf48      	it	mi
 80037ba:	b29b      	uxthmi	r3, r3
 80037bc:	e7ef      	b.n	800379e <_printf_i+0x14a>
 80037be:	4665      	mov	r5, ip
 80037c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80037c4:	fb02 3311 	mls	r3, r2, r1, r3
 80037c8:	5cc3      	ldrb	r3, [r0, r3]
 80037ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80037ce:	460b      	mov	r3, r1
 80037d0:	2900      	cmp	r1, #0
 80037d2:	d1f5      	bne.n	80037c0 <_printf_i+0x16c>
 80037d4:	e7b9      	b.n	800374a <_printf_i+0xf6>
 80037d6:	6813      	ldr	r3, [r2, #0]
 80037d8:	6825      	ldr	r5, [r4, #0]
 80037da:	6961      	ldr	r1, [r4, #20]
 80037dc:	1d18      	adds	r0, r3, #4
 80037de:	6010      	str	r0, [r2, #0]
 80037e0:	0628      	lsls	r0, r5, #24
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	d501      	bpl.n	80037ea <_printf_i+0x196>
 80037e6:	6019      	str	r1, [r3, #0]
 80037e8:	e002      	b.n	80037f0 <_printf_i+0x19c>
 80037ea:	066a      	lsls	r2, r5, #25
 80037ec:	d5fb      	bpl.n	80037e6 <_printf_i+0x192>
 80037ee:	8019      	strh	r1, [r3, #0]
 80037f0:	2300      	movs	r3, #0
 80037f2:	6123      	str	r3, [r4, #16]
 80037f4:	4665      	mov	r5, ip
 80037f6:	e7b9      	b.n	800376c <_printf_i+0x118>
 80037f8:	6813      	ldr	r3, [r2, #0]
 80037fa:	1d19      	adds	r1, r3, #4
 80037fc:	6011      	str	r1, [r2, #0]
 80037fe:	681d      	ldr	r5, [r3, #0]
 8003800:	6862      	ldr	r2, [r4, #4]
 8003802:	2100      	movs	r1, #0
 8003804:	4628      	mov	r0, r5
 8003806:	f7fc fce3 	bl	80001d0 <memchr>
 800380a:	b108      	cbz	r0, 8003810 <_printf_i+0x1bc>
 800380c:	1b40      	subs	r0, r0, r5
 800380e:	6060      	str	r0, [r4, #4]
 8003810:	6863      	ldr	r3, [r4, #4]
 8003812:	6123      	str	r3, [r4, #16]
 8003814:	2300      	movs	r3, #0
 8003816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800381a:	e7a7      	b.n	800376c <_printf_i+0x118>
 800381c:	6923      	ldr	r3, [r4, #16]
 800381e:	462a      	mov	r2, r5
 8003820:	4639      	mov	r1, r7
 8003822:	4630      	mov	r0, r6
 8003824:	47c0      	blx	r8
 8003826:	3001      	adds	r0, #1
 8003828:	d0aa      	beq.n	8003780 <_printf_i+0x12c>
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	079b      	lsls	r3, r3, #30
 800382e:	d413      	bmi.n	8003858 <_printf_i+0x204>
 8003830:	68e0      	ldr	r0, [r4, #12]
 8003832:	9b03      	ldr	r3, [sp, #12]
 8003834:	4298      	cmp	r0, r3
 8003836:	bfb8      	it	lt
 8003838:	4618      	movlt	r0, r3
 800383a:	e7a3      	b.n	8003784 <_printf_i+0x130>
 800383c:	2301      	movs	r3, #1
 800383e:	464a      	mov	r2, r9
 8003840:	4639      	mov	r1, r7
 8003842:	4630      	mov	r0, r6
 8003844:	47c0      	blx	r8
 8003846:	3001      	adds	r0, #1
 8003848:	d09a      	beq.n	8003780 <_printf_i+0x12c>
 800384a:	3501      	adds	r5, #1
 800384c:	68e3      	ldr	r3, [r4, #12]
 800384e:	9a03      	ldr	r2, [sp, #12]
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	42ab      	cmp	r3, r5
 8003854:	dcf2      	bgt.n	800383c <_printf_i+0x1e8>
 8003856:	e7eb      	b.n	8003830 <_printf_i+0x1dc>
 8003858:	2500      	movs	r5, #0
 800385a:	f104 0919 	add.w	r9, r4, #25
 800385e:	e7f5      	b.n	800384c <_printf_i+0x1f8>
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1ac      	bne.n	80037be <_printf_i+0x16a>
 8003864:	7803      	ldrb	r3, [r0, #0]
 8003866:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800386a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800386e:	e76c      	b.n	800374a <_printf_i+0xf6>
 8003870:	08003aed 	.word	0x08003aed
 8003874:	08003afe 	.word	0x08003afe

08003878 <_sbrk_r>:
 8003878:	b538      	push	{r3, r4, r5, lr}
 800387a:	4c06      	ldr	r4, [pc, #24]	; (8003894 <_sbrk_r+0x1c>)
 800387c:	2300      	movs	r3, #0
 800387e:	4605      	mov	r5, r0
 8003880:	4608      	mov	r0, r1
 8003882:	6023      	str	r3, [r4, #0]
 8003884:	f7fd f848 	bl	8000918 <_sbrk>
 8003888:	1c43      	adds	r3, r0, #1
 800388a:	d102      	bne.n	8003892 <_sbrk_r+0x1a>
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	b103      	cbz	r3, 8003892 <_sbrk_r+0x1a>
 8003890:	602b      	str	r3, [r5, #0]
 8003892:	bd38      	pop	{r3, r4, r5, pc}
 8003894:	2000011c 	.word	0x2000011c

08003898 <__sread>:
 8003898:	b510      	push	{r4, lr}
 800389a:	460c      	mov	r4, r1
 800389c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038a0:	f000 f896 	bl	80039d0 <_read_r>
 80038a4:	2800      	cmp	r0, #0
 80038a6:	bfab      	itete	ge
 80038a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80038aa:	89a3      	ldrhlt	r3, [r4, #12]
 80038ac:	181b      	addge	r3, r3, r0
 80038ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80038b2:	bfac      	ite	ge
 80038b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80038b6:	81a3      	strhlt	r3, [r4, #12]
 80038b8:	bd10      	pop	{r4, pc}

080038ba <__swrite>:
 80038ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038be:	461f      	mov	r7, r3
 80038c0:	898b      	ldrh	r3, [r1, #12]
 80038c2:	05db      	lsls	r3, r3, #23
 80038c4:	4605      	mov	r5, r0
 80038c6:	460c      	mov	r4, r1
 80038c8:	4616      	mov	r6, r2
 80038ca:	d505      	bpl.n	80038d8 <__swrite+0x1e>
 80038cc:	2302      	movs	r3, #2
 80038ce:	2200      	movs	r2, #0
 80038d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038d4:	f000 f868 	bl	80039a8 <_lseek_r>
 80038d8:	89a3      	ldrh	r3, [r4, #12]
 80038da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038e2:	81a3      	strh	r3, [r4, #12]
 80038e4:	4632      	mov	r2, r6
 80038e6:	463b      	mov	r3, r7
 80038e8:	4628      	mov	r0, r5
 80038ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038ee:	f000 b817 	b.w	8003920 <_write_r>

080038f2 <__sseek>:
 80038f2:	b510      	push	{r4, lr}
 80038f4:	460c      	mov	r4, r1
 80038f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038fa:	f000 f855 	bl	80039a8 <_lseek_r>
 80038fe:	1c43      	adds	r3, r0, #1
 8003900:	89a3      	ldrh	r3, [r4, #12]
 8003902:	bf15      	itete	ne
 8003904:	6560      	strne	r0, [r4, #84]	; 0x54
 8003906:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800390a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800390e:	81a3      	strheq	r3, [r4, #12]
 8003910:	bf18      	it	ne
 8003912:	81a3      	strhne	r3, [r4, #12]
 8003914:	bd10      	pop	{r4, pc}

08003916 <__sclose>:
 8003916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800391a:	f000 b813 	b.w	8003944 <_close_r>
	...

08003920 <_write_r>:
 8003920:	b538      	push	{r3, r4, r5, lr}
 8003922:	4c07      	ldr	r4, [pc, #28]	; (8003940 <_write_r+0x20>)
 8003924:	4605      	mov	r5, r0
 8003926:	4608      	mov	r0, r1
 8003928:	4611      	mov	r1, r2
 800392a:	2200      	movs	r2, #0
 800392c:	6022      	str	r2, [r4, #0]
 800392e:	461a      	mov	r2, r3
 8003930:	f7fc ffa1 	bl	8000876 <_write>
 8003934:	1c43      	adds	r3, r0, #1
 8003936:	d102      	bne.n	800393e <_write_r+0x1e>
 8003938:	6823      	ldr	r3, [r4, #0]
 800393a:	b103      	cbz	r3, 800393e <_write_r+0x1e>
 800393c:	602b      	str	r3, [r5, #0]
 800393e:	bd38      	pop	{r3, r4, r5, pc}
 8003940:	2000011c 	.word	0x2000011c

08003944 <_close_r>:
 8003944:	b538      	push	{r3, r4, r5, lr}
 8003946:	4c06      	ldr	r4, [pc, #24]	; (8003960 <_close_r+0x1c>)
 8003948:	2300      	movs	r3, #0
 800394a:	4605      	mov	r5, r0
 800394c:	4608      	mov	r0, r1
 800394e:	6023      	str	r3, [r4, #0]
 8003950:	f7fc ffad 	bl	80008ae <_close>
 8003954:	1c43      	adds	r3, r0, #1
 8003956:	d102      	bne.n	800395e <_close_r+0x1a>
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	b103      	cbz	r3, 800395e <_close_r+0x1a>
 800395c:	602b      	str	r3, [r5, #0]
 800395e:	bd38      	pop	{r3, r4, r5, pc}
 8003960:	2000011c 	.word	0x2000011c

08003964 <_fstat_r>:
 8003964:	b538      	push	{r3, r4, r5, lr}
 8003966:	4c07      	ldr	r4, [pc, #28]	; (8003984 <_fstat_r+0x20>)
 8003968:	2300      	movs	r3, #0
 800396a:	4605      	mov	r5, r0
 800396c:	4608      	mov	r0, r1
 800396e:	4611      	mov	r1, r2
 8003970:	6023      	str	r3, [r4, #0]
 8003972:	f7fc ffa8 	bl	80008c6 <_fstat>
 8003976:	1c43      	adds	r3, r0, #1
 8003978:	d102      	bne.n	8003980 <_fstat_r+0x1c>
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	b103      	cbz	r3, 8003980 <_fstat_r+0x1c>
 800397e:	602b      	str	r3, [r5, #0]
 8003980:	bd38      	pop	{r3, r4, r5, pc}
 8003982:	bf00      	nop
 8003984:	2000011c 	.word	0x2000011c

08003988 <_isatty_r>:
 8003988:	b538      	push	{r3, r4, r5, lr}
 800398a:	4c06      	ldr	r4, [pc, #24]	; (80039a4 <_isatty_r+0x1c>)
 800398c:	2300      	movs	r3, #0
 800398e:	4605      	mov	r5, r0
 8003990:	4608      	mov	r0, r1
 8003992:	6023      	str	r3, [r4, #0]
 8003994:	f7fc ffa7 	bl	80008e6 <_isatty>
 8003998:	1c43      	adds	r3, r0, #1
 800399a:	d102      	bne.n	80039a2 <_isatty_r+0x1a>
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	b103      	cbz	r3, 80039a2 <_isatty_r+0x1a>
 80039a0:	602b      	str	r3, [r5, #0]
 80039a2:	bd38      	pop	{r3, r4, r5, pc}
 80039a4:	2000011c 	.word	0x2000011c

080039a8 <_lseek_r>:
 80039a8:	b538      	push	{r3, r4, r5, lr}
 80039aa:	4c07      	ldr	r4, [pc, #28]	; (80039c8 <_lseek_r+0x20>)
 80039ac:	4605      	mov	r5, r0
 80039ae:	4608      	mov	r0, r1
 80039b0:	4611      	mov	r1, r2
 80039b2:	2200      	movs	r2, #0
 80039b4:	6022      	str	r2, [r4, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	f7fc ffa0 	bl	80008fc <_lseek>
 80039bc:	1c43      	adds	r3, r0, #1
 80039be:	d102      	bne.n	80039c6 <_lseek_r+0x1e>
 80039c0:	6823      	ldr	r3, [r4, #0]
 80039c2:	b103      	cbz	r3, 80039c6 <_lseek_r+0x1e>
 80039c4:	602b      	str	r3, [r5, #0]
 80039c6:	bd38      	pop	{r3, r4, r5, pc}
 80039c8:	2000011c 	.word	0x2000011c

080039cc <__malloc_lock>:
 80039cc:	4770      	bx	lr

080039ce <__malloc_unlock>:
 80039ce:	4770      	bx	lr

080039d0 <_read_r>:
 80039d0:	b538      	push	{r3, r4, r5, lr}
 80039d2:	4c07      	ldr	r4, [pc, #28]	; (80039f0 <_read_r+0x20>)
 80039d4:	4605      	mov	r5, r0
 80039d6:	4608      	mov	r0, r1
 80039d8:	4611      	mov	r1, r2
 80039da:	2200      	movs	r2, #0
 80039dc:	6022      	str	r2, [r4, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	f7fc ff2c 	bl	800083c <_read>
 80039e4:	1c43      	adds	r3, r0, #1
 80039e6:	d102      	bne.n	80039ee <_read_r+0x1e>
 80039e8:	6823      	ldr	r3, [r4, #0]
 80039ea:	b103      	cbz	r3, 80039ee <_read_r+0x1e>
 80039ec:	602b      	str	r3, [r5, #0]
 80039ee:	bd38      	pop	{r3, r4, r5, pc}
 80039f0:	2000011c 	.word	0x2000011c

080039f4 <_init>:
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f6:	bf00      	nop
 80039f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039fa:	bc08      	pop	{r3}
 80039fc:	469e      	mov	lr, r3
 80039fe:	4770      	bx	lr

08003a00 <_fini>:
 8003a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a02:	bf00      	nop
 8003a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a06:	bc08      	pop	{r3}
 8003a08:	469e      	mov	lr, r3
 8003a0a:	4770      	bx	lr
