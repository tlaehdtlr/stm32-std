
OJT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b24  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003cb0  08003cb0  00013cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cf8  08003cf8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003cf8  08003cf8  00013cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d00  08003d00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d00  08003d00  00013d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d04  08003d04  00013d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000000c  08003d14  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08003d14  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eed1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d93  00000000  00000000  0002ef0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e28  00000000  00000000  00030ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d20  00000000  00000000  00031ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001aada  00000000  00000000  000327e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c059  00000000  00000000  0004d2c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aa74a  00000000  00000000  0005931b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00103a65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aac  00000000  00000000  00103ae0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003c98 	.word	0x08003c98

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003c98 	.word	0x08003c98

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <MX_GPIO_Init+0x44>)
 80004d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d6:	4a0e      	ldr	r2, [pc, #56]	; (8000510 <MX_GPIO_Init+0x44>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <MX_GPIO_Init+0x44>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_GPIO_Init+0x44>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	4a08      	ldr	r2, [pc, #32]	; (8000510 <MX_GPIO_Init+0x44>)
 80004f0:	f043 0302 	orr.w	r3, r3, #2
 80004f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <MX_GPIO_Init+0x44>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	f003 0302 	and.w	r3, r3, #2
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	683b      	ldr	r3, [r7, #0]

}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fb2d 	bl	8000b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f82f 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f7ff ffd3 	bl	80004cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000526:	f000 fa23 	bl	8000970 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800052a:	f000 f9f1 	bl	8000910 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 800052e:	f000 f8ef 	bl	8000710 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
 8000532:	2100      	movs	r1, #0
 8000534:	4811      	ldr	r0, [pc, #68]	; (800057c <main+0x68>)
 8000536:	f002 fddd 	bl	80030f4 <HAL_TIMEx_PWMN_Start>

  /*uint8_t check_button;*/
  //uint8_t cnt_from_start = 0;


  uint8_t check_mode = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	71bb      	strb	r3, [r7, #6]
#if 1
//  htim15.Instance->CCR1 = 100;
  uint8_t duty = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	71fb      	strb	r3, [r7, #7]

  while (1)
  {
    /* 1sec. */
    while (duty < 100 )
 8000542:	e009      	b.n	8000558 <main+0x44>
    {
      /*LED */
      htim15.Instance->CCR1 = duty;
 8000544:	4b0d      	ldr	r3, [pc, #52]	; (800057c <main+0x68>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	79fa      	ldrb	r2, [r7, #7]
 800054a:	635a      	str	r2, [r3, #52]	; 0x34
      duty += 1;
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	3301      	adds	r3, #1
 8000550:	71fb      	strb	r3, [r7, #7]

      /*motor */

      HAL_Delay(10);
 8000552:	200a      	movs	r0, #10
 8000554:	f000 fb84 	bl	8000c60 <HAL_Delay>
    while (duty < 100 )
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	2b63      	cmp	r3, #99	; 0x63
 800055c:	d9f2      	bls.n	8000544 <main+0x30>

    }
    while (duty > 0 )
 800055e:	e009      	b.n	8000574 <main+0x60>
    {
      htim15.Instance->CCR1 = duty;
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <main+0x68>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	79fa      	ldrb	r2, [r7, #7]
 8000566:	635a      	str	r2, [r3, #52]	; 0x34
      duty -= 1;
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	3b01      	subs	r3, #1
 800056c:	71fb      	strb	r3, [r7, #7]
      HAL_Delay(10);
 800056e:	200a      	movs	r0, #10
 8000570:	f000 fb76 	bl	8000c60 <HAL_Delay>
    while (duty > 0 )
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d1f2      	bne.n	8000560 <main+0x4c>
    while (duty < 100 )
 800057a:	e7ed      	b.n	8000558 <main+0x44>
 800057c:	20000028 	.word	0x20000028

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b0a4      	sub	sp, #144	; 0x90
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800058a:	2244      	movs	r2, #68	; 0x44
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f003 fb7a 	bl	8003c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2234      	movs	r2, #52	; 0x34
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f003 fb6c 	bl	8003c88 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005b4:	f000 fe08 	bl	80011c8 <HAL_PWREx_ControlVoltageScaling>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x42>
  {
    Error_Handler();
 80005be:	f000 f84a 	bl	8000656 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005c2:	2310      	movs	r3, #16
 80005c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005c6:	2301      	movs	r3, #1
 80005c8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005ce:	2360      	movs	r3, #96	; 0x60
 80005d0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005d6:	2301      	movs	r3, #1
 80005d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005da:	2301      	movs	r3, #1
 80005dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005e0:	2328      	movs	r3, #40	; 0x28
 80005e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 fe3c 	bl	8001274 <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000602:	f000 f828 	bl	8000656 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2303      	movs	r3, #3
 800060c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800061a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800061e:	2104      	movs	r1, #4
 8000620:	4618      	mov	r0, r3
 8000622:	f001 fa8d 	bl	8001b40 <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800062c:	f000 f813 	bl	8000656 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000630:	2303      	movs	r3, #3
 8000632:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	4618      	mov	r0, r3
 8000640:	f001 fc82 	bl	8001f48 <HAL_RCCEx_PeriphCLKConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800064a:	f000 f804 	bl	8000656 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3790      	adds	r7, #144	; 0x90
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800065a:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800065c:	e7fe      	b.n	800065c <Error_Handler+0x6>
	...

08000660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <HAL_MspInit+0x44>)
 8000668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800066a:	4a0e      	ldr	r2, [pc, #56]	; (80006a4 <HAL_MspInit+0x44>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6613      	str	r3, [r2, #96]	; 0x60
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <HAL_MspInit+0x44>)
 8000674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_MspInit+0x44>)
 8000680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000682:	4a08      	ldr	r2, [pc, #32]	; (80006a4 <HAL_MspInit+0x44>)
 8000684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000688:	6593      	str	r3, [r2, #88]	; 0x58
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <HAL_MspInit+0x44>)
 800068c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800068e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000

080006a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <NMI_Handler+0x4>

080006ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <HardFault_Handler+0x4>

080006b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <MemManage_Handler+0x4>

080006ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006be:	e7fe      	b.n	80006be <BusFault_Handler+0x4>

080006c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <UsageFault_Handler+0x4>

080006c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f4:	f000 fa94 	bl	8000c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}

080006fc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8000700:	4802      	ldr	r0, [pc, #8]	; (800070c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000702:	f001 fe5f 	bl	80023c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000028 	.word	0x20000028

08000710 <MX_TIM15_Init>:

TIM_HandleTypeDef htim15;

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b09a      	sub	sp, #104	; 0x68
 8000714:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000716:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000724:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000730:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
 8000740:	615a      	str	r2, [r3, #20]
 8000742:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	222c      	movs	r2, #44	; 0x2c
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f003 fa9c 	bl	8003c88 <memset>

  htim15.Instance = TIM15;
 8000750:	4b3e      	ldr	r3, [pc, #248]	; (800084c <MX_TIM15_Init+0x13c>)
 8000752:	4a3f      	ldr	r2, [pc, #252]	; (8000850 <MX_TIM15_Init+0x140>)
 8000754:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 7999;
 8000756:	4b3d      	ldr	r3, [pc, #244]	; (800084c <MX_TIM15_Init+0x13c>)
 8000758:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800075c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075e:	4b3b      	ldr	r3, [pc, #236]	; (800084c <MX_TIM15_Init+0x13c>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 99;
 8000764:	4b39      	ldr	r3, [pc, #228]	; (800084c <MX_TIM15_Init+0x13c>)
 8000766:	2263      	movs	r2, #99	; 0x63
 8000768:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076a:	4b38      	ldr	r3, [pc, #224]	; (800084c <MX_TIM15_Init+0x13c>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000770:	4b36      	ldr	r3, [pc, #216]	; (800084c <MX_TIM15_Init+0x13c>)
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000776:	4b35      	ldr	r3, [pc, #212]	; (800084c <MX_TIM15_Init+0x13c>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800077c:	4833      	ldr	r0, [pc, #204]	; (800084c <MX_TIM15_Init+0x13c>)
 800077e:	f001 fd69 	bl	8002254 <HAL_TIM_Base_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000788:	f7ff ff65 	bl	8000656 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800078c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000790:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000792:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000796:	4619      	mov	r1, r3
 8000798:	482c      	ldr	r0, [pc, #176]	; (800084c <MX_TIM15_Init+0x13c>)
 800079a:	f002 f843 	bl	8002824 <HAL_TIM_ConfigClockSource>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80007a4:	f7ff ff57 	bl	8000656 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80007a8:	4828      	ldr	r0, [pc, #160]	; (800084c <MX_TIM15_Init+0x13c>)
 80007aa:	f001 fdaa 	bl	8002302 <HAL_TIM_PWM_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80007b4:	f7ff ff4f 	bl	8000656 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b8:	2300      	movs	r3, #0
 80007ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80007c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007c4:	4619      	mov	r1, r3
 80007c6:	4821      	ldr	r0, [pc, #132]	; (800084c <MX_TIM15_Init+0x13c>)
 80007c8:	f002 fd32 	bl	8003230 <HAL_TIMEx_MasterConfigSynchronization>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80007d2:	f7ff ff40 	bl	8000656 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d6:	2360      	movs	r3, #96	; 0x60
 80007d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007de:	2300      	movs	r3, #0
 80007e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007e2:	2300      	movs	r3, #0
 80007e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ea:	2300      	movs	r3, #0
 80007ec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007ee:	2300      	movs	r3, #0
 80007f0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007f6:	2200      	movs	r2, #0
 80007f8:	4619      	mov	r1, r3
 80007fa:	4814      	ldr	r0, [pc, #80]	; (800084c <MX_TIM15_Init+0x13c>)
 80007fc:	f001 ff02 	bl	8002604 <HAL_TIM_PWM_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8000806:	f7ff ff26 	bl	8000656 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800081e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000822:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	4619      	mov	r1, r3
 800082c:	4807      	ldr	r0, [pc, #28]	; (800084c <MX_TIM15_Init+0x13c>)
 800082e:	f002 fd65 	bl	80032fc <HAL_TIMEx_ConfigBreakDeadTime>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8000838:	f7ff ff0d 	bl	8000656 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim15);
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <MX_TIM15_Init+0x13c>)
 800083e:	f000 f82f 	bl	80008a0 <HAL_TIM_MspPostInit>

}
 8000842:	bf00      	nop
 8000844:	3768      	adds	r7, #104	; 0x68
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000028 	.word	0x20000028
 8000850:	40014000 	.word	0x40014000

08000854 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a0d      	ldr	r2, [pc, #52]	; (8000898 <HAL_TIM_Base_MspInit+0x44>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d113      	bne.n	800088e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <HAL_TIM_Base_MspInit+0x48>)
 8000868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800086a:	4a0c      	ldr	r2, [pc, #48]	; (800089c <HAL_TIM_Base_MspInit+0x48>)
 800086c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000870:	6613      	str	r3, [r2, #96]	; 0x60
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <HAL_TIM_Base_MspInit+0x48>)
 8000874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	2018      	movs	r0, #24
 8000884:	f000 fae9 	bl	8000e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000888:	2018      	movs	r0, #24
 800088a:	f000 fb02 	bl	8000e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40014000 	.word	0x40014000
 800089c:	40021000 	.word	0x40021000

080008a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a11      	ldr	r2, [pc, #68]	; (8000904 <HAL_TIM_MspPostInit+0x64>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d11c      	bne.n	80008fc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <HAL_TIM_MspPostInit+0x68>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a10      	ldr	r2, [pc, #64]	; (8000908 <HAL_TIM_MspPostInit+0x68>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <HAL_TIM_MspPostInit+0x68>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PB13     ------> TIM15_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80008ec:	230e      	movs	r3, #14
 80008ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	4619      	mov	r1, r3
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <HAL_TIM_MspPostInit+0x6c>)
 80008f8:	f000 fae6 	bl	8000ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80008fc:	bf00      	nop
 80008fe:	3720      	adds	r7, #32
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40014000 	.word	0x40014000
 8000908:	40021000 	.word	0x40021000
 800090c:	48000400 	.word	0x48000400

08000910 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_USART1_UART_Init+0x58>)
 8000916:	4a15      	ldr	r2, [pc, #84]	; (800096c <MX_USART1_UART_Init+0x5c>)
 8000918:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_USART1_UART_Init+0x58>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_USART1_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_USART1_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_USART1_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_USART1_UART_Init+0x58>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_USART1_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_USART1_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_USART1_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_USART1_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_USART1_UART_Init+0x58>)
 8000954:	f002 fd8d 	bl	8003472 <HAL_UART_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800095e:	f7ff fe7a 	bl	8000656 <Error_Handler>
  }

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000074 	.word	0x20000074
 800096c:	40013800 	.word	0x40013800

08000970 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_USART2_UART_Init+0x58>)
 8000976:	4a15      	ldr	r2, [pc, #84]	; (80009cc <MX_USART2_UART_Init+0x5c>)
 8000978:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_USART2_UART_Init+0x58>)
 800097c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000980:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_USART2_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_USART2_UART_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_USART2_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_USART2_UART_Init+0x58>)
 8000996:	220c      	movs	r2, #12
 8000998:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_USART2_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_USART2_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <MX_USART2_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_USART2_UART_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_USART2_UART_Init+0x58>)
 80009b4:	f002 fd5d 	bl	8003472 <HAL_UART_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009be:	f7ff fe4a 	bl	8000656 <Error_Handler>
  }

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200000f4 	.word	0x200000f4
 80009cc:	40004400 	.word	0x40004400

080009d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	; 0x30
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a2f      	ldr	r2, [pc, #188]	; (8000aac <HAL_UART_MspInit+0xdc>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d12a      	bne.n	8000a48 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009f2:	4b2f      	ldr	r3, [pc, #188]	; (8000ab0 <HAL_UART_MspInit+0xe0>)
 80009f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f6:	4a2e      	ldr	r2, [pc, #184]	; (8000ab0 <HAL_UART_MspInit+0xe0>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6613      	str	r3, [r2, #96]	; 0x60
 80009fe:	4b2c      	ldr	r3, [pc, #176]	; (8000ab0 <HAL_UART_MspInit+0xe0>)
 8000a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	61bb      	str	r3, [r7, #24]
 8000a08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <HAL_UART_MspInit+0xe0>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a28      	ldr	r2, [pc, #160]	; (8000ab0 <HAL_UART_MspInit+0xe0>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <HAL_UART_MspInit+0xe0>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART1_TX_Pin|UART1_RX_Pin;
 8000a22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a34:	2307      	movs	r3, #7
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a42:	f000 fa41 	bl	8000ec8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a46:	e02d      	b.n	8000aa4 <HAL_UART_MspInit+0xd4>
  else if(uartHandle->Instance==USART2)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a19      	ldr	r2, [pc, #100]	; (8000ab4 <HAL_UART_MspInit+0xe4>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d128      	bne.n	8000aa4 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <HAL_UART_MspInit+0xe0>)
 8000a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a56:	4a16      	ldr	r2, [pc, #88]	; (8000ab0 <HAL_UART_MspInit+0xe0>)
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <HAL_UART_MspInit+0xe0>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <HAL_UART_MspInit+0xe0>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a10      	ldr	r2, [pc, #64]	; (8000ab0 <HAL_UART_MspInit+0xe0>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_UART_MspInit+0xe0>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000a82:	230c      	movs	r3, #12
 8000a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a92:	2307      	movs	r3, #7
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa0:	f000 fa12 	bl	8000ec8 <HAL_GPIO_Init>
}
 8000aa4:	bf00      	nop
 8000aa6:	3730      	adds	r7, #48	; 0x30
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40013800 	.word	0x40013800
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	40004400 	.word	0x40004400

08000ab8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000abc:	f000 f826 	bl	8000b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ac0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ac2:	e003      	b.n	8000acc <LoopCopyDataInit>

08000ac4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ac6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ac8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000aca:	3104      	adds	r1, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000acc:	480a      	ldr	r0, [pc, #40]	; (8000af8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ad0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ad2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ad4:	d3f6      	bcc.n	8000ac4 <CopyDataInit>
	ldr	r2, =_sbss
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ad8:	e002      	b.n	8000ae0 <LoopFillZerobss>

08000ada <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ada:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000adc:	f842 3b04 	str.w	r3, [r2], #4

08000ae0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <LoopForever+0x16>)
	cmp	r2, r3
 8000ae2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ae4:	d3f9      	bcc.n	8000ada <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ae6:	f003 f8ab 	bl	8003c40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aea:	f7ff fd13 	bl	8000514 <main>

08000aee <LoopForever>:

LoopForever:
    b LoopForever
 8000aee:	e7fe      	b.n	8000aee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000af0:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000af4:	08003d08 	.word	0x08003d08
	ldr	r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000afc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000b00:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000b04:	20000178 	.word	0x20000178

08000b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC1_2_IRQHandler>
	...

08000b0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <SystemInit+0x64>)
 8000b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b16:	4a16      	ldr	r2, [pc, #88]	; (8000b70 <SystemInit+0x64>)
 8000b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <SystemInit+0x68>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a13      	ldr	r2, [pc, #76]	; (8000b74 <SystemInit+0x68>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <SystemInit+0x68>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <SystemInit+0x68>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <SystemInit+0x68>)
 8000b38:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b3c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b40:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <SystemInit+0x68>)
 8000b44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b48:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <SystemInit+0x68>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a09      	ldr	r2, [pc, #36]	; (8000b74 <SystemInit+0x68>)
 8000b50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b54:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <SystemInit+0x68>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <SystemInit+0x64>)
 8000b5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b62:	609a      	str	r2, [r3, #8]
#endif
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b82:	2003      	movs	r0, #3
 8000b84:	f000 f95e 	bl	8000e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f000 f80d 	bl	8000ba8 <HAL_InitTick>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d002      	beq.n	8000b9a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	71fb      	strb	r3, [r7, #7]
 8000b98:	e001      	b.n	8000b9e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b9a:	f7ff fd61 	bl	8000660 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <HAL_InitTick+0x6c>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d023      	beq.n	8000c04 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <HAL_InitTick+0x70>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <HAL_InitTick+0x6c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f96b 	bl	8000eae <HAL_SYSTICK_Config>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d10f      	bne.n	8000bfe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b0f      	cmp	r3, #15
 8000be2:	d809      	bhi.n	8000bf8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bec:	f000 f935 	bl	8000e5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf0:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <HAL_InitTick+0x74>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6013      	str	r3, [r2, #0]
 8000bf6:	e007      	b.n	8000c08 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	73fb      	strb	r3, [r7, #15]
 8000bfc:	e004      	b.n	8000c08 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	73fb      	strb	r3, [r7, #15]
 8000c02:	e001      	b.n	8000c08 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000008 	.word	0x20000008
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	20000004 	.word	0x20000004

08000c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_IncTick+0x20>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_IncTick+0x24>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_IncTick+0x24>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000174 	.word	0x20000174

08000c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <HAL_GetTick+0x14>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	20000174 	.word	0x20000174

08000c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c68:	f7ff ffee 	bl	8000c48 <HAL_GetTick>
 8000c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c78:	d005      	beq.n	8000c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <HAL_Delay+0x40>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4413      	add	r3, r2
 8000c84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c86:	bf00      	nop
 8000c88:	f7ff ffde 	bl	8000c48 <HAL_GetTick>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d8f7      	bhi.n	8000c88 <HAL_Delay+0x28>
  {
  }
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000008 	.word	0x20000008

08000ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd6:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	60d3      	str	r3, [r2, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	f003 0307 	and.w	r3, r3, #7
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db0b      	blt.n	8000d32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 021f 	and.w	r2, r3, #31
 8000d20:	4907      	ldr	r1, [pc, #28]	; (8000d40 <__NVIC_EnableIRQ+0x38>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	2001      	movs	r0, #1
 8000d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000e100 	.word	0xe000e100

08000d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	db0a      	blt.n	8000d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	490c      	ldr	r1, [pc, #48]	; (8000d90 <__NVIC_SetPriority+0x4c>)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	0112      	lsls	r2, r2, #4
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	440b      	add	r3, r1
 8000d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d6c:	e00a      	b.n	8000d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4908      	ldr	r1, [pc, #32]	; (8000d94 <__NVIC_SetPriority+0x50>)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	f003 030f 	and.w	r3, r3, #15
 8000d7a:	3b04      	subs	r3, #4
 8000d7c:	0112      	lsls	r2, r2, #4
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	440b      	add	r3, r1
 8000d82:	761a      	strb	r2, [r3, #24]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000e100 	.word	0xe000e100
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	; 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f1c3 0307 	rsb	r3, r3, #7
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	bf28      	it	cs
 8000db6:	2304      	movcs	r3, #4
 8000db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	2b06      	cmp	r3, #6
 8000dc0:	d902      	bls.n	8000dc8 <NVIC_EncodePriority+0x30>
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3b03      	subs	r3, #3
 8000dc6:	e000      	b.n	8000dca <NVIC_EncodePriority+0x32>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	401a      	ands	r2, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de0:	f04f 31ff 	mov.w	r1, #4294967295
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	43d9      	mvns	r1, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	4313      	orrs	r3, r2
         );
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3724      	adds	r7, #36	; 0x24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
	...

08000e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e10:	d301      	bcc.n	8000e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e12:	2301      	movs	r3, #1
 8000e14:	e00f      	b.n	8000e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <SysTick_Config+0x40>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1e:	210f      	movs	r1, #15
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	f7ff ff8e 	bl	8000d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <SysTick_Config+0x40>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2e:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <SysTick_Config+0x40>)
 8000e30:	2207      	movs	r2, #7
 8000e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	e000e010 	.word	0xe000e010

08000e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff ff29 	bl	8000ca4 <__NVIC_SetPriorityGrouping>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b086      	sub	sp, #24
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e6c:	f7ff ff3e 	bl	8000cec <__NVIC_GetPriorityGrouping>
 8000e70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	68b9      	ldr	r1, [r7, #8]
 8000e76:	6978      	ldr	r0, [r7, #20]
 8000e78:	f7ff ff8e 	bl	8000d98 <NVIC_EncodePriority>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff5d 	bl	8000d44 <__NVIC_SetPriority>
}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff31 	bl	8000d08 <__NVIC_EnableIRQ>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ffa2 	bl	8000e00 <SysTick_Config>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed6:	e14e      	b.n	8001176 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	2101      	movs	r1, #1
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f000 8140 	beq.w	8001170 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d00b      	beq.n	8000f10 <HAL_GPIO_Init+0x48>
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d007      	beq.n	8000f10 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f04:	2b11      	cmp	r3, #17
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b12      	cmp	r3, #18
 8000f0e:	d130      	bne.n	8000f72 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f46:	2201      	movs	r2, #1
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	091b      	lsrs	r3, r3, #4
 8000f5c:	f003 0201 	and.w	r2, r3, #1
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0xea>
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b12      	cmp	r3, #18
 8000fb0:	d123      	bne.n	8000ffa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	220f      	movs	r2, #15
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	691a      	ldr	r2, [r3, #16]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	08da      	lsrs	r2, r3, #3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3208      	adds	r2, #8
 8000ff4:	6939      	ldr	r1, [r7, #16]
 8000ff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	2203      	movs	r2, #3
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0203 	and.w	r2, r3, #3
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 809a 	beq.w	8001170 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103c:	4b55      	ldr	r3, [pc, #340]	; (8001194 <HAL_GPIO_Init+0x2cc>)
 800103e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001040:	4a54      	ldr	r2, [pc, #336]	; (8001194 <HAL_GPIO_Init+0x2cc>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	6613      	str	r3, [r2, #96]	; 0x60
 8001048:	4b52      	ldr	r3, [pc, #328]	; (8001194 <HAL_GPIO_Init+0x2cc>)
 800104a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001054:	4a50      	ldr	r2, [pc, #320]	; (8001198 <HAL_GPIO_Init+0x2d0>)
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	089b      	lsrs	r3, r3, #2
 800105a:	3302      	adds	r3, #2
 800105c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	220f      	movs	r2, #15
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800107e:	d013      	beq.n	80010a8 <HAL_GPIO_Init+0x1e0>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a46      	ldr	r2, [pc, #280]	; (800119c <HAL_GPIO_Init+0x2d4>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d00d      	beq.n	80010a4 <HAL_GPIO_Init+0x1dc>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a45      	ldr	r2, [pc, #276]	; (80011a0 <HAL_GPIO_Init+0x2d8>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d007      	beq.n	80010a0 <HAL_GPIO_Init+0x1d8>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a44      	ldr	r2, [pc, #272]	; (80011a4 <HAL_GPIO_Init+0x2dc>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d101      	bne.n	800109c <HAL_GPIO_Init+0x1d4>
 8001098:	2303      	movs	r3, #3
 800109a:	e006      	b.n	80010aa <HAL_GPIO_Init+0x1e2>
 800109c:	2307      	movs	r3, #7
 800109e:	e004      	b.n	80010aa <HAL_GPIO_Init+0x1e2>
 80010a0:	2302      	movs	r3, #2
 80010a2:	e002      	b.n	80010aa <HAL_GPIO_Init+0x1e2>
 80010a4:	2301      	movs	r3, #1
 80010a6:	e000      	b.n	80010aa <HAL_GPIO_Init+0x1e2>
 80010a8:	2300      	movs	r3, #0
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	f002 0203 	and.w	r2, r2, #3
 80010b0:	0092      	lsls	r2, r2, #2
 80010b2:	4093      	lsls	r3, r2
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010ba:	4937      	ldr	r1, [pc, #220]	; (8001198 <HAL_GPIO_Init+0x2d0>)
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	089b      	lsrs	r3, r3, #2
 80010c0:	3302      	adds	r3, #2
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010c8:	4b37      	ldr	r3, [pc, #220]	; (80011a8 <HAL_GPIO_Init+0x2e0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010ec:	4a2e      	ldr	r2, [pc, #184]	; (80011a8 <HAL_GPIO_Init+0x2e0>)
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80010f2:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <HAL_GPIO_Init+0x2e0>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001116:	4a24      	ldr	r2, [pc, #144]	; (80011a8 <HAL_GPIO_Init+0x2e0>)
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800111c:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <HAL_GPIO_Init+0x2e0>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	43db      	mvns	r3, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001140:	4a19      	ldr	r2, [pc, #100]	; (80011a8 <HAL_GPIO_Init+0x2e0>)
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <HAL_GPIO_Init+0x2e0>)
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800116a:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <HAL_GPIO_Init+0x2e0>)
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	3301      	adds	r3, #1
 8001174:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa22 f303 	lsr.w	r3, r2, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	f47f aea9 	bne.w	8000ed8 <HAL_GPIO_Init+0x10>
  }
}
 8001186:	bf00      	nop
 8001188:	371c      	adds	r7, #28
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000
 8001198:	40010000 	.word	0x40010000
 800119c:	48000400 	.word	0x48000400
 80011a0:	48000800 	.word	0x48000800
 80011a4:	48000c00 	.word	0x48000c00
 80011a8:	40010400 	.word	0x40010400

080011ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40007000 	.word	0x40007000

080011c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011d6:	d130      	bne.n	800123a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011d8:	4b23      	ldr	r3, [pc, #140]	; (8001268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011e4:	d038      	beq.n	8001258 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e6:	4b20      	ldr	r3, [pc, #128]	; (8001268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011ee:	4a1e      	ldr	r2, [pc, #120]	; (8001268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011f6:	4b1d      	ldr	r3, [pc, #116]	; (800126c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2232      	movs	r2, #50	; 0x32
 80011fc:	fb02 f303 	mul.w	r3, r2, r3
 8001200:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001202:	fba2 2303 	umull	r2, r3, r2, r3
 8001206:	0c9b      	lsrs	r3, r3, #18
 8001208:	3301      	adds	r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800120c:	e002      	b.n	8001214 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	3b01      	subs	r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800121c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001220:	d102      	bne.n	8001228 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1f2      	bne.n	800120e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001234:	d110      	bne.n	8001258 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e00f      	b.n	800125a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001246:	d007      	beq.n	8001258 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001248:	4b07      	ldr	r3, [pc, #28]	; (8001268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001250:	4a05      	ldr	r2, [pc, #20]	; (8001268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001256:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40007000 	.word	0x40007000
 800126c:	20000000 	.word	0x20000000
 8001270:	431bde83 	.word	0x431bde83

08001274 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d102      	bne.n	8001288 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	f000 bc56 	b.w	8001b34 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001288:	4ba1      	ldr	r3, [pc, #644]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 030c 	and.w	r3, r3, #12
 8001290:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001292:	4b9f      	ldr	r3, [pc, #636]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0310 	and.w	r3, r3, #16
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80e6 	beq.w	8001476 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d007      	beq.n	80012c0 <HAL_RCC_OscConfig+0x4c>
 80012b0:	6a3b      	ldr	r3, [r7, #32]
 80012b2:	2b0c      	cmp	r3, #12
 80012b4:	f040 808d 	bne.w	80013d2 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	f040 8089 	bne.w	80013d2 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012c0:	4b93      	ldr	r3, [pc, #588]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d006      	beq.n	80012da <HAL_RCC_OscConfig+0x66>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d102      	bne.n	80012da <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	f000 bc2d 	b.w	8001b34 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012de:	4b8c      	ldr	r3, [pc, #560]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d004      	beq.n	80012f4 <HAL_RCC_OscConfig+0x80>
 80012ea:	4b89      	ldr	r3, [pc, #548]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012f2:	e005      	b.n	8001300 <HAL_RCC_OscConfig+0x8c>
 80012f4:	4b86      	ldr	r3, [pc, #536]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 80012f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001300:	4293      	cmp	r3, r2
 8001302:	d224      	bcs.n	800134e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001308:	4618      	mov	r0, r3
 800130a:	f000 fdbd 	bl	8001e88 <RCC_SetFlashLatencyFromMSIRange>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d002      	beq.n	800131a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	f000 bc0d 	b.w	8001b34 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800131a:	4b7d      	ldr	r3, [pc, #500]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a7c      	ldr	r2, [pc, #496]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 8001320:	f043 0308 	orr.w	r3, r3, #8
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	4b7a      	ldr	r3, [pc, #488]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001332:	4977      	ldr	r1, [pc, #476]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 8001334:	4313      	orrs	r3, r2
 8001336:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001338:	4b75      	ldr	r3, [pc, #468]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	4972      	ldr	r1, [pc, #456]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]
 800134c:	e025      	b.n	800139a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800134e:	4b70      	ldr	r3, [pc, #448]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a6f      	ldr	r2, [pc, #444]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 8001354:	f043 0308 	orr.w	r3, r3, #8
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b6d      	ldr	r3, [pc, #436]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001366:	496a      	ldr	r1, [pc, #424]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 8001368:	4313      	orrs	r3, r2
 800136a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800136c:	4b68      	ldr	r3, [pc, #416]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	4965      	ldr	r1, [pc, #404]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001380:	6a3b      	ldr	r3, [r7, #32]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138a:	4618      	mov	r0, r3
 800138c:	f000 fd7c 	bl	8001e88 <RCC_SetFlashLatencyFromMSIRange>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e3cc      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800139a:	f000 fcb3 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 800139e:	4601      	mov	r1, r0
 80013a0:	4b5b      	ldr	r3, [pc, #364]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	4a5a      	ldr	r2, [pc, #360]	; (8001514 <HAL_RCC_OscConfig+0x2a0>)
 80013ac:	5cd3      	ldrb	r3, [r2, r3]
 80013ae:	f003 031f 	and.w	r3, r3, #31
 80013b2:	fa21 f303 	lsr.w	r3, r1, r3
 80013b6:	4a58      	ldr	r2, [pc, #352]	; (8001518 <HAL_RCC_OscConfig+0x2a4>)
 80013b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013ba:	4b58      	ldr	r3, [pc, #352]	; (800151c <HAL_RCC_OscConfig+0x2a8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fbf2 	bl	8000ba8 <HAL_InitTick>
 80013c4:	4603      	mov	r3, r0
 80013c6:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80013c8:	7dfb      	ldrb	r3, [r7, #23]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d052      	beq.n	8001474 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80013ce:	7dfb      	ldrb	r3, [r7, #23]
 80013d0:	e3b0      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d032      	beq.n	8001440 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013da:	4b4d      	ldr	r3, [pc, #308]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a4c      	ldr	r2, [pc, #304]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013e6:	f7ff fc2f 	bl	8000c48 <HAL_GetTick>
 80013ea:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ee:	f7ff fc2b 	bl	8000c48 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e399      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001400:	4b43      	ldr	r3, [pc, #268]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f0      	beq.n	80013ee <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800140c:	4b40      	ldr	r3, [pc, #256]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a3f      	ldr	r2, [pc, #252]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 8001412:	f043 0308 	orr.w	r3, r3, #8
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4b3d      	ldr	r3, [pc, #244]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	493a      	ldr	r1, [pc, #232]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800142a:	4b39      	ldr	r3, [pc, #228]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	4935      	ldr	r1, [pc, #212]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 800143a:	4313      	orrs	r3, r2
 800143c:	604b      	str	r3, [r1, #4]
 800143e:	e01a      	b.n	8001476 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001440:	4b33      	ldr	r3, [pc, #204]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a32      	ldr	r2, [pc, #200]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 8001446:	f023 0301 	bic.w	r3, r3, #1
 800144a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800144c:	f7ff fbfc 	bl	8000c48 <HAL_GetTick>
 8001450:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001454:	f7ff fbf8 	bl	8000c48 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e366      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001466:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0x1e0>
 8001472:	e000      	b.n	8001476 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001474:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d073      	beq.n	800156a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001482:	6a3b      	ldr	r3, [r7, #32]
 8001484:	2b08      	cmp	r3, #8
 8001486:	d005      	beq.n	8001494 <HAL_RCC_OscConfig+0x220>
 8001488:	6a3b      	ldr	r3, [r7, #32]
 800148a:	2b0c      	cmp	r3, #12
 800148c:	d10e      	bne.n	80014ac <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	2b03      	cmp	r3, #3
 8001492:	d10b      	bne.n	80014ac <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001494:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d063      	beq.n	8001568 <HAL_RCC_OscConfig+0x2f4>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d15f      	bne.n	8001568 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e343      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b4:	d106      	bne.n	80014c4 <HAL_RCC_OscConfig+0x250>
 80014b6:	4b16      	ldr	r3, [pc, #88]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a15      	ldr	r2, [pc, #84]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 80014bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	e01d      	b.n	8001500 <HAL_RCC_OscConfig+0x28c>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x274>
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 80014d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a0c      	ldr	r2, [pc, #48]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e00b      	b.n	8001500 <HAL_RCC_OscConfig+0x28c>
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a08      	ldr	r2, [pc, #32]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 80014ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a05      	ldr	r2, [pc, #20]	; (8001510 <HAL_RCC_OscConfig+0x29c>)
 80014fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d01b      	beq.n	8001540 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff fb9e 	bl	8000c48 <HAL_GetTick>
 800150c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800150e:	e010      	b.n	8001532 <HAL_RCC_OscConfig+0x2be>
 8001510:	40021000 	.word	0x40021000
 8001514:	08003cb0 	.word	0x08003cb0
 8001518:	20000000 	.word	0x20000000
 800151c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff fb92 	bl	8000c48 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	; 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e300      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001532:	4ba0      	ldr	r3, [pc, #640]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0x2ac>
 800153e:	e014      	b.n	800156a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001540:	f7ff fb82 	bl	8000c48 <HAL_GetTick>
 8001544:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff fb7e 	bl	8000c48 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	; 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e2ec      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800155a:	4b96      	ldr	r3, [pc, #600]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x2d4>
 8001566:	e000      	b.n	800156a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d060      	beq.n	8001638 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	2b04      	cmp	r3, #4
 800157a:	d005      	beq.n	8001588 <HAL_RCC_OscConfig+0x314>
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	2b0c      	cmp	r3, #12
 8001580:	d119      	bne.n	80015b6 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d116      	bne.n	80015b6 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001588:	4b8a      	ldr	r3, [pc, #552]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_OscConfig+0x32c>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e2c9      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4b84      	ldr	r3, [pc, #528]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	061b      	lsls	r3, r3, #24
 80015ae:	4981      	ldr	r1, [pc, #516]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015b4:	e040      	b.n	8001638 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d023      	beq.n	8001606 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015be:	4b7d      	ldr	r3, [pc, #500]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a7c      	ldr	r2, [pc, #496]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 80015c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ca:	f7ff fb3d 	bl	8000c48 <HAL_GetTick>
 80015ce:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d2:	f7ff fb39 	bl	8000c48 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e2a7      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e4:	4b73      	ldr	r3, [pc, #460]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f0      	beq.n	80015d2 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f0:	4b70      	ldr	r3, [pc, #448]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	061b      	lsls	r3, r3, #24
 80015fe:	496d      	ldr	r1, [pc, #436]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
 8001604:	e018      	b.n	8001638 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001606:	4b6b      	ldr	r3, [pc, #428]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a6a      	ldr	r2, [pc, #424]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 800160c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001612:	f7ff fb19 	bl	8000c48 <HAL_GetTick>
 8001616:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800161a:	f7ff fb15 	bl	8000c48 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e283      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800162c:	4b61      	ldr	r3, [pc, #388]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f0      	bne.n	800161a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	2b00      	cmp	r3, #0
 8001642:	d07f      	beq.n	8001744 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d05f      	beq.n	800170c <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800164c:	4b59      	ldr	r3, [pc, #356]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 800164e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001652:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699a      	ldr	r2, [r3, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	429a      	cmp	r2, r3
 8001660:	d037      	beq.n	80016d2 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d006      	beq.n	800167a <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e25c      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b00      	cmp	r3, #0
 8001682:	d01b      	beq.n	80016bc <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8001684:	4b4b      	ldr	r3, [pc, #300]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 8001686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800168a:	4a4a      	ldr	r2, [pc, #296]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001694:	f7ff fad8 	bl	8000c48 <HAL_GetTick>
 8001698:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800169c:	f7ff fad4 	bl	8000c48 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b11      	cmp	r3, #17
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e242      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016ae:	4b41      	ldr	r3, [pc, #260]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 80016b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1ef      	bne.n	800169c <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80016bc:	4b3d      	ldr	r3, [pc, #244]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 80016be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c2:	f023 0210 	bic.w	r2, r3, #16
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	493a      	ldr	r1, [pc, #232]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016d2:	4b38      	ldr	r3, [pc, #224]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 80016d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d8:	4a36      	ldr	r2, [pc, #216]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e2:	f7ff fab1 	bl	8000c48 <HAL_GetTick>
 80016e6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ea:	f7ff faad 	bl	8000c48 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b11      	cmp	r3, #17
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e21b      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016fc:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 80016fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0ef      	beq.n	80016ea <HAL_RCC_OscConfig+0x476>
 800170a:	e01b      	b.n	8001744 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800170c:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 800170e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001712:	4a28      	ldr	r2, [pc, #160]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 8001714:	f023 0301 	bic.w	r3, r3, #1
 8001718:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171c:	f7ff fa94 	bl	8000c48 <HAL_GetTick>
 8001720:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001724:	f7ff fa90 	bl	8000c48 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b11      	cmp	r3, #17
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e1fe      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001736:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 8001738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1ef      	bne.n	8001724 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80c1 	beq.w	80018d4 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001752:	2300      	movs	r3, #0
 8001754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 800175a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10e      	bne.n	8001782 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001764:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 8001766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001768:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 800176a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176e:	6593      	str	r3, [r2, #88]	; 0x58
 8001770:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <HAL_RCC_OscConfig+0x540>)
 8001772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800177c:	2301      	movs	r3, #1
 800177e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001782:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <HAL_RCC_OscConfig+0x544>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178a:	2b00      	cmp	r3, #0
 800178c:	d11c      	bne.n	80017c8 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <HAL_RCC_OscConfig+0x544>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <HAL_RCC_OscConfig+0x544>)
 8001794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800179a:	f7ff fa55 	bl	8000c48 <HAL_GetTick>
 800179e:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a0:	e00c      	b.n	80017bc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a2:	f7ff fa51 	bl	8000c48 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d905      	bls.n	80017bc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e1bf      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017bc:	4bb1      	ldr	r3, [pc, #708]	; (8001a84 <HAL_RCC_OscConfig+0x810>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0ec      	beq.n	80017a2 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d02c      	beq.n	800182e <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80017d4:	4bac      	ldr	r3, [pc, #688]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 80017d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e6:	49a8      	ldr	r1, [pc, #672]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d010      	beq.n	800181c <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017fa:	4ba3      	ldr	r3, [pc, #652]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 80017fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001800:	4aa1      	ldr	r2, [pc, #644]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 8001802:	f043 0304 	orr.w	r3, r3, #4
 8001806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800180a:	4b9f      	ldr	r3, [pc, #636]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 800180c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001810:	4a9d      	ldr	r2, [pc, #628]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800181a:	e018      	b.n	800184e <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800181c:	4b9a      	ldr	r3, [pc, #616]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 800181e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001822:	4a99      	ldr	r2, [pc, #612]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800182c:	e00f      	b.n	800184e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800182e:	4b96      	ldr	r3, [pc, #600]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 8001830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001834:	4a94      	ldr	r2, [pc, #592]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 8001836:	f023 0301 	bic.w	r3, r3, #1
 800183a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800183e:	4b92      	ldr	r3, [pc, #584]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 8001840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001844:	4a90      	ldr	r2, [pc, #576]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 8001846:	f023 0304 	bic.w	r3, r3, #4
 800184a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d016      	beq.n	8001884 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001856:	f7ff f9f7 	bl	8000c48 <HAL_GetTick>
 800185a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800185c:	e00a      	b.n	8001874 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185e:	f7ff f9f3 	bl	8000c48 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	f241 3288 	movw	r2, #5000	; 0x1388
 800186c:	4293      	cmp	r3, r2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e15f      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001874:	4b84      	ldr	r3, [pc, #528]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 8001876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0ed      	beq.n	800185e <HAL_RCC_OscConfig+0x5ea>
 8001882:	e01d      	b.n	80018c0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001884:	f7ff f9e0 	bl	8000c48 <HAL_GetTick>
 8001888:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800188a:	e00a      	b.n	80018a2 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800188c:	f7ff f9dc 	bl	8000c48 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	f241 3288 	movw	r2, #5000	; 0x1388
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e148      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018a2:	4b79      	ldr	r3, [pc, #484]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 80018a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1ed      	bne.n	800188c <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80018b0:	4b75      	ldr	r3, [pc, #468]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 80018b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b6:	4a74      	ldr	r2, [pc, #464]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 80018b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d105      	bne.n	80018d4 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c8:	4b6f      	ldr	r3, [pc, #444]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 80018ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018cc:	4a6e      	ldr	r2, [pc, #440]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 80018ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0320 	and.w	r3, r3, #32
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d03c      	beq.n	800195a <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d01c      	beq.n	8001922 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018e8:	4b67      	ldr	r3, [pc, #412]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 80018ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018ee:	4a66      	ldr	r2, [pc, #408]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f8:	f7ff f9a6 	bl	8000c48 <HAL_GetTick>
 80018fc:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001900:	f7ff f9a2 	bl	8000c48 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e110      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001912:	4b5d      	ldr	r3, [pc, #372]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 8001914:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0ef      	beq.n	8001900 <HAL_RCC_OscConfig+0x68c>
 8001920:	e01b      	b.n	800195a <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001922:	4b59      	ldr	r3, [pc, #356]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 8001924:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001928:	4a57      	ldr	r2, [pc, #348]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 800192a:	f023 0301 	bic.w	r3, r3, #1
 800192e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001932:	f7ff f989 	bl	8000c48 <HAL_GetTick>
 8001936:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800193a:	f7ff f985 	bl	8000c48 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e0f3      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800194c:	4b4e      	ldr	r3, [pc, #312]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 800194e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1ef      	bne.n	800193a <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 80e7 	beq.w	8001b32 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	2b02      	cmp	r3, #2
 800196a:	f040 80b7 	bne.w	8001adc <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800196e:	4b46      	ldr	r3, [pc, #280]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f003 0203 	and.w	r2, r3, #3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	429a      	cmp	r2, r3
 8001980:	d124      	bne.n	80019cc <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800198c:	3b01      	subs	r3, #1
 800198e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001990:	429a      	cmp	r2, r3
 8001992:	d11b      	bne.n	80019cc <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d113      	bne.n	80019cc <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ae:	085b      	lsrs	r3, r3, #1
 80019b0:	3b01      	subs	r3, #1
 80019b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d109      	bne.n	80019cc <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	085b      	lsrs	r3, r3, #1
 80019c4:	3b01      	subs	r3, #1
 80019c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d061      	beq.n	8001a90 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	2b0c      	cmp	r3, #12
 80019d0:	d056      	beq.n	8001a80 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019d2:	4b2d      	ldr	r3, [pc, #180]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a2c      	ldr	r2, [pc, #176]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 80019d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019de:	f7ff f933 	bl	8000c48 <HAL_GetTick>
 80019e2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e6:	f7ff f92f 	bl	8000c48 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e09d      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f8:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1f0      	bne.n	80019e6 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a04:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_RCC_OscConfig+0x818>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a14:	3a01      	subs	r2, #1
 8001a16:	0112      	lsls	r2, r2, #4
 8001a18:	4311      	orrs	r1, r2
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a1e:	0212      	lsls	r2, r2, #8
 8001a20:	4311      	orrs	r1, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a26:	0852      	lsrs	r2, r2, #1
 8001a28:	3a01      	subs	r2, #1
 8001a2a:	0552      	lsls	r2, r2, #21
 8001a2c:	4311      	orrs	r1, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a32:	0852      	lsrs	r2, r2, #1
 8001a34:	3a01      	subs	r2, #1
 8001a36:	0652      	lsls	r2, r2, #25
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	4913      	ldr	r1, [pc, #76]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a10      	ldr	r2, [pc, #64]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 8001a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	4a0d      	ldr	r2, [pc, #52]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 8001a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a58:	f7ff f8f6 	bl	8000c48 <HAL_GetTick>
 8001a5c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a60:	f7ff f8f2 	bl	8000c48 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e060      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_RCC_OscConfig+0x814>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a7e:	e058      	b.n	8001b32 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e057      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
 8001a84:	40007000 	.word	0x40007000
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a90:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <HAL_RCC_OscConfig+0x8c8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d14a      	bne.n	8001b32 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a9c:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <HAL_RCC_OscConfig+0x8c8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a26      	ldr	r2, [pc, #152]	; (8001b3c <HAL_RCC_OscConfig+0x8c8>)
 8001aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aa6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001aa8:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <HAL_RCC_OscConfig+0x8c8>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4a23      	ldr	r2, [pc, #140]	; (8001b3c <HAL_RCC_OscConfig+0x8c8>)
 8001aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ab2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ab4:	f7ff f8c8 	bl	8000c48 <HAL_GetTick>
 8001ab8:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001abc:	f7ff f8c4 	bl	8000c48 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e032      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ace:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <HAL_RCC_OscConfig+0x8c8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x848>
 8001ada:	e02a      	b.n	8001b32 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001adc:	6a3b      	ldr	r3, [r7, #32]
 8001ade:	2b0c      	cmp	r3, #12
 8001ae0:	d025      	beq.n	8001b2e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <HAL_RCC_OscConfig+0x8c8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a15      	ldr	r2, [pc, #84]	; (8001b3c <HAL_RCC_OscConfig+0x8c8>)
 8001ae8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aec:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001aee:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_RCC_OscConfig+0x8c8>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	4a12      	ldr	r2, [pc, #72]	; (8001b3c <HAL_RCC_OscConfig+0x8c8>)
 8001af4:	f023 0303 	bic.w	r3, r3, #3
 8001af8:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_RCC_OscConfig+0x8c8>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	4a0f      	ldr	r2, [pc, #60]	; (8001b3c <HAL_RCC_OscConfig+0x8c8>)
 8001b00:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b04:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b06:	f7ff f89f 	bl	8000c48 <HAL_GetTick>
 8001b0a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0e:	f7ff f89b 	bl	8000c48 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e009      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_RCC_OscConfig+0x8c8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f0      	bne.n	8001b0e <HAL_RCC_OscConfig+0x89a>
 8001b2c:	e001      	b.n	8001b32 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3728      	adds	r7, #40	; 0x28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40021000 	.word	0x40021000

08001b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0c8      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b54:	4b66      	ldr	r3, [pc, #408]	; (8001cf0 <HAL_RCC_ClockConfig+0x1b0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d910      	bls.n	8001b84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b62:	4b63      	ldr	r3, [pc, #396]	; (8001cf0 <HAL_RCC_ClockConfig+0x1b0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 0207 	bic.w	r2, r3, #7
 8001b6a:	4961      	ldr	r1, [pc, #388]	; (8001cf0 <HAL_RCC_ClockConfig+0x1b0>)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b72:	4b5f      	ldr	r3, [pc, #380]	; (8001cf0 <HAL_RCC_ClockConfig+0x1b0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0b0      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d04c      	beq.n	8001c2a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d107      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b98:	4b56      	ldr	r3, [pc, #344]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b4>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d121      	bne.n	8001be8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e09e      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d107      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bb0:	4b50      	ldr	r3, [pc, #320]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d115      	bne.n	8001be8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e092      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d107      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bc8:	4b4a      	ldr	r3, [pc, #296]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d109      	bne.n	8001be8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e086      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd8:	4b46      	ldr	r3, [pc, #280]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b4>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e07e      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001be8:	4b42      	ldr	r3, [pc, #264]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b4>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f023 0203 	bic.w	r2, r3, #3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	493f      	ldr	r1, [pc, #252]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b4>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bfa:	f7ff f825 	bl	8000c48 <HAL_GetTick>
 8001bfe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c02:	f7ff f821 	bl	8000c48 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e066      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c18:	4b36      	ldr	r3, [pc, #216]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 020c 	and.w	r2, r3, #12
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d1eb      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d008      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c36:	4b2f      	ldr	r3, [pc, #188]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	492c      	ldr	r1, [pc, #176]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c48:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d210      	bcs.n	8001c78 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c56:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 0207 	bic.w	r2, r3, #7
 8001c5e:	4924      	ldr	r1, [pc, #144]	; (8001cf0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c66:	4b22      	ldr	r3, [pc, #136]	; (8001cf0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d001      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e036      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d008      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c84:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	4918      	ldr	r1, [pc, #96]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d009      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ca2:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b4>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4910      	ldr	r1, [pc, #64]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b4>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cb6:	f000 f825 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 8001cba:	4601      	mov	r1, r0
 8001cbc:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b4>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	4a0c      	ldr	r2, [pc, #48]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc8:	5cd3      	ldrb	r3, [r2, r3]
 8001cca:	f003 031f 	and.w	r3, r3, #31
 8001cce:	fa21 f303 	lsr.w	r3, r1, r3
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe ff64 	bl	8000ba8 <HAL_InitTick>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ce4:	7afb      	ldrb	r3, [r7, #11]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40022000 	.word	0x40022000
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	08003cb0 	.word	0x08003cb0
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	20000004 	.word	0x20000004

08001d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d12:	4b3d      	ldr	r3, [pc, #244]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d1c:	4b3a      	ldr	r3, [pc, #232]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0x34>
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	2b0c      	cmp	r3, #12
 8001d30:	d121      	bne.n	8001d76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d11e      	bne.n	8001d76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d38:	4b33      	ldr	r3, [pc, #204]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d107      	bne.n	8001d54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d44:	4b30      	ldr	r3, [pc, #192]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d4a:	0a1b      	lsrs	r3, r3, #8
 8001d4c:	f003 030f 	and.w	r3, r3, #15
 8001d50:	61fb      	str	r3, [r7, #28]
 8001d52:	e005      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d54:	4b2c      	ldr	r3, [pc, #176]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d60:	4a2a      	ldr	r2, [pc, #168]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10d      	bne.n	8001d8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d74:	e00a      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d102      	bne.n	8001d82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d7c:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d7e:	61bb      	str	r3, [r7, #24]
 8001d80:	e004      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d88:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	2b0c      	cmp	r3, #12
 8001d90:	d133      	bne.n	8001dfa <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d92:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d002      	beq.n	8001da8 <HAL_RCC_GetSysClockFreq+0xa4>
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d003      	beq.n	8001dae <HAL_RCC_GetSysClockFreq+0xaa>
 8001da6:	e005      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001da8:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001daa:	617b      	str	r3, [r7, #20]
      break;
 8001dac:	e005      	b.n	8001dba <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001dae:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x110>)
 8001db0:	617b      	str	r3, [r7, #20]
      break;
 8001db2:	e002      	b.n	8001dba <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	617b      	str	r3, [r7, #20]
      break;
 8001db8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dba:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x104>)
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	091b      	lsrs	r3, r3, #4
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x104>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	fb02 f203 	mul.w	r2, r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dde:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x104>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	0e5b      	lsrs	r3, r3, #25
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	3301      	adds	r3, #1
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001dfa:	69bb      	ldr	r3, [r7, #24]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3724      	adds	r7, #36	; 0x24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	08003cc8 	.word	0x08003cc8
 8001e10:	00f42400 	.word	0x00f42400
 8001e14:	007a1200 	.word	0x007a1200

08001e18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e1c:	4b03      	ldr	r3, [pc, #12]	; (8001e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000000 	.word	0x20000000

08001e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e34:	f7ff fff0 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e38:	4601      	mov	r1, r0
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	0a1b      	lsrs	r3, r3, #8
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e46:	5cd3      	ldrb	r3, [r2, r3]
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000
 8001e58:	08003cc0 	.word	0x08003cc0

08001e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e60:	f7ff ffda 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e64:	4601      	mov	r1, r0
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	0adb      	lsrs	r3, r3, #11
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e72:	5cd3      	ldrb	r3, [r2, r3]
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000
 8001e84:	08003cc0 	.word	0x08003cc0

08001e88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e94:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ea0:	f7ff f984 	bl	80011ac <HAL_PWREx_GetVoltageRange>
 8001ea4:	6178      	str	r0, [r7, #20]
 8001ea6:	e014      	b.n	8001ed2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ea8:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eac:	4a24      	ldr	r2, [pc, #144]	; (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	6593      	str	r3, [r2, #88]	; 0x58
 8001eb4:	4b22      	ldr	r3, [pc, #136]	; (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ec0:	f7ff f974 	bl	80011ac <HAL_PWREx_GetVoltageRange>
 8001ec4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ec6:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	4a1d      	ldr	r2, [pc, #116]	; (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ed8:	d10b      	bne.n	8001ef2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b80      	cmp	r3, #128	; 0x80
 8001ede:	d919      	bls.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2ba0      	cmp	r3, #160	; 0xa0
 8001ee4:	d902      	bls.n	8001eec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	e013      	b.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eec:	2301      	movs	r3, #1
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	e010      	b.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b80      	cmp	r3, #128	; 0x80
 8001ef6:	d902      	bls.n	8001efe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ef8:	2303      	movs	r3, #3
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	e00a      	b.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b80      	cmp	r3, #128	; 0x80
 8001f02:	d102      	bne.n	8001f0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f04:	2302      	movs	r3, #2
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	e004      	b.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b70      	cmp	r3, #112	; 0x70
 8001f0e:	d101      	bne.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f10:	2301      	movs	r3, #1
 8001f12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 0207 	bic.w	r2, r3, #7
 8001f1c:	4909      	ldr	r1, [pc, #36]	; (8001f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f24:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d001      	beq.n	8001f36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40022000 	.word	0x40022000

08001f48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f50:	2300      	movs	r3, #0
 8001f52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f54:	2300      	movs	r3, #0
 8001f56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 809e 	beq.w	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f66:	2300      	movs	r3, #0
 8001f68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f6a:	4b46      	ldr	r3, [pc, #280]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00d      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f80:	4b40      	ldr	r3, [pc, #256]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	4a3f      	ldr	r2, [pc, #252]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f8c:	4b3d      	ldr	r3, [pc, #244]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f9c:	4b3a      	ldr	r3, [pc, #232]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a39      	ldr	r2, [pc, #228]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fa8:	f7fe fe4e 	bl	8000c48 <HAL_GetTick>
 8001fac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fae:	e009      	b.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb0:	f7fe fe4a 	bl	8000c48 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d902      	bls.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	74fb      	strb	r3, [r7, #19]
        break;
 8001fc2:	e005      	b.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fc4:	4b30      	ldr	r3, [pc, #192]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0ef      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8001fd0:	7cfb      	ldrb	r3, [r7, #19]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d15a      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fd6:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d01e      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d019      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ff2:	4b24      	ldr	r3, [pc, #144]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ffc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ffe:	4b21      	ldr	r3, [pc, #132]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002004:	4a1f      	ldr	r2, [pc, #124]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800200e:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002014:	4a1b      	ldr	r2, [pc, #108]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800201e:	4a19      	ldr	r2, [pc, #100]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	d016      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002030:	f7fe fe0a 	bl	8000c48 <HAL_GetTick>
 8002034:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002036:	e00b      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002038:	f7fe fe06 	bl	8000c48 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	; 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d902      	bls.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	74fb      	strb	r3, [r7, #19]
            break;
 800204e:	e006      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0ec      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800205e:	7cfb      	ldrb	r3, [r7, #19]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10b      	bne.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002064:	4b07      	ldr	r3, [pc, #28]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4904      	ldr	r1, [pc, #16]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800207a:	e009      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800207c:	7cfb      	ldrb	r3, [r7, #19]
 800207e:	74bb      	strb	r3, [r7, #18]
 8002080:	e006      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800208c:	7cfb      	ldrb	r3, [r7, #19]
 800208e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002090:	7c7b      	ldrb	r3, [r7, #17]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d105      	bne.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002096:	4b6e      	ldr	r3, [pc, #440]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	4a6d      	ldr	r2, [pc, #436]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800209c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020ae:	4b68      	ldr	r3, [pc, #416]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b4:	f023 0203 	bic.w	r2, r3, #3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4964      	ldr	r1, [pc, #400]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00a      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020d0:	4b5f      	ldr	r3, [pc, #380]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d6:	f023 020c 	bic.w	r2, r3, #12
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	495c      	ldr	r1, [pc, #368]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00a      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020f2:	4b57      	ldr	r3, [pc, #348]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4953      	ldr	r1, [pc, #332]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0320 	and.w	r3, r3, #32
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00a      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002114:	4b4e      	ldr	r3, [pc, #312]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	494b      	ldr	r1, [pc, #300]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002136:	4b46      	ldr	r3, [pc, #280]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	4942      	ldr	r1, [pc, #264]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00a      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002158:	4b3d      	ldr	r3, [pc, #244]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	493a      	ldr	r1, [pc, #232]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800217a:	4b35      	ldr	r3, [pc, #212]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800217c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002180:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	4931      	ldr	r1, [pc, #196]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800219c:	4b2c      	ldr	r3, [pc, #176]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	4929      	ldr	r1, [pc, #164]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021be:	4b24      	ldr	r3, [pc, #144]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	4920      	ldr	r1, [pc, #128]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d015      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ee:	4918      	ldr	r1, [pc, #96]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021fe:	d105      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002200:	4b13      	ldr	r3, [pc, #76]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4a12      	ldr	r2, [pc, #72]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002206:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800220a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d015      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002218:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002226:	490a      	ldr	r1, [pc, #40]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002232:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002236:	d105      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4a04      	ldr	r2, [pc, #16]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800223e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002242:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002244:	7cbb      	ldrb	r3, [r7, #18]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000

08002254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e049      	b.n	80022fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d106      	bne.n	8002280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7fe faea 	bl	8000854 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3304      	adds	r3, #4
 8002290:	4619      	mov	r1, r3
 8002292:	4610      	mov	r0, r2
 8002294:	f000 fbb2 	bl	80029fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e049      	b.n	80023a8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d106      	bne.n	800232e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f841 	bl	80023b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2202      	movs	r2, #2
 8002332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3304      	adds	r3, #4
 800233e:	4619      	mov	r1, r3
 8002340:	4610      	mov	r0, r2
 8002342:	f000 fb5b 	bl	80029fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d122      	bne.n	8002420 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d11b      	bne.n	8002420 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0202 	mvn.w	r2, #2
 80023f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fad9 	bl	80029be <HAL_TIM_IC_CaptureCallback>
 800240c:	e005      	b.n	800241a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 facb 	bl	80029aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 fadc 	bl	80029d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	2b04      	cmp	r3, #4
 800242c:	d122      	bne.n	8002474 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b04      	cmp	r3, #4
 800243a:	d11b      	bne.n	8002474 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0204 	mvn.w	r2, #4
 8002444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2202      	movs	r2, #2
 800244a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 faaf 	bl	80029be <HAL_TIM_IC_CaptureCallback>
 8002460:	e005      	b.n	800246e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 faa1 	bl	80029aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 fab2 	bl	80029d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b08      	cmp	r3, #8
 8002480:	d122      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b08      	cmp	r3, #8
 800248e:	d11b      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0208 	mvn.w	r2, #8
 8002498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2204      	movs	r2, #4
 800249e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fa85 	bl	80029be <HAL_TIM_IC_CaptureCallback>
 80024b4:	e005      	b.n	80024c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fa77 	bl	80029aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 fa88 	bl	80029d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	2b10      	cmp	r3, #16
 80024d4:	d122      	bne.n	800251c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0310 	and.w	r3, r3, #16
 80024e0:	2b10      	cmp	r3, #16
 80024e2:	d11b      	bne.n	800251c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0210 	mvn.w	r2, #16
 80024ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2208      	movs	r2, #8
 80024f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 fa5b 	bl	80029be <HAL_TIM_IC_CaptureCallback>
 8002508:	e005      	b.n	8002516 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 fa4d 	bl	80029aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 fa5e 	bl	80029d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b01      	cmp	r3, #1
 8002528:	d10e      	bne.n	8002548 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b01      	cmp	r3, #1
 8002536:	d107      	bne.n	8002548 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0201 	mvn.w	r2, #1
 8002540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fa27 	bl	8002996 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002552:	2b80      	cmp	r3, #128	; 0x80
 8002554:	d10e      	bne.n	8002574 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002560:	2b80      	cmp	r3, #128	; 0x80
 8002562:	d107      	bne.n	8002574 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800256c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 ff46 	bl	8003400 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002582:	d10e      	bne.n	80025a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258e:	2b80      	cmp	r3, #128	; 0x80
 8002590:	d107      	bne.n	80025a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800259a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 ff39 	bl	8003414 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ac:	2b40      	cmp	r3, #64	; 0x40
 80025ae:	d10e      	bne.n	80025ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ba:	2b40      	cmp	r3, #64	; 0x40
 80025bc:	d107      	bne.n	80025ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 fa0c 	bl	80029e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	2b20      	cmp	r3, #32
 80025da:	d10e      	bne.n	80025fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f003 0320 	and.w	r3, r3, #32
 80025e6:	2b20      	cmp	r3, #32
 80025e8:	d107      	bne.n	80025fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f06f 0220 	mvn.w	r2, #32
 80025f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 fef9 	bl	80033ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800261a:	2302      	movs	r3, #2
 800261c:	e0fd      	b.n	800281a <HAL_TIM_PWM_ConfigChannel+0x216>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b14      	cmp	r3, #20
 800262a:	f200 80f0 	bhi.w	800280e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800262e:	a201      	add	r2, pc, #4	; (adr r2, 8002634 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002634:	08002689 	.word	0x08002689
 8002638:	0800280f 	.word	0x0800280f
 800263c:	0800280f 	.word	0x0800280f
 8002640:	0800280f 	.word	0x0800280f
 8002644:	080026c9 	.word	0x080026c9
 8002648:	0800280f 	.word	0x0800280f
 800264c:	0800280f 	.word	0x0800280f
 8002650:	0800280f 	.word	0x0800280f
 8002654:	0800270b 	.word	0x0800270b
 8002658:	0800280f 	.word	0x0800280f
 800265c:	0800280f 	.word	0x0800280f
 8002660:	0800280f 	.word	0x0800280f
 8002664:	0800274b 	.word	0x0800274b
 8002668:	0800280f 	.word	0x0800280f
 800266c:	0800280f 	.word	0x0800280f
 8002670:	0800280f 	.word	0x0800280f
 8002674:	0800278d 	.word	0x0800278d
 8002678:	0800280f 	.word	0x0800280f
 800267c:	0800280f 	.word	0x0800280f
 8002680:	0800280f 	.word	0x0800280f
 8002684:	080027cd 	.word	0x080027cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fa18 	bl	8002ac4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0208 	orr.w	r2, r2, #8
 80026a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699a      	ldr	r2, [r3, #24]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0204 	bic.w	r2, r2, #4
 80026b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6999      	ldr	r1, [r3, #24]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	619a      	str	r2, [r3, #24]
      break;
 80026c6:	e0a3      	b.n	8002810 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fa74 	bl	8002bbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	699a      	ldr	r2, [r3, #24]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6999      	ldr	r1, [r3, #24]
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	021a      	lsls	r2, r3, #8
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	619a      	str	r2, [r3, #24]
      break;
 8002708:	e082      	b.n	8002810 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	4618      	mov	r0, r3
 8002712:	f000 facd 	bl	8002cb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	69da      	ldr	r2, [r3, #28]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 0208 	orr.w	r2, r2, #8
 8002724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	69da      	ldr	r2, [r3, #28]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0204 	bic.w	r2, r2, #4
 8002734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	69d9      	ldr	r1, [r3, #28]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	61da      	str	r2, [r3, #28]
      break;
 8002748:	e062      	b.n	8002810 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68b9      	ldr	r1, [r7, #8]
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fb25 	bl	8002da0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69da      	ldr	r2, [r3, #28]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69da      	ldr	r2, [r3, #28]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	69d9      	ldr	r1, [r3, #28]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	021a      	lsls	r2, r3, #8
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	61da      	str	r2, [r3, #28]
      break;
 800278a:	e041      	b.n	8002810 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	4618      	mov	r0, r3
 8002794:	f000 fb62 	bl	8002e5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0208 	orr.w	r2, r2, #8
 80027a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0204 	bic.w	r2, r2, #4
 80027b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80027ca:	e021      	b.n	8002810 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 fb9a 	bl	8002f0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	021a      	lsls	r2, r3, #8
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800280c:	e000      	b.n	8002810 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800280e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop

08002824 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_TIM_ConfigClockSource+0x18>
 8002838:	2302      	movs	r3, #2
 800283a:	e0a8      	b.n	800298e <HAL_TIM_ConfigClockSource+0x16a>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800285e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002866:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b40      	cmp	r3, #64	; 0x40
 8002876:	d067      	beq.n	8002948 <HAL_TIM_ConfigClockSource+0x124>
 8002878:	2b40      	cmp	r3, #64	; 0x40
 800287a:	d80b      	bhi.n	8002894 <HAL_TIM_ConfigClockSource+0x70>
 800287c:	2b10      	cmp	r3, #16
 800287e:	d073      	beq.n	8002968 <HAL_TIM_ConfigClockSource+0x144>
 8002880:	2b10      	cmp	r3, #16
 8002882:	d802      	bhi.n	800288a <HAL_TIM_ConfigClockSource+0x66>
 8002884:	2b00      	cmp	r3, #0
 8002886:	d06f      	beq.n	8002968 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002888:	e078      	b.n	800297c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800288a:	2b20      	cmp	r3, #32
 800288c:	d06c      	beq.n	8002968 <HAL_TIM_ConfigClockSource+0x144>
 800288e:	2b30      	cmp	r3, #48	; 0x30
 8002890:	d06a      	beq.n	8002968 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002892:	e073      	b.n	800297c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002894:	2b70      	cmp	r3, #112	; 0x70
 8002896:	d00d      	beq.n	80028b4 <HAL_TIM_ConfigClockSource+0x90>
 8002898:	2b70      	cmp	r3, #112	; 0x70
 800289a:	d804      	bhi.n	80028a6 <HAL_TIM_ConfigClockSource+0x82>
 800289c:	2b50      	cmp	r3, #80	; 0x50
 800289e:	d033      	beq.n	8002908 <HAL_TIM_ConfigClockSource+0xe4>
 80028a0:	2b60      	cmp	r3, #96	; 0x60
 80028a2:	d041      	beq.n	8002928 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80028a4:	e06a      	b.n	800297c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80028a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028aa:	d066      	beq.n	800297a <HAL_TIM_ConfigClockSource+0x156>
 80028ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028b0:	d017      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80028b2:	e063      	b.n	800297c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6818      	ldr	r0, [r3, #0]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6899      	ldr	r1, [r3, #8]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f000 fbf6 	bl	80030b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	609a      	str	r2, [r3, #8]
      break;
 80028e0:	e04c      	b.n	800297c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6899      	ldr	r1, [r3, #8]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f000 fbdf 	bl	80030b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002904:	609a      	str	r2, [r3, #8]
      break;
 8002906:	e039      	b.n	800297c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6859      	ldr	r1, [r3, #4]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	461a      	mov	r2, r3
 8002916:	f000 fb53 	bl	8002fc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2150      	movs	r1, #80	; 0x50
 8002920:	4618      	mov	r0, r3
 8002922:	f000 fbac 	bl	800307e <TIM_ITRx_SetConfig>
      break;
 8002926:	e029      	b.n	800297c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	6859      	ldr	r1, [r3, #4]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	461a      	mov	r2, r3
 8002936:	f000 fb72 	bl	800301e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2160      	movs	r1, #96	; 0x60
 8002940:	4618      	mov	r0, r3
 8002942:	f000 fb9c 	bl	800307e <TIM_ITRx_SetConfig>
      break;
 8002946:	e019      	b.n	800297c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	461a      	mov	r2, r3
 8002956:	f000 fb33 	bl	8002fc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2140      	movs	r1, #64	; 0x40
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fb8c 	bl	800307e <TIM_ITRx_SetConfig>
      break;
 8002966:	e009      	b.n	800297c <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4619      	mov	r1, r3
 8002972:	4610      	mov	r0, r2
 8002974:	f000 fb83 	bl	800307e <TIM_ITRx_SetConfig>
        break;
 8002978:	e000      	b.n	800297c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800297a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a2a      	ldr	r2, [pc, #168]	; (8002ab8 <TIM_Base_SetConfig+0xbc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d003      	beq.n	8002a1c <TIM_Base_SetConfig+0x20>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1a:	d108      	bne.n	8002a2e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a21      	ldr	r2, [pc, #132]	; (8002ab8 <TIM_Base_SetConfig+0xbc>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00b      	beq.n	8002a4e <TIM_Base_SetConfig+0x52>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3c:	d007      	beq.n	8002a4e <TIM_Base_SetConfig+0x52>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a1e      	ldr	r2, [pc, #120]	; (8002abc <TIM_Base_SetConfig+0xc0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d003      	beq.n	8002a4e <TIM_Base_SetConfig+0x52>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a1d      	ldr	r2, [pc, #116]	; (8002ac0 <TIM_Base_SetConfig+0xc4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d108      	bne.n	8002a60 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a0c      	ldr	r2, [pc, #48]	; (8002ab8 <TIM_Base_SetConfig+0xbc>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d007      	beq.n	8002a9c <TIM_Base_SetConfig+0xa0>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a0b      	ldr	r2, [pc, #44]	; (8002abc <TIM_Base_SetConfig+0xc0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d003      	beq.n	8002a9c <TIM_Base_SetConfig+0xa0>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a0a      	ldr	r2, [pc, #40]	; (8002ac0 <TIM_Base_SetConfig+0xc4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d103      	bne.n	8002aa4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	615a      	str	r2, [r3, #20]
}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40012c00 	.word	0x40012c00
 8002abc:	40014000 	.word	0x40014000
 8002ac0:	40014400 	.word	0x40014400

08002ac4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	f023 0201 	bic.w	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f023 0303 	bic.w	r3, r3, #3
 8002afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f023 0302 	bic.w	r3, r3, #2
 8002b10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a24      	ldr	r2, [pc, #144]	; (8002bb0 <TIM_OC1_SetConfig+0xec>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d007      	beq.n	8002b34 <TIM_OC1_SetConfig+0x70>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a23      	ldr	r2, [pc, #140]	; (8002bb4 <TIM_OC1_SetConfig+0xf0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d003      	beq.n	8002b34 <TIM_OC1_SetConfig+0x70>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a22      	ldr	r2, [pc, #136]	; (8002bb8 <TIM_OC1_SetConfig+0xf4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d10c      	bne.n	8002b4e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f023 0308 	bic.w	r3, r3, #8
 8002b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f023 0304 	bic.w	r3, r3, #4
 8002b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a17      	ldr	r2, [pc, #92]	; (8002bb0 <TIM_OC1_SetConfig+0xec>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d007      	beq.n	8002b66 <TIM_OC1_SetConfig+0xa2>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a16      	ldr	r2, [pc, #88]	; (8002bb4 <TIM_OC1_SetConfig+0xf0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d003      	beq.n	8002b66 <TIM_OC1_SetConfig+0xa2>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a15      	ldr	r2, [pc, #84]	; (8002bb8 <TIM_OC1_SetConfig+0xf4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d111      	bne.n	8002b8a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	621a      	str	r2, [r3, #32]
}
 8002ba4:	bf00      	nop
 8002ba6:	371c      	adds	r7, #28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	40012c00 	.word	0x40012c00
 8002bb4:	40014000 	.word	0x40014000
 8002bb8:	40014400 	.word	0x40014400

08002bbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	f023 0210 	bic.w	r2, r3, #16
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	021b      	lsls	r3, r3, #8
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f023 0320 	bic.w	r3, r3, #32
 8002c0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a22      	ldr	r2, [pc, #136]	; (8002ca4 <TIM_OC2_SetConfig+0xe8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d10d      	bne.n	8002c3c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a19      	ldr	r2, [pc, #100]	; (8002ca4 <TIM_OC2_SetConfig+0xe8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d007      	beq.n	8002c54 <TIM_OC2_SetConfig+0x98>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a18      	ldr	r2, [pc, #96]	; (8002ca8 <TIM_OC2_SetConfig+0xec>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d003      	beq.n	8002c54 <TIM_OC2_SetConfig+0x98>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a17      	ldr	r2, [pc, #92]	; (8002cac <TIM_OC2_SetConfig+0xf0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d113      	bne.n	8002c7c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	621a      	str	r2, [r3, #32]
}
 8002c96:	bf00      	nop
 8002c98:	371c      	adds	r7, #28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40012c00 	.word	0x40012c00
 8002ca8:	40014000 	.word	0x40014000
 8002cac:	40014400 	.word	0x40014400

08002cb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 0303 	bic.w	r3, r3, #3
 8002cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	021b      	lsls	r3, r3, #8
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a21      	ldr	r2, [pc, #132]	; (8002d94 <TIM_OC3_SetConfig+0xe4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d10d      	bne.n	8002d2e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	021b      	lsls	r3, r3, #8
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a18      	ldr	r2, [pc, #96]	; (8002d94 <TIM_OC3_SetConfig+0xe4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d007      	beq.n	8002d46 <TIM_OC3_SetConfig+0x96>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a17      	ldr	r2, [pc, #92]	; (8002d98 <TIM_OC3_SetConfig+0xe8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d003      	beq.n	8002d46 <TIM_OC3_SetConfig+0x96>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a16      	ldr	r2, [pc, #88]	; (8002d9c <TIM_OC3_SetConfig+0xec>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d113      	bne.n	8002d6e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	621a      	str	r2, [r3, #32]
}
 8002d88:	bf00      	nop
 8002d8a:	371c      	adds	r7, #28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	40012c00 	.word	0x40012c00
 8002d98:	40014000 	.word	0x40014000
 8002d9c:	40014400 	.word	0x40014400

08002da0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	031b      	lsls	r3, r3, #12
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a14      	ldr	r2, [pc, #80]	; (8002e50 <TIM_OC4_SetConfig+0xb0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d007      	beq.n	8002e14 <TIM_OC4_SetConfig+0x74>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a13      	ldr	r2, [pc, #76]	; (8002e54 <TIM_OC4_SetConfig+0xb4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d003      	beq.n	8002e14 <TIM_OC4_SetConfig+0x74>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a12      	ldr	r2, [pc, #72]	; (8002e58 <TIM_OC4_SetConfig+0xb8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d109      	bne.n	8002e28 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	019b      	lsls	r3, r3, #6
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	621a      	str	r2, [r3, #32]
}
 8002e42:	bf00      	nop
 8002e44:	371c      	adds	r7, #28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40012c00 	.word	0x40012c00
 8002e54:	40014000 	.word	0x40014000
 8002e58:	40014400 	.word	0x40014400

08002e5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002ea0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	041b      	lsls	r3, r3, #16
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a13      	ldr	r2, [pc, #76]	; (8002f00 <TIM_OC5_SetConfig+0xa4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d007      	beq.n	8002ec6 <TIM_OC5_SetConfig+0x6a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a12      	ldr	r2, [pc, #72]	; (8002f04 <TIM_OC5_SetConfig+0xa8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d003      	beq.n	8002ec6 <TIM_OC5_SetConfig+0x6a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a11      	ldr	r2, [pc, #68]	; (8002f08 <TIM_OC5_SetConfig+0xac>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d109      	bne.n	8002eda <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ecc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	021b      	lsls	r3, r3, #8
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	621a      	str	r2, [r3, #32]
}
 8002ef4:	bf00      	nop
 8002ef6:	371c      	adds	r7, #28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	40012c00 	.word	0x40012c00
 8002f04:	40014000 	.word	0x40014000
 8002f08:	40014400 	.word	0x40014400

08002f0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	021b      	lsls	r3, r3, #8
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	051b      	lsls	r3, r3, #20
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a14      	ldr	r2, [pc, #80]	; (8002fb4 <TIM_OC6_SetConfig+0xa8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d007      	beq.n	8002f78 <TIM_OC6_SetConfig+0x6c>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a13      	ldr	r2, [pc, #76]	; (8002fb8 <TIM_OC6_SetConfig+0xac>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d003      	beq.n	8002f78 <TIM_OC6_SetConfig+0x6c>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a12      	ldr	r2, [pc, #72]	; (8002fbc <TIM_OC6_SetConfig+0xb0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d109      	bne.n	8002f8c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	029b      	lsls	r3, r3, #10
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	621a      	str	r2, [r3, #32]
}
 8002fa6:	bf00      	nop
 8002fa8:	371c      	adds	r7, #28
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40012c00 	.word	0x40012c00
 8002fb8:	40014000 	.word	0x40014000
 8002fbc:	40014400 	.word	0x40014400

08002fc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	f023 0201 	bic.w	r2, r3, #1
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f023 030a 	bic.w	r3, r3, #10
 8002ffc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	4313      	orrs	r3, r2
 8003004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	621a      	str	r2, [r3, #32]
}
 8003012:	bf00      	nop
 8003014:	371c      	adds	r7, #28
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800301e:	b480      	push	{r7}
 8003020:	b087      	sub	sp, #28
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	f023 0210 	bic.w	r2, r3, #16
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003048:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	031b      	lsls	r3, r3, #12
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	4313      	orrs	r3, r2
 8003052:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800305a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	621a      	str	r2, [r3, #32]
}
 8003072:	bf00      	nop
 8003074:	371c      	adds	r7, #28
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800307e:	b480      	push	{r7}
 8003080:	b085      	sub	sp, #20
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003094:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4313      	orrs	r3, r2
 800309c:	f043 0307 	orr.w	r3, r3, #7
 80030a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	609a      	str	r2, [r3, #8]
}
 80030a8:	bf00      	nop
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	021a      	lsls	r2, r3, #8
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4313      	orrs	r3, r2
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	4313      	orrs	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	609a      	str	r2, [r3, #8]
}
 80030e8:	bf00      	nop
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d109      	bne.n	8003118 <HAL_TIMEx_PWMN_Start+0x24>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b01      	cmp	r3, #1
 800310e:	bf14      	ite	ne
 8003110:	2301      	movne	r3, #1
 8003112:	2300      	moveq	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	e022      	b.n	800315e <HAL_TIMEx_PWMN_Start+0x6a>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2b04      	cmp	r3, #4
 800311c:	d109      	bne.n	8003132 <HAL_TIMEx_PWMN_Start+0x3e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b01      	cmp	r3, #1
 8003128:	bf14      	ite	ne
 800312a:	2301      	movne	r3, #1
 800312c:	2300      	moveq	r3, #0
 800312e:	b2db      	uxtb	r3, r3
 8003130:	e015      	b.n	800315e <HAL_TIMEx_PWMN_Start+0x6a>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b08      	cmp	r3, #8
 8003136:	d109      	bne.n	800314c <HAL_TIMEx_PWMN_Start+0x58>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	bf14      	ite	ne
 8003144:	2301      	movne	r3, #1
 8003146:	2300      	moveq	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	e008      	b.n	800315e <HAL_TIMEx_PWMN_Start+0x6a>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b01      	cmp	r3, #1
 8003156:	bf14      	ite	ne
 8003158:	2301      	movne	r3, #1
 800315a:	2300      	moveq	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e05a      	b.n	800321c <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d104      	bne.n	8003176 <HAL_TIMEx_PWMN_Start+0x82>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003174:	e013      	b.n	800319e <HAL_TIMEx_PWMN_Start+0xaa>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b04      	cmp	r3, #4
 800317a:	d104      	bne.n	8003186 <HAL_TIMEx_PWMN_Start+0x92>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003184:	e00b      	b.n	800319e <HAL_TIMEx_PWMN_Start+0xaa>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b08      	cmp	r3, #8
 800318a:	d104      	bne.n	8003196 <HAL_TIMEx_PWMN_Start+0xa2>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003194:	e003      	b.n	800319e <HAL_TIMEx_PWMN_Start+0xaa>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2202      	movs	r2, #2
 800319a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2204      	movs	r2, #4
 80031a4:	6839      	ldr	r1, [r7, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 f93e 	bl	8003428 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a18      	ldr	r2, [pc, #96]	; (8003224 <HAL_TIMEx_PWMN_Start+0x130>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d009      	beq.n	80031da <HAL_TIMEx_PWMN_Start+0xe6>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ce:	d004      	beq.n	80031da <HAL_TIMEx_PWMN_Start+0xe6>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a14      	ldr	r2, [pc, #80]	; (8003228 <HAL_TIMEx_PWMN_Start+0x134>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d115      	bne.n	8003206 <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	4b12      	ldr	r3, [pc, #72]	; (800322c <HAL_TIMEx_PWMN_Start+0x138>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b06      	cmp	r3, #6
 80031ea:	d015      	beq.n	8003218 <HAL_TIMEx_PWMN_Start+0x124>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f2:	d011      	beq.n	8003218 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003204:	e008      	b.n	8003218 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f042 0201 	orr.w	r2, r2, #1
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	e000      	b.n	800321a <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003218:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40012c00 	.word	0x40012c00
 8003228:	40014000 	.word	0x40014000
 800322c:	00010007 	.word	0x00010007

08003230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003244:	2302      	movs	r3, #2
 8003246:	e04f      	b.n	80032e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a21      	ldr	r2, [pc, #132]	; (80032f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d108      	bne.n	8003284 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003278:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a14      	ldr	r2, [pc, #80]	; (80032f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d009      	beq.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b0:	d004      	beq.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a10      	ldr	r2, [pc, #64]	; (80032f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d10c      	bne.n	80032d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	40012c00 	.word	0x40012c00
 80032f8:	40014000 	.word	0x40014000

080032fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003314:	2302      	movs	r3, #2
 8003316:	e060      	b.n	80033da <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	4313      	orrs	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	4313      	orrs	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4313      	orrs	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	041b      	lsls	r3, r3, #16
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a14      	ldr	r2, [pc, #80]	; (80033e8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d115      	bne.n	80033c8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	051b      	lsls	r3, r3, #20
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40012c00 	.word	0x40012c00

080033ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f003 031f 	and.w	r3, r3, #31
 800343a:	2204      	movs	r2, #4
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a1a      	ldr	r2, [r3, #32]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	43db      	mvns	r3, r3
 800344a:	401a      	ands	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a1a      	ldr	r2, [r3, #32]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f003 031f 	and.w	r3, r3, #31
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	fa01 f303 	lsl.w	r3, r1, r3
 8003460:	431a      	orrs	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	621a      	str	r2, [r3, #32]
}
 8003466:	bf00      	nop
 8003468:	371c      	adds	r7, #28
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e040      	b.n	8003506 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003488:	2b00      	cmp	r3, #0
 800348a:	d106      	bne.n	800349a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7fd fa9b 	bl	80009d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2224      	movs	r2, #36	; 0x24
 800349e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0201 	bic.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f82d 	bl	8003510 <UART_SetConfig>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e022      	b.n	8003506 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 fa57 	bl	800397c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 0201 	orr.w	r2, r2, #1
 80034fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fade 	bl	8003ac0 <UART_CheckIdleState>
 8003504:	4603      	mov	r3, r0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003510:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003514:	b088      	sub	sp, #32
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	4313      	orrs	r3, r2
 8003534:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	4baa      	ldr	r3, [pc, #680]	; (80037e8 <UART_SetConfig+0x2d8>)
 800353e:	4013      	ands	r3, r2
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	69f9      	ldr	r1, [r7, #28]
 8003546:	430b      	orrs	r3, r1
 8003548:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4aa0      	ldr	r2, [pc, #640]	; (80037ec <UART_SetConfig+0x2dc>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d004      	beq.n	800357a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	69fa      	ldr	r2, [r7, #28]
 8003576:	4313      	orrs	r3, r2
 8003578:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	69fa      	ldr	r2, [r7, #28]
 800358a:	430a      	orrs	r2, r1
 800358c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a97      	ldr	r2, [pc, #604]	; (80037f0 <UART_SetConfig+0x2e0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d121      	bne.n	80035dc <UART_SetConfig+0xcc>
 8003598:	4b96      	ldr	r3, [pc, #600]	; (80037f4 <UART_SetConfig+0x2e4>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d816      	bhi.n	80035d4 <UART_SetConfig+0xc4>
 80035a6:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <UART_SetConfig+0x9c>)
 80035a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ac:	080035bd 	.word	0x080035bd
 80035b0:	080035c9 	.word	0x080035c9
 80035b4:	080035c3 	.word	0x080035c3
 80035b8:	080035cf 	.word	0x080035cf
 80035bc:	2301      	movs	r3, #1
 80035be:	76fb      	strb	r3, [r7, #27]
 80035c0:	e098      	b.n	80036f4 <UART_SetConfig+0x1e4>
 80035c2:	2302      	movs	r3, #2
 80035c4:	76fb      	strb	r3, [r7, #27]
 80035c6:	e095      	b.n	80036f4 <UART_SetConfig+0x1e4>
 80035c8:	2304      	movs	r3, #4
 80035ca:	76fb      	strb	r3, [r7, #27]
 80035cc:	e092      	b.n	80036f4 <UART_SetConfig+0x1e4>
 80035ce:	2308      	movs	r3, #8
 80035d0:	76fb      	strb	r3, [r7, #27]
 80035d2:	e08f      	b.n	80036f4 <UART_SetConfig+0x1e4>
 80035d4:	2310      	movs	r3, #16
 80035d6:	76fb      	strb	r3, [r7, #27]
 80035d8:	bf00      	nop
 80035da:	e08b      	b.n	80036f4 <UART_SetConfig+0x1e4>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a85      	ldr	r2, [pc, #532]	; (80037f8 <UART_SetConfig+0x2e8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d134      	bne.n	8003650 <UART_SetConfig+0x140>
 80035e6:	4b83      	ldr	r3, [pc, #524]	; (80037f4 <UART_SetConfig+0x2e4>)
 80035e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ec:	f003 030c 	and.w	r3, r3, #12
 80035f0:	2b0c      	cmp	r3, #12
 80035f2:	d829      	bhi.n	8003648 <UART_SetConfig+0x138>
 80035f4:	a201      	add	r2, pc, #4	; (adr r2, 80035fc <UART_SetConfig+0xec>)
 80035f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fa:	bf00      	nop
 80035fc:	08003631 	.word	0x08003631
 8003600:	08003649 	.word	0x08003649
 8003604:	08003649 	.word	0x08003649
 8003608:	08003649 	.word	0x08003649
 800360c:	0800363d 	.word	0x0800363d
 8003610:	08003649 	.word	0x08003649
 8003614:	08003649 	.word	0x08003649
 8003618:	08003649 	.word	0x08003649
 800361c:	08003637 	.word	0x08003637
 8003620:	08003649 	.word	0x08003649
 8003624:	08003649 	.word	0x08003649
 8003628:	08003649 	.word	0x08003649
 800362c:	08003643 	.word	0x08003643
 8003630:	2300      	movs	r3, #0
 8003632:	76fb      	strb	r3, [r7, #27]
 8003634:	e05e      	b.n	80036f4 <UART_SetConfig+0x1e4>
 8003636:	2302      	movs	r3, #2
 8003638:	76fb      	strb	r3, [r7, #27]
 800363a:	e05b      	b.n	80036f4 <UART_SetConfig+0x1e4>
 800363c:	2304      	movs	r3, #4
 800363e:	76fb      	strb	r3, [r7, #27]
 8003640:	e058      	b.n	80036f4 <UART_SetConfig+0x1e4>
 8003642:	2308      	movs	r3, #8
 8003644:	76fb      	strb	r3, [r7, #27]
 8003646:	e055      	b.n	80036f4 <UART_SetConfig+0x1e4>
 8003648:	2310      	movs	r3, #16
 800364a:	76fb      	strb	r3, [r7, #27]
 800364c:	bf00      	nop
 800364e:	e051      	b.n	80036f4 <UART_SetConfig+0x1e4>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a69      	ldr	r2, [pc, #420]	; (80037fc <UART_SetConfig+0x2ec>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d120      	bne.n	800369c <UART_SetConfig+0x18c>
 800365a:	4b66      	ldr	r3, [pc, #408]	; (80037f4 <UART_SetConfig+0x2e4>)
 800365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003660:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003664:	2b10      	cmp	r3, #16
 8003666:	d00f      	beq.n	8003688 <UART_SetConfig+0x178>
 8003668:	2b10      	cmp	r3, #16
 800366a:	d802      	bhi.n	8003672 <UART_SetConfig+0x162>
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <UART_SetConfig+0x16c>
 8003670:	e010      	b.n	8003694 <UART_SetConfig+0x184>
 8003672:	2b20      	cmp	r3, #32
 8003674:	d005      	beq.n	8003682 <UART_SetConfig+0x172>
 8003676:	2b30      	cmp	r3, #48	; 0x30
 8003678:	d009      	beq.n	800368e <UART_SetConfig+0x17e>
 800367a:	e00b      	b.n	8003694 <UART_SetConfig+0x184>
 800367c:	2300      	movs	r3, #0
 800367e:	76fb      	strb	r3, [r7, #27]
 8003680:	e038      	b.n	80036f4 <UART_SetConfig+0x1e4>
 8003682:	2302      	movs	r3, #2
 8003684:	76fb      	strb	r3, [r7, #27]
 8003686:	e035      	b.n	80036f4 <UART_SetConfig+0x1e4>
 8003688:	2304      	movs	r3, #4
 800368a:	76fb      	strb	r3, [r7, #27]
 800368c:	e032      	b.n	80036f4 <UART_SetConfig+0x1e4>
 800368e:	2308      	movs	r3, #8
 8003690:	76fb      	strb	r3, [r7, #27]
 8003692:	e02f      	b.n	80036f4 <UART_SetConfig+0x1e4>
 8003694:	2310      	movs	r3, #16
 8003696:	76fb      	strb	r3, [r7, #27]
 8003698:	bf00      	nop
 800369a:	e02b      	b.n	80036f4 <UART_SetConfig+0x1e4>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a52      	ldr	r2, [pc, #328]	; (80037ec <UART_SetConfig+0x2dc>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d124      	bne.n	80036f0 <UART_SetConfig+0x1e0>
 80036a6:	4b53      	ldr	r3, [pc, #332]	; (80037f4 <UART_SetConfig+0x2e4>)
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b4:	d012      	beq.n	80036dc <UART_SetConfig+0x1cc>
 80036b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ba:	d802      	bhi.n	80036c2 <UART_SetConfig+0x1b2>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d007      	beq.n	80036d0 <UART_SetConfig+0x1c0>
 80036c0:	e012      	b.n	80036e8 <UART_SetConfig+0x1d8>
 80036c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c6:	d006      	beq.n	80036d6 <UART_SetConfig+0x1c6>
 80036c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036cc:	d009      	beq.n	80036e2 <UART_SetConfig+0x1d2>
 80036ce:	e00b      	b.n	80036e8 <UART_SetConfig+0x1d8>
 80036d0:	2300      	movs	r3, #0
 80036d2:	76fb      	strb	r3, [r7, #27]
 80036d4:	e00e      	b.n	80036f4 <UART_SetConfig+0x1e4>
 80036d6:	2302      	movs	r3, #2
 80036d8:	76fb      	strb	r3, [r7, #27]
 80036da:	e00b      	b.n	80036f4 <UART_SetConfig+0x1e4>
 80036dc:	2304      	movs	r3, #4
 80036de:	76fb      	strb	r3, [r7, #27]
 80036e0:	e008      	b.n	80036f4 <UART_SetConfig+0x1e4>
 80036e2:	2308      	movs	r3, #8
 80036e4:	76fb      	strb	r3, [r7, #27]
 80036e6:	e005      	b.n	80036f4 <UART_SetConfig+0x1e4>
 80036e8:	2310      	movs	r3, #16
 80036ea:	76fb      	strb	r3, [r7, #27]
 80036ec:	bf00      	nop
 80036ee:	e001      	b.n	80036f4 <UART_SetConfig+0x1e4>
 80036f0:	2310      	movs	r3, #16
 80036f2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a3c      	ldr	r2, [pc, #240]	; (80037ec <UART_SetConfig+0x2dc>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	f040 8082 	bne.w	8003804 <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003700:	7efb      	ldrb	r3, [r7, #27]
 8003702:	2b08      	cmp	r3, #8
 8003704:	d823      	bhi.n	800374e <UART_SetConfig+0x23e>
 8003706:	a201      	add	r2, pc, #4	; (adr r2, 800370c <UART_SetConfig+0x1fc>)
 8003708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370c:	08003731 	.word	0x08003731
 8003710:	0800374f 	.word	0x0800374f
 8003714:	08003739 	.word	0x08003739
 8003718:	0800374f 	.word	0x0800374f
 800371c:	0800373f 	.word	0x0800373f
 8003720:	0800374f 	.word	0x0800374f
 8003724:	0800374f 	.word	0x0800374f
 8003728:	0800374f 	.word	0x0800374f
 800372c:	08003747 	.word	0x08003747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003730:	f7fe fb7e 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8003734:	6178      	str	r0, [r7, #20]
        break;
 8003736:	e00f      	b.n	8003758 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003738:	4b31      	ldr	r3, [pc, #196]	; (8003800 <UART_SetConfig+0x2f0>)
 800373a:	617b      	str	r3, [r7, #20]
        break;
 800373c:	e00c      	b.n	8003758 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800373e:	f7fe fae1 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 8003742:	6178      	str	r0, [r7, #20]
        break;
 8003744:	e008      	b.n	8003758 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800374a:	617b      	str	r3, [r7, #20]
        break;
 800374c:	e004      	b.n	8003758 <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	76bb      	strb	r3, [r7, #26]
        break;
 8003756:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 8100 	beq.w	8003960 <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	4413      	add	r3, r2
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	429a      	cmp	r2, r3
 800376e:	d305      	bcc.n	800377c <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	429a      	cmp	r2, r3
 800377a:	d902      	bls.n	8003782 <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	76bb      	strb	r3, [r7, #26]
 8003780:	e0ee      	b.n	8003960 <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	4619      	mov	r1, r3
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	f04f 0400 	mov.w	r4, #0
 8003792:	0214      	lsls	r4, r2, #8
 8003794:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003798:	020b      	lsls	r3, r1, #8
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6852      	ldr	r2, [r2, #4]
 800379e:	0852      	lsrs	r2, r2, #1
 80037a0:	4611      	mov	r1, r2
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	eb13 0b01 	adds.w	fp, r3, r1
 80037aa:	eb44 0c02 	adc.w	ip, r4, r2
 80037ae:	4658      	mov	r0, fp
 80037b0:	4661      	mov	r1, ip
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f04f 0400 	mov.w	r4, #0
 80037ba:	461a      	mov	r2, r3
 80037bc:	4623      	mov	r3, r4
 80037be:	f7fc fd05 	bl	80001cc <__aeabi_uldivmod>
 80037c2:	4603      	mov	r3, r0
 80037c4:	460c      	mov	r4, r1
 80037c6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ce:	d308      	bcc.n	80037e2 <UART_SetConfig+0x2d2>
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037d6:	d204      	bcs.n	80037e2 <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	60da      	str	r2, [r3, #12]
 80037e0:	e0be      	b.n	8003960 <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	76bb      	strb	r3, [r7, #26]
 80037e6:	e0bb      	b.n	8003960 <UART_SetConfig+0x450>
 80037e8:	efff69f3 	.word	0xefff69f3
 80037ec:	40008000 	.word	0x40008000
 80037f0:	40013800 	.word	0x40013800
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40004400 	.word	0x40004400
 80037fc:	40004800 	.word	0x40004800
 8003800:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800380c:	d15c      	bne.n	80038c8 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 800380e:	7efb      	ldrb	r3, [r7, #27]
 8003810:	2b08      	cmp	r3, #8
 8003812:	d828      	bhi.n	8003866 <UART_SetConfig+0x356>
 8003814:	a201      	add	r2, pc, #4	; (adr r2, 800381c <UART_SetConfig+0x30c>)
 8003816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381a:	bf00      	nop
 800381c:	08003841 	.word	0x08003841
 8003820:	08003849 	.word	0x08003849
 8003824:	08003851 	.word	0x08003851
 8003828:	08003867 	.word	0x08003867
 800382c:	08003857 	.word	0x08003857
 8003830:	08003867 	.word	0x08003867
 8003834:	08003867 	.word	0x08003867
 8003838:	08003867 	.word	0x08003867
 800383c:	0800385f 	.word	0x0800385f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003840:	f7fe faf6 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8003844:	6178      	str	r0, [r7, #20]
        break;
 8003846:	e013      	b.n	8003870 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003848:	f7fe fb08 	bl	8001e5c <HAL_RCC_GetPCLK2Freq>
 800384c:	6178      	str	r0, [r7, #20]
        break;
 800384e:	e00f      	b.n	8003870 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003850:	4b49      	ldr	r3, [pc, #292]	; (8003978 <UART_SetConfig+0x468>)
 8003852:	617b      	str	r3, [r7, #20]
        break;
 8003854:	e00c      	b.n	8003870 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003856:	f7fe fa55 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 800385a:	6178      	str	r0, [r7, #20]
        break;
 800385c:	e008      	b.n	8003870 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800385e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003862:	617b      	str	r3, [r7, #20]
        break;
 8003864:	e004      	b.n	8003870 <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	76bb      	strb	r3, [r7, #26]
        break;
 800386e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d074      	beq.n	8003960 <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	005a      	lsls	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	085b      	lsrs	r3, r3, #1
 8003880:	441a      	add	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	fbb2 f3f3 	udiv	r3, r2, r3
 800388a:	b29b      	uxth	r3, r3
 800388c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	2b0f      	cmp	r3, #15
 8003892:	d916      	bls.n	80038c2 <UART_SetConfig+0x3b2>
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800389a:	d212      	bcs.n	80038c2 <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	f023 030f 	bic.w	r3, r3, #15
 80038a4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	085b      	lsrs	r3, r3, #1
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	89fb      	ldrh	r3, [r7, #14]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	89fa      	ldrh	r2, [r7, #14]
 80038be:	60da      	str	r2, [r3, #12]
 80038c0:	e04e      	b.n	8003960 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	76bb      	strb	r3, [r7, #26]
 80038c6:	e04b      	b.n	8003960 <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038c8:	7efb      	ldrb	r3, [r7, #27]
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d827      	bhi.n	800391e <UART_SetConfig+0x40e>
 80038ce:	a201      	add	r2, pc, #4	; (adr r2, 80038d4 <UART_SetConfig+0x3c4>)
 80038d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d4:	080038f9 	.word	0x080038f9
 80038d8:	08003901 	.word	0x08003901
 80038dc:	08003909 	.word	0x08003909
 80038e0:	0800391f 	.word	0x0800391f
 80038e4:	0800390f 	.word	0x0800390f
 80038e8:	0800391f 	.word	0x0800391f
 80038ec:	0800391f 	.word	0x0800391f
 80038f0:	0800391f 	.word	0x0800391f
 80038f4:	08003917 	.word	0x08003917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038f8:	f7fe fa9a 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 80038fc:	6178      	str	r0, [r7, #20]
        break;
 80038fe:	e013      	b.n	8003928 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003900:	f7fe faac 	bl	8001e5c <HAL_RCC_GetPCLK2Freq>
 8003904:	6178      	str	r0, [r7, #20]
        break;
 8003906:	e00f      	b.n	8003928 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003908:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <UART_SetConfig+0x468>)
 800390a:	617b      	str	r3, [r7, #20]
        break;
 800390c:	e00c      	b.n	8003928 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800390e:	f7fe f9f9 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 8003912:	6178      	str	r0, [r7, #20]
        break;
 8003914:	e008      	b.n	8003928 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800391a:	617b      	str	r3, [r7, #20]
        break;
 800391c:	e004      	b.n	8003928 <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	76bb      	strb	r3, [r7, #26]
        break;
 8003926:	bf00      	nop
    }

    if (pclk != 0U)
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d018      	beq.n	8003960 <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	085a      	lsrs	r2, r3, #1
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	441a      	add	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003940:	b29b      	uxth	r3, r3
 8003942:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	2b0f      	cmp	r3, #15
 8003948:	d908      	bls.n	800395c <UART_SetConfig+0x44c>
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003950:	d204      	bcs.n	800395c <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	e001      	b.n	8003960 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800396c:	7ebb      	ldrb	r3, [r7, #26]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3720      	adds	r7, #32
 8003972:	46bd      	mov	sp, r7
 8003974:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003978:	00f42400 	.word	0x00f42400

0800397c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	f003 0310 	and.w	r3, r3, #16
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d01a      	beq.n	8003a92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a7a:	d10a      	bne.n	8003a92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	605a      	str	r2, [r3, #4]
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003ace:	f7fd f8bb 	bl	8000c48 <HAL_GetTick>
 8003ad2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d10e      	bne.n	8003b00 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ae2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f82a 	bl	8003b4a <UART_WaitOnFlagUntilTimeout>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e020      	b.n	8003b42 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0304 	and.w	r3, r3, #4
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d10e      	bne.n	8003b2c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f814 	bl	8003b4a <UART_WaitOnFlagUntilTimeout>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e00a      	b.n	8003b42 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2220      	movs	r2, #32
 8003b36:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	603b      	str	r3, [r7, #0]
 8003b56:	4613      	mov	r3, r2
 8003b58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b5a:	e05d      	b.n	8003c18 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b62:	d059      	beq.n	8003c18 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b64:	f7fd f870 	bl	8000c48 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d302      	bcc.n	8003b7a <UART_WaitOnFlagUntilTimeout+0x30>
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d11b      	bne.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b88:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0201 	bic.w	r2, r2, #1
 8003b98:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e042      	b.n	8003c38 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d02b      	beq.n	8003c18 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bce:	d123      	bne.n	8003c18 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bd8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003be8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0201 	bic.w	r2, r2, #1
 8003bf8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2220      	movs	r2, #32
 8003c04:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e00f      	b.n	8003c38 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	69da      	ldr	r2, [r3, #28]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	4013      	ands	r3, r2
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	bf0c      	ite	eq
 8003c28:	2301      	moveq	r3, #1
 8003c2a:	2300      	movne	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	461a      	mov	r2, r3
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d092      	beq.n	8003b5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <__libc_init_array>:
 8003c40:	b570      	push	{r4, r5, r6, lr}
 8003c42:	4e0d      	ldr	r6, [pc, #52]	; (8003c78 <__libc_init_array+0x38>)
 8003c44:	4c0d      	ldr	r4, [pc, #52]	; (8003c7c <__libc_init_array+0x3c>)
 8003c46:	1ba4      	subs	r4, r4, r6
 8003c48:	10a4      	asrs	r4, r4, #2
 8003c4a:	2500      	movs	r5, #0
 8003c4c:	42a5      	cmp	r5, r4
 8003c4e:	d109      	bne.n	8003c64 <__libc_init_array+0x24>
 8003c50:	4e0b      	ldr	r6, [pc, #44]	; (8003c80 <__libc_init_array+0x40>)
 8003c52:	4c0c      	ldr	r4, [pc, #48]	; (8003c84 <__libc_init_array+0x44>)
 8003c54:	f000 f820 	bl	8003c98 <_init>
 8003c58:	1ba4      	subs	r4, r4, r6
 8003c5a:	10a4      	asrs	r4, r4, #2
 8003c5c:	2500      	movs	r5, #0
 8003c5e:	42a5      	cmp	r5, r4
 8003c60:	d105      	bne.n	8003c6e <__libc_init_array+0x2e>
 8003c62:	bd70      	pop	{r4, r5, r6, pc}
 8003c64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c68:	4798      	blx	r3
 8003c6a:	3501      	adds	r5, #1
 8003c6c:	e7ee      	b.n	8003c4c <__libc_init_array+0xc>
 8003c6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c72:	4798      	blx	r3
 8003c74:	3501      	adds	r5, #1
 8003c76:	e7f2      	b.n	8003c5e <__libc_init_array+0x1e>
 8003c78:	08003d00 	.word	0x08003d00
 8003c7c:	08003d00 	.word	0x08003d00
 8003c80:	08003d00 	.word	0x08003d00
 8003c84:	08003d04 	.word	0x08003d04

08003c88 <memset>:
 8003c88:	4402      	add	r2, r0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d100      	bne.n	8003c92 <memset+0xa>
 8003c90:	4770      	bx	lr
 8003c92:	f803 1b01 	strb.w	r1, [r3], #1
 8003c96:	e7f9      	b.n	8003c8c <memset+0x4>

08003c98 <_init>:
 8003c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9a:	bf00      	nop
 8003c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c9e:	bc08      	pop	{r3}
 8003ca0:	469e      	mov	lr, r3
 8003ca2:	4770      	bx	lr

08003ca4 <_fini>:
 8003ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca6:	bf00      	nop
 8003ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003caa:	bc08      	pop	{r3}
 8003cac:	469e      	mov	lr, r3
 8003cae:	4770      	bx	lr
