
SPIM_with_nordic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  0800585c  0800585c  0001585c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a84  08005a84  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005a84  08005a84  00015a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a8c  08005a8c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a8c  08005a8c  00015a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a90  08005a90  00015a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000070  08005b04  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08005b04  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109da  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000264e  00000000  00000000  00030a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d40  00000000  00000000  000330c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be8  00000000  00000000  00033e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b81c  00000000  00000000  000349f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c563  00000000  00000000  0005020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a3d64  00000000  00000000  0005c76f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001004d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b14  00000000  00000000  00100550  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005844 	.word	0x08005844

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005844 	.word	0x08005844

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000576:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <MX_DMA_Init+0x48>)
 8000578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800057a:	4a0f      	ldr	r2, [pc, #60]	; (80005b8 <MX_DMA_Init+0x48>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6493      	str	r3, [r2, #72]	; 0x48
 8000582:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <MX_DMA_Init+0x48>)
 8000584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2100      	movs	r1, #0
 8000592:	200c      	movs	r0, #12
 8000594:	f000 ffaf 	bl	80014f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000598:	200c      	movs	r0, #12
 800059a:	f000 ffc8 	bl	800152e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2100      	movs	r1, #0
 80005a2:	200d      	movs	r0, #13
 80005a4:	f000 ffa7 	bl	80014f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80005a8:	200d      	movs	r0, #13
 80005aa:	f000 ffc0 	bl	800152e <HAL_NVIC_EnableIRQ>

}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000

080005bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d2:	4b2b      	ldr	r3, [pc, #172]	; (8000680 <MX_GPIO_Init+0xc4>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	4a2a      	ldr	r2, [pc, #168]	; (8000680 <MX_GPIO_Init+0xc4>)
 80005d8:	f043 0304 	orr.w	r3, r3, #4
 80005dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005de:	4b28      	ldr	r3, [pc, #160]	; (8000680 <MX_GPIO_Init+0xc4>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	f003 0304 	and.w	r3, r3, #4
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	4b25      	ldr	r3, [pc, #148]	; (8000680 <MX_GPIO_Init+0xc4>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	4a24      	ldr	r2, [pc, #144]	; (8000680 <MX_GPIO_Init+0xc4>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f6:	4b22      	ldr	r3, [pc, #136]	; (8000680 <MX_GPIO_Init+0xc4>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000602:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <MX_GPIO_Init+0xc4>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	4a1e      	ldr	r2, [pc, #120]	; (8000680 <MX_GPIO_Init+0xc4>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <MX_GPIO_Init+0xc4>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	2106      	movs	r1, #6
 800061e:	4819      	ldr	r0, [pc, #100]	; (8000684 <MX_GPIO_Init+0xc8>)
 8000620:	f001 fb4a 	bl	8001cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800062a:	4816      	ldr	r0, [pc, #88]	; (8000684 <MX_GPIO_Init+0xc8>)
 800062c:	f001 fb44 	bl	8001cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000630:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000634:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_GPIO_Init+0xcc>)
 8000638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	4619      	mov	r1, r3
 8000644:	4811      	ldr	r0, [pc, #68]	; (800068c <MX_GPIO_Init+0xd0>)
 8000646:	f001 f9c5 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13;
 800064a:	f242 0306 	movw	r3, #8198	; 0x2006
 800064e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000650:	2301      	movs	r3, #1
 8000652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	4619      	mov	r1, r3
 8000662:	4808      	ldr	r0, [pc, #32]	; (8000684 <MX_GPIO_Init+0xc8>)
 8000664:	f001 f9b6 	bl	80019d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2100      	movs	r1, #0
 800066c:	2028      	movs	r0, #40	; 0x28
 800066e:	f000 ff42 	bl	80014f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000672:	2028      	movs	r0, #40	; 0x28
 8000674:	f000 ff5b 	bl	800152e <HAL_NVIC_EnableIRQ>

}
 8000678:	bf00      	nop
 800067a:	3720      	adds	r7, #32
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40021000 	.word	0x40021000
 8000684:	48000400 	.word	0x48000400
 8000688:	10110000 	.word	0x10110000
 800068c:	48000800 	.word	0x48000800

08000690 <__io_putchar>:
#else
    #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000698:	1d39      	adds	r1, r7, #4
 800069a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800069e:	2201      	movs	r2, #1
 80006a0:	4803      	ldr	r0, [pc, #12]	; (80006b0 <__io_putchar+0x20>)
 80006a2:	f003 fb73 	bl	8003d8c <HAL_UART_Transmit>
  return ch;
 80006a6:	687b      	ldr	r3, [r7, #4]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	2000021c 	.word	0x2000021c

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ba:	f000 fdab 	bl	8001214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006be:	f000 f917 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c2:	f7ff ff7b 	bl	80005bc <MX_GPIO_Init>
  MX_DMA_Init();
 80006c6:	f7ff ff53 	bl	8000570 <MX_DMA_Init>
  MX_SPI1_Init();
 80006ca:	f000 fa35 	bl	8000b38 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80006ce:	f000 fcc7 	bl	8001060 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80006d2:	f000 fa6f 	bl	8000bb4 <MX_SPI2_Init>
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("spim init \r\n");
 80006d6:	4873      	ldr	r0, [pc, #460]	; (80008a4 <main+0x1f0>)
 80006d8:	f004 f9e0 	bl	8004a9c <puts>
  for (int i=0;i<20;i++)
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
 80006e0:	e014      	b.n	800070c <main+0x58>
  {
	  tx[i] = i+1;
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	3301      	adds	r3, #1
 80006e8:	b2d9      	uxtb	r1, r3
 80006ea:	4a6f      	ldr	r2, [pc, #444]	; (80008a8 <main+0x1f4>)
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	4413      	add	r3, r2
 80006f0:	460a      	mov	r2, r1
 80006f2:	701a      	strb	r2, [r3, #0]
	  rx[i] = i+11;
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	330b      	adds	r3, #11
 80006fa:	b2d9      	uxtb	r1, r3
 80006fc:	4a6b      	ldr	r2, [pc, #428]	; (80008ac <main+0x1f8>)
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	4413      	add	r3, r2
 8000702:	460a      	mov	r2, r1
 8000704:	701a      	strb	r2, [r3, #0]
  for (int i=0;i<20;i++)
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3301      	adds	r3, #1
 800070a:	61fb      	str	r3, [r7, #28]
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	2b13      	cmp	r3, #19
 8000710:	dde7      	ble.n	80006e2 <main+0x2e>
  }

  uint32_t cnt = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
  printf("==============================init==============================\r\n");
 8000716:	4866      	ldr	r0, [pc, #408]	; (80008b0 <main+0x1fc>)
 8000718:	f004 f9c0 	bl	8004a9c <puts>
	printf("---------------tx----------------- \r\n");
 800071c:	4865      	ldr	r0, [pc, #404]	; (80008b4 <main+0x200>)
 800071e:	f004 f9bd 	bl	8004a9c <puts>
	for (int i=0;i<20;i++)
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
 8000726:	e00a      	b.n	800073e <main+0x8a>
	{
	  printf("%d ", tx[i]);
 8000728:	4a5f      	ldr	r2, [pc, #380]	; (80008a8 <main+0x1f4>)
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	4413      	add	r3, r2
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	4619      	mov	r1, r3
 8000732:	4861      	ldr	r0, [pc, #388]	; (80008b8 <main+0x204>)
 8000734:	f004 f93e 	bl	80049b4 <iprintf>
	for (int i=0;i<20;i++)
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	3301      	adds	r3, #1
 800073c:	617b      	str	r3, [r7, #20]
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	2b13      	cmp	r3, #19
 8000742:	ddf1      	ble.n	8000728 <main+0x74>
	}
	printf("\r\n");
 8000744:	485d      	ldr	r0, [pc, #372]	; (80008bc <main+0x208>)
 8000746:	f004 f9a9 	bl	8004a9c <puts>
	printf("---------------rx----------------- \r\n");
 800074a:	485d      	ldr	r0, [pc, #372]	; (80008c0 <main+0x20c>)
 800074c:	f004 f9a6 	bl	8004a9c <puts>
	for (int i=0;i<20;i++)
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	e00a      	b.n	800076c <main+0xb8>
	{
	  printf("%d ", rx[i]);
 8000756:	4a55      	ldr	r2, [pc, #340]	; (80008ac <main+0x1f8>)
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	4413      	add	r3, r2
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	4619      	mov	r1, r3
 8000760:	4855      	ldr	r0, [pc, #340]	; (80008b8 <main+0x204>)
 8000762:	f004 f927 	bl	80049b4 <iprintf>
	for (int i=0;i<20;i++)
 8000766:	693b      	ldr	r3, [r7, #16]
 8000768:	3301      	adds	r3, #1
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	2b13      	cmp	r3, #19
 8000770:	ddf1      	ble.n	8000756 <main+0xa2>
	}
	printf("\r\n");
 8000772:	4852      	ldr	r0, [pc, #328]	; (80008bc <main+0x208>)
 8000774:	f004 f992 	bl	8004a9c <puts>

	/* unused */
	rx_flag = 0;
 8000778:	4b52      	ldr	r3, [pc, #328]	; (80008c4 <main+0x210>)
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
	uint8_t temp = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	73fb      	strb	r3, [r7, #15]
  while (1)
  {
	if (cnt++ == 3000000)
 8000782:	69bb      	ldr	r3, [r7, #24]
 8000784:	1c5a      	adds	r2, r3, #1
 8000786:	61ba      	str	r2, [r7, #24]
 8000788:	4a4f      	ldr	r2, [pc, #316]	; (80008c8 <main+0x214>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d106      	bne.n	800079c <main+0xe8>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800078e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000792:	484e      	ldr	r0, [pc, #312]	; (80008cc <main+0x218>)
 8000794:	f001 faa8 	bl	8001ce8 <HAL_GPIO_TogglePin>
		cnt = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (cs==1)
 800079c:	4b4c      	ldr	r3, [pc, #304]	; (80008d0 <main+0x21c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d148      	bne.n	8000836 <main+0x182>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2102      	movs	r1, #2
 80007a8:	4848      	ldr	r0, [pc, #288]	; (80008cc <main+0x218>)
 80007aa:	f001 fa85 	bl	8001cb8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80007ae:	2001      	movs	r0, #1
 80007b0:	f000 fda4 	bl	80012fc <HAL_Delay>
		temp++;
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	3301      	adds	r3, #1
 80007b8:	73fb      	strb	r3, [r7, #15]

		if (temp > 3)
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	2b03      	cmp	r3, #3
 80007be:	d915      	bls.n	80007ec <main+0x138>
		{
			if (HAL_SPI_TransmitReceive_DMA(&hspi1, tx, rx, 2) != HAL_OK)
 80007c0:	2302      	movs	r3, #2
 80007c2:	4a3a      	ldr	r2, [pc, #232]	; (80008ac <main+0x1f8>)
 80007c4:	4938      	ldr	r1, [pc, #224]	; (80008a8 <main+0x1f4>)
 80007c6:	4843      	ldr	r0, [pc, #268]	; (80008d4 <main+0x220>)
 80007c8:	f002 fccc 	bl	8003164 <HAL_SPI_TransmitReceive_DMA>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d008      	beq.n	80007e4 <main+0x130>
			{
				printf("trans dma fail \r\n");
 80007d2:	4841      	ldr	r0, [pc, #260]	; (80008d8 <main+0x224>)
 80007d4:	f004 f962 	bl	8004a9c <puts>
				printf("error code : %d \r\n", (int)&hspi1.ErrorCode);
 80007d8:	4b40      	ldr	r3, [pc, #256]	; (80008dc <main+0x228>)
 80007da:	4619      	mov	r1, r3
 80007dc:	4840      	ldr	r0, [pc, #256]	; (80008e0 <main+0x22c>)
 80007de:	f004 f8e9 	bl	80049b4 <iprintf>
 80007e2:	e017      	b.n	8000814 <main+0x160>
			}
			else
			{
				printf("trans dma suc \r\n");
 80007e4:	483f      	ldr	r0, [pc, #252]	; (80008e4 <main+0x230>)
 80007e6:	f004 f959 	bl	8004a9c <puts>
 80007ea:	e013      	b.n	8000814 <main+0x160>

			}
		}
		else
		{
			if (HAL_SPI_Transmit_DMA(&hspi1, tx, 2) != HAL_OK)
 80007ec:	2202      	movs	r2, #2
 80007ee:	492e      	ldr	r1, [pc, #184]	; (80008a8 <main+0x1f4>)
 80007f0:	4838      	ldr	r0, [pc, #224]	; (80008d4 <main+0x220>)
 80007f2:	f002 fbc3 	bl	8002f7c <HAL_SPI_Transmit_DMA>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d008      	beq.n	800080e <main+0x15a>
			{
				printf("trans dma fail \r\n");
 80007fc:	4836      	ldr	r0, [pc, #216]	; (80008d8 <main+0x224>)
 80007fe:	f004 f94d 	bl	8004a9c <puts>
				printf("error code : %d \r\n", (int)&hspi1.ErrorCode);
 8000802:	4b36      	ldr	r3, [pc, #216]	; (80008dc <main+0x228>)
 8000804:	4619      	mov	r1, r3
 8000806:	4836      	ldr	r0, [pc, #216]	; (80008e0 <main+0x22c>)
 8000808:	f004 f8d4 	bl	80049b4 <iprintf>
 800080c:	e002      	b.n	8000814 <main+0x160>
			}
			else
			{
				printf("trans dma suc \r\n");
 800080e:	4835      	ldr	r0, [pc, #212]	; (80008e4 <main+0x230>)
 8000810:	f004 f944 	bl	8004a9c <puts>

			}
		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	2102      	movs	r1, #2
 8000818:	482c      	ldr	r0, [pc, #176]	; (80008cc <main+0x218>)
 800081a:	f001 fa4d 	bl	8001cb8 <HAL_GPIO_WritePin>
		cs = 0;
 800081e:	4b2c      	ldr	r3, [pc, #176]	; (80008d0 <main+0x21c>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
		busy = 1;
 8000824:	4b30      	ldr	r3, [pc, #192]	; (80008e8 <main+0x234>)
 8000826:	2201      	movs	r2, #1
 8000828:	701a      	strb	r2, [r3, #0]
//		while (busy)
//		{
//			HAL_Delay(1);
//		}
		printf("exit \r\n");
 800082a:	4830      	ldr	r0, [pc, #192]	; (80008ec <main+0x238>)
 800082c:	f004 f936 	bl	8004a9c <puts>

		rx_flag=1;
 8000830:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <main+0x210>)
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
	}

	if (rx_flag == 1)
 8000836:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <main+0x210>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d1a1      	bne.n	8000782 <main+0xce>
	{
		rx_flag = 0;
 800083e:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <main+0x210>)
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
		printf("---------------tx----------------- \r\n");
 8000844:	481b      	ldr	r0, [pc, #108]	; (80008b4 <main+0x200>)
 8000846:	f004 f929 	bl	8004a9c <puts>
		for (int i=0;i<20;i++)
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	e00a      	b.n	8000866 <main+0x1b2>
		{
		  printf("%d ", tx[i]);
 8000850:	4a15      	ldr	r2, [pc, #84]	; (80008a8 <main+0x1f4>)
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	4413      	add	r3, r2
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4619      	mov	r1, r3
 800085a:	4817      	ldr	r0, [pc, #92]	; (80008b8 <main+0x204>)
 800085c:	f004 f8aa 	bl	80049b4 <iprintf>
		for (int i=0;i<20;i++)
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	3301      	adds	r3, #1
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	2b13      	cmp	r3, #19
 800086a:	ddf1      	ble.n	8000850 <main+0x19c>
		}
		printf("\r\n");
 800086c:	4813      	ldr	r0, [pc, #76]	; (80008bc <main+0x208>)
 800086e:	f004 f915 	bl	8004a9c <puts>

		printf("---------------rx----------------- \r\n");
 8000872:	4813      	ldr	r0, [pc, #76]	; (80008c0 <main+0x20c>)
 8000874:	f004 f912 	bl	8004a9c <puts>
		for (int i=0;i<20;i++)
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	e00a      	b.n	8000894 <main+0x1e0>
		{
		  printf("%d ", rx[i]);
 800087e:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <main+0x1f8>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4413      	add	r3, r2
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	4619      	mov	r1, r3
 8000888:	480b      	ldr	r0, [pc, #44]	; (80008b8 <main+0x204>)
 800088a:	f004 f893 	bl	80049b4 <iprintf>
		for (int i=0;i<20;i++)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3301      	adds	r3, #1
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b13      	cmp	r3, #19
 8000898:	ddf1      	ble.n	800087e <main+0x1ca>
		}
		printf("\r\n");
 800089a:	4808      	ldr	r0, [pc, #32]	; (80008bc <main+0x208>)
 800089c:	f004 f8fe 	bl	8004a9c <puts>
	if (cnt++ == 3000000)
 80008a0:	e76f      	b.n	8000782 <main+0xce>
 80008a2:	bf00      	nop
 80008a4:	0800585c 	.word	0x0800585c
 80008a8:	2000008c 	.word	0x2000008c
 80008ac:	200000a0 	.word	0x200000a0
 80008b0:	08005868 	.word	0x08005868
 80008b4:	080058ac 	.word	0x080058ac
 80008b8:	080058d4 	.word	0x080058d4
 80008bc:	080058d8 	.word	0x080058d8
 80008c0:	080058dc 	.word	0x080058dc
 80008c4:	200000b6 	.word	0x200000b6
 80008c8:	002dc6c0 	.word	0x002dc6c0
 80008cc:	48000400 	.word	0x48000400
 80008d0:	200000b4 	.word	0x200000b4
 80008d4:	20000128 	.word	0x20000128
 80008d8:	08005904 	.word	0x08005904
 80008dc:	20000188 	.word	0x20000188
 80008e0:	08005918 	.word	0x08005918
 80008e4:	0800592c 	.word	0x0800592c
 80008e8:	200000b5 	.word	0x200000b5
 80008ec:	0800593c 	.word	0x0800593c

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b0a4      	sub	sp, #144	; 0x90
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008fa:	2244      	movs	r2, #68	; 0x44
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f004 f850 	bl	80049a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2234      	movs	r2, #52	; 0x34
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f004 f842 	bl	80049a4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000920:	f001 fa14 	bl	8001d4c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000924:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <SystemClock_Config+0xf0>)
 8000926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800092a:	4a2d      	ldr	r2, [pc, #180]	; (80009e0 <SystemClock_Config+0xf0>)
 800092c:	f023 0318 	bic.w	r3, r3, #24
 8000930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000934:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000938:	f001 fa26 	bl	8001d88 <HAL_PWREx_ControlVoltageScaling>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000942:	f000 f8ef 	bl	8000b24 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000946:	2314      	movs	r3, #20
 8000948:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800094a:	2301      	movs	r3, #1
 800094c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800094e:	2301      	movs	r3, #1
 8000950:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000956:	2360      	movs	r3, #96	; 0x60
 8000958:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095a:	2302      	movs	r3, #2
 800095c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800095e:	2301      	movs	r3, #1
 8000960:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000962:	2301      	movs	r3, #1
 8000964:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000968:	2328      	movs	r3, #40	; 0x28
 800096a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800096e:	2302      	movs	r3, #2
 8000970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000974:	2302      	movs	r3, #2
 8000976:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800097e:	4618      	mov	r0, r3
 8000980:	f001 fa58 	bl	8001e34 <HAL_RCC_OscConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800098a:	f000 f8cb 	bl	8000b24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098e:	230f      	movs	r3, #15
 8000990:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000992:	2303      	movs	r3, #3
 8000994:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009a6:	2104      	movs	r1, #4
 80009a8:	4618      	mov	r0, r3
 80009aa:	f001 fea9 	bl	8002700 <HAL_RCC_ClockConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80009b4:	f000 f8b6 	bl	8000b24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	4618      	mov	r0, r3
 80009c4:	f002 f8a0 	bl	8002b08 <HAL_RCCEx_PeriphCLKConfig>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80009ce:	f000 f8a9 	bl	8000b24 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80009d2:	f002 fa1f 	bl	8002e14 <HAL_RCCEx_EnableMSIPLLMode>
}
 80009d6:	bf00      	nop
 80009d8:	3790      	adds	r7, #144	; 0x90
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40021000 	.word	0x40021000

080009e4 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	cs = 0;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <HAL_SPI_TxRxCpltCallback+0x30>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
	printf("txrx CB \r\n");
 80009f2:	4809      	ldr	r0, [pc, #36]	; (8000a18 <HAL_SPI_TxRxCpltCallback+0x34>)
 80009f4:	f004 f852 	bl	8004a9c <puts>
	busy = 0;
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_SPI_TxRxCpltCallback+0x38>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
	tx_flag = 0;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
	rx_flag = 1;
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <HAL_SPI_TxRxCpltCallback+0x40>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200000b4 	.word	0x200000b4
 8000a18:	08005944 	.word	0x08005944
 8000a1c:	200000b5 	.word	0x200000b5
 8000a20:	200000b7 	.word	0x200000b7
 8000a24:	200000b6 	.word	0x200000b6

08000a28 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	printf("tx CB \r\n");
 8000a30:	4809      	ldr	r0, [pc, #36]	; (8000a58 <HAL_SPI_TxCpltCallback+0x30>)
 8000a32:	f004 f833 	bl	8004a9c <puts>
	cs = 0;
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_SPI_TxCpltCallback+0x34>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
	busy = 0;
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_SPI_TxCpltCallback+0x38>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
	tx_flag = 0;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_SPI_TxCpltCallback+0x3c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
	rx_flag = 1;
 8000a48:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <HAL_SPI_TxCpltCallback+0x40>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	701a      	strb	r2, [r3, #0]
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	08005950 	.word	0x08005950
 8000a5c:	200000b4 	.word	0x200000b4
 8000a60:	200000b5 	.word	0x200000b5
 8000a64:	200000b7 	.word	0x200000b7
 8000a68:	200000b6 	.word	0x200000b6

08000a6c <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	printf("rx CB \r\n");
 8000a74:	4809      	ldr	r0, [pc, #36]	; (8000a9c <HAL_SPI_RxCpltCallback+0x30>)
 8000a76:	f004 f811 	bl	8004a9c <puts>
	cs = 0;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <HAL_SPI_RxCpltCallback+0x34>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
	busy = 0;
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <HAL_SPI_RxCpltCallback+0x38>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
	tx_flag = 0;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_SPI_RxCpltCallback+0x3c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
	rx_flag = 1;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <HAL_SPI_RxCpltCallback+0x40>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	08005958 	.word	0x08005958
 8000aa0:	200000b4 	.word	0x200000b4
 8000aa4:	200000b5 	.word	0x200000b5
 8000aa8:	200000b7 	.word	0x200000b7
 8000aac:	200000b6 	.word	0x200000b6

08000ab0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==GPIO_PIN_13)
 8000aba:	88fb      	ldrh	r3, [r7, #6]
 8000abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ac0:	d108      	bne.n	8000ad4 <HAL_GPIO_EXTI_Callback+0x24>
	{
		printf("button!\r\n");
 8000ac2:	4806      	ldr	r0, [pc, #24]	; (8000adc <HAL_GPIO_EXTI_Callback+0x2c>)
 8000ac4:	f003 ffea 	bl	8004a9c <puts>
		cs = 1;
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_GPIO_EXTI_Callback+0x30>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	701a      	strb	r2, [r3, #0]
		tx_flag = 1;
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_GPIO_EXTI_Callback+0x34>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	701a      	strb	r2, [r3, #0]
	}
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	08005960 	.word	0x08005960
 8000ae0:	200000b4 	.word	0x200000b4
 8000ae4:	200000b7 	.word	0x200000b7

08000ae8 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	HAL_SPI_StateTypeDef state = HAL_SPI_GetState(hspi);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f002 fde1 	bl	80036b8 <HAL_SPI_GetState>
 8000af6:	4603      	mov	r3, r0
 8000af8:	73fb      	strb	r3, [r7, #15]
	uint32_t code = HAL_SPI_GetError(hspi);
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f002 fdea 	bl	80036d4 <HAL_SPI_GetError>
 8000b00:	60b8      	str	r0, [r7, #8]
	printf("spi error \r\n state : %d / error code : %ld \r\n", state, code);
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	68ba      	ldr	r2, [r7, #8]
 8000b06:	4619      	mov	r1, r3
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <HAL_SPI_ErrorCallback+0x34>)
 8000b0a:	f003 ff53 	bl	80049b4 <iprintf>
	busy = 0;
 8000b0e:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <HAL_SPI_ErrorCallback+0x38>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	0800596c 	.word	0x0800596c
 8000b20:	200000b5 	.word	0x200000b5

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  printf("error \r\n");
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <Error_Handler+0x10>)
 8000b2a:	f003 ffb7 	bl	8004a9c <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2e:	b672      	cpsid	i
	__disable_irq();
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <Error_Handler+0xc>
 8000b32:	bf00      	nop
 8000b34:	0800599c 	.word	0x0800599c

08000b38 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b3e:	4a1c      	ldr	r2, [pc, #112]	; (8000bb0 <MX_SPI1_Init+0x78>)
 8000b40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b42:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b52:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b6e:	2228      	movs	r2, #40	; 0x28
 8000b70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b86:	2207      	movs	r2, #7
 8000b88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <MX_SPI1_Init+0x74>)
 8000b98:	f002 f94c 	bl	8002e34 <HAL_SPI_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ba2:	f7ff ffbf 	bl	8000b24 <Error_Handler>
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000128 	.word	0x20000128
 8000bb0:	40013000 	.word	0x40013000

08000bb4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <MX_SPI2_Init+0x74>)
 8000bba:	4a1c      	ldr	r2, [pc, #112]	; (8000c2c <MX_SPI2_Init+0x78>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <MX_SPI2_Init+0x74>)
 8000bc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bc4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <MX_SPI2_Init+0x74>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <MX_SPI2_Init+0x74>)
 8000bce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000bd2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_SPI2_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <MX_SPI2_Init+0x74>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_SPI2_Init+0x74>)
 8000be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_SPI2_Init+0x74>)
 8000bea:	2218      	movs	r2, #24
 8000bec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_SPI2_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_SPI2_Init+0x74>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_SPI2_Init+0x74>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_SPI2_Init+0x74>)
 8000c02:	2207      	movs	r2, #7
 8000c04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_SPI2_Init+0x74>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_SPI2_Init+0x74>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_SPI2_Init+0x74>)
 8000c14:	f002 f90e 	bl	8002e34 <HAL_SPI_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000c1e:	f7ff ff81 	bl	8000b24 <Error_Handler>
  }

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200000c4 	.word	0x200000c4
 8000c2c:	40003800 	.word	0x40003800

08000c30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08c      	sub	sp, #48	; 0x30
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a6a      	ldr	r2, [pc, #424]	; (8000df8 <HAL_SPI_MspInit+0x1c8>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	f040 8084 	bne.w	8000d5c <HAL_SPI_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c54:	4b69      	ldr	r3, [pc, #420]	; (8000dfc <HAL_SPI_MspInit+0x1cc>)
 8000c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c58:	4a68      	ldr	r2, [pc, #416]	; (8000dfc <HAL_SPI_MspInit+0x1cc>)
 8000c5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c5e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c60:	4b66      	ldr	r3, [pc, #408]	; (8000dfc <HAL_SPI_MspInit+0x1cc>)
 8000c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c68:	61bb      	str	r3, [r7, #24]
 8000c6a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6c:	4b63      	ldr	r3, [pc, #396]	; (8000dfc <HAL_SPI_MspInit+0x1cc>)
 8000c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c70:	4a62      	ldr	r2, [pc, #392]	; (8000dfc <HAL_SPI_MspInit+0x1cc>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c78:	4b60      	ldr	r3, [pc, #384]	; (8000dfc <HAL_SPI_MspInit+0x1cc>)
 8000c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000c84:	23c2      	movs	r3, #194	; 0xc2
 8000c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c94:	2305      	movs	r3, #5
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca2:	f000 fe97 	bl	80019d4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000ca6:	4b56      	ldr	r3, [pc, #344]	; (8000e00 <HAL_SPI_MspInit+0x1d0>)
 8000ca8:	4a56      	ldr	r2, [pc, #344]	; (8000e04 <HAL_SPI_MspInit+0x1d4>)
 8000caa:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8000cac:	4b54      	ldr	r3, [pc, #336]	; (8000e00 <HAL_SPI_MspInit+0x1d0>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cb2:	4b53      	ldr	r3, [pc, #332]	; (8000e00 <HAL_SPI_MspInit+0x1d0>)
 8000cb4:	2210      	movs	r2, #16
 8000cb6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cb8:	4b51      	ldr	r3, [pc, #324]	; (8000e00 <HAL_SPI_MspInit+0x1d0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cbe:	4b50      	ldr	r3, [pc, #320]	; (8000e00 <HAL_SPI_MspInit+0x1d0>)
 8000cc0:	2280      	movs	r2, #128	; 0x80
 8000cc2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cc4:	4b4e      	ldr	r3, [pc, #312]	; (8000e00 <HAL_SPI_MspInit+0x1d0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cca:	4b4d      	ldr	r3, [pc, #308]	; (8000e00 <HAL_SPI_MspInit+0x1d0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000cd0:	4b4b      	ldr	r3, [pc, #300]	; (8000e00 <HAL_SPI_MspInit+0x1d0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cd6:	4b4a      	ldr	r3, [pc, #296]	; (8000e00 <HAL_SPI_MspInit+0x1d0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000cdc:	4848      	ldr	r0, [pc, #288]	; (8000e00 <HAL_SPI_MspInit+0x1d0>)
 8000cde:	f000 fc41 	bl	8001564 <HAL_DMA_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8000ce8:	f7ff ff1c 	bl	8000b24 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a44      	ldr	r2, [pc, #272]	; (8000e00 <HAL_SPI_MspInit+0x1d0>)
 8000cf0:	655a      	str	r2, [r3, #84]	; 0x54
 8000cf2:	4a43      	ldr	r2, [pc, #268]	; (8000e00 <HAL_SPI_MspInit+0x1d0>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000cf8:	4b43      	ldr	r3, [pc, #268]	; (8000e08 <HAL_SPI_MspInit+0x1d8>)
 8000cfa:	4a44      	ldr	r2, [pc, #272]	; (8000e0c <HAL_SPI_MspInit+0x1dc>)
 8000cfc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8000cfe:	4b42      	ldr	r3, [pc, #264]	; (8000e08 <HAL_SPI_MspInit+0x1d8>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d04:	4b40      	ldr	r3, [pc, #256]	; (8000e08 <HAL_SPI_MspInit+0x1d8>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d0a:	4b3f      	ldr	r3, [pc, #252]	; (8000e08 <HAL_SPI_MspInit+0x1d8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d10:	4b3d      	ldr	r3, [pc, #244]	; (8000e08 <HAL_SPI_MspInit+0x1d8>)
 8000d12:	2280      	movs	r2, #128	; 0x80
 8000d14:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d16:	4b3c      	ldr	r3, [pc, #240]	; (8000e08 <HAL_SPI_MspInit+0x1d8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d1c:	4b3a      	ldr	r3, [pc, #232]	; (8000e08 <HAL_SPI_MspInit+0x1d8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000d22:	4b39      	ldr	r3, [pc, #228]	; (8000e08 <HAL_SPI_MspInit+0x1d8>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d28:	4b37      	ldr	r3, [pc, #220]	; (8000e08 <HAL_SPI_MspInit+0x1d8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000d2e:	4836      	ldr	r0, [pc, #216]	; (8000e08 <HAL_SPI_MspInit+0x1d8>)
 8000d30:	f000 fc18 	bl	8001564 <HAL_DMA_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8000d3a:	f7ff fef3 	bl	8000b24 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a31      	ldr	r2, [pc, #196]	; (8000e08 <HAL_SPI_MspInit+0x1d8>)
 8000d42:	659a      	str	r2, [r3, #88]	; 0x58
 8000d44:	4a30      	ldr	r2, [pc, #192]	; (8000e08 <HAL_SPI_MspInit+0x1d8>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2023      	movs	r0, #35	; 0x23
 8000d50:	f000 fbd1 	bl	80014f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000d54:	2023      	movs	r0, #35	; 0x23
 8000d56:	f000 fbea 	bl	800152e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000d5a:	e049      	b.n	8000df0 <HAL_SPI_MspInit+0x1c0>
  else if(spiHandle->Instance==SPI2)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a2b      	ldr	r2, [pc, #172]	; (8000e10 <HAL_SPI_MspInit+0x1e0>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d144      	bne.n	8000df0 <HAL_SPI_MspInit+0x1c0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d66:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <HAL_SPI_MspInit+0x1cc>)
 8000d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6a:	4a24      	ldr	r2, [pc, #144]	; (8000dfc <HAL_SPI_MspInit+0x1cc>)
 8000d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d70:	6593      	str	r3, [r2, #88]	; 0x58
 8000d72:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <HAL_SPI_MspInit+0x1cc>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7e:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <HAL_SPI_MspInit+0x1cc>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	4a1e      	ldr	r2, [pc, #120]	; (8000dfc <HAL_SPI_MspInit+0x1cc>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <HAL_SPI_MspInit+0x1cc>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <HAL_SPI_MspInit+0x1cc>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	4a18      	ldr	r2, [pc, #96]	; (8000dfc <HAL_SPI_MspInit+0x1cc>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <HAL_SPI_MspInit+0x1cc>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dae:	230c      	movs	r3, #12
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4812      	ldr	r0, [pc, #72]	; (8000e14 <HAL_SPI_MspInit+0x1e4>)
 8000dca:	f000 fe03 	bl	80019d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000de0:	2305      	movs	r3, #5
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4619      	mov	r1, r3
 8000dea:	480b      	ldr	r0, [pc, #44]	; (8000e18 <HAL_SPI_MspInit+0x1e8>)
 8000dec:	f000 fdf2 	bl	80019d4 <HAL_GPIO_Init>
}
 8000df0:	bf00      	nop
 8000df2:	3730      	adds	r7, #48	; 0x30
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40013000 	.word	0x40013000
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	200001d4 	.word	0x200001d4
 8000e04:	40020030 	.word	0x40020030
 8000e08:	2000018c 	.word	0x2000018c
 8000e0c:	4002001c 	.word	0x4002001c
 8000e10:	40003800 	.word	0x40003800
 8000e14:	48000800 	.word	0x48000800
 8000e18:	48000400 	.word	0x48000400

08000e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_MspInit+0x44>)
 8000e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <HAL_MspInit+0x44>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_MspInit+0x44>)
 8000e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <HAL_MspInit+0x44>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3e:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <HAL_MspInit+0x44>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e44:	6593      	str	r3, [r2, #88]	; 0x58
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_MspInit+0x44>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000

08000e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <NMI_Handler+0x4>

08000e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <HardFault_Handler+0x4>

08000e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <MemManage_Handler+0x4>

08000e76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <BusFault_Handler+0x4>

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <UsageFault_Handler+0x4>

08000e82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb0:	f000 fa04 	bl	80012bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <DMA1_Channel2_IRQHandler+0x10>)
 8000ebe:	f000 fcaa 	bl	8001816 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	2000018c 	.word	0x2000018c

08000ecc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <DMA1_Channel3_IRQHandler+0x10>)
 8000ed2:	f000 fca0 	bl	8001816 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200001d4 	.word	0x200001d4

08000ee0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <SPI1_IRQHandler+0x10>)
 8000ee6:	f002 fac9 	bl	800347c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000128 	.word	0x20000128

08000ef4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <USART2_IRQHandler+0x10>)
 8000efa:	f002 ffdb 	bl	8003eb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2000021c 	.word	0x2000021c

08000f08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f10:	f000 ff04 	bl	8001d1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	e00a      	b.n	8000f40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f2a:	f3af 8000 	nop.w
 8000f2e:	4601      	mov	r1, r0
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	1c5a      	adds	r2, r3, #1
 8000f34:	60ba      	str	r2, [r7, #8]
 8000f36:	b2ca      	uxtb	r2, r1
 8000f38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697a      	ldr	r2, [r7, #20]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	dbf0      	blt.n	8000f2a <_read+0x12>
	}

return len;
 8000f48:	687b      	ldr	r3, [r7, #4]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b086      	sub	sp, #24
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	60f8      	str	r0, [r7, #12]
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
 8000f62:	e009      	b.n	8000f78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	1c5a      	adds	r2, r3, #1
 8000f68:	60ba      	str	r2, [r7, #8]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fb8f 	bl	8000690 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3301      	adds	r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	dbf1      	blt.n	8000f64 <_write+0x12>
	}
	return len;
 8000f80:	687b      	ldr	r3, [r7, #4]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <_close>:

int _close(int file)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
	return -1;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb2:	605a      	str	r2, [r3, #4]
	return 0;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <_isatty>:

int _isatty(int file)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
	return 1;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
	return 0;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
	...

08000ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ffc:	4a14      	ldr	r2, [pc, #80]	; (8001050 <_sbrk+0x5c>)
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <_sbrk+0x60>)
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001008:	4b13      	ldr	r3, [pc, #76]	; (8001058 <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <_sbrk+0x64>)
 8001012:	4a12      	ldr	r2, [pc, #72]	; (800105c <_sbrk+0x68>)
 8001014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	429a      	cmp	r2, r3
 8001022:	d207      	bcs.n	8001034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001024:	f003 fc94 	bl	8004950 <__errno>
 8001028:	4602      	mov	r2, r0
 800102a:	230c      	movs	r3, #12
 800102c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	e009      	b.n	8001048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <_sbrk+0x64>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	4a05      	ldr	r2, [pc, #20]	; (8001058 <_sbrk+0x64>)
 8001044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001046:	68fb      	ldr	r3, [r7, #12]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	2000a000 	.word	0x2000a000
 8001054:	00000400 	.word	0x00000400
 8001058:	200000b8 	.word	0x200000b8
 800105c:	200002a8 	.word	0x200002a8

08001060 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <MX_USART2_UART_Init+0x58>)
 8001066:	4a15      	ldr	r2, [pc, #84]	; (80010bc <MX_USART2_UART_Init+0x5c>)
 8001068:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <MX_USART2_UART_Init+0x58>)
 800106c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001070:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_USART2_UART_Init+0x58>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_USART2_UART_Init+0x58>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_USART2_UART_Init+0x58>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_USART2_UART_Init+0x58>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <MX_USART2_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_USART2_UART_Init+0x58>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <MX_USART2_UART_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_USART2_UART_Init+0x58>)
 800109e:	2200      	movs	r2, #0
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_USART2_UART_Init+0x58>)
 80010a4:	f002 fe24 	bl	8003cf0 <HAL_UART_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010ae:	f7ff fd39 	bl	8000b24 <Error_Handler>
  }

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2000021c 	.word	0x2000021c
 80010bc:	40004400 	.word	0x40004400

080010c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a1b      	ldr	r2, [pc, #108]	; (800114c <HAL_UART_MspInit+0x8c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d130      	bne.n	8001144 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010e2:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <HAL_UART_MspInit+0x90>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e6:	4a1a      	ldr	r2, [pc, #104]	; (8001150 <HAL_UART_MspInit+0x90>)
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ec:	6593      	str	r3, [r2, #88]	; 0x58
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <HAL_UART_MspInit+0x90>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_UART_MspInit+0x90>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a14      	ldr	r2, [pc, #80]	; (8001150 <HAL_UART_MspInit+0x90>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_UART_MspInit+0x90>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001112:	230c      	movs	r3, #12
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001122:	2307      	movs	r3, #7
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001130:	f000 fc50 	bl	80019d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	2100      	movs	r1, #0
 8001138:	2026      	movs	r0, #38	; 0x26
 800113a:	f000 f9dc 	bl	80014f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800113e:	2026      	movs	r0, #38	; 0x26
 8001140:	f000 f9f5 	bl	800152e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001144:	bf00      	nop
 8001146:	3728      	adds	r7, #40	; 0x28
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40004400 	.word	0x40004400
 8001150:	40021000 	.word	0x40021000

08001154 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001154:	f8df d034 	ldr.w	sp, [pc, #52]	; 800118c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001158:	f000 f826 	bl	80011a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800115c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800115e:	e003      	b.n	8001168 <LoopCopyDataInit>

08001160 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001162:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001164:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001166:	3104      	adds	r1, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001168:	480a      	ldr	r0, [pc, #40]	; (8001194 <LoopForever+0xa>)
	ldr	r3, =_edata
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <LoopForever+0xe>)
	adds	r2, r0, r1
 800116c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800116e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001170:	d3f6      	bcc.n	8001160 <CopyDataInit>
	ldr	r2, =_sbss
 8001172:	4a0a      	ldr	r2, [pc, #40]	; (800119c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001174:	e002      	b.n	800117c <LoopFillZerobss>

08001176 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001176:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001178:	f842 3b04 	str.w	r3, [r2], #4

0800117c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <LoopForever+0x16>)
	cmp	r2, r3
 800117e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001180:	d3f9      	bcc.n	8001176 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001182:	f003 fbeb 	bl	800495c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001186:	f7ff fa95 	bl	80006b4 <main>

0800118a <LoopForever>:

LoopForever:
    b LoopForever
 800118a:	e7fe      	b.n	800118a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800118c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001190:	08005a94 	.word	0x08005a94
	ldr	r0, =_sdata
 8001194:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001198:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 800119c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80011a0:	200002a4 	.word	0x200002a4

080011a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011a4:	e7fe      	b.n	80011a4 <ADC1_2_IRQHandler>
	...

080011a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <SystemInit+0x64>)
 80011ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b2:	4a16      	ldr	r2, [pc, #88]	; (800120c <SystemInit+0x64>)
 80011b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <SystemInit+0x68>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a13      	ldr	r2, [pc, #76]	; (8001210 <SystemInit+0x68>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <SystemInit+0x68>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <SystemInit+0x68>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a0f      	ldr	r2, [pc, #60]	; (8001210 <SystemInit+0x68>)
 80011d4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80011d8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80011dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <SystemInit+0x68>)
 80011e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <SystemInit+0x68>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a09      	ldr	r2, [pc, #36]	; (8001210 <SystemInit+0x68>)
 80011ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <SystemInit+0x68>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <SystemInit+0x64>)
 80011fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011fe:	609a      	str	r2, [r3, #8]
#endif
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000ed00 	.word	0xe000ed00
 8001210:	40021000 	.word	0x40021000

08001214 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121e:	2003      	movs	r0, #3
 8001220:	f000 f95e 	bl	80014e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001224:	2000      	movs	r0, #0
 8001226:	f000 f80d 	bl	8001244 <HAL_InitTick>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d002      	beq.n	8001236 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	71fb      	strb	r3, [r7, #7]
 8001234:	e001      	b.n	800123a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001236:	f7ff fdf1 	bl	8000e1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800123a:	79fb      	ldrb	r3, [r7, #7]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <HAL_InitTick+0x6c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d023      	beq.n	80012a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <HAL_InitTick+0x70>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <HAL_InitTick+0x6c>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4619      	mov	r1, r3
 8001262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001266:	fbb3 f3f1 	udiv	r3, r3, r1
 800126a:	fbb2 f3f3 	udiv	r3, r2, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f96b 	bl	800154a <HAL_SYSTICK_Config>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10f      	bne.n	800129a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b0f      	cmp	r3, #15
 800127e:	d809      	bhi.n	8001294 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001280:	2200      	movs	r2, #0
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	f04f 30ff 	mov.w	r0, #4294967295
 8001288:	f000 f935 	bl	80014f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800128c:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <HAL_InitTick+0x74>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	e007      	b.n	80012a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	e004      	b.n	80012a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	73fb      	strb	r3, [r7, #15]
 800129e:	e001      	b.n	80012a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000008 	.word	0x20000008
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000004 	.word	0x20000004

080012bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_IncTick+0x20>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x24>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4413      	add	r3, r2
 80012cc:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <HAL_IncTick+0x24>)
 80012ce:	6013      	str	r3, [r2, #0]
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000008 	.word	0x20000008
 80012e0:	2000029c 	.word	0x2000029c

080012e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return uwTick;
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <HAL_GetTick+0x14>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	2000029c 	.word	0x2000029c

080012fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001304:	f7ff ffee 	bl	80012e4 <HAL_GetTick>
 8001308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001314:	d005      	beq.n	8001322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_Delay+0x40>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001322:	bf00      	nop
 8001324:	f7ff ffde 	bl	80012e4 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8f7      	bhi.n	8001324 <HAL_Delay+0x28>
  {
  }
}
 8001334:	bf00      	nop
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000008 	.word	0x20000008

08001340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800135c:	4013      	ands	r3, r2
 800135e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800136c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001372:	4a04      	ldr	r2, [pc, #16]	; (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	60d3      	str	r3, [r2, #12]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <__NVIC_GetPriorityGrouping+0x18>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	f003 0307 	and.w	r3, r3, #7
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	db0b      	blt.n	80013ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	f003 021f 	and.w	r2, r3, #31
 80013bc:	4907      	ldr	r1, [pc, #28]	; (80013dc <__NVIC_EnableIRQ+0x38>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	095b      	lsrs	r3, r3, #5
 80013c4:	2001      	movs	r0, #1
 80013c6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000e100 	.word	0xe000e100

080013e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	db0a      	blt.n	800140a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	490c      	ldr	r1, [pc, #48]	; (800142c <__NVIC_SetPriority+0x4c>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	0112      	lsls	r2, r2, #4
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	440b      	add	r3, r1
 8001404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001408:	e00a      	b.n	8001420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4908      	ldr	r1, [pc, #32]	; (8001430 <__NVIC_SetPriority+0x50>)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	3b04      	subs	r3, #4
 8001418:	0112      	lsls	r2, r2, #4
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	440b      	add	r3, r1
 800141e:	761a      	strb	r2, [r3, #24]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000e100 	.word	0xe000e100
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	; 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f1c3 0307 	rsb	r3, r3, #7
 800144e:	2b04      	cmp	r3, #4
 8001450:	bf28      	it	cs
 8001452:	2304      	movcs	r3, #4
 8001454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3304      	adds	r3, #4
 800145a:	2b06      	cmp	r3, #6
 800145c:	d902      	bls.n	8001464 <NVIC_EncodePriority+0x30>
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3b03      	subs	r3, #3
 8001462:	e000      	b.n	8001466 <NVIC_EncodePriority+0x32>
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	f04f 32ff 	mov.w	r2, #4294967295
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	401a      	ands	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800147c:	f04f 31ff 	mov.w	r1, #4294967295
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	43d9      	mvns	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	4313      	orrs	r3, r2
         );
}
 800148e:	4618      	mov	r0, r3
 8001490:	3724      	adds	r7, #36	; 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014ac:	d301      	bcc.n	80014b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00f      	b.n	80014d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b2:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <SysTick_Config+0x40>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ba:	210f      	movs	r1, #15
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f7ff ff8e 	bl	80013e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <SysTick_Config+0x40>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ca:	4b04      	ldr	r3, [pc, #16]	; (80014dc <SysTick_Config+0x40>)
 80014cc:	2207      	movs	r2, #7
 80014ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	e000e010 	.word	0xe000e010

080014e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ff29 	bl	8001340 <__NVIC_SetPriorityGrouping>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001508:	f7ff ff3e 	bl	8001388 <__NVIC_GetPriorityGrouping>
 800150c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f7ff ff8e 	bl	8001434 <NVIC_EncodePriority>
 8001518:	4602      	mov	r2, r0
 800151a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151e:	4611      	mov	r1, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff5d 	bl	80013e0 <__NVIC_SetPriority>
}
 8001526:	bf00      	nop
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff31 	bl	80013a4 <__NVIC_EnableIRQ>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ffa2 	bl	800149c <SysTick_Config>
 8001558:	4603      	mov	r3, r0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e098      	b.n	80016a8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	4b4d      	ldr	r3, [pc, #308]	; (80016b4 <HAL_DMA_Init+0x150>)
 800157e:	429a      	cmp	r2, r3
 8001580:	d80f      	bhi.n	80015a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	4b4b      	ldr	r3, [pc, #300]	; (80016b8 <HAL_DMA_Init+0x154>)
 800158a:	4413      	add	r3, r2
 800158c:	4a4b      	ldr	r2, [pc, #300]	; (80016bc <HAL_DMA_Init+0x158>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	091b      	lsrs	r3, r3, #4
 8001594:	009a      	lsls	r2, r3, #2
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a48      	ldr	r2, [pc, #288]	; (80016c0 <HAL_DMA_Init+0x15c>)
 800159e:	641a      	str	r2, [r3, #64]	; 0x40
 80015a0:	e00e      	b.n	80015c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b46      	ldr	r3, [pc, #280]	; (80016c4 <HAL_DMA_Init+0x160>)
 80015aa:	4413      	add	r3, r2
 80015ac:	4a43      	ldr	r2, [pc, #268]	; (80016bc <HAL_DMA_Init+0x158>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	091b      	lsrs	r3, r3, #4
 80015b4:	009a      	lsls	r2, r3, #2
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a42      	ldr	r2, [pc, #264]	; (80016c8 <HAL_DMA_Init+0x164>)
 80015be:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2202      	movs	r2, #2
 80015c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80015d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80015e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	4313      	orrs	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800161a:	d039      	beq.n	8001690 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	4a27      	ldr	r2, [pc, #156]	; (80016c0 <HAL_DMA_Init+0x15c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d11a      	bne.n	800165c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001626:	4b29      	ldr	r3, [pc, #164]	; (80016cc <HAL_DMA_Init+0x168>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f003 031c 	and.w	r3, r3, #28
 8001632:	210f      	movs	r1, #15
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	4924      	ldr	r1, [pc, #144]	; (80016cc <HAL_DMA_Init+0x168>)
 800163c:	4013      	ands	r3, r2
 800163e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <HAL_DMA_Init+0x168>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6859      	ldr	r1, [r3, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164c:	f003 031c 	and.w	r3, r3, #28
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	491d      	ldr	r1, [pc, #116]	; (80016cc <HAL_DMA_Init+0x168>)
 8001656:	4313      	orrs	r3, r2
 8001658:	600b      	str	r3, [r1, #0]
 800165a:	e019      	b.n	8001690 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800165c:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <HAL_DMA_Init+0x16c>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001664:	f003 031c 	and.w	r3, r3, #28
 8001668:	210f      	movs	r1, #15
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	4917      	ldr	r1, [pc, #92]	; (80016d0 <HAL_DMA_Init+0x16c>)
 8001672:	4013      	ands	r3, r2
 8001674:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <HAL_DMA_Init+0x16c>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6859      	ldr	r1, [r3, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	f003 031c 	and.w	r3, r3, #28
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	4911      	ldr	r1, [pc, #68]	; (80016d0 <HAL_DMA_Init+0x16c>)
 800168c:	4313      	orrs	r3, r2
 800168e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	40020407 	.word	0x40020407
 80016b8:	bffdfff8 	.word	0xbffdfff8
 80016bc:	cccccccd 	.word	0xcccccccd
 80016c0:	40020000 	.word	0x40020000
 80016c4:	bffdfbf8 	.word	0xbffdfbf8
 80016c8:	40020400 	.word	0x40020400
 80016cc:	400200a8 	.word	0x400200a8
 80016d0:	400204a8 	.word	0x400204a8

080016d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <HAL_DMA_Start_IT+0x20>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e04b      	b.n	800178c <HAL_DMA_Start_IT+0xb8>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b01      	cmp	r3, #1
 8001706:	d13a      	bne.n	800177e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2202      	movs	r2, #2
 800170c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2200      	movs	r2, #0
 8001714:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0201 	bic.w	r2, r2, #1
 8001724:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 f921 	bl	8001974 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	2b00      	cmp	r3, #0
 8001738:	d008      	beq.n	800174c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f042 020e 	orr.w	r2, r2, #14
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	e00f      	b.n	800176c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0204 	bic.w	r2, r2, #4
 800175a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 020a 	orr.w	r2, r2, #10
 800176a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0201 	orr.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	e005      	b.n	800178a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001786:	2302      	movs	r3, #2
 8001788:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800178a:	7dfb      	ldrb	r3, [r7, #23]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d005      	beq.n	80017b8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2204      	movs	r2, #4
 80017b0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	73fb      	strb	r3, [r7, #15]
 80017b6:	e029      	b.n	800180c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 020e 	bic.w	r2, r2, #14
 80017c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0201 	bic.w	r2, r2, #1
 80017d6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017dc:	f003 021c 	and.w	r2, r3, #28
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	2101      	movs	r1, #1
 80017e6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ea:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	4798      	blx	r3
    }
  }
  return status;
 800180c:	7bfb      	ldrb	r3, [r7, #15]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b084      	sub	sp, #16
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	f003 031c 	and.w	r3, r3, #28
 8001836:	2204      	movs	r2, #4
 8001838:	409a      	lsls	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4013      	ands	r3, r2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d026      	beq.n	8001890 <HAL_DMA_IRQHandler+0x7a>
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d021      	beq.n	8001890 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0320 	and.w	r3, r3, #32
 8001856:	2b00      	cmp	r3, #0
 8001858:	d107      	bne.n	800186a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0204 	bic.w	r2, r2, #4
 8001868:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f003 021c 	and.w	r2, r3, #28
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	2104      	movs	r1, #4
 8001878:	fa01 f202 	lsl.w	r2, r1, r2
 800187c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	2b00      	cmp	r3, #0
 8001884:	d071      	beq.n	800196a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800188e:	e06c      	b.n	800196a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001894:	f003 031c 	and.w	r3, r3, #28
 8001898:	2202      	movs	r2, #2
 800189a:	409a      	lsls	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4013      	ands	r3, r2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d02e      	beq.n	8001902 <HAL_DMA_IRQHandler+0xec>
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d029      	beq.n	8001902 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0320 	and.w	r3, r3, #32
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10b      	bne.n	80018d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 020a 	bic.w	r2, r2, #10
 80018ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d8:	f003 021c 	and.w	r2, r3, #28
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	2102      	movs	r1, #2
 80018e2:	fa01 f202 	lsl.w	r2, r1, r2
 80018e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d038      	beq.n	800196a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001900:	e033      	b.n	800196a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f003 031c 	and.w	r3, r3, #28
 800190a:	2208      	movs	r2, #8
 800190c:	409a      	lsls	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4013      	ands	r3, r2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d02a      	beq.n	800196c <HAL_DMA_IRQHandler+0x156>
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d025      	beq.n	800196c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 020e 	bic.w	r2, r2, #14
 800192e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001934:	f003 021c 	and.w	r2, r3, #28
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	2101      	movs	r1, #1
 800193e:	fa01 f202 	lsl.w	r2, r1, r2
 8001942:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800196a:	bf00      	nop
 800196c:	bf00      	nop
}
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
 8001980:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	f003 021c 	and.w	r2, r3, #28
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	2101      	movs	r1, #1
 8001990:	fa01 f202 	lsl.w	r2, r1, r2
 8001994:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b10      	cmp	r3, #16
 80019a4:	d108      	bne.n	80019b8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019b6:	e007      	b.n	80019c8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	60da      	str	r2, [r3, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e2:	e14e      	b.n	8001c82 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2101      	movs	r1, #1
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	4013      	ands	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 8140 	beq.w	8001c7c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d00b      	beq.n	8001a1c <HAL_GPIO_Init+0x48>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d007      	beq.n	8001a1c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a10:	2b11      	cmp	r3, #17
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b12      	cmp	r3, #18
 8001a1a:	d130      	bne.n	8001a7e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	2203      	movs	r2, #3
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a52:	2201      	movs	r2, #1
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	091b      	lsrs	r3, r3, #4
 8001a68:	f003 0201 	and.w	r2, r3, #1
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	2203      	movs	r2, #3
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0xea>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b12      	cmp	r3, #18
 8001abc:	d123      	bne.n	8001b06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	08da      	lsrs	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3208      	adds	r2, #8
 8001ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	220f      	movs	r2, #15
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	691a      	ldr	r2, [r3, #16]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	08da      	lsrs	r2, r3, #3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3208      	adds	r2, #8
 8001b00:	6939      	ldr	r1, [r7, #16]
 8001b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	2203      	movs	r2, #3
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0203 	and.w	r2, r3, #3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 809a 	beq.w	8001c7c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b48:	4b55      	ldr	r3, [pc, #340]	; (8001ca0 <HAL_GPIO_Init+0x2cc>)
 8001b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b4c:	4a54      	ldr	r2, [pc, #336]	; (8001ca0 <HAL_GPIO_Init+0x2cc>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6613      	str	r3, [r2, #96]	; 0x60
 8001b54:	4b52      	ldr	r3, [pc, #328]	; (8001ca0 <HAL_GPIO_Init+0x2cc>)
 8001b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b60:	4a50      	ldr	r2, [pc, #320]	; (8001ca4 <HAL_GPIO_Init+0x2d0>)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	089b      	lsrs	r3, r3, #2
 8001b66:	3302      	adds	r3, #2
 8001b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	220f      	movs	r2, #15
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b8a:	d013      	beq.n	8001bb4 <HAL_GPIO_Init+0x1e0>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a46      	ldr	r2, [pc, #280]	; (8001ca8 <HAL_GPIO_Init+0x2d4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00d      	beq.n	8001bb0 <HAL_GPIO_Init+0x1dc>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a45      	ldr	r2, [pc, #276]	; (8001cac <HAL_GPIO_Init+0x2d8>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d007      	beq.n	8001bac <HAL_GPIO_Init+0x1d8>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a44      	ldr	r2, [pc, #272]	; (8001cb0 <HAL_GPIO_Init+0x2dc>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d101      	bne.n	8001ba8 <HAL_GPIO_Init+0x1d4>
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e006      	b.n	8001bb6 <HAL_GPIO_Init+0x1e2>
 8001ba8:	2307      	movs	r3, #7
 8001baa:	e004      	b.n	8001bb6 <HAL_GPIO_Init+0x1e2>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e002      	b.n	8001bb6 <HAL_GPIO_Init+0x1e2>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <HAL_GPIO_Init+0x1e2>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	f002 0203 	and.w	r2, r2, #3
 8001bbc:	0092      	lsls	r2, r2, #2
 8001bbe:	4093      	lsls	r3, r2
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bc6:	4937      	ldr	r1, [pc, #220]	; (8001ca4 <HAL_GPIO_Init+0x2d0>)
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	3302      	adds	r3, #2
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bd4:	4b37      	ldr	r3, [pc, #220]	; (8001cb4 <HAL_GPIO_Init+0x2e0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bf8:	4a2e      	ldr	r2, [pc, #184]	; (8001cb4 <HAL_GPIO_Init+0x2e0>)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001bfe:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <HAL_GPIO_Init+0x2e0>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c22:	4a24      	ldr	r2, [pc, #144]	; (8001cb4 <HAL_GPIO_Init+0x2e0>)
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c28:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <HAL_GPIO_Init+0x2e0>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c4c:	4a19      	ldr	r2, [pc, #100]	; (8001cb4 <HAL_GPIO_Init+0x2e0>)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c52:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <HAL_GPIO_Init+0x2e0>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c76:	4a0f      	ldr	r2, [pc, #60]	; (8001cb4 <HAL_GPIO_Init+0x2e0>)
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f47f aea9 	bne.w	80019e4 <HAL_GPIO_Init+0x10>
  }
}
 8001c92:	bf00      	nop
 8001c94:	371c      	adds	r7, #28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40010000 	.word	0x40010000
 8001ca8:	48000400 	.word	0x48000400
 8001cac:	48000800 	.word	0x48000800
 8001cb0:	48000c00 	.word	0x48000c00
 8001cb4:	40010400 	.word	0x40010400

08001cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	807b      	strh	r3, [r7, #2]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc8:	787b      	ldrb	r3, [r7, #1]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cce:	887a      	ldrh	r2, [r7, #2]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cd4:	e002      	b.n	8001cdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cd6:	887a      	ldrh	r2, [r7, #2]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cfa:	887a      	ldrh	r2, [r7, #2]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	041a      	lsls	r2, r3, #16
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	43d9      	mvns	r1, r3
 8001d06:	887b      	ldrh	r3, [r7, #2]
 8001d08:	400b      	ands	r3, r1
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	619a      	str	r2, [r3, #24]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d28:	695a      	ldr	r2, [r3, #20]
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d006      	beq.n	8001d40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d32:	4a05      	ldr	r2, [pc, #20]	; (8001d48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe feb8 	bl	8000ab0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40010400 	.word	0x40010400

08001d4c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40007000 	.word	0x40007000

08001d6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40007000 	.word	0x40007000

08001d88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d96:	d130      	bne.n	8001dfa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d98:	4b23      	ldr	r3, [pc, #140]	; (8001e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da4:	d038      	beq.n	8001e18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dae:	4a1e      	ldr	r2, [pc, #120]	; (8001e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001db4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001db6:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2232      	movs	r2, #50	; 0x32
 8001dbc:	fb02 f303 	mul.w	r3, r2, r3
 8001dc0:	4a1b      	ldr	r2, [pc, #108]	; (8001e30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc6:	0c9b      	lsrs	r3, r3, #18
 8001dc8:	3301      	adds	r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dcc:	e002      	b.n	8001dd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dd4:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de0:	d102      	bne.n	8001de8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f2      	bne.n	8001dce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001de8:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001df4:	d110      	bne.n	8001e18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e00f      	b.n	8001e1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e06:	d007      	beq.n	8001e18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e08:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e10:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40007000 	.word	0x40007000
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	431bde83 	.word	0x431bde83

08001e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d102      	bne.n	8001e48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	f000 bc56 	b.w	80026f4 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e48:	4ba1      	ldr	r3, [pc, #644]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 030c 	and.w	r3, r3, #12
 8001e50:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e52:	4b9f      	ldr	r3, [pc, #636]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 80e6 	beq.w	8002036 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d007      	beq.n	8001e80 <HAL_RCC_OscConfig+0x4c>
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	2b0c      	cmp	r3, #12
 8001e74:	f040 808d 	bne.w	8001f92 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	f040 8089 	bne.w	8001f92 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e80:	4b93      	ldr	r3, [pc, #588]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d006      	beq.n	8001e9a <HAL_RCC_OscConfig+0x66>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d102      	bne.n	8001e9a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	f000 bc2d 	b.w	80026f4 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e9e:	4b8c      	ldr	r3, [pc, #560]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d004      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x80>
 8001eaa:	4b89      	ldr	r3, [pc, #548]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eb2:	e005      	b.n	8001ec0 <HAL_RCC_OscConfig+0x8c>
 8001eb4:	4b86      	ldr	r3, [pc, #536]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eba:	091b      	lsrs	r3, r3, #4
 8001ebc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d224      	bcs.n	8001f0e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 fdbd 	bl	8002a48 <RCC_SetFlashLatencyFromMSIRange>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d002      	beq.n	8001eda <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	f000 bc0d 	b.w	80026f4 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eda:	4b7d      	ldr	r3, [pc, #500]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a7c      	ldr	r2, [pc, #496]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001ee0:	f043 0308 	orr.w	r3, r3, #8
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4b7a      	ldr	r3, [pc, #488]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	4977      	ldr	r1, [pc, #476]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ef8:	4b75      	ldr	r3, [pc, #468]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	4972      	ldr	r1, [pc, #456]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
 8001f0c:	e025      	b.n	8001f5a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f0e:	4b70      	ldr	r3, [pc, #448]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a6f      	ldr	r2, [pc, #444]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001f14:	f043 0308 	orr.w	r3, r3, #8
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	4b6d      	ldr	r3, [pc, #436]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	496a      	ldr	r1, [pc, #424]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f2c:	4b68      	ldr	r3, [pc, #416]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	4965      	ldr	r1, [pc, #404]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d109      	bne.n	8001f5a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 fd7c 	bl	8002a48 <RCC_SetFlashLatencyFromMSIRange>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e3cc      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f5a:	f000 fcb3 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 8001f5e:	4601      	mov	r1, r0
 8001f60:	4b5b      	ldr	r3, [pc, #364]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	4a5a      	ldr	r2, [pc, #360]	; (80020d4 <HAL_RCC_OscConfig+0x2a0>)
 8001f6c:	5cd3      	ldrb	r3, [r2, r3]
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	fa21 f303 	lsr.w	r3, r1, r3
 8001f76:	4a58      	ldr	r2, [pc, #352]	; (80020d8 <HAL_RCC_OscConfig+0x2a4>)
 8001f78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f7a:	4b58      	ldr	r3, [pc, #352]	; (80020dc <HAL_RCC_OscConfig+0x2a8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff f960 	bl	8001244 <HAL_InitTick>
 8001f84:	4603      	mov	r3, r0
 8001f86:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d052      	beq.n	8002034 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001f8e:	7dfb      	ldrb	r3, [r7, #23]
 8001f90:	e3b0      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d032      	beq.n	8002000 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f9a:	4b4d      	ldr	r3, [pc, #308]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a4c      	ldr	r2, [pc, #304]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fa6:	f7ff f99d 	bl	80012e4 <HAL_GetTick>
 8001faa:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fae:	f7ff f999 	bl	80012e4 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e399      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fc0:	4b43      	ldr	r3, [pc, #268]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fcc:	4b40      	ldr	r3, [pc, #256]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a3f      	ldr	r2, [pc, #252]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001fd2:	f043 0308 	orr.w	r3, r3, #8
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	4b3d      	ldr	r3, [pc, #244]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	493a      	ldr	r1, [pc, #232]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fea:	4b39      	ldr	r3, [pc, #228]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	021b      	lsls	r3, r3, #8
 8001ff8:	4935      	ldr	r1, [pc, #212]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	604b      	str	r3, [r1, #4]
 8001ffe:	e01a      	b.n	8002036 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002000:	4b33      	ldr	r3, [pc, #204]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a32      	ldr	r2, [pc, #200]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8002006:	f023 0301 	bic.w	r3, r3, #1
 800200a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800200c:	f7ff f96a 	bl	80012e4 <HAL_GetTick>
 8002010:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002014:	f7ff f966 	bl	80012e4 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e366      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002026:	4b2a      	ldr	r3, [pc, #168]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x1e0>
 8002032:	e000      	b.n	8002036 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002034:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d073      	beq.n	800212a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	2b08      	cmp	r3, #8
 8002046:	d005      	beq.n	8002054 <HAL_RCC_OscConfig+0x220>
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	2b0c      	cmp	r3, #12
 800204c:	d10e      	bne.n	800206c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	2b03      	cmp	r3, #3
 8002052:	d10b      	bne.n	800206c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d063      	beq.n	8002128 <HAL_RCC_OscConfig+0x2f4>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d15f      	bne.n	8002128 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e343      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002074:	d106      	bne.n	8002084 <HAL_RCC_OscConfig+0x250>
 8002076:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a15      	ldr	r2, [pc, #84]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 800207c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	e01d      	b.n	80020c0 <HAL_RCC_OscConfig+0x28c>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800208c:	d10c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x274>
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a0f      	ldr	r2, [pc, #60]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 8002094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 80020a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	e00b      	b.n	80020c0 <HAL_RCC_OscConfig+0x28c>
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a08      	ldr	r2, [pc, #32]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 80020ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <HAL_RCC_OscConfig+0x29c>)
 80020ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d01b      	beq.n	8002100 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7ff f90c 	bl	80012e4 <HAL_GetTick>
 80020cc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ce:	e010      	b.n	80020f2 <HAL_RCC_OscConfig+0x2be>
 80020d0:	40021000 	.word	0x40021000
 80020d4:	080059a4 	.word	0x080059a4
 80020d8:	20000000 	.word	0x20000000
 80020dc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e0:	f7ff f900 	bl	80012e4 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	; 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e300      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020f2:	4ba0      	ldr	r3, [pc, #640]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0x2ac>
 80020fe:	e014      	b.n	800212a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002100:	f7ff f8f0 	bl	80012e4 <HAL_GetTick>
 8002104:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002108:	f7ff f8ec 	bl	80012e4 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b64      	cmp	r3, #100	; 0x64
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e2ec      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800211a:	4b96      	ldr	r3, [pc, #600]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x2d4>
 8002126:	e000      	b.n	800212a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d060      	beq.n	80021f8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	2b04      	cmp	r3, #4
 800213a:	d005      	beq.n	8002148 <HAL_RCC_OscConfig+0x314>
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d119      	bne.n	8002176 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	2b02      	cmp	r3, #2
 8002146:	d116      	bne.n	8002176 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002148:	4b8a      	ldr	r3, [pc, #552]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <HAL_RCC_OscConfig+0x32c>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e2c9      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002160:	4b84      	ldr	r3, [pc, #528]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	061b      	lsls	r3, r3, #24
 800216e:	4981      	ldr	r1, [pc, #516]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002174:	e040      	b.n	80021f8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d023      	beq.n	80021c6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800217e:	4b7d      	ldr	r3, [pc, #500]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a7c      	ldr	r2, [pc, #496]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 8002184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218a:	f7ff f8ab 	bl	80012e4 <HAL_GetTick>
 800218e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002192:	f7ff f8a7 	bl	80012e4 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e2a7      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a4:	4b73      	ldr	r3, [pc, #460]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b0:	4b70      	ldr	r3, [pc, #448]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	061b      	lsls	r3, r3, #24
 80021be:	496d      	ldr	r1, [pc, #436]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]
 80021c4:	e018      	b.n	80021f8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c6:	4b6b      	ldr	r3, [pc, #428]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a6a      	ldr	r2, [pc, #424]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 80021cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d2:	f7ff f887 	bl	80012e4 <HAL_GetTick>
 80021d6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021da:	f7ff f883 	bl	80012e4 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e283      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021ec:	4b61      	ldr	r3, [pc, #388]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f0      	bne.n	80021da <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d07f      	beq.n	8002304 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d05f      	beq.n	80022cc <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800220c:	4b59      	ldr	r3, [pc, #356]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 800220e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002212:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699a      	ldr	r2, [r3, #24]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	429a      	cmp	r2, r3
 8002220:	d037      	beq.n	8002292 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d006      	beq.n	800223a <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e25c      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b00      	cmp	r3, #0
 8002242:	d01b      	beq.n	800227c <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8002244:	4b4b      	ldr	r3, [pc, #300]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 8002246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224a:	4a4a      	ldr	r2, [pc, #296]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 800224c:	f023 0301 	bic.w	r3, r3, #1
 8002250:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002254:	f7ff f846 	bl	80012e4 <HAL_GetTick>
 8002258:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800225c:	f7ff f842 	bl	80012e4 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b11      	cmp	r3, #17
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e242      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800226e:	4b41      	ldr	r3, [pc, #260]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 8002270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1ef      	bne.n	800225c <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800227c:	4b3d      	ldr	r3, [pc, #244]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 800227e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002282:	f023 0210 	bic.w	r2, r3, #16
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	493a      	ldr	r1, [pc, #232]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002292:	4b38      	ldr	r3, [pc, #224]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 8002294:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002298:	4a36      	ldr	r2, [pc, #216]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a2:	f7ff f81f 	bl	80012e4 <HAL_GetTick>
 80022a6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022aa:	f7ff f81b 	bl	80012e4 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b11      	cmp	r3, #17
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e21b      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022bc:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 80022be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0ef      	beq.n	80022aa <HAL_RCC_OscConfig+0x476>
 80022ca:	e01b      	b.n	8002304 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022cc:	4b29      	ldr	r3, [pc, #164]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 80022ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022d2:	4a28      	ldr	r2, [pc, #160]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022dc:	f7ff f802 	bl	80012e4 <HAL_GetTick>
 80022e0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e4:	f7fe fffe 	bl	80012e4 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b11      	cmp	r3, #17
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e1fe      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022f6:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 80022f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1ef      	bne.n	80022e4 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80c1 	beq.w	8002494 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002318:	4b16      	ldr	r3, [pc, #88]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 800231a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10e      	bne.n	8002342 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 8002326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002328:	4a12      	ldr	r2, [pc, #72]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 800232a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232e:	6593      	str	r3, [r2, #88]	; 0x58
 8002330:	4b10      	ldr	r3, [pc, #64]	; (8002374 <HAL_RCC_OscConfig+0x540>)
 8002332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800233c:	2301      	movs	r3, #1
 800233e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002342:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <HAL_RCC_OscConfig+0x544>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234a:	2b00      	cmp	r3, #0
 800234c:	d11c      	bne.n	8002388 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_RCC_OscConfig+0x544>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a09      	ldr	r2, [pc, #36]	; (8002378 <HAL_RCC_OscConfig+0x544>)
 8002354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800235a:	f7fe ffc3 	bl	80012e4 <HAL_GetTick>
 800235e:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002360:	e00c      	b.n	800237c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002362:	f7fe ffbf 	bl	80012e4 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d905      	bls.n	800237c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e1bf      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
 8002374:	40021000 	.word	0x40021000
 8002378:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800237c:	4bb1      	ldr	r3, [pc, #708]	; (8002644 <HAL_RCC_OscConfig+0x810>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0ec      	beq.n	8002362 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d02c      	beq.n	80023ee <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002394:	4bac      	ldr	r3, [pc, #688]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 8002396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a6:	49a8      	ldr	r1, [pc, #672]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d010      	beq.n	80023dc <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80023ba:	4ba3      	ldr	r3, [pc, #652]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c0:	4aa1      	ldr	r2, [pc, #644]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 80023c2:	f043 0304 	orr.w	r3, r3, #4
 80023c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023ca:	4b9f      	ldr	r3, [pc, #636]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 80023cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d0:	4a9d      	ldr	r2, [pc, #628]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023da:	e018      	b.n	800240e <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023dc:	4b9a      	ldr	r3, [pc, #616]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e2:	4a99      	ldr	r2, [pc, #612]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023ec:	e00f      	b.n	800240e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023ee:	4b96      	ldr	r3, [pc, #600]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 80023f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f4:	4a94      	ldr	r2, [pc, #592]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 80023f6:	f023 0301 	bic.w	r3, r3, #1
 80023fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80023fe:	4b92      	ldr	r3, [pc, #584]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 8002400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002404:	4a90      	ldr	r2, [pc, #576]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 8002406:	f023 0304 	bic.w	r3, r3, #4
 800240a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d016      	beq.n	8002444 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002416:	f7fe ff65 	bl	80012e4 <HAL_GetTick>
 800241a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800241c:	e00a      	b.n	8002434 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241e:	f7fe ff61 	bl	80012e4 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	f241 3288 	movw	r2, #5000	; 0x1388
 800242c:	4293      	cmp	r3, r2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e15f      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002434:	4b84      	ldr	r3, [pc, #528]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 8002436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0ed      	beq.n	800241e <HAL_RCC_OscConfig+0x5ea>
 8002442:	e01d      	b.n	8002480 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002444:	f7fe ff4e 	bl	80012e4 <HAL_GetTick>
 8002448:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800244a:	e00a      	b.n	8002462 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244c:	f7fe ff4a 	bl	80012e4 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f241 3288 	movw	r2, #5000	; 0x1388
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e148      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002462:	4b79      	ldr	r3, [pc, #484]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 8002464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1ed      	bne.n	800244c <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002470:	4b75      	ldr	r3, [pc, #468]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	4a74      	ldr	r2, [pc, #464]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 8002478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002484:	2b01      	cmp	r3, #1
 8002486:	d105      	bne.n	8002494 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002488:	4b6f      	ldr	r3, [pc, #444]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 800248a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248c:	4a6e      	ldr	r2, [pc, #440]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 800248e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002492:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0320 	and.w	r3, r3, #32
 800249c:	2b00      	cmp	r3, #0
 800249e:	d03c      	beq.n	800251a <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d01c      	beq.n	80024e2 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024a8:	4b67      	ldr	r3, [pc, #412]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 80024aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024ae:	4a66      	ldr	r2, [pc, #408]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b8:	f7fe ff14 	bl	80012e4 <HAL_GetTick>
 80024bc:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024c0:	f7fe ff10 	bl	80012e4 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e110      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024d2:	4b5d      	ldr	r3, [pc, #372]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 80024d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0ef      	beq.n	80024c0 <HAL_RCC_OscConfig+0x68c>
 80024e0:	e01b      	b.n	800251a <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024e2:	4b59      	ldr	r3, [pc, #356]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 80024e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024e8:	4a57      	ldr	r2, [pc, #348]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 80024ea:	f023 0301 	bic.w	r3, r3, #1
 80024ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f2:	f7fe fef7 	bl	80012e4 <HAL_GetTick>
 80024f6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024fa:	f7fe fef3 	bl	80012e4 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e0f3      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800250c:	4b4e      	ldr	r3, [pc, #312]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 800250e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1ef      	bne.n	80024fa <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 80e7 	beq.w	80026f2 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	2b02      	cmp	r3, #2
 800252a:	f040 80b7 	bne.w	800269c <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800252e:	4b46      	ldr	r3, [pc, #280]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f003 0203 	and.w	r2, r3, #3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	429a      	cmp	r2, r3
 8002540:	d124      	bne.n	800258c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254c:	3b01      	subs	r3, #1
 800254e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002550:	429a      	cmp	r2, r3
 8002552:	d11b      	bne.n	800258c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002560:	429a      	cmp	r2, r3
 8002562:	d113      	bne.n	800258c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256e:	085b      	lsrs	r3, r3, #1
 8002570:	3b01      	subs	r3, #1
 8002572:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d109      	bne.n	800258c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	085b      	lsrs	r3, r3, #1
 8002584:	3b01      	subs	r3, #1
 8002586:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002588:	429a      	cmp	r2, r3
 800258a:	d061      	beq.n	8002650 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	2b0c      	cmp	r3, #12
 8002590:	d056      	beq.n	8002640 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002592:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a2c      	ldr	r2, [pc, #176]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 8002598:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800259c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800259e:	f7fe fea1 	bl	80012e4 <HAL_GetTick>
 80025a2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a6:	f7fe fe9d 	bl	80012e4 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e09d      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025b8:	4b23      	ldr	r3, [pc, #140]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f0      	bne.n	80025a6 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c4:	4b20      	ldr	r3, [pc, #128]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	4b20      	ldr	r3, [pc, #128]	; (800264c <HAL_RCC_OscConfig+0x818>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025d4:	3a01      	subs	r2, #1
 80025d6:	0112      	lsls	r2, r2, #4
 80025d8:	4311      	orrs	r1, r2
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025de:	0212      	lsls	r2, r2, #8
 80025e0:	4311      	orrs	r1, r2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025e6:	0852      	lsrs	r2, r2, #1
 80025e8:	3a01      	subs	r2, #1
 80025ea:	0552      	lsls	r2, r2, #21
 80025ec:	4311      	orrs	r1, r2
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025f2:	0852      	lsrs	r2, r2, #1
 80025f4:	3a01      	subs	r2, #1
 80025f6:	0652      	lsls	r2, r2, #25
 80025f8:	430a      	orrs	r2, r1
 80025fa:	4913      	ldr	r1, [pc, #76]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a10      	ldr	r2, [pc, #64]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 8002606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800260a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800260c:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	4a0d      	ldr	r2, [pc, #52]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 8002612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002616:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002618:	f7fe fe64 	bl	80012e4 <HAL_GetTick>
 800261c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002620:	f7fe fe60 	bl	80012e4 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e060      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_RCC_OscConfig+0x814>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800263e:	e058      	b.n	80026f2 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e057      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
 8002644:	40007000 	.word	0x40007000
 8002648:	40021000 	.word	0x40021000
 800264c:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002650:	4b2a      	ldr	r3, [pc, #168]	; (80026fc <HAL_RCC_OscConfig+0x8c8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d14a      	bne.n	80026f2 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800265c:	4b27      	ldr	r3, [pc, #156]	; (80026fc <HAL_RCC_OscConfig+0x8c8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a26      	ldr	r2, [pc, #152]	; (80026fc <HAL_RCC_OscConfig+0x8c8>)
 8002662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002666:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002668:	4b24      	ldr	r3, [pc, #144]	; (80026fc <HAL_RCC_OscConfig+0x8c8>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4a23      	ldr	r2, [pc, #140]	; (80026fc <HAL_RCC_OscConfig+0x8c8>)
 800266e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002672:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002674:	f7fe fe36 	bl	80012e4 <HAL_GetTick>
 8002678:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267c:	f7fe fe32 	bl	80012e4 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e032      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800268e:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <HAL_RCC_OscConfig+0x8c8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f0      	beq.n	800267c <HAL_RCC_OscConfig+0x848>
 800269a:	e02a      	b.n	80026f2 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	2b0c      	cmp	r3, #12
 80026a0:	d025      	beq.n	80026ee <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <HAL_RCC_OscConfig+0x8c8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a15      	ldr	r2, [pc, #84]	; (80026fc <HAL_RCC_OscConfig+0x8c8>)
 80026a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026ac:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80026ae:	4b13      	ldr	r3, [pc, #76]	; (80026fc <HAL_RCC_OscConfig+0x8c8>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	4a12      	ldr	r2, [pc, #72]	; (80026fc <HAL_RCC_OscConfig+0x8c8>)
 80026b4:	f023 0303 	bic.w	r3, r3, #3
 80026b8:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <HAL_RCC_OscConfig+0x8c8>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	4a0f      	ldr	r2, [pc, #60]	; (80026fc <HAL_RCC_OscConfig+0x8c8>)
 80026c0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80026c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c6:	f7fe fe0d 	bl	80012e4 <HAL_GetTick>
 80026ca:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ce:	f7fe fe09 	bl	80012e4 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e009      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_RCC_OscConfig+0x8c8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f0      	bne.n	80026ce <HAL_RCC_OscConfig+0x89a>
 80026ec:	e001      	b.n	80026f2 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3728      	adds	r7, #40	; 0x28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40021000 	.word	0x40021000

08002700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0c8      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002714:	4b66      	ldr	r3, [pc, #408]	; (80028b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d910      	bls.n	8002744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002722:	4b63      	ldr	r3, [pc, #396]	; (80028b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 0207 	bic.w	r2, r3, #7
 800272a:	4961      	ldr	r1, [pc, #388]	; (80028b0 <HAL_RCC_ClockConfig+0x1b0>)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002732:	4b5f      	ldr	r3, [pc, #380]	; (80028b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0b0      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d04c      	beq.n	80027ea <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d107      	bne.n	8002768 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002758:	4b56      	ldr	r3, [pc, #344]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d121      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e09e      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b02      	cmp	r3, #2
 800276e:	d107      	bne.n	8002780 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002770:	4b50      	ldr	r3, [pc, #320]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d115      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e092      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d107      	bne.n	8002798 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002788:	4b4a      	ldr	r3, [pc, #296]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d109      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e086      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002798:	4b46      	ldr	r3, [pc, #280]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e07e      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027a8:	4b42      	ldr	r3, [pc, #264]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f023 0203 	bic.w	r2, r3, #3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	493f      	ldr	r1, [pc, #252]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ba:	f7fe fd93 	bl	80012e4 <HAL_GetTick>
 80027be:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c0:	e00a      	b.n	80027d8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c2:	f7fe fd8f 	bl	80012e4 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e066      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d8:	4b36      	ldr	r3, [pc, #216]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 020c 	and.w	r2, r3, #12
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d1eb      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d008      	beq.n	8002808 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f6:	4b2f      	ldr	r3, [pc, #188]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	492c      	ldr	r1, [pc, #176]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002804:	4313      	orrs	r3, r2
 8002806:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002808:	4b29      	ldr	r3, [pc, #164]	; (80028b0 <HAL_RCC_ClockConfig+0x1b0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d210      	bcs.n	8002838 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002816:	4b26      	ldr	r3, [pc, #152]	; (80028b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 0207 	bic.w	r2, r3, #7
 800281e:	4924      	ldr	r1, [pc, #144]	; (80028b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	4313      	orrs	r3, r2
 8002824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <HAL_RCC_ClockConfig+0x1b0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e036      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002844:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4918      	ldr	r1, [pc, #96]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002852:	4313      	orrs	r3, r2
 8002854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d009      	beq.n	8002876 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002862:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4910      	ldr	r1, [pc, #64]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002876:	f000 f825 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 800287a:	4601      	mov	r1, r0
 800287c:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <HAL_RCC_ClockConfig+0x1b4>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	4a0c      	ldr	r2, [pc, #48]	; (80028b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002888:	5cd3      	ldrb	r3, [r2, r3]
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	fa21 f303 	lsr.w	r3, r1, r3
 8002892:	4a0a      	ldr	r2, [pc, #40]	; (80028bc <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe fcd2 	bl	8001244 <HAL_InitTick>
 80028a0:	4603      	mov	r3, r0
 80028a2:	72fb      	strb	r3, [r7, #11]

  return status;
 80028a4:	7afb      	ldrb	r3, [r7, #11]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40022000 	.word	0x40022000
 80028b4:	40021000 	.word	0x40021000
 80028b8:	080059a4 	.word	0x080059a4
 80028bc:	20000000 	.word	0x20000000
 80028c0:	20000004 	.word	0x20000004

080028c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b089      	sub	sp, #36	; 0x24
 80028c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	2300      	movs	r3, #0
 80028d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028d2:	4b3d      	ldr	r3, [pc, #244]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028dc:	4b3a      	ldr	r3, [pc, #232]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_GetSysClockFreq+0x34>
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	2b0c      	cmp	r3, #12
 80028f0:	d121      	bne.n	8002936 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d11e      	bne.n	8002936 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028f8:	4b33      	ldr	r3, [pc, #204]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d107      	bne.n	8002914 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002904:	4b30      	ldr	r3, [pc, #192]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	f003 030f 	and.w	r3, r3, #15
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	e005      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002914:	4b2c      	ldr	r3, [pc, #176]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002920:	4a2a      	ldr	r2, [pc, #168]	; (80029cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002928:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10d      	bne.n	800294c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002934:	e00a      	b.n	800294c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b04      	cmp	r3, #4
 800293a:	d102      	bne.n	8002942 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800293c:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	e004      	b.n	800294c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2b08      	cmp	r3, #8
 8002946:	d101      	bne.n	800294c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002948:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800294a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	2b0c      	cmp	r3, #12
 8002950:	d133      	bne.n	80029ba <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002952:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d002      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0xa4>
 8002962:	2b03      	cmp	r3, #3
 8002964:	d003      	beq.n	800296e <HAL_RCC_GetSysClockFreq+0xaa>
 8002966:	e005      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002968:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800296a:	617b      	str	r3, [r7, #20]
      break;
 800296c:	e005      	b.n	800297a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800296e:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002970:	617b      	str	r3, [r7, #20]
      break;
 8002972:	e002      	b.n	800297a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	617b      	str	r3, [r7, #20]
      break;
 8002978:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800297a:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x104>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	091b      	lsrs	r3, r3, #4
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	3301      	adds	r3, #1
 8002986:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x104>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	0a1b      	lsrs	r3, r3, #8
 800298e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	fb02 f203 	mul.w	r2, r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	fbb2 f3f3 	udiv	r3, r2, r3
 800299e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029a0:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	0e5b      	lsrs	r3, r3, #25
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	3301      	adds	r3, #1
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029ba:	69bb      	ldr	r3, [r7, #24]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3724      	adds	r7, #36	; 0x24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	40021000 	.word	0x40021000
 80029cc:	080059bc 	.word	0x080059bc
 80029d0:	00f42400 	.word	0x00f42400
 80029d4:	007a1200 	.word	0x007a1200

080029d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029dc:	4b03      	ldr	r3, [pc, #12]	; (80029ec <HAL_RCC_GetHCLKFreq+0x14>)
 80029de:	681b      	ldr	r3, [r3, #0]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	20000000 	.word	0x20000000

080029f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029f4:	f7ff fff0 	bl	80029d8 <HAL_RCC_GetHCLKFreq>
 80029f8:	4601      	mov	r1, r0
 80029fa:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	0a1b      	lsrs	r3, r3, #8
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	4a04      	ldr	r2, [pc, #16]	; (8002a18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a06:	5cd3      	ldrb	r3, [r2, r3]
 8002a08:	f003 031f 	and.w	r3, r3, #31
 8002a0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021000 	.word	0x40021000
 8002a18:	080059b4 	.word	0x080059b4

08002a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a20:	f7ff ffda 	bl	80029d8 <HAL_RCC_GetHCLKFreq>
 8002a24:	4601      	mov	r1, r0
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	0adb      	lsrs	r3, r3, #11
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	4a04      	ldr	r2, [pc, #16]	; (8002a44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a32:	5cd3      	ldrb	r3, [r2, r3]
 8002a34:	f003 031f 	and.w	r3, r3, #31
 8002a38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40021000 	.word	0x40021000
 8002a44:	080059b4 	.word	0x080059b4

08002a48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a50:	2300      	movs	r3, #0
 8002a52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a54:	4b2a      	ldr	r3, [pc, #168]	; (8002b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a60:	f7ff f984 	bl	8001d6c <HAL_PWREx_GetVoltageRange>
 8002a64:	6178      	str	r0, [r7, #20]
 8002a66:	e014      	b.n	8002a92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a68:	4b25      	ldr	r3, [pc, #148]	; (8002b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	4a24      	ldr	r2, [pc, #144]	; (8002b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a72:	6593      	str	r3, [r2, #88]	; 0x58
 8002a74:	4b22      	ldr	r3, [pc, #136]	; (8002b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a80:	f7ff f974 	bl	8001d6c <HAL_PWREx_GetVoltageRange>
 8002a84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a86:	4b1e      	ldr	r3, [pc, #120]	; (8002b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8a:	4a1d      	ldr	r2, [pc, #116]	; (8002b00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a98:	d10b      	bne.n	8002ab2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b80      	cmp	r3, #128	; 0x80
 8002a9e:	d919      	bls.n	8002ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2ba0      	cmp	r3, #160	; 0xa0
 8002aa4:	d902      	bls.n	8002aac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	e013      	b.n	8002ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002aac:	2301      	movs	r3, #1
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	e010      	b.n	8002ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b80      	cmp	r3, #128	; 0x80
 8002ab6:	d902      	bls.n	8002abe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ab8:	2303      	movs	r3, #3
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	e00a      	b.n	8002ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b80      	cmp	r3, #128	; 0x80
 8002ac2:	d102      	bne.n	8002aca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	e004      	b.n	8002ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b70      	cmp	r3, #112	; 0x70
 8002ace:	d101      	bne.n	8002ad4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f023 0207 	bic.w	r2, r3, #7
 8002adc:	4909      	ldr	r1, [pc, #36]	; (8002b04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ae4:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d001      	beq.n	8002af6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40021000 	.word	0x40021000
 8002b04:	40022000 	.word	0x40022000

08002b08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b10:	2300      	movs	r3, #0
 8002b12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b14:	2300      	movs	r3, #0
 8002b16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 809e 	beq.w	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b26:	2300      	movs	r3, #0
 8002b28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b2a:	4b46      	ldr	r3, [pc, #280]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00d      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b40:	4b40      	ldr	r3, [pc, #256]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b44:	4a3f      	ldr	r2, [pc, #252]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b4c:	4b3d      	ldr	r3, [pc, #244]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b5c:	4b3a      	ldr	r3, [pc, #232]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a39      	ldr	r2, [pc, #228]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b68:	f7fe fbbc 	bl	80012e4 <HAL_GetTick>
 8002b6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b6e:	e009      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b70:	f7fe fbb8 	bl	80012e4 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d902      	bls.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	74fb      	strb	r3, [r7, #19]
        break;
 8002b82:	e005      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b84:	4b30      	ldr	r3, [pc, #192]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0ef      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002b90:	7cfb      	ldrb	r3, [r7, #19]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d15a      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b96:	4b2b      	ldr	r3, [pc, #172]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d01e      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d019      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bb2:	4b24      	ldr	r3, [pc, #144]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bbc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bbe:	4b21      	ldr	r3, [pc, #132]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc4:	4a1f      	ldr	r2, [pc, #124]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bce:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd4:	4a1b      	ldr	r2, [pc, #108]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bde:	4a19      	ldr	r2, [pc, #100]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d016      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fb78 	bl	80012e4 <HAL_GetTick>
 8002bf4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bf6:	e00b      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf8:	f7fe fb74 	bl	80012e4 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d902      	bls.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	74fb      	strb	r3, [r7, #19]
            break;
 8002c0e:	e006      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0ec      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002c1e:	7cfb      	ldrb	r3, [r7, #19]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10b      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c24:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	4904      	ldr	r1, [pc, #16]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c3a:	e009      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c3c:	7cfb      	ldrb	r3, [r7, #19]
 8002c3e:	74bb      	strb	r3, [r7, #18]
 8002c40:	e006      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c4c:	7cfb      	ldrb	r3, [r7, #19]
 8002c4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c50:	7c7b      	ldrb	r3, [r7, #17]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d105      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c56:	4b6e      	ldr	r3, [pc, #440]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	4a6d      	ldr	r2, [pc, #436]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c6e:	4b68      	ldr	r3, [pc, #416]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c74:	f023 0203 	bic.w	r2, r3, #3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	4964      	ldr	r1, [pc, #400]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c90:	4b5f      	ldr	r3, [pc, #380]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c96:	f023 020c 	bic.w	r2, r3, #12
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	495c      	ldr	r1, [pc, #368]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cb2:	4b57      	ldr	r3, [pc, #348]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4953      	ldr	r1, [pc, #332]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cd4:	4b4e      	ldr	r3, [pc, #312]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	494b      	ldr	r1, [pc, #300]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00a      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cf6:	4b46      	ldr	r3, [pc, #280]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	4942      	ldr	r1, [pc, #264]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00a      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d18:	4b3d      	ldr	r3, [pc, #244]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	493a      	ldr	r1, [pc, #232]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d3a:	4b35      	ldr	r3, [pc, #212]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	4931      	ldr	r1, [pc, #196]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d5c:	4b2c      	ldr	r3, [pc, #176]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	4929      	ldr	r1, [pc, #164]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d7e:	4b24      	ldr	r3, [pc, #144]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	4920      	ldr	r1, [pc, #128]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d015      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002da0:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dae:	4918      	ldr	r1, [pc, #96]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dbe:	d105      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dc0:	4b13      	ldr	r3, [pc, #76]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4a12      	ldr	r2, [pc, #72]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002dc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dca:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d015      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002dd8:	4b0d      	ldr	r3, [pc, #52]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	490a      	ldr	r1, [pc, #40]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002df6:	d105      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002df8:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002dfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e02:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e04:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000

08002e14 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a04      	ldr	r2, [pc, #16]	; (8002e30 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002e1e:	f043 0304 	orr.w	r3, r3, #4
 8002e22:	6013      	str	r3, [r2, #0]
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40021000 	.word	0x40021000

08002e34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e095      	b.n	8002f72 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d108      	bne.n	8002e60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e56:	d009      	beq.n	8002e6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	61da      	str	r2, [r3, #28]
 8002e5e:	e005      	b.n	8002e6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d106      	bne.n	8002e8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fd fed2 	bl	8000c30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ea2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002eac:	d902      	bls.n	8002eb4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	e002      	b.n	8002eba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eb8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002ec2:	d007      	beq.n	8002ed4 <HAL_SPI_Init+0xa0>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ecc:	d002      	beq.n	8002ed4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f16:	ea42 0103 	orr.w	r1, r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	0c1b      	lsrs	r3, r3, #16
 8002f30:	f003 0204 	and.w	r2, r3, #4
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002f50:	ea42 0103 	orr.w	r1, r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	4613      	mov	r3, r2
 8002f88:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_SPI_Transmit_DMA+0x20>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e0d8      	b.n	800314e <HAL_SPI_Transmit_DMA+0x1d2>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d002      	beq.n	8002fb6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002fb4:	e0c6      	b.n	8003144 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <HAL_SPI_Transmit_DMA+0x46>
 8002fbc:	88fb      	ldrh	r3, [r7, #6]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d102      	bne.n	8002fc8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002fc6:	e0bd      	b.n	8003144 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2203      	movs	r2, #3
 8002fcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	88fa      	ldrh	r2, [r7, #6]
 8002fe0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	88fa      	ldrh	r2, [r7, #6]
 8002fe6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003012:	d10f      	bne.n	8003034 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003022:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003032:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003038:	4a47      	ldr	r2, [pc, #284]	; (8003158 <HAL_SPI_Transmit_DMA+0x1dc>)
 800303a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003040:	4a46      	ldr	r2, [pc, #280]	; (800315c <HAL_SPI_Transmit_DMA+0x1e0>)
 8003042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003048:	4a45      	ldr	r2, [pc, #276]	; (8003160 <HAL_SPI_Transmit_DMA+0x1e4>)
 800304a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003050:	2200      	movs	r2, #0
 8003052:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003062:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800306c:	d82d      	bhi.n	80030ca <HAL_SPI_Transmit_DMA+0x14e>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003078:	d127      	bne.n	80030ca <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800307e:	b29b      	uxth	r3, r3
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10f      	bne.n	80030a8 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003096:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800309c:	b29b      	uxth	r3, r3
 800309e:	085b      	lsrs	r3, r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030a6:	e010      	b.n	80030ca <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030b6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030bc:	b29b      	uxth	r3, r3
 80030be:	085b      	lsrs	r3, r3, #1
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3301      	adds	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	4619      	mov	r1, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	330c      	adds	r3, #12
 80030da:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80030e2:	f7fe faf7 	bl	80016d4 <HAL_DMA_Start_IT>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00c      	beq.n	8003106 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f0:	f043 0210 	orr.w	r2, r3, #16
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8003104:	e01e      	b.n	8003144 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003110:	2b40      	cmp	r3, #64	; 0x40
 8003112:	d007      	beq.n	8003124 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003122:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0220 	orr.w	r2, r2, #32
 8003132:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0202 	orr.w	r2, r2, #2
 8003142:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800314c:	7dfb      	ldrb	r3, [r7, #23]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	080038cb 	.word	0x080038cb
 800315c:	080036ed 	.word	0x080036ed
 8003160:	0800391f 	.word	0x0800391f

08003164 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003180:	2302      	movs	r3, #2
 8003182:	e16c      	b.n	800345e <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003192:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800319a:	7dbb      	ldrb	r3, [r7, #22]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d00d      	beq.n	80031bc <HAL_SPI_TransmitReceive_DMA+0x58>
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031a6:	d106      	bne.n	80031b6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d102      	bne.n	80031b6 <HAL_SPI_TransmitReceive_DMA+0x52>
 80031b0:	7dbb      	ldrb	r3, [r7, #22]
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d002      	beq.n	80031bc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80031b6:	2302      	movs	r3, #2
 80031b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031ba:	e14b      	b.n	8003454 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d005      	beq.n	80031ce <HAL_SPI_TransmitReceive_DMA+0x6a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <HAL_SPI_TransmitReceive_DMA+0x6a>
 80031c8:	887b      	ldrh	r3, [r7, #2]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d102      	bne.n	80031d4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031d2:	e13f      	b.n	8003454 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d003      	beq.n	80031e8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2205      	movs	r2, #5
 80031e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	887a      	ldrh	r2, [r7, #2]
 80031f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	887a      	ldrh	r2, [r7, #2]
 80031fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	887a      	ldrh	r2, [r7, #2]
 800320a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	887a      	ldrh	r2, [r7, #2]
 8003212:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8003230:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800323a:	d908      	bls.n	800324e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800324a:	605a      	str	r2, [r3, #4]
 800324c:	e06f      	b.n	800332e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800325c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003268:	d126      	bne.n	80032b8 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10f      	bne.n	8003296 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003284:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800328a:	b29b      	uxth	r3, r3
 800328c:	085b      	lsrs	r3, r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003294:	e010      	b.n	80032b8 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032a4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	085b      	lsrs	r3, r3, #1
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3301      	adds	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c2:	d134      	bne.n	800332e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032d2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032da:	b29b      	uxth	r3, r3
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d111      	bne.n	8003308 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032f2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	085b      	lsrs	r3, r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003306:	e012      	b.n	800332e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003316:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800331e:	b29b      	uxth	r3, r3
 8003320:	085b      	lsrs	r3, r3, #1
 8003322:	b29b      	uxth	r3, r3
 8003324:	3301      	adds	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b04      	cmp	r3, #4
 8003338:	d108      	bne.n	800334c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333e:	4a4a      	ldr	r2, [pc, #296]	; (8003468 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8003340:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003346:	4a49      	ldr	r2, [pc, #292]	; (800346c <HAL_SPI_TransmitReceive_DMA+0x308>)
 8003348:	62da      	str	r2, [r3, #44]	; 0x2c
 800334a:	e007      	b.n	800335c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003350:	4a47      	ldr	r2, [pc, #284]	; (8003470 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8003352:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003358:	4a46      	ldr	r2, [pc, #280]	; (8003474 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800335a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003360:	4a45      	ldr	r2, [pc, #276]	; (8003478 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8003362:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003368:	2200      	movs	r2, #0
 800336a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	330c      	adds	r3, #12
 8003376:	4619      	mov	r1, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003384:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003386:	f7fe f9a5 	bl	80016d4 <HAL_DMA_Start_IT>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00c      	beq.n	80033aa <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003394:	f043 0210 	orr.w	r2, r3, #16
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80033a8:	e054      	b.n	8003454 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0201 	orr.w	r2, r2, #1
 80033b8:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033be:	2200      	movs	r2, #0
 80033c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c6:	2200      	movs	r2, #0
 80033c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ce:	2200      	movs	r2, #0
 80033d0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d6:	2200      	movs	r2, #0
 80033d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e2:	4619      	mov	r1, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	330c      	adds	r3, #12
 80033ea:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80033f2:	f7fe f96f 	bl	80016d4 <HAL_DMA_Start_IT>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00c      	beq.n	8003416 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003400:	f043 0210 	orr.w	r2, r3, #16
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8003414:	e01e      	b.n	8003454 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003420:	2b40      	cmp	r3, #64	; 0x40
 8003422:	d007      	beq.n	8003434 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003432:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0220 	orr.w	r2, r2, #32
 8003442:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0202 	orr.w	r2, r2, #2
 8003452:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800345c:	7dfb      	ldrb	r3, [r7, #23]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	080038e7 	.word	0x080038e7
 800346c:	08003793 	.word	0x08003793
 8003470:	08003903 	.word	0x08003903
 8003474:	0800383b 	.word	0x0800383b
 8003478:	0800391f 	.word	0x0800391f

0800347c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	099b      	lsrs	r3, r3, #6
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10f      	bne.n	80034c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	099b      	lsrs	r3, r3, #6
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d004      	beq.n	80034c0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	4798      	blx	r3
    return;
 80034be:	e0d8      	b.n	8003672 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	085b      	lsrs	r3, r3, #1
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_SPI_IRQHandler+0x66>
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	09db      	lsrs	r3, r3, #7
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d004      	beq.n	80034e2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	4798      	blx	r3
    return;
 80034e0:	e0c7      	b.n	8003672 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10c      	bne.n	8003508 <HAL_SPI_IRQHandler+0x8c>
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	099b      	lsrs	r3, r3, #6
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	0a1b      	lsrs	r3, r3, #8
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 80b5 	beq.w	8003672 <HAL_SPI_IRQHandler+0x1f6>
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80ae 	beq.w	8003672 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	099b      	lsrs	r3, r3, #6
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d023      	beq.n	800356a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b03      	cmp	r3, #3
 800352c:	d011      	beq.n	8003552 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003532:	f043 0204 	orr.w	r2, r3, #4
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	e00b      	b.n	800356a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003552:	2300      	movs	r3, #0
 8003554:	613b      	str	r3, [r7, #16]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	693b      	ldr	r3, [r7, #16]
        return;
 8003568:	e083      	b.n	8003672 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	095b      	lsrs	r3, r3, #5
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d014      	beq.n	80035a0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800357a:	f043 0201 	orr.w	r2, r3, #1
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	0a1b      	lsrs	r3, r3, #8
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00c      	beq.n	80035c6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b0:	f043 0208 	orr.w	r2, r3, #8
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80035b8:	2300      	movs	r3, #0
 80035ba:	60bb      	str	r3, [r7, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	60bb      	str	r3, [r7, #8]
 80035c4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d050      	beq.n	8003670 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035dc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d104      	bne.n	80035fa <HAL_SPI_IRQHandler+0x17e>
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d034      	beq.n	8003664 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0203 	bic.w	r2, r2, #3
 8003608:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360e:	2b00      	cmp	r3, #0
 8003610:	d011      	beq.n	8003636 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003616:	4a18      	ldr	r2, [pc, #96]	; (8003678 <HAL_SPI_IRQHandler+0x1fc>)
 8003618:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361e:	4618      	mov	r0, r3
 8003620:	f7fe f8b8 	bl	8001794 <HAL_DMA_Abort_IT>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363a:	2b00      	cmp	r3, #0
 800363c:	d016      	beq.n	800366c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003642:	4a0d      	ldr	r2, [pc, #52]	; (8003678 <HAL_SPI_IRQHandler+0x1fc>)
 8003644:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe f8a2 	bl	8001794 <HAL_DMA_Abort_IT>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003662:	e003      	b.n	800366c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7fd fa3f 	bl	8000ae8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800366a:	e000      	b.n	800366e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800366c:	bf00      	nop
    return;
 800366e:	bf00      	nop
 8003670:	bf00      	nop
  }
}
 8003672:	3720      	adds	r7, #32
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	0800395f 	.word	0x0800395f

0800367c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036c6:	b2db      	uxtb	r3, r3
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036fa:	f7fd fdf3 	bl	80012e4 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b20      	cmp	r3, #32
 800370c:	d03b      	beq.n	8003786 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0220 	bic.w	r2, r2, #32
 800371c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0202 	bic.w	r2, r2, #2
 800372c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	2164      	movs	r1, #100	; 0x64
 8003732:	6978      	ldr	r0, [r7, #20]
 8003734:	f000 fa96 	bl	8003c64 <SPI_EndRxTxTransaction>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003742:	f043 0220 	orr.w	r2, r3, #32
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10a      	bne.n	8003768 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003752:	2300      	movs	r3, #0
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2200      	movs	r2, #0
 800376c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800377e:	6978      	ldr	r0, [r7, #20]
 8003780:	f7fd f9b2 	bl	8000ae8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003784:	e002      	b.n	800378c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003786:	6978      	ldr	r0, [r7, #20]
 8003788:	f7fd f94e 	bl	8000a28 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037a0:	f7fd fda0 	bl	80012e4 <HAL_GetTick>
 80037a4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0320 	and.w	r3, r3, #32
 80037b0:	2b20      	cmp	r3, #32
 80037b2:	d03c      	beq.n	800382e <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0220 	bic.w	r2, r2, #32
 80037c2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10d      	bne.n	80037e8 <SPI_DMAReceiveCplt+0x56>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037d4:	d108      	bne.n	80037e8 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0203 	bic.w	r2, r2, #3
 80037e4:	605a      	str	r2, [r3, #4]
 80037e6:	e007      	b.n	80037f8 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0201 	bic.w	r2, r2, #1
 80037f6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	2164      	movs	r1, #100	; 0x64
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 f9d9 	bl	8003bb4 <SPI_EndRxTransaction>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f7fd f95e 	bl	8000ae8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800382c:	e002      	b.n	8003834 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f7fd f91c 	bl	8000a6c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b084      	sub	sp, #16
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003848:	f7fd fd4c 	bl	80012e4 <HAL_GetTick>
 800384c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b20      	cmp	r3, #32
 800385a:	d030      	beq.n	80038be <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0220 	bic.w	r2, r2, #32
 800386a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	2164      	movs	r1, #100	; 0x64
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 f9f7 	bl	8003c64 <SPI_EndRxTxTransaction>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003880:	f043 0220 	orr.w	r2, r3, #32
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0203 	bic.w	r2, r2, #3
 8003896:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f7fd f916 	bl	8000ae8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80038bc:	e002      	b.n	80038c4 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f7fd f890 	bl	80009e4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b084      	sub	sp, #16
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f7ff fecf 	bl	800367c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80038de:	bf00      	nop
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f7ff fecb 	bl	8003690 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80038fa:	bf00      	nop
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390e:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f7ff fec7 	bl	80036a4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0203 	bic.w	r2, r2, #3
 800393a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003940:	f043 0210 	orr.w	r2, r3, #16
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f7fd f8c9 	bl	8000ae8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003956:	bf00      	nop
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f7fd f8b4 	bl	8000ae8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003980:	bf00      	nop
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	4613      	mov	r3, r2
 8003996:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003998:	f7fd fca4 	bl	80012e4 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	4413      	add	r3, r2
 80039a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039a8:	f7fd fc9c 	bl	80012e4 <HAL_GetTick>
 80039ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039ae:	4b39      	ldr	r3, [pc, #228]	; (8003a94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	015b      	lsls	r3, r3, #5
 80039b4:	0d1b      	lsrs	r3, r3, #20
 80039b6:	69fa      	ldr	r2, [r7, #28]
 80039b8:	fb02 f303 	mul.w	r3, r2, r3
 80039bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039be:	e054      	b.n	8003a6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c6:	d050      	beq.n	8003a6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039c8:	f7fd fc8c 	bl	80012e4 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	69fa      	ldr	r2, [r7, #28]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d902      	bls.n	80039de <SPI_WaitFlagStateUntilTimeout+0x56>
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d13d      	bne.n	8003a5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039f6:	d111      	bne.n	8003a1c <SPI_WaitFlagStateUntilTimeout+0x94>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a00:	d004      	beq.n	8003a0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a0a:	d107      	bne.n	8003a1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a24:	d10f      	bne.n	8003a46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e017      	b.n	8003a8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	4013      	ands	r3, r2
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	bf0c      	ite	eq
 8003a7a:	2301      	moveq	r3, #1
 8003a7c:	2300      	movne	r3, #0
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	461a      	mov	r2, r3
 8003a82:	79fb      	ldrb	r3, [r7, #7]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d19b      	bne.n	80039c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3720      	adds	r7, #32
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20000000 	.word	0x20000000

08003a98 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003aa6:	f7fd fc1d 	bl	80012e4 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aae:	1a9b      	subs	r3, r3, r2
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ab6:	f7fd fc15 	bl	80012e4 <HAL_GetTick>
 8003aba:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003abc:	4b3c      	ldr	r3, [pc, #240]	; (8003bb0 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	00da      	lsls	r2, r3, #3
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	0d1b      	lsrs	r3, r3, #20
 8003acc:	69fa      	ldr	r2, [r7, #28]
 8003ace:	fb02 f303 	mul.w	r3, r2, r3
 8003ad2:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ad4:	e05f      	b.n	8003b96 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003adc:	d106      	bne.n	8003aec <SPI_WaitFifoStateUntilTimeout+0x54>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d103      	bne.n	8003aec <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	330c      	adds	r3, #12
 8003aea:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af2:	d050      	beq.n	8003b96 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003af4:	f7fd fbf6 	bl	80012e4 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d902      	bls.n	8003b0a <SPI_WaitFifoStateUntilTimeout+0x72>
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d13d      	bne.n	8003b86 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b22:	d111      	bne.n	8003b48 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b2c:	d004      	beq.n	8003b38 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b36:	d107      	bne.n	8003b48 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b50:	d10f      	bne.n	8003b72 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e010      	b.n	8003ba8 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d197      	bne.n	8003ad6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3720      	adds	r7, #32
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	20000000 	.word	0x20000000

08003bb4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bc8:	d111      	bne.n	8003bee <SPI_EndRxTransaction+0x3a>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd2:	d004      	beq.n	8003bde <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bdc:	d107      	bne.n	8003bee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bec:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2180      	movs	r1, #128	; 0x80
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f7ff fec5 	bl	8003988 <SPI_WaitFlagStateUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d007      	beq.n	8003c14 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c08:	f043 0220 	orr.w	r2, r3, #32
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e023      	b.n	8003c5c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c1c:	d11d      	bne.n	8003c5a <SPI_EndRxTransaction+0xa6>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c26:	d004      	beq.n	8003c32 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c30:	d113      	bne.n	8003c5a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f7ff ff2a 	bl	8003a98 <SPI_WaitFifoStateUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d007      	beq.n	8003c5a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c4e:	f043 0220 	orr.w	r2, r3, #32
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e000      	b.n	8003c5c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af02      	add	r7, sp, #8
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7ff ff0b 	bl	8003a98 <SPI_WaitFifoStateUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d007      	beq.n	8003c98 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c8c:	f043 0220 	orr.w	r2, r3, #32
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e027      	b.n	8003ce8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	2180      	movs	r1, #128	; 0x80
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f7ff fe70 	bl	8003988 <SPI_WaitFlagStateUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d007      	beq.n	8003cbe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb2:	f043 0220 	orr.w	r2, r3, #32
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e014      	b.n	8003ce8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f7ff fee4 	bl	8003a98 <SPI_WaitFifoStateUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d007      	beq.n	8003ce6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cda:	f043 0220 	orr.w	r2, r3, #32
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e000      	b.n	8003ce8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e040      	b.n	8003d84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7fd f9d4 	bl	80010c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2224      	movs	r2, #36	; 0x24
 8003d1c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0201 	bic.w	r2, r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fa1c 	bl	800416c <UART_SetConfig>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d101      	bne.n	8003d3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e022      	b.n	8003d84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 fc46 	bl	80045d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0201 	orr.w	r2, r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fccd 	bl	800471c <UART_CheckIdleState>
 8003d82:	4603      	mov	r3, r0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08a      	sub	sp, #40	; 0x28
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	f040 8081 	bne.w	8003ea8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <HAL_UART_Transmit+0x26>
 8003dac:	88fb      	ldrh	r3, [r7, #6]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e079      	b.n	8003eaa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <HAL_UART_Transmit+0x38>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e072      	b.n	8003eaa <HAL_UART_Transmit+0x11e>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2221      	movs	r2, #33	; 0x21
 8003dd6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003dd8:	f7fd fa84 	bl	80012e4 <HAL_GetTick>
 8003ddc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	88fa      	ldrh	r2, [r7, #6]
 8003de2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	88fa      	ldrh	r2, [r7, #6]
 8003dea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df6:	d108      	bne.n	8003e0a <HAL_UART_Transmit+0x7e>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d104      	bne.n	8003e0a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003e00:	2300      	movs	r3, #0
 8003e02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	61bb      	str	r3, [r7, #24]
 8003e08:	e003      	b.n	8003e12 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003e1a:	e02d      	b.n	8003e78 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2200      	movs	r2, #0
 8003e24:	2180      	movs	r1, #128	; 0x80
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 fcbd 	bl	80047a6 <UART_WaitOnFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e039      	b.n	8003eaa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10b      	bne.n	8003e54 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	881a      	ldrh	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e48:	b292      	uxth	r2, r2
 8003e4a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	3302      	adds	r3, #2
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	e008      	b.n	8003e66 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	781a      	ldrb	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	b292      	uxth	r2, r2
 8003e5e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	3301      	adds	r3, #1
 8003e64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1cb      	bne.n	8003e1c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	2140      	movs	r1, #64	; 0x40
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 fc89 	bl	80047a6 <UART_WaitOnFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e005      	b.n	8003eaa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	e000      	b.n	8003eaa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003ea8:	2302      	movs	r3, #2
  }
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3720      	adds	r7, #32
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	f640 030f 	movw	r3, #2063	; 0x80f
 8003eda:	4013      	ands	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d113      	bne.n	8003f0c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	f003 0320 	and.w	r3, r3, #32
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00e      	beq.n	8003f0c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	f003 0320 	and.w	r3, r3, #32
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d009      	beq.n	8003f0c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 8114 	beq.w	800412a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	4798      	blx	r3
      }
      return;
 8003f0a:	e10e      	b.n	800412a <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 80d6 	beq.w	80040c0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d105      	bne.n	8003f2a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4b86      	ldr	r3, [pc, #536]	; (800413c <HAL_UART_IRQHandler+0x288>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 80cb 	beq.w	80040c0 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00e      	beq.n	8003f52 <HAL_UART_IRQHandler+0x9e>
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d009      	beq.n	8003f52 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2201      	movs	r2, #1
 8003f44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f4a:	f043 0201 	orr.w	r2, r3, #1
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00e      	beq.n	8003f7a <HAL_UART_IRQHandler+0xc6>
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d009      	beq.n	8003f7a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f72:	f043 0204 	orr.w	r2, r3, #4
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00e      	beq.n	8003fa2 <HAL_UART_IRQHandler+0xee>
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2204      	movs	r2, #4
 8003f94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f9a:	f043 0202 	orr.w	r2, r3, #2
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d013      	beq.n	8003fd4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d104      	bne.n	8003fc0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d009      	beq.n	8003fd4 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2208      	movs	r2, #8
 8003fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fcc:	f043 0208 	orr.w	r2, r3, #8
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00f      	beq.n	8003ffe <HAL_UART_IRQHandler+0x14a>
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00a      	beq.n	8003ffe <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ff0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ff6:	f043 0220 	orr.w	r2, r3, #32
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 8093 	beq.w	800412e <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00c      	beq.n	800402c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b00      	cmp	r3, #0
 800401a:	d007      	beq.n	800402c <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004030:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	d004      	beq.n	800404a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004046:	2b00      	cmp	r3, #0
 8004048:	d031      	beq.n	80040ae <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fc26 	bl	800489c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405a:	2b40      	cmp	r3, #64	; 0x40
 800405c:	d123      	bne.n	80040a6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800406c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d013      	beq.n	800409e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800407a:	4a31      	ldr	r2, [pc, #196]	; (8004140 <HAL_UART_IRQHandler+0x28c>)
 800407c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004082:	4618      	mov	r0, r3
 8004084:	f7fd fb86 	bl	8001794 <HAL_DMA_Abort_IT>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d016      	beq.n	80040bc <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004098:	4610      	mov	r0, r2
 800409a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409c:	e00e      	b.n	80040bc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f85a 	bl	8004158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a4:	e00a      	b.n	80040bc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f856 	bl	8004158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ac:	e006      	b.n	80040bc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f852 	bl	8004158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80040ba:	e038      	b.n	800412e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040bc:	bf00      	nop
    return;
 80040be:	e036      	b.n	800412e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00d      	beq.n	80040e6 <HAL_UART_IRQHandler+0x232>
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fc2b 	bl	800493a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040e4:	e026      	b.n	8004134 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00d      	beq.n	800410c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d008      	beq.n	800410c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d017      	beq.n	8004132 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	4798      	blx	r3
    }
    return;
 800410a:	e012      	b.n	8004132 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00e      	beq.n	8004134 <HAL_UART_IRQHandler+0x280>
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411c:	2b00      	cmp	r3, #0
 800411e:	d009      	beq.n	8004134 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fbf1 	bl	8004908 <UART_EndTransmit_IT>
    return;
 8004126:	bf00      	nop
 8004128:	e004      	b.n	8004134 <HAL_UART_IRQHandler+0x280>
      return;
 800412a:	bf00      	nop
 800412c:	e002      	b.n	8004134 <HAL_UART_IRQHandler+0x280>
    return;
 800412e:	bf00      	nop
 8004130:	e000      	b.n	8004134 <HAL_UART_IRQHandler+0x280>
    return;
 8004132:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004134:	3720      	adds	r7, #32
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	04000120 	.word	0x04000120
 8004140:	080048dd 	.word	0x080048dd

08004144 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800416c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004170:	b088      	sub	sp, #32
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	4313      	orrs	r3, r2
 8004190:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	4baa      	ldr	r3, [pc, #680]	; (8004444 <UART_SetConfig+0x2d8>)
 800419a:	4013      	ands	r3, r2
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6812      	ldr	r2, [r2, #0]
 80041a0:	69f9      	ldr	r1, [r7, #28]
 80041a2:	430b      	orrs	r3, r1
 80041a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4aa0      	ldr	r2, [pc, #640]	; (8004448 <UART_SetConfig+0x2dc>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d004      	beq.n	80041d6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	69fa      	ldr	r2, [r7, #28]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	69fa      	ldr	r2, [r7, #28]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a97      	ldr	r2, [pc, #604]	; (800444c <UART_SetConfig+0x2e0>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d121      	bne.n	8004238 <UART_SetConfig+0xcc>
 80041f4:	4b96      	ldr	r3, [pc, #600]	; (8004450 <UART_SetConfig+0x2e4>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d816      	bhi.n	8004230 <UART_SetConfig+0xc4>
 8004202:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <UART_SetConfig+0x9c>)
 8004204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004208:	08004219 	.word	0x08004219
 800420c:	08004225 	.word	0x08004225
 8004210:	0800421f 	.word	0x0800421f
 8004214:	0800422b 	.word	0x0800422b
 8004218:	2301      	movs	r3, #1
 800421a:	76fb      	strb	r3, [r7, #27]
 800421c:	e098      	b.n	8004350 <UART_SetConfig+0x1e4>
 800421e:	2302      	movs	r3, #2
 8004220:	76fb      	strb	r3, [r7, #27]
 8004222:	e095      	b.n	8004350 <UART_SetConfig+0x1e4>
 8004224:	2304      	movs	r3, #4
 8004226:	76fb      	strb	r3, [r7, #27]
 8004228:	e092      	b.n	8004350 <UART_SetConfig+0x1e4>
 800422a:	2308      	movs	r3, #8
 800422c:	76fb      	strb	r3, [r7, #27]
 800422e:	e08f      	b.n	8004350 <UART_SetConfig+0x1e4>
 8004230:	2310      	movs	r3, #16
 8004232:	76fb      	strb	r3, [r7, #27]
 8004234:	bf00      	nop
 8004236:	e08b      	b.n	8004350 <UART_SetConfig+0x1e4>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a85      	ldr	r2, [pc, #532]	; (8004454 <UART_SetConfig+0x2e8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d134      	bne.n	80042ac <UART_SetConfig+0x140>
 8004242:	4b83      	ldr	r3, [pc, #524]	; (8004450 <UART_SetConfig+0x2e4>)
 8004244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004248:	f003 030c 	and.w	r3, r3, #12
 800424c:	2b0c      	cmp	r3, #12
 800424e:	d829      	bhi.n	80042a4 <UART_SetConfig+0x138>
 8004250:	a201      	add	r2, pc, #4	; (adr r2, 8004258 <UART_SetConfig+0xec>)
 8004252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004256:	bf00      	nop
 8004258:	0800428d 	.word	0x0800428d
 800425c:	080042a5 	.word	0x080042a5
 8004260:	080042a5 	.word	0x080042a5
 8004264:	080042a5 	.word	0x080042a5
 8004268:	08004299 	.word	0x08004299
 800426c:	080042a5 	.word	0x080042a5
 8004270:	080042a5 	.word	0x080042a5
 8004274:	080042a5 	.word	0x080042a5
 8004278:	08004293 	.word	0x08004293
 800427c:	080042a5 	.word	0x080042a5
 8004280:	080042a5 	.word	0x080042a5
 8004284:	080042a5 	.word	0x080042a5
 8004288:	0800429f 	.word	0x0800429f
 800428c:	2300      	movs	r3, #0
 800428e:	76fb      	strb	r3, [r7, #27]
 8004290:	e05e      	b.n	8004350 <UART_SetConfig+0x1e4>
 8004292:	2302      	movs	r3, #2
 8004294:	76fb      	strb	r3, [r7, #27]
 8004296:	e05b      	b.n	8004350 <UART_SetConfig+0x1e4>
 8004298:	2304      	movs	r3, #4
 800429a:	76fb      	strb	r3, [r7, #27]
 800429c:	e058      	b.n	8004350 <UART_SetConfig+0x1e4>
 800429e:	2308      	movs	r3, #8
 80042a0:	76fb      	strb	r3, [r7, #27]
 80042a2:	e055      	b.n	8004350 <UART_SetConfig+0x1e4>
 80042a4:	2310      	movs	r3, #16
 80042a6:	76fb      	strb	r3, [r7, #27]
 80042a8:	bf00      	nop
 80042aa:	e051      	b.n	8004350 <UART_SetConfig+0x1e4>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a69      	ldr	r2, [pc, #420]	; (8004458 <UART_SetConfig+0x2ec>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d120      	bne.n	80042f8 <UART_SetConfig+0x18c>
 80042b6:	4b66      	ldr	r3, [pc, #408]	; (8004450 <UART_SetConfig+0x2e4>)
 80042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	d00f      	beq.n	80042e4 <UART_SetConfig+0x178>
 80042c4:	2b10      	cmp	r3, #16
 80042c6:	d802      	bhi.n	80042ce <UART_SetConfig+0x162>
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <UART_SetConfig+0x16c>
 80042cc:	e010      	b.n	80042f0 <UART_SetConfig+0x184>
 80042ce:	2b20      	cmp	r3, #32
 80042d0:	d005      	beq.n	80042de <UART_SetConfig+0x172>
 80042d2:	2b30      	cmp	r3, #48	; 0x30
 80042d4:	d009      	beq.n	80042ea <UART_SetConfig+0x17e>
 80042d6:	e00b      	b.n	80042f0 <UART_SetConfig+0x184>
 80042d8:	2300      	movs	r3, #0
 80042da:	76fb      	strb	r3, [r7, #27]
 80042dc:	e038      	b.n	8004350 <UART_SetConfig+0x1e4>
 80042de:	2302      	movs	r3, #2
 80042e0:	76fb      	strb	r3, [r7, #27]
 80042e2:	e035      	b.n	8004350 <UART_SetConfig+0x1e4>
 80042e4:	2304      	movs	r3, #4
 80042e6:	76fb      	strb	r3, [r7, #27]
 80042e8:	e032      	b.n	8004350 <UART_SetConfig+0x1e4>
 80042ea:	2308      	movs	r3, #8
 80042ec:	76fb      	strb	r3, [r7, #27]
 80042ee:	e02f      	b.n	8004350 <UART_SetConfig+0x1e4>
 80042f0:	2310      	movs	r3, #16
 80042f2:	76fb      	strb	r3, [r7, #27]
 80042f4:	bf00      	nop
 80042f6:	e02b      	b.n	8004350 <UART_SetConfig+0x1e4>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a52      	ldr	r2, [pc, #328]	; (8004448 <UART_SetConfig+0x2dc>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d124      	bne.n	800434c <UART_SetConfig+0x1e0>
 8004302:	4b53      	ldr	r3, [pc, #332]	; (8004450 <UART_SetConfig+0x2e4>)
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004308:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800430c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004310:	d012      	beq.n	8004338 <UART_SetConfig+0x1cc>
 8004312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004316:	d802      	bhi.n	800431e <UART_SetConfig+0x1b2>
 8004318:	2b00      	cmp	r3, #0
 800431a:	d007      	beq.n	800432c <UART_SetConfig+0x1c0>
 800431c:	e012      	b.n	8004344 <UART_SetConfig+0x1d8>
 800431e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004322:	d006      	beq.n	8004332 <UART_SetConfig+0x1c6>
 8004324:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004328:	d009      	beq.n	800433e <UART_SetConfig+0x1d2>
 800432a:	e00b      	b.n	8004344 <UART_SetConfig+0x1d8>
 800432c:	2300      	movs	r3, #0
 800432e:	76fb      	strb	r3, [r7, #27]
 8004330:	e00e      	b.n	8004350 <UART_SetConfig+0x1e4>
 8004332:	2302      	movs	r3, #2
 8004334:	76fb      	strb	r3, [r7, #27]
 8004336:	e00b      	b.n	8004350 <UART_SetConfig+0x1e4>
 8004338:	2304      	movs	r3, #4
 800433a:	76fb      	strb	r3, [r7, #27]
 800433c:	e008      	b.n	8004350 <UART_SetConfig+0x1e4>
 800433e:	2308      	movs	r3, #8
 8004340:	76fb      	strb	r3, [r7, #27]
 8004342:	e005      	b.n	8004350 <UART_SetConfig+0x1e4>
 8004344:	2310      	movs	r3, #16
 8004346:	76fb      	strb	r3, [r7, #27]
 8004348:	bf00      	nop
 800434a:	e001      	b.n	8004350 <UART_SetConfig+0x1e4>
 800434c:	2310      	movs	r3, #16
 800434e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a3c      	ldr	r2, [pc, #240]	; (8004448 <UART_SetConfig+0x2dc>)
 8004356:	4293      	cmp	r3, r2
 8004358:	f040 8082 	bne.w	8004460 <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800435c:	7efb      	ldrb	r3, [r7, #27]
 800435e:	2b08      	cmp	r3, #8
 8004360:	d823      	bhi.n	80043aa <UART_SetConfig+0x23e>
 8004362:	a201      	add	r2, pc, #4	; (adr r2, 8004368 <UART_SetConfig+0x1fc>)
 8004364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004368:	0800438d 	.word	0x0800438d
 800436c:	080043ab 	.word	0x080043ab
 8004370:	08004395 	.word	0x08004395
 8004374:	080043ab 	.word	0x080043ab
 8004378:	0800439b 	.word	0x0800439b
 800437c:	080043ab 	.word	0x080043ab
 8004380:	080043ab 	.word	0x080043ab
 8004384:	080043ab 	.word	0x080043ab
 8004388:	080043a3 	.word	0x080043a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800438c:	f7fe fb30 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 8004390:	6178      	str	r0, [r7, #20]
        break;
 8004392:	e00f      	b.n	80043b4 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004394:	4b31      	ldr	r3, [pc, #196]	; (800445c <UART_SetConfig+0x2f0>)
 8004396:	617b      	str	r3, [r7, #20]
        break;
 8004398:	e00c      	b.n	80043b4 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800439a:	f7fe fa93 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 800439e:	6178      	str	r0, [r7, #20]
        break;
 80043a0:	e008      	b.n	80043b4 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043a6:	617b      	str	r3, [r7, #20]
        break;
 80043a8:	e004      	b.n	80043b4 <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	76bb      	strb	r3, [r7, #26]
        break;
 80043b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 8100 	beq.w	80045bc <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	4613      	mov	r3, r2
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	4413      	add	r3, r2
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d305      	bcc.n	80043d8 <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d902      	bls.n	80043de <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	76bb      	strb	r3, [r7, #26]
 80043dc:	e0ee      	b.n	80045bc <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	4619      	mov	r1, r3
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	f04f 0300 	mov.w	r3, #0
 80043ea:	f04f 0400 	mov.w	r4, #0
 80043ee:	0214      	lsls	r4, r2, #8
 80043f0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80043f4:	020b      	lsls	r3, r1, #8
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6852      	ldr	r2, [r2, #4]
 80043fa:	0852      	lsrs	r2, r2, #1
 80043fc:	4611      	mov	r1, r2
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	eb13 0b01 	adds.w	fp, r3, r1
 8004406:	eb44 0c02 	adc.w	ip, r4, r2
 800440a:	4658      	mov	r0, fp
 800440c:	4661      	mov	r1, ip
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f04f 0400 	mov.w	r4, #0
 8004416:	461a      	mov	r2, r3
 8004418:	4623      	mov	r3, r4
 800441a:	f7fb ff29 	bl	8000270 <__aeabi_uldivmod>
 800441e:	4603      	mov	r3, r0
 8004420:	460c      	mov	r4, r1
 8004422:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800442a:	d308      	bcc.n	800443e <UART_SetConfig+0x2d2>
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004432:	d204      	bcs.n	800443e <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	60da      	str	r2, [r3, #12]
 800443c:	e0be      	b.n	80045bc <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	76bb      	strb	r3, [r7, #26]
 8004442:	e0bb      	b.n	80045bc <UART_SetConfig+0x450>
 8004444:	efff69f3 	.word	0xefff69f3
 8004448:	40008000 	.word	0x40008000
 800444c:	40013800 	.word	0x40013800
 8004450:	40021000 	.word	0x40021000
 8004454:	40004400 	.word	0x40004400
 8004458:	40004800 	.word	0x40004800
 800445c:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004468:	d15c      	bne.n	8004524 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 800446a:	7efb      	ldrb	r3, [r7, #27]
 800446c:	2b08      	cmp	r3, #8
 800446e:	d828      	bhi.n	80044c2 <UART_SetConfig+0x356>
 8004470:	a201      	add	r2, pc, #4	; (adr r2, 8004478 <UART_SetConfig+0x30c>)
 8004472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004476:	bf00      	nop
 8004478:	0800449d 	.word	0x0800449d
 800447c:	080044a5 	.word	0x080044a5
 8004480:	080044ad 	.word	0x080044ad
 8004484:	080044c3 	.word	0x080044c3
 8004488:	080044b3 	.word	0x080044b3
 800448c:	080044c3 	.word	0x080044c3
 8004490:	080044c3 	.word	0x080044c3
 8004494:	080044c3 	.word	0x080044c3
 8004498:	080044bb 	.word	0x080044bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800449c:	f7fe faa8 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 80044a0:	6178      	str	r0, [r7, #20]
        break;
 80044a2:	e013      	b.n	80044cc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044a4:	f7fe faba 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 80044a8:	6178      	str	r0, [r7, #20]
        break;
 80044aa:	e00f      	b.n	80044cc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044ac:	4b49      	ldr	r3, [pc, #292]	; (80045d4 <UART_SetConfig+0x468>)
 80044ae:	617b      	str	r3, [r7, #20]
        break;
 80044b0:	e00c      	b.n	80044cc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044b2:	f7fe fa07 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 80044b6:	6178      	str	r0, [r7, #20]
        break;
 80044b8:	e008      	b.n	80044cc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044be:	617b      	str	r3, [r7, #20]
        break;
 80044c0:	e004      	b.n	80044cc <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	76bb      	strb	r3, [r7, #26]
        break;
 80044ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d074      	beq.n	80045bc <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	005a      	lsls	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	085b      	lsrs	r3, r3, #1
 80044dc:	441a      	add	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b0f      	cmp	r3, #15
 80044ee:	d916      	bls.n	800451e <UART_SetConfig+0x3b2>
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f6:	d212      	bcs.n	800451e <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	f023 030f 	bic.w	r3, r3, #15
 8004500:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	085b      	lsrs	r3, r3, #1
 8004506:	b29b      	uxth	r3, r3
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	b29a      	uxth	r2, r3
 800450e:	89fb      	ldrh	r3, [r7, #14]
 8004510:	4313      	orrs	r3, r2
 8004512:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	89fa      	ldrh	r2, [r7, #14]
 800451a:	60da      	str	r2, [r3, #12]
 800451c:	e04e      	b.n	80045bc <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	76bb      	strb	r3, [r7, #26]
 8004522:	e04b      	b.n	80045bc <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004524:	7efb      	ldrb	r3, [r7, #27]
 8004526:	2b08      	cmp	r3, #8
 8004528:	d827      	bhi.n	800457a <UART_SetConfig+0x40e>
 800452a:	a201      	add	r2, pc, #4	; (adr r2, 8004530 <UART_SetConfig+0x3c4>)
 800452c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004530:	08004555 	.word	0x08004555
 8004534:	0800455d 	.word	0x0800455d
 8004538:	08004565 	.word	0x08004565
 800453c:	0800457b 	.word	0x0800457b
 8004540:	0800456b 	.word	0x0800456b
 8004544:	0800457b 	.word	0x0800457b
 8004548:	0800457b 	.word	0x0800457b
 800454c:	0800457b 	.word	0x0800457b
 8004550:	08004573 	.word	0x08004573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004554:	f7fe fa4c 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 8004558:	6178      	str	r0, [r7, #20]
        break;
 800455a:	e013      	b.n	8004584 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800455c:	f7fe fa5e 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 8004560:	6178      	str	r0, [r7, #20]
        break;
 8004562:	e00f      	b.n	8004584 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004564:	4b1b      	ldr	r3, [pc, #108]	; (80045d4 <UART_SetConfig+0x468>)
 8004566:	617b      	str	r3, [r7, #20]
        break;
 8004568:	e00c      	b.n	8004584 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800456a:	f7fe f9ab 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 800456e:	6178      	str	r0, [r7, #20]
        break;
 8004570:	e008      	b.n	8004584 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004576:	617b      	str	r3, [r7, #20]
        break;
 8004578:	e004      	b.n	8004584 <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 800457a:	2300      	movs	r3, #0
 800457c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	76bb      	strb	r3, [r7, #26]
        break;
 8004582:	bf00      	nop
    }

    if (pclk != 0U)
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d018      	beq.n	80045bc <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	085a      	lsrs	r2, r3, #1
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	441a      	add	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	fbb2 f3f3 	udiv	r3, r2, r3
 800459c:	b29b      	uxth	r3, r3
 800459e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	2b0f      	cmp	r3, #15
 80045a4:	d908      	bls.n	80045b8 <UART_SetConfig+0x44c>
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ac:	d204      	bcs.n	80045b8 <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	e001      	b.n	80045bc <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80045c8:	7ebb      	ldrb	r3, [r7, #26]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80045d4:	00f42400 	.word	0x00f42400

080045d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	f003 0310 	and.w	r3, r3, #16
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d01a      	beq.n	80046ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046d6:	d10a      	bne.n	80046ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	605a      	str	r2, [r3, #4]
  }
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af02      	add	r7, sp, #8
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800472a:	f7fc fddb 	bl	80012e4 <HAL_GetTick>
 800472e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b08      	cmp	r3, #8
 800473c:	d10e      	bne.n	800475c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800473e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f82a 	bl	80047a6 <UART_WaitOnFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e020      	b.n	800479e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b04      	cmp	r3, #4
 8004768:	d10e      	bne.n	8004788 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800476a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f814 	bl	80047a6 <UART_WaitOnFlagUntilTimeout>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e00a      	b.n	800479e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2220      	movs	r2, #32
 800478c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2220      	movs	r2, #32
 8004792:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b084      	sub	sp, #16
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	603b      	str	r3, [r7, #0]
 80047b2:	4613      	mov	r3, r2
 80047b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b6:	e05d      	b.n	8004874 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047be:	d059      	beq.n	8004874 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c0:	f7fc fd90 	bl	80012e4 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d302      	bcc.n	80047d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d11b      	bne.n	800480e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047e4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0201 	bic.w	r2, r2, #1
 80047f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2220      	movs	r2, #32
 80047fa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2220      	movs	r2, #32
 8004800:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e042      	b.n	8004894 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d02b      	beq.n	8004874 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800482a:	d123      	bne.n	8004874 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004834:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004844:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0201 	bic.w	r2, r2, #1
 8004854:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2220      	movs	r2, #32
 800485a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2220      	movs	r2, #32
 8004860:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2220      	movs	r2, #32
 8004866:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e00f      	b.n	8004894 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	69da      	ldr	r2, [r3, #28]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4013      	ands	r3, r2
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	429a      	cmp	r2, r3
 8004882:	bf0c      	ite	eq
 8004884:	2301      	moveq	r3, #1
 8004886:	2300      	movne	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	461a      	mov	r2, r3
 800488c:	79fb      	ldrb	r3, [r7, #7]
 800488e:	429a      	cmp	r2, r3
 8004890:	d092      	beq.n	80047b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048b2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0201 	bic.w	r2, r2, #1
 80048c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2220      	movs	r2, #32
 80048c8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	661a      	str	r2, [r3, #96]	; 0x60
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f7ff fc2c 	bl	8004158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004900:	bf00      	nop
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800491e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7ff fc09 	bl	8004144 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004932:	bf00      	nop
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
	...

08004950 <__errno>:
 8004950:	4b01      	ldr	r3, [pc, #4]	; (8004958 <__errno+0x8>)
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	2000000c 	.word	0x2000000c

0800495c <__libc_init_array>:
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	4e0d      	ldr	r6, [pc, #52]	; (8004994 <__libc_init_array+0x38>)
 8004960:	4c0d      	ldr	r4, [pc, #52]	; (8004998 <__libc_init_array+0x3c>)
 8004962:	1ba4      	subs	r4, r4, r6
 8004964:	10a4      	asrs	r4, r4, #2
 8004966:	2500      	movs	r5, #0
 8004968:	42a5      	cmp	r5, r4
 800496a:	d109      	bne.n	8004980 <__libc_init_array+0x24>
 800496c:	4e0b      	ldr	r6, [pc, #44]	; (800499c <__libc_init_array+0x40>)
 800496e:	4c0c      	ldr	r4, [pc, #48]	; (80049a0 <__libc_init_array+0x44>)
 8004970:	f000 ff68 	bl	8005844 <_init>
 8004974:	1ba4      	subs	r4, r4, r6
 8004976:	10a4      	asrs	r4, r4, #2
 8004978:	2500      	movs	r5, #0
 800497a:	42a5      	cmp	r5, r4
 800497c:	d105      	bne.n	800498a <__libc_init_array+0x2e>
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004984:	4798      	blx	r3
 8004986:	3501      	adds	r5, #1
 8004988:	e7ee      	b.n	8004968 <__libc_init_array+0xc>
 800498a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800498e:	4798      	blx	r3
 8004990:	3501      	adds	r5, #1
 8004992:	e7f2      	b.n	800497a <__libc_init_array+0x1e>
 8004994:	08005a8c 	.word	0x08005a8c
 8004998:	08005a8c 	.word	0x08005a8c
 800499c:	08005a8c 	.word	0x08005a8c
 80049a0:	08005a90 	.word	0x08005a90

080049a4 <memset>:
 80049a4:	4402      	add	r2, r0
 80049a6:	4603      	mov	r3, r0
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d100      	bne.n	80049ae <memset+0xa>
 80049ac:	4770      	bx	lr
 80049ae:	f803 1b01 	strb.w	r1, [r3], #1
 80049b2:	e7f9      	b.n	80049a8 <memset+0x4>

080049b4 <iprintf>:
 80049b4:	b40f      	push	{r0, r1, r2, r3}
 80049b6:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <iprintf+0x2c>)
 80049b8:	b513      	push	{r0, r1, r4, lr}
 80049ba:	681c      	ldr	r4, [r3, #0]
 80049bc:	b124      	cbz	r4, 80049c8 <iprintf+0x14>
 80049be:	69a3      	ldr	r3, [r4, #24]
 80049c0:	b913      	cbnz	r3, 80049c8 <iprintf+0x14>
 80049c2:	4620      	mov	r0, r4
 80049c4:	f000 fa22 	bl	8004e0c <__sinit>
 80049c8:	ab05      	add	r3, sp, #20
 80049ca:	9a04      	ldr	r2, [sp, #16]
 80049cc:	68a1      	ldr	r1, [r4, #8]
 80049ce:	9301      	str	r3, [sp, #4]
 80049d0:	4620      	mov	r0, r4
 80049d2:	f000 fbdb 	bl	800518c <_vfiprintf_r>
 80049d6:	b002      	add	sp, #8
 80049d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049dc:	b004      	add	sp, #16
 80049de:	4770      	bx	lr
 80049e0:	2000000c 	.word	0x2000000c

080049e4 <_puts_r>:
 80049e4:	b570      	push	{r4, r5, r6, lr}
 80049e6:	460e      	mov	r6, r1
 80049e8:	4605      	mov	r5, r0
 80049ea:	b118      	cbz	r0, 80049f4 <_puts_r+0x10>
 80049ec:	6983      	ldr	r3, [r0, #24]
 80049ee:	b90b      	cbnz	r3, 80049f4 <_puts_r+0x10>
 80049f0:	f000 fa0c 	bl	8004e0c <__sinit>
 80049f4:	69ab      	ldr	r3, [r5, #24]
 80049f6:	68ac      	ldr	r4, [r5, #8]
 80049f8:	b913      	cbnz	r3, 8004a00 <_puts_r+0x1c>
 80049fa:	4628      	mov	r0, r5
 80049fc:	f000 fa06 	bl	8004e0c <__sinit>
 8004a00:	4b23      	ldr	r3, [pc, #140]	; (8004a90 <_puts_r+0xac>)
 8004a02:	429c      	cmp	r4, r3
 8004a04:	d117      	bne.n	8004a36 <_puts_r+0x52>
 8004a06:	686c      	ldr	r4, [r5, #4]
 8004a08:	89a3      	ldrh	r3, [r4, #12]
 8004a0a:	071b      	lsls	r3, r3, #28
 8004a0c:	d51d      	bpl.n	8004a4a <_puts_r+0x66>
 8004a0e:	6923      	ldr	r3, [r4, #16]
 8004a10:	b1db      	cbz	r3, 8004a4a <_puts_r+0x66>
 8004a12:	3e01      	subs	r6, #1
 8004a14:	68a3      	ldr	r3, [r4, #8]
 8004a16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	60a3      	str	r3, [r4, #8]
 8004a1e:	b9e9      	cbnz	r1, 8004a5c <_puts_r+0x78>
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	da2e      	bge.n	8004a82 <_puts_r+0x9e>
 8004a24:	4622      	mov	r2, r4
 8004a26:	210a      	movs	r1, #10
 8004a28:	4628      	mov	r0, r5
 8004a2a:	f000 f83f 	bl	8004aac <__swbuf_r>
 8004a2e:	3001      	adds	r0, #1
 8004a30:	d011      	beq.n	8004a56 <_puts_r+0x72>
 8004a32:	200a      	movs	r0, #10
 8004a34:	e011      	b.n	8004a5a <_puts_r+0x76>
 8004a36:	4b17      	ldr	r3, [pc, #92]	; (8004a94 <_puts_r+0xb0>)
 8004a38:	429c      	cmp	r4, r3
 8004a3a:	d101      	bne.n	8004a40 <_puts_r+0x5c>
 8004a3c:	68ac      	ldr	r4, [r5, #8]
 8004a3e:	e7e3      	b.n	8004a08 <_puts_r+0x24>
 8004a40:	4b15      	ldr	r3, [pc, #84]	; (8004a98 <_puts_r+0xb4>)
 8004a42:	429c      	cmp	r4, r3
 8004a44:	bf08      	it	eq
 8004a46:	68ec      	ldreq	r4, [r5, #12]
 8004a48:	e7de      	b.n	8004a08 <_puts_r+0x24>
 8004a4a:	4621      	mov	r1, r4
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	f000 f87f 	bl	8004b50 <__swsetup_r>
 8004a52:	2800      	cmp	r0, #0
 8004a54:	d0dd      	beq.n	8004a12 <_puts_r+0x2e>
 8004a56:	f04f 30ff 	mov.w	r0, #4294967295
 8004a5a:	bd70      	pop	{r4, r5, r6, pc}
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	da04      	bge.n	8004a6a <_puts_r+0x86>
 8004a60:	69a2      	ldr	r2, [r4, #24]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	dc06      	bgt.n	8004a74 <_puts_r+0x90>
 8004a66:	290a      	cmp	r1, #10
 8004a68:	d004      	beq.n	8004a74 <_puts_r+0x90>
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	6022      	str	r2, [r4, #0]
 8004a70:	7019      	strb	r1, [r3, #0]
 8004a72:	e7cf      	b.n	8004a14 <_puts_r+0x30>
 8004a74:	4622      	mov	r2, r4
 8004a76:	4628      	mov	r0, r5
 8004a78:	f000 f818 	bl	8004aac <__swbuf_r>
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	d1c9      	bne.n	8004a14 <_puts_r+0x30>
 8004a80:	e7e9      	b.n	8004a56 <_puts_r+0x72>
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	200a      	movs	r0, #10
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	6022      	str	r2, [r4, #0]
 8004a8a:	7018      	strb	r0, [r3, #0]
 8004a8c:	e7e5      	b.n	8004a5a <_puts_r+0x76>
 8004a8e:	bf00      	nop
 8004a90:	08005a10 	.word	0x08005a10
 8004a94:	08005a30 	.word	0x08005a30
 8004a98:	080059f0 	.word	0x080059f0

08004a9c <puts>:
 8004a9c:	4b02      	ldr	r3, [pc, #8]	; (8004aa8 <puts+0xc>)
 8004a9e:	4601      	mov	r1, r0
 8004aa0:	6818      	ldr	r0, [r3, #0]
 8004aa2:	f7ff bf9f 	b.w	80049e4 <_puts_r>
 8004aa6:	bf00      	nop
 8004aa8:	2000000c 	.word	0x2000000c

08004aac <__swbuf_r>:
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aae:	460e      	mov	r6, r1
 8004ab0:	4614      	mov	r4, r2
 8004ab2:	4605      	mov	r5, r0
 8004ab4:	b118      	cbz	r0, 8004abe <__swbuf_r+0x12>
 8004ab6:	6983      	ldr	r3, [r0, #24]
 8004ab8:	b90b      	cbnz	r3, 8004abe <__swbuf_r+0x12>
 8004aba:	f000 f9a7 	bl	8004e0c <__sinit>
 8004abe:	4b21      	ldr	r3, [pc, #132]	; (8004b44 <__swbuf_r+0x98>)
 8004ac0:	429c      	cmp	r4, r3
 8004ac2:	d12a      	bne.n	8004b1a <__swbuf_r+0x6e>
 8004ac4:	686c      	ldr	r4, [r5, #4]
 8004ac6:	69a3      	ldr	r3, [r4, #24]
 8004ac8:	60a3      	str	r3, [r4, #8]
 8004aca:	89a3      	ldrh	r3, [r4, #12]
 8004acc:	071a      	lsls	r2, r3, #28
 8004ace:	d52e      	bpl.n	8004b2e <__swbuf_r+0x82>
 8004ad0:	6923      	ldr	r3, [r4, #16]
 8004ad2:	b363      	cbz	r3, 8004b2e <__swbuf_r+0x82>
 8004ad4:	6923      	ldr	r3, [r4, #16]
 8004ad6:	6820      	ldr	r0, [r4, #0]
 8004ad8:	1ac0      	subs	r0, r0, r3
 8004ada:	6963      	ldr	r3, [r4, #20]
 8004adc:	b2f6      	uxtb	r6, r6
 8004ade:	4283      	cmp	r3, r0
 8004ae0:	4637      	mov	r7, r6
 8004ae2:	dc04      	bgt.n	8004aee <__swbuf_r+0x42>
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	f000 f926 	bl	8004d38 <_fflush_r>
 8004aec:	bb28      	cbnz	r0, 8004b3a <__swbuf_r+0x8e>
 8004aee:	68a3      	ldr	r3, [r4, #8]
 8004af0:	3b01      	subs	r3, #1
 8004af2:	60a3      	str	r3, [r4, #8]
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	6022      	str	r2, [r4, #0]
 8004afa:	701e      	strb	r6, [r3, #0]
 8004afc:	6963      	ldr	r3, [r4, #20]
 8004afe:	3001      	adds	r0, #1
 8004b00:	4283      	cmp	r3, r0
 8004b02:	d004      	beq.n	8004b0e <__swbuf_r+0x62>
 8004b04:	89a3      	ldrh	r3, [r4, #12]
 8004b06:	07db      	lsls	r3, r3, #31
 8004b08:	d519      	bpl.n	8004b3e <__swbuf_r+0x92>
 8004b0a:	2e0a      	cmp	r6, #10
 8004b0c:	d117      	bne.n	8004b3e <__swbuf_r+0x92>
 8004b0e:	4621      	mov	r1, r4
 8004b10:	4628      	mov	r0, r5
 8004b12:	f000 f911 	bl	8004d38 <_fflush_r>
 8004b16:	b190      	cbz	r0, 8004b3e <__swbuf_r+0x92>
 8004b18:	e00f      	b.n	8004b3a <__swbuf_r+0x8e>
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <__swbuf_r+0x9c>)
 8004b1c:	429c      	cmp	r4, r3
 8004b1e:	d101      	bne.n	8004b24 <__swbuf_r+0x78>
 8004b20:	68ac      	ldr	r4, [r5, #8]
 8004b22:	e7d0      	b.n	8004ac6 <__swbuf_r+0x1a>
 8004b24:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <__swbuf_r+0xa0>)
 8004b26:	429c      	cmp	r4, r3
 8004b28:	bf08      	it	eq
 8004b2a:	68ec      	ldreq	r4, [r5, #12]
 8004b2c:	e7cb      	b.n	8004ac6 <__swbuf_r+0x1a>
 8004b2e:	4621      	mov	r1, r4
 8004b30:	4628      	mov	r0, r5
 8004b32:	f000 f80d 	bl	8004b50 <__swsetup_r>
 8004b36:	2800      	cmp	r0, #0
 8004b38:	d0cc      	beq.n	8004ad4 <__swbuf_r+0x28>
 8004b3a:	f04f 37ff 	mov.w	r7, #4294967295
 8004b3e:	4638      	mov	r0, r7
 8004b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b42:	bf00      	nop
 8004b44:	08005a10 	.word	0x08005a10
 8004b48:	08005a30 	.word	0x08005a30
 8004b4c:	080059f0 	.word	0x080059f0

08004b50 <__swsetup_r>:
 8004b50:	4b32      	ldr	r3, [pc, #200]	; (8004c1c <__swsetup_r+0xcc>)
 8004b52:	b570      	push	{r4, r5, r6, lr}
 8004b54:	681d      	ldr	r5, [r3, #0]
 8004b56:	4606      	mov	r6, r0
 8004b58:	460c      	mov	r4, r1
 8004b5a:	b125      	cbz	r5, 8004b66 <__swsetup_r+0x16>
 8004b5c:	69ab      	ldr	r3, [r5, #24]
 8004b5e:	b913      	cbnz	r3, 8004b66 <__swsetup_r+0x16>
 8004b60:	4628      	mov	r0, r5
 8004b62:	f000 f953 	bl	8004e0c <__sinit>
 8004b66:	4b2e      	ldr	r3, [pc, #184]	; (8004c20 <__swsetup_r+0xd0>)
 8004b68:	429c      	cmp	r4, r3
 8004b6a:	d10f      	bne.n	8004b8c <__swsetup_r+0x3c>
 8004b6c:	686c      	ldr	r4, [r5, #4]
 8004b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	0715      	lsls	r5, r2, #28
 8004b76:	d42c      	bmi.n	8004bd2 <__swsetup_r+0x82>
 8004b78:	06d0      	lsls	r0, r2, #27
 8004b7a:	d411      	bmi.n	8004ba0 <__swsetup_r+0x50>
 8004b7c:	2209      	movs	r2, #9
 8004b7e:	6032      	str	r2, [r6, #0]
 8004b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b84:	81a3      	strh	r3, [r4, #12]
 8004b86:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8a:	e03e      	b.n	8004c0a <__swsetup_r+0xba>
 8004b8c:	4b25      	ldr	r3, [pc, #148]	; (8004c24 <__swsetup_r+0xd4>)
 8004b8e:	429c      	cmp	r4, r3
 8004b90:	d101      	bne.n	8004b96 <__swsetup_r+0x46>
 8004b92:	68ac      	ldr	r4, [r5, #8]
 8004b94:	e7eb      	b.n	8004b6e <__swsetup_r+0x1e>
 8004b96:	4b24      	ldr	r3, [pc, #144]	; (8004c28 <__swsetup_r+0xd8>)
 8004b98:	429c      	cmp	r4, r3
 8004b9a:	bf08      	it	eq
 8004b9c:	68ec      	ldreq	r4, [r5, #12]
 8004b9e:	e7e6      	b.n	8004b6e <__swsetup_r+0x1e>
 8004ba0:	0751      	lsls	r1, r2, #29
 8004ba2:	d512      	bpl.n	8004bca <__swsetup_r+0x7a>
 8004ba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ba6:	b141      	cbz	r1, 8004bba <__swsetup_r+0x6a>
 8004ba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bac:	4299      	cmp	r1, r3
 8004bae:	d002      	beq.n	8004bb6 <__swsetup_r+0x66>
 8004bb0:	4630      	mov	r0, r6
 8004bb2:	f000 fa19 	bl	8004fe8 <_free_r>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	6363      	str	r3, [r4, #52]	; 0x34
 8004bba:	89a3      	ldrh	r3, [r4, #12]
 8004bbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004bc0:	81a3      	strh	r3, [r4, #12]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	6063      	str	r3, [r4, #4]
 8004bc6:	6923      	ldr	r3, [r4, #16]
 8004bc8:	6023      	str	r3, [r4, #0]
 8004bca:	89a3      	ldrh	r3, [r4, #12]
 8004bcc:	f043 0308 	orr.w	r3, r3, #8
 8004bd0:	81a3      	strh	r3, [r4, #12]
 8004bd2:	6923      	ldr	r3, [r4, #16]
 8004bd4:	b94b      	cbnz	r3, 8004bea <__swsetup_r+0x9a>
 8004bd6:	89a3      	ldrh	r3, [r4, #12]
 8004bd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004be0:	d003      	beq.n	8004bea <__swsetup_r+0x9a>
 8004be2:	4621      	mov	r1, r4
 8004be4:	4630      	mov	r0, r6
 8004be6:	f000 f9bf 	bl	8004f68 <__smakebuf_r>
 8004bea:	89a2      	ldrh	r2, [r4, #12]
 8004bec:	f012 0301 	ands.w	r3, r2, #1
 8004bf0:	d00c      	beq.n	8004c0c <__swsetup_r+0xbc>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60a3      	str	r3, [r4, #8]
 8004bf6:	6963      	ldr	r3, [r4, #20]
 8004bf8:	425b      	negs	r3, r3
 8004bfa:	61a3      	str	r3, [r4, #24]
 8004bfc:	6923      	ldr	r3, [r4, #16]
 8004bfe:	b953      	cbnz	r3, 8004c16 <__swsetup_r+0xc6>
 8004c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c04:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004c08:	d1ba      	bne.n	8004b80 <__swsetup_r+0x30>
 8004c0a:	bd70      	pop	{r4, r5, r6, pc}
 8004c0c:	0792      	lsls	r2, r2, #30
 8004c0e:	bf58      	it	pl
 8004c10:	6963      	ldrpl	r3, [r4, #20]
 8004c12:	60a3      	str	r3, [r4, #8]
 8004c14:	e7f2      	b.n	8004bfc <__swsetup_r+0xac>
 8004c16:	2000      	movs	r0, #0
 8004c18:	e7f7      	b.n	8004c0a <__swsetup_r+0xba>
 8004c1a:	bf00      	nop
 8004c1c:	2000000c 	.word	0x2000000c
 8004c20:	08005a10 	.word	0x08005a10
 8004c24:	08005a30 	.word	0x08005a30
 8004c28:	080059f0 	.word	0x080059f0

08004c2c <__sflush_r>:
 8004c2c:	898a      	ldrh	r2, [r1, #12]
 8004c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c32:	4605      	mov	r5, r0
 8004c34:	0710      	lsls	r0, r2, #28
 8004c36:	460c      	mov	r4, r1
 8004c38:	d458      	bmi.n	8004cec <__sflush_r+0xc0>
 8004c3a:	684b      	ldr	r3, [r1, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	dc05      	bgt.n	8004c4c <__sflush_r+0x20>
 8004c40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	dc02      	bgt.n	8004c4c <__sflush_r+0x20>
 8004c46:	2000      	movs	r0, #0
 8004c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c4e:	2e00      	cmp	r6, #0
 8004c50:	d0f9      	beq.n	8004c46 <__sflush_r+0x1a>
 8004c52:	2300      	movs	r3, #0
 8004c54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c58:	682f      	ldr	r7, [r5, #0]
 8004c5a:	6a21      	ldr	r1, [r4, #32]
 8004c5c:	602b      	str	r3, [r5, #0]
 8004c5e:	d032      	beq.n	8004cc6 <__sflush_r+0x9a>
 8004c60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c62:	89a3      	ldrh	r3, [r4, #12]
 8004c64:	075a      	lsls	r2, r3, #29
 8004c66:	d505      	bpl.n	8004c74 <__sflush_r+0x48>
 8004c68:	6863      	ldr	r3, [r4, #4]
 8004c6a:	1ac0      	subs	r0, r0, r3
 8004c6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c6e:	b10b      	cbz	r3, 8004c74 <__sflush_r+0x48>
 8004c70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c72:	1ac0      	subs	r0, r0, r3
 8004c74:	2300      	movs	r3, #0
 8004c76:	4602      	mov	r2, r0
 8004c78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c7a:	6a21      	ldr	r1, [r4, #32]
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	47b0      	blx	r6
 8004c80:	1c43      	adds	r3, r0, #1
 8004c82:	89a3      	ldrh	r3, [r4, #12]
 8004c84:	d106      	bne.n	8004c94 <__sflush_r+0x68>
 8004c86:	6829      	ldr	r1, [r5, #0]
 8004c88:	291d      	cmp	r1, #29
 8004c8a:	d848      	bhi.n	8004d1e <__sflush_r+0xf2>
 8004c8c:	4a29      	ldr	r2, [pc, #164]	; (8004d34 <__sflush_r+0x108>)
 8004c8e:	40ca      	lsrs	r2, r1
 8004c90:	07d6      	lsls	r6, r2, #31
 8004c92:	d544      	bpl.n	8004d1e <__sflush_r+0xf2>
 8004c94:	2200      	movs	r2, #0
 8004c96:	6062      	str	r2, [r4, #4]
 8004c98:	04d9      	lsls	r1, r3, #19
 8004c9a:	6922      	ldr	r2, [r4, #16]
 8004c9c:	6022      	str	r2, [r4, #0]
 8004c9e:	d504      	bpl.n	8004caa <__sflush_r+0x7e>
 8004ca0:	1c42      	adds	r2, r0, #1
 8004ca2:	d101      	bne.n	8004ca8 <__sflush_r+0x7c>
 8004ca4:	682b      	ldr	r3, [r5, #0]
 8004ca6:	b903      	cbnz	r3, 8004caa <__sflush_r+0x7e>
 8004ca8:	6560      	str	r0, [r4, #84]	; 0x54
 8004caa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cac:	602f      	str	r7, [r5, #0]
 8004cae:	2900      	cmp	r1, #0
 8004cb0:	d0c9      	beq.n	8004c46 <__sflush_r+0x1a>
 8004cb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cb6:	4299      	cmp	r1, r3
 8004cb8:	d002      	beq.n	8004cc0 <__sflush_r+0x94>
 8004cba:	4628      	mov	r0, r5
 8004cbc:	f000 f994 	bl	8004fe8 <_free_r>
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	6360      	str	r0, [r4, #52]	; 0x34
 8004cc4:	e7c0      	b.n	8004c48 <__sflush_r+0x1c>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	4628      	mov	r0, r5
 8004cca:	47b0      	blx	r6
 8004ccc:	1c41      	adds	r1, r0, #1
 8004cce:	d1c8      	bne.n	8004c62 <__sflush_r+0x36>
 8004cd0:	682b      	ldr	r3, [r5, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0c5      	beq.n	8004c62 <__sflush_r+0x36>
 8004cd6:	2b1d      	cmp	r3, #29
 8004cd8:	d001      	beq.n	8004cde <__sflush_r+0xb2>
 8004cda:	2b16      	cmp	r3, #22
 8004cdc:	d101      	bne.n	8004ce2 <__sflush_r+0xb6>
 8004cde:	602f      	str	r7, [r5, #0]
 8004ce0:	e7b1      	b.n	8004c46 <__sflush_r+0x1a>
 8004ce2:	89a3      	ldrh	r3, [r4, #12]
 8004ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ce8:	81a3      	strh	r3, [r4, #12]
 8004cea:	e7ad      	b.n	8004c48 <__sflush_r+0x1c>
 8004cec:	690f      	ldr	r7, [r1, #16]
 8004cee:	2f00      	cmp	r7, #0
 8004cf0:	d0a9      	beq.n	8004c46 <__sflush_r+0x1a>
 8004cf2:	0793      	lsls	r3, r2, #30
 8004cf4:	680e      	ldr	r6, [r1, #0]
 8004cf6:	bf08      	it	eq
 8004cf8:	694b      	ldreq	r3, [r1, #20]
 8004cfa:	600f      	str	r7, [r1, #0]
 8004cfc:	bf18      	it	ne
 8004cfe:	2300      	movne	r3, #0
 8004d00:	eba6 0807 	sub.w	r8, r6, r7
 8004d04:	608b      	str	r3, [r1, #8]
 8004d06:	f1b8 0f00 	cmp.w	r8, #0
 8004d0a:	dd9c      	ble.n	8004c46 <__sflush_r+0x1a>
 8004d0c:	4643      	mov	r3, r8
 8004d0e:	463a      	mov	r2, r7
 8004d10:	6a21      	ldr	r1, [r4, #32]
 8004d12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d14:	4628      	mov	r0, r5
 8004d16:	47b0      	blx	r6
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	dc06      	bgt.n	8004d2a <__sflush_r+0xfe>
 8004d1c:	89a3      	ldrh	r3, [r4, #12]
 8004d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d22:	81a3      	strh	r3, [r4, #12]
 8004d24:	f04f 30ff 	mov.w	r0, #4294967295
 8004d28:	e78e      	b.n	8004c48 <__sflush_r+0x1c>
 8004d2a:	4407      	add	r7, r0
 8004d2c:	eba8 0800 	sub.w	r8, r8, r0
 8004d30:	e7e9      	b.n	8004d06 <__sflush_r+0xda>
 8004d32:	bf00      	nop
 8004d34:	20400001 	.word	0x20400001

08004d38 <_fflush_r>:
 8004d38:	b538      	push	{r3, r4, r5, lr}
 8004d3a:	690b      	ldr	r3, [r1, #16]
 8004d3c:	4605      	mov	r5, r0
 8004d3e:	460c      	mov	r4, r1
 8004d40:	b1db      	cbz	r3, 8004d7a <_fflush_r+0x42>
 8004d42:	b118      	cbz	r0, 8004d4c <_fflush_r+0x14>
 8004d44:	6983      	ldr	r3, [r0, #24]
 8004d46:	b90b      	cbnz	r3, 8004d4c <_fflush_r+0x14>
 8004d48:	f000 f860 	bl	8004e0c <__sinit>
 8004d4c:	4b0c      	ldr	r3, [pc, #48]	; (8004d80 <_fflush_r+0x48>)
 8004d4e:	429c      	cmp	r4, r3
 8004d50:	d109      	bne.n	8004d66 <_fflush_r+0x2e>
 8004d52:	686c      	ldr	r4, [r5, #4]
 8004d54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d58:	b17b      	cbz	r3, 8004d7a <_fflush_r+0x42>
 8004d5a:	4621      	mov	r1, r4
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d62:	f7ff bf63 	b.w	8004c2c <__sflush_r>
 8004d66:	4b07      	ldr	r3, [pc, #28]	; (8004d84 <_fflush_r+0x4c>)
 8004d68:	429c      	cmp	r4, r3
 8004d6a:	d101      	bne.n	8004d70 <_fflush_r+0x38>
 8004d6c:	68ac      	ldr	r4, [r5, #8]
 8004d6e:	e7f1      	b.n	8004d54 <_fflush_r+0x1c>
 8004d70:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <_fflush_r+0x50>)
 8004d72:	429c      	cmp	r4, r3
 8004d74:	bf08      	it	eq
 8004d76:	68ec      	ldreq	r4, [r5, #12]
 8004d78:	e7ec      	b.n	8004d54 <_fflush_r+0x1c>
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	bd38      	pop	{r3, r4, r5, pc}
 8004d7e:	bf00      	nop
 8004d80:	08005a10 	.word	0x08005a10
 8004d84:	08005a30 	.word	0x08005a30
 8004d88:	080059f0 	.word	0x080059f0

08004d8c <std>:
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	b510      	push	{r4, lr}
 8004d90:	4604      	mov	r4, r0
 8004d92:	e9c0 3300 	strd	r3, r3, [r0]
 8004d96:	6083      	str	r3, [r0, #8]
 8004d98:	8181      	strh	r1, [r0, #12]
 8004d9a:	6643      	str	r3, [r0, #100]	; 0x64
 8004d9c:	81c2      	strh	r2, [r0, #14]
 8004d9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004da2:	6183      	str	r3, [r0, #24]
 8004da4:	4619      	mov	r1, r3
 8004da6:	2208      	movs	r2, #8
 8004da8:	305c      	adds	r0, #92	; 0x5c
 8004daa:	f7ff fdfb 	bl	80049a4 <memset>
 8004dae:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <std+0x38>)
 8004db0:	6263      	str	r3, [r4, #36]	; 0x24
 8004db2:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <std+0x3c>)
 8004db4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004db6:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <std+0x40>)
 8004db8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004dba:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <std+0x44>)
 8004dbc:	6224      	str	r4, [r4, #32]
 8004dbe:	6323      	str	r3, [r4, #48]	; 0x30
 8004dc0:	bd10      	pop	{r4, pc}
 8004dc2:	bf00      	nop
 8004dc4:	080056e9 	.word	0x080056e9
 8004dc8:	0800570b 	.word	0x0800570b
 8004dcc:	08005743 	.word	0x08005743
 8004dd0:	08005767 	.word	0x08005767

08004dd4 <_cleanup_r>:
 8004dd4:	4901      	ldr	r1, [pc, #4]	; (8004ddc <_cleanup_r+0x8>)
 8004dd6:	f000 b885 	b.w	8004ee4 <_fwalk_reent>
 8004dda:	bf00      	nop
 8004ddc:	08004d39 	.word	0x08004d39

08004de0 <__sfmoreglue>:
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	1e4a      	subs	r2, r1, #1
 8004de4:	2568      	movs	r5, #104	; 0x68
 8004de6:	4355      	muls	r5, r2
 8004de8:	460e      	mov	r6, r1
 8004dea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004dee:	f000 f949 	bl	8005084 <_malloc_r>
 8004df2:	4604      	mov	r4, r0
 8004df4:	b140      	cbz	r0, 8004e08 <__sfmoreglue+0x28>
 8004df6:	2100      	movs	r1, #0
 8004df8:	e9c0 1600 	strd	r1, r6, [r0]
 8004dfc:	300c      	adds	r0, #12
 8004dfe:	60a0      	str	r0, [r4, #8]
 8004e00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e04:	f7ff fdce 	bl	80049a4 <memset>
 8004e08:	4620      	mov	r0, r4
 8004e0a:	bd70      	pop	{r4, r5, r6, pc}

08004e0c <__sinit>:
 8004e0c:	6983      	ldr	r3, [r0, #24]
 8004e0e:	b510      	push	{r4, lr}
 8004e10:	4604      	mov	r4, r0
 8004e12:	bb33      	cbnz	r3, 8004e62 <__sinit+0x56>
 8004e14:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004e18:	6503      	str	r3, [r0, #80]	; 0x50
 8004e1a:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <__sinit+0x58>)
 8004e1c:	4a12      	ldr	r2, [pc, #72]	; (8004e68 <__sinit+0x5c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6282      	str	r2, [r0, #40]	; 0x28
 8004e22:	4298      	cmp	r0, r3
 8004e24:	bf04      	itt	eq
 8004e26:	2301      	moveq	r3, #1
 8004e28:	6183      	streq	r3, [r0, #24]
 8004e2a:	f000 f81f 	bl	8004e6c <__sfp>
 8004e2e:	6060      	str	r0, [r4, #4]
 8004e30:	4620      	mov	r0, r4
 8004e32:	f000 f81b 	bl	8004e6c <__sfp>
 8004e36:	60a0      	str	r0, [r4, #8]
 8004e38:	4620      	mov	r0, r4
 8004e3a:	f000 f817 	bl	8004e6c <__sfp>
 8004e3e:	2200      	movs	r2, #0
 8004e40:	60e0      	str	r0, [r4, #12]
 8004e42:	2104      	movs	r1, #4
 8004e44:	6860      	ldr	r0, [r4, #4]
 8004e46:	f7ff ffa1 	bl	8004d8c <std>
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	2109      	movs	r1, #9
 8004e4e:	68a0      	ldr	r0, [r4, #8]
 8004e50:	f7ff ff9c 	bl	8004d8c <std>
 8004e54:	2202      	movs	r2, #2
 8004e56:	2112      	movs	r1, #18
 8004e58:	68e0      	ldr	r0, [r4, #12]
 8004e5a:	f7ff ff97 	bl	8004d8c <std>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	61a3      	str	r3, [r4, #24]
 8004e62:	bd10      	pop	{r4, pc}
 8004e64:	080059ec 	.word	0x080059ec
 8004e68:	08004dd5 	.word	0x08004dd5

08004e6c <__sfp>:
 8004e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6e:	4b1b      	ldr	r3, [pc, #108]	; (8004edc <__sfp+0x70>)
 8004e70:	681e      	ldr	r6, [r3, #0]
 8004e72:	69b3      	ldr	r3, [r6, #24]
 8004e74:	4607      	mov	r7, r0
 8004e76:	b913      	cbnz	r3, 8004e7e <__sfp+0x12>
 8004e78:	4630      	mov	r0, r6
 8004e7a:	f7ff ffc7 	bl	8004e0c <__sinit>
 8004e7e:	3648      	adds	r6, #72	; 0x48
 8004e80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e84:	3b01      	subs	r3, #1
 8004e86:	d503      	bpl.n	8004e90 <__sfp+0x24>
 8004e88:	6833      	ldr	r3, [r6, #0]
 8004e8a:	b133      	cbz	r3, 8004e9a <__sfp+0x2e>
 8004e8c:	6836      	ldr	r6, [r6, #0]
 8004e8e:	e7f7      	b.n	8004e80 <__sfp+0x14>
 8004e90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e94:	b16d      	cbz	r5, 8004eb2 <__sfp+0x46>
 8004e96:	3468      	adds	r4, #104	; 0x68
 8004e98:	e7f4      	b.n	8004e84 <__sfp+0x18>
 8004e9a:	2104      	movs	r1, #4
 8004e9c:	4638      	mov	r0, r7
 8004e9e:	f7ff ff9f 	bl	8004de0 <__sfmoreglue>
 8004ea2:	6030      	str	r0, [r6, #0]
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	d1f1      	bne.n	8004e8c <__sfp+0x20>
 8004ea8:	230c      	movs	r3, #12
 8004eaa:	603b      	str	r3, [r7, #0]
 8004eac:	4604      	mov	r4, r0
 8004eae:	4620      	mov	r0, r4
 8004eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eb2:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <__sfp+0x74>)
 8004eb4:	6665      	str	r5, [r4, #100]	; 0x64
 8004eb6:	e9c4 5500 	strd	r5, r5, [r4]
 8004eba:	60a5      	str	r5, [r4, #8]
 8004ebc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004ec0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004ec4:	2208      	movs	r2, #8
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ecc:	f7ff fd6a 	bl	80049a4 <memset>
 8004ed0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ed4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ed8:	e7e9      	b.n	8004eae <__sfp+0x42>
 8004eda:	bf00      	nop
 8004edc:	080059ec 	.word	0x080059ec
 8004ee0:	ffff0001 	.word	0xffff0001

08004ee4 <_fwalk_reent>:
 8004ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ee8:	4680      	mov	r8, r0
 8004eea:	4689      	mov	r9, r1
 8004eec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ef0:	2600      	movs	r6, #0
 8004ef2:	b914      	cbnz	r4, 8004efa <_fwalk_reent+0x16>
 8004ef4:	4630      	mov	r0, r6
 8004ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004efa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004efe:	3f01      	subs	r7, #1
 8004f00:	d501      	bpl.n	8004f06 <_fwalk_reent+0x22>
 8004f02:	6824      	ldr	r4, [r4, #0]
 8004f04:	e7f5      	b.n	8004ef2 <_fwalk_reent+0xe>
 8004f06:	89ab      	ldrh	r3, [r5, #12]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d907      	bls.n	8004f1c <_fwalk_reent+0x38>
 8004f0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f10:	3301      	adds	r3, #1
 8004f12:	d003      	beq.n	8004f1c <_fwalk_reent+0x38>
 8004f14:	4629      	mov	r1, r5
 8004f16:	4640      	mov	r0, r8
 8004f18:	47c8      	blx	r9
 8004f1a:	4306      	orrs	r6, r0
 8004f1c:	3568      	adds	r5, #104	; 0x68
 8004f1e:	e7ee      	b.n	8004efe <_fwalk_reent+0x1a>

08004f20 <__swhatbuf_r>:
 8004f20:	b570      	push	{r4, r5, r6, lr}
 8004f22:	460e      	mov	r6, r1
 8004f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f28:	2900      	cmp	r1, #0
 8004f2a:	b096      	sub	sp, #88	; 0x58
 8004f2c:	4614      	mov	r4, r2
 8004f2e:	461d      	mov	r5, r3
 8004f30:	da07      	bge.n	8004f42 <__swhatbuf_r+0x22>
 8004f32:	2300      	movs	r3, #0
 8004f34:	602b      	str	r3, [r5, #0]
 8004f36:	89b3      	ldrh	r3, [r6, #12]
 8004f38:	061a      	lsls	r2, r3, #24
 8004f3a:	d410      	bmi.n	8004f5e <__swhatbuf_r+0x3e>
 8004f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f40:	e00e      	b.n	8004f60 <__swhatbuf_r+0x40>
 8004f42:	466a      	mov	r2, sp
 8004f44:	f000 fc36 	bl	80057b4 <_fstat_r>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	dbf2      	blt.n	8004f32 <__swhatbuf_r+0x12>
 8004f4c:	9a01      	ldr	r2, [sp, #4]
 8004f4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f56:	425a      	negs	r2, r3
 8004f58:	415a      	adcs	r2, r3
 8004f5a:	602a      	str	r2, [r5, #0]
 8004f5c:	e7ee      	b.n	8004f3c <__swhatbuf_r+0x1c>
 8004f5e:	2340      	movs	r3, #64	; 0x40
 8004f60:	2000      	movs	r0, #0
 8004f62:	6023      	str	r3, [r4, #0]
 8004f64:	b016      	add	sp, #88	; 0x58
 8004f66:	bd70      	pop	{r4, r5, r6, pc}

08004f68 <__smakebuf_r>:
 8004f68:	898b      	ldrh	r3, [r1, #12]
 8004f6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f6c:	079d      	lsls	r5, r3, #30
 8004f6e:	4606      	mov	r6, r0
 8004f70:	460c      	mov	r4, r1
 8004f72:	d507      	bpl.n	8004f84 <__smakebuf_r+0x1c>
 8004f74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f78:	6023      	str	r3, [r4, #0]
 8004f7a:	6123      	str	r3, [r4, #16]
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	6163      	str	r3, [r4, #20]
 8004f80:	b002      	add	sp, #8
 8004f82:	bd70      	pop	{r4, r5, r6, pc}
 8004f84:	ab01      	add	r3, sp, #4
 8004f86:	466a      	mov	r2, sp
 8004f88:	f7ff ffca 	bl	8004f20 <__swhatbuf_r>
 8004f8c:	9900      	ldr	r1, [sp, #0]
 8004f8e:	4605      	mov	r5, r0
 8004f90:	4630      	mov	r0, r6
 8004f92:	f000 f877 	bl	8005084 <_malloc_r>
 8004f96:	b948      	cbnz	r0, 8004fac <__smakebuf_r+0x44>
 8004f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f9c:	059a      	lsls	r2, r3, #22
 8004f9e:	d4ef      	bmi.n	8004f80 <__smakebuf_r+0x18>
 8004fa0:	f023 0303 	bic.w	r3, r3, #3
 8004fa4:	f043 0302 	orr.w	r3, r3, #2
 8004fa8:	81a3      	strh	r3, [r4, #12]
 8004faa:	e7e3      	b.n	8004f74 <__smakebuf_r+0xc>
 8004fac:	4b0d      	ldr	r3, [pc, #52]	; (8004fe4 <__smakebuf_r+0x7c>)
 8004fae:	62b3      	str	r3, [r6, #40]	; 0x28
 8004fb0:	89a3      	ldrh	r3, [r4, #12]
 8004fb2:	6020      	str	r0, [r4, #0]
 8004fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb8:	81a3      	strh	r3, [r4, #12]
 8004fba:	9b00      	ldr	r3, [sp, #0]
 8004fbc:	6163      	str	r3, [r4, #20]
 8004fbe:	9b01      	ldr	r3, [sp, #4]
 8004fc0:	6120      	str	r0, [r4, #16]
 8004fc2:	b15b      	cbz	r3, 8004fdc <__smakebuf_r+0x74>
 8004fc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fc8:	4630      	mov	r0, r6
 8004fca:	f000 fc05 	bl	80057d8 <_isatty_r>
 8004fce:	b128      	cbz	r0, 8004fdc <__smakebuf_r+0x74>
 8004fd0:	89a3      	ldrh	r3, [r4, #12]
 8004fd2:	f023 0303 	bic.w	r3, r3, #3
 8004fd6:	f043 0301 	orr.w	r3, r3, #1
 8004fda:	81a3      	strh	r3, [r4, #12]
 8004fdc:	89a3      	ldrh	r3, [r4, #12]
 8004fde:	431d      	orrs	r5, r3
 8004fe0:	81a5      	strh	r5, [r4, #12]
 8004fe2:	e7cd      	b.n	8004f80 <__smakebuf_r+0x18>
 8004fe4:	08004dd5 	.word	0x08004dd5

08004fe8 <_free_r>:
 8004fe8:	b538      	push	{r3, r4, r5, lr}
 8004fea:	4605      	mov	r5, r0
 8004fec:	2900      	cmp	r1, #0
 8004fee:	d045      	beq.n	800507c <_free_r+0x94>
 8004ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ff4:	1f0c      	subs	r4, r1, #4
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	bfb8      	it	lt
 8004ffa:	18e4      	addlt	r4, r4, r3
 8004ffc:	f000 fc0e 	bl	800581c <__malloc_lock>
 8005000:	4a1f      	ldr	r2, [pc, #124]	; (8005080 <_free_r+0x98>)
 8005002:	6813      	ldr	r3, [r2, #0]
 8005004:	4610      	mov	r0, r2
 8005006:	b933      	cbnz	r3, 8005016 <_free_r+0x2e>
 8005008:	6063      	str	r3, [r4, #4]
 800500a:	6014      	str	r4, [r2, #0]
 800500c:	4628      	mov	r0, r5
 800500e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005012:	f000 bc04 	b.w	800581e <__malloc_unlock>
 8005016:	42a3      	cmp	r3, r4
 8005018:	d90c      	bls.n	8005034 <_free_r+0x4c>
 800501a:	6821      	ldr	r1, [r4, #0]
 800501c:	1862      	adds	r2, r4, r1
 800501e:	4293      	cmp	r3, r2
 8005020:	bf04      	itt	eq
 8005022:	681a      	ldreq	r2, [r3, #0]
 8005024:	685b      	ldreq	r3, [r3, #4]
 8005026:	6063      	str	r3, [r4, #4]
 8005028:	bf04      	itt	eq
 800502a:	1852      	addeq	r2, r2, r1
 800502c:	6022      	streq	r2, [r4, #0]
 800502e:	6004      	str	r4, [r0, #0]
 8005030:	e7ec      	b.n	800500c <_free_r+0x24>
 8005032:	4613      	mov	r3, r2
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	b10a      	cbz	r2, 800503c <_free_r+0x54>
 8005038:	42a2      	cmp	r2, r4
 800503a:	d9fa      	bls.n	8005032 <_free_r+0x4a>
 800503c:	6819      	ldr	r1, [r3, #0]
 800503e:	1858      	adds	r0, r3, r1
 8005040:	42a0      	cmp	r0, r4
 8005042:	d10b      	bne.n	800505c <_free_r+0x74>
 8005044:	6820      	ldr	r0, [r4, #0]
 8005046:	4401      	add	r1, r0
 8005048:	1858      	adds	r0, r3, r1
 800504a:	4282      	cmp	r2, r0
 800504c:	6019      	str	r1, [r3, #0]
 800504e:	d1dd      	bne.n	800500c <_free_r+0x24>
 8005050:	6810      	ldr	r0, [r2, #0]
 8005052:	6852      	ldr	r2, [r2, #4]
 8005054:	605a      	str	r2, [r3, #4]
 8005056:	4401      	add	r1, r0
 8005058:	6019      	str	r1, [r3, #0]
 800505a:	e7d7      	b.n	800500c <_free_r+0x24>
 800505c:	d902      	bls.n	8005064 <_free_r+0x7c>
 800505e:	230c      	movs	r3, #12
 8005060:	602b      	str	r3, [r5, #0]
 8005062:	e7d3      	b.n	800500c <_free_r+0x24>
 8005064:	6820      	ldr	r0, [r4, #0]
 8005066:	1821      	adds	r1, r4, r0
 8005068:	428a      	cmp	r2, r1
 800506a:	bf04      	itt	eq
 800506c:	6811      	ldreq	r1, [r2, #0]
 800506e:	6852      	ldreq	r2, [r2, #4]
 8005070:	6062      	str	r2, [r4, #4]
 8005072:	bf04      	itt	eq
 8005074:	1809      	addeq	r1, r1, r0
 8005076:	6021      	streq	r1, [r4, #0]
 8005078:	605c      	str	r4, [r3, #4]
 800507a:	e7c7      	b.n	800500c <_free_r+0x24>
 800507c:	bd38      	pop	{r3, r4, r5, pc}
 800507e:	bf00      	nop
 8005080:	200000bc 	.word	0x200000bc

08005084 <_malloc_r>:
 8005084:	b570      	push	{r4, r5, r6, lr}
 8005086:	1ccd      	adds	r5, r1, #3
 8005088:	f025 0503 	bic.w	r5, r5, #3
 800508c:	3508      	adds	r5, #8
 800508e:	2d0c      	cmp	r5, #12
 8005090:	bf38      	it	cc
 8005092:	250c      	movcc	r5, #12
 8005094:	2d00      	cmp	r5, #0
 8005096:	4606      	mov	r6, r0
 8005098:	db01      	blt.n	800509e <_malloc_r+0x1a>
 800509a:	42a9      	cmp	r1, r5
 800509c:	d903      	bls.n	80050a6 <_malloc_r+0x22>
 800509e:	230c      	movs	r3, #12
 80050a0:	6033      	str	r3, [r6, #0]
 80050a2:	2000      	movs	r0, #0
 80050a4:	bd70      	pop	{r4, r5, r6, pc}
 80050a6:	f000 fbb9 	bl	800581c <__malloc_lock>
 80050aa:	4a21      	ldr	r2, [pc, #132]	; (8005130 <_malloc_r+0xac>)
 80050ac:	6814      	ldr	r4, [r2, #0]
 80050ae:	4621      	mov	r1, r4
 80050b0:	b991      	cbnz	r1, 80050d8 <_malloc_r+0x54>
 80050b2:	4c20      	ldr	r4, [pc, #128]	; (8005134 <_malloc_r+0xb0>)
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	b91b      	cbnz	r3, 80050c0 <_malloc_r+0x3c>
 80050b8:	4630      	mov	r0, r6
 80050ba:	f000 fb05 	bl	80056c8 <_sbrk_r>
 80050be:	6020      	str	r0, [r4, #0]
 80050c0:	4629      	mov	r1, r5
 80050c2:	4630      	mov	r0, r6
 80050c4:	f000 fb00 	bl	80056c8 <_sbrk_r>
 80050c8:	1c43      	adds	r3, r0, #1
 80050ca:	d124      	bne.n	8005116 <_malloc_r+0x92>
 80050cc:	230c      	movs	r3, #12
 80050ce:	6033      	str	r3, [r6, #0]
 80050d0:	4630      	mov	r0, r6
 80050d2:	f000 fba4 	bl	800581e <__malloc_unlock>
 80050d6:	e7e4      	b.n	80050a2 <_malloc_r+0x1e>
 80050d8:	680b      	ldr	r3, [r1, #0]
 80050da:	1b5b      	subs	r3, r3, r5
 80050dc:	d418      	bmi.n	8005110 <_malloc_r+0x8c>
 80050de:	2b0b      	cmp	r3, #11
 80050e0:	d90f      	bls.n	8005102 <_malloc_r+0x7e>
 80050e2:	600b      	str	r3, [r1, #0]
 80050e4:	50cd      	str	r5, [r1, r3]
 80050e6:	18cc      	adds	r4, r1, r3
 80050e8:	4630      	mov	r0, r6
 80050ea:	f000 fb98 	bl	800581e <__malloc_unlock>
 80050ee:	f104 000b 	add.w	r0, r4, #11
 80050f2:	1d23      	adds	r3, r4, #4
 80050f4:	f020 0007 	bic.w	r0, r0, #7
 80050f8:	1ac3      	subs	r3, r0, r3
 80050fa:	d0d3      	beq.n	80050a4 <_malloc_r+0x20>
 80050fc:	425a      	negs	r2, r3
 80050fe:	50e2      	str	r2, [r4, r3]
 8005100:	e7d0      	b.n	80050a4 <_malloc_r+0x20>
 8005102:	428c      	cmp	r4, r1
 8005104:	684b      	ldr	r3, [r1, #4]
 8005106:	bf16      	itet	ne
 8005108:	6063      	strne	r3, [r4, #4]
 800510a:	6013      	streq	r3, [r2, #0]
 800510c:	460c      	movne	r4, r1
 800510e:	e7eb      	b.n	80050e8 <_malloc_r+0x64>
 8005110:	460c      	mov	r4, r1
 8005112:	6849      	ldr	r1, [r1, #4]
 8005114:	e7cc      	b.n	80050b0 <_malloc_r+0x2c>
 8005116:	1cc4      	adds	r4, r0, #3
 8005118:	f024 0403 	bic.w	r4, r4, #3
 800511c:	42a0      	cmp	r0, r4
 800511e:	d005      	beq.n	800512c <_malloc_r+0xa8>
 8005120:	1a21      	subs	r1, r4, r0
 8005122:	4630      	mov	r0, r6
 8005124:	f000 fad0 	bl	80056c8 <_sbrk_r>
 8005128:	3001      	adds	r0, #1
 800512a:	d0cf      	beq.n	80050cc <_malloc_r+0x48>
 800512c:	6025      	str	r5, [r4, #0]
 800512e:	e7db      	b.n	80050e8 <_malloc_r+0x64>
 8005130:	200000bc 	.word	0x200000bc
 8005134:	200000c0 	.word	0x200000c0

08005138 <__sfputc_r>:
 8005138:	6893      	ldr	r3, [r2, #8]
 800513a:	3b01      	subs	r3, #1
 800513c:	2b00      	cmp	r3, #0
 800513e:	b410      	push	{r4}
 8005140:	6093      	str	r3, [r2, #8]
 8005142:	da08      	bge.n	8005156 <__sfputc_r+0x1e>
 8005144:	6994      	ldr	r4, [r2, #24]
 8005146:	42a3      	cmp	r3, r4
 8005148:	db01      	blt.n	800514e <__sfputc_r+0x16>
 800514a:	290a      	cmp	r1, #10
 800514c:	d103      	bne.n	8005156 <__sfputc_r+0x1e>
 800514e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005152:	f7ff bcab 	b.w	8004aac <__swbuf_r>
 8005156:	6813      	ldr	r3, [r2, #0]
 8005158:	1c58      	adds	r0, r3, #1
 800515a:	6010      	str	r0, [r2, #0]
 800515c:	7019      	strb	r1, [r3, #0]
 800515e:	4608      	mov	r0, r1
 8005160:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005164:	4770      	bx	lr

08005166 <__sfputs_r>:
 8005166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005168:	4606      	mov	r6, r0
 800516a:	460f      	mov	r7, r1
 800516c:	4614      	mov	r4, r2
 800516e:	18d5      	adds	r5, r2, r3
 8005170:	42ac      	cmp	r4, r5
 8005172:	d101      	bne.n	8005178 <__sfputs_r+0x12>
 8005174:	2000      	movs	r0, #0
 8005176:	e007      	b.n	8005188 <__sfputs_r+0x22>
 8005178:	463a      	mov	r2, r7
 800517a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800517e:	4630      	mov	r0, r6
 8005180:	f7ff ffda 	bl	8005138 <__sfputc_r>
 8005184:	1c43      	adds	r3, r0, #1
 8005186:	d1f3      	bne.n	8005170 <__sfputs_r+0xa>
 8005188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800518c <_vfiprintf_r>:
 800518c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005190:	460c      	mov	r4, r1
 8005192:	b09d      	sub	sp, #116	; 0x74
 8005194:	4617      	mov	r7, r2
 8005196:	461d      	mov	r5, r3
 8005198:	4606      	mov	r6, r0
 800519a:	b118      	cbz	r0, 80051a4 <_vfiprintf_r+0x18>
 800519c:	6983      	ldr	r3, [r0, #24]
 800519e:	b90b      	cbnz	r3, 80051a4 <_vfiprintf_r+0x18>
 80051a0:	f7ff fe34 	bl	8004e0c <__sinit>
 80051a4:	4b7c      	ldr	r3, [pc, #496]	; (8005398 <_vfiprintf_r+0x20c>)
 80051a6:	429c      	cmp	r4, r3
 80051a8:	d158      	bne.n	800525c <_vfiprintf_r+0xd0>
 80051aa:	6874      	ldr	r4, [r6, #4]
 80051ac:	89a3      	ldrh	r3, [r4, #12]
 80051ae:	0718      	lsls	r0, r3, #28
 80051b0:	d55e      	bpl.n	8005270 <_vfiprintf_r+0xe4>
 80051b2:	6923      	ldr	r3, [r4, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d05b      	beq.n	8005270 <_vfiprintf_r+0xe4>
 80051b8:	2300      	movs	r3, #0
 80051ba:	9309      	str	r3, [sp, #36]	; 0x24
 80051bc:	2320      	movs	r3, #32
 80051be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051c2:	2330      	movs	r3, #48	; 0x30
 80051c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051c8:	9503      	str	r5, [sp, #12]
 80051ca:	f04f 0b01 	mov.w	fp, #1
 80051ce:	46b8      	mov	r8, r7
 80051d0:	4645      	mov	r5, r8
 80051d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80051d6:	b10b      	cbz	r3, 80051dc <_vfiprintf_r+0x50>
 80051d8:	2b25      	cmp	r3, #37	; 0x25
 80051da:	d154      	bne.n	8005286 <_vfiprintf_r+0xfa>
 80051dc:	ebb8 0a07 	subs.w	sl, r8, r7
 80051e0:	d00b      	beq.n	80051fa <_vfiprintf_r+0x6e>
 80051e2:	4653      	mov	r3, sl
 80051e4:	463a      	mov	r2, r7
 80051e6:	4621      	mov	r1, r4
 80051e8:	4630      	mov	r0, r6
 80051ea:	f7ff ffbc 	bl	8005166 <__sfputs_r>
 80051ee:	3001      	adds	r0, #1
 80051f0:	f000 80c2 	beq.w	8005378 <_vfiprintf_r+0x1ec>
 80051f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051f6:	4453      	add	r3, sl
 80051f8:	9309      	str	r3, [sp, #36]	; 0x24
 80051fa:	f898 3000 	ldrb.w	r3, [r8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 80ba 	beq.w	8005378 <_vfiprintf_r+0x1ec>
 8005204:	2300      	movs	r3, #0
 8005206:	f04f 32ff 	mov.w	r2, #4294967295
 800520a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800520e:	9304      	str	r3, [sp, #16]
 8005210:	9307      	str	r3, [sp, #28]
 8005212:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005216:	931a      	str	r3, [sp, #104]	; 0x68
 8005218:	46a8      	mov	r8, r5
 800521a:	2205      	movs	r2, #5
 800521c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005220:	485e      	ldr	r0, [pc, #376]	; (800539c <_vfiprintf_r+0x210>)
 8005222:	f7fa ffd5 	bl	80001d0 <memchr>
 8005226:	9b04      	ldr	r3, [sp, #16]
 8005228:	bb78      	cbnz	r0, 800528a <_vfiprintf_r+0xfe>
 800522a:	06d9      	lsls	r1, r3, #27
 800522c:	bf44      	itt	mi
 800522e:	2220      	movmi	r2, #32
 8005230:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005234:	071a      	lsls	r2, r3, #28
 8005236:	bf44      	itt	mi
 8005238:	222b      	movmi	r2, #43	; 0x2b
 800523a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800523e:	782a      	ldrb	r2, [r5, #0]
 8005240:	2a2a      	cmp	r2, #42	; 0x2a
 8005242:	d02a      	beq.n	800529a <_vfiprintf_r+0x10e>
 8005244:	9a07      	ldr	r2, [sp, #28]
 8005246:	46a8      	mov	r8, r5
 8005248:	2000      	movs	r0, #0
 800524a:	250a      	movs	r5, #10
 800524c:	4641      	mov	r1, r8
 800524e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005252:	3b30      	subs	r3, #48	; 0x30
 8005254:	2b09      	cmp	r3, #9
 8005256:	d969      	bls.n	800532c <_vfiprintf_r+0x1a0>
 8005258:	b360      	cbz	r0, 80052b4 <_vfiprintf_r+0x128>
 800525a:	e024      	b.n	80052a6 <_vfiprintf_r+0x11a>
 800525c:	4b50      	ldr	r3, [pc, #320]	; (80053a0 <_vfiprintf_r+0x214>)
 800525e:	429c      	cmp	r4, r3
 8005260:	d101      	bne.n	8005266 <_vfiprintf_r+0xda>
 8005262:	68b4      	ldr	r4, [r6, #8]
 8005264:	e7a2      	b.n	80051ac <_vfiprintf_r+0x20>
 8005266:	4b4f      	ldr	r3, [pc, #316]	; (80053a4 <_vfiprintf_r+0x218>)
 8005268:	429c      	cmp	r4, r3
 800526a:	bf08      	it	eq
 800526c:	68f4      	ldreq	r4, [r6, #12]
 800526e:	e79d      	b.n	80051ac <_vfiprintf_r+0x20>
 8005270:	4621      	mov	r1, r4
 8005272:	4630      	mov	r0, r6
 8005274:	f7ff fc6c 	bl	8004b50 <__swsetup_r>
 8005278:	2800      	cmp	r0, #0
 800527a:	d09d      	beq.n	80051b8 <_vfiprintf_r+0x2c>
 800527c:	f04f 30ff 	mov.w	r0, #4294967295
 8005280:	b01d      	add	sp, #116	; 0x74
 8005282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005286:	46a8      	mov	r8, r5
 8005288:	e7a2      	b.n	80051d0 <_vfiprintf_r+0x44>
 800528a:	4a44      	ldr	r2, [pc, #272]	; (800539c <_vfiprintf_r+0x210>)
 800528c:	1a80      	subs	r0, r0, r2
 800528e:	fa0b f000 	lsl.w	r0, fp, r0
 8005292:	4318      	orrs	r0, r3
 8005294:	9004      	str	r0, [sp, #16]
 8005296:	4645      	mov	r5, r8
 8005298:	e7be      	b.n	8005218 <_vfiprintf_r+0x8c>
 800529a:	9a03      	ldr	r2, [sp, #12]
 800529c:	1d11      	adds	r1, r2, #4
 800529e:	6812      	ldr	r2, [r2, #0]
 80052a0:	9103      	str	r1, [sp, #12]
 80052a2:	2a00      	cmp	r2, #0
 80052a4:	db01      	blt.n	80052aa <_vfiprintf_r+0x11e>
 80052a6:	9207      	str	r2, [sp, #28]
 80052a8:	e004      	b.n	80052b4 <_vfiprintf_r+0x128>
 80052aa:	4252      	negs	r2, r2
 80052ac:	f043 0302 	orr.w	r3, r3, #2
 80052b0:	9207      	str	r2, [sp, #28]
 80052b2:	9304      	str	r3, [sp, #16]
 80052b4:	f898 3000 	ldrb.w	r3, [r8]
 80052b8:	2b2e      	cmp	r3, #46	; 0x2e
 80052ba:	d10e      	bne.n	80052da <_vfiprintf_r+0x14e>
 80052bc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80052c0:	2b2a      	cmp	r3, #42	; 0x2a
 80052c2:	d138      	bne.n	8005336 <_vfiprintf_r+0x1aa>
 80052c4:	9b03      	ldr	r3, [sp, #12]
 80052c6:	1d1a      	adds	r2, r3, #4
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	9203      	str	r2, [sp, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	bfb8      	it	lt
 80052d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80052d4:	f108 0802 	add.w	r8, r8, #2
 80052d8:	9305      	str	r3, [sp, #20]
 80052da:	4d33      	ldr	r5, [pc, #204]	; (80053a8 <_vfiprintf_r+0x21c>)
 80052dc:	f898 1000 	ldrb.w	r1, [r8]
 80052e0:	2203      	movs	r2, #3
 80052e2:	4628      	mov	r0, r5
 80052e4:	f7fa ff74 	bl	80001d0 <memchr>
 80052e8:	b140      	cbz	r0, 80052fc <_vfiprintf_r+0x170>
 80052ea:	2340      	movs	r3, #64	; 0x40
 80052ec:	1b40      	subs	r0, r0, r5
 80052ee:	fa03 f000 	lsl.w	r0, r3, r0
 80052f2:	9b04      	ldr	r3, [sp, #16]
 80052f4:	4303      	orrs	r3, r0
 80052f6:	f108 0801 	add.w	r8, r8, #1
 80052fa:	9304      	str	r3, [sp, #16]
 80052fc:	f898 1000 	ldrb.w	r1, [r8]
 8005300:	482a      	ldr	r0, [pc, #168]	; (80053ac <_vfiprintf_r+0x220>)
 8005302:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005306:	2206      	movs	r2, #6
 8005308:	f108 0701 	add.w	r7, r8, #1
 800530c:	f7fa ff60 	bl	80001d0 <memchr>
 8005310:	2800      	cmp	r0, #0
 8005312:	d037      	beq.n	8005384 <_vfiprintf_r+0x1f8>
 8005314:	4b26      	ldr	r3, [pc, #152]	; (80053b0 <_vfiprintf_r+0x224>)
 8005316:	bb1b      	cbnz	r3, 8005360 <_vfiprintf_r+0x1d4>
 8005318:	9b03      	ldr	r3, [sp, #12]
 800531a:	3307      	adds	r3, #7
 800531c:	f023 0307 	bic.w	r3, r3, #7
 8005320:	3308      	adds	r3, #8
 8005322:	9303      	str	r3, [sp, #12]
 8005324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005326:	444b      	add	r3, r9
 8005328:	9309      	str	r3, [sp, #36]	; 0x24
 800532a:	e750      	b.n	80051ce <_vfiprintf_r+0x42>
 800532c:	fb05 3202 	mla	r2, r5, r2, r3
 8005330:	2001      	movs	r0, #1
 8005332:	4688      	mov	r8, r1
 8005334:	e78a      	b.n	800524c <_vfiprintf_r+0xc0>
 8005336:	2300      	movs	r3, #0
 8005338:	f108 0801 	add.w	r8, r8, #1
 800533c:	9305      	str	r3, [sp, #20]
 800533e:	4619      	mov	r1, r3
 8005340:	250a      	movs	r5, #10
 8005342:	4640      	mov	r0, r8
 8005344:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005348:	3a30      	subs	r2, #48	; 0x30
 800534a:	2a09      	cmp	r2, #9
 800534c:	d903      	bls.n	8005356 <_vfiprintf_r+0x1ca>
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0c3      	beq.n	80052da <_vfiprintf_r+0x14e>
 8005352:	9105      	str	r1, [sp, #20]
 8005354:	e7c1      	b.n	80052da <_vfiprintf_r+0x14e>
 8005356:	fb05 2101 	mla	r1, r5, r1, r2
 800535a:	2301      	movs	r3, #1
 800535c:	4680      	mov	r8, r0
 800535e:	e7f0      	b.n	8005342 <_vfiprintf_r+0x1b6>
 8005360:	ab03      	add	r3, sp, #12
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	4622      	mov	r2, r4
 8005366:	4b13      	ldr	r3, [pc, #76]	; (80053b4 <_vfiprintf_r+0x228>)
 8005368:	a904      	add	r1, sp, #16
 800536a:	4630      	mov	r0, r6
 800536c:	f3af 8000 	nop.w
 8005370:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005374:	4681      	mov	r9, r0
 8005376:	d1d5      	bne.n	8005324 <_vfiprintf_r+0x198>
 8005378:	89a3      	ldrh	r3, [r4, #12]
 800537a:	065b      	lsls	r3, r3, #25
 800537c:	f53f af7e 	bmi.w	800527c <_vfiprintf_r+0xf0>
 8005380:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005382:	e77d      	b.n	8005280 <_vfiprintf_r+0xf4>
 8005384:	ab03      	add	r3, sp, #12
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	4622      	mov	r2, r4
 800538a:	4b0a      	ldr	r3, [pc, #40]	; (80053b4 <_vfiprintf_r+0x228>)
 800538c:	a904      	add	r1, sp, #16
 800538e:	4630      	mov	r0, r6
 8005390:	f000 f888 	bl	80054a4 <_printf_i>
 8005394:	e7ec      	b.n	8005370 <_vfiprintf_r+0x1e4>
 8005396:	bf00      	nop
 8005398:	08005a10 	.word	0x08005a10
 800539c:	08005a50 	.word	0x08005a50
 80053a0:	08005a30 	.word	0x08005a30
 80053a4:	080059f0 	.word	0x080059f0
 80053a8:	08005a56 	.word	0x08005a56
 80053ac:	08005a5a 	.word	0x08005a5a
 80053b0:	00000000 	.word	0x00000000
 80053b4:	08005167 	.word	0x08005167

080053b8 <_printf_common>:
 80053b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053bc:	4691      	mov	r9, r2
 80053be:	461f      	mov	r7, r3
 80053c0:	688a      	ldr	r2, [r1, #8]
 80053c2:	690b      	ldr	r3, [r1, #16]
 80053c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053c8:	4293      	cmp	r3, r2
 80053ca:	bfb8      	it	lt
 80053cc:	4613      	movlt	r3, r2
 80053ce:	f8c9 3000 	str.w	r3, [r9]
 80053d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053d6:	4606      	mov	r6, r0
 80053d8:	460c      	mov	r4, r1
 80053da:	b112      	cbz	r2, 80053e2 <_printf_common+0x2a>
 80053dc:	3301      	adds	r3, #1
 80053de:	f8c9 3000 	str.w	r3, [r9]
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	0699      	lsls	r1, r3, #26
 80053e6:	bf42      	ittt	mi
 80053e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80053ec:	3302      	addmi	r3, #2
 80053ee:	f8c9 3000 	strmi.w	r3, [r9]
 80053f2:	6825      	ldr	r5, [r4, #0]
 80053f4:	f015 0506 	ands.w	r5, r5, #6
 80053f8:	d107      	bne.n	800540a <_printf_common+0x52>
 80053fa:	f104 0a19 	add.w	sl, r4, #25
 80053fe:	68e3      	ldr	r3, [r4, #12]
 8005400:	f8d9 2000 	ldr.w	r2, [r9]
 8005404:	1a9b      	subs	r3, r3, r2
 8005406:	42ab      	cmp	r3, r5
 8005408:	dc28      	bgt.n	800545c <_printf_common+0xa4>
 800540a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800540e:	6822      	ldr	r2, [r4, #0]
 8005410:	3300      	adds	r3, #0
 8005412:	bf18      	it	ne
 8005414:	2301      	movne	r3, #1
 8005416:	0692      	lsls	r2, r2, #26
 8005418:	d42d      	bmi.n	8005476 <_printf_common+0xbe>
 800541a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800541e:	4639      	mov	r1, r7
 8005420:	4630      	mov	r0, r6
 8005422:	47c0      	blx	r8
 8005424:	3001      	adds	r0, #1
 8005426:	d020      	beq.n	800546a <_printf_common+0xb2>
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	68e5      	ldr	r5, [r4, #12]
 800542c:	f8d9 2000 	ldr.w	r2, [r9]
 8005430:	f003 0306 	and.w	r3, r3, #6
 8005434:	2b04      	cmp	r3, #4
 8005436:	bf08      	it	eq
 8005438:	1aad      	subeq	r5, r5, r2
 800543a:	68a3      	ldr	r3, [r4, #8]
 800543c:	6922      	ldr	r2, [r4, #16]
 800543e:	bf0c      	ite	eq
 8005440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005444:	2500      	movne	r5, #0
 8005446:	4293      	cmp	r3, r2
 8005448:	bfc4      	itt	gt
 800544a:	1a9b      	subgt	r3, r3, r2
 800544c:	18ed      	addgt	r5, r5, r3
 800544e:	f04f 0900 	mov.w	r9, #0
 8005452:	341a      	adds	r4, #26
 8005454:	454d      	cmp	r5, r9
 8005456:	d11a      	bne.n	800548e <_printf_common+0xd6>
 8005458:	2000      	movs	r0, #0
 800545a:	e008      	b.n	800546e <_printf_common+0xb6>
 800545c:	2301      	movs	r3, #1
 800545e:	4652      	mov	r2, sl
 8005460:	4639      	mov	r1, r7
 8005462:	4630      	mov	r0, r6
 8005464:	47c0      	blx	r8
 8005466:	3001      	adds	r0, #1
 8005468:	d103      	bne.n	8005472 <_printf_common+0xba>
 800546a:	f04f 30ff 	mov.w	r0, #4294967295
 800546e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005472:	3501      	adds	r5, #1
 8005474:	e7c3      	b.n	80053fe <_printf_common+0x46>
 8005476:	18e1      	adds	r1, r4, r3
 8005478:	1c5a      	adds	r2, r3, #1
 800547a:	2030      	movs	r0, #48	; 0x30
 800547c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005480:	4422      	add	r2, r4
 8005482:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005486:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800548a:	3302      	adds	r3, #2
 800548c:	e7c5      	b.n	800541a <_printf_common+0x62>
 800548e:	2301      	movs	r3, #1
 8005490:	4622      	mov	r2, r4
 8005492:	4639      	mov	r1, r7
 8005494:	4630      	mov	r0, r6
 8005496:	47c0      	blx	r8
 8005498:	3001      	adds	r0, #1
 800549a:	d0e6      	beq.n	800546a <_printf_common+0xb2>
 800549c:	f109 0901 	add.w	r9, r9, #1
 80054a0:	e7d8      	b.n	8005454 <_printf_common+0x9c>
	...

080054a4 <_printf_i>:
 80054a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80054ac:	460c      	mov	r4, r1
 80054ae:	7e09      	ldrb	r1, [r1, #24]
 80054b0:	b085      	sub	sp, #20
 80054b2:	296e      	cmp	r1, #110	; 0x6e
 80054b4:	4617      	mov	r7, r2
 80054b6:	4606      	mov	r6, r0
 80054b8:	4698      	mov	r8, r3
 80054ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054bc:	f000 80b3 	beq.w	8005626 <_printf_i+0x182>
 80054c0:	d822      	bhi.n	8005508 <_printf_i+0x64>
 80054c2:	2963      	cmp	r1, #99	; 0x63
 80054c4:	d036      	beq.n	8005534 <_printf_i+0x90>
 80054c6:	d80a      	bhi.n	80054de <_printf_i+0x3a>
 80054c8:	2900      	cmp	r1, #0
 80054ca:	f000 80b9 	beq.w	8005640 <_printf_i+0x19c>
 80054ce:	2958      	cmp	r1, #88	; 0x58
 80054d0:	f000 8083 	beq.w	80055da <_printf_i+0x136>
 80054d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80054dc:	e032      	b.n	8005544 <_printf_i+0xa0>
 80054de:	2964      	cmp	r1, #100	; 0x64
 80054e0:	d001      	beq.n	80054e6 <_printf_i+0x42>
 80054e2:	2969      	cmp	r1, #105	; 0x69
 80054e4:	d1f6      	bne.n	80054d4 <_printf_i+0x30>
 80054e6:	6820      	ldr	r0, [r4, #0]
 80054e8:	6813      	ldr	r3, [r2, #0]
 80054ea:	0605      	lsls	r5, r0, #24
 80054ec:	f103 0104 	add.w	r1, r3, #4
 80054f0:	d52a      	bpl.n	8005548 <_printf_i+0xa4>
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6011      	str	r1, [r2, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	da03      	bge.n	8005502 <_printf_i+0x5e>
 80054fa:	222d      	movs	r2, #45	; 0x2d
 80054fc:	425b      	negs	r3, r3
 80054fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005502:	486f      	ldr	r0, [pc, #444]	; (80056c0 <_printf_i+0x21c>)
 8005504:	220a      	movs	r2, #10
 8005506:	e039      	b.n	800557c <_printf_i+0xd8>
 8005508:	2973      	cmp	r1, #115	; 0x73
 800550a:	f000 809d 	beq.w	8005648 <_printf_i+0x1a4>
 800550e:	d808      	bhi.n	8005522 <_printf_i+0x7e>
 8005510:	296f      	cmp	r1, #111	; 0x6f
 8005512:	d020      	beq.n	8005556 <_printf_i+0xb2>
 8005514:	2970      	cmp	r1, #112	; 0x70
 8005516:	d1dd      	bne.n	80054d4 <_printf_i+0x30>
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	f043 0320 	orr.w	r3, r3, #32
 800551e:	6023      	str	r3, [r4, #0]
 8005520:	e003      	b.n	800552a <_printf_i+0x86>
 8005522:	2975      	cmp	r1, #117	; 0x75
 8005524:	d017      	beq.n	8005556 <_printf_i+0xb2>
 8005526:	2978      	cmp	r1, #120	; 0x78
 8005528:	d1d4      	bne.n	80054d4 <_printf_i+0x30>
 800552a:	2378      	movs	r3, #120	; 0x78
 800552c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005530:	4864      	ldr	r0, [pc, #400]	; (80056c4 <_printf_i+0x220>)
 8005532:	e055      	b.n	80055e0 <_printf_i+0x13c>
 8005534:	6813      	ldr	r3, [r2, #0]
 8005536:	1d19      	adds	r1, r3, #4
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6011      	str	r1, [r2, #0]
 800553c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005540:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005544:	2301      	movs	r3, #1
 8005546:	e08c      	b.n	8005662 <_printf_i+0x1be>
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6011      	str	r1, [r2, #0]
 800554c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005550:	bf18      	it	ne
 8005552:	b21b      	sxthne	r3, r3
 8005554:	e7cf      	b.n	80054f6 <_printf_i+0x52>
 8005556:	6813      	ldr	r3, [r2, #0]
 8005558:	6825      	ldr	r5, [r4, #0]
 800555a:	1d18      	adds	r0, r3, #4
 800555c:	6010      	str	r0, [r2, #0]
 800555e:	0628      	lsls	r0, r5, #24
 8005560:	d501      	bpl.n	8005566 <_printf_i+0xc2>
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	e002      	b.n	800556c <_printf_i+0xc8>
 8005566:	0668      	lsls	r0, r5, #25
 8005568:	d5fb      	bpl.n	8005562 <_printf_i+0xbe>
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	4854      	ldr	r0, [pc, #336]	; (80056c0 <_printf_i+0x21c>)
 800556e:	296f      	cmp	r1, #111	; 0x6f
 8005570:	bf14      	ite	ne
 8005572:	220a      	movne	r2, #10
 8005574:	2208      	moveq	r2, #8
 8005576:	2100      	movs	r1, #0
 8005578:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800557c:	6865      	ldr	r5, [r4, #4]
 800557e:	60a5      	str	r5, [r4, #8]
 8005580:	2d00      	cmp	r5, #0
 8005582:	f2c0 8095 	blt.w	80056b0 <_printf_i+0x20c>
 8005586:	6821      	ldr	r1, [r4, #0]
 8005588:	f021 0104 	bic.w	r1, r1, #4
 800558c:	6021      	str	r1, [r4, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d13d      	bne.n	800560e <_printf_i+0x16a>
 8005592:	2d00      	cmp	r5, #0
 8005594:	f040 808e 	bne.w	80056b4 <_printf_i+0x210>
 8005598:	4665      	mov	r5, ip
 800559a:	2a08      	cmp	r2, #8
 800559c:	d10b      	bne.n	80055b6 <_printf_i+0x112>
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	07db      	lsls	r3, r3, #31
 80055a2:	d508      	bpl.n	80055b6 <_printf_i+0x112>
 80055a4:	6923      	ldr	r3, [r4, #16]
 80055a6:	6862      	ldr	r2, [r4, #4]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	bfde      	ittt	le
 80055ac:	2330      	movle	r3, #48	; 0x30
 80055ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055b6:	ebac 0305 	sub.w	r3, ip, r5
 80055ba:	6123      	str	r3, [r4, #16]
 80055bc:	f8cd 8000 	str.w	r8, [sp]
 80055c0:	463b      	mov	r3, r7
 80055c2:	aa03      	add	r2, sp, #12
 80055c4:	4621      	mov	r1, r4
 80055c6:	4630      	mov	r0, r6
 80055c8:	f7ff fef6 	bl	80053b8 <_printf_common>
 80055cc:	3001      	adds	r0, #1
 80055ce:	d14d      	bne.n	800566c <_printf_i+0x1c8>
 80055d0:	f04f 30ff 	mov.w	r0, #4294967295
 80055d4:	b005      	add	sp, #20
 80055d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055da:	4839      	ldr	r0, [pc, #228]	; (80056c0 <_printf_i+0x21c>)
 80055dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80055e0:	6813      	ldr	r3, [r2, #0]
 80055e2:	6821      	ldr	r1, [r4, #0]
 80055e4:	1d1d      	adds	r5, r3, #4
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6015      	str	r5, [r2, #0]
 80055ea:	060a      	lsls	r2, r1, #24
 80055ec:	d50b      	bpl.n	8005606 <_printf_i+0x162>
 80055ee:	07ca      	lsls	r2, r1, #31
 80055f0:	bf44      	itt	mi
 80055f2:	f041 0120 	orrmi.w	r1, r1, #32
 80055f6:	6021      	strmi	r1, [r4, #0]
 80055f8:	b91b      	cbnz	r3, 8005602 <_printf_i+0x15e>
 80055fa:	6822      	ldr	r2, [r4, #0]
 80055fc:	f022 0220 	bic.w	r2, r2, #32
 8005600:	6022      	str	r2, [r4, #0]
 8005602:	2210      	movs	r2, #16
 8005604:	e7b7      	b.n	8005576 <_printf_i+0xd2>
 8005606:	064d      	lsls	r5, r1, #25
 8005608:	bf48      	it	mi
 800560a:	b29b      	uxthmi	r3, r3
 800560c:	e7ef      	b.n	80055ee <_printf_i+0x14a>
 800560e:	4665      	mov	r5, ip
 8005610:	fbb3 f1f2 	udiv	r1, r3, r2
 8005614:	fb02 3311 	mls	r3, r2, r1, r3
 8005618:	5cc3      	ldrb	r3, [r0, r3]
 800561a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800561e:	460b      	mov	r3, r1
 8005620:	2900      	cmp	r1, #0
 8005622:	d1f5      	bne.n	8005610 <_printf_i+0x16c>
 8005624:	e7b9      	b.n	800559a <_printf_i+0xf6>
 8005626:	6813      	ldr	r3, [r2, #0]
 8005628:	6825      	ldr	r5, [r4, #0]
 800562a:	6961      	ldr	r1, [r4, #20]
 800562c:	1d18      	adds	r0, r3, #4
 800562e:	6010      	str	r0, [r2, #0]
 8005630:	0628      	lsls	r0, r5, #24
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	d501      	bpl.n	800563a <_printf_i+0x196>
 8005636:	6019      	str	r1, [r3, #0]
 8005638:	e002      	b.n	8005640 <_printf_i+0x19c>
 800563a:	066a      	lsls	r2, r5, #25
 800563c:	d5fb      	bpl.n	8005636 <_printf_i+0x192>
 800563e:	8019      	strh	r1, [r3, #0]
 8005640:	2300      	movs	r3, #0
 8005642:	6123      	str	r3, [r4, #16]
 8005644:	4665      	mov	r5, ip
 8005646:	e7b9      	b.n	80055bc <_printf_i+0x118>
 8005648:	6813      	ldr	r3, [r2, #0]
 800564a:	1d19      	adds	r1, r3, #4
 800564c:	6011      	str	r1, [r2, #0]
 800564e:	681d      	ldr	r5, [r3, #0]
 8005650:	6862      	ldr	r2, [r4, #4]
 8005652:	2100      	movs	r1, #0
 8005654:	4628      	mov	r0, r5
 8005656:	f7fa fdbb 	bl	80001d0 <memchr>
 800565a:	b108      	cbz	r0, 8005660 <_printf_i+0x1bc>
 800565c:	1b40      	subs	r0, r0, r5
 800565e:	6060      	str	r0, [r4, #4]
 8005660:	6863      	ldr	r3, [r4, #4]
 8005662:	6123      	str	r3, [r4, #16]
 8005664:	2300      	movs	r3, #0
 8005666:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800566a:	e7a7      	b.n	80055bc <_printf_i+0x118>
 800566c:	6923      	ldr	r3, [r4, #16]
 800566e:	462a      	mov	r2, r5
 8005670:	4639      	mov	r1, r7
 8005672:	4630      	mov	r0, r6
 8005674:	47c0      	blx	r8
 8005676:	3001      	adds	r0, #1
 8005678:	d0aa      	beq.n	80055d0 <_printf_i+0x12c>
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	079b      	lsls	r3, r3, #30
 800567e:	d413      	bmi.n	80056a8 <_printf_i+0x204>
 8005680:	68e0      	ldr	r0, [r4, #12]
 8005682:	9b03      	ldr	r3, [sp, #12]
 8005684:	4298      	cmp	r0, r3
 8005686:	bfb8      	it	lt
 8005688:	4618      	movlt	r0, r3
 800568a:	e7a3      	b.n	80055d4 <_printf_i+0x130>
 800568c:	2301      	movs	r3, #1
 800568e:	464a      	mov	r2, r9
 8005690:	4639      	mov	r1, r7
 8005692:	4630      	mov	r0, r6
 8005694:	47c0      	blx	r8
 8005696:	3001      	adds	r0, #1
 8005698:	d09a      	beq.n	80055d0 <_printf_i+0x12c>
 800569a:	3501      	adds	r5, #1
 800569c:	68e3      	ldr	r3, [r4, #12]
 800569e:	9a03      	ldr	r2, [sp, #12]
 80056a0:	1a9b      	subs	r3, r3, r2
 80056a2:	42ab      	cmp	r3, r5
 80056a4:	dcf2      	bgt.n	800568c <_printf_i+0x1e8>
 80056a6:	e7eb      	b.n	8005680 <_printf_i+0x1dc>
 80056a8:	2500      	movs	r5, #0
 80056aa:	f104 0919 	add.w	r9, r4, #25
 80056ae:	e7f5      	b.n	800569c <_printf_i+0x1f8>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1ac      	bne.n	800560e <_printf_i+0x16a>
 80056b4:	7803      	ldrb	r3, [r0, #0]
 80056b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056be:	e76c      	b.n	800559a <_printf_i+0xf6>
 80056c0:	08005a61 	.word	0x08005a61
 80056c4:	08005a72 	.word	0x08005a72

080056c8 <_sbrk_r>:
 80056c8:	b538      	push	{r3, r4, r5, lr}
 80056ca:	4c06      	ldr	r4, [pc, #24]	; (80056e4 <_sbrk_r+0x1c>)
 80056cc:	2300      	movs	r3, #0
 80056ce:	4605      	mov	r5, r0
 80056d0:	4608      	mov	r0, r1
 80056d2:	6023      	str	r3, [r4, #0]
 80056d4:	f7fb fc8e 	bl	8000ff4 <_sbrk>
 80056d8:	1c43      	adds	r3, r0, #1
 80056da:	d102      	bne.n	80056e2 <_sbrk_r+0x1a>
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	b103      	cbz	r3, 80056e2 <_sbrk_r+0x1a>
 80056e0:	602b      	str	r3, [r5, #0]
 80056e2:	bd38      	pop	{r3, r4, r5, pc}
 80056e4:	200002a0 	.word	0x200002a0

080056e8 <__sread>:
 80056e8:	b510      	push	{r4, lr}
 80056ea:	460c      	mov	r4, r1
 80056ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056f0:	f000 f896 	bl	8005820 <_read_r>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	bfab      	itete	ge
 80056f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056fa:	89a3      	ldrhlt	r3, [r4, #12]
 80056fc:	181b      	addge	r3, r3, r0
 80056fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005702:	bfac      	ite	ge
 8005704:	6563      	strge	r3, [r4, #84]	; 0x54
 8005706:	81a3      	strhlt	r3, [r4, #12]
 8005708:	bd10      	pop	{r4, pc}

0800570a <__swrite>:
 800570a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800570e:	461f      	mov	r7, r3
 8005710:	898b      	ldrh	r3, [r1, #12]
 8005712:	05db      	lsls	r3, r3, #23
 8005714:	4605      	mov	r5, r0
 8005716:	460c      	mov	r4, r1
 8005718:	4616      	mov	r6, r2
 800571a:	d505      	bpl.n	8005728 <__swrite+0x1e>
 800571c:	2302      	movs	r3, #2
 800571e:	2200      	movs	r2, #0
 8005720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005724:	f000 f868 	bl	80057f8 <_lseek_r>
 8005728:	89a3      	ldrh	r3, [r4, #12]
 800572a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800572e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005732:	81a3      	strh	r3, [r4, #12]
 8005734:	4632      	mov	r2, r6
 8005736:	463b      	mov	r3, r7
 8005738:	4628      	mov	r0, r5
 800573a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800573e:	f000 b817 	b.w	8005770 <_write_r>

08005742 <__sseek>:
 8005742:	b510      	push	{r4, lr}
 8005744:	460c      	mov	r4, r1
 8005746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800574a:	f000 f855 	bl	80057f8 <_lseek_r>
 800574e:	1c43      	adds	r3, r0, #1
 8005750:	89a3      	ldrh	r3, [r4, #12]
 8005752:	bf15      	itete	ne
 8005754:	6560      	strne	r0, [r4, #84]	; 0x54
 8005756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800575a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800575e:	81a3      	strheq	r3, [r4, #12]
 8005760:	bf18      	it	ne
 8005762:	81a3      	strhne	r3, [r4, #12]
 8005764:	bd10      	pop	{r4, pc}

08005766 <__sclose>:
 8005766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800576a:	f000 b813 	b.w	8005794 <_close_r>
	...

08005770 <_write_r>:
 8005770:	b538      	push	{r3, r4, r5, lr}
 8005772:	4c07      	ldr	r4, [pc, #28]	; (8005790 <_write_r+0x20>)
 8005774:	4605      	mov	r5, r0
 8005776:	4608      	mov	r0, r1
 8005778:	4611      	mov	r1, r2
 800577a:	2200      	movs	r2, #0
 800577c:	6022      	str	r2, [r4, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	f7fb fbe7 	bl	8000f52 <_write>
 8005784:	1c43      	adds	r3, r0, #1
 8005786:	d102      	bne.n	800578e <_write_r+0x1e>
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	b103      	cbz	r3, 800578e <_write_r+0x1e>
 800578c:	602b      	str	r3, [r5, #0]
 800578e:	bd38      	pop	{r3, r4, r5, pc}
 8005790:	200002a0 	.word	0x200002a0

08005794 <_close_r>:
 8005794:	b538      	push	{r3, r4, r5, lr}
 8005796:	4c06      	ldr	r4, [pc, #24]	; (80057b0 <_close_r+0x1c>)
 8005798:	2300      	movs	r3, #0
 800579a:	4605      	mov	r5, r0
 800579c:	4608      	mov	r0, r1
 800579e:	6023      	str	r3, [r4, #0]
 80057a0:	f7fb fbf3 	bl	8000f8a <_close>
 80057a4:	1c43      	adds	r3, r0, #1
 80057a6:	d102      	bne.n	80057ae <_close_r+0x1a>
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	b103      	cbz	r3, 80057ae <_close_r+0x1a>
 80057ac:	602b      	str	r3, [r5, #0]
 80057ae:	bd38      	pop	{r3, r4, r5, pc}
 80057b0:	200002a0 	.word	0x200002a0

080057b4 <_fstat_r>:
 80057b4:	b538      	push	{r3, r4, r5, lr}
 80057b6:	4c07      	ldr	r4, [pc, #28]	; (80057d4 <_fstat_r+0x20>)
 80057b8:	2300      	movs	r3, #0
 80057ba:	4605      	mov	r5, r0
 80057bc:	4608      	mov	r0, r1
 80057be:	4611      	mov	r1, r2
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	f7fb fbee 	bl	8000fa2 <_fstat>
 80057c6:	1c43      	adds	r3, r0, #1
 80057c8:	d102      	bne.n	80057d0 <_fstat_r+0x1c>
 80057ca:	6823      	ldr	r3, [r4, #0]
 80057cc:	b103      	cbz	r3, 80057d0 <_fstat_r+0x1c>
 80057ce:	602b      	str	r3, [r5, #0]
 80057d0:	bd38      	pop	{r3, r4, r5, pc}
 80057d2:	bf00      	nop
 80057d4:	200002a0 	.word	0x200002a0

080057d8 <_isatty_r>:
 80057d8:	b538      	push	{r3, r4, r5, lr}
 80057da:	4c06      	ldr	r4, [pc, #24]	; (80057f4 <_isatty_r+0x1c>)
 80057dc:	2300      	movs	r3, #0
 80057de:	4605      	mov	r5, r0
 80057e0:	4608      	mov	r0, r1
 80057e2:	6023      	str	r3, [r4, #0]
 80057e4:	f7fb fbed 	bl	8000fc2 <_isatty>
 80057e8:	1c43      	adds	r3, r0, #1
 80057ea:	d102      	bne.n	80057f2 <_isatty_r+0x1a>
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	b103      	cbz	r3, 80057f2 <_isatty_r+0x1a>
 80057f0:	602b      	str	r3, [r5, #0]
 80057f2:	bd38      	pop	{r3, r4, r5, pc}
 80057f4:	200002a0 	.word	0x200002a0

080057f8 <_lseek_r>:
 80057f8:	b538      	push	{r3, r4, r5, lr}
 80057fa:	4c07      	ldr	r4, [pc, #28]	; (8005818 <_lseek_r+0x20>)
 80057fc:	4605      	mov	r5, r0
 80057fe:	4608      	mov	r0, r1
 8005800:	4611      	mov	r1, r2
 8005802:	2200      	movs	r2, #0
 8005804:	6022      	str	r2, [r4, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	f7fb fbe6 	bl	8000fd8 <_lseek>
 800580c:	1c43      	adds	r3, r0, #1
 800580e:	d102      	bne.n	8005816 <_lseek_r+0x1e>
 8005810:	6823      	ldr	r3, [r4, #0]
 8005812:	b103      	cbz	r3, 8005816 <_lseek_r+0x1e>
 8005814:	602b      	str	r3, [r5, #0]
 8005816:	bd38      	pop	{r3, r4, r5, pc}
 8005818:	200002a0 	.word	0x200002a0

0800581c <__malloc_lock>:
 800581c:	4770      	bx	lr

0800581e <__malloc_unlock>:
 800581e:	4770      	bx	lr

08005820 <_read_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4c07      	ldr	r4, [pc, #28]	; (8005840 <_read_r+0x20>)
 8005824:	4605      	mov	r5, r0
 8005826:	4608      	mov	r0, r1
 8005828:	4611      	mov	r1, r2
 800582a:	2200      	movs	r2, #0
 800582c:	6022      	str	r2, [r4, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	f7fb fb72 	bl	8000f18 <_read>
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d102      	bne.n	800583e <_read_r+0x1e>
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	b103      	cbz	r3, 800583e <_read_r+0x1e>
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	bd38      	pop	{r3, r4, r5, pc}
 8005840:	200002a0 	.word	0x200002a0

08005844 <_init>:
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005846:	bf00      	nop
 8005848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584a:	bc08      	pop	{r3}
 800584c:	469e      	mov	lr, r3
 800584e:	4770      	bx	lr

08005850 <_fini>:
 8005850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005852:	bf00      	nop
 8005854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005856:	bc08      	pop	{r3}
 8005858:	469e      	mov	lr, r3
 800585a:	4770      	bx	lr
