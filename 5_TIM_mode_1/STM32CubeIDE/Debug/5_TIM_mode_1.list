
5_TIM_mode_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d6c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001ef8  08001ef8  00011ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f38  08001f38  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f38  08001f38  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f38  08001f38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f38  08001f38  00011f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f3c  08001f3c  00011f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001f4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001f4c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af5b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001782  00000000  00000000  0002af97  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b08  00000000  00000000  0002c720  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a30  00000000  00000000  0002d228  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000191d6  00000000  00000000  0002dc58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009698  00000000  00000000  00046e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a139c  00000000  00000000  000504c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1862  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cdc  00000000  00000000  000f18e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001ee0 	.word	0x08001ee0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08001ee0 	.word	0x08001ee0

080001cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b086      	sub	sp, #24
 80001d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d2:	1d3b      	adds	r3, r7, #4
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
 80001de:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001e0:	4b11      	ldr	r3, [pc, #68]	; (8000228 <MX_GPIO_Init+0x5c>)
 80001e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001e4:	4a10      	ldr	r2, [pc, #64]	; (8000228 <MX_GPIO_Init+0x5c>)
 80001e6:	f043 0302 	orr.w	r3, r3, #2
 80001ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001ec:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <MX_GPIO_Init+0x5c>)
 80001ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f0:	f003 0302 	and.w	r3, r3, #2
 80001f4:	603b      	str	r3, [r7, #0]
 80001f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80001f8:	2200      	movs	r2, #0
 80001fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001fe:	480b      	ldr	r0, [pc, #44]	; (800022c <MX_GPIO_Init+0x60>)
 8000200:	f000 fc9e 	bl	8000b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000208:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800020a:	2301      	movs	r3, #1
 800020c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800020e:	2300      	movs	r3, #0
 8000210:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000212:	2300      	movs	r3, #0
 8000214:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	4619      	mov	r1, r3
 800021a:	4804      	ldr	r0, [pc, #16]	; (800022c <MX_GPIO_Init+0x60>)
 800021c:	f000 fb1e 	bl	800085c <HAL_GPIO_Init>

}
 8000220:	bf00      	nop
 8000222:	3718      	adds	r7, #24
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	40021000 	.word	0x40021000
 800022c:	48000400 	.word	0x48000400

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000234:	f000 f98c 	bl	8000550 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000238:	f000 f80a 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023c:	f7ff ffc6 	bl	80001cc <MX_GPIO_Init>
  MX_TIM6_Init();
 8000240:	f000 f8c8 	bl	80003d4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000244:	4801      	ldr	r0, [pc, #4]	; (800024c <main+0x1c>)
 8000246:	f001 fb9b 	bl	8001980 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800024a:	e7fe      	b.n	800024a <main+0x1a>
 800024c:	20000028 	.word	0x20000028

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b096      	sub	sp, #88	; 0x58
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0314 	add.w	r3, r7, #20
 800025a:	2244      	movs	r2, #68	; 0x44
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f001 fe36 	bl	8001ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	463b      	mov	r3, r7
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000272:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000276:	f000 fca3 	bl	8000bc0 <HAL_PWREx_ControlVoltageScaling>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000280:	f000 f84c 	bl	800031c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000284:	2310      	movs	r3, #16
 8000286:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000288:	2301      	movs	r3, #1
 800028a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000290:	2360      	movs	r3, #96	; 0x60
 8000292:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000294:	2302      	movs	r3, #2
 8000296:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000298:	2301      	movs	r3, #1
 800029a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 800029c:	2301      	movs	r3, #1
 800029e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 80002a0:	2328      	movs	r3, #40	; 0x28
 80002a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002a4:	2302      	movs	r3, #2
 80002a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002a8:	2302      	movs	r3, #2
 80002aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ac:	f107 0314 	add.w	r3, r7, #20
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 fcdb 	bl	8000c6c <HAL_RCC_OscConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80002bc:	f000 f82e 	bl	800031c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c0:	230f      	movs	r3, #15
 80002c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c4:	2303      	movs	r3, #3
 80002c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002d4:	463b      	mov	r3, r7
 80002d6:	2104      	movs	r1, #4
 80002d8:	4618      	mov	r0, r3
 80002da:	f001 f92d 	bl	8001538 <HAL_RCC_ClockConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002e4:	f000 f81a 	bl	800031c <Error_Handler>
  }
}
 80002e8:	bf00      	nop
 80002ea:	3758      	adds	r7, #88	; 0x58
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM6)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a05      	ldr	r2, [pc, #20]	; (8000314 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	d104      	bne.n	800030c <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000302:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000306:	4804      	ldr	r0, [pc, #16]	; (8000318 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000308:	f000 fc32 	bl	8000b70 <HAL_GPIO_TogglePin>
  }
}
 800030c:	bf00      	nop
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	40001000 	.word	0x40001000
 8000318:	48000400 	.word	0x48000400

0800031c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000320:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000322:	e7fe      	b.n	8000322 <Error_Handler+0x6>

08000324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800032a:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <HAL_MspInit+0x44>)
 800032c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800032e:	4a0e      	ldr	r2, [pc, #56]	; (8000368 <HAL_MspInit+0x44>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6613      	str	r3, [r2, #96]	; 0x60
 8000336:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <HAL_MspInit+0x44>)
 8000338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800033a:	f003 0301 	and.w	r3, r3, #1
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000342:	4b09      	ldr	r3, [pc, #36]	; (8000368 <HAL_MspInit+0x44>)
 8000344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000346:	4a08      	ldr	r2, [pc, #32]	; (8000368 <HAL_MspInit+0x44>)
 8000348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800034c:	6593      	str	r3, [r2, #88]	; 0x58
 800034e:	4b06      	ldr	r3, [pc, #24]	; (8000368 <HAL_MspInit+0x44>)
 8000350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000356:	603b      	str	r3, [r7, #0]
 8000358:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	40021000 	.word	0x40021000

0800036c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000370:	e7fe      	b.n	8000370 <NMI_Handler+0x4>

08000372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000372:	b480      	push	{r7}
 8000374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000376:	e7fe      	b.n	8000376 <HardFault_Handler+0x4>

08000378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800037c:	e7fe      	b.n	800037c <MemManage_Handler+0x4>

0800037e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800037e:	b480      	push	{r7}
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000382:	e7fe      	b.n	8000382 <BusFault_Handler+0x4>

08000384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000388:	e7fe      	b.n	8000388 <UsageFault_Handler+0x4>

0800038a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800038a:	b480      	push	{r7}
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800038e:	bf00      	nop
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr

08000398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr

080003a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003a6:	b480      	push	{r7}
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003aa:	bf00      	nop
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr

080003b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b8:	f000 f91e 	bl	80005f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}

080003c0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80003c4:	4802      	ldr	r0, [pc, #8]	; (80003d0 <TIM6_IRQHandler+0x10>)
 80003c6:	f001 fb2f 	bl	8001a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	20000028 	.word	0x20000028

080003d4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 80003e4:	4b15      	ldr	r3, [pc, #84]	; (800043c <MX_TIM6_Init+0x68>)
 80003e6:	4a16      	ldr	r2, [pc, #88]	; (8000440 <MX_TIM6_Init+0x6c>)
 80003e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000;
 80003ea:	4b14      	ldr	r3, [pc, #80]	; (800043c <MX_TIM6_Init+0x68>)
 80003ec:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80003f0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f2:	4b12      	ldr	r3, [pc, #72]	; (800043c <MX_TIM6_Init+0x68>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 80003f8:	4b10      	ldr	r3, [pc, #64]	; (800043c <MX_TIM6_Init+0x68>)
 80003fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80003fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000400:	4b0e      	ldr	r3, [pc, #56]	; (800043c <MX_TIM6_Init+0x68>)
 8000402:	2200      	movs	r2, #0
 8000404:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000406:	480d      	ldr	r0, [pc, #52]	; (800043c <MX_TIM6_Init+0x68>)
 8000408:	f001 fa62 	bl	80018d0 <HAL_TIM_Base_Init>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000412:	f7ff ff83 	bl	800031c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000416:	2300      	movs	r3, #0
 8000418:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800041a:	2300      	movs	r3, #0
 800041c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	4619      	mov	r1, r3
 8000422:	4806      	ldr	r0, [pc, #24]	; (800043c <MX_TIM6_Init+0x68>)
 8000424:	f001 fcac 	bl	8001d80 <HAL_TIMEx_MasterConfigSynchronization>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800042e:	f7ff ff75 	bl	800031c <Error_Handler>
  }

}
 8000432:	bf00      	nop
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000028 	.word	0x20000028
 8000440:	40001000 	.word	0x40001000

08000444 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a0d      	ldr	r2, [pc, #52]	; (8000488 <HAL_TIM_Base_MspInit+0x44>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d113      	bne.n	800047e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000456:	4b0d      	ldr	r3, [pc, #52]	; (800048c <HAL_TIM_Base_MspInit+0x48>)
 8000458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800045a:	4a0c      	ldr	r2, [pc, #48]	; (800048c <HAL_TIM_Base_MspInit+0x48>)
 800045c:	f043 0310 	orr.w	r3, r3, #16
 8000460:	6593      	str	r3, [r2, #88]	; 0x58
 8000462:	4b0a      	ldr	r3, [pc, #40]	; (800048c <HAL_TIM_Base_MspInit+0x48>)
 8000464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000466:	f003 0310 	and.w	r3, r3, #16
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800046e:	2200      	movs	r2, #0
 8000470:	2100      	movs	r1, #0
 8000472:	2036      	movs	r0, #54	; 0x36
 8000474:	f000 f9bb 	bl	80007ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000478:	2036      	movs	r0, #54	; 0x36
 800047a:	f000 f9d4 	bl	8000826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800047e:	bf00      	nop
 8000480:	3710      	adds	r7, #16
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40001000 	.word	0x40001000
 800048c:	40021000 	.word	0x40021000

08000490 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000494:	f000 f826 	bl	80004e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000498:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800049a:	e003      	b.n	80004a4 <LoopCopyDataInit>

0800049c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800049c:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800049e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004a2:	3104      	adds	r1, #4

080004a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80004a4:	480a      	ldr	r0, [pc, #40]	; (80004d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80004a6:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80004a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80004aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80004ac:	d3f6      	bcc.n	800049c <CopyDataInit>
	ldr	r2, =_sbss
 80004ae:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80004b0:	e002      	b.n	80004b8 <LoopFillZerobss>

080004b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80004b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80004b4:	f842 3b04 	str.w	r3, [r2], #4

080004b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <LoopForever+0x16>)
	cmp	r2, r3
 80004ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80004bc:	d3f9      	bcc.n	80004b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004be:	f001 fce3 	bl	8001e88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004c2:	f7ff feb5 	bl	8000230 <main>

080004c6 <LoopForever>:

LoopForever:
    b LoopForever
 80004c6:	e7fe      	b.n	80004c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80004c8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80004cc:	08001f40 	.word	0x08001f40
	ldr	r0, =_sdata
 80004d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80004d4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80004d8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80004dc:	20000078 	.word	0x20000078

080004e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004e0:	e7fe      	b.n	80004e0 <ADC1_2_IRQHandler>
	...

080004e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004e8:	4b17      	ldr	r3, [pc, #92]	; (8000548 <SystemInit+0x64>)
 80004ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004ee:	4a16      	ldr	r2, [pc, #88]	; (8000548 <SystemInit+0x64>)
 80004f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80004f8:	4b14      	ldr	r3, [pc, #80]	; (800054c <SystemInit+0x68>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a13      	ldr	r2, [pc, #76]	; (800054c <SystemInit+0x68>)
 80004fe:	f043 0301 	orr.w	r3, r3, #1
 8000502:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000504:	4b11      	ldr	r3, [pc, #68]	; (800054c <SystemInit+0x68>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800050a:	4b10      	ldr	r3, [pc, #64]	; (800054c <SystemInit+0x68>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a0f      	ldr	r2, [pc, #60]	; (800054c <SystemInit+0x68>)
 8000510:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000514:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000518:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <SystemInit+0x68>)
 800051c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000520:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <SystemInit+0x68>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a09      	ldr	r2, [pc, #36]	; (800054c <SystemInit+0x68>)
 8000528:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800052c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800052e:	4b07      	ldr	r3, [pc, #28]	; (800054c <SystemInit+0x68>)
 8000530:	2200      	movs	r2, #0
 8000532:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000534:	4b04      	ldr	r3, [pc, #16]	; (8000548 <SystemInit+0x64>)
 8000536:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800053a:	609a      	str	r2, [r3, #8]
#endif
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	e000ed00 	.word	0xe000ed00
 800054c:	40021000 	.word	0x40021000

08000550 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000556:	2300      	movs	r3, #0
 8000558:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800055a:	2003      	movs	r0, #3
 800055c:	f000 f93c 	bl	80007d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000560:	2000      	movs	r0, #0
 8000562:	f000 f80d 	bl	8000580 <HAL_InitTick>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d002      	beq.n	8000572 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800056c:	2301      	movs	r3, #1
 800056e:	71fb      	strb	r3, [r7, #7]
 8000570:	e001      	b.n	8000576 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000572:	f7ff fed7 	bl	8000324 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000576:	79fb      	ldrb	r3, [r7, #7]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800058c:	4b17      	ldr	r3, [pc, #92]	; (80005ec <HAL_InitTick+0x6c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d023      	beq.n	80005dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000594:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <HAL_InitTick+0x70>)
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	4b14      	ldr	r3, [pc, #80]	; (80005ec <HAL_InitTick+0x6c>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	4619      	mov	r1, r3
 800059e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 f949 	bl	8000842 <HAL_SYSTICK_Config>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d10f      	bne.n	80005d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2b0f      	cmp	r3, #15
 80005ba:	d809      	bhi.n	80005d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005bc:	2200      	movs	r2, #0
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	f04f 30ff 	mov.w	r0, #4294967295
 80005c4:	f000 f913 	bl	80007ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005c8:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <HAL_InitTick+0x74>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6013      	str	r3, [r2, #0]
 80005ce:	e007      	b.n	80005e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005d0:	2301      	movs	r3, #1
 80005d2:	73fb      	strb	r3, [r7, #15]
 80005d4:	e004      	b.n	80005e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005d6:	2301      	movs	r3, #1
 80005d8:	73fb      	strb	r3, [r7, #15]
 80005da:	e001      	b.n	80005e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005dc:	2301      	movs	r3, #1
 80005de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000008 	.word	0x20000008
 80005f0:	20000000 	.word	0x20000000
 80005f4:	20000004 	.word	0x20000004

080005f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_IncTick+0x20>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	461a      	mov	r2, r3
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <HAL_IncTick+0x24>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4413      	add	r3, r2
 8000608:	4a04      	ldr	r2, [pc, #16]	; (800061c <HAL_IncTick+0x24>)
 800060a:	6013      	str	r3, [r2, #0]
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000008 	.word	0x20000008
 800061c:	20000074 	.word	0x20000074

08000620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  return uwTick;
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <HAL_GetTick+0x14>)
 8000626:	681b      	ldr	r3, [r3, #0]
}
 8000628:	4618      	mov	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000074 	.word	0x20000074

08000638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <__NVIC_SetPriorityGrouping+0x44>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000654:	4013      	ands	r3, r2
 8000656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066a:	4a04      	ldr	r2, [pc, #16]	; (800067c <__NVIC_SetPriorityGrouping+0x44>)
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	60d3      	str	r3, [r2, #12]
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <__NVIC_GetPriorityGrouping+0x18>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	f003 0307 	and.w	r3, r3, #7
}
 800068e:	4618      	mov	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	db0b      	blt.n	80006c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f003 021f 	and.w	r2, r3, #31
 80006b4:	4907      	ldr	r1, [pc, #28]	; (80006d4 <__NVIC_EnableIRQ+0x38>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	095b      	lsrs	r3, r3, #5
 80006bc:	2001      	movs	r0, #1
 80006be:	fa00 f202 	lsl.w	r2, r0, r2
 80006c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000e100 	.word	0xe000e100

080006d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	db0a      	blt.n	8000702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	490c      	ldr	r1, [pc, #48]	; (8000724 <__NVIC_SetPriority+0x4c>)
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	0112      	lsls	r2, r2, #4
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	440b      	add	r3, r1
 80006fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000700:	e00a      	b.n	8000718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4908      	ldr	r1, [pc, #32]	; (8000728 <__NVIC_SetPriority+0x50>)
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	f003 030f 	and.w	r3, r3, #15
 800070e:	3b04      	subs	r3, #4
 8000710:	0112      	lsls	r2, r2, #4
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	440b      	add	r3, r1
 8000716:	761a      	strb	r2, [r3, #24]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000e100 	.word	0xe000e100
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800072c:	b480      	push	{r7}
 800072e:	b089      	sub	sp, #36	; 0x24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f003 0307 	and.w	r3, r3, #7
 800073e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000740:	69fb      	ldr	r3, [r7, #28]
 8000742:	f1c3 0307 	rsb	r3, r3, #7
 8000746:	2b04      	cmp	r3, #4
 8000748:	bf28      	it	cs
 800074a:	2304      	movcs	r3, #4
 800074c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3304      	adds	r3, #4
 8000752:	2b06      	cmp	r3, #6
 8000754:	d902      	bls.n	800075c <NVIC_EncodePriority+0x30>
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3b03      	subs	r3, #3
 800075a:	e000      	b.n	800075e <NVIC_EncodePriority+0x32>
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000760:	f04f 32ff 	mov.w	r2, #4294967295
 8000764:	69bb      	ldr	r3, [r7, #24]
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	43da      	mvns	r2, r3
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	401a      	ands	r2, r3
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000774:	f04f 31ff 	mov.w	r1, #4294967295
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	fa01 f303 	lsl.w	r3, r1, r3
 800077e:	43d9      	mvns	r1, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000784:	4313      	orrs	r3, r2
         );
}
 8000786:	4618      	mov	r0, r3
 8000788:	3724      	adds	r7, #36	; 0x24
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
	...

08000794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3b01      	subs	r3, #1
 80007a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a4:	d301      	bcc.n	80007aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00f      	b.n	80007ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <SysTick_Config+0x40>)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b2:	210f      	movs	r1, #15
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295
 80007b8:	f7ff ff8e 	bl	80006d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <SysTick_Config+0x40>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c2:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <SysTick_Config+0x40>)
 80007c4:	2207      	movs	r2, #7
 80007c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	e000e010 	.word	0xe000e010

080007d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ff29 	bl	8000638 <__NVIC_SetPriorityGrouping>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b086      	sub	sp, #24
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	60b9      	str	r1, [r7, #8]
 80007f8:	607a      	str	r2, [r7, #4]
 80007fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000800:	f7ff ff3e 	bl	8000680 <__NVIC_GetPriorityGrouping>
 8000804:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	68b9      	ldr	r1, [r7, #8]
 800080a:	6978      	ldr	r0, [r7, #20]
 800080c:	f7ff ff8e 	bl	800072c <NVIC_EncodePriority>
 8000810:	4602      	mov	r2, r0
 8000812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000816:	4611      	mov	r1, r2
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff5d 	bl	80006d8 <__NVIC_SetPriority>
}
 800081e:	bf00      	nop
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	4603      	mov	r3, r0
 800082e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff31 	bl	800069c <__NVIC_EnableIRQ>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b082      	sub	sp, #8
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff ffa2 	bl	8000794 <SysTick_Config>
 8000850:	4603      	mov	r3, r0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800085c:	b480      	push	{r7}
 800085e:	b087      	sub	sp, #28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800086a:	e14e      	b.n	8000b0a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	2101      	movs	r1, #1
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	fa01 f303 	lsl.w	r3, r1, r3
 8000878:	4013      	ands	r3, r2
 800087a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	2b00      	cmp	r3, #0
 8000880:	f000 8140 	beq.w	8000b04 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d00b      	beq.n	80008a4 <HAL_GPIO_Init+0x48>
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	2b02      	cmp	r3, #2
 8000892:	d007      	beq.n	80008a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000898:	2b11      	cmp	r3, #17
 800089a:	d003      	beq.n	80008a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	2b12      	cmp	r3, #18
 80008a2:	d130      	bne.n	8000906 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	2203      	movs	r2, #3
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	43db      	mvns	r3, r3
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	4013      	ands	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	68da      	ldr	r2, [r3, #12]
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008da:	2201      	movs	r2, #1
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	43db      	mvns	r3, r3
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	4013      	ands	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	091b      	lsrs	r3, r3, #4
 80008f0:	f003 0201 	and.w	r2, r3, #1
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	2203      	movs	r2, #3
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	43db      	mvns	r3, r3
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	4013      	ands	r3, r2
 800091c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	689a      	ldr	r2, [r3, #8]
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	4313      	orrs	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	2b02      	cmp	r3, #2
 800093c:	d003      	beq.n	8000946 <HAL_GPIO_Init+0xea>
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	2b12      	cmp	r3, #18
 8000944:	d123      	bne.n	800098e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	08da      	lsrs	r2, r3, #3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3208      	adds	r2, #8
 800094e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000952:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	220f      	movs	r2, #15
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43db      	mvns	r3, r3
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	4013      	ands	r3, r2
 8000968:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	691a      	ldr	r2, [r3, #16]
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	f003 0307 	and.w	r3, r3, #7
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4313      	orrs	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	08da      	lsrs	r2, r3, #3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3208      	adds	r2, #8
 8000988:	6939      	ldr	r1, [r7, #16]
 800098a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	2203      	movs	r2, #3
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43db      	mvns	r3, r3
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4013      	ands	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	f003 0203 	and.w	r2, r3, #3
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f000 809a 	beq.w	8000b04 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d0:	4b55      	ldr	r3, [pc, #340]	; (8000b28 <HAL_GPIO_Init+0x2cc>)
 80009d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d4:	4a54      	ldr	r2, [pc, #336]	; (8000b28 <HAL_GPIO_Init+0x2cc>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6613      	str	r3, [r2, #96]	; 0x60
 80009dc:	4b52      	ldr	r3, [pc, #328]	; (8000b28 <HAL_GPIO_Init+0x2cc>)
 80009de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009e8:	4a50      	ldr	r2, [pc, #320]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	089b      	lsrs	r3, r3, #2
 80009ee:	3302      	adds	r3, #2
 80009f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	f003 0303 	and.w	r3, r3, #3
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	220f      	movs	r2, #15
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	43db      	mvns	r3, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a12:	d013      	beq.n	8000a3c <HAL_GPIO_Init+0x1e0>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a46      	ldr	r2, [pc, #280]	; (8000b30 <HAL_GPIO_Init+0x2d4>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d00d      	beq.n	8000a38 <HAL_GPIO_Init+0x1dc>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a45      	ldr	r2, [pc, #276]	; (8000b34 <HAL_GPIO_Init+0x2d8>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d007      	beq.n	8000a34 <HAL_GPIO_Init+0x1d8>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a44      	ldr	r2, [pc, #272]	; (8000b38 <HAL_GPIO_Init+0x2dc>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d101      	bne.n	8000a30 <HAL_GPIO_Init+0x1d4>
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	e006      	b.n	8000a3e <HAL_GPIO_Init+0x1e2>
 8000a30:	2307      	movs	r3, #7
 8000a32:	e004      	b.n	8000a3e <HAL_GPIO_Init+0x1e2>
 8000a34:	2302      	movs	r3, #2
 8000a36:	e002      	b.n	8000a3e <HAL_GPIO_Init+0x1e2>
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e000      	b.n	8000a3e <HAL_GPIO_Init+0x1e2>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	697a      	ldr	r2, [r7, #20]
 8000a40:	f002 0203 	and.w	r2, r2, #3
 8000a44:	0092      	lsls	r2, r2, #2
 8000a46:	4093      	lsls	r3, r2
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a4e:	4937      	ldr	r1, [pc, #220]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	089b      	lsrs	r3, r3, #2
 8000a54:	3302      	adds	r3, #2
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a5c:	4b37      	ldr	r3, [pc, #220]	; (8000b3c <HAL_GPIO_Init+0x2e0>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	43db      	mvns	r3, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d003      	beq.n	8000a80 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a80:	4a2e      	ldr	r2, [pc, #184]	; (8000b3c <HAL_GPIO_Init+0x2e0>)
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000a86:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <HAL_GPIO_Init+0x2e0>)
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4013      	ands	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d003      	beq.n	8000aaa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000aaa:	4a24      	ldr	r2, [pc, #144]	; (8000b3c <HAL_GPIO_Init+0x2e0>)
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ab0:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <HAL_GPIO_Init+0x2e0>)
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4013      	ands	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d003      	beq.n	8000ad4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ad4:	4a19      	ldr	r2, [pc, #100]	; (8000b3c <HAL_GPIO_Init+0x2e0>)
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <HAL_GPIO_Init+0x2e0>)
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000afe:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <HAL_GPIO_Init+0x2e0>)
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	3301      	adds	r3, #1
 8000b08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	fa22 f303 	lsr.w	r3, r2, r3
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	f47f aea9 	bne.w	800086c <HAL_GPIO_Init+0x10>
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	371c      	adds	r7, #28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40010000 	.word	0x40010000
 8000b30:	48000400 	.word	0x48000400
 8000b34:	48000800 	.word	0x48000800
 8000b38:	48000c00 	.word	0x48000c00
 8000b3c:	40010400 	.word	0x40010400

08000b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	807b      	strh	r3, [r7, #2]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b50:	787b      	ldrb	r3, [r7, #1]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d003      	beq.n	8000b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b56:	887a      	ldrh	r2, [r7, #2]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b5c:	e002      	b.n	8000b64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b5e:	887a      	ldrh	r2, [r7, #2]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	695b      	ldr	r3, [r3, #20]
 8000b80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b82:	887a      	ldrh	r2, [r7, #2]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4013      	ands	r3, r2
 8000b88:	041a      	lsls	r2, r3, #16
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	43d9      	mvns	r1, r3
 8000b8e:	887b      	ldrh	r3, [r7, #2]
 8000b90:	400b      	ands	r3, r1
 8000b92:	431a      	orrs	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	619a      	str	r2, [r3, #24]
}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <HAL_PWREx_GetVoltageRange+0x18>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40007000 	.word	0x40007000

08000bc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bce:	d130      	bne.n	8000c32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bd0:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bdc:	d038      	beq.n	8000c50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bde:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000be6:	4a1e      	ldr	r2, [pc, #120]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000be8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bee:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2232      	movs	r2, #50	; 0x32
 8000bf4:	fb02 f303 	mul.w	r3, r2, r3
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	; (8000c68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfe:	0c9b      	lsrs	r3, r3, #18
 8000c00:	3301      	adds	r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c04:	e002      	b.n	8000c0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c0e:	695b      	ldr	r3, [r3, #20]
 8000c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c18:	d102      	bne.n	8000c20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1f2      	bne.n	8000c06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c2c:	d110      	bne.n	8000c50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e00f      	b.n	8000c52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c3e:	d007      	beq.n	8000c50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c48:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40007000 	.word	0x40007000
 8000c64:	20000000 	.word	0x20000000
 8000c68:	431bde83 	.word	0x431bde83

08000c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d102      	bne.n	8000c80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	f000 bc56 	b.w	800152c <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c80:	4ba1      	ldr	r3, [pc, #644]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	f003 030c 	and.w	r3, r3, #12
 8000c88:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c8a:	4b9f      	ldr	r3, [pc, #636]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 0310 	and.w	r3, r3, #16
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	f000 80e6 	beq.w	8000e6e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ca2:	6a3b      	ldr	r3, [r7, #32]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d007      	beq.n	8000cb8 <HAL_RCC_OscConfig+0x4c>
 8000ca8:	6a3b      	ldr	r3, [r7, #32]
 8000caa:	2b0c      	cmp	r3, #12
 8000cac:	f040 808d 	bne.w	8000dca <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	f040 8089 	bne.w	8000dca <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cb8:	4b93      	ldr	r3, [pc, #588]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 0302 	and.w	r3, r3, #2
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d006      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x66>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69db      	ldr	r3, [r3, #28]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d102      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	f000 bc2d 	b.w	800152c <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cd6:	4b8c      	ldr	r3, [pc, #560]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0308 	and.w	r3, r3, #8
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d004      	beq.n	8000cec <HAL_RCC_OscConfig+0x80>
 8000ce2:	4b89      	ldr	r3, [pc, #548]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cea:	e005      	b.n	8000cf8 <HAL_RCC_OscConfig+0x8c>
 8000cec:	4b86      	ldr	r3, [pc, #536]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cf2:	091b      	lsrs	r3, r3, #4
 8000cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d224      	bcs.n	8000d46 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 fd85 	bl	8001810 <RCC_SetFlashLatencyFromMSIRange>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d002      	beq.n	8000d12 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	f000 bc0d 	b.w	800152c <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d12:	4b7d      	ldr	r3, [pc, #500]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a7c      	ldr	r2, [pc, #496]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000d18:	f043 0308 	orr.w	r3, r3, #8
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	4b7a      	ldr	r3, [pc, #488]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2a:	4977      	ldr	r1, [pc, #476]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d30:	4b75      	ldr	r3, [pc, #468]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6a1b      	ldr	r3, [r3, #32]
 8000d3c:	021b      	lsls	r3, r3, #8
 8000d3e:	4972      	ldr	r1, [pc, #456]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000d40:	4313      	orrs	r3, r2
 8000d42:	604b      	str	r3, [r1, #4]
 8000d44:	e025      	b.n	8000d92 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d46:	4b70      	ldr	r3, [pc, #448]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a6f      	ldr	r2, [pc, #444]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000d4c:	f043 0308 	orr.w	r3, r3, #8
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	4b6d      	ldr	r3, [pc, #436]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5e:	496a      	ldr	r1, [pc, #424]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000d60:	4313      	orrs	r3, r2
 8000d62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d64:	4b68      	ldr	r3, [pc, #416]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a1b      	ldr	r3, [r3, #32]
 8000d70:	021b      	lsls	r3, r3, #8
 8000d72:	4965      	ldr	r1, [pc, #404]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000d74:	4313      	orrs	r3, r2
 8000d76:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d78:	6a3b      	ldr	r3, [r7, #32]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d109      	bne.n	8000d92 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 fd44 	bl	8001810 <RCC_SetFlashLatencyFromMSIRange>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e3cc      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d92:	f000 fcb3 	bl	80016fc <HAL_RCC_GetSysClockFreq>
 8000d96:	4601      	mov	r1, r0
 8000d98:	4b5b      	ldr	r3, [pc, #364]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	091b      	lsrs	r3, r3, #4
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	4a5a      	ldr	r2, [pc, #360]	; (8000f0c <HAL_RCC_OscConfig+0x2a0>)
 8000da4:	5cd3      	ldrb	r3, [r2, r3]
 8000da6:	f003 031f 	and.w	r3, r3, #31
 8000daa:	fa21 f303 	lsr.w	r3, r1, r3
 8000dae:	4a58      	ldr	r2, [pc, #352]	; (8000f10 <HAL_RCC_OscConfig+0x2a4>)
 8000db0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000db2:	4b58      	ldr	r3, [pc, #352]	; (8000f14 <HAL_RCC_OscConfig+0x2a8>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fbe2 	bl	8000580 <HAL_InitTick>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8000dc0:	7dfb      	ldrb	r3, [r7, #23]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d052      	beq.n	8000e6c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8000dc6:	7dfb      	ldrb	r3, [r7, #23]
 8000dc8:	e3b0      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d032      	beq.n	8000e38 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000dd2:	4b4d      	ldr	r3, [pc, #308]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a4c      	ldr	r2, [pc, #304]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000dde:	f7ff fc1f 	bl	8000620 <HAL_GetTick>
 8000de2:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000de4:	e008      	b.n	8000df8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000de6:	f7ff fc1b 	bl	8000620 <HAL_GetTick>
 8000dea:	4602      	mov	r2, r0
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d901      	bls.n	8000df8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8000df4:	2303      	movs	r3, #3
 8000df6:	e399      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000df8:	4b43      	ldr	r3, [pc, #268]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f003 0302 	and.w	r3, r3, #2
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d0f0      	beq.n	8000de6 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e04:	4b40      	ldr	r3, [pc, #256]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a3f      	ldr	r2, [pc, #252]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000e0a:	f043 0308 	orr.w	r3, r3, #8
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	4b3d      	ldr	r3, [pc, #244]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1c:	493a      	ldr	r1, [pc, #232]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e22:	4b39      	ldr	r3, [pc, #228]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6a1b      	ldr	r3, [r3, #32]
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	4935      	ldr	r1, [pc, #212]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000e32:	4313      	orrs	r3, r2
 8000e34:	604b      	str	r3, [r1, #4]
 8000e36:	e01a      	b.n	8000e6e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e38:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a32      	ldr	r2, [pc, #200]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000e3e:	f023 0301 	bic.w	r3, r3, #1
 8000e42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e44:	f7ff fbec 	bl	8000620 <HAL_GetTick>
 8000e48:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e4a:	e008      	b.n	8000e5e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e4c:	f7ff fbe8 	bl	8000620 <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d901      	bls.n	8000e5e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e366      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d1f0      	bne.n	8000e4c <HAL_RCC_OscConfig+0x1e0>
 8000e6a:	e000      	b.n	8000e6e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d073      	beq.n	8000f62 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e7a:	6a3b      	ldr	r3, [r7, #32]
 8000e7c:	2b08      	cmp	r3, #8
 8000e7e:	d005      	beq.n	8000e8c <HAL_RCC_OscConfig+0x220>
 8000e80:	6a3b      	ldr	r3, [r7, #32]
 8000e82:	2b0c      	cmp	r3, #12
 8000e84:	d10e      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d10b      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e8c:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d063      	beq.n	8000f60 <HAL_RCC_OscConfig+0x2f4>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d15f      	bne.n	8000f60 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e343      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eac:	d106      	bne.n	8000ebc <HAL_RCC_OscConfig+0x250>
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a15      	ldr	r2, [pc, #84]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	e01d      	b.n	8000ef8 <HAL_RCC_OscConfig+0x28c>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ec4:	d10c      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x274>
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a0c      	ldr	r2, [pc, #48]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	e00b      	b.n	8000ef8 <HAL_RCC_OscConfig+0x28c>
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <HAL_RCC_OscConfig+0x29c>)
 8000ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d01b      	beq.n	8000f38 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f00:	f7ff fb8e 	bl	8000620 <HAL_GetTick>
 8000f04:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f06:	e010      	b.n	8000f2a <HAL_RCC_OscConfig+0x2be>
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	08001ef8 	.word	0x08001ef8
 8000f10:	20000000 	.word	0x20000000
 8000f14:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f18:	f7ff fb82 	bl	8000620 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b64      	cmp	r3, #100	; 0x64
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e300      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f2a:	4ba0      	ldr	r3, [pc, #640]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f0      	beq.n	8000f18 <HAL_RCC_OscConfig+0x2ac>
 8000f36:	e014      	b.n	8000f62 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f38:	f7ff fb72 	bl	8000620 <HAL_GetTick>
 8000f3c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f40:	f7ff fb6e 	bl	8000620 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	; 0x64
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e2ec      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f52:	4b96      	ldr	r3, [pc, #600]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1f0      	bne.n	8000f40 <HAL_RCC_OscConfig+0x2d4>
 8000f5e:	e000      	b.n	8000f62 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d060      	beq.n	8001030 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f6e:	6a3b      	ldr	r3, [r7, #32]
 8000f70:	2b04      	cmp	r3, #4
 8000f72:	d005      	beq.n	8000f80 <HAL_RCC_OscConfig+0x314>
 8000f74:	6a3b      	ldr	r3, [r7, #32]
 8000f76:	2b0c      	cmp	r3, #12
 8000f78:	d119      	bne.n	8000fae <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d116      	bne.n	8000fae <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f80:	4b8a      	ldr	r3, [pc, #552]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d005      	beq.n	8000f98 <HAL_RCC_OscConfig+0x32c>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e2c9      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f98:	4b84      	ldr	r3, [pc, #528]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	061b      	lsls	r3, r3, #24
 8000fa6:	4981      	ldr	r1, [pc, #516]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fac:	e040      	b.n	8001030 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d023      	beq.n	8000ffe <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fb6:	4b7d      	ldr	r3, [pc, #500]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a7c      	ldr	r2, [pc, #496]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 8000fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc2:	f7ff fb2d 	bl	8000620 <HAL_GetTick>
 8000fc6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fc8:	e008      	b.n	8000fdc <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fca:	f7ff fb29 	bl	8000620 <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d901      	bls.n	8000fdc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e2a7      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fdc:	4b73      	ldr	r3, [pc, #460]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0f0      	beq.n	8000fca <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe8:	4b70      	ldr	r3, [pc, #448]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	061b      	lsls	r3, r3, #24
 8000ff6:	496d      	ldr	r1, [pc, #436]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	604b      	str	r3, [r1, #4]
 8000ffc:	e018      	b.n	8001030 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ffe:	4b6b      	ldr	r3, [pc, #428]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a6a      	ldr	r2, [pc, #424]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 8001004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800100a:	f7ff fb09 	bl	8000620 <HAL_GetTick>
 800100e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001012:	f7ff fb05 	bl	8000620 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e283      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001024:	4b61      	ldr	r3, [pc, #388]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1f0      	bne.n	8001012 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0308 	and.w	r3, r3, #8
 8001038:	2b00      	cmp	r3, #0
 800103a:	d07f      	beq.n	800113c <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d05f      	beq.n	8001104 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001044:	4b59      	ldr	r3, [pc, #356]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 8001046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800104a:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	699a      	ldr	r2, [r3, #24]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	f003 0310 	and.w	r3, r3, #16
 8001056:	429a      	cmp	r2, r3
 8001058:	d037      	beq.n	80010ca <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d006      	beq.n	8001072 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e25c      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	d01b      	beq.n	80010b4 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 800107c:	4b4b      	ldr	r3, [pc, #300]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 800107e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001082:	4a4a      	ldr	r2, [pc, #296]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 8001084:	f023 0301 	bic.w	r3, r3, #1
 8001088:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800108c:	f7ff fac8 	bl	8000620 <HAL_GetTick>
 8001090:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001094:	f7ff fac4 	bl	8000620 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b11      	cmp	r3, #17
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e242      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010a6:	4b41      	ldr	r3, [pc, #260]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 80010a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1ef      	bne.n	8001094 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80010b4:	4b3d      	ldr	r3, [pc, #244]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 80010b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010ba:	f023 0210 	bic.w	r2, r3, #16
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	493a      	ldr	r1, [pc, #232]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ca:	4b38      	ldr	r3, [pc, #224]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 80010cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010d0:	4a36      	ldr	r2, [pc, #216]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010da:	f7ff faa1 	bl	8000620 <HAL_GetTick>
 80010de:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e2:	f7ff fa9d 	bl	8000620 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b11      	cmp	r3, #17
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e21b      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010f4:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 80010f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0ef      	beq.n	80010e2 <HAL_RCC_OscConfig+0x476>
 8001102:	e01b      	b.n	800113c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001104:	4b29      	ldr	r3, [pc, #164]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 8001106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800110a:	4a28      	ldr	r2, [pc, #160]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 800110c:	f023 0301 	bic.w	r3, r3, #1
 8001110:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001114:	f7ff fa84 	bl	8000620 <HAL_GetTick>
 8001118:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800111c:	f7ff fa80 	bl	8000620 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b11      	cmp	r3, #17
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e1fe      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 8001130:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1ef      	bne.n	800111c <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 80c1 	beq.w	80012cc <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 8001152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10e      	bne.n	800117a <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 800115e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001160:	4a12      	ldr	r2, [pc, #72]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 8001162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001166:	6593      	str	r3, [r2, #88]	; 0x58
 8001168:	4b10      	ldr	r3, [pc, #64]	; (80011ac <HAL_RCC_OscConfig+0x540>)
 800116a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001174:	2301      	movs	r3, #1
 8001176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800117a:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <HAL_RCC_OscConfig+0x544>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001182:	2b00      	cmp	r3, #0
 8001184:	d11c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001186:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <HAL_RCC_OscConfig+0x544>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a09      	ldr	r2, [pc, #36]	; (80011b0 <HAL_RCC_OscConfig+0x544>)
 800118c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001192:	f7ff fa45 	bl	8000620 <HAL_GetTick>
 8001196:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001198:	e00c      	b.n	80011b4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800119a:	f7ff fa41 	bl	8000620 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d905      	bls.n	80011b4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e1bf      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011b4:	4bb1      	ldr	r3, [pc, #708]	; (800147c <HAL_RCC_OscConfig+0x810>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0ec      	beq.n	800119a <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d02c      	beq.n	8001226 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80011cc:	4bac      	ldr	r3, [pc, #688]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 80011ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011de:	49a8      	ldr	r1, [pc, #672]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d010      	beq.n	8001214 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80011f2:	4ba3      	ldr	r3, [pc, #652]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 80011f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011f8:	4aa1      	ldr	r2, [pc, #644]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 80011fa:	f043 0304 	orr.w	r3, r3, #4
 80011fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001202:	4b9f      	ldr	r3, [pc, #636]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 8001204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001208:	4a9d      	ldr	r2, [pc, #628]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001212:	e018      	b.n	8001246 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001214:	4b9a      	ldr	r3, [pc, #616]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 8001216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800121a:	4a99      	ldr	r2, [pc, #612]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001224:	e00f      	b.n	8001246 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001226:	4b96      	ldr	r3, [pc, #600]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 8001228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800122c:	4a94      	ldr	r2, [pc, #592]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 800122e:	f023 0301 	bic.w	r3, r3, #1
 8001232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001236:	4b92      	ldr	r3, [pc, #584]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 8001238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800123c:	4a90      	ldr	r2, [pc, #576]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 800123e:	f023 0304 	bic.w	r3, r3, #4
 8001242:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d016      	beq.n	800127c <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124e:	f7ff f9e7 	bl	8000620 <HAL_GetTick>
 8001252:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001254:	e00a      	b.n	800126c <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001256:	f7ff f9e3 	bl	8000620 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	f241 3288 	movw	r2, #5000	; 0x1388
 8001264:	4293      	cmp	r3, r2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e15f      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800126c:	4b84      	ldr	r3, [pc, #528]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 800126e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0ed      	beq.n	8001256 <HAL_RCC_OscConfig+0x5ea>
 800127a:	e01d      	b.n	80012b8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800127c:	f7ff f9d0 	bl	8000620 <HAL_GetTick>
 8001280:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001282:	e00a      	b.n	800129a <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001284:	f7ff f9cc 	bl	8000620 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001292:	4293      	cmp	r3, r2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e148      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800129a:	4b79      	ldr	r3, [pc, #484]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 800129c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1ed      	bne.n	8001284 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80012a8:	4b75      	ldr	r3, [pc, #468]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 80012aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ae:	4a74      	ldr	r2, [pc, #464]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 80012b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d105      	bne.n	80012cc <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012c0:	4b6f      	ldr	r3, [pc, #444]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 80012c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c4:	4a6e      	ldr	r2, [pc, #440]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 80012c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0320 	and.w	r3, r3, #32
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d03c      	beq.n	8001352 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d01c      	beq.n	800131a <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012e0:	4b67      	ldr	r3, [pc, #412]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 80012e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012e6:	4a66      	ldr	r2, [pc, #408]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f0:	f7ff f996 	bl	8000620 <HAL_GetTick>
 80012f4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012f8:	f7ff f992 	bl	8000620 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e110      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800130a:	4b5d      	ldr	r3, [pc, #372]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 800130c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0ef      	beq.n	80012f8 <HAL_RCC_OscConfig+0x68c>
 8001318:	e01b      	b.n	8001352 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800131a:	4b59      	ldr	r3, [pc, #356]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 800131c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001320:	4a57      	ldr	r2, [pc, #348]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 8001322:	f023 0301 	bic.w	r3, r3, #1
 8001326:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132a:	f7ff f979 	bl	8000620 <HAL_GetTick>
 800132e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001332:	f7ff f975 	bl	8000620 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e0f3      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001344:	4b4e      	ldr	r3, [pc, #312]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 8001346:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1ef      	bne.n	8001332 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 80e7 	beq.w	800152a <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	2b02      	cmp	r3, #2
 8001362:	f040 80b7 	bne.w	80014d4 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001366:	4b46      	ldr	r3, [pc, #280]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 0203 	and.w	r2, r3, #3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	429a      	cmp	r2, r3
 8001378:	d124      	bne.n	80013c4 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001384:	3b01      	subs	r3, #1
 8001386:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001388:	429a      	cmp	r2, r3
 800138a:	d11b      	bne.n	80013c4 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001396:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001398:	429a      	cmp	r2, r3
 800139a:	d113      	bne.n	80013c4 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a6:	085b      	lsrs	r3, r3, #1
 80013a8:	3b01      	subs	r3, #1
 80013aa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d109      	bne.n	80013c4 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	085b      	lsrs	r3, r3, #1
 80013bc:	3b01      	subs	r3, #1
 80013be:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d061      	beq.n	8001488 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013c4:	6a3b      	ldr	r3, [r7, #32]
 80013c6:	2b0c      	cmp	r3, #12
 80013c8:	d056      	beq.n	8001478 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013ca:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a2c      	ldr	r2, [pc, #176]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 80013d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013d6:	f7ff f923 	bl	8000620 <HAL_GetTick>
 80013da:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013de:	f7ff f91f 	bl	8000620 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e09d      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f0:	4b23      	ldr	r3, [pc, #140]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1f0      	bne.n	80013de <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013fc:	4b20      	ldr	r3, [pc, #128]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	4b20      	ldr	r3, [pc, #128]	; (8001484 <HAL_RCC_OscConfig+0x818>)
 8001402:	4013      	ands	r3, r2
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800140c:	3a01      	subs	r2, #1
 800140e:	0112      	lsls	r2, r2, #4
 8001410:	4311      	orrs	r1, r2
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001416:	0212      	lsls	r2, r2, #8
 8001418:	4311      	orrs	r1, r2
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800141e:	0852      	lsrs	r2, r2, #1
 8001420:	3a01      	subs	r2, #1
 8001422:	0552      	lsls	r2, r2, #21
 8001424:	4311      	orrs	r1, r2
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800142a:	0852      	lsrs	r2, r2, #1
 800142c:	3a01      	subs	r2, #1
 800142e:	0652      	lsls	r2, r2, #25
 8001430:	430a      	orrs	r2, r1
 8001432:	4913      	ldr	r1, [pc, #76]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 8001434:	4313      	orrs	r3, r2
 8001436:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a10      	ldr	r2, [pc, #64]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 800143e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001442:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 800144a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800144e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001450:	f7ff f8e6 	bl	8000620 <HAL_GetTick>
 8001454:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001458:	f7ff f8e2 	bl	8000620 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e060      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_RCC_OscConfig+0x814>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001476:	e058      	b.n	800152a <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e057      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
 800147c:	40007000 	.word	0x40007000
 8001480:	40021000 	.word	0x40021000
 8001484:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001488:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <HAL_RCC_OscConfig+0x8c8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d14a      	bne.n	800152a <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001494:	4b27      	ldr	r3, [pc, #156]	; (8001534 <HAL_RCC_OscConfig+0x8c8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a26      	ldr	r2, [pc, #152]	; (8001534 <HAL_RCC_OscConfig+0x8c8>)
 800149a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800149e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014a0:	4b24      	ldr	r3, [pc, #144]	; (8001534 <HAL_RCC_OscConfig+0x8c8>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	4a23      	ldr	r2, [pc, #140]	; (8001534 <HAL_RCC_OscConfig+0x8c8>)
 80014a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014ac:	f7ff f8b8 	bl	8000620 <HAL_GetTick>
 80014b0:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff f8b4 	bl	8000620 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e032      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <HAL_RCC_OscConfig+0x8c8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0x848>
 80014d2:	e02a      	b.n	800152a <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	2b0c      	cmp	r3, #12
 80014d8:	d025      	beq.n	8001526 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <HAL_RCC_OscConfig+0x8c8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a15      	ldr	r2, [pc, #84]	; (8001534 <HAL_RCC_OscConfig+0x8c8>)
 80014e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014e4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <HAL_RCC_OscConfig+0x8c8>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <HAL_RCC_OscConfig+0x8c8>)
 80014ec:	f023 0303 	bic.w	r3, r3, #3
 80014f0:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <HAL_RCC_OscConfig+0x8c8>)
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <HAL_RCC_OscConfig+0x8c8>)
 80014f8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80014fc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fe:	f7ff f88f 	bl	8000620 <HAL_GetTick>
 8001502:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff f88b 	bl	8000620 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e009      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_RCC_OscConfig+0x8c8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f0      	bne.n	8001506 <HAL_RCC_OscConfig+0x89a>
 8001524:	e001      	b.n	800152a <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3728      	adds	r7, #40	; 0x28
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40021000 	.word	0x40021000

08001538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0c8      	b.n	80016de <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800154c:	4b66      	ldr	r3, [pc, #408]	; (80016e8 <HAL_RCC_ClockConfig+0x1b0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d910      	bls.n	800157c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155a:	4b63      	ldr	r3, [pc, #396]	; (80016e8 <HAL_RCC_ClockConfig+0x1b0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 0207 	bic.w	r2, r3, #7
 8001562:	4961      	ldr	r1, [pc, #388]	; (80016e8 <HAL_RCC_ClockConfig+0x1b0>)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800156a:	4b5f      	ldr	r3, [pc, #380]	; (80016e8 <HAL_RCC_ClockConfig+0x1b0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d001      	beq.n	800157c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e0b0      	b.n	80016de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d04c      	beq.n	8001622 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b03      	cmp	r3, #3
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001590:	4b56      	ldr	r3, [pc, #344]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d121      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e09e      	b.n	80016de <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d107      	bne.n	80015b8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015a8:	4b50      	ldr	r3, [pc, #320]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d115      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e092      	b.n	80016de <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d107      	bne.n	80015d0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015c0:	4b4a      	ldr	r3, [pc, #296]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d109      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e086      	b.n	80016de <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d0:	4b46      	ldr	r3, [pc, #280]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e07e      	b.n	80016de <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015e0:	4b42      	ldr	r3, [pc, #264]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f023 0203 	bic.w	r2, r3, #3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	493f      	ldr	r1, [pc, #252]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015f2:	f7ff f815 	bl	8000620 <HAL_GetTick>
 80015f6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f8:	e00a      	b.n	8001610 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fa:	f7ff f811 	bl	8000620 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	f241 3288 	movw	r2, #5000	; 0x1388
 8001608:	4293      	cmp	r3, r2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e066      	b.n	80016de <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001610:	4b36      	ldr	r3, [pc, #216]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 020c 	and.w	r2, r3, #12
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	429a      	cmp	r2, r3
 8001620:	d1eb      	bne.n	80015fa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d008      	beq.n	8001640 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800162e:	4b2f      	ldr	r3, [pc, #188]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	492c      	ldr	r1, [pc, #176]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 800163c:	4313      	orrs	r3, r2
 800163e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001640:	4b29      	ldr	r3, [pc, #164]	; (80016e8 <HAL_RCC_ClockConfig+0x1b0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d210      	bcs.n	8001670 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164e:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <HAL_RCC_ClockConfig+0x1b0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 0207 	bic.w	r2, r3, #7
 8001656:	4924      	ldr	r1, [pc, #144]	; (80016e8 <HAL_RCC_ClockConfig+0x1b0>)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800165e:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <HAL_RCC_ClockConfig+0x1b0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e036      	b.n	80016de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d008      	beq.n	800168e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	4918      	ldr	r1, [pc, #96]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 800168a:	4313      	orrs	r3, r2
 800168c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b00      	cmp	r3, #0
 8001698:	d009      	beq.n	80016ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	4910      	ldr	r1, [pc, #64]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016ae:	f000 f825 	bl	80016fc <HAL_RCC_GetSysClockFreq>
 80016b2:	4601      	mov	r1, r0
 80016b4:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	4a0c      	ldr	r2, [pc, #48]	; (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 80016c0:	5cd3      	ldrb	r3, [r2, r3]
 80016c2:	f003 031f 	and.w	r3, r3, #31
 80016c6:	fa21 f303 	lsr.w	r3, r1, r3
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016ce:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe ff54 	bl	8000580 <HAL_InitTick>
 80016d8:	4603      	mov	r3, r0
 80016da:	72fb      	strb	r3, [r7, #11]

  return status;
 80016dc:	7afb      	ldrb	r3, [r7, #11]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40022000 	.word	0x40022000
 80016ec:	40021000 	.word	0x40021000
 80016f0:	08001ef8 	.word	0x08001ef8
 80016f4:	20000000 	.word	0x20000000
 80016f8:	20000004 	.word	0x20000004

080016fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	; 0x24
 8001700:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800170a:	4b3d      	ldr	r3, [pc, #244]	; (8001800 <HAL_RCC_GetSysClockFreq+0x104>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001714:	4b3a      	ldr	r3, [pc, #232]	; (8001800 <HAL_RCC_GetSysClockFreq+0x104>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <HAL_RCC_GetSysClockFreq+0x34>
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	2b0c      	cmp	r3, #12
 8001728:	d121      	bne.n	800176e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d11e      	bne.n	800176e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001730:	4b33      	ldr	r3, [pc, #204]	; (8001800 <HAL_RCC_GetSysClockFreq+0x104>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0308 	and.w	r3, r3, #8
 8001738:	2b00      	cmp	r3, #0
 800173a:	d107      	bne.n	800174c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800173c:	4b30      	ldr	r3, [pc, #192]	; (8001800 <HAL_RCC_GetSysClockFreq+0x104>)
 800173e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001742:	0a1b      	lsrs	r3, r3, #8
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	61fb      	str	r3, [r7, #28]
 800174a:	e005      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800174c:	4b2c      	ldr	r3, [pc, #176]	; (8001800 <HAL_RCC_GetSysClockFreq+0x104>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001758:	4a2a      	ldr	r2, [pc, #168]	; (8001804 <HAL_RCC_GetSysClockFreq+0x108>)
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001760:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10d      	bne.n	8001784 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800176c:	e00a      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	2b04      	cmp	r3, #4
 8001772:	d102      	bne.n	800177a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001774:	4b24      	ldr	r3, [pc, #144]	; (8001808 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001776:	61bb      	str	r3, [r7, #24]
 8001778:	e004      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	2b08      	cmp	r3, #8
 800177e:	d101      	bne.n	8001784 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001780:	4b22      	ldr	r3, [pc, #136]	; (800180c <HAL_RCC_GetSysClockFreq+0x110>)
 8001782:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	2b0c      	cmp	r3, #12
 8001788:	d133      	bne.n	80017f2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800178a:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <HAL_RCC_GetSysClockFreq+0x104>)
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d002      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0xa4>
 800179a:	2b03      	cmp	r3, #3
 800179c:	d003      	beq.n	80017a6 <HAL_RCC_GetSysClockFreq+0xaa>
 800179e:	e005      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017a0:	4b19      	ldr	r3, [pc, #100]	; (8001808 <HAL_RCC_GetSysClockFreq+0x10c>)
 80017a2:	617b      	str	r3, [r7, #20]
      break;
 80017a4:	e005      	b.n	80017b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017a6:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_RCC_GetSysClockFreq+0x110>)
 80017a8:	617b      	str	r3, [r7, #20]
      break;
 80017aa:	e002      	b.n	80017b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	617b      	str	r3, [r7, #20]
      break;
 80017b0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017b2:	4b13      	ldr	r3, [pc, #76]	; (8001800 <HAL_RCC_GetSysClockFreq+0x104>)
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	091b      	lsrs	r3, r3, #4
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	3301      	adds	r3, #1
 80017be:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <HAL_RCC_GetSysClockFreq+0x104>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	fb02 f203 	mul.w	r2, r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_RCC_GetSysClockFreq+0x104>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0e5b      	lsrs	r3, r3, #25
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	3301      	adds	r3, #1
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80017f2:	69bb      	ldr	r3, [r7, #24]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3724      	adds	r7, #36	; 0x24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40021000 	.word	0x40021000
 8001804:	08001f08 	.word	0x08001f08
 8001808:	00f42400 	.word	0x00f42400
 800180c:	007a1200 	.word	0x007a1200

08001810 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001818:	2300      	movs	r3, #0
 800181a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800181c:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001828:	f7ff f9bc 	bl	8000ba4 <HAL_PWREx_GetVoltageRange>
 800182c:	6178      	str	r0, [r7, #20]
 800182e:	e014      	b.n	800185a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001830:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001834:	4a24      	ldr	r2, [pc, #144]	; (80018c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183a:	6593      	str	r3, [r2, #88]	; 0x58
 800183c:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800183e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001848:	f7ff f9ac 	bl	8000ba4 <HAL_PWREx_GetVoltageRange>
 800184c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800184e:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001852:	4a1d      	ldr	r2, [pc, #116]	; (80018c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001858:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001860:	d10b      	bne.n	800187a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b80      	cmp	r3, #128	; 0x80
 8001866:	d919      	bls.n	800189c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2ba0      	cmp	r3, #160	; 0xa0
 800186c:	d902      	bls.n	8001874 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800186e:	2302      	movs	r3, #2
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	e013      	b.n	800189c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001874:	2301      	movs	r3, #1
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	e010      	b.n	800189c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b80      	cmp	r3, #128	; 0x80
 800187e:	d902      	bls.n	8001886 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001880:	2303      	movs	r3, #3
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	e00a      	b.n	800189c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b80      	cmp	r3, #128	; 0x80
 800188a:	d102      	bne.n	8001892 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800188c:	2302      	movs	r3, #2
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	e004      	b.n	800189c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b70      	cmp	r3, #112	; 0x70
 8001896:	d101      	bne.n	800189c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001898:	2301      	movs	r3, #1
 800189a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f023 0207 	bic.w	r2, r3, #7
 80018a4:	4909      	ldr	r1, [pc, #36]	; (80018cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d001      	beq.n	80018be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40022000 	.word	0x40022000

080018d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e049      	b.n	8001976 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d106      	bne.n	80018fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7fe fda4 	bl	8000444 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2202      	movs	r2, #2
 8001900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3304      	adds	r3, #4
 800190c:	4619      	mov	r1, r3
 800190e:	4610      	mov	r0, r2
 8001910:	f000 f9d2 	bl	8001cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b01      	cmp	r3, #1
 8001992:	d001      	beq.n	8001998 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e03b      	b.n	8001a10 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2202      	movs	r2, #2
 800199c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0201 	orr.w	r2, r2, #1
 80019ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a19      	ldr	r2, [pc, #100]	; (8001a1c <HAL_TIM_Base_Start_IT+0x9c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d009      	beq.n	80019ce <HAL_TIM_Base_Start_IT+0x4e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c2:	d004      	beq.n	80019ce <HAL_TIM_Base_Start_IT+0x4e>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a15      	ldr	r2, [pc, #84]	; (8001a20 <HAL_TIM_Base_Start_IT+0xa0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d115      	bne.n	80019fa <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <HAL_TIM_Base_Start_IT+0xa4>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2b06      	cmp	r3, #6
 80019de:	d015      	beq.n	8001a0c <HAL_TIM_Base_Start_IT+0x8c>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e6:	d011      	beq.n	8001a0c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0201 	orr.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019f8:	e008      	b.n	8001a0c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f042 0201 	orr.w	r2, r2, #1
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	e000      	b.n	8001a0e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	40012c00 	.word	0x40012c00
 8001a20:	40014000 	.word	0x40014000
 8001a24:	00010007 	.word	0x00010007

08001a28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d122      	bne.n	8001a84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d11b      	bne.n	8001a84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f06f 0202 	mvn.w	r2, #2
 8001a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f905 	bl	8001c7a <HAL_TIM_IC_CaptureCallback>
 8001a70:	e005      	b.n	8001a7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f8f7 	bl	8001c66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f908 	bl	8001c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d122      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d11b      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f06f 0204 	mvn.w	r2, #4
 8001aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2202      	movs	r2, #2
 8001aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f8db 	bl	8001c7a <HAL_TIM_IC_CaptureCallback>
 8001ac4:	e005      	b.n	8001ad2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f8cd 	bl	8001c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f8de 	bl	8001c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d122      	bne.n	8001b2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d11b      	bne.n	8001b2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f06f 0208 	mvn.w	r2, #8
 8001afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2204      	movs	r2, #4
 8001b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f8b1 	bl	8001c7a <HAL_TIM_IC_CaptureCallback>
 8001b18:	e005      	b.n	8001b26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f8a3 	bl	8001c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f8b4 	bl	8001c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b10      	cmp	r3, #16
 8001b38:	d122      	bne.n	8001b80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f003 0310 	and.w	r3, r3, #16
 8001b44:	2b10      	cmp	r3, #16
 8001b46:	d11b      	bne.n	8001b80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f06f 0210 	mvn.w	r2, #16
 8001b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2208      	movs	r2, #8
 8001b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f887 	bl	8001c7a <HAL_TIM_IC_CaptureCallback>
 8001b6c:	e005      	b.n	8001b7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f879 	bl	8001c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f88a 	bl	8001c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d10e      	bne.n	8001bac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d107      	bne.n	8001bac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f06f 0201 	mvn.w	r2, #1
 8001ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7fe fba2 	bl	80002f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb6:	2b80      	cmp	r3, #128	; 0x80
 8001bb8:	d10e      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc4:	2b80      	cmp	r3, #128	; 0x80
 8001bc6:	d107      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f944 	bl	8001e60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001be6:	d10e      	bne.n	8001c06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf2:	2b80      	cmp	r3, #128	; 0x80
 8001bf4:	d107      	bne.n	8001c06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f937 	bl	8001e74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c10:	2b40      	cmp	r3, #64	; 0x40
 8001c12:	d10e      	bne.n	8001c32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c1e:	2b40      	cmp	r3, #64	; 0x40
 8001c20:	d107      	bne.n	8001c32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f838 	bl	8001ca2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	f003 0320 	and.w	r3, r3, #32
 8001c3c:	2b20      	cmp	r3, #32
 8001c3e:	d10e      	bne.n	8001c5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	f003 0320 	and.w	r3, r3, #32
 8001c4a:	2b20      	cmp	r3, #32
 8001c4c:	d107      	bne.n	8001c5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f06f 0220 	mvn.w	r2, #32
 8001c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f8f7 	bl	8001e4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a2a      	ldr	r2, [pc, #168]	; (8001d74 <TIM_Base_SetConfig+0xbc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d003      	beq.n	8001cd8 <TIM_Base_SetConfig+0x20>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd6:	d108      	bne.n	8001cea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a21      	ldr	r2, [pc, #132]	; (8001d74 <TIM_Base_SetConfig+0xbc>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00b      	beq.n	8001d0a <TIM_Base_SetConfig+0x52>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf8:	d007      	beq.n	8001d0a <TIM_Base_SetConfig+0x52>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a1e      	ldr	r2, [pc, #120]	; (8001d78 <TIM_Base_SetConfig+0xc0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d003      	beq.n	8001d0a <TIM_Base_SetConfig+0x52>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a1d      	ldr	r2, [pc, #116]	; (8001d7c <TIM_Base_SetConfig+0xc4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d108      	bne.n	8001d1c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a0c      	ldr	r2, [pc, #48]	; (8001d74 <TIM_Base_SetConfig+0xbc>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d007      	beq.n	8001d58 <TIM_Base_SetConfig+0xa0>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a0b      	ldr	r2, [pc, #44]	; (8001d78 <TIM_Base_SetConfig+0xc0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d003      	beq.n	8001d58 <TIM_Base_SetConfig+0xa0>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <TIM_Base_SetConfig+0xc4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d103      	bne.n	8001d60 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	615a      	str	r2, [r3, #20]
}
 8001d66:	bf00      	nop
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40012c00 	.word	0x40012c00
 8001d78:	40014000 	.word	0x40014000
 8001d7c:	40014400 	.word	0x40014400

08001d80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d94:	2302      	movs	r3, #2
 8001d96:	e04f      	b.n	8001e38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a21      	ldr	r2, [pc, #132]	; (8001e44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d108      	bne.n	8001dd4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001dc8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d009      	beq.n	8001e0c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e00:	d004      	beq.n	8001e0c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a10      	ldr	r2, [pc, #64]	; (8001e48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d10c      	bne.n	8001e26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	40012c00 	.word	0x40012c00
 8001e48:	40014000 	.word	0x40014000

08001e4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <__libc_init_array>:
 8001e88:	b570      	push	{r4, r5, r6, lr}
 8001e8a:	4e0d      	ldr	r6, [pc, #52]	; (8001ec0 <__libc_init_array+0x38>)
 8001e8c:	4c0d      	ldr	r4, [pc, #52]	; (8001ec4 <__libc_init_array+0x3c>)
 8001e8e:	1ba4      	subs	r4, r4, r6
 8001e90:	10a4      	asrs	r4, r4, #2
 8001e92:	2500      	movs	r5, #0
 8001e94:	42a5      	cmp	r5, r4
 8001e96:	d109      	bne.n	8001eac <__libc_init_array+0x24>
 8001e98:	4e0b      	ldr	r6, [pc, #44]	; (8001ec8 <__libc_init_array+0x40>)
 8001e9a:	4c0c      	ldr	r4, [pc, #48]	; (8001ecc <__libc_init_array+0x44>)
 8001e9c:	f000 f820 	bl	8001ee0 <_init>
 8001ea0:	1ba4      	subs	r4, r4, r6
 8001ea2:	10a4      	asrs	r4, r4, #2
 8001ea4:	2500      	movs	r5, #0
 8001ea6:	42a5      	cmp	r5, r4
 8001ea8:	d105      	bne.n	8001eb6 <__libc_init_array+0x2e>
 8001eaa:	bd70      	pop	{r4, r5, r6, pc}
 8001eac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001eb0:	4798      	blx	r3
 8001eb2:	3501      	adds	r5, #1
 8001eb4:	e7ee      	b.n	8001e94 <__libc_init_array+0xc>
 8001eb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001eba:	4798      	blx	r3
 8001ebc:	3501      	adds	r5, #1
 8001ebe:	e7f2      	b.n	8001ea6 <__libc_init_array+0x1e>
 8001ec0:	08001f38 	.word	0x08001f38
 8001ec4:	08001f38 	.word	0x08001f38
 8001ec8:	08001f38 	.word	0x08001f38
 8001ecc:	08001f3c 	.word	0x08001f3c

08001ed0 <memset>:
 8001ed0:	4402      	add	r2, r0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d100      	bne.n	8001eda <memset+0xa>
 8001ed8:	4770      	bx	lr
 8001eda:	f803 1b01 	strb.w	r1, [r3], #1
 8001ede:	e7f9      	b.n	8001ed4 <memset+0x4>

08001ee0 <_init>:
 8001ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee2:	bf00      	nop
 8001ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ee6:	bc08      	pop	{r3}
 8001ee8:	469e      	mov	lr, r3
 8001eea:	4770      	bx	lr

08001eec <_fini>:
 8001eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eee:	bf00      	nop
 8001ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ef2:	bc08      	pop	{r3}
 8001ef4:	469e      	mov	lr, r3
 8001ef6:	4770      	bx	lr
