
5_TIM_mode_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005298  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08005424  08005424  00015424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054e8  080054e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080054e8  080054e8  000154e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054f0  080054f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054f0  080054f0  000154f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054f4  080054f4  000154f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080054f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000070  08005568  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08005568  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fe2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002598  00000000  00000000  00032082  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ff0  00000000  00000000  00034620  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea8  00000000  00000000  00035610  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001beaa  00000000  00000000  000364b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000df5b  00000000  00000000  00052362  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000abe29  00000000  00000000  000602bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010c0e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004724  00000000  00000000  0010c164  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000070 	.word	0x20000070
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800540c 	.word	0x0800540c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000074 	.word	0x20000074
 80001c8:	0800540c 	.word	0x0800540c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <MX_GPIO_Init+0x44>)
 80004d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d6:	4a0e      	ldr	r2, [pc, #56]	; (8000510 <MX_GPIO_Init+0x44>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <MX_GPIO_Init+0x44>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_GPIO_Init+0x44>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	4a08      	ldr	r2, [pc, #32]	; (8000510 <MX_GPIO_Init+0x44>)
 80004f0:	f043 0302 	orr.w	r3, r3, #2
 80004f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <MX_GPIO_Init+0x44>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	f003 0302 	and.w	r3, r3, #2
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	683b      	ldr	r3, [r7, #0]

}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000

08000514 <__io_putchar>:
#else
    #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800051c:	1d39      	adds	r1, r7, #4
 800051e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000522:	2201      	movs	r2, #1
 8000524:	4803      	ldr	r0, [pc, #12]	; (8000534 <__io_putchar+0x20>)
 8000526:	f003 fcf5 	bl	8003f14 <HAL_UART_Transmit>
  return ch;
 800052a:	687b      	ldr	r3, [r7, #4]
}
 800052c:	4618      	mov	r0, r3
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000134 	.word	0x20000134

08000538 <HAL_TIM_IC_CaptureCallback>:

bool ch1done = false;
bool ch2done = false;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a0d      	ldr	r2, [pc, #52]	; (800057c <HAL_TIM_IC_CaptureCallback+0x44>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d106      	bne.n	8000558 <HAL_TIM_IC_CaptureCallback+0x20>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	7f1b      	ldrb	r3, [r3, #28]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d102      	bne.n	8000558 <HAL_TIM_IC_CaptureCallback+0x20>
  {
    ch1done = true;
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <HAL_TIM_IC_CaptureCallback+0x48>)
 8000554:	2201      	movs	r2, #1
 8000556:	701a      	strb	r2, [r3, #0]
  }

  if(htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a07      	ldr	r2, [pc, #28]	; (800057c <HAL_TIM_IC_CaptureCallback+0x44>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d106      	bne.n	8000570 <HAL_TIM_IC_CaptureCallback+0x38>
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	7f1b      	ldrb	r3, [r3, #28]
 8000566:	2b02      	cmp	r3, #2
 8000568:	d102      	bne.n	8000570 <HAL_TIM_IC_CaptureCallback+0x38>
  {
    ch2done = true;
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <HAL_TIM_IC_CaptureCallback+0x4c>)
 800056c:	2201      	movs	r2, #1
 800056e:	701a      	strb	r2, [r3, #0]
  }
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40012c00 	.word	0x40012c00
 8000580:	2000008c 	.word	0x2000008c
 8000584:	2000008d 	.word	0x2000008d

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fc7a 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f83a 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f7ff ff9a 	bl	80004cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000598:	f000 fb9a 	bl	8000cd0 <MX_USART2_UART_Init>
  MX_TIM15_Init();
 800059c:	f000 fa46 	bl	8000a2c <MX_TIM15_Init>
  MX_TIM1_Init();
 80005a0:	f000 f9be 	bl	8000920 <MX_TIM1_Init>
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t *)capture2, sizeof(capture2)-1);

  HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
   *
   */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80005a4:	2100      	movs	r1, #0
 80005a6:	4811      	ldr	r0, [pc, #68]	; (80005ec <main+0x64>)
 80005a8:	f002 f9f0 	bl	800298c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 80005ac:	2104      	movs	r1, #4
 80005ae:	480f      	ldr	r0, [pc, #60]	; (80005ec <main+0x64>)
 80005b0:	f002 f9ec 	bl	800298c <HAL_TIM_IC_Start_IT>
  //HAL_TIMEx_PWMN_Start(&htim15, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80005b4:	2104      	movs	r1, #4
 80005b6:	480e      	ldr	r0, [pc, #56]	; (80005f0 <main+0x68>)
 80005b8:	f002 f8a8 	bl	800270c <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("start \r\n");
 80005bc:	480d      	ldr	r0, [pc, #52]	; (80005f4 <main+0x6c>)
 80005be:	f004 fb19 	bl	8004bf4 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if(ch1done)
 80005c2:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <main+0x70>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d005      	beq.n	80005d6 <main+0x4e>
    {
      printf("ch1 \r\n");
 80005ca:	480c      	ldr	r0, [pc, #48]	; (80005fc <main+0x74>)
 80005cc:	f004 fb12 	bl	8004bf4 <puts>
      ch1done = false;
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <main+0x70>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
    }

    if(ch2done)
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <main+0x78>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d0f1      	beq.n	80005c2 <main+0x3a>
    {
      printf("ch2 \r\n");
 80005de:	4809      	ldr	r0, [pc, #36]	; (8000604 <main+0x7c>)
 80005e0:	f004 fb08 	bl	8004bf4 <puts>
      ch2done = false;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <main+0x78>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
    if(ch1done)
 80005ea:	e7ea      	b.n	80005c2 <main+0x3a>
 80005ec:	200000e8 	.word	0x200000e8
 80005f0:	2000009c 	.word	0x2000009c
 80005f4:	08005424 	.word	0x08005424
 80005f8:	2000008c 	.word	0x2000008c
 80005fc:	0800542c 	.word	0x0800542c
 8000600:	2000008d 	.word	0x2000008d
 8000604:	08005434 	.word	0x08005434

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b0a4      	sub	sp, #144	; 0x90
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000612:	2244      	movs	r2, #68	; 0x44
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f004 fa88 	bl	8004b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2234      	movs	r2, #52	; 0x34
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f004 fa7a 	bl	8004b2c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000638:	f44f 7000 	mov.w	r0, #512	; 0x200
 800063c:	f000 ff68 	bl	8001510 <HAL_PWREx_ControlVoltageScaling>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000646:	f000 f848 	bl	80006da <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800064a:	2310      	movs	r3, #16
 800064c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800064e:	2301      	movs	r3, #1
 8000650:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000656:	2360      	movs	r3, #96	; 0x60
 8000658:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800065e:	2301      	movs	r3, #1
 8000660:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000662:	2301      	movs	r3, #1
 8000664:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000668:	2328      	movs	r3, #40	; 0x28
 800066a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800067e:	4618      	mov	r0, r3
 8000680:	f000 ff9c 	bl	80015bc <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800068a:	f000 f826 	bl	80006da <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2303      	movs	r3, #3
 8000694:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006a6:	2104      	movs	r1, #4
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 fbed 	bl	8001e88 <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006b4:	f000 f811 	bl	80006da <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 fde4 	bl	8002290 <HAL_RCCEx_PeriphCLKConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006ce:	f000 f804 	bl	80006da <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3790      	adds	r7, #144	; 0x90
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006de:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <Error_Handler+0x6>
	...

080006e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <HAL_MspInit+0x44>)
 80006ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ee:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <HAL_MspInit+0x44>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6613      	str	r3, [r2, #96]	; 0x60
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <HAL_MspInit+0x44>)
 80006f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_MspInit+0x44>)
 8000704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000706:	4a08      	ldr	r2, [pc, #32]	; (8000728 <HAL_MspInit+0x44>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070c:	6593      	str	r3, [r2, #88]	; 0x58
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_MspInit+0x44>)
 8000710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000

0800072c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <NMI_Handler+0x4>

08000732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <HardFault_Handler+0x4>

08000738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <MemManage_Handler+0x4>

0800073e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <BusFault_Handler+0x4>

08000744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <UsageFault_Handler+0x4>

0800074a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000778:	f000 fbd8 	bl	8000f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}

08000780 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000784:	4803      	ldr	r0, [pc, #12]	; (8000794 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8000786:	f002 fa27 	bl	8002bd8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800078a:	4803      	ldr	r0, [pc, #12]	; (8000798 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800078c:	f002 fa24 	bl	8002bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200000e8 	.word	0x200000e8
 8000798:	2000009c 	.word	0x2000009c

0800079c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007a0:	4802      	ldr	r0, [pc, #8]	; (80007ac <TIM1_TRG_COM_IRQHandler+0x10>)
 80007a2:	f002 fa19 	bl	8002bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200000e8 	.word	0x200000e8

080007b0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <TIM1_CC_IRQHandler+0x10>)
 80007b6:	f002 fa0f 	bl	8002bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000e8 	.word	0x200000e8

080007c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007c8:	4802      	ldr	r0, [pc, #8]	; (80007d4 <USART2_IRQHandler+0x10>)
 80007ca:	f003 fc37 	bl	800403c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000134 	.word	0x20000134

080007d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	e00a      	b.n	8000800 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007ea:	f3af 8000 	nop.w
 80007ee:	4601      	mov	r1, r0
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	1c5a      	adds	r2, r3, #1
 80007f4:	60ba      	str	r2, [r7, #8]
 80007f6:	b2ca      	uxtb	r2, r1
 80007f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	3301      	adds	r3, #1
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	429a      	cmp	r2, r3
 8000806:	dbf0      	blt.n	80007ea <_read+0x12>
	}

return len;
 8000808:	687b      	ldr	r3, [r7, #4]
}
 800080a:	4618      	mov	r0, r3
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b086      	sub	sp, #24
 8000816:	af00      	add	r7, sp, #0
 8000818:	60f8      	str	r0, [r7, #12]
 800081a:	60b9      	str	r1, [r7, #8]
 800081c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	e009      	b.n	8000838 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	1c5a      	adds	r2, r3, #1
 8000828:	60ba      	str	r2, [r7, #8]
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fe71 	bl	8000514 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	3301      	adds	r3, #1
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	697a      	ldr	r2, [r7, #20]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	429a      	cmp	r2, r3
 800083e:	dbf1      	blt.n	8000824 <_write+0x12>
	}
	return len;
 8000840:	687b      	ldr	r3, [r7, #4]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <_close>:

int _close(int file)
{
 800084a:	b480      	push	{r7}
 800084c:	b083      	sub	sp, #12
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
	return -1;
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000862:	b480      	push	{r7}
 8000864:	b083      	sub	sp, #12
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
 800086a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000872:	605a      	str	r2, [r3, #4]
	return 0;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <_isatty>:

int _isatty(int file)
{
 8000882:	b480      	push	{r7}
 8000884:	b083      	sub	sp, #12
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
	return 1;
 800088a:	2301      	movs	r3, #1
}
 800088c:	4618      	mov	r0, r3
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
	return 0;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
	...

080008b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008bc:	4a14      	ldr	r2, [pc, #80]	; (8000910 <_sbrk+0x5c>)
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <_sbrk+0x60>)
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <_sbrk+0x64>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d102      	bne.n	80008d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <_sbrk+0x64>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <_sbrk+0x68>)
 80008d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <_sbrk+0x64>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d207      	bcs.n	80008f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008e4:	f004 f8f8 	bl	8004ad8 <__errno>
 80008e8:	4602      	mov	r2, r0
 80008ea:	230c      	movs	r3, #12
 80008ec:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008ee:	f04f 33ff 	mov.w	r3, #4294967295
 80008f2:	e009      	b.n	8000908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <_sbrk+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <_sbrk+0x64>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	4a05      	ldr	r2, [pc, #20]	; (8000918 <_sbrk+0x64>)
 8000904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000906:	68fb      	ldr	r3, [r7, #12]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000a000 	.word	0x2000a000
 8000914:	00000400 	.word	0x00000400
 8000918:	20000090 	.word	0x20000090
 800091c:	200001c0 	.word	0x200001c0

08000920 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08c      	sub	sp, #48	; 0x30
 8000924:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000926:	f107 0320 	add.w	r3, r7, #32
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]

  htim1.Instance = TIM1;
 800094c:	4b35      	ldr	r3, [pc, #212]	; (8000a24 <MX_TIM1_Init+0x104>)
 800094e:	4a36      	ldr	r2, [pc, #216]	; (8000a28 <MX_TIM1_Init+0x108>)
 8000950:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8000952:	4b34      	ldr	r3, [pc, #208]	; (8000a24 <MX_TIM1_Init+0x104>)
 8000954:	2209      	movs	r2, #9
 8000956:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b32      	ldr	r3, [pc, #200]	; (8000a24 <MX_TIM1_Init+0x104>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65536-1;
 800095e:	4b31      	ldr	r3, [pc, #196]	; (8000a24 <MX_TIM1_Init+0x104>)
 8000960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000964:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000966:	4b2f      	ldr	r3, [pc, #188]	; (8000a24 <MX_TIM1_Init+0x104>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800096c:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <MX_TIM1_Init+0x104>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000972:	4b2c      	ldr	r3, [pc, #176]	; (8000a24 <MX_TIM1_Init+0x104>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000978:	482a      	ldr	r0, [pc, #168]	; (8000a24 <MX_TIM1_Init+0x104>)
 800097a:	f001 fe0f 	bl	800259c <HAL_TIM_Base_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000984:	f7ff fea9 	bl	80006da <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800098e:	f107 0320 	add.w	r3, r7, #32
 8000992:	4619      	mov	r1, r3
 8000994:	4823      	ldr	r0, [pc, #140]	; (8000a24 <MX_TIM1_Init+0x104>)
 8000996:	f002 fbe3 	bl	8003160 <HAL_TIM_ConfigClockSource>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80009a0:	f7ff fe9b 	bl	80006da <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80009a4:	481f      	ldr	r0, [pc, #124]	; (8000a24 <MX_TIM1_Init+0x104>)
 80009a6:	f001 ff8f 	bl	80028c8 <HAL_TIM_IC_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80009b0:	f7ff fe93 	bl	80006da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	4817      	ldr	r0, [pc, #92]	; (8000a24 <MX_TIM1_Init+0x104>)
 80009c8:	f003 f95a 	bl	8003c80 <HAL_TIMEx_MasterConfigSynchronization>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80009d2:	f7ff fe82 	bl	80006da <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009da:	2301      	movs	r3, #1
 80009dc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2200      	movs	r2, #0
 80009ea:	4619      	mov	r1, r3
 80009ec:	480d      	ldr	r0, [pc, #52]	; (8000a24 <MX_TIM1_Init+0x104>)
 80009ee:	f002 fa12 	bl	8002e16 <HAL_TIM_IC_ConfigChannel>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80009f8:	f7ff fe6f 	bl	80006da <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80009fc:	2302      	movs	r3, #2
 80009fe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000a00:	2302      	movs	r3, #2
 8000a02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2204      	movs	r2, #4
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4806      	ldr	r0, [pc, #24]	; (8000a24 <MX_TIM1_Init+0x104>)
 8000a0c:	f002 fa03 	bl	8002e16 <HAL_TIM_IC_ConfigChannel>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000a16:	f7ff fe60 	bl	80006da <Error_Handler>
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3730      	adds	r7, #48	; 0x30
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200000e8 	.word	0x200000e8
 8000a28:	40012c00 	.word	0x40012c00

08000a2c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b09a      	sub	sp, #104	; 0x68
 8000a30:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
 8000a5c:	615a      	str	r2, [r3, #20]
 8000a5e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	222c      	movs	r2, #44	; 0x2c
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f004 f860 	bl	8004b2c <memset>

  htim15.Instance = TIM15;
 8000a6c:	4b3e      	ldr	r3, [pc, #248]	; (8000b68 <MX_TIM15_Init+0x13c>)
 8000a6e:	4a3f      	ldr	r2, [pc, #252]	; (8000b6c <MX_TIM15_Init+0x140>)
 8000a70:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 8000a72:	4b3d      	ldr	r3, [pc, #244]	; (8000b68 <MX_TIM15_Init+0x13c>)
 8000a74:	224f      	movs	r2, #79	; 0x4f
 8000a76:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a78:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <MX_TIM15_Init+0x13c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 500-1;
 8000a7e:	4b3a      	ldr	r3, [pc, #232]	; (8000b68 <MX_TIM15_Init+0x13c>)
 8000a80:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000a84:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a86:	4b38      	ldr	r3, [pc, #224]	; (8000b68 <MX_TIM15_Init+0x13c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000a8c:	4b36      	ldr	r3, [pc, #216]	; (8000b68 <MX_TIM15_Init+0x13c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a92:	4b35      	ldr	r3, [pc, #212]	; (8000b68 <MX_TIM15_Init+0x13c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000a98:	4833      	ldr	r0, [pc, #204]	; (8000b68 <MX_TIM15_Init+0x13c>)
 8000a9a:	f001 fd7f 	bl	800259c <HAL_TIM_Base_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000aa4:	f7ff fe19 	bl	80006da <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aac:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000aae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	482c      	ldr	r0, [pc, #176]	; (8000b68 <MX_TIM15_Init+0x13c>)
 8000ab6:	f002 fb53 	bl	8003160 <HAL_TIM_ConfigClockSource>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8000ac0:	f7ff fe0b 	bl	80006da <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000ac4:	4828      	ldr	r0, [pc, #160]	; (8000b68 <MX_TIM15_Init+0x13c>)
 8000ac6:	f001 fdc0 	bl	800264a <HAL_TIM_PWM_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8000ad0:	f7ff fe03 	bl	80006da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000adc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4821      	ldr	r0, [pc, #132]	; (8000b68 <MX_TIM15_Init+0x13c>)
 8000ae4:	f003 f8cc 	bl	8003c80 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8000aee:	f7ff fdf4 	bl	80006da <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af2:	2360      	movs	r3, #96	; 0x60
 8000af4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000afa:	2300      	movs	r3, #0
 8000afc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000afe:	2300      	movs	r3, #0
 8000b00:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b12:	2204      	movs	r2, #4
 8000b14:	4619      	mov	r1, r3
 8000b16:	4814      	ldr	r0, [pc, #80]	; (8000b68 <MX_TIM15_Init+0x13c>)
 8000b18:	f002 fa12 	bl	8002f40 <HAL_TIM_PWM_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8000b22:	f7ff fdda 	bl	80006da <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	4619      	mov	r1, r3
 8000b48:	4807      	ldr	r0, [pc, #28]	; (8000b68 <MX_TIM15_Init+0x13c>)
 8000b4a:	f003 f8ff 	bl	8003d4c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8000b54:	f7ff fdc1 	bl	80006da <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim15);
 8000b58:	4803      	ldr	r0, [pc, #12]	; (8000b68 <MX_TIM15_Init+0x13c>)
 8000b5a:	f000 f881 	bl	8000c60 <HAL_TIM_MspPostInit>

}
 8000b5e:	bf00      	nop
 8000b60:	3768      	adds	r7, #104	; 0x68
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2000009c 	.word	0x2000009c
 8000b6c:	40014000 	.word	0x40014000

08000b70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a31      	ldr	r2, [pc, #196]	; (8000c54 <HAL_TIM_Base_MspInit+0xe4>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d142      	bne.n	8000c18 <HAL_TIM_Base_MspInit+0xa8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b92:	4b31      	ldr	r3, [pc, #196]	; (8000c58 <HAL_TIM_Base_MspInit+0xe8>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b96:	4a30      	ldr	r2, [pc, #192]	; (8000c58 <HAL_TIM_Base_MspInit+0xe8>)
 8000b98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9e:	4b2e      	ldr	r3, [pc, #184]	; (8000c58 <HAL_TIM_Base_MspInit+0xe8>)
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b2b      	ldr	r3, [pc, #172]	; (8000c58 <HAL_TIM_Base_MspInit+0xe8>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	4a2a      	ldr	r2, [pc, #168]	; (8000c58 <HAL_TIM_Base_MspInit+0xe8>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb6:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <HAL_TIM_Base_MspInit+0xe8>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be2:	f000 fb15 	bl	8001210 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	2018      	movs	r0, #24
 8000bec:	f000 fa99 	bl	8001122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000bf0:	2018      	movs	r0, #24
 8000bf2:	f000 fab2 	bl	800115a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	201a      	movs	r0, #26
 8000bfc:	f000 fa91 	bl	8001122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000c00:	201a      	movs	r0, #26
 8000c02:	f000 faaa 	bl	800115a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	201b      	movs	r0, #27
 8000c0c:	f000 fa89 	bl	8001122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000c10:	201b      	movs	r0, #27
 8000c12:	f000 faa2 	bl	800115a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8000c16:	e018      	b.n	8000c4a <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM15)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <HAL_TIM_Base_MspInit+0xec>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d113      	bne.n	8000c4a <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <HAL_TIM_Base_MspInit+0xe8>)
 8000c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c26:	4a0c      	ldr	r2, [pc, #48]	; (8000c58 <HAL_TIM_Base_MspInit+0xe8>)
 8000c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <HAL_TIM_Base_MspInit+0xe8>)
 8000c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2018      	movs	r0, #24
 8000c40:	f000 fa6f 	bl	8001122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000c44:	2018      	movs	r0, #24
 8000c46:	f000 fa88 	bl	800115a <HAL_NVIC_EnableIRQ>
}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40012c00 	.word	0x40012c00
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40014000 	.word	0x40014000

08000c60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a11      	ldr	r2, [pc, #68]	; (8000cc4 <HAL_TIM_MspPostInit+0x64>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d11c      	bne.n	8000cbc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_TIM_MspPostInit+0x68>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	4a10      	ldr	r2, [pc, #64]	; (8000cc8 <HAL_TIM_MspPostInit+0x68>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_TIM_MspPostInit+0x68>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PB13     ------> TIM15_CH1N
    PB15     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000c9a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000c9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000cac:	230e      	movs	r3, #14
 8000cae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <HAL_TIM_MspPostInit+0x6c>)
 8000cb8:	f000 faaa 	bl	8001210 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000cbc:	bf00      	nop
 8000cbe:	3720      	adds	r7, #32
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40014000 	.word	0x40014000
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	48000400 	.word	0x48000400

08000cd0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <MX_USART2_UART_Init+0x58>)
 8000cd6:	4a15      	ldr	r2, [pc, #84]	; (8000d2c <MX_USART2_UART_Init+0x5c>)
 8000cd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <MX_USART2_UART_Init+0x58>)
 8000cdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ce0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <MX_USART2_UART_Init+0x58>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_USART2_UART_Init+0x58>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_USART2_UART_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_USART2_UART_Init+0x58>)
 8000cf6:	220c      	movs	r2, #12
 8000cf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <MX_USART2_UART_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_USART2_UART_Init+0x58>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <MX_USART2_UART_Init+0x58>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_USART2_UART_Init+0x58>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d12:	4805      	ldr	r0, [pc, #20]	; (8000d28 <MX_USART2_UART_Init+0x58>)
 8000d14:	f003 f8b0 	bl	8003e78 <HAL_UART_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d1e:	f7ff fcdc 	bl	80006da <Error_Handler>
  }

}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000134 	.word	0x20000134
 8000d2c:	40004400 	.word	0x40004400

08000d30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a1b      	ldr	r2, [pc, #108]	; (8000dbc <HAL_UART_MspInit+0x8c>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d130      	bne.n	8000db4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d52:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <HAL_UART_MspInit+0x90>)
 8000d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d56:	4a1a      	ldr	r2, [pc, #104]	; (8000dc0 <HAL_UART_MspInit+0x90>)
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d5e:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <HAL_UART_MspInit+0x90>)
 8000d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_UART_MspInit+0x90>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <HAL_UART_MspInit+0x90>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_UART_MspInit+0x90>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d82:	230c      	movs	r3, #12
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d92:	2307      	movs	r3, #7
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f000 fa36 	bl	8001210 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	2026      	movs	r0, #38	; 0x26
 8000daa:	f000 f9ba 	bl	8001122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dae:	2026      	movs	r0, #38	; 0x26
 8000db0:	f000 f9d3 	bl	800115a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	; 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40004400 	.word	0x40004400
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dc8:	f000 f826 	bl	8000e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000dcc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000dce:	e003      	b.n	8000dd8 <LoopCopyDataInit>

08000dd0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000dd2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000dd4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000dd6:	3104      	adds	r1, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000dd8:	480a      	ldr	r0, [pc, #40]	; (8000e04 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ddc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000dde:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000de0:	d3f6      	bcc.n	8000dd0 <CopyDataInit>
	ldr	r2, =_sbss
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000de4:	e002      	b.n	8000dec <LoopFillZerobss>

08000de6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000de6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000de8:	f842 3b04 	str.w	r3, [r2], #4

08000dec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <LoopForever+0x16>)
	cmp	r2, r3
 8000dee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000df0:	d3f9      	bcc.n	8000de6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000df2:	f003 fe77 	bl	8004ae4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000df6:	f7ff fbc7 	bl	8000588 <main>

08000dfa <LoopForever>:

LoopForever:
    b LoopForever
 8000dfa:	e7fe      	b.n	8000dfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dfc:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000e00:	080054f8 	.word	0x080054f8
	ldr	r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e08:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000e0c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000e10:	200001bc 	.word	0x200001bc

08000e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC1_2_IRQHandler>
	...

08000e18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <SystemInit+0x64>)
 8000e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e22:	4a16      	ldr	r2, [pc, #88]	; (8000e7c <SystemInit+0x64>)
 8000e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <SystemInit+0x68>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <SystemInit+0x68>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <SystemInit+0x68>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <SystemInit+0x68>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a0f      	ldr	r2, [pc, #60]	; (8000e80 <SystemInit+0x68>)
 8000e44:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e48:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <SystemInit+0x68>)
 8000e50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e54:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <SystemInit+0x68>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a09      	ldr	r2, [pc, #36]	; (8000e80 <SystemInit+0x68>)
 8000e5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e60:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <SystemInit+0x68>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <SystemInit+0x64>)
 8000e6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e6e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00
 8000e80:	40021000 	.word	0x40021000

08000e84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8e:	2003      	movs	r0, #3
 8000e90:	f000 f93c 	bl	800110c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e94:	2000      	movs	r0, #0
 8000e96:	f000 f80d 	bl	8000eb4 <HAL_InitTick>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d002      	beq.n	8000ea6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	71fb      	strb	r3, [r7, #7]
 8000ea4:	e001      	b.n	8000eaa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ea6:	f7ff fc1d 	bl	80006e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <HAL_InitTick+0x6c>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d023      	beq.n	8000f10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ec8:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <HAL_InitTick+0x70>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <HAL_InitTick+0x6c>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f949 	bl	8001176 <HAL_SYSTICK_Config>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d10f      	bne.n	8000f0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0f      	cmp	r3, #15
 8000eee:	d809      	bhi.n	8000f04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f000 f913 	bl	8001122 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000efc:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <HAL_InitTick+0x74>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	e007      	b.n	8000f14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	73fb      	strb	r3, [r7, #15]
 8000f08:	e004      	b.n	8000f14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	73fb      	strb	r3, [r7, #15]
 8000f0e:	e001      	b.n	8000f14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000004 	.word	0x20000004

08000f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x20>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x24>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <HAL_IncTick+0x24>)
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	200001b4 	.word	0x200001b4

08000f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <HAL_GetTick+0x14>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	200001b4 	.word	0x200001b4

08000f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9e:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	60d3      	str	r3, [r2, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <__NVIC_GetPriorityGrouping+0x18>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	f003 0307 	and.w	r3, r3, #7
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	db0b      	blt.n	8000ffa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	f003 021f 	and.w	r2, r3, #31
 8000fe8:	4907      	ldr	r1, [pc, #28]	; (8001008 <__NVIC_EnableIRQ+0x38>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	095b      	lsrs	r3, r3, #5
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000e100 	.word	0xe000e100

0800100c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	2b00      	cmp	r3, #0
 800101e:	db0a      	blt.n	8001036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	b2da      	uxtb	r2, r3
 8001024:	490c      	ldr	r1, [pc, #48]	; (8001058 <__NVIC_SetPriority+0x4c>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	0112      	lsls	r2, r2, #4
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	440b      	add	r3, r1
 8001030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001034:	e00a      	b.n	800104c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4908      	ldr	r1, [pc, #32]	; (800105c <__NVIC_SetPriority+0x50>)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	3b04      	subs	r3, #4
 8001044:	0112      	lsls	r2, r2, #4
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	440b      	add	r3, r1
 800104a:	761a      	strb	r2, [r3, #24]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000e100 	.word	0xe000e100
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f1c3 0307 	rsb	r3, r3, #7
 800107a:	2b04      	cmp	r3, #4
 800107c:	bf28      	it	cs
 800107e:	2304      	movcs	r3, #4
 8001080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3304      	adds	r3, #4
 8001086:	2b06      	cmp	r3, #6
 8001088:	d902      	bls.n	8001090 <NVIC_EncodePriority+0x30>
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3b03      	subs	r3, #3
 800108e:	e000      	b.n	8001092 <NVIC_EncodePriority+0x32>
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	f04f 32ff 	mov.w	r2, #4294967295
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43da      	mvns	r2, r3
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	401a      	ands	r2, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa01 f303 	lsl.w	r3, r1, r3
 80010b2:	43d9      	mvns	r1, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	4313      	orrs	r3, r2
         );
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3724      	adds	r7, #36	; 0x24
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d8:	d301      	bcc.n	80010de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010da:	2301      	movs	r3, #1
 80010dc:	e00f      	b.n	80010fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <SysTick_Config+0x40>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e6:	210f      	movs	r1, #15
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f7ff ff8e 	bl	800100c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <SysTick_Config+0x40>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f6:	4b04      	ldr	r3, [pc, #16]	; (8001108 <SysTick_Config+0x40>)
 80010f8:	2207      	movs	r2, #7
 80010fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	e000e010 	.word	0xe000e010

0800110c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff29 	bl	8000f6c <__NVIC_SetPriorityGrouping>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001134:	f7ff ff3e 	bl	8000fb4 <__NVIC_GetPriorityGrouping>
 8001138:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	6978      	ldr	r0, [r7, #20]
 8001140:	f7ff ff8e 	bl	8001060 <NVIC_EncodePriority>
 8001144:	4602      	mov	r2, r0
 8001146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff5d 	bl	800100c <__NVIC_SetPriority>
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff31 	bl	8000fd0 <__NVIC_EnableIRQ>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffa2 	bl	80010c8 <SysTick_Config>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b084      	sub	sp, #16
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d005      	beq.n	80011b2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2204      	movs	r2, #4
 80011aa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	73fb      	strb	r3, [r7, #15]
 80011b0:	e029      	b.n	8001206 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 020e 	bic.w	r2, r2, #14
 80011c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0201 	bic.w	r2, r2, #1
 80011d0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f003 021c 	and.w	r2, r3, #28
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	2101      	movs	r1, #1
 80011e0:	fa01 f202 	lsl.w	r2, r1, r2
 80011e4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	4798      	blx	r3
    }
  }
  return status;
 8001206:	7bfb      	ldrb	r3, [r7, #15]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001210:	b480      	push	{r7}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121e:	e14e      	b.n	80014be <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	2101      	movs	r1, #1
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	fa01 f303 	lsl.w	r3, r1, r3
 800122c:	4013      	ands	r3, r2
 800122e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 8140 	beq.w	80014b8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d00b      	beq.n	8001258 <HAL_GPIO_Init+0x48>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d007      	beq.n	8001258 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800124c:	2b11      	cmp	r3, #17
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b12      	cmp	r3, #18
 8001256:	d130      	bne.n	80012ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800128e:	2201      	movs	r2, #1
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	091b      	lsrs	r3, r3, #4
 80012a4:	f003 0201 	and.w	r2, r3, #1
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	2203      	movs	r2, #3
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0xea>
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b12      	cmp	r3, #18
 80012f8:	d123      	bne.n	8001342 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	08da      	lsrs	r2, r3, #3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3208      	adds	r2, #8
 8001302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	220f      	movs	r2, #15
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	691a      	ldr	r2, [r3, #16]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	08da      	lsrs	r2, r3, #3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3208      	adds	r2, #8
 800133c:	6939      	ldr	r1, [r7, #16]
 800133e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	2203      	movs	r2, #3
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 0203 	and.w	r2, r3, #3
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 809a 	beq.w	80014b8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001384:	4b55      	ldr	r3, [pc, #340]	; (80014dc <HAL_GPIO_Init+0x2cc>)
 8001386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001388:	4a54      	ldr	r2, [pc, #336]	; (80014dc <HAL_GPIO_Init+0x2cc>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6613      	str	r3, [r2, #96]	; 0x60
 8001390:	4b52      	ldr	r3, [pc, #328]	; (80014dc <HAL_GPIO_Init+0x2cc>)
 8001392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800139c:	4a50      	ldr	r2, [pc, #320]	; (80014e0 <HAL_GPIO_Init+0x2d0>)
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	3302      	adds	r3, #2
 80013a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	220f      	movs	r2, #15
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013c6:	d013      	beq.n	80013f0 <HAL_GPIO_Init+0x1e0>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a46      	ldr	r2, [pc, #280]	; (80014e4 <HAL_GPIO_Init+0x2d4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d00d      	beq.n	80013ec <HAL_GPIO_Init+0x1dc>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a45      	ldr	r2, [pc, #276]	; (80014e8 <HAL_GPIO_Init+0x2d8>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d007      	beq.n	80013e8 <HAL_GPIO_Init+0x1d8>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a44      	ldr	r2, [pc, #272]	; (80014ec <HAL_GPIO_Init+0x2dc>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d101      	bne.n	80013e4 <HAL_GPIO_Init+0x1d4>
 80013e0:	2303      	movs	r3, #3
 80013e2:	e006      	b.n	80013f2 <HAL_GPIO_Init+0x1e2>
 80013e4:	2307      	movs	r3, #7
 80013e6:	e004      	b.n	80013f2 <HAL_GPIO_Init+0x1e2>
 80013e8:	2302      	movs	r3, #2
 80013ea:	e002      	b.n	80013f2 <HAL_GPIO_Init+0x1e2>
 80013ec:	2301      	movs	r3, #1
 80013ee:	e000      	b.n	80013f2 <HAL_GPIO_Init+0x1e2>
 80013f0:	2300      	movs	r3, #0
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	f002 0203 	and.w	r2, r2, #3
 80013f8:	0092      	lsls	r2, r2, #2
 80013fa:	4093      	lsls	r3, r2
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001402:	4937      	ldr	r1, [pc, #220]	; (80014e0 <HAL_GPIO_Init+0x2d0>)
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	3302      	adds	r3, #2
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001410:	4b37      	ldr	r3, [pc, #220]	; (80014f0 <HAL_GPIO_Init+0x2e0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001434:	4a2e      	ldr	r2, [pc, #184]	; (80014f0 <HAL_GPIO_Init+0x2e0>)
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800143a:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <HAL_GPIO_Init+0x2e0>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	43db      	mvns	r3, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800145e:	4a24      	ldr	r2, [pc, #144]	; (80014f0 <HAL_GPIO_Init+0x2e0>)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001464:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <HAL_GPIO_Init+0x2e0>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	43db      	mvns	r3, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001488:	4a19      	ldr	r2, [pc, #100]	; (80014f0 <HAL_GPIO_Init+0x2e0>)
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800148e:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <HAL_GPIO_Init+0x2e0>)
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	43db      	mvns	r3, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014b2:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <HAL_GPIO_Init+0x2e0>)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	3301      	adds	r3, #1
 80014bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	fa22 f303 	lsr.w	r3, r2, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f47f aea9 	bne.w	8001220 <HAL_GPIO_Init+0x10>
  }
}
 80014ce:	bf00      	nop
 80014d0:	371c      	adds	r7, #28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40010000 	.word	0x40010000
 80014e4:	48000400 	.word	0x48000400
 80014e8:	48000800 	.word	0x48000800
 80014ec:	48000c00 	.word	0x48000c00
 80014f0:	40010400 	.word	0x40010400

080014f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <HAL_PWREx_GetVoltageRange+0x18>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40007000 	.word	0x40007000

08001510 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800151e:	d130      	bne.n	8001582 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001520:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800152c:	d038      	beq.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001536:	4a1e      	ldr	r2, [pc, #120]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001538:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800153c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800153e:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2232      	movs	r2, #50	; 0x32
 8001544:	fb02 f303 	mul.w	r3, r2, r3
 8001548:	4a1b      	ldr	r2, [pc, #108]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0c9b      	lsrs	r3, r3, #18
 8001550:	3301      	adds	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001554:	e002      	b.n	800155c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3b01      	subs	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001568:	d102      	bne.n	8001570 <HAL_PWREx_ControlVoltageScaling+0x60>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f2      	bne.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800157c:	d110      	bne.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e00f      	b.n	80015a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800158a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800158e:	d007      	beq.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001598:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40007000 	.word	0x40007000
 80015b4:	20000000 	.word	0x20000000
 80015b8:	431bde83 	.word	0x431bde83

080015bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d102      	bne.n	80015d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	f000 bc56 	b.w	8001e7c <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015d0:	4ba1      	ldr	r3, [pc, #644]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 030c 	and.w	r3, r3, #12
 80015d8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015da:	4b9f      	ldr	r3, [pc, #636]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0310 	and.w	r3, r3, #16
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80e6 	beq.w	80017be <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015f2:	6a3b      	ldr	r3, [r7, #32]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d007      	beq.n	8001608 <HAL_RCC_OscConfig+0x4c>
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	2b0c      	cmp	r3, #12
 80015fc:	f040 808d 	bne.w	800171a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	2b01      	cmp	r3, #1
 8001604:	f040 8089 	bne.w	800171a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001608:	4b93      	ldr	r3, [pc, #588]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d006      	beq.n	8001622 <HAL_RCC_OscConfig+0x66>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	f000 bc2d 	b.w	8001e7c <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001626:	4b8c      	ldr	r3, [pc, #560]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b00      	cmp	r3, #0
 8001630:	d004      	beq.n	800163c <HAL_RCC_OscConfig+0x80>
 8001632:	4b89      	ldr	r3, [pc, #548]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800163a:	e005      	b.n	8001648 <HAL_RCC_OscConfig+0x8c>
 800163c:	4b86      	ldr	r3, [pc, #536]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 800163e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001642:	091b      	lsrs	r3, r3, #4
 8001644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001648:	4293      	cmp	r3, r2
 800164a:	d224      	bcs.n	8001696 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fdbd 	bl	80021d0 <RCC_SetFlashLatencyFromMSIRange>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	f000 bc0d 	b.w	8001e7c <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001662:	4b7d      	ldr	r3, [pc, #500]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a7c      	ldr	r2, [pc, #496]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 8001668:	f043 0308 	orr.w	r3, r3, #8
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	4b7a      	ldr	r3, [pc, #488]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	4977      	ldr	r1, [pc, #476]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 800167c:	4313      	orrs	r3, r2
 800167e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001680:	4b75      	ldr	r3, [pc, #468]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	4972      	ldr	r1, [pc, #456]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
 8001694:	e025      	b.n	80016e2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001696:	4b70      	ldr	r3, [pc, #448]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a6f      	ldr	r2, [pc, #444]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 800169c:	f043 0308 	orr.w	r3, r3, #8
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	4b6d      	ldr	r3, [pc, #436]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	496a      	ldr	r1, [pc, #424]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016b4:	4b68      	ldr	r3, [pc, #416]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	4965      	ldr	r1, [pc, #404]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d109      	bne.n	80016e2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 fd7c 	bl	80021d0 <RCC_SetFlashLatencyFromMSIRange>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e3cc      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016e2:	f000 fcb3 	bl	800204c <HAL_RCC_GetSysClockFreq>
 80016e6:	4601      	mov	r1, r0
 80016e8:	4b5b      	ldr	r3, [pc, #364]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	091b      	lsrs	r3, r3, #4
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	4a5a      	ldr	r2, [pc, #360]	; (800185c <HAL_RCC_OscConfig+0x2a0>)
 80016f4:	5cd3      	ldrb	r3, [r2, r3]
 80016f6:	f003 031f 	and.w	r3, r3, #31
 80016fa:	fa21 f303 	lsr.w	r3, r1, r3
 80016fe:	4a58      	ldr	r2, [pc, #352]	; (8001860 <HAL_RCC_OscConfig+0x2a4>)
 8001700:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001702:	4b58      	ldr	r3, [pc, #352]	; (8001864 <HAL_RCC_OscConfig+0x2a8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fbd4 	bl	8000eb4 <HAL_InitTick>
 800170c:	4603      	mov	r3, r0
 800170e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d052      	beq.n	80017bc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001716:	7dfb      	ldrb	r3, [r7, #23]
 8001718:	e3b0      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d032      	beq.n	8001788 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001722:	4b4d      	ldr	r3, [pc, #308]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a4c      	ldr	r2, [pc, #304]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800172e:	f7ff fc11 	bl	8000f54 <HAL_GetTick>
 8001732:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001736:	f7ff fc0d 	bl	8000f54 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e399      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001748:	4b43      	ldr	r3, [pc, #268]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001754:	4b40      	ldr	r3, [pc, #256]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a3f      	ldr	r2, [pc, #252]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 800175a:	f043 0308 	orr.w	r3, r3, #8
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b3d      	ldr	r3, [pc, #244]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	493a      	ldr	r1, [pc, #232]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 800176e:	4313      	orrs	r3, r2
 8001770:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001772:	4b39      	ldr	r3, [pc, #228]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	4935      	ldr	r1, [pc, #212]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 8001782:	4313      	orrs	r3, r2
 8001784:	604b      	str	r3, [r1, #4]
 8001786:	e01a      	b.n	80017be <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001788:	4b33      	ldr	r3, [pc, #204]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a32      	ldr	r2, [pc, #200]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001794:	f7ff fbde 	bl	8000f54 <HAL_GetTick>
 8001798:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800179c:	f7ff fbda 	bl	8000f54 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e366      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017ae:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x1e0>
 80017ba:	e000      	b.n	80017be <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d073      	beq.n	80018b2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_OscConfig+0x220>
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	2b0c      	cmp	r3, #12
 80017d4:	d10e      	bne.n	80017f4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d10b      	bne.n	80017f4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d063      	beq.n	80018b0 <HAL_RCC_OscConfig+0x2f4>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d15f      	bne.n	80018b0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e343      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017fc:	d106      	bne.n	800180c <HAL_RCC_OscConfig+0x250>
 80017fe:	4b16      	ldr	r3, [pc, #88]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a15      	ldr	r2, [pc, #84]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 8001804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	e01d      	b.n	8001848 <HAL_RCC_OscConfig+0x28c>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0x274>
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a0f      	ldr	r2, [pc, #60]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 800181c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a0c      	ldr	r2, [pc, #48]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 8001828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e00b      	b.n	8001848 <HAL_RCC_OscConfig+0x28c>
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a08      	ldr	r2, [pc, #32]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 8001836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a05      	ldr	r2, [pc, #20]	; (8001858 <HAL_RCC_OscConfig+0x29c>)
 8001842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d01b      	beq.n	8001888 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff fb80 	bl	8000f54 <HAL_GetTick>
 8001854:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001856:	e010      	b.n	800187a <HAL_RCC_OscConfig+0x2be>
 8001858:	40021000 	.word	0x40021000
 800185c:	0800543c 	.word	0x0800543c
 8001860:	20000000 	.word	0x20000000
 8001864:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001868:	f7ff fb74 	bl	8000f54 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b64      	cmp	r3, #100	; 0x64
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e300      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800187a:	4ba0      	ldr	r3, [pc, #640]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x2ac>
 8001886:	e014      	b.n	80018b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001888:	f7ff fb64 	bl	8000f54 <HAL_GetTick>
 800188c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001890:	f7ff fb60 	bl	8000f54 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	; 0x64
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e2ec      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018a2:	4b96      	ldr	r3, [pc, #600]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x2d4>
 80018ae:	e000      	b.n	80018b2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d060      	beq.n	8001980 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_OscConfig+0x314>
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	2b0c      	cmp	r3, #12
 80018c8:	d119      	bne.n	80018fe <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d116      	bne.n	80018fe <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d0:	4b8a      	ldr	r3, [pc, #552]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_OscConfig+0x32c>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e2c9      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e8:	4b84      	ldr	r3, [pc, #528]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	061b      	lsls	r3, r3, #24
 80018f6:	4981      	ldr	r1, [pc, #516]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018fc:	e040      	b.n	8001980 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d023      	beq.n	800194e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001906:	4b7d      	ldr	r3, [pc, #500]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a7c      	ldr	r2, [pc, #496]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 800190c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001912:	f7ff fb1f 	bl	8000f54 <HAL_GetTick>
 8001916:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800191a:	f7ff fb1b 	bl	8000f54 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e2a7      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800192c:	4b73      	ldr	r3, [pc, #460]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f0      	beq.n	800191a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001938:	4b70      	ldr	r3, [pc, #448]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	061b      	lsls	r3, r3, #24
 8001946:	496d      	ldr	r1, [pc, #436]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
 800194c:	e018      	b.n	8001980 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194e:	4b6b      	ldr	r3, [pc, #428]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a6a      	ldr	r2, [pc, #424]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 8001954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195a:	f7ff fafb 	bl	8000f54 <HAL_GetTick>
 800195e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001962:	f7ff faf7 	bl	8000f54 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e283      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001974:	4b61      	ldr	r3, [pc, #388]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f0      	bne.n	8001962 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d07f      	beq.n	8001a8c <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d05f      	beq.n	8001a54 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001994:	4b59      	ldr	r3, [pc, #356]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 8001996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199a:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	699a      	ldr	r2, [r3, #24]
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	f003 0310 	and.w	r3, r3, #16
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d037      	beq.n	8001a1a <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d006      	beq.n	80019c2 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e25c      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d01b      	beq.n	8001a04 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80019cc:	4b4b      	ldr	r3, [pc, #300]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 80019ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d2:	4a4a      	ldr	r2, [pc, #296]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 80019d4:	f023 0301 	bic.w	r3, r3, #1
 80019d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019dc:	f7ff faba 	bl	8000f54 <HAL_GetTick>
 80019e0:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e4:	f7ff fab6 	bl	8000f54 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b11      	cmp	r3, #17
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e242      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019f6:	4b41      	ldr	r3, [pc, #260]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 80019f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1ef      	bne.n	80019e4 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001a04:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 8001a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a0a:	f023 0210 	bic.w	r2, r3, #16
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	493a      	ldr	r1, [pc, #232]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a1a:	4b38      	ldr	r3, [pc, #224]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 8001a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a20:	4a36      	ldr	r2, [pc, #216]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2a:	f7ff fa93 	bl	8000f54 <HAL_GetTick>
 8001a2e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a32:	f7ff fa8f 	bl	8000f54 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b11      	cmp	r3, #17
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e21b      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a44:	4b2d      	ldr	r3, [pc, #180]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 8001a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0ef      	beq.n	8001a32 <HAL_RCC_OscConfig+0x476>
 8001a52:	e01b      	b.n	8001a8c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a54:	4b29      	ldr	r3, [pc, #164]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 8001a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a5a:	4a28      	ldr	r2, [pc, #160]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 8001a5c:	f023 0301 	bic.w	r3, r3, #1
 8001a60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a64:	f7ff fa76 	bl	8000f54 <HAL_GetTick>
 8001a68:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a6c:	f7ff fa72 	bl	8000f54 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b11      	cmp	r3, #17
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e1fe      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a7e:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 8001a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1ef      	bne.n	8001a6c <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 80c1 	beq.w	8001c1c <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001aa0:	4b16      	ldr	r3, [pc, #88]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10e      	bne.n	8001aca <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 8001aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab0:	4a12      	ldr	r2, [pc, #72]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 8001ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab8:	4b10      	ldr	r3, [pc, #64]	; (8001afc <HAL_RCC_OscConfig+0x540>)
 8001aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <HAL_RCC_OscConfig+0x544>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d11c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_RCC_OscConfig+0x544>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a09      	ldr	r2, [pc, #36]	; (8001b00 <HAL_RCC_OscConfig+0x544>)
 8001adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae2:	f7ff fa37 	bl	8000f54 <HAL_GetTick>
 8001ae6:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae8:	e00c      	b.n	8001b04 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aea:	f7ff fa33 	bl	8000f54 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d905      	bls.n	8001b04 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e1bf      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b04:	4bb1      	ldr	r3, [pc, #708]	; (8001dcc <HAL_RCC_OscConfig+0x810>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0ec      	beq.n	8001aea <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d02c      	beq.n	8001b76 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001b1c:	4bac      	ldr	r3, [pc, #688]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2e:	49a8      	ldr	r1, [pc, #672]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d010      	beq.n	8001b64 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b42:	4ba3      	ldr	r3, [pc, #652]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b48:	4aa1      	ldr	r2, [pc, #644]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b52:	4b9f      	ldr	r3, [pc, #636]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b58:	4a9d      	ldr	r2, [pc, #628]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b62:	e018      	b.n	8001b96 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b64:	4b9a      	ldr	r3, [pc, #616]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6a:	4a99      	ldr	r2, [pc, #612]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b74:	e00f      	b.n	8001b96 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b76:	4b96      	ldr	r3, [pc, #600]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7c:	4a94      	ldr	r2, [pc, #592]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001b7e:	f023 0301 	bic.w	r3, r3, #1
 8001b82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b86:	4b92      	ldr	r3, [pc, #584]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8c:	4a90      	ldr	r2, [pc, #576]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001b8e:	f023 0304 	bic.w	r3, r3, #4
 8001b92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d016      	beq.n	8001bcc <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9e:	f7ff f9d9 	bl	8000f54 <HAL_GetTick>
 8001ba2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ba4:	e00a      	b.n	8001bbc <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba6:	f7ff f9d5 	bl	8000f54 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e15f      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bbc:	4b84      	ldr	r3, [pc, #528]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0ed      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x5ea>
 8001bca:	e01d      	b.n	8001c08 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bcc:	f7ff f9c2 	bl	8000f54 <HAL_GetTick>
 8001bd0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bd2:	e00a      	b.n	8001bea <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd4:	f7ff f9be 	bl	8000f54 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e148      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bea:	4b79      	ldr	r3, [pc, #484]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1ed      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001bf8:	4b75      	ldr	r3, [pc, #468]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfe:	4a74      	ldr	r2, [pc, #464]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001c00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d105      	bne.n	8001c1c <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c10:	4b6f      	ldr	r3, [pc, #444]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c14:	4a6e      	ldr	r2, [pc, #440]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0320 	and.w	r3, r3, #32
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d03c      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d01c      	beq.n	8001c6a <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c30:	4b67      	ldr	r3, [pc, #412]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001c32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c36:	4a66      	ldr	r2, [pc, #408]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c40:	f7ff f988 	bl	8000f54 <HAL_GetTick>
 8001c44:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c48:	f7ff f984 	bl	8000f54 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e110      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c5a:	4b5d      	ldr	r3, [pc, #372]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001c5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0ef      	beq.n	8001c48 <HAL_RCC_OscConfig+0x68c>
 8001c68:	e01b      	b.n	8001ca2 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c6a:	4b59      	ldr	r3, [pc, #356]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001c6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c70:	4a57      	ldr	r2, [pc, #348]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001c72:	f023 0301 	bic.w	r3, r3, #1
 8001c76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7a:	f7ff f96b 	bl	8000f54 <HAL_GetTick>
 8001c7e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c82:	f7ff f967 	bl	8000f54 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e0f3      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c94:	4b4e      	ldr	r3, [pc, #312]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1ef      	bne.n	8001c82 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 80e7 	beq.w	8001e7a <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	f040 80b7 	bne.w	8001e24 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cb6:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0203 	and.w	r2, r3, #3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d124      	bne.n	8001d14 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d11b      	bne.n	8001d14 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d113      	bne.n	8001d14 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf6:	085b      	lsrs	r3, r3, #1
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d109      	bne.n	8001d14 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	085b      	lsrs	r3, r3, #1
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d061      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	2b0c      	cmp	r3, #12
 8001d18:	d056      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d1a:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a2c      	ldr	r2, [pc, #176]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001d20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d24:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d26:	f7ff f915 	bl	8000f54 <HAL_GetTick>
 8001d2a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2e:	f7ff f911 	bl	8000f54 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e09d      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d40:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1f0      	bne.n	8001d2e <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d4c:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <HAL_RCC_OscConfig+0x818>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d5c:	3a01      	subs	r2, #1
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	4311      	orrs	r1, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d66:	0212      	lsls	r2, r2, #8
 8001d68:	4311      	orrs	r1, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d6e:	0852      	lsrs	r2, r2, #1
 8001d70:	3a01      	subs	r2, #1
 8001d72:	0552      	lsls	r2, r2, #21
 8001d74:	4311      	orrs	r1, r2
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d7a:	0852      	lsrs	r2, r2, #1
 8001d7c:	3a01      	subs	r2, #1
 8001d7e:	0652      	lsls	r2, r2, #25
 8001d80:	430a      	orrs	r2, r1
 8001d82:	4913      	ldr	r1, [pc, #76]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a10      	ldr	r2, [pc, #64]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	4a0d      	ldr	r2, [pc, #52]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001da0:	f7ff f8d8 	bl	8000f54 <HAL_GetTick>
 8001da4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da8:	f7ff f8d4 	bl	8000f54 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e060      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dba:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <HAL_RCC_OscConfig+0x814>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dc6:	e058      	b.n	8001e7a <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e057      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
 8001dcc:	40007000 	.word	0x40007000
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <HAL_RCC_OscConfig+0x8c8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d14a      	bne.n	8001e7a <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_RCC_OscConfig+0x8c8>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a26      	ldr	r2, [pc, #152]	; (8001e84 <HAL_RCC_OscConfig+0x8c8>)
 8001dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001df0:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <HAL_RCC_OscConfig+0x8c8>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4a23      	ldr	r2, [pc, #140]	; (8001e84 <HAL_RCC_OscConfig+0x8c8>)
 8001df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dfc:	f7ff f8aa 	bl	8000f54 <HAL_GetTick>
 8001e00:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e04:	f7ff f8a6 	bl	8000f54 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e032      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e16:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <HAL_RCC_OscConfig+0x8c8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x848>
 8001e22:	e02a      	b.n	8001e7a <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	2b0c      	cmp	r3, #12
 8001e28:	d025      	beq.n	8001e76 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2a:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <HAL_RCC_OscConfig+0x8c8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a15      	ldr	r2, [pc, #84]	; (8001e84 <HAL_RCC_OscConfig+0x8c8>)
 8001e30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e34:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e36:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <HAL_RCC_OscConfig+0x8c8>)
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	4a12      	ldr	r2, [pc, #72]	; (8001e84 <HAL_RCC_OscConfig+0x8c8>)
 8001e3c:	f023 0303 	bic.w	r3, r3, #3
 8001e40:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <HAL_RCC_OscConfig+0x8c8>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	4a0f      	ldr	r2, [pc, #60]	; (8001e84 <HAL_RCC_OscConfig+0x8c8>)
 8001e48:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e4c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7ff f881 	bl	8000f54 <HAL_GetTick>
 8001e52:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e56:	f7ff f87d 	bl	8000f54 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e009      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_RCC_OscConfig+0x8c8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f0      	bne.n	8001e56 <HAL_RCC_OscConfig+0x89a>
 8001e74:	e001      	b.n	8001e7a <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3728      	adds	r7, #40	; 0x28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000

08001e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0c8      	b.n	800202e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b66      	ldr	r3, [pc, #408]	; (8002038 <HAL_RCC_ClockConfig+0x1b0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d910      	bls.n	8001ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b63      	ldr	r3, [pc, #396]	; (8002038 <HAL_RCC_ClockConfig+0x1b0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 0207 	bic.w	r2, r3, #7
 8001eb2:	4961      	ldr	r1, [pc, #388]	; (8002038 <HAL_RCC_ClockConfig+0x1b0>)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b5f      	ldr	r3, [pc, #380]	; (8002038 <HAL_RCC_ClockConfig+0x1b0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0b0      	b.n	800202e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d04c      	beq.n	8001f72 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d107      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee0:	4b56      	ldr	r3, [pc, #344]	; (800203c <HAL_RCC_ClockConfig+0x1b4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d121      	bne.n	8001f30 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e09e      	b.n	800202e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d107      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ef8:	4b50      	ldr	r3, [pc, #320]	; (800203c <HAL_RCC_ClockConfig+0x1b4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d115      	bne.n	8001f30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e092      	b.n	800202e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d107      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f10:	4b4a      	ldr	r3, [pc, #296]	; (800203c <HAL_RCC_ClockConfig+0x1b4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d109      	bne.n	8001f30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e086      	b.n	800202e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f20:	4b46      	ldr	r3, [pc, #280]	; (800203c <HAL_RCC_ClockConfig+0x1b4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e07e      	b.n	800202e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f30:	4b42      	ldr	r3, [pc, #264]	; (800203c <HAL_RCC_ClockConfig+0x1b4>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f023 0203 	bic.w	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	493f      	ldr	r1, [pc, #252]	; (800203c <HAL_RCC_ClockConfig+0x1b4>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f42:	f7ff f807 	bl	8000f54 <HAL_GetTick>
 8001f46:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4a:	f7ff f803 	bl	8000f54 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e066      	b.n	800202e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f60:	4b36      	ldr	r3, [pc, #216]	; (800203c <HAL_RCC_ClockConfig+0x1b4>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 020c 	and.w	r2, r3, #12
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d1eb      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d008      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f7e:	4b2f      	ldr	r3, [pc, #188]	; (800203c <HAL_RCC_ClockConfig+0x1b4>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	492c      	ldr	r1, [pc, #176]	; (800203c <HAL_RCC_ClockConfig+0x1b4>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f90:	4b29      	ldr	r3, [pc, #164]	; (8002038 <HAL_RCC_ClockConfig+0x1b0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d210      	bcs.n	8001fc0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b26      	ldr	r3, [pc, #152]	; (8002038 <HAL_RCC_ClockConfig+0x1b0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 0207 	bic.w	r2, r3, #7
 8001fa6:	4924      	ldr	r1, [pc, #144]	; (8002038 <HAL_RCC_ClockConfig+0x1b0>)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	4b22      	ldr	r3, [pc, #136]	; (8002038 <HAL_RCC_ClockConfig+0x1b0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e036      	b.n	800202e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	; (800203c <HAL_RCC_ClockConfig+0x1b4>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4918      	ldr	r1, [pc, #96]	; (800203c <HAL_RCC_ClockConfig+0x1b4>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d009      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fea:	4b14      	ldr	r3, [pc, #80]	; (800203c <HAL_RCC_ClockConfig+0x1b4>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4910      	ldr	r1, [pc, #64]	; (800203c <HAL_RCC_ClockConfig+0x1b4>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ffe:	f000 f825 	bl	800204c <HAL_RCC_GetSysClockFreq>
 8002002:	4601      	mov	r1, r0
 8002004:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_RCC_ClockConfig+0x1b4>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	4a0c      	ldr	r2, [pc, #48]	; (8002040 <HAL_RCC_ClockConfig+0x1b8>)
 8002010:	5cd3      	ldrb	r3, [r2, r3]
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	fa21 f303 	lsr.w	r3, r1, r3
 800201a:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <HAL_RCC_ClockConfig+0x1bc>)
 800201c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe ff46 	bl	8000eb4 <HAL_InitTick>
 8002028:	4603      	mov	r3, r0
 800202a:	72fb      	strb	r3, [r7, #11]

  return status;
 800202c:	7afb      	ldrb	r3, [r7, #11]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40022000 	.word	0x40022000
 800203c:	40021000 	.word	0x40021000
 8002040:	0800543c 	.word	0x0800543c
 8002044:	20000000 	.word	0x20000000
 8002048:	20000004 	.word	0x20000004

0800204c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800204c:	b480      	push	{r7}
 800204e:	b089      	sub	sp, #36	; 0x24
 8002050:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800205a:	4b3d      	ldr	r3, [pc, #244]	; (8002150 <HAL_RCC_GetSysClockFreq+0x104>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002064:	4b3a      	ldr	r3, [pc, #232]	; (8002150 <HAL_RCC_GetSysClockFreq+0x104>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_RCC_GetSysClockFreq+0x34>
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	2b0c      	cmp	r3, #12
 8002078:	d121      	bne.n	80020be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d11e      	bne.n	80020be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002080:	4b33      	ldr	r3, [pc, #204]	; (8002150 <HAL_RCC_GetSysClockFreq+0x104>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0308 	and.w	r3, r3, #8
 8002088:	2b00      	cmp	r3, #0
 800208a:	d107      	bne.n	800209c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800208c:	4b30      	ldr	r3, [pc, #192]	; (8002150 <HAL_RCC_GetSysClockFreq+0x104>)
 800208e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	61fb      	str	r3, [r7, #28]
 800209a:	e005      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800209c:	4b2c      	ldr	r3, [pc, #176]	; (8002150 <HAL_RCC_GetSysClockFreq+0x104>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020a8:	4a2a      	ldr	r2, [pc, #168]	; (8002154 <HAL_RCC_GetSysClockFreq+0x108>)
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10d      	bne.n	80020d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020bc:	e00a      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d102      	bne.n	80020ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020c4:	4b24      	ldr	r3, [pc, #144]	; (8002158 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020c6:	61bb      	str	r3, [r7, #24]
 80020c8:	e004      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020d0:	4b22      	ldr	r3, [pc, #136]	; (800215c <HAL_RCC_GetSysClockFreq+0x110>)
 80020d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	2b0c      	cmp	r3, #12
 80020d8:	d133      	bne.n	8002142 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020da:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <HAL_RCC_GetSysClockFreq+0x104>)
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d002      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0xa4>
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d003      	beq.n	80020f6 <HAL_RCC_GetSysClockFreq+0xaa>
 80020ee:	e005      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020f2:	617b      	str	r3, [r7, #20]
      break;
 80020f4:	e005      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <HAL_RCC_GetSysClockFreq+0x110>)
 80020f8:	617b      	str	r3, [r7, #20]
      break;
 80020fa:	e002      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	617b      	str	r3, [r7, #20]
      break;
 8002100:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002102:	4b13      	ldr	r3, [pc, #76]	; (8002150 <HAL_RCC_GetSysClockFreq+0x104>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	091b      	lsrs	r3, r3, #4
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	3301      	adds	r3, #1
 800210e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <HAL_RCC_GetSysClockFreq+0x104>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	0a1b      	lsrs	r3, r3, #8
 8002116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	fb02 f203 	mul.w	r2, r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	fbb2 f3f3 	udiv	r3, r2, r3
 8002126:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_RCC_GetSysClockFreq+0x104>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	0e5b      	lsrs	r3, r3, #25
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	3301      	adds	r3, #1
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002140:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002142:	69bb      	ldr	r3, [r7, #24]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3724      	adds	r7, #36	; 0x24
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40021000 	.word	0x40021000
 8002154:	08005454 	.word	0x08005454
 8002158:	00f42400 	.word	0x00f42400
 800215c:	007a1200 	.word	0x007a1200

08002160 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002164:	4b03      	ldr	r3, [pc, #12]	; (8002174 <HAL_RCC_GetHCLKFreq+0x14>)
 8002166:	681b      	ldr	r3, [r3, #0]
}
 8002168:	4618      	mov	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000000 	.word	0x20000000

08002178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800217c:	f7ff fff0 	bl	8002160 <HAL_RCC_GetHCLKFreq>
 8002180:	4601      	mov	r1, r0
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	0a1b      	lsrs	r3, r3, #8
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800218e:	5cd3      	ldrb	r3, [r2, r3]
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002198:	4618      	mov	r0, r3
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40021000 	.word	0x40021000
 80021a0:	0800544c 	.word	0x0800544c

080021a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021a8:	f7ff ffda 	bl	8002160 <HAL_RCC_GetHCLKFreq>
 80021ac:	4601      	mov	r1, r0
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	0adb      	lsrs	r3, r3, #11
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	4a04      	ldr	r2, [pc, #16]	; (80021cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80021ba:	5cd3      	ldrb	r3, [r2, r3]
 80021bc:	f003 031f 	and.w	r3, r3, #31
 80021c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40021000 	.word	0x40021000
 80021cc:	0800544c 	.word	0x0800544c

080021d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021d8:	2300      	movs	r3, #0
 80021da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021dc:	4b2a      	ldr	r3, [pc, #168]	; (8002288 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021e8:	f7ff f984 	bl	80014f4 <HAL_PWREx_GetVoltageRange>
 80021ec:	6178      	str	r0, [r7, #20]
 80021ee:	e014      	b.n	800221a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021f0:	4b25      	ldr	r3, [pc, #148]	; (8002288 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f4:	4a24      	ldr	r2, [pc, #144]	; (8002288 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fa:	6593      	str	r3, [r2, #88]	; 0x58
 80021fc:	4b22      	ldr	r3, [pc, #136]	; (8002288 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002208:	f7ff f974 	bl	80014f4 <HAL_PWREx_GetVoltageRange>
 800220c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800220e:	4b1e      	ldr	r3, [pc, #120]	; (8002288 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002212:	4a1d      	ldr	r2, [pc, #116]	; (8002288 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002218:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002220:	d10b      	bne.n	800223a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b80      	cmp	r3, #128	; 0x80
 8002226:	d919      	bls.n	800225c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2ba0      	cmp	r3, #160	; 0xa0
 800222c:	d902      	bls.n	8002234 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800222e:	2302      	movs	r3, #2
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	e013      	b.n	800225c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002234:	2301      	movs	r3, #1
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	e010      	b.n	800225c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b80      	cmp	r3, #128	; 0x80
 800223e:	d902      	bls.n	8002246 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002240:	2303      	movs	r3, #3
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	e00a      	b.n	800225c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b80      	cmp	r3, #128	; 0x80
 800224a:	d102      	bne.n	8002252 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800224c:	2302      	movs	r3, #2
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	e004      	b.n	800225c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b70      	cmp	r3, #112	; 0x70
 8002256:	d101      	bne.n	800225c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002258:	2301      	movs	r3, #1
 800225a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800225c:	4b0b      	ldr	r3, [pc, #44]	; (800228c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f023 0207 	bic.w	r2, r3, #7
 8002264:	4909      	ldr	r1, [pc, #36]	; (800228c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800226c:	4b07      	ldr	r3, [pc, #28]	; (800228c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	429a      	cmp	r2, r3
 8002278:	d001      	beq.n	800227e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000
 800228c:	40022000 	.word	0x40022000

08002290 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002298:	2300      	movs	r3, #0
 800229a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800229c:	2300      	movs	r3, #0
 800229e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 809e 	beq.w	80023ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ae:	2300      	movs	r3, #0
 80022b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022b2:	4b46      	ldr	r3, [pc, #280]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80022c2:	2300      	movs	r3, #0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00d      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c8:	4b40      	ldr	r3, [pc, #256]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022cc:	4a3f      	ldr	r2, [pc, #252]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80022ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d2:	6593      	str	r3, [r2, #88]	; 0x58
 80022d4:	4b3d      	ldr	r3, [pc, #244]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80022d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e0:	2301      	movs	r3, #1
 80022e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022e4:	4b3a      	ldr	r3, [pc, #232]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a39      	ldr	r2, [pc, #228]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80022ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022f0:	f7fe fe30 	bl	8000f54 <HAL_GetTick>
 80022f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022f6:	e009      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f8:	f7fe fe2c 	bl	8000f54 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d902      	bls.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	74fb      	strb	r3, [r7, #19]
        break;
 800230a:	e005      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800230c:	4b30      	ldr	r3, [pc, #192]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0ef      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002318:	7cfb      	ldrb	r3, [r7, #19]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d15a      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800231e:	4b2b      	ldr	r3, [pc, #172]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002328:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d01e      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	429a      	cmp	r2, r3
 8002338:	d019      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800233a:	4b24      	ldr	r3, [pc, #144]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800233c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002344:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002346:	4b21      	ldr	r3, [pc, #132]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234c:	4a1f      	ldr	r2, [pc, #124]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800234e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002356:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235c:	4a1b      	ldr	r2, [pc, #108]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800235e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002362:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002366:	4a19      	ldr	r2, [pc, #100]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b00      	cmp	r3, #0
 8002376:	d016      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002378:	f7fe fdec 	bl	8000f54 <HAL_GetTick>
 800237c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800237e:	e00b      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002380:	f7fe fde8 	bl	8000f54 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	; 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d902      	bls.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	74fb      	strb	r3, [r7, #19]
            break;
 8002396:	e006      	b.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0ec      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80023a6:	7cfb      	ldrb	r3, [r7, #19]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10b      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023ac:	4b07      	ldr	r3, [pc, #28]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	4904      	ldr	r1, [pc, #16]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023c2:	e009      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023c4:	7cfb      	ldrb	r3, [r7, #19]
 80023c6:	74bb      	strb	r3, [r7, #18]
 80023c8:	e006      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023d4:	7cfb      	ldrb	r3, [r7, #19]
 80023d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023d8:	7c7b      	ldrb	r3, [r7, #17]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d105      	bne.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023de:	4b6e      	ldr	r3, [pc, #440]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	4a6d      	ldr	r2, [pc, #436]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00a      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023f6:	4b68      	ldr	r3, [pc, #416]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fc:	f023 0203 	bic.w	r2, r3, #3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	4964      	ldr	r1, [pc, #400]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002406:	4313      	orrs	r3, r2
 8002408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00a      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002418:	4b5f      	ldr	r3, [pc, #380]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241e:	f023 020c 	bic.w	r2, r3, #12
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	495c      	ldr	r1, [pc, #368]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002428:	4313      	orrs	r3, r2
 800242a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00a      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800243a:	4b57      	ldr	r3, [pc, #348]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800243c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002440:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4953      	ldr	r1, [pc, #332]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800244a:	4313      	orrs	r3, r2
 800244c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0320 	and.w	r3, r3, #32
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00a      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800245c:	4b4e      	ldr	r3, [pc, #312]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002462:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	494b      	ldr	r1, [pc, #300]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00a      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800247e:	4b46      	ldr	r3, [pc, #280]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002484:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4942      	ldr	r1, [pc, #264]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024a0:	4b3d      	ldr	r3, [pc, #244]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	493a      	ldr	r1, [pc, #232]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00a      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024c2:	4b35      	ldr	r3, [pc, #212]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	4931      	ldr	r1, [pc, #196]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00a      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024e4:	4b2c      	ldr	r3, [pc, #176]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	4929      	ldr	r1, [pc, #164]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00a      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002506:	4b24      	ldr	r3, [pc, #144]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	4920      	ldr	r1, [pc, #128]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d015      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002528:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	4918      	ldr	r1, [pc, #96]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002542:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002546:	d105      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002548:	4b13      	ldr	r3, [pc, #76]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4a12      	ldr	r2, [pc, #72]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800254e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002552:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d015      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002560:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002566:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256e:	490a      	ldr	r1, [pc, #40]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800257e:	d105      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4a04      	ldr	r2, [pc, #16]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800258a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800258c:	7cbb      	ldrb	r3, [r7, #18]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000

0800259c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e049      	b.n	8002642 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d106      	bne.n	80025c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7fe fad4 	bl	8000b70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3304      	adds	r3, #4
 80025d8:	4619      	mov	r1, r3
 80025da:	4610      	mov	r0, r2
 80025dc:	f000 fea2 	bl	8003324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e049      	b.n	80026f0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d106      	bne.n	8002676 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f841 	bl	80026f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2202      	movs	r2, #2
 800267a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3304      	adds	r3, #4
 8002686:	4619      	mov	r1, r3
 8002688:	4610      	mov	r0, r2
 800268a:	f000 fe4b 	bl	8003324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d109      	bne.n	8002730 <HAL_TIM_PWM_Start+0x24>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b01      	cmp	r3, #1
 8002726:	bf14      	ite	ne
 8002728:	2301      	movne	r3, #1
 800272a:	2300      	moveq	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	e03c      	b.n	80027aa <HAL_TIM_PWM_Start+0x9e>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2b04      	cmp	r3, #4
 8002734:	d109      	bne.n	800274a <HAL_TIM_PWM_Start+0x3e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b01      	cmp	r3, #1
 8002740:	bf14      	ite	ne
 8002742:	2301      	movne	r3, #1
 8002744:	2300      	moveq	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	e02f      	b.n	80027aa <HAL_TIM_PWM_Start+0x9e>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b08      	cmp	r3, #8
 800274e:	d109      	bne.n	8002764 <HAL_TIM_PWM_Start+0x58>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b01      	cmp	r3, #1
 800275a:	bf14      	ite	ne
 800275c:	2301      	movne	r3, #1
 800275e:	2300      	moveq	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	e022      	b.n	80027aa <HAL_TIM_PWM_Start+0x9e>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2b0c      	cmp	r3, #12
 8002768:	d109      	bne.n	800277e <HAL_TIM_PWM_Start+0x72>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b01      	cmp	r3, #1
 8002774:	bf14      	ite	ne
 8002776:	2301      	movne	r3, #1
 8002778:	2300      	moveq	r3, #0
 800277a:	b2db      	uxtb	r3, r3
 800277c:	e015      	b.n	80027aa <HAL_TIM_PWM_Start+0x9e>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b10      	cmp	r3, #16
 8002782:	d109      	bne.n	8002798 <HAL_TIM_PWM_Start+0x8c>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b01      	cmp	r3, #1
 800278e:	bf14      	ite	ne
 8002790:	2301      	movne	r3, #1
 8002792:	2300      	moveq	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	e008      	b.n	80027aa <HAL_TIM_PWM_Start+0x9e>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	bf14      	ite	ne
 80027a4:	2301      	movne	r3, #1
 80027a6:	2300      	moveq	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e07e      	b.n	80028b0 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d104      	bne.n	80027c2 <HAL_TIM_PWM_Start+0xb6>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2202      	movs	r2, #2
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027c0:	e023      	b.n	800280a <HAL_TIM_PWM_Start+0xfe>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d104      	bne.n	80027d2 <HAL_TIM_PWM_Start+0xc6>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027d0:	e01b      	b.n	800280a <HAL_TIM_PWM_Start+0xfe>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d104      	bne.n	80027e2 <HAL_TIM_PWM_Start+0xd6>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027e0:	e013      	b.n	800280a <HAL_TIM_PWM_Start+0xfe>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b0c      	cmp	r3, #12
 80027e6:	d104      	bne.n	80027f2 <HAL_TIM_PWM_Start+0xe6>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027f0:	e00b      	b.n	800280a <HAL_TIM_PWM_Start+0xfe>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b10      	cmp	r3, #16
 80027f6:	d104      	bne.n	8002802 <HAL_TIM_PWM_Start+0xf6>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002800:	e003      	b.n	800280a <HAL_TIM_PWM_Start+0xfe>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2202      	movs	r2, #2
 8002806:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2201      	movs	r2, #1
 8002810:	6839      	ldr	r1, [r7, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f001 fa0e 	bl	8003c34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a26      	ldr	r2, [pc, #152]	; (80028b8 <HAL_TIM_PWM_Start+0x1ac>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d009      	beq.n	8002836 <HAL_TIM_PWM_Start+0x12a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a25      	ldr	r2, [pc, #148]	; (80028bc <HAL_TIM_PWM_Start+0x1b0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d004      	beq.n	8002836 <HAL_TIM_PWM_Start+0x12a>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a23      	ldr	r2, [pc, #140]	; (80028c0 <HAL_TIM_PWM_Start+0x1b4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d101      	bne.n	800283a <HAL_TIM_PWM_Start+0x12e>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <HAL_TIM_PWM_Start+0x130>
 800283a:	2300      	movs	r3, #0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d007      	beq.n	8002850 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800284e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a18      	ldr	r2, [pc, #96]	; (80028b8 <HAL_TIM_PWM_Start+0x1ac>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d009      	beq.n	800286e <HAL_TIM_PWM_Start+0x162>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002862:	d004      	beq.n	800286e <HAL_TIM_PWM_Start+0x162>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a14      	ldr	r2, [pc, #80]	; (80028bc <HAL_TIM_PWM_Start+0x1b0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d115      	bne.n	800289a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <HAL_TIM_PWM_Start+0x1b8>)
 8002876:	4013      	ands	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2b06      	cmp	r3, #6
 800287e:	d015      	beq.n	80028ac <HAL_TIM_PWM_Start+0x1a0>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002886:	d011      	beq.n	80028ac <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002898:	e008      	b.n	80028ac <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f042 0201 	orr.w	r2, r2, #1
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	e000      	b.n	80028ae <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40012c00 	.word	0x40012c00
 80028bc:	40014000 	.word	0x40014000
 80028c0:	40014400 	.word	0x40014400
 80028c4:	00010007 	.word	0x00010007

080028c8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e049      	b.n	800296e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f841 	bl	8002976 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3304      	adds	r3, #4
 8002904:	4619      	mov	r1, r3
 8002906:	4610      	mov	r0, r2
 8002908:	f000 fd0c 	bl	8003324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
	...

0800298c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d104      	bne.n	80029a6 <HAL_TIM_IC_Start_IT+0x1a>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	e023      	b.n	80029ee <HAL_TIM_IC_Start_IT+0x62>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d104      	bne.n	80029b6 <HAL_TIM_IC_Start_IT+0x2a>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	e01b      	b.n	80029ee <HAL_TIM_IC_Start_IT+0x62>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d104      	bne.n	80029c6 <HAL_TIM_IC_Start_IT+0x3a>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	e013      	b.n	80029ee <HAL_TIM_IC_Start_IT+0x62>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b0c      	cmp	r3, #12
 80029ca:	d104      	bne.n	80029d6 <HAL_TIM_IC_Start_IT+0x4a>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	e00b      	b.n	80029ee <HAL_TIM_IC_Start_IT+0x62>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d104      	bne.n	80029e6 <HAL_TIM_IC_Start_IT+0x5a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	e003      	b.n	80029ee <HAL_TIM_IC_Start_IT+0x62>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d104      	bne.n	8002a00 <HAL_TIM_IC_Start_IT+0x74>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	e013      	b.n	8002a28 <HAL_TIM_IC_Start_IT+0x9c>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d104      	bne.n	8002a10 <HAL_TIM_IC_Start_IT+0x84>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	e00b      	b.n	8002a28 <HAL_TIM_IC_Start_IT+0x9c>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d104      	bne.n	8002a20 <HAL_TIM_IC_Start_IT+0x94>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	e003      	b.n	8002a28 <HAL_TIM_IC_Start_IT+0x9c>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d102      	bne.n	8002a36 <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a30:	7bbb      	ldrb	r3, [r7, #14]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d001      	beq.n	8002a3a <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e0c4      	b.n	8002bc4 <HAL_TIM_IC_Start_IT+0x238>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d104      	bne.n	8002a4a <HAL_TIM_IC_Start_IT+0xbe>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a48:	e023      	b.n	8002a92 <HAL_TIM_IC_Start_IT+0x106>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d104      	bne.n	8002a5a <HAL_TIM_IC_Start_IT+0xce>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a58:	e01b      	b.n	8002a92 <HAL_TIM_IC_Start_IT+0x106>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d104      	bne.n	8002a6a <HAL_TIM_IC_Start_IT+0xde>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a68:	e013      	b.n	8002a92 <HAL_TIM_IC_Start_IT+0x106>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b0c      	cmp	r3, #12
 8002a6e:	d104      	bne.n	8002a7a <HAL_TIM_IC_Start_IT+0xee>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a78:	e00b      	b.n	8002a92 <HAL_TIM_IC_Start_IT+0x106>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b10      	cmp	r3, #16
 8002a7e:	d104      	bne.n	8002a8a <HAL_TIM_IC_Start_IT+0xfe>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a88:	e003      	b.n	8002a92 <HAL_TIM_IC_Start_IT+0x106>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d104      	bne.n	8002aa2 <HAL_TIM_IC_Start_IT+0x116>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa0:	e013      	b.n	8002aca <HAL_TIM_IC_Start_IT+0x13e>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d104      	bne.n	8002ab2 <HAL_TIM_IC_Start_IT+0x126>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ab0:	e00b      	b.n	8002aca <HAL_TIM_IC_Start_IT+0x13e>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d104      	bne.n	8002ac2 <HAL_TIM_IC_Start_IT+0x136>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ac0:	e003      	b.n	8002aca <HAL_TIM_IC_Start_IT+0x13e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b0c      	cmp	r3, #12
 8002ace:	d841      	bhi.n	8002b54 <HAL_TIM_IC_Start_IT+0x1c8>
 8002ad0:	a201      	add	r2, pc, #4	; (adr r2, 8002ad8 <HAL_TIM_IC_Start_IT+0x14c>)
 8002ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad6:	bf00      	nop
 8002ad8:	08002b0d 	.word	0x08002b0d
 8002adc:	08002b55 	.word	0x08002b55
 8002ae0:	08002b55 	.word	0x08002b55
 8002ae4:	08002b55 	.word	0x08002b55
 8002ae8:	08002b1f 	.word	0x08002b1f
 8002aec:	08002b55 	.word	0x08002b55
 8002af0:	08002b55 	.word	0x08002b55
 8002af4:	08002b55 	.word	0x08002b55
 8002af8:	08002b31 	.word	0x08002b31
 8002afc:	08002b55 	.word	0x08002b55
 8002b00:	08002b55 	.word	0x08002b55
 8002b04:	08002b55 	.word	0x08002b55
 8002b08:	08002b43 	.word	0x08002b43
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0202 	orr.w	r2, r2, #2
 8002b1a:	60da      	str	r2, [r3, #12]
      break;
 8002b1c:	e01b      	b.n	8002b56 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0204 	orr.w	r2, r2, #4
 8002b2c:	60da      	str	r2, [r3, #12]
      break;
 8002b2e:	e012      	b.n	8002b56 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0208 	orr.w	r2, r2, #8
 8002b3e:	60da      	str	r2, [r3, #12]
      break;
 8002b40:	e009      	b.n	8002b56 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f042 0210 	orr.w	r2, r2, #16
 8002b50:	60da      	str	r2, [r3, #12]
      break;
 8002b52:	e000      	b.n	8002b56 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8002b54:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	6839      	ldr	r1, [r7, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f001 f868 	bl	8003c34 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a18      	ldr	r2, [pc, #96]	; (8002bcc <HAL_TIM_IC_Start_IT+0x240>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d009      	beq.n	8002b82 <HAL_TIM_IC_Start_IT+0x1f6>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b76:	d004      	beq.n	8002b82 <HAL_TIM_IC_Start_IT+0x1f6>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a14      	ldr	r2, [pc, #80]	; (8002bd0 <HAL_TIM_IC_Start_IT+0x244>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d115      	bne.n	8002bae <HAL_TIM_IC_Start_IT+0x222>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <HAL_TIM_IC_Start_IT+0x248>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2b06      	cmp	r3, #6
 8002b92:	d015      	beq.n	8002bc0 <HAL_TIM_IC_Start_IT+0x234>
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b9a:	d011      	beq.n	8002bc0 <HAL_TIM_IC_Start_IT+0x234>
    {
      __HAL_TIM_ENABLE(htim);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bac:	e008      	b.n	8002bc0 <HAL_TIM_IC_Start_IT+0x234>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0201 	orr.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	e000      	b.n	8002bc2 <HAL_TIM_IC_Start_IT+0x236>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40012c00 	.word	0x40012c00
 8002bd0:	40014000 	.word	0x40014000
 8002bd4:	00010007 	.word	0x00010007

08002bd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d122      	bne.n	8002c34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d11b      	bne.n	8002c34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f06f 0202 	mvn.w	r2, #2
 8002c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fd fc8c 	bl	8000538 <HAL_TIM_IC_CaptureCallback>
 8002c20:	e005      	b.n	8002c2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fb5f 	bl	80032e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 fb66 	bl	80032fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d122      	bne.n	8002c88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	d11b      	bne.n	8002c88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f06f 0204 	mvn.w	r2, #4
 8002c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fd fc62 	bl	8000538 <HAL_TIM_IC_CaptureCallback>
 8002c74:	e005      	b.n	8002c82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 fb35 	bl	80032e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 fb3c 	bl	80032fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d122      	bne.n	8002cdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f003 0308 	and.w	r3, r3, #8
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d11b      	bne.n	8002cdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f06f 0208 	mvn.w	r2, #8
 8002cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2204      	movs	r2, #4
 8002cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fd fc38 	bl	8000538 <HAL_TIM_IC_CaptureCallback>
 8002cc8:	e005      	b.n	8002cd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fb0b 	bl	80032e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 fb12 	bl	80032fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	f003 0310 	and.w	r3, r3, #16
 8002ce6:	2b10      	cmp	r3, #16
 8002ce8:	d122      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f003 0310 	and.w	r3, r3, #16
 8002cf4:	2b10      	cmp	r3, #16
 8002cf6:	d11b      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 0210 	mvn.w	r2, #16
 8002d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2208      	movs	r2, #8
 8002d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fd fc0e 	bl	8000538 <HAL_TIM_IC_CaptureCallback>
 8002d1c:	e005      	b.n	8002d2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fae1 	bl	80032e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 fae8 	bl	80032fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d10e      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d107      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0201 	mvn.w	r2, #1
 8002d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fabb 	bl	80032d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d66:	2b80      	cmp	r3, #128	; 0x80
 8002d68:	d10e      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d74:	2b80      	cmp	r3, #128	; 0x80
 8002d76:	d107      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f001 f864 	bl	8003e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d96:	d10e      	bne.n	8002db6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da2:	2b80      	cmp	r3, #128	; 0x80
 8002da4:	d107      	bne.n	8002db6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f001 f857 	bl	8003e64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc0:	2b40      	cmp	r3, #64	; 0x40
 8002dc2:	d10e      	bne.n	8002de2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dce:	2b40      	cmp	r3, #64	; 0x40
 8002dd0:	d107      	bne.n	8002de2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fa96 	bl	800330e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f003 0320 	and.w	r3, r3, #32
 8002dec:	2b20      	cmp	r3, #32
 8002dee:	d10e      	bne.n	8002e0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f003 0320 	and.w	r3, r3, #32
 8002dfa:	2b20      	cmp	r3, #32
 8002dfc:	d107      	bne.n	8002e0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f06f 0220 	mvn.w	r2, #32
 8002e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f001 f817 	bl	8003e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b084      	sub	sp, #16
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e082      	b.n	8002f36 <HAL_TIM_IC_ConfigChannel+0x120>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d11b      	bne.n	8002e76 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	6819      	ldr	r1, [r3, #0]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f000 fd4b 	bl	80038e8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	699a      	ldr	r2, [r3, #24]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 020c 	bic.w	r2, r2, #12
 8002e60:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6999      	ldr	r1, [r3, #24]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	619a      	str	r2, [r3, #24]
 8002e74:	e05a      	b.n	8002f2c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d11c      	bne.n	8002eb6 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	6819      	ldr	r1, [r3, #0]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f000 fdb1 	bl	80039f2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002e9e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6999      	ldr	r1, [r3, #24]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	021a      	lsls	r2, r3, #8
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	619a      	str	r2, [r3, #24]
 8002eb4:	e03a      	b.n	8002f2c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d11b      	bne.n	8002ef4 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	6819      	ldr	r1, [r3, #0]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f000 fdfe 	bl	8003acc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	69da      	ldr	r2, [r3, #28]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 020c 	bic.w	r2, r2, #12
 8002ede:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	69d9      	ldr	r1, [r3, #28]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	61da      	str	r2, [r3, #28]
 8002ef2:	e01b      	b.n	8002f2c <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	6819      	ldr	r1, [r3, #0]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f000 fe1e 	bl	8003b44 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	69da      	ldr	r2, [r3, #28]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002f16:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	69d9      	ldr	r1, [r3, #28]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	021a      	lsls	r2, r3, #8
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e0fd      	b.n	8003156 <HAL_TIM_PWM_ConfigChannel+0x216>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b14      	cmp	r3, #20
 8002f66:	f200 80f0 	bhi.w	800314a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8002f6a:	a201      	add	r2, pc, #4	; (adr r2, 8002f70 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f70:	08002fc5 	.word	0x08002fc5
 8002f74:	0800314b 	.word	0x0800314b
 8002f78:	0800314b 	.word	0x0800314b
 8002f7c:	0800314b 	.word	0x0800314b
 8002f80:	08003005 	.word	0x08003005
 8002f84:	0800314b 	.word	0x0800314b
 8002f88:	0800314b 	.word	0x0800314b
 8002f8c:	0800314b 	.word	0x0800314b
 8002f90:	08003047 	.word	0x08003047
 8002f94:	0800314b 	.word	0x0800314b
 8002f98:	0800314b 	.word	0x0800314b
 8002f9c:	0800314b 	.word	0x0800314b
 8002fa0:	08003087 	.word	0x08003087
 8002fa4:	0800314b 	.word	0x0800314b
 8002fa8:	0800314b 	.word	0x0800314b
 8002fac:	0800314b 	.word	0x0800314b
 8002fb0:	080030c9 	.word	0x080030c9
 8002fb4:	0800314b 	.word	0x0800314b
 8002fb8:	0800314b 	.word	0x0800314b
 8002fbc:	0800314b 	.word	0x0800314b
 8002fc0:	08003109 	.word	0x08003109
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fa0e 	bl	80033ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0208 	orr.w	r2, r2, #8
 8002fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0204 	bic.w	r2, r2, #4
 8002fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6999      	ldr	r1, [r3, #24]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	619a      	str	r2, [r3, #24]
      break;
 8003002:	e0a3      	b.n	800314c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	4618      	mov	r0, r3
 800300c:	f000 fa6a 	bl	80034e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800301e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800302e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6999      	ldr	r1, [r3, #24]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	021a      	lsls	r2, r3, #8
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	619a      	str	r2, [r3, #24]
      break;
 8003044:	e082      	b.n	800314c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fac3 	bl	80035d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f042 0208 	orr.w	r2, r2, #8
 8003060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69da      	ldr	r2, [r3, #28]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0204 	bic.w	r2, r2, #4
 8003070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69d9      	ldr	r1, [r3, #28]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	61da      	str	r2, [r3, #28]
      break;
 8003084:	e062      	b.n	800314c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fb1b 	bl	80036c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69da      	ldr	r2, [r3, #28]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69da      	ldr	r2, [r3, #28]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69d9      	ldr	r1, [r3, #28]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	021a      	lsls	r2, r3, #8
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	61da      	str	r2, [r3, #28]
      break;
 80030c6:	e041      	b.n	800314c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fb58 	bl	8003784 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0208 	orr.w	r2, r2, #8
 80030e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0204 	bic.w	r2, r2, #4
 80030f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	691a      	ldr	r2, [r3, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003106:	e021      	b.n	800314c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fb90 	bl	8003834 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003122:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003132:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	021a      	lsls	r2, r3, #8
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003148:	e000      	b.n	800314c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800314a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop

08003160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_TIM_ConfigClockSource+0x18>
 8003174:	2302      	movs	r3, #2
 8003176:	e0a8      	b.n	80032ca <HAL_TIM_ConfigClockSource+0x16a>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003196:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800319a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b40      	cmp	r3, #64	; 0x40
 80031b2:	d067      	beq.n	8003284 <HAL_TIM_ConfigClockSource+0x124>
 80031b4:	2b40      	cmp	r3, #64	; 0x40
 80031b6:	d80b      	bhi.n	80031d0 <HAL_TIM_ConfigClockSource+0x70>
 80031b8:	2b10      	cmp	r3, #16
 80031ba:	d073      	beq.n	80032a4 <HAL_TIM_ConfigClockSource+0x144>
 80031bc:	2b10      	cmp	r3, #16
 80031be:	d802      	bhi.n	80031c6 <HAL_TIM_ConfigClockSource+0x66>
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d06f      	beq.n	80032a4 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80031c4:	e078      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80031c6:	2b20      	cmp	r3, #32
 80031c8:	d06c      	beq.n	80032a4 <HAL_TIM_ConfigClockSource+0x144>
 80031ca:	2b30      	cmp	r3, #48	; 0x30
 80031cc:	d06a      	beq.n	80032a4 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80031ce:	e073      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80031d0:	2b70      	cmp	r3, #112	; 0x70
 80031d2:	d00d      	beq.n	80031f0 <HAL_TIM_ConfigClockSource+0x90>
 80031d4:	2b70      	cmp	r3, #112	; 0x70
 80031d6:	d804      	bhi.n	80031e2 <HAL_TIM_ConfigClockSource+0x82>
 80031d8:	2b50      	cmp	r3, #80	; 0x50
 80031da:	d033      	beq.n	8003244 <HAL_TIM_ConfigClockSource+0xe4>
 80031dc:	2b60      	cmp	r3, #96	; 0x60
 80031de:	d041      	beq.n	8003264 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80031e0:	e06a      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80031e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e6:	d066      	beq.n	80032b6 <HAL_TIM_ConfigClockSource+0x156>
 80031e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ec:	d017      	beq.n	800321e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80031ee:	e063      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6818      	ldr	r0, [r3, #0]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	6899      	ldr	r1, [r3, #8]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f000 fcf8 	bl	8003bf4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003212:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	609a      	str	r2, [r3, #8]
      break;
 800321c:	e04c      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6899      	ldr	r1, [r3, #8]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f000 fce1 	bl	8003bf4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003240:	609a      	str	r2, [r3, #8]
      break;
 8003242:	e039      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	6859      	ldr	r1, [r3, #4]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	461a      	mov	r2, r3
 8003252:	f000 fb9f 	bl	8003994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2150      	movs	r1, #80	; 0x50
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fcae 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 8003262:	e029      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	6859      	ldr	r1, [r3, #4]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	461a      	mov	r2, r3
 8003272:	f000 fbfb 	bl	8003a6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2160      	movs	r1, #96	; 0x60
 800327c:	4618      	mov	r0, r3
 800327e:	f000 fc9e 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 8003282:	e019      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	6859      	ldr	r1, [r3, #4]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	461a      	mov	r2, r3
 8003292:	f000 fb7f 	bl	8003994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2140      	movs	r1, #64	; 0x40
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fc8e 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 80032a2:	e009      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4619      	mov	r1, r3
 80032ae:	4610      	mov	r0, r2
 80032b0:	f000 fc85 	bl	8003bbe <TIM_ITRx_SetConfig>
        break;
 80032b4:	e000      	b.n	80032b8 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80032b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
	...

08003324 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a2a      	ldr	r2, [pc, #168]	; (80033e0 <TIM_Base_SetConfig+0xbc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d003      	beq.n	8003344 <TIM_Base_SetConfig+0x20>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003342:	d108      	bne.n	8003356 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a21      	ldr	r2, [pc, #132]	; (80033e0 <TIM_Base_SetConfig+0xbc>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00b      	beq.n	8003376 <TIM_Base_SetConfig+0x52>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003364:	d007      	beq.n	8003376 <TIM_Base_SetConfig+0x52>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a1e      	ldr	r2, [pc, #120]	; (80033e4 <TIM_Base_SetConfig+0xc0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d003      	beq.n	8003376 <TIM_Base_SetConfig+0x52>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <TIM_Base_SetConfig+0xc4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d108      	bne.n	8003388 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800337c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4313      	orrs	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a0c      	ldr	r2, [pc, #48]	; (80033e0 <TIM_Base_SetConfig+0xbc>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d007      	beq.n	80033c4 <TIM_Base_SetConfig+0xa0>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a0b      	ldr	r2, [pc, #44]	; (80033e4 <TIM_Base_SetConfig+0xc0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d003      	beq.n	80033c4 <TIM_Base_SetConfig+0xa0>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <TIM_Base_SetConfig+0xc4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d103      	bne.n	80033cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	615a      	str	r2, [r3, #20]
}
 80033d2:	bf00      	nop
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40012c00 	.word	0x40012c00
 80033e4:	40014000 	.word	0x40014000
 80033e8:	40014400 	.word	0x40014400

080033ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	f023 0201 	bic.w	r2, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800341a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0303 	bic.w	r3, r3, #3
 8003426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f023 0302 	bic.w	r3, r3, #2
 8003438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a24      	ldr	r2, [pc, #144]	; (80034d8 <TIM_OC1_SetConfig+0xec>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d007      	beq.n	800345c <TIM_OC1_SetConfig+0x70>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a23      	ldr	r2, [pc, #140]	; (80034dc <TIM_OC1_SetConfig+0xf0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d003      	beq.n	800345c <TIM_OC1_SetConfig+0x70>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a22      	ldr	r2, [pc, #136]	; (80034e0 <TIM_OC1_SetConfig+0xf4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d10c      	bne.n	8003476 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f023 0308 	bic.w	r3, r3, #8
 8003462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	4313      	orrs	r3, r2
 800346c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f023 0304 	bic.w	r3, r3, #4
 8003474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a17      	ldr	r2, [pc, #92]	; (80034d8 <TIM_OC1_SetConfig+0xec>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d007      	beq.n	800348e <TIM_OC1_SetConfig+0xa2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a16      	ldr	r2, [pc, #88]	; (80034dc <TIM_OC1_SetConfig+0xf0>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d003      	beq.n	800348e <TIM_OC1_SetConfig+0xa2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a15      	ldr	r2, [pc, #84]	; (80034e0 <TIM_OC1_SetConfig+0xf4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d111      	bne.n	80034b2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800349c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	621a      	str	r2, [r3, #32]
}
 80034cc:	bf00      	nop
 80034ce:	371c      	adds	r7, #28
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	40012c00 	.word	0x40012c00
 80034dc:	40014000 	.word	0x40014000
 80034e0:	40014400 	.word	0x40014400

080034e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f023 0210 	bic.w	r2, r3, #16
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800351e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4313      	orrs	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f023 0320 	bic.w	r3, r3, #32
 8003532:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	4313      	orrs	r3, r2
 800353e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a22      	ldr	r2, [pc, #136]	; (80035cc <TIM_OC2_SetConfig+0xe8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d10d      	bne.n	8003564 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800354e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4313      	orrs	r3, r2
 800355a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003562:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a19      	ldr	r2, [pc, #100]	; (80035cc <TIM_OC2_SetConfig+0xe8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d007      	beq.n	800357c <TIM_OC2_SetConfig+0x98>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a18      	ldr	r2, [pc, #96]	; (80035d0 <TIM_OC2_SetConfig+0xec>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d003      	beq.n	800357c <TIM_OC2_SetConfig+0x98>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a17      	ldr	r2, [pc, #92]	; (80035d4 <TIM_OC2_SetConfig+0xf0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d113      	bne.n	80035a4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003582:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800358a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	621a      	str	r2, [r3, #32]
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40012c00 	.word	0x40012c00
 80035d0:	40014000 	.word	0x40014000
 80035d4:	40014400 	.word	0x40014400

080035d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0303 	bic.w	r3, r3, #3
 8003612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	021b      	lsls	r3, r3, #8
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a21      	ldr	r2, [pc, #132]	; (80036bc <TIM_OC3_SetConfig+0xe4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d10d      	bne.n	8003656 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003640:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	021b      	lsls	r3, r3, #8
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a18      	ldr	r2, [pc, #96]	; (80036bc <TIM_OC3_SetConfig+0xe4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d007      	beq.n	800366e <TIM_OC3_SetConfig+0x96>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a17      	ldr	r2, [pc, #92]	; (80036c0 <TIM_OC3_SetConfig+0xe8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d003      	beq.n	800366e <TIM_OC3_SetConfig+0x96>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a16      	ldr	r2, [pc, #88]	; (80036c4 <TIM_OC3_SetConfig+0xec>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d113      	bne.n	8003696 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800367c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	621a      	str	r2, [r3, #32]
}
 80036b0:	bf00      	nop
 80036b2:	371c      	adds	r7, #28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	40012c00 	.word	0x40012c00
 80036c0:	40014000 	.word	0x40014000
 80036c4:	40014400 	.word	0x40014400

080036c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	021b      	lsls	r3, r3, #8
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4313      	orrs	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	031b      	lsls	r3, r3, #12
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a14      	ldr	r2, [pc, #80]	; (8003778 <TIM_OC4_SetConfig+0xb0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d007      	beq.n	800373c <TIM_OC4_SetConfig+0x74>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a13      	ldr	r2, [pc, #76]	; (800377c <TIM_OC4_SetConfig+0xb4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d003      	beq.n	800373c <TIM_OC4_SetConfig+0x74>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a12      	ldr	r2, [pc, #72]	; (8003780 <TIM_OC4_SetConfig+0xb8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d109      	bne.n	8003750 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003742:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	019b      	lsls	r3, r3, #6
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	621a      	str	r2, [r3, #32]
}
 800376a:	bf00      	nop
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40012c00 	.word	0x40012c00
 800377c:	40014000 	.word	0x40014000
 8003780:	40014400 	.word	0x40014400

08003784 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80037c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	041b      	lsls	r3, r3, #16
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a13      	ldr	r2, [pc, #76]	; (8003828 <TIM_OC5_SetConfig+0xa4>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d007      	beq.n	80037ee <TIM_OC5_SetConfig+0x6a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a12      	ldr	r2, [pc, #72]	; (800382c <TIM_OC5_SetConfig+0xa8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d003      	beq.n	80037ee <TIM_OC5_SetConfig+0x6a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a11      	ldr	r2, [pc, #68]	; (8003830 <TIM_OC5_SetConfig+0xac>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d109      	bne.n	8003802 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	021b      	lsls	r3, r3, #8
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	621a      	str	r2, [r3, #32]
}
 800381c:	bf00      	nop
 800381e:	371c      	adds	r7, #28
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	40012c00 	.word	0x40012c00
 800382c:	40014000 	.word	0x40014000
 8003830:	40014400 	.word	0x40014400

08003834 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800387a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	051b      	lsls	r3, r3, #20
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a14      	ldr	r2, [pc, #80]	; (80038dc <TIM_OC6_SetConfig+0xa8>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d007      	beq.n	80038a0 <TIM_OC6_SetConfig+0x6c>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a13      	ldr	r2, [pc, #76]	; (80038e0 <TIM_OC6_SetConfig+0xac>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d003      	beq.n	80038a0 <TIM_OC6_SetConfig+0x6c>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a12      	ldr	r2, [pc, #72]	; (80038e4 <TIM_OC6_SetConfig+0xb0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d109      	bne.n	80038b4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	029b      	lsls	r3, r3, #10
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	621a      	str	r2, [r3, #32]
}
 80038ce:	bf00      	nop
 80038d0:	371c      	adds	r7, #28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40012c00 	.word	0x40012c00
 80038e0:	40014000 	.word	0x40014000
 80038e4:	40014400 	.word	0x40014400

080038e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	f023 0201 	bic.w	r2, r3, #1
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4a1e      	ldr	r2, [pc, #120]	; (800398c <TIM_TI1_SetConfig+0xa4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d007      	beq.n	8003926 <TIM_TI1_SetConfig+0x3e>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800391c:	d003      	beq.n	8003926 <TIM_TI1_SetConfig+0x3e>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4a1b      	ldr	r2, [pc, #108]	; (8003990 <TIM_TI1_SetConfig+0xa8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d101      	bne.n	800392a <TIM_TI1_SetConfig+0x42>
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <TIM_TI1_SetConfig+0x44>
 800392a:	2300      	movs	r3, #0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f023 0303 	bic.w	r3, r3, #3
 8003936:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	e003      	b.n	800394a <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003950:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	b2db      	uxtb	r3, r3
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f023 030a 	bic.w	r3, r3, #10
 8003964:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	f003 030a 	and.w	r3, r3, #10
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	4313      	orrs	r3, r2
 8003970:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	621a      	str	r2, [r3, #32]
}
 800397e:	bf00      	nop
 8003980:	371c      	adds	r7, #28
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40012c00 	.word	0x40012c00
 8003990:	40014000 	.word	0x40014000

08003994 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	f023 0201 	bic.w	r2, r3, #1
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f023 030a 	bic.w	r3, r3, #10
 80039d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	621a      	str	r2, [r3, #32]
}
 80039e6:	bf00      	nop
 80039e8:	371c      	adds	r7, #28
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b087      	sub	sp, #28
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	607a      	str	r2, [r7, #4]
 80039fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	f023 0210 	bic.w	r2, r3, #16
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	021b      	lsls	r3, r3, #8
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	031b      	lsls	r3, r3, #12
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a44:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	621a      	str	r2, [r3, #32]
}
 8003a60:	bf00      	nop
 8003a62:	371c      	adds	r7, #28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	f023 0210 	bic.w	r2, r3, #16
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	031b      	lsls	r3, r3, #12
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003aa8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	621a      	str	r2, [r3, #32]
}
 8003ac0:	bf00      	nop
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f023 0303 	bic.w	r3, r3, #3
 8003af8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003b1c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	021b      	lsls	r3, r3, #8
 8003b22:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	621a      	str	r2, [r3, #32]
}
 8003b38:	bf00      	nop
 8003b3a:	371c      	adds	r7, #28
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	021b      	lsls	r3, r3, #8
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b82:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	031b      	lsls	r3, r3, #12
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003b96:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	031b      	lsls	r3, r3, #12
 8003b9c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	621a      	str	r2, [r3, #32]
}
 8003bb2:	bf00      	nop
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b085      	sub	sp, #20
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f043 0307 	orr.w	r3, r3, #7
 8003be0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	609a      	str	r2, [r3, #8]
}
 8003be8:	bf00      	nop
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	021a      	lsls	r2, r3, #8
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	609a      	str	r2, [r3, #8]
}
 8003c28:	bf00      	nop
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f003 031f 	and.w	r3, r3, #31
 8003c46:	2201      	movs	r2, #1
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a1a      	ldr	r2, [r3, #32]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	43db      	mvns	r3, r3
 8003c56:	401a      	ands	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a1a      	ldr	r2, [r3, #32]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 031f 	and.w	r3, r3, #31
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	621a      	str	r2, [r3, #32]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
	...

08003c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e04f      	b.n	8003d38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a21      	ldr	r2, [pc, #132]	; (8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d108      	bne.n	8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003cc8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a14      	ldr	r2, [pc, #80]	; (8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d009      	beq.n	8003d0c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d00:	d004      	beq.n	8003d0c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a10      	ldr	r2, [pc, #64]	; (8003d48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d10c      	bne.n	8003d26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	40012c00 	.word	0x40012c00
 8003d48:	40014000 	.word	0x40014000

08003d4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e060      	b.n	8003e2a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	041b      	lsls	r3, r3, #16
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a14      	ldr	r2, [pc, #80]	; (8003e38 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d115      	bne.n	8003e18 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	051b      	lsls	r3, r3, #20
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40012c00 	.word	0x40012c00

08003e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e040      	b.n	8003f0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fc ff48 	bl	8000d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2224      	movs	r2, #36	; 0x24
 8003ea4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0201 	bic.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fa1c 	bl	80042f4 <UART_SetConfig>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e022      	b.n	8003f0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fc46 	bl	8004760 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ee2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ef2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fccd 	bl	80048a4 <UART_CheckIdleState>
 8003f0a:	4603      	mov	r3, r0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08a      	sub	sp, #40	; 0x28
 8003f18:	af02      	add	r7, sp, #8
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	4613      	mov	r3, r2
 8003f22:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	f040 8081 	bne.w	8004030 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <HAL_UART_Transmit+0x26>
 8003f34:	88fb      	ldrh	r3, [r7, #6]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e079      	b.n	8004032 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_UART_Transmit+0x38>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e072      	b.n	8004032 <HAL_UART_Transmit+0x11e>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2221      	movs	r2, #33	; 0x21
 8003f5e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003f60:	f7fc fff8 	bl	8000f54 <HAL_GetTick>
 8003f64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	88fa      	ldrh	r2, [r7, #6]
 8003f6a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	88fa      	ldrh	r2, [r7, #6]
 8003f72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f7e:	d108      	bne.n	8003f92 <HAL_UART_Transmit+0x7e>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d104      	bne.n	8003f92 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	61bb      	str	r3, [r7, #24]
 8003f90:	e003      	b.n	8003f9a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003fa2:	e02d      	b.n	8004000 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2200      	movs	r2, #0
 8003fac:	2180      	movs	r1, #128	; 0x80
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 fcbd 	bl	800492e <UART_WaitOnFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e039      	b.n	8004032 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10b      	bne.n	8003fdc <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	881a      	ldrh	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fd0:	b292      	uxth	r2, r2
 8003fd2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	3302      	adds	r3, #2
 8003fd8:	61bb      	str	r3, [r7, #24]
 8003fda:	e008      	b.n	8003fee <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	781a      	ldrb	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	b292      	uxth	r2, r2
 8003fe6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	3301      	adds	r3, #1
 8003fec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1cb      	bne.n	8003fa4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2200      	movs	r2, #0
 8004014:	2140      	movs	r1, #64	; 0x40
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 fc89 	bl	800492e <UART_WaitOnFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e005      	b.n	8004032 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2220      	movs	r2, #32
 800402a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800402c:	2300      	movs	r3, #0
 800402e:	e000      	b.n	8004032 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004030:	2302      	movs	r3, #2
  }
}
 8004032:	4618      	mov	r0, r3
 8004034:	3720      	adds	r7, #32
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800405c:	69fa      	ldr	r2, [r7, #28]
 800405e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004062:	4013      	ands	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d113      	bne.n	8004094 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f003 0320 	and.w	r3, r3, #32
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00e      	beq.n	8004094 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	f003 0320 	and.w	r3, r3, #32
 800407c:	2b00      	cmp	r3, #0
 800407e:	d009      	beq.n	8004094 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 8114 	beq.w	80042b2 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	4798      	blx	r3
      }
      return;
 8004092:	e10e      	b.n	80042b2 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 80d6 	beq.w	8004248 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d105      	bne.n	80040b2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4b86      	ldr	r3, [pc, #536]	; (80042c4 <HAL_UART_IRQHandler+0x288>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 80cb 	beq.w	8004248 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00e      	beq.n	80040da <HAL_UART_IRQHandler+0x9e>
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d009      	beq.n	80040da <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2201      	movs	r2, #1
 80040cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040d2:	f043 0201 	orr.w	r2, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00e      	beq.n	8004102 <HAL_UART_IRQHandler+0xc6>
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d009      	beq.n	8004102 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2202      	movs	r2, #2
 80040f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040fa:	f043 0204 	orr.w	r2, r3, #4
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00e      	beq.n	800412a <HAL_UART_IRQHandler+0xee>
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2204      	movs	r2, #4
 800411c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004122:	f043 0202 	orr.w	r2, r3, #2
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	f003 0308 	and.w	r3, r3, #8
 8004130:	2b00      	cmp	r3, #0
 8004132:	d013      	beq.n	800415c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	f003 0320 	and.w	r3, r3, #32
 800413a:	2b00      	cmp	r3, #0
 800413c:	d104      	bne.n	8004148 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004144:	2b00      	cmp	r3, #0
 8004146:	d009      	beq.n	800415c <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2208      	movs	r2, #8
 800414e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004154:	f043 0208 	orr.w	r2, r3, #8
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00f      	beq.n	8004186 <HAL_UART_IRQHandler+0x14a>
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004178:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800417e:	f043 0220 	orr.w	r2, r3, #32
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 8093 	beq.w	80042b6 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00c      	beq.n	80041b4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	f003 0320 	and.w	r3, r3, #32
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d007      	beq.n	80041b4 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041b8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c4:	2b40      	cmp	r3, #64	; 0x40
 80041c6:	d004      	beq.n	80041d2 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d031      	beq.n	8004236 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 fc26 	bl	8004a24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e2:	2b40      	cmp	r3, #64	; 0x40
 80041e4:	d123      	bne.n	800422e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041f4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d013      	beq.n	8004226 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004202:	4a31      	ldr	r2, [pc, #196]	; (80042c8 <HAL_UART_IRQHandler+0x28c>)
 8004204:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800420a:	4618      	mov	r0, r3
 800420c:	f7fc ffbf 	bl	800118e <HAL_DMA_Abort_IT>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d016      	beq.n	8004244 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004220:	4610      	mov	r0, r2
 8004222:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004224:	e00e      	b.n	8004244 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f85a 	bl	80042e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422c:	e00a      	b.n	8004244 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f856 	bl	80042e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004234:	e006      	b.n	8004244 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f852 	bl	80042e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004242:	e038      	b.n	80042b6 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004244:	bf00      	nop
    return;
 8004246:	e036      	b.n	80042b6 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00d      	beq.n	800426e <HAL_UART_IRQHandler+0x232>
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004264:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 fc2b 	bl	8004ac2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800426c:	e026      	b.n	80042bc <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00d      	beq.n	8004294 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004286:	2b00      	cmp	r3, #0
 8004288:	d017      	beq.n	80042ba <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	4798      	blx	r3
    }
    return;
 8004292:	e012      	b.n	80042ba <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00e      	beq.n	80042bc <HAL_UART_IRQHandler+0x280>
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d009      	beq.n	80042bc <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 fbf1 	bl	8004a90 <UART_EndTransmit_IT>
    return;
 80042ae:	bf00      	nop
 80042b0:	e004      	b.n	80042bc <HAL_UART_IRQHandler+0x280>
      return;
 80042b2:	bf00      	nop
 80042b4:	e002      	b.n	80042bc <HAL_UART_IRQHandler+0x280>
    return;
 80042b6:	bf00      	nop
 80042b8:	e000      	b.n	80042bc <HAL_UART_IRQHandler+0x280>
    return;
 80042ba:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80042bc:	3720      	adds	r7, #32
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	04000120 	.word	0x04000120
 80042c8:	08004a65 	.word	0x08004a65

080042cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042f4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80042f8:	b088      	sub	sp, #32
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	431a      	orrs	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	4313      	orrs	r3, r2
 8004318:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4baa      	ldr	r3, [pc, #680]	; (80045cc <UART_SetConfig+0x2d8>)
 8004322:	4013      	ands	r3, r2
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	69f9      	ldr	r1, [r7, #28]
 800432a:	430b      	orrs	r3, r1
 800432c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4aa0      	ldr	r2, [pc, #640]	; (80045d0 <UART_SetConfig+0x2dc>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d004      	beq.n	800435e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	69fa      	ldr	r2, [r7, #28]
 800435a:	4313      	orrs	r3, r2
 800435c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	69fa      	ldr	r2, [r7, #28]
 800436e:	430a      	orrs	r2, r1
 8004370:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a97      	ldr	r2, [pc, #604]	; (80045d4 <UART_SetConfig+0x2e0>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d121      	bne.n	80043c0 <UART_SetConfig+0xcc>
 800437c:	4b96      	ldr	r3, [pc, #600]	; (80045d8 <UART_SetConfig+0x2e4>)
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	2b03      	cmp	r3, #3
 8004388:	d816      	bhi.n	80043b8 <UART_SetConfig+0xc4>
 800438a:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <UART_SetConfig+0x9c>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	080043a1 	.word	0x080043a1
 8004394:	080043ad 	.word	0x080043ad
 8004398:	080043a7 	.word	0x080043a7
 800439c:	080043b3 	.word	0x080043b3
 80043a0:	2301      	movs	r3, #1
 80043a2:	76fb      	strb	r3, [r7, #27]
 80043a4:	e098      	b.n	80044d8 <UART_SetConfig+0x1e4>
 80043a6:	2302      	movs	r3, #2
 80043a8:	76fb      	strb	r3, [r7, #27]
 80043aa:	e095      	b.n	80044d8 <UART_SetConfig+0x1e4>
 80043ac:	2304      	movs	r3, #4
 80043ae:	76fb      	strb	r3, [r7, #27]
 80043b0:	e092      	b.n	80044d8 <UART_SetConfig+0x1e4>
 80043b2:	2308      	movs	r3, #8
 80043b4:	76fb      	strb	r3, [r7, #27]
 80043b6:	e08f      	b.n	80044d8 <UART_SetConfig+0x1e4>
 80043b8:	2310      	movs	r3, #16
 80043ba:	76fb      	strb	r3, [r7, #27]
 80043bc:	bf00      	nop
 80043be:	e08b      	b.n	80044d8 <UART_SetConfig+0x1e4>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a85      	ldr	r2, [pc, #532]	; (80045dc <UART_SetConfig+0x2e8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d134      	bne.n	8004434 <UART_SetConfig+0x140>
 80043ca:	4b83      	ldr	r3, [pc, #524]	; (80045d8 <UART_SetConfig+0x2e4>)
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d0:	f003 030c 	and.w	r3, r3, #12
 80043d4:	2b0c      	cmp	r3, #12
 80043d6:	d829      	bhi.n	800442c <UART_SetConfig+0x138>
 80043d8:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <UART_SetConfig+0xec>)
 80043da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043de:	bf00      	nop
 80043e0:	08004415 	.word	0x08004415
 80043e4:	0800442d 	.word	0x0800442d
 80043e8:	0800442d 	.word	0x0800442d
 80043ec:	0800442d 	.word	0x0800442d
 80043f0:	08004421 	.word	0x08004421
 80043f4:	0800442d 	.word	0x0800442d
 80043f8:	0800442d 	.word	0x0800442d
 80043fc:	0800442d 	.word	0x0800442d
 8004400:	0800441b 	.word	0x0800441b
 8004404:	0800442d 	.word	0x0800442d
 8004408:	0800442d 	.word	0x0800442d
 800440c:	0800442d 	.word	0x0800442d
 8004410:	08004427 	.word	0x08004427
 8004414:	2300      	movs	r3, #0
 8004416:	76fb      	strb	r3, [r7, #27]
 8004418:	e05e      	b.n	80044d8 <UART_SetConfig+0x1e4>
 800441a:	2302      	movs	r3, #2
 800441c:	76fb      	strb	r3, [r7, #27]
 800441e:	e05b      	b.n	80044d8 <UART_SetConfig+0x1e4>
 8004420:	2304      	movs	r3, #4
 8004422:	76fb      	strb	r3, [r7, #27]
 8004424:	e058      	b.n	80044d8 <UART_SetConfig+0x1e4>
 8004426:	2308      	movs	r3, #8
 8004428:	76fb      	strb	r3, [r7, #27]
 800442a:	e055      	b.n	80044d8 <UART_SetConfig+0x1e4>
 800442c:	2310      	movs	r3, #16
 800442e:	76fb      	strb	r3, [r7, #27]
 8004430:	bf00      	nop
 8004432:	e051      	b.n	80044d8 <UART_SetConfig+0x1e4>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a69      	ldr	r2, [pc, #420]	; (80045e0 <UART_SetConfig+0x2ec>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d120      	bne.n	8004480 <UART_SetConfig+0x18c>
 800443e:	4b66      	ldr	r3, [pc, #408]	; (80045d8 <UART_SetConfig+0x2e4>)
 8004440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004444:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004448:	2b10      	cmp	r3, #16
 800444a:	d00f      	beq.n	800446c <UART_SetConfig+0x178>
 800444c:	2b10      	cmp	r3, #16
 800444e:	d802      	bhi.n	8004456 <UART_SetConfig+0x162>
 8004450:	2b00      	cmp	r3, #0
 8004452:	d005      	beq.n	8004460 <UART_SetConfig+0x16c>
 8004454:	e010      	b.n	8004478 <UART_SetConfig+0x184>
 8004456:	2b20      	cmp	r3, #32
 8004458:	d005      	beq.n	8004466 <UART_SetConfig+0x172>
 800445a:	2b30      	cmp	r3, #48	; 0x30
 800445c:	d009      	beq.n	8004472 <UART_SetConfig+0x17e>
 800445e:	e00b      	b.n	8004478 <UART_SetConfig+0x184>
 8004460:	2300      	movs	r3, #0
 8004462:	76fb      	strb	r3, [r7, #27]
 8004464:	e038      	b.n	80044d8 <UART_SetConfig+0x1e4>
 8004466:	2302      	movs	r3, #2
 8004468:	76fb      	strb	r3, [r7, #27]
 800446a:	e035      	b.n	80044d8 <UART_SetConfig+0x1e4>
 800446c:	2304      	movs	r3, #4
 800446e:	76fb      	strb	r3, [r7, #27]
 8004470:	e032      	b.n	80044d8 <UART_SetConfig+0x1e4>
 8004472:	2308      	movs	r3, #8
 8004474:	76fb      	strb	r3, [r7, #27]
 8004476:	e02f      	b.n	80044d8 <UART_SetConfig+0x1e4>
 8004478:	2310      	movs	r3, #16
 800447a:	76fb      	strb	r3, [r7, #27]
 800447c:	bf00      	nop
 800447e:	e02b      	b.n	80044d8 <UART_SetConfig+0x1e4>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a52      	ldr	r2, [pc, #328]	; (80045d0 <UART_SetConfig+0x2dc>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d124      	bne.n	80044d4 <UART_SetConfig+0x1e0>
 800448a:	4b53      	ldr	r3, [pc, #332]	; (80045d8 <UART_SetConfig+0x2e4>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004490:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004498:	d012      	beq.n	80044c0 <UART_SetConfig+0x1cc>
 800449a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800449e:	d802      	bhi.n	80044a6 <UART_SetConfig+0x1b2>
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d007      	beq.n	80044b4 <UART_SetConfig+0x1c0>
 80044a4:	e012      	b.n	80044cc <UART_SetConfig+0x1d8>
 80044a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044aa:	d006      	beq.n	80044ba <UART_SetConfig+0x1c6>
 80044ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044b0:	d009      	beq.n	80044c6 <UART_SetConfig+0x1d2>
 80044b2:	e00b      	b.n	80044cc <UART_SetConfig+0x1d8>
 80044b4:	2300      	movs	r3, #0
 80044b6:	76fb      	strb	r3, [r7, #27]
 80044b8:	e00e      	b.n	80044d8 <UART_SetConfig+0x1e4>
 80044ba:	2302      	movs	r3, #2
 80044bc:	76fb      	strb	r3, [r7, #27]
 80044be:	e00b      	b.n	80044d8 <UART_SetConfig+0x1e4>
 80044c0:	2304      	movs	r3, #4
 80044c2:	76fb      	strb	r3, [r7, #27]
 80044c4:	e008      	b.n	80044d8 <UART_SetConfig+0x1e4>
 80044c6:	2308      	movs	r3, #8
 80044c8:	76fb      	strb	r3, [r7, #27]
 80044ca:	e005      	b.n	80044d8 <UART_SetConfig+0x1e4>
 80044cc:	2310      	movs	r3, #16
 80044ce:	76fb      	strb	r3, [r7, #27]
 80044d0:	bf00      	nop
 80044d2:	e001      	b.n	80044d8 <UART_SetConfig+0x1e4>
 80044d4:	2310      	movs	r3, #16
 80044d6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a3c      	ldr	r2, [pc, #240]	; (80045d0 <UART_SetConfig+0x2dc>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	f040 8082 	bne.w	80045e8 <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044e4:	7efb      	ldrb	r3, [r7, #27]
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d823      	bhi.n	8004532 <UART_SetConfig+0x23e>
 80044ea:	a201      	add	r2, pc, #4	; (adr r2, 80044f0 <UART_SetConfig+0x1fc>)
 80044ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f0:	08004515 	.word	0x08004515
 80044f4:	08004533 	.word	0x08004533
 80044f8:	0800451d 	.word	0x0800451d
 80044fc:	08004533 	.word	0x08004533
 8004500:	08004523 	.word	0x08004523
 8004504:	08004533 	.word	0x08004533
 8004508:	08004533 	.word	0x08004533
 800450c:	08004533 	.word	0x08004533
 8004510:	0800452b 	.word	0x0800452b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004514:	f7fd fe30 	bl	8002178 <HAL_RCC_GetPCLK1Freq>
 8004518:	6178      	str	r0, [r7, #20]
        break;
 800451a:	e00f      	b.n	800453c <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800451c:	4b31      	ldr	r3, [pc, #196]	; (80045e4 <UART_SetConfig+0x2f0>)
 800451e:	617b      	str	r3, [r7, #20]
        break;
 8004520:	e00c      	b.n	800453c <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004522:	f7fd fd93 	bl	800204c <HAL_RCC_GetSysClockFreq>
 8004526:	6178      	str	r0, [r7, #20]
        break;
 8004528:	e008      	b.n	800453c <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800452a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800452e:	617b      	str	r3, [r7, #20]
        break;
 8004530:	e004      	b.n	800453c <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	76bb      	strb	r3, [r7, #26]
        break;
 800453a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 8100 	beq.w	8004744 <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	4613      	mov	r3, r2
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	4413      	add	r3, r2
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	429a      	cmp	r2, r3
 8004552:	d305      	bcc.n	8004560 <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	429a      	cmp	r2, r3
 800455e:	d902      	bls.n	8004566 <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	76bb      	strb	r3, [r7, #26]
 8004564:	e0ee      	b.n	8004744 <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	4619      	mov	r1, r3
 800456a:	f04f 0200 	mov.w	r2, #0
 800456e:	f04f 0300 	mov.w	r3, #0
 8004572:	f04f 0400 	mov.w	r4, #0
 8004576:	0214      	lsls	r4, r2, #8
 8004578:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800457c:	020b      	lsls	r3, r1, #8
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6852      	ldr	r2, [r2, #4]
 8004582:	0852      	lsrs	r2, r2, #1
 8004584:	4611      	mov	r1, r2
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	eb13 0b01 	adds.w	fp, r3, r1
 800458e:	eb44 0c02 	adc.w	ip, r4, r2
 8004592:	4658      	mov	r0, fp
 8004594:	4661      	mov	r1, ip
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f04f 0400 	mov.w	r4, #0
 800459e:	461a      	mov	r2, r3
 80045a0:	4623      	mov	r3, r4
 80045a2:	f7fb fe13 	bl	80001cc <__aeabi_uldivmod>
 80045a6:	4603      	mov	r3, r0
 80045a8:	460c      	mov	r4, r1
 80045aa:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045b2:	d308      	bcc.n	80045c6 <UART_SetConfig+0x2d2>
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ba:	d204      	bcs.n	80045c6 <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	60da      	str	r2, [r3, #12]
 80045c4:	e0be      	b.n	8004744 <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	76bb      	strb	r3, [r7, #26]
 80045ca:	e0bb      	b.n	8004744 <UART_SetConfig+0x450>
 80045cc:	efff69f3 	.word	0xefff69f3
 80045d0:	40008000 	.word	0x40008000
 80045d4:	40013800 	.word	0x40013800
 80045d8:	40021000 	.word	0x40021000
 80045dc:	40004400 	.word	0x40004400
 80045e0:	40004800 	.word	0x40004800
 80045e4:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045f0:	d15c      	bne.n	80046ac <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 80045f2:	7efb      	ldrb	r3, [r7, #27]
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d828      	bhi.n	800464a <UART_SetConfig+0x356>
 80045f8:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <UART_SetConfig+0x30c>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	08004625 	.word	0x08004625
 8004604:	0800462d 	.word	0x0800462d
 8004608:	08004635 	.word	0x08004635
 800460c:	0800464b 	.word	0x0800464b
 8004610:	0800463b 	.word	0x0800463b
 8004614:	0800464b 	.word	0x0800464b
 8004618:	0800464b 	.word	0x0800464b
 800461c:	0800464b 	.word	0x0800464b
 8004620:	08004643 	.word	0x08004643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004624:	f7fd fda8 	bl	8002178 <HAL_RCC_GetPCLK1Freq>
 8004628:	6178      	str	r0, [r7, #20]
        break;
 800462a:	e013      	b.n	8004654 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800462c:	f7fd fdba 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 8004630:	6178      	str	r0, [r7, #20]
        break;
 8004632:	e00f      	b.n	8004654 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004634:	4b49      	ldr	r3, [pc, #292]	; (800475c <UART_SetConfig+0x468>)
 8004636:	617b      	str	r3, [r7, #20]
        break;
 8004638:	e00c      	b.n	8004654 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800463a:	f7fd fd07 	bl	800204c <HAL_RCC_GetSysClockFreq>
 800463e:	6178      	str	r0, [r7, #20]
        break;
 8004640:	e008      	b.n	8004654 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004646:	617b      	str	r3, [r7, #20]
        break;
 8004648:	e004      	b.n	8004654 <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	76bb      	strb	r3, [r7, #26]
        break;
 8004652:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d074      	beq.n	8004744 <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	005a      	lsls	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	085b      	lsrs	r3, r3, #1
 8004664:	441a      	add	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	fbb2 f3f3 	udiv	r3, r2, r3
 800466e:	b29b      	uxth	r3, r3
 8004670:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	2b0f      	cmp	r3, #15
 8004676:	d916      	bls.n	80046a6 <UART_SetConfig+0x3b2>
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800467e:	d212      	bcs.n	80046a6 <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	b29b      	uxth	r3, r3
 8004684:	f023 030f 	bic.w	r3, r3, #15
 8004688:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	085b      	lsrs	r3, r3, #1
 800468e:	b29b      	uxth	r3, r3
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	b29a      	uxth	r2, r3
 8004696:	89fb      	ldrh	r3, [r7, #14]
 8004698:	4313      	orrs	r3, r2
 800469a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	89fa      	ldrh	r2, [r7, #14]
 80046a2:	60da      	str	r2, [r3, #12]
 80046a4:	e04e      	b.n	8004744 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	76bb      	strb	r3, [r7, #26]
 80046aa:	e04b      	b.n	8004744 <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046ac:	7efb      	ldrb	r3, [r7, #27]
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d827      	bhi.n	8004702 <UART_SetConfig+0x40e>
 80046b2:	a201      	add	r2, pc, #4	; (adr r2, 80046b8 <UART_SetConfig+0x3c4>)
 80046b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b8:	080046dd 	.word	0x080046dd
 80046bc:	080046e5 	.word	0x080046e5
 80046c0:	080046ed 	.word	0x080046ed
 80046c4:	08004703 	.word	0x08004703
 80046c8:	080046f3 	.word	0x080046f3
 80046cc:	08004703 	.word	0x08004703
 80046d0:	08004703 	.word	0x08004703
 80046d4:	08004703 	.word	0x08004703
 80046d8:	080046fb 	.word	0x080046fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046dc:	f7fd fd4c 	bl	8002178 <HAL_RCC_GetPCLK1Freq>
 80046e0:	6178      	str	r0, [r7, #20]
        break;
 80046e2:	e013      	b.n	800470c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046e4:	f7fd fd5e 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 80046e8:	6178      	str	r0, [r7, #20]
        break;
 80046ea:	e00f      	b.n	800470c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046ec:	4b1b      	ldr	r3, [pc, #108]	; (800475c <UART_SetConfig+0x468>)
 80046ee:	617b      	str	r3, [r7, #20]
        break;
 80046f0:	e00c      	b.n	800470c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046f2:	f7fd fcab 	bl	800204c <HAL_RCC_GetSysClockFreq>
 80046f6:	6178      	str	r0, [r7, #20]
        break;
 80046f8:	e008      	b.n	800470c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046fe:	617b      	str	r3, [r7, #20]
        break;
 8004700:	e004      	b.n	800470c <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	76bb      	strb	r3, [r7, #26]
        break;
 800470a:	bf00      	nop
    }

    if (pclk != 0U)
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d018      	beq.n	8004744 <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	085a      	lsrs	r2, r3, #1
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	441a      	add	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	fbb2 f3f3 	udiv	r3, r2, r3
 8004724:	b29b      	uxth	r3, r3
 8004726:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	2b0f      	cmp	r3, #15
 800472c:	d908      	bls.n	8004740 <UART_SetConfig+0x44c>
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004734:	d204      	bcs.n	8004740 <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	60da      	str	r2, [r3, #12]
 800473e:	e001      	b.n	8004744 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004750:	7ebb      	ldrb	r3, [r7, #26]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3720      	adds	r7, #32
 8004756:	46bd      	mov	sp, r7
 8004758:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800475c:	00f42400 	.word	0x00f42400

08004760 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	f003 0310 	and.w	r3, r3, #16
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	f003 0320 	and.w	r3, r3, #32
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01a      	beq.n	8004876 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800485e:	d10a      	bne.n	8004876 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	605a      	str	r2, [r3, #4]
  }
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80048b2:	f7fc fb4f 	bl	8000f54 <HAL_GetTick>
 80048b6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d10e      	bne.n	80048e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f82a 	bl	800492e <UART_WaitOnFlagUntilTimeout>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e020      	b.n	8004926 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d10e      	bne.n	8004910 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f814 	bl	800492e <UART_WaitOnFlagUntilTimeout>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e00a      	b.n	8004926 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2220      	movs	r2, #32
 800491a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b084      	sub	sp, #16
 8004932:	af00      	add	r7, sp, #0
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	603b      	str	r3, [r7, #0]
 800493a:	4613      	mov	r3, r2
 800493c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800493e:	e05d      	b.n	80049fc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004946:	d059      	beq.n	80049fc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004948:	f7fc fb04 	bl	8000f54 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	429a      	cmp	r2, r3
 8004956:	d302      	bcc.n	800495e <UART_WaitOnFlagUntilTimeout+0x30>
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d11b      	bne.n	8004996 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800496c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0201 	bic.w	r2, r2, #1
 800497c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2220      	movs	r2, #32
 8004982:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e042      	b.n	8004a1c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d02b      	beq.n	80049fc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b2:	d123      	bne.n	80049fc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049cc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0201 	bic.w	r2, r2, #1
 80049dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2220      	movs	r2, #32
 80049e2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2220      	movs	r2, #32
 80049ee:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e00f      	b.n	8004a1c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	69da      	ldr	r2, [r3, #28]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	4013      	ands	r3, r2
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	bf0c      	ite	eq
 8004a0c:	2301      	moveq	r3, #1
 8004a0e:	2300      	movne	r3, #0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	461a      	mov	r2, r3
 8004a14:	79fb      	ldrb	r3, [r7, #7]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d092      	beq.n	8004940 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a3a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0201 	bic.w	r2, r2, #1
 8004a4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f7ff fc2c 	bl	80042e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a88:	bf00      	nop
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aa6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7ff fc09 	bl	80042cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aba:	bf00      	nop
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
	...

08004ad8 <__errno>:
 8004ad8:	4b01      	ldr	r3, [pc, #4]	; (8004ae0 <__errno+0x8>)
 8004ada:	6818      	ldr	r0, [r3, #0]
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	2000000c 	.word	0x2000000c

08004ae4 <__libc_init_array>:
 8004ae4:	b570      	push	{r4, r5, r6, lr}
 8004ae6:	4e0d      	ldr	r6, [pc, #52]	; (8004b1c <__libc_init_array+0x38>)
 8004ae8:	4c0d      	ldr	r4, [pc, #52]	; (8004b20 <__libc_init_array+0x3c>)
 8004aea:	1ba4      	subs	r4, r4, r6
 8004aec:	10a4      	asrs	r4, r4, #2
 8004aee:	2500      	movs	r5, #0
 8004af0:	42a5      	cmp	r5, r4
 8004af2:	d109      	bne.n	8004b08 <__libc_init_array+0x24>
 8004af4:	4e0b      	ldr	r6, [pc, #44]	; (8004b24 <__libc_init_array+0x40>)
 8004af6:	4c0c      	ldr	r4, [pc, #48]	; (8004b28 <__libc_init_array+0x44>)
 8004af8:	f000 fc88 	bl	800540c <_init>
 8004afc:	1ba4      	subs	r4, r4, r6
 8004afe:	10a4      	asrs	r4, r4, #2
 8004b00:	2500      	movs	r5, #0
 8004b02:	42a5      	cmp	r5, r4
 8004b04:	d105      	bne.n	8004b12 <__libc_init_array+0x2e>
 8004b06:	bd70      	pop	{r4, r5, r6, pc}
 8004b08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b0c:	4798      	blx	r3
 8004b0e:	3501      	adds	r5, #1
 8004b10:	e7ee      	b.n	8004af0 <__libc_init_array+0xc>
 8004b12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b16:	4798      	blx	r3
 8004b18:	3501      	adds	r5, #1
 8004b1a:	e7f2      	b.n	8004b02 <__libc_init_array+0x1e>
 8004b1c:	080054f0 	.word	0x080054f0
 8004b20:	080054f0 	.word	0x080054f0
 8004b24:	080054f0 	.word	0x080054f0
 8004b28:	080054f4 	.word	0x080054f4

08004b2c <memset>:
 8004b2c:	4402      	add	r2, r0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d100      	bne.n	8004b36 <memset+0xa>
 8004b34:	4770      	bx	lr
 8004b36:	f803 1b01 	strb.w	r1, [r3], #1
 8004b3a:	e7f9      	b.n	8004b30 <memset+0x4>

08004b3c <_puts_r>:
 8004b3c:	b570      	push	{r4, r5, r6, lr}
 8004b3e:	460e      	mov	r6, r1
 8004b40:	4605      	mov	r5, r0
 8004b42:	b118      	cbz	r0, 8004b4c <_puts_r+0x10>
 8004b44:	6983      	ldr	r3, [r0, #24]
 8004b46:	b90b      	cbnz	r3, 8004b4c <_puts_r+0x10>
 8004b48:	f000 fa0c 	bl	8004f64 <__sinit>
 8004b4c:	69ab      	ldr	r3, [r5, #24]
 8004b4e:	68ac      	ldr	r4, [r5, #8]
 8004b50:	b913      	cbnz	r3, 8004b58 <_puts_r+0x1c>
 8004b52:	4628      	mov	r0, r5
 8004b54:	f000 fa06 	bl	8004f64 <__sinit>
 8004b58:	4b23      	ldr	r3, [pc, #140]	; (8004be8 <_puts_r+0xac>)
 8004b5a:	429c      	cmp	r4, r3
 8004b5c:	d117      	bne.n	8004b8e <_puts_r+0x52>
 8004b5e:	686c      	ldr	r4, [r5, #4]
 8004b60:	89a3      	ldrh	r3, [r4, #12]
 8004b62:	071b      	lsls	r3, r3, #28
 8004b64:	d51d      	bpl.n	8004ba2 <_puts_r+0x66>
 8004b66:	6923      	ldr	r3, [r4, #16]
 8004b68:	b1db      	cbz	r3, 8004ba2 <_puts_r+0x66>
 8004b6a:	3e01      	subs	r6, #1
 8004b6c:	68a3      	ldr	r3, [r4, #8]
 8004b6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b72:	3b01      	subs	r3, #1
 8004b74:	60a3      	str	r3, [r4, #8]
 8004b76:	b9e9      	cbnz	r1, 8004bb4 <_puts_r+0x78>
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	da2e      	bge.n	8004bda <_puts_r+0x9e>
 8004b7c:	4622      	mov	r2, r4
 8004b7e:	210a      	movs	r1, #10
 8004b80:	4628      	mov	r0, r5
 8004b82:	f000 f83f 	bl	8004c04 <__swbuf_r>
 8004b86:	3001      	adds	r0, #1
 8004b88:	d011      	beq.n	8004bae <_puts_r+0x72>
 8004b8a:	200a      	movs	r0, #10
 8004b8c:	e011      	b.n	8004bb2 <_puts_r+0x76>
 8004b8e:	4b17      	ldr	r3, [pc, #92]	; (8004bec <_puts_r+0xb0>)
 8004b90:	429c      	cmp	r4, r3
 8004b92:	d101      	bne.n	8004b98 <_puts_r+0x5c>
 8004b94:	68ac      	ldr	r4, [r5, #8]
 8004b96:	e7e3      	b.n	8004b60 <_puts_r+0x24>
 8004b98:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <_puts_r+0xb4>)
 8004b9a:	429c      	cmp	r4, r3
 8004b9c:	bf08      	it	eq
 8004b9e:	68ec      	ldreq	r4, [r5, #12]
 8004ba0:	e7de      	b.n	8004b60 <_puts_r+0x24>
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	f000 f87f 	bl	8004ca8 <__swsetup_r>
 8004baa:	2800      	cmp	r0, #0
 8004bac:	d0dd      	beq.n	8004b6a <_puts_r+0x2e>
 8004bae:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb2:	bd70      	pop	{r4, r5, r6, pc}
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	da04      	bge.n	8004bc2 <_puts_r+0x86>
 8004bb8:	69a2      	ldr	r2, [r4, #24]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	dc06      	bgt.n	8004bcc <_puts_r+0x90>
 8004bbe:	290a      	cmp	r1, #10
 8004bc0:	d004      	beq.n	8004bcc <_puts_r+0x90>
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	6022      	str	r2, [r4, #0]
 8004bc8:	7019      	strb	r1, [r3, #0]
 8004bca:	e7cf      	b.n	8004b6c <_puts_r+0x30>
 8004bcc:	4622      	mov	r2, r4
 8004bce:	4628      	mov	r0, r5
 8004bd0:	f000 f818 	bl	8004c04 <__swbuf_r>
 8004bd4:	3001      	adds	r0, #1
 8004bd6:	d1c9      	bne.n	8004b6c <_puts_r+0x30>
 8004bd8:	e7e9      	b.n	8004bae <_puts_r+0x72>
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	200a      	movs	r0, #10
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	6022      	str	r2, [r4, #0]
 8004be2:	7018      	strb	r0, [r3, #0]
 8004be4:	e7e5      	b.n	8004bb2 <_puts_r+0x76>
 8004be6:	bf00      	nop
 8004be8:	080054a8 	.word	0x080054a8
 8004bec:	080054c8 	.word	0x080054c8
 8004bf0:	08005488 	.word	0x08005488

08004bf4 <puts>:
 8004bf4:	4b02      	ldr	r3, [pc, #8]	; (8004c00 <puts+0xc>)
 8004bf6:	4601      	mov	r1, r0
 8004bf8:	6818      	ldr	r0, [r3, #0]
 8004bfa:	f7ff bf9f 	b.w	8004b3c <_puts_r>
 8004bfe:	bf00      	nop
 8004c00:	2000000c 	.word	0x2000000c

08004c04 <__swbuf_r>:
 8004c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c06:	460e      	mov	r6, r1
 8004c08:	4614      	mov	r4, r2
 8004c0a:	4605      	mov	r5, r0
 8004c0c:	b118      	cbz	r0, 8004c16 <__swbuf_r+0x12>
 8004c0e:	6983      	ldr	r3, [r0, #24]
 8004c10:	b90b      	cbnz	r3, 8004c16 <__swbuf_r+0x12>
 8004c12:	f000 f9a7 	bl	8004f64 <__sinit>
 8004c16:	4b21      	ldr	r3, [pc, #132]	; (8004c9c <__swbuf_r+0x98>)
 8004c18:	429c      	cmp	r4, r3
 8004c1a:	d12a      	bne.n	8004c72 <__swbuf_r+0x6e>
 8004c1c:	686c      	ldr	r4, [r5, #4]
 8004c1e:	69a3      	ldr	r3, [r4, #24]
 8004c20:	60a3      	str	r3, [r4, #8]
 8004c22:	89a3      	ldrh	r3, [r4, #12]
 8004c24:	071a      	lsls	r2, r3, #28
 8004c26:	d52e      	bpl.n	8004c86 <__swbuf_r+0x82>
 8004c28:	6923      	ldr	r3, [r4, #16]
 8004c2a:	b363      	cbz	r3, 8004c86 <__swbuf_r+0x82>
 8004c2c:	6923      	ldr	r3, [r4, #16]
 8004c2e:	6820      	ldr	r0, [r4, #0]
 8004c30:	1ac0      	subs	r0, r0, r3
 8004c32:	6963      	ldr	r3, [r4, #20]
 8004c34:	b2f6      	uxtb	r6, r6
 8004c36:	4283      	cmp	r3, r0
 8004c38:	4637      	mov	r7, r6
 8004c3a:	dc04      	bgt.n	8004c46 <__swbuf_r+0x42>
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	4628      	mov	r0, r5
 8004c40:	f000 f926 	bl	8004e90 <_fflush_r>
 8004c44:	bb28      	cbnz	r0, 8004c92 <__swbuf_r+0x8e>
 8004c46:	68a3      	ldr	r3, [r4, #8]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	60a3      	str	r3, [r4, #8]
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	6022      	str	r2, [r4, #0]
 8004c52:	701e      	strb	r6, [r3, #0]
 8004c54:	6963      	ldr	r3, [r4, #20]
 8004c56:	3001      	adds	r0, #1
 8004c58:	4283      	cmp	r3, r0
 8004c5a:	d004      	beq.n	8004c66 <__swbuf_r+0x62>
 8004c5c:	89a3      	ldrh	r3, [r4, #12]
 8004c5e:	07db      	lsls	r3, r3, #31
 8004c60:	d519      	bpl.n	8004c96 <__swbuf_r+0x92>
 8004c62:	2e0a      	cmp	r6, #10
 8004c64:	d117      	bne.n	8004c96 <__swbuf_r+0x92>
 8004c66:	4621      	mov	r1, r4
 8004c68:	4628      	mov	r0, r5
 8004c6a:	f000 f911 	bl	8004e90 <_fflush_r>
 8004c6e:	b190      	cbz	r0, 8004c96 <__swbuf_r+0x92>
 8004c70:	e00f      	b.n	8004c92 <__swbuf_r+0x8e>
 8004c72:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <__swbuf_r+0x9c>)
 8004c74:	429c      	cmp	r4, r3
 8004c76:	d101      	bne.n	8004c7c <__swbuf_r+0x78>
 8004c78:	68ac      	ldr	r4, [r5, #8]
 8004c7a:	e7d0      	b.n	8004c1e <__swbuf_r+0x1a>
 8004c7c:	4b09      	ldr	r3, [pc, #36]	; (8004ca4 <__swbuf_r+0xa0>)
 8004c7e:	429c      	cmp	r4, r3
 8004c80:	bf08      	it	eq
 8004c82:	68ec      	ldreq	r4, [r5, #12]
 8004c84:	e7cb      	b.n	8004c1e <__swbuf_r+0x1a>
 8004c86:	4621      	mov	r1, r4
 8004c88:	4628      	mov	r0, r5
 8004c8a:	f000 f80d 	bl	8004ca8 <__swsetup_r>
 8004c8e:	2800      	cmp	r0, #0
 8004c90:	d0cc      	beq.n	8004c2c <__swbuf_r+0x28>
 8004c92:	f04f 37ff 	mov.w	r7, #4294967295
 8004c96:	4638      	mov	r0, r7
 8004c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	080054a8 	.word	0x080054a8
 8004ca0:	080054c8 	.word	0x080054c8
 8004ca4:	08005488 	.word	0x08005488

08004ca8 <__swsetup_r>:
 8004ca8:	4b32      	ldr	r3, [pc, #200]	; (8004d74 <__swsetup_r+0xcc>)
 8004caa:	b570      	push	{r4, r5, r6, lr}
 8004cac:	681d      	ldr	r5, [r3, #0]
 8004cae:	4606      	mov	r6, r0
 8004cb0:	460c      	mov	r4, r1
 8004cb2:	b125      	cbz	r5, 8004cbe <__swsetup_r+0x16>
 8004cb4:	69ab      	ldr	r3, [r5, #24]
 8004cb6:	b913      	cbnz	r3, 8004cbe <__swsetup_r+0x16>
 8004cb8:	4628      	mov	r0, r5
 8004cba:	f000 f953 	bl	8004f64 <__sinit>
 8004cbe:	4b2e      	ldr	r3, [pc, #184]	; (8004d78 <__swsetup_r+0xd0>)
 8004cc0:	429c      	cmp	r4, r3
 8004cc2:	d10f      	bne.n	8004ce4 <__swsetup_r+0x3c>
 8004cc4:	686c      	ldr	r4, [r5, #4]
 8004cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	0715      	lsls	r5, r2, #28
 8004cce:	d42c      	bmi.n	8004d2a <__swsetup_r+0x82>
 8004cd0:	06d0      	lsls	r0, r2, #27
 8004cd2:	d411      	bmi.n	8004cf8 <__swsetup_r+0x50>
 8004cd4:	2209      	movs	r2, #9
 8004cd6:	6032      	str	r2, [r6, #0]
 8004cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cdc:	81a3      	strh	r3, [r4, #12]
 8004cde:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce2:	e03e      	b.n	8004d62 <__swsetup_r+0xba>
 8004ce4:	4b25      	ldr	r3, [pc, #148]	; (8004d7c <__swsetup_r+0xd4>)
 8004ce6:	429c      	cmp	r4, r3
 8004ce8:	d101      	bne.n	8004cee <__swsetup_r+0x46>
 8004cea:	68ac      	ldr	r4, [r5, #8]
 8004cec:	e7eb      	b.n	8004cc6 <__swsetup_r+0x1e>
 8004cee:	4b24      	ldr	r3, [pc, #144]	; (8004d80 <__swsetup_r+0xd8>)
 8004cf0:	429c      	cmp	r4, r3
 8004cf2:	bf08      	it	eq
 8004cf4:	68ec      	ldreq	r4, [r5, #12]
 8004cf6:	e7e6      	b.n	8004cc6 <__swsetup_r+0x1e>
 8004cf8:	0751      	lsls	r1, r2, #29
 8004cfa:	d512      	bpl.n	8004d22 <__swsetup_r+0x7a>
 8004cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cfe:	b141      	cbz	r1, 8004d12 <__swsetup_r+0x6a>
 8004d00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d04:	4299      	cmp	r1, r3
 8004d06:	d002      	beq.n	8004d0e <__swsetup_r+0x66>
 8004d08:	4630      	mov	r0, r6
 8004d0a:	f000 fa19 	bl	8005140 <_free_r>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	6363      	str	r3, [r4, #52]	; 0x34
 8004d12:	89a3      	ldrh	r3, [r4, #12]
 8004d14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d18:	81a3      	strh	r3, [r4, #12]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	6063      	str	r3, [r4, #4]
 8004d1e:	6923      	ldr	r3, [r4, #16]
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	89a3      	ldrh	r3, [r4, #12]
 8004d24:	f043 0308 	orr.w	r3, r3, #8
 8004d28:	81a3      	strh	r3, [r4, #12]
 8004d2a:	6923      	ldr	r3, [r4, #16]
 8004d2c:	b94b      	cbnz	r3, 8004d42 <__swsetup_r+0x9a>
 8004d2e:	89a3      	ldrh	r3, [r4, #12]
 8004d30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d38:	d003      	beq.n	8004d42 <__swsetup_r+0x9a>
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	4630      	mov	r0, r6
 8004d3e:	f000 f9bf 	bl	80050c0 <__smakebuf_r>
 8004d42:	89a2      	ldrh	r2, [r4, #12]
 8004d44:	f012 0301 	ands.w	r3, r2, #1
 8004d48:	d00c      	beq.n	8004d64 <__swsetup_r+0xbc>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60a3      	str	r3, [r4, #8]
 8004d4e:	6963      	ldr	r3, [r4, #20]
 8004d50:	425b      	negs	r3, r3
 8004d52:	61a3      	str	r3, [r4, #24]
 8004d54:	6923      	ldr	r3, [r4, #16]
 8004d56:	b953      	cbnz	r3, 8004d6e <__swsetup_r+0xc6>
 8004d58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d5c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004d60:	d1ba      	bne.n	8004cd8 <__swsetup_r+0x30>
 8004d62:	bd70      	pop	{r4, r5, r6, pc}
 8004d64:	0792      	lsls	r2, r2, #30
 8004d66:	bf58      	it	pl
 8004d68:	6963      	ldrpl	r3, [r4, #20]
 8004d6a:	60a3      	str	r3, [r4, #8]
 8004d6c:	e7f2      	b.n	8004d54 <__swsetup_r+0xac>
 8004d6e:	2000      	movs	r0, #0
 8004d70:	e7f7      	b.n	8004d62 <__swsetup_r+0xba>
 8004d72:	bf00      	nop
 8004d74:	2000000c 	.word	0x2000000c
 8004d78:	080054a8 	.word	0x080054a8
 8004d7c:	080054c8 	.word	0x080054c8
 8004d80:	08005488 	.word	0x08005488

08004d84 <__sflush_r>:
 8004d84:	898a      	ldrh	r2, [r1, #12]
 8004d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d8a:	4605      	mov	r5, r0
 8004d8c:	0710      	lsls	r0, r2, #28
 8004d8e:	460c      	mov	r4, r1
 8004d90:	d458      	bmi.n	8004e44 <__sflush_r+0xc0>
 8004d92:	684b      	ldr	r3, [r1, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	dc05      	bgt.n	8004da4 <__sflush_r+0x20>
 8004d98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	dc02      	bgt.n	8004da4 <__sflush_r+0x20>
 8004d9e:	2000      	movs	r0, #0
 8004da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004da4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004da6:	2e00      	cmp	r6, #0
 8004da8:	d0f9      	beq.n	8004d9e <__sflush_r+0x1a>
 8004daa:	2300      	movs	r3, #0
 8004dac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004db0:	682f      	ldr	r7, [r5, #0]
 8004db2:	6a21      	ldr	r1, [r4, #32]
 8004db4:	602b      	str	r3, [r5, #0]
 8004db6:	d032      	beq.n	8004e1e <__sflush_r+0x9a>
 8004db8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004dba:	89a3      	ldrh	r3, [r4, #12]
 8004dbc:	075a      	lsls	r2, r3, #29
 8004dbe:	d505      	bpl.n	8004dcc <__sflush_r+0x48>
 8004dc0:	6863      	ldr	r3, [r4, #4]
 8004dc2:	1ac0      	subs	r0, r0, r3
 8004dc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004dc6:	b10b      	cbz	r3, 8004dcc <__sflush_r+0x48>
 8004dc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004dca:	1ac0      	subs	r0, r0, r3
 8004dcc:	2300      	movs	r3, #0
 8004dce:	4602      	mov	r2, r0
 8004dd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dd2:	6a21      	ldr	r1, [r4, #32]
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	47b0      	blx	r6
 8004dd8:	1c43      	adds	r3, r0, #1
 8004dda:	89a3      	ldrh	r3, [r4, #12]
 8004ddc:	d106      	bne.n	8004dec <__sflush_r+0x68>
 8004dde:	6829      	ldr	r1, [r5, #0]
 8004de0:	291d      	cmp	r1, #29
 8004de2:	d848      	bhi.n	8004e76 <__sflush_r+0xf2>
 8004de4:	4a29      	ldr	r2, [pc, #164]	; (8004e8c <__sflush_r+0x108>)
 8004de6:	40ca      	lsrs	r2, r1
 8004de8:	07d6      	lsls	r6, r2, #31
 8004dea:	d544      	bpl.n	8004e76 <__sflush_r+0xf2>
 8004dec:	2200      	movs	r2, #0
 8004dee:	6062      	str	r2, [r4, #4]
 8004df0:	04d9      	lsls	r1, r3, #19
 8004df2:	6922      	ldr	r2, [r4, #16]
 8004df4:	6022      	str	r2, [r4, #0]
 8004df6:	d504      	bpl.n	8004e02 <__sflush_r+0x7e>
 8004df8:	1c42      	adds	r2, r0, #1
 8004dfa:	d101      	bne.n	8004e00 <__sflush_r+0x7c>
 8004dfc:	682b      	ldr	r3, [r5, #0]
 8004dfe:	b903      	cbnz	r3, 8004e02 <__sflush_r+0x7e>
 8004e00:	6560      	str	r0, [r4, #84]	; 0x54
 8004e02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e04:	602f      	str	r7, [r5, #0]
 8004e06:	2900      	cmp	r1, #0
 8004e08:	d0c9      	beq.n	8004d9e <__sflush_r+0x1a>
 8004e0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e0e:	4299      	cmp	r1, r3
 8004e10:	d002      	beq.n	8004e18 <__sflush_r+0x94>
 8004e12:	4628      	mov	r0, r5
 8004e14:	f000 f994 	bl	8005140 <_free_r>
 8004e18:	2000      	movs	r0, #0
 8004e1a:	6360      	str	r0, [r4, #52]	; 0x34
 8004e1c:	e7c0      	b.n	8004da0 <__sflush_r+0x1c>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	4628      	mov	r0, r5
 8004e22:	47b0      	blx	r6
 8004e24:	1c41      	adds	r1, r0, #1
 8004e26:	d1c8      	bne.n	8004dba <__sflush_r+0x36>
 8004e28:	682b      	ldr	r3, [r5, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0c5      	beq.n	8004dba <__sflush_r+0x36>
 8004e2e:	2b1d      	cmp	r3, #29
 8004e30:	d001      	beq.n	8004e36 <__sflush_r+0xb2>
 8004e32:	2b16      	cmp	r3, #22
 8004e34:	d101      	bne.n	8004e3a <__sflush_r+0xb6>
 8004e36:	602f      	str	r7, [r5, #0]
 8004e38:	e7b1      	b.n	8004d9e <__sflush_r+0x1a>
 8004e3a:	89a3      	ldrh	r3, [r4, #12]
 8004e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e40:	81a3      	strh	r3, [r4, #12]
 8004e42:	e7ad      	b.n	8004da0 <__sflush_r+0x1c>
 8004e44:	690f      	ldr	r7, [r1, #16]
 8004e46:	2f00      	cmp	r7, #0
 8004e48:	d0a9      	beq.n	8004d9e <__sflush_r+0x1a>
 8004e4a:	0793      	lsls	r3, r2, #30
 8004e4c:	680e      	ldr	r6, [r1, #0]
 8004e4e:	bf08      	it	eq
 8004e50:	694b      	ldreq	r3, [r1, #20]
 8004e52:	600f      	str	r7, [r1, #0]
 8004e54:	bf18      	it	ne
 8004e56:	2300      	movne	r3, #0
 8004e58:	eba6 0807 	sub.w	r8, r6, r7
 8004e5c:	608b      	str	r3, [r1, #8]
 8004e5e:	f1b8 0f00 	cmp.w	r8, #0
 8004e62:	dd9c      	ble.n	8004d9e <__sflush_r+0x1a>
 8004e64:	4643      	mov	r3, r8
 8004e66:	463a      	mov	r2, r7
 8004e68:	6a21      	ldr	r1, [r4, #32]
 8004e6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	47b0      	blx	r6
 8004e70:	2800      	cmp	r0, #0
 8004e72:	dc06      	bgt.n	8004e82 <__sflush_r+0xfe>
 8004e74:	89a3      	ldrh	r3, [r4, #12]
 8004e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e7a:	81a3      	strh	r3, [r4, #12]
 8004e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e80:	e78e      	b.n	8004da0 <__sflush_r+0x1c>
 8004e82:	4407      	add	r7, r0
 8004e84:	eba8 0800 	sub.w	r8, r8, r0
 8004e88:	e7e9      	b.n	8004e5e <__sflush_r+0xda>
 8004e8a:	bf00      	nop
 8004e8c:	20400001 	.word	0x20400001

08004e90 <_fflush_r>:
 8004e90:	b538      	push	{r3, r4, r5, lr}
 8004e92:	690b      	ldr	r3, [r1, #16]
 8004e94:	4605      	mov	r5, r0
 8004e96:	460c      	mov	r4, r1
 8004e98:	b1db      	cbz	r3, 8004ed2 <_fflush_r+0x42>
 8004e9a:	b118      	cbz	r0, 8004ea4 <_fflush_r+0x14>
 8004e9c:	6983      	ldr	r3, [r0, #24]
 8004e9e:	b90b      	cbnz	r3, 8004ea4 <_fflush_r+0x14>
 8004ea0:	f000 f860 	bl	8004f64 <__sinit>
 8004ea4:	4b0c      	ldr	r3, [pc, #48]	; (8004ed8 <_fflush_r+0x48>)
 8004ea6:	429c      	cmp	r4, r3
 8004ea8:	d109      	bne.n	8004ebe <_fflush_r+0x2e>
 8004eaa:	686c      	ldr	r4, [r5, #4]
 8004eac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eb0:	b17b      	cbz	r3, 8004ed2 <_fflush_r+0x42>
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eba:	f7ff bf63 	b.w	8004d84 <__sflush_r>
 8004ebe:	4b07      	ldr	r3, [pc, #28]	; (8004edc <_fflush_r+0x4c>)
 8004ec0:	429c      	cmp	r4, r3
 8004ec2:	d101      	bne.n	8004ec8 <_fflush_r+0x38>
 8004ec4:	68ac      	ldr	r4, [r5, #8]
 8004ec6:	e7f1      	b.n	8004eac <_fflush_r+0x1c>
 8004ec8:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <_fflush_r+0x50>)
 8004eca:	429c      	cmp	r4, r3
 8004ecc:	bf08      	it	eq
 8004ece:	68ec      	ldreq	r4, [r5, #12]
 8004ed0:	e7ec      	b.n	8004eac <_fflush_r+0x1c>
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	bd38      	pop	{r3, r4, r5, pc}
 8004ed6:	bf00      	nop
 8004ed8:	080054a8 	.word	0x080054a8
 8004edc:	080054c8 	.word	0x080054c8
 8004ee0:	08005488 	.word	0x08005488

08004ee4 <std>:
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	b510      	push	{r4, lr}
 8004ee8:	4604      	mov	r4, r0
 8004eea:	e9c0 3300 	strd	r3, r3, [r0]
 8004eee:	6083      	str	r3, [r0, #8]
 8004ef0:	8181      	strh	r1, [r0, #12]
 8004ef2:	6643      	str	r3, [r0, #100]	; 0x64
 8004ef4:	81c2      	strh	r2, [r0, #14]
 8004ef6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004efa:	6183      	str	r3, [r0, #24]
 8004efc:	4619      	mov	r1, r3
 8004efe:	2208      	movs	r2, #8
 8004f00:	305c      	adds	r0, #92	; 0x5c
 8004f02:	f7ff fe13 	bl	8004b2c <memset>
 8004f06:	4b05      	ldr	r3, [pc, #20]	; (8004f1c <std+0x38>)
 8004f08:	6263      	str	r3, [r4, #36]	; 0x24
 8004f0a:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <std+0x3c>)
 8004f0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f0e:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <std+0x40>)
 8004f10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f12:	4b05      	ldr	r3, [pc, #20]	; (8004f28 <std+0x44>)
 8004f14:	6224      	str	r4, [r4, #32]
 8004f16:	6323      	str	r3, [r4, #48]	; 0x30
 8004f18:	bd10      	pop	{r4, pc}
 8004f1a:	bf00      	nop
 8004f1c:	080052b1 	.word	0x080052b1
 8004f20:	080052d3 	.word	0x080052d3
 8004f24:	0800530b 	.word	0x0800530b
 8004f28:	0800532f 	.word	0x0800532f

08004f2c <_cleanup_r>:
 8004f2c:	4901      	ldr	r1, [pc, #4]	; (8004f34 <_cleanup_r+0x8>)
 8004f2e:	f000 b885 	b.w	800503c <_fwalk_reent>
 8004f32:	bf00      	nop
 8004f34:	08004e91 	.word	0x08004e91

08004f38 <__sfmoreglue>:
 8004f38:	b570      	push	{r4, r5, r6, lr}
 8004f3a:	1e4a      	subs	r2, r1, #1
 8004f3c:	2568      	movs	r5, #104	; 0x68
 8004f3e:	4355      	muls	r5, r2
 8004f40:	460e      	mov	r6, r1
 8004f42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f46:	f000 f949 	bl	80051dc <_malloc_r>
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	b140      	cbz	r0, 8004f60 <__sfmoreglue+0x28>
 8004f4e:	2100      	movs	r1, #0
 8004f50:	e9c0 1600 	strd	r1, r6, [r0]
 8004f54:	300c      	adds	r0, #12
 8004f56:	60a0      	str	r0, [r4, #8]
 8004f58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f5c:	f7ff fde6 	bl	8004b2c <memset>
 8004f60:	4620      	mov	r0, r4
 8004f62:	bd70      	pop	{r4, r5, r6, pc}

08004f64 <__sinit>:
 8004f64:	6983      	ldr	r3, [r0, #24]
 8004f66:	b510      	push	{r4, lr}
 8004f68:	4604      	mov	r4, r0
 8004f6a:	bb33      	cbnz	r3, 8004fba <__sinit+0x56>
 8004f6c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004f70:	6503      	str	r3, [r0, #80]	; 0x50
 8004f72:	4b12      	ldr	r3, [pc, #72]	; (8004fbc <__sinit+0x58>)
 8004f74:	4a12      	ldr	r2, [pc, #72]	; (8004fc0 <__sinit+0x5c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6282      	str	r2, [r0, #40]	; 0x28
 8004f7a:	4298      	cmp	r0, r3
 8004f7c:	bf04      	itt	eq
 8004f7e:	2301      	moveq	r3, #1
 8004f80:	6183      	streq	r3, [r0, #24]
 8004f82:	f000 f81f 	bl	8004fc4 <__sfp>
 8004f86:	6060      	str	r0, [r4, #4]
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f000 f81b 	bl	8004fc4 <__sfp>
 8004f8e:	60a0      	str	r0, [r4, #8]
 8004f90:	4620      	mov	r0, r4
 8004f92:	f000 f817 	bl	8004fc4 <__sfp>
 8004f96:	2200      	movs	r2, #0
 8004f98:	60e0      	str	r0, [r4, #12]
 8004f9a:	2104      	movs	r1, #4
 8004f9c:	6860      	ldr	r0, [r4, #4]
 8004f9e:	f7ff ffa1 	bl	8004ee4 <std>
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	2109      	movs	r1, #9
 8004fa6:	68a0      	ldr	r0, [r4, #8]
 8004fa8:	f7ff ff9c 	bl	8004ee4 <std>
 8004fac:	2202      	movs	r2, #2
 8004fae:	2112      	movs	r1, #18
 8004fb0:	68e0      	ldr	r0, [r4, #12]
 8004fb2:	f7ff ff97 	bl	8004ee4 <std>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	61a3      	str	r3, [r4, #24]
 8004fba:	bd10      	pop	{r4, pc}
 8004fbc:	08005484 	.word	0x08005484
 8004fc0:	08004f2d 	.word	0x08004f2d

08004fc4 <__sfp>:
 8004fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc6:	4b1b      	ldr	r3, [pc, #108]	; (8005034 <__sfp+0x70>)
 8004fc8:	681e      	ldr	r6, [r3, #0]
 8004fca:	69b3      	ldr	r3, [r6, #24]
 8004fcc:	4607      	mov	r7, r0
 8004fce:	b913      	cbnz	r3, 8004fd6 <__sfp+0x12>
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	f7ff ffc7 	bl	8004f64 <__sinit>
 8004fd6:	3648      	adds	r6, #72	; 0x48
 8004fd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	d503      	bpl.n	8004fe8 <__sfp+0x24>
 8004fe0:	6833      	ldr	r3, [r6, #0]
 8004fe2:	b133      	cbz	r3, 8004ff2 <__sfp+0x2e>
 8004fe4:	6836      	ldr	r6, [r6, #0]
 8004fe6:	e7f7      	b.n	8004fd8 <__sfp+0x14>
 8004fe8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004fec:	b16d      	cbz	r5, 800500a <__sfp+0x46>
 8004fee:	3468      	adds	r4, #104	; 0x68
 8004ff0:	e7f4      	b.n	8004fdc <__sfp+0x18>
 8004ff2:	2104      	movs	r1, #4
 8004ff4:	4638      	mov	r0, r7
 8004ff6:	f7ff ff9f 	bl	8004f38 <__sfmoreglue>
 8004ffa:	6030      	str	r0, [r6, #0]
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	d1f1      	bne.n	8004fe4 <__sfp+0x20>
 8005000:	230c      	movs	r3, #12
 8005002:	603b      	str	r3, [r7, #0]
 8005004:	4604      	mov	r4, r0
 8005006:	4620      	mov	r0, r4
 8005008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800500a:	4b0b      	ldr	r3, [pc, #44]	; (8005038 <__sfp+0x74>)
 800500c:	6665      	str	r5, [r4, #100]	; 0x64
 800500e:	e9c4 5500 	strd	r5, r5, [r4]
 8005012:	60a5      	str	r5, [r4, #8]
 8005014:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005018:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800501c:	2208      	movs	r2, #8
 800501e:	4629      	mov	r1, r5
 8005020:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005024:	f7ff fd82 	bl	8004b2c <memset>
 8005028:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800502c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005030:	e7e9      	b.n	8005006 <__sfp+0x42>
 8005032:	bf00      	nop
 8005034:	08005484 	.word	0x08005484
 8005038:	ffff0001 	.word	0xffff0001

0800503c <_fwalk_reent>:
 800503c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005040:	4680      	mov	r8, r0
 8005042:	4689      	mov	r9, r1
 8005044:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005048:	2600      	movs	r6, #0
 800504a:	b914      	cbnz	r4, 8005052 <_fwalk_reent+0x16>
 800504c:	4630      	mov	r0, r6
 800504e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005052:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005056:	3f01      	subs	r7, #1
 8005058:	d501      	bpl.n	800505e <_fwalk_reent+0x22>
 800505a:	6824      	ldr	r4, [r4, #0]
 800505c:	e7f5      	b.n	800504a <_fwalk_reent+0xe>
 800505e:	89ab      	ldrh	r3, [r5, #12]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d907      	bls.n	8005074 <_fwalk_reent+0x38>
 8005064:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005068:	3301      	adds	r3, #1
 800506a:	d003      	beq.n	8005074 <_fwalk_reent+0x38>
 800506c:	4629      	mov	r1, r5
 800506e:	4640      	mov	r0, r8
 8005070:	47c8      	blx	r9
 8005072:	4306      	orrs	r6, r0
 8005074:	3568      	adds	r5, #104	; 0x68
 8005076:	e7ee      	b.n	8005056 <_fwalk_reent+0x1a>

08005078 <__swhatbuf_r>:
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	460e      	mov	r6, r1
 800507c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005080:	2900      	cmp	r1, #0
 8005082:	b096      	sub	sp, #88	; 0x58
 8005084:	4614      	mov	r4, r2
 8005086:	461d      	mov	r5, r3
 8005088:	da07      	bge.n	800509a <__swhatbuf_r+0x22>
 800508a:	2300      	movs	r3, #0
 800508c:	602b      	str	r3, [r5, #0]
 800508e:	89b3      	ldrh	r3, [r6, #12]
 8005090:	061a      	lsls	r2, r3, #24
 8005092:	d410      	bmi.n	80050b6 <__swhatbuf_r+0x3e>
 8005094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005098:	e00e      	b.n	80050b8 <__swhatbuf_r+0x40>
 800509a:	466a      	mov	r2, sp
 800509c:	f000 f96e 	bl	800537c <_fstat_r>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	dbf2      	blt.n	800508a <__swhatbuf_r+0x12>
 80050a4:	9a01      	ldr	r2, [sp, #4]
 80050a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80050aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80050ae:	425a      	negs	r2, r3
 80050b0:	415a      	adcs	r2, r3
 80050b2:	602a      	str	r2, [r5, #0]
 80050b4:	e7ee      	b.n	8005094 <__swhatbuf_r+0x1c>
 80050b6:	2340      	movs	r3, #64	; 0x40
 80050b8:	2000      	movs	r0, #0
 80050ba:	6023      	str	r3, [r4, #0]
 80050bc:	b016      	add	sp, #88	; 0x58
 80050be:	bd70      	pop	{r4, r5, r6, pc}

080050c0 <__smakebuf_r>:
 80050c0:	898b      	ldrh	r3, [r1, #12]
 80050c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050c4:	079d      	lsls	r5, r3, #30
 80050c6:	4606      	mov	r6, r0
 80050c8:	460c      	mov	r4, r1
 80050ca:	d507      	bpl.n	80050dc <__smakebuf_r+0x1c>
 80050cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80050d0:	6023      	str	r3, [r4, #0]
 80050d2:	6123      	str	r3, [r4, #16]
 80050d4:	2301      	movs	r3, #1
 80050d6:	6163      	str	r3, [r4, #20]
 80050d8:	b002      	add	sp, #8
 80050da:	bd70      	pop	{r4, r5, r6, pc}
 80050dc:	ab01      	add	r3, sp, #4
 80050de:	466a      	mov	r2, sp
 80050e0:	f7ff ffca 	bl	8005078 <__swhatbuf_r>
 80050e4:	9900      	ldr	r1, [sp, #0]
 80050e6:	4605      	mov	r5, r0
 80050e8:	4630      	mov	r0, r6
 80050ea:	f000 f877 	bl	80051dc <_malloc_r>
 80050ee:	b948      	cbnz	r0, 8005104 <__smakebuf_r+0x44>
 80050f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050f4:	059a      	lsls	r2, r3, #22
 80050f6:	d4ef      	bmi.n	80050d8 <__smakebuf_r+0x18>
 80050f8:	f023 0303 	bic.w	r3, r3, #3
 80050fc:	f043 0302 	orr.w	r3, r3, #2
 8005100:	81a3      	strh	r3, [r4, #12]
 8005102:	e7e3      	b.n	80050cc <__smakebuf_r+0xc>
 8005104:	4b0d      	ldr	r3, [pc, #52]	; (800513c <__smakebuf_r+0x7c>)
 8005106:	62b3      	str	r3, [r6, #40]	; 0x28
 8005108:	89a3      	ldrh	r3, [r4, #12]
 800510a:	6020      	str	r0, [r4, #0]
 800510c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005110:	81a3      	strh	r3, [r4, #12]
 8005112:	9b00      	ldr	r3, [sp, #0]
 8005114:	6163      	str	r3, [r4, #20]
 8005116:	9b01      	ldr	r3, [sp, #4]
 8005118:	6120      	str	r0, [r4, #16]
 800511a:	b15b      	cbz	r3, 8005134 <__smakebuf_r+0x74>
 800511c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005120:	4630      	mov	r0, r6
 8005122:	f000 f93d 	bl	80053a0 <_isatty_r>
 8005126:	b128      	cbz	r0, 8005134 <__smakebuf_r+0x74>
 8005128:	89a3      	ldrh	r3, [r4, #12]
 800512a:	f023 0303 	bic.w	r3, r3, #3
 800512e:	f043 0301 	orr.w	r3, r3, #1
 8005132:	81a3      	strh	r3, [r4, #12]
 8005134:	89a3      	ldrh	r3, [r4, #12]
 8005136:	431d      	orrs	r5, r3
 8005138:	81a5      	strh	r5, [r4, #12]
 800513a:	e7cd      	b.n	80050d8 <__smakebuf_r+0x18>
 800513c:	08004f2d 	.word	0x08004f2d

08005140 <_free_r>:
 8005140:	b538      	push	{r3, r4, r5, lr}
 8005142:	4605      	mov	r5, r0
 8005144:	2900      	cmp	r1, #0
 8005146:	d045      	beq.n	80051d4 <_free_r+0x94>
 8005148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800514c:	1f0c      	subs	r4, r1, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	bfb8      	it	lt
 8005152:	18e4      	addlt	r4, r4, r3
 8005154:	f000 f946 	bl	80053e4 <__malloc_lock>
 8005158:	4a1f      	ldr	r2, [pc, #124]	; (80051d8 <_free_r+0x98>)
 800515a:	6813      	ldr	r3, [r2, #0]
 800515c:	4610      	mov	r0, r2
 800515e:	b933      	cbnz	r3, 800516e <_free_r+0x2e>
 8005160:	6063      	str	r3, [r4, #4]
 8005162:	6014      	str	r4, [r2, #0]
 8005164:	4628      	mov	r0, r5
 8005166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800516a:	f000 b93c 	b.w	80053e6 <__malloc_unlock>
 800516e:	42a3      	cmp	r3, r4
 8005170:	d90c      	bls.n	800518c <_free_r+0x4c>
 8005172:	6821      	ldr	r1, [r4, #0]
 8005174:	1862      	adds	r2, r4, r1
 8005176:	4293      	cmp	r3, r2
 8005178:	bf04      	itt	eq
 800517a:	681a      	ldreq	r2, [r3, #0]
 800517c:	685b      	ldreq	r3, [r3, #4]
 800517e:	6063      	str	r3, [r4, #4]
 8005180:	bf04      	itt	eq
 8005182:	1852      	addeq	r2, r2, r1
 8005184:	6022      	streq	r2, [r4, #0]
 8005186:	6004      	str	r4, [r0, #0]
 8005188:	e7ec      	b.n	8005164 <_free_r+0x24>
 800518a:	4613      	mov	r3, r2
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	b10a      	cbz	r2, 8005194 <_free_r+0x54>
 8005190:	42a2      	cmp	r2, r4
 8005192:	d9fa      	bls.n	800518a <_free_r+0x4a>
 8005194:	6819      	ldr	r1, [r3, #0]
 8005196:	1858      	adds	r0, r3, r1
 8005198:	42a0      	cmp	r0, r4
 800519a:	d10b      	bne.n	80051b4 <_free_r+0x74>
 800519c:	6820      	ldr	r0, [r4, #0]
 800519e:	4401      	add	r1, r0
 80051a0:	1858      	adds	r0, r3, r1
 80051a2:	4282      	cmp	r2, r0
 80051a4:	6019      	str	r1, [r3, #0]
 80051a6:	d1dd      	bne.n	8005164 <_free_r+0x24>
 80051a8:	6810      	ldr	r0, [r2, #0]
 80051aa:	6852      	ldr	r2, [r2, #4]
 80051ac:	605a      	str	r2, [r3, #4]
 80051ae:	4401      	add	r1, r0
 80051b0:	6019      	str	r1, [r3, #0]
 80051b2:	e7d7      	b.n	8005164 <_free_r+0x24>
 80051b4:	d902      	bls.n	80051bc <_free_r+0x7c>
 80051b6:	230c      	movs	r3, #12
 80051b8:	602b      	str	r3, [r5, #0]
 80051ba:	e7d3      	b.n	8005164 <_free_r+0x24>
 80051bc:	6820      	ldr	r0, [r4, #0]
 80051be:	1821      	adds	r1, r4, r0
 80051c0:	428a      	cmp	r2, r1
 80051c2:	bf04      	itt	eq
 80051c4:	6811      	ldreq	r1, [r2, #0]
 80051c6:	6852      	ldreq	r2, [r2, #4]
 80051c8:	6062      	str	r2, [r4, #4]
 80051ca:	bf04      	itt	eq
 80051cc:	1809      	addeq	r1, r1, r0
 80051ce:	6021      	streq	r1, [r4, #0]
 80051d0:	605c      	str	r4, [r3, #4]
 80051d2:	e7c7      	b.n	8005164 <_free_r+0x24>
 80051d4:	bd38      	pop	{r3, r4, r5, pc}
 80051d6:	bf00      	nop
 80051d8:	20000094 	.word	0x20000094

080051dc <_malloc_r>:
 80051dc:	b570      	push	{r4, r5, r6, lr}
 80051de:	1ccd      	adds	r5, r1, #3
 80051e0:	f025 0503 	bic.w	r5, r5, #3
 80051e4:	3508      	adds	r5, #8
 80051e6:	2d0c      	cmp	r5, #12
 80051e8:	bf38      	it	cc
 80051ea:	250c      	movcc	r5, #12
 80051ec:	2d00      	cmp	r5, #0
 80051ee:	4606      	mov	r6, r0
 80051f0:	db01      	blt.n	80051f6 <_malloc_r+0x1a>
 80051f2:	42a9      	cmp	r1, r5
 80051f4:	d903      	bls.n	80051fe <_malloc_r+0x22>
 80051f6:	230c      	movs	r3, #12
 80051f8:	6033      	str	r3, [r6, #0]
 80051fa:	2000      	movs	r0, #0
 80051fc:	bd70      	pop	{r4, r5, r6, pc}
 80051fe:	f000 f8f1 	bl	80053e4 <__malloc_lock>
 8005202:	4a21      	ldr	r2, [pc, #132]	; (8005288 <_malloc_r+0xac>)
 8005204:	6814      	ldr	r4, [r2, #0]
 8005206:	4621      	mov	r1, r4
 8005208:	b991      	cbnz	r1, 8005230 <_malloc_r+0x54>
 800520a:	4c20      	ldr	r4, [pc, #128]	; (800528c <_malloc_r+0xb0>)
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	b91b      	cbnz	r3, 8005218 <_malloc_r+0x3c>
 8005210:	4630      	mov	r0, r6
 8005212:	f000 f83d 	bl	8005290 <_sbrk_r>
 8005216:	6020      	str	r0, [r4, #0]
 8005218:	4629      	mov	r1, r5
 800521a:	4630      	mov	r0, r6
 800521c:	f000 f838 	bl	8005290 <_sbrk_r>
 8005220:	1c43      	adds	r3, r0, #1
 8005222:	d124      	bne.n	800526e <_malloc_r+0x92>
 8005224:	230c      	movs	r3, #12
 8005226:	6033      	str	r3, [r6, #0]
 8005228:	4630      	mov	r0, r6
 800522a:	f000 f8dc 	bl	80053e6 <__malloc_unlock>
 800522e:	e7e4      	b.n	80051fa <_malloc_r+0x1e>
 8005230:	680b      	ldr	r3, [r1, #0]
 8005232:	1b5b      	subs	r3, r3, r5
 8005234:	d418      	bmi.n	8005268 <_malloc_r+0x8c>
 8005236:	2b0b      	cmp	r3, #11
 8005238:	d90f      	bls.n	800525a <_malloc_r+0x7e>
 800523a:	600b      	str	r3, [r1, #0]
 800523c:	50cd      	str	r5, [r1, r3]
 800523e:	18cc      	adds	r4, r1, r3
 8005240:	4630      	mov	r0, r6
 8005242:	f000 f8d0 	bl	80053e6 <__malloc_unlock>
 8005246:	f104 000b 	add.w	r0, r4, #11
 800524a:	1d23      	adds	r3, r4, #4
 800524c:	f020 0007 	bic.w	r0, r0, #7
 8005250:	1ac3      	subs	r3, r0, r3
 8005252:	d0d3      	beq.n	80051fc <_malloc_r+0x20>
 8005254:	425a      	negs	r2, r3
 8005256:	50e2      	str	r2, [r4, r3]
 8005258:	e7d0      	b.n	80051fc <_malloc_r+0x20>
 800525a:	428c      	cmp	r4, r1
 800525c:	684b      	ldr	r3, [r1, #4]
 800525e:	bf16      	itet	ne
 8005260:	6063      	strne	r3, [r4, #4]
 8005262:	6013      	streq	r3, [r2, #0]
 8005264:	460c      	movne	r4, r1
 8005266:	e7eb      	b.n	8005240 <_malloc_r+0x64>
 8005268:	460c      	mov	r4, r1
 800526a:	6849      	ldr	r1, [r1, #4]
 800526c:	e7cc      	b.n	8005208 <_malloc_r+0x2c>
 800526e:	1cc4      	adds	r4, r0, #3
 8005270:	f024 0403 	bic.w	r4, r4, #3
 8005274:	42a0      	cmp	r0, r4
 8005276:	d005      	beq.n	8005284 <_malloc_r+0xa8>
 8005278:	1a21      	subs	r1, r4, r0
 800527a:	4630      	mov	r0, r6
 800527c:	f000 f808 	bl	8005290 <_sbrk_r>
 8005280:	3001      	adds	r0, #1
 8005282:	d0cf      	beq.n	8005224 <_malloc_r+0x48>
 8005284:	6025      	str	r5, [r4, #0]
 8005286:	e7db      	b.n	8005240 <_malloc_r+0x64>
 8005288:	20000094 	.word	0x20000094
 800528c:	20000098 	.word	0x20000098

08005290 <_sbrk_r>:
 8005290:	b538      	push	{r3, r4, r5, lr}
 8005292:	4c06      	ldr	r4, [pc, #24]	; (80052ac <_sbrk_r+0x1c>)
 8005294:	2300      	movs	r3, #0
 8005296:	4605      	mov	r5, r0
 8005298:	4608      	mov	r0, r1
 800529a:	6023      	str	r3, [r4, #0]
 800529c:	f7fb fb0a 	bl	80008b4 <_sbrk>
 80052a0:	1c43      	adds	r3, r0, #1
 80052a2:	d102      	bne.n	80052aa <_sbrk_r+0x1a>
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	b103      	cbz	r3, 80052aa <_sbrk_r+0x1a>
 80052a8:	602b      	str	r3, [r5, #0]
 80052aa:	bd38      	pop	{r3, r4, r5, pc}
 80052ac:	200001b8 	.word	0x200001b8

080052b0 <__sread>:
 80052b0:	b510      	push	{r4, lr}
 80052b2:	460c      	mov	r4, r1
 80052b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b8:	f000 f896 	bl	80053e8 <_read_r>
 80052bc:	2800      	cmp	r0, #0
 80052be:	bfab      	itete	ge
 80052c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052c2:	89a3      	ldrhlt	r3, [r4, #12]
 80052c4:	181b      	addge	r3, r3, r0
 80052c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052ca:	bfac      	ite	ge
 80052cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80052ce:	81a3      	strhlt	r3, [r4, #12]
 80052d0:	bd10      	pop	{r4, pc}

080052d2 <__swrite>:
 80052d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052d6:	461f      	mov	r7, r3
 80052d8:	898b      	ldrh	r3, [r1, #12]
 80052da:	05db      	lsls	r3, r3, #23
 80052dc:	4605      	mov	r5, r0
 80052de:	460c      	mov	r4, r1
 80052e0:	4616      	mov	r6, r2
 80052e2:	d505      	bpl.n	80052f0 <__swrite+0x1e>
 80052e4:	2302      	movs	r3, #2
 80052e6:	2200      	movs	r2, #0
 80052e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ec:	f000 f868 	bl	80053c0 <_lseek_r>
 80052f0:	89a3      	ldrh	r3, [r4, #12]
 80052f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052fa:	81a3      	strh	r3, [r4, #12]
 80052fc:	4632      	mov	r2, r6
 80052fe:	463b      	mov	r3, r7
 8005300:	4628      	mov	r0, r5
 8005302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005306:	f000 b817 	b.w	8005338 <_write_r>

0800530a <__sseek>:
 800530a:	b510      	push	{r4, lr}
 800530c:	460c      	mov	r4, r1
 800530e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005312:	f000 f855 	bl	80053c0 <_lseek_r>
 8005316:	1c43      	adds	r3, r0, #1
 8005318:	89a3      	ldrh	r3, [r4, #12]
 800531a:	bf15      	itete	ne
 800531c:	6560      	strne	r0, [r4, #84]	; 0x54
 800531e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005322:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005326:	81a3      	strheq	r3, [r4, #12]
 8005328:	bf18      	it	ne
 800532a:	81a3      	strhne	r3, [r4, #12]
 800532c:	bd10      	pop	{r4, pc}

0800532e <__sclose>:
 800532e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005332:	f000 b813 	b.w	800535c <_close_r>
	...

08005338 <_write_r>:
 8005338:	b538      	push	{r3, r4, r5, lr}
 800533a:	4c07      	ldr	r4, [pc, #28]	; (8005358 <_write_r+0x20>)
 800533c:	4605      	mov	r5, r0
 800533e:	4608      	mov	r0, r1
 8005340:	4611      	mov	r1, r2
 8005342:	2200      	movs	r2, #0
 8005344:	6022      	str	r2, [r4, #0]
 8005346:	461a      	mov	r2, r3
 8005348:	f7fb fa63 	bl	8000812 <_write>
 800534c:	1c43      	adds	r3, r0, #1
 800534e:	d102      	bne.n	8005356 <_write_r+0x1e>
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	b103      	cbz	r3, 8005356 <_write_r+0x1e>
 8005354:	602b      	str	r3, [r5, #0]
 8005356:	bd38      	pop	{r3, r4, r5, pc}
 8005358:	200001b8 	.word	0x200001b8

0800535c <_close_r>:
 800535c:	b538      	push	{r3, r4, r5, lr}
 800535e:	4c06      	ldr	r4, [pc, #24]	; (8005378 <_close_r+0x1c>)
 8005360:	2300      	movs	r3, #0
 8005362:	4605      	mov	r5, r0
 8005364:	4608      	mov	r0, r1
 8005366:	6023      	str	r3, [r4, #0]
 8005368:	f7fb fa6f 	bl	800084a <_close>
 800536c:	1c43      	adds	r3, r0, #1
 800536e:	d102      	bne.n	8005376 <_close_r+0x1a>
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	b103      	cbz	r3, 8005376 <_close_r+0x1a>
 8005374:	602b      	str	r3, [r5, #0]
 8005376:	bd38      	pop	{r3, r4, r5, pc}
 8005378:	200001b8 	.word	0x200001b8

0800537c <_fstat_r>:
 800537c:	b538      	push	{r3, r4, r5, lr}
 800537e:	4c07      	ldr	r4, [pc, #28]	; (800539c <_fstat_r+0x20>)
 8005380:	2300      	movs	r3, #0
 8005382:	4605      	mov	r5, r0
 8005384:	4608      	mov	r0, r1
 8005386:	4611      	mov	r1, r2
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	f7fb fa6a 	bl	8000862 <_fstat>
 800538e:	1c43      	adds	r3, r0, #1
 8005390:	d102      	bne.n	8005398 <_fstat_r+0x1c>
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	b103      	cbz	r3, 8005398 <_fstat_r+0x1c>
 8005396:	602b      	str	r3, [r5, #0]
 8005398:	bd38      	pop	{r3, r4, r5, pc}
 800539a:	bf00      	nop
 800539c:	200001b8 	.word	0x200001b8

080053a0 <_isatty_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	4c06      	ldr	r4, [pc, #24]	; (80053bc <_isatty_r+0x1c>)
 80053a4:	2300      	movs	r3, #0
 80053a6:	4605      	mov	r5, r0
 80053a8:	4608      	mov	r0, r1
 80053aa:	6023      	str	r3, [r4, #0]
 80053ac:	f7fb fa69 	bl	8000882 <_isatty>
 80053b0:	1c43      	adds	r3, r0, #1
 80053b2:	d102      	bne.n	80053ba <_isatty_r+0x1a>
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	b103      	cbz	r3, 80053ba <_isatty_r+0x1a>
 80053b8:	602b      	str	r3, [r5, #0]
 80053ba:	bd38      	pop	{r3, r4, r5, pc}
 80053bc:	200001b8 	.word	0x200001b8

080053c0 <_lseek_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	4c07      	ldr	r4, [pc, #28]	; (80053e0 <_lseek_r+0x20>)
 80053c4:	4605      	mov	r5, r0
 80053c6:	4608      	mov	r0, r1
 80053c8:	4611      	mov	r1, r2
 80053ca:	2200      	movs	r2, #0
 80053cc:	6022      	str	r2, [r4, #0]
 80053ce:	461a      	mov	r2, r3
 80053d0:	f7fb fa62 	bl	8000898 <_lseek>
 80053d4:	1c43      	adds	r3, r0, #1
 80053d6:	d102      	bne.n	80053de <_lseek_r+0x1e>
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	b103      	cbz	r3, 80053de <_lseek_r+0x1e>
 80053dc:	602b      	str	r3, [r5, #0]
 80053de:	bd38      	pop	{r3, r4, r5, pc}
 80053e0:	200001b8 	.word	0x200001b8

080053e4 <__malloc_lock>:
 80053e4:	4770      	bx	lr

080053e6 <__malloc_unlock>:
 80053e6:	4770      	bx	lr

080053e8 <_read_r>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	4c07      	ldr	r4, [pc, #28]	; (8005408 <_read_r+0x20>)
 80053ec:	4605      	mov	r5, r0
 80053ee:	4608      	mov	r0, r1
 80053f0:	4611      	mov	r1, r2
 80053f2:	2200      	movs	r2, #0
 80053f4:	6022      	str	r2, [r4, #0]
 80053f6:	461a      	mov	r2, r3
 80053f8:	f7fb f9ee 	bl	80007d8 <_read>
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	d102      	bne.n	8005406 <_read_r+0x1e>
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	b103      	cbz	r3, 8005406 <_read_r+0x1e>
 8005404:	602b      	str	r3, [r5, #0]
 8005406:	bd38      	pop	{r3, r4, r5, pc}
 8005408:	200001b8 	.word	0x200001b8

0800540c <_init>:
 800540c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540e:	bf00      	nop
 8005410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005412:	bc08      	pop	{r3}
 8005414:	469e      	mov	lr, r3
 8005416:	4770      	bx	lr

08005418 <_fini>:
 8005418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541a:	bf00      	nop
 800541c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541e:	bc08      	pop	{r3}
 8005420:	469e      	mov	lr, r3
 8005422:	4770      	bx	lr
