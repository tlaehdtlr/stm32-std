
stm_l4_tunnel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003168  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080032f4  080032f4  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800333c  0800333c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800333c  0800333c  0001333c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003344  08003344  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003344  08003344  00013344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003348  08003348  00013348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800334c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  20000020  08003368  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  08003368  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b354  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bbc  00000000  00000000  0002b3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000998  00000000  00000000  0002cf60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a0  00000000  00000000  0002d8f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019be2  00000000  00000000  0002e198  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008cd2  00000000  00000000  00047d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a04cf  00000000  00000000  00050a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f0f1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002560  00000000  00000000  000f0f98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000020 	.word	0x20000020
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080032dc 	.word	0x080032dc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000024 	.word	0x20000024
 80001c8:	080032dc 	.word	0x080032dc

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 030c 	add.w	r3, r7, #12
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b18      	ldr	r3, [pc, #96]	; (8000544 <MX_GPIO_Init+0x78>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	4a17      	ldr	r2, [pc, #92]	; (8000544 <MX_GPIO_Init+0x78>)
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <MX_GPIO_Init+0x78>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	f003 0304 	and.w	r3, r3, #4
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b12      	ldr	r3, [pc, #72]	; (8000544 <MX_GPIO_Init+0x78>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a11      	ldr	r2, [pc, #68]	; (8000544 <MX_GPIO_Init+0x78>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <MX_GPIO_Init+0x78>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000512:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000516:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <MX_GPIO_Init+0x7c>)
 800051a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	4619      	mov	r1, r3
 8000526:	4809      	ldr	r0, [pc, #36]	; (800054c <MX_GPIO_Init+0x80>)
 8000528:	f000 fd1c 	bl	8000f64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800052c:	2200      	movs	r2, #0
 800052e:	2100      	movs	r1, #0
 8000530:	2028      	movs	r0, #40	; 0x28
 8000532:	f000 fca0 	bl	8000e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000536:	2028      	movs	r0, #40	; 0x28
 8000538:	f000 fcb9 	bl	8000eae <HAL_NVIC_EnableIRQ>

}
 800053c:	bf00      	nop
 800053e:	3720      	adds	r7, #32
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40021000 	.word	0x40021000
 8000548:	10110000 	.word	0x10110000
 800054c:	48000800 	.word	0x48000800

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000556:	f000 fb3f 	bl	8000bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055a:	f000 f897 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055e:	f7ff ffb5 	bl	80004cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000562:	f000 f9f5 	bl	8000950 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000566:	f000 fa23 	bl	80009b0 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if ONE
  HAL_UART_Receive_IT(&huart1, &queue1[rx1++], 1);
 800056a:	4b3d      	ldr	r3, [pc, #244]	; (8000660 <main+0x110>)
 800056c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000570:	1c59      	adds	r1, r3, #1
 8000572:	f144 0200 	adc.w	r2, r4, #0
 8000576:	483a      	ldr	r0, [pc, #232]	; (8000660 <main+0x110>)
 8000578:	e9c0 1200 	strd	r1, r2, [r0]
 800057c:	4a39      	ldr	r2, [pc, #228]	; (8000664 <main+0x114>)
 800057e:	4413      	add	r3, r2
 8000580:	2201      	movs	r2, #1
 8000582:	4619      	mov	r1, r3
 8000584:	4838      	ldr	r0, [pc, #224]	; (8000668 <main+0x118>)
 8000586:	f001 ff75 	bl	8002474 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &queue2[rx2++], 1);
 800058a:	4b38      	ldr	r3, [pc, #224]	; (800066c <main+0x11c>)
 800058c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000590:	1c59      	adds	r1, r3, #1
 8000592:	f144 0200 	adc.w	r2, r4, #0
 8000596:	4835      	ldr	r0, [pc, #212]	; (800066c <main+0x11c>)
 8000598:	e9c0 1200 	strd	r1, r2, [r0]
 800059c:	4a34      	ldr	r2, [pc, #208]	; (8000670 <main+0x120>)
 800059e:	4413      	add	r3, r2
 80005a0:	2201      	movs	r2, #1
 80005a2:	4619      	mov	r1, r3
 80005a4:	4833      	ldr	r0, [pc, #204]	; (8000674 <main+0x124>)
 80005a6:	f001 ff65 	bl	8002474 <HAL_UART_Receive_IT>
  HAL_UART_Receive_DMA(&huart2, &data_2, 1);
#endif
  while (1)
  {
#if ONE
	  if (flag1 && tx2 < rx2-1)
 80005aa:	4b33      	ldr	r3, [pc, #204]	; (8000678 <main+0x128>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d028      	beq.n	8000604 <main+0xb4>
 80005b2:	4b2e      	ldr	r3, [pc, #184]	; (800066c <main+0x11c>)
 80005b4:	e9d3 1200 	ldrd	r1, r2, [r3]
 80005b8:	f111 33ff 	adds.w	r3, r1, #4294967295
 80005bc:	f142 34ff 	adc.w	r4, r2, #4294967295
 80005c0:	4a2e      	ldr	r2, [pc, #184]	; (800067c <main+0x12c>)
 80005c2:	e9d2 1200 	ldrd	r1, r2, [r2]
 80005c6:	42a2      	cmp	r2, r4
 80005c8:	bf08      	it	eq
 80005ca:	4299      	cmpeq	r1, r3
 80005cc:	d21a      	bcs.n	8000604 <main+0xb4>
	  {
		  flag1 = 0;
 80005ce:	4b2a      	ldr	r3, [pc, #168]	; (8000678 <main+0x128>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit_IT(&huart1, &queue2[mask & tx2++], 1);
 80005d4:	4b29      	ldr	r3, [pc, #164]	; (800067c <main+0x12c>)
 80005d6:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80005da:	f11b 0101 	adds.w	r1, fp, #1
 80005de:	f14c 0200 	adc.w	r2, ip, #0
 80005e2:	4826      	ldr	r0, [pc, #152]	; (800067c <main+0x12c>)
 80005e4:	e9c0 1200 	strd	r1, r2, [r0]
 80005e8:	4a25      	ldr	r2, [pc, #148]	; (8000680 <main+0x130>)
 80005ea:	e9d2 1200 	ldrd	r1, r2, [r2]
 80005ee:	ea0b 0301 	and.w	r3, fp, r1
 80005f2:	ea0c 0402 	and.w	r4, ip, r2
 80005f6:	4a1e      	ldr	r2, [pc, #120]	; (8000670 <main+0x120>)
 80005f8:	4413      	add	r3, r2
 80005fa:	2201      	movs	r2, #1
 80005fc:	4619      	mov	r1, r3
 80005fe:	481a      	ldr	r0, [pc, #104]	; (8000668 <main+0x118>)
 8000600:	f001 fedc 	bl	80023bc <HAL_UART_Transmit_IT>
	  }

	  if (flag2 && tx1 < rx1-1)
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <main+0x134>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d0ce      	beq.n	80005aa <main+0x5a>
 800060c:	4b14      	ldr	r3, [pc, #80]	; (8000660 <main+0x110>)
 800060e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000612:	f111 33ff 	adds.w	r3, r1, #4294967295
 8000616:	f142 34ff 	adc.w	r4, r2, #4294967295
 800061a:	4a1b      	ldr	r2, [pc, #108]	; (8000688 <main+0x138>)
 800061c:	e9d2 1200 	ldrd	r1, r2, [r2]
 8000620:	42a2      	cmp	r2, r4
 8000622:	bf08      	it	eq
 8000624:	4299      	cmpeq	r1, r3
 8000626:	d2c0      	bcs.n	80005aa <main+0x5a>
	  {
		  flag2 = 0;
 8000628:	4b16      	ldr	r3, [pc, #88]	; (8000684 <main+0x134>)
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit_IT(&huart2, &queue1[mask & tx1++], 1);
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <main+0x138>)
 8000630:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8000634:	f11b 0101 	adds.w	r1, fp, #1
 8000638:	f14c 0200 	adc.w	r2, ip, #0
 800063c:	4812      	ldr	r0, [pc, #72]	; (8000688 <main+0x138>)
 800063e:	e9c0 1200 	strd	r1, r2, [r0]
 8000642:	4a0f      	ldr	r2, [pc, #60]	; (8000680 <main+0x130>)
 8000644:	e9d2 1200 	ldrd	r1, r2, [r2]
 8000648:	ea0b 0301 	and.w	r3, fp, r1
 800064c:	ea0c 0402 	and.w	r4, ip, r2
 8000650:	4a04      	ldr	r2, [pc, #16]	; (8000664 <main+0x114>)
 8000652:	4413      	add	r3, r2
 8000654:	2201      	movs	r2, #1
 8000656:	4619      	mov	r1, r3
 8000658:	4806      	ldr	r0, [pc, #24]	; (8000674 <main+0x124>)
 800065a:	f001 feaf 	bl	80023bc <HAL_UART_Transmit_IT>
	  if (flag1 && tx2 < rx2-1)
 800065e:	e7a4      	b.n	80005aa <main+0x5a>
 8000660:	20000240 	.word	0x20000240
 8000664:	2000003c 	.word	0x2000003c
 8000668:	20000460 	.word	0x20000460
 800066c:	20000450 	.word	0x20000450
 8000670:	20000250 	.word	0x20000250
 8000674:	200004e0 	.word	0x200004e0
 8000678:	20000000 	.word	0x20000000
 800067c:	20000458 	.word	0x20000458
 8000680:	20000008 	.word	0x20000008
 8000684:	20000001 	.word	0x20000001
 8000688:	20000248 	.word	0x20000248

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b0a4      	sub	sp, #144	; 0x90
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000696:	2244      	movs	r2, #68	; 0x44
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f002 fe16 	bl	80032cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2234      	movs	r2, #52	; 0x34
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 fe08 	bl	80032cc <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006c0:	f000 fde8 	bl	8001294 <HAL_PWREx_ControlVoltageScaling>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x42>
  {
    Error_Handler();
 80006ca:	f000 f8d2 	bl	8000872 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006ce:	2310      	movs	r3, #16
 80006d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006d2:	2301      	movs	r3, #1
 80006d4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006da:	2360      	movs	r3, #96	; 0x60
 80006dc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	2302      	movs	r3, #2
 80006e0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006e2:	2301      	movs	r3, #1
 80006e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006e6:	2301      	movs	r3, #1
 80006e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006ec:	2328      	movs	r3, #40	; 0x28
 80006ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fe1c 	bl	8001340 <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800070e:	f000 f8b0 	bl	8000872 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	230f      	movs	r3, #15
 8000714:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2303      	movs	r3, #3
 8000718:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000726:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800072a:	2104      	movs	r1, #4
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fa6d 	bl	8001c0c <HAL_RCC_ClockConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000738:	f000 f89b 	bl	8000872 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800073c:	2303      	movs	r3, #3
 800073e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4618      	mov	r0, r3
 800074c:	f001 fc62 	bl	8002014 <HAL_RCCEx_PeriphCLKConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000756:	f000 f88c 	bl	8000872 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3790      	adds	r7, #144	; 0x90
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
#if ONE
	if (huart->Instance == USART1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a0a      	ldr	r2, [pc, #40]	; (800079c <HAL_UART_TxCpltCallback+0x38>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d103      	bne.n	800077e <HAL_UART_TxCpltCallback+0x1a>
	{
		flag1 = 1;
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <HAL_UART_TxCpltCallback+0x3c>)
 8000778:	2201      	movs	r2, #1
 800077a:	701a      	strb	r2, [r3, #0]
	{
		flag2 = 1;
//		tx2++;
	}
#endif
}
 800077c:	e007      	b.n	800078e <HAL_UART_TxCpltCallback+0x2a>
	else if (huart->Instance == USART2)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a08      	ldr	r2, [pc, #32]	; (80007a4 <HAL_UART_TxCpltCallback+0x40>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d102      	bne.n	800078e <HAL_UART_TxCpltCallback+0x2a>
		flag2 = 1;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <HAL_UART_TxCpltCallback+0x44>)
 800078a:	2201      	movs	r2, #1
 800078c:	701a      	strb	r2, [r3, #0]
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40013800 	.word	0x40013800
 80007a0:	20000000 	.word	0x20000000
 80007a4:	40004400 	.word	0x40004400
 80007a8:	20000001 	.word	0x20000001

080007ac <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007ac:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
#if ONE
  if (huart->Instance == USART1)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a1f      	ldr	r2, [pc, #124]	; (8000838 <HAL_UART_RxCpltCallback+0x8c>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d118      	bne.n	80007f2 <HAL_UART_RxCpltCallback+0x46>
  {
	  HAL_UART_Receive_IT(&huart1, &queue1[mask & rx1++], 1);
 80007c0:	4b1e      	ldr	r3, [pc, #120]	; (800083c <HAL_UART_RxCpltCallback+0x90>)
 80007c2:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80007c6:	f11b 0101 	adds.w	r1, fp, #1
 80007ca:	f14c 0200 	adc.w	r2, ip, #0
 80007ce:	481b      	ldr	r0, [pc, #108]	; (800083c <HAL_UART_RxCpltCallback+0x90>)
 80007d0:	e9c0 1200 	strd	r1, r2, [r0]
 80007d4:	4a1a      	ldr	r2, [pc, #104]	; (8000840 <HAL_UART_RxCpltCallback+0x94>)
 80007d6:	e9d2 1200 	ldrd	r1, r2, [r2]
 80007da:	ea0b 0301 	and.w	r3, fp, r1
 80007de:	ea0c 0402 	and.w	r4, ip, r2
 80007e2:	4a18      	ldr	r2, [pc, #96]	; (8000844 <HAL_UART_RxCpltCallback+0x98>)
 80007e4:	4413      	add	r3, r2
 80007e6:	2201      	movs	r2, #1
 80007e8:	4619      	mov	r1, r3
 80007ea:	4817      	ldr	r0, [pc, #92]	; (8000848 <HAL_UART_RxCpltCallback+0x9c>)
 80007ec:	f001 fe42 	bl	8002474 <HAL_UART_Receive_IT>
  else if (huart->Instance == USART2)
  {
	  queue2[mask & rx2++] = data_2;
  }
#endif
}
 80007f0:	e01c      	b.n	800082c <HAL_UART_RxCpltCallback+0x80>
  else if (huart->Instance == USART2)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a15      	ldr	r2, [pc, #84]	; (800084c <HAL_UART_RxCpltCallback+0xa0>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d117      	bne.n	800082c <HAL_UART_RxCpltCallback+0x80>
	  HAL_UART_Receive_IT(&huart2, &queue2[mask & rx2++], 1);
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <HAL_UART_RxCpltCallback+0xa4>)
 80007fe:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8000802:	f11b 0101 	adds.w	r1, fp, #1
 8000806:	f14c 0200 	adc.w	r2, ip, #0
 800080a:	4811      	ldr	r0, [pc, #68]	; (8000850 <HAL_UART_RxCpltCallback+0xa4>)
 800080c:	e9c0 1200 	strd	r1, r2, [r0]
 8000810:	4a0b      	ldr	r2, [pc, #44]	; (8000840 <HAL_UART_RxCpltCallback+0x94>)
 8000812:	e9d2 1200 	ldrd	r1, r2, [r2]
 8000816:	ea0b 0301 	and.w	r3, fp, r1
 800081a:	ea0c 0402 	and.w	r4, ip, r2
 800081e:	4a0d      	ldr	r2, [pc, #52]	; (8000854 <HAL_UART_RxCpltCallback+0xa8>)
 8000820:	4413      	add	r3, r2
 8000822:	2201      	movs	r2, #1
 8000824:	4619      	mov	r1, r3
 8000826:	480c      	ldr	r0, [pc, #48]	; (8000858 <HAL_UART_RxCpltCallback+0xac>)
 8000828:	f001 fe24 	bl	8002474 <HAL_UART_Receive_IT>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8000836:	bf00      	nop
 8000838:	40013800 	.word	0x40013800
 800083c:	20000240 	.word	0x20000240
 8000840:	20000008 	.word	0x20000008
 8000844:	2000003c 	.word	0x2000003c
 8000848:	20000460 	.word	0x20000460
 800084c:	40004400 	.word	0x40004400
 8000850:	20000450 	.word	0x20000450
 8000854:	20000250 	.word	0x20000250
 8000858:	200004e0 	.word	0x200004e0

0800085c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	80fb      	strh	r3, [r7, #6]
//	HAL_UART_Transmit(&huart2, &cnt1, 1, 1);
//	HAL_UART_Transmit(&huart2, &cnt2, 1, 1);
//	HAL_UART_Transmit(&huart1, &test, 1, 1);
//	printf("cnt1 : %d , cnt2 : %d \r\n", cnt1, cnt2);
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000876:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	e7fe      	b.n	8000878 <Error_Handler+0x6>
	...

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <HAL_MspInit+0x44>)
 8000884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <HAL_MspInit+0x44>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6613      	str	r3, [r2, #96]	; 0x60
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <HAL_MspInit+0x44>)
 8000890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <HAL_MspInit+0x44>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <HAL_MspInit+0x44>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	6593      	str	r3, [r2, #88]	; 0x58
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_MspInit+0x44>)
 80008a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <NMI_Handler+0x4>

080008ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <MemManage_Handler+0x4>

080008d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000910:	f000 f9b6 	bl	8000c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}

08000918 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <USART1_IRQHandler+0x10>)
 800091e:	f001 fe4b 	bl	80025b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000460 	.word	0x20000460

0800092c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <USART2_IRQHandler+0x10>)
 8000932:	f001 fe41 	bl	80025b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200004e0 	.word	0x200004e0

08000940 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000944:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000948:	f000 fc7e 	bl	8001248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000956:	4a15      	ldr	r2, [pc, #84]	; (80009ac <MX_USART1_UART_Init+0x5c>)
 8000958:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000994:	f001 fcc4 	bl	8002320 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800099e:	f7ff ff68 	bl	8000872 <Error_Handler>
  }

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000460 	.word	0x20000460
 80009ac:	40013800 	.word	0x40013800

080009b0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_USART2_UART_Init+0x58>)
 80009b6:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <MX_USART2_UART_Init+0x5c>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_USART2_UART_Init+0x58>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_USART2_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_USART2_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_USART2_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_USART2_UART_Init+0x58>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_USART2_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_USART2_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_USART2_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_USART2_UART_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_USART2_UART_Init+0x58>)
 80009f4:	f001 fc94 	bl	8002320 <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009fe:	f7ff ff38 	bl	8000872 <Error_Handler>
  }

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200004e0 	.word	0x200004e0
 8000a0c:	40004400 	.word	0x40004400

08000a10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08c      	sub	sp, #48	; 0x30
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a37      	ldr	r2, [pc, #220]	; (8000b0c <HAL_UART_MspInit+0xfc>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d132      	bne.n	8000a98 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a32:	4b37      	ldr	r3, [pc, #220]	; (8000b10 <HAL_UART_MspInit+0x100>)
 8000a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a36:	4a36      	ldr	r2, [pc, #216]	; (8000b10 <HAL_UART_MspInit+0x100>)
 8000a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a3e:	4b34      	ldr	r3, [pc, #208]	; (8000b10 <HAL_UART_MspInit+0x100>)
 8000a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a46:	61bb      	str	r3, [r7, #24]
 8000a48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	4b31      	ldr	r3, [pc, #196]	; (8000b10 <HAL_UART_MspInit+0x100>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4a30      	ldr	r2, [pc, #192]	; (8000b10 <HAL_UART_MspInit+0x100>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4b2e      	ldr	r3, [pc, #184]	; (8000b10 <HAL_UART_MspInit+0x100>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a70:	2303      	movs	r3, #3
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a74:	2307      	movs	r3, #7
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a82:	f000 fa6f 	bl	8000f64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2025      	movs	r0, #37	; 0x25
 8000a8c:	f000 f9f3 	bl	8000e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a90:	2025      	movs	r0, #37	; 0x25
 8000a92:	f000 fa0c 	bl	8000eae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a96:	e035      	b.n	8000b04 <HAL_UART_MspInit+0xf4>
  else if(uartHandle->Instance==USART2)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a1d      	ldr	r2, [pc, #116]	; (8000b14 <HAL_UART_MspInit+0x104>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d130      	bne.n	8000b04 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <HAL_UART_MspInit+0x100>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa6:	4a1a      	ldr	r2, [pc, #104]	; (8000b10 <HAL_UART_MspInit+0x100>)
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aac:	6593      	str	r3, [r2, #88]	; 0x58
 8000aae:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <HAL_UART_MspInit+0x100>)
 8000ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <HAL_UART_MspInit+0x100>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <HAL_UART_MspInit+0x100>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_UART_MspInit+0x100>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ad2:	230c      	movs	r3, #12
 8000ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae2:	2307      	movs	r3, #7
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af0:	f000 fa38 	bl	8000f64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2100      	movs	r1, #0
 8000af8:	2026      	movs	r0, #38	; 0x26
 8000afa:	f000 f9bc 	bl	8000e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000afe:	2026      	movs	r0, #38	; 0x26
 8000b00:	f000 f9d5 	bl	8000eae <HAL_NVIC_EnableIRQ>
}
 8000b04:	bf00      	nop
 8000b06:	3730      	adds	r7, #48	; 0x30
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40013800 	.word	0x40013800
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40004400 	.word	0x40004400

08000b18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b1c:	f000 f826 	bl	8000b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b20:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b22:	e003      	b.n	8000b2c <LoopCopyDataInit>

08000b24 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b24:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b26:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b28:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b2a:	3104      	adds	r1, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b2c:	480a      	ldr	r0, [pc, #40]	; (8000b58 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b30:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b32:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b34:	d3f6      	bcc.n	8000b24 <CopyDataInit>
	ldr	r2, =_sbss
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b38:	e002      	b.n	8000b40 <LoopFillZerobss>

08000b3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b3a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b3c:	f842 3b04 	str.w	r3, [r2], #4

08000b40 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <LoopForever+0x16>)
	cmp	r2, r3
 8000b42:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b44:	d3f9      	bcc.n	8000b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b46:	f002 fb9d 	bl	8003284 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b4a:	f7ff fd01 	bl	8000550 <main>

08000b4e <LoopForever>:

LoopForever:
    b LoopForever
 8000b4e:	e7fe      	b.n	8000b4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b50:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000b54:	0800334c 	.word	0x0800334c
	ldr	r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b5c:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 8000b60:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 8000b64:	20000564 	.word	0x20000564

08000b68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC1_2_IRQHandler>
	...

08000b6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <SystemInit+0x64>)
 8000b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b76:	4a16      	ldr	r2, [pc, #88]	; (8000bd0 <SystemInit+0x64>)
 8000b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <SystemInit+0x68>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a13      	ldr	r2, [pc, #76]	; (8000bd4 <SystemInit+0x68>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <SystemInit+0x68>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <SystemInit+0x68>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a0f      	ldr	r2, [pc, #60]	; (8000bd4 <SystemInit+0x68>)
 8000b98:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b9c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ba0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <SystemInit+0x68>)
 8000ba4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ba8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <SystemInit+0x68>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a09      	ldr	r2, [pc, #36]	; (8000bd4 <SystemInit+0x68>)
 8000bb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bb4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <SystemInit+0x68>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <SystemInit+0x64>)
 8000bbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bc2:	609a      	str	r2, [r3, #8]
#endif
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be2:	2003      	movs	r0, #3
 8000be4:	f000 f93c 	bl	8000e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000be8:	2000      	movs	r0, #0
 8000bea:	f000 f80d 	bl	8000c08 <HAL_InitTick>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d002      	beq.n	8000bfa <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	71fb      	strb	r3, [r7, #7]
 8000bf8:	e001      	b.n	8000bfe <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bfa:	f7ff fe3f 	bl	800087c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c10:	2300      	movs	r3, #0
 8000c12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_InitTick+0x6c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d023      	beq.n	8000c64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <HAL_InitTick+0x70>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_InitTick+0x6c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f949 	bl	8000eca <HAL_SYSTICK_Config>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10f      	bne.n	8000c5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	d809      	bhi.n	8000c58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c44:	2200      	movs	r2, #0
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f000 f913 	bl	8000e76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c50:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_InitTick+0x74>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	e007      	b.n	8000c68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e004      	b.n	8000c68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	73fb      	strb	r3, [r7, #15]
 8000c62:	e001      	b.n	8000c68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000018 	.word	0x20000018
 8000c78:	20000010 	.word	0x20000010
 8000c7c:	20000014 	.word	0x20000014

08000c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000018 	.word	0x20000018
 8000ca4:	20000560 	.word	0x20000560

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <HAL_GetTick+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000560 	.word	0x20000560

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db0b      	blt.n	8000d4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	f003 021f 	and.w	r2, r3, #31
 8000d3c:	4907      	ldr	r1, [pc, #28]	; (8000d5c <__NVIC_EnableIRQ+0x38>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	2001      	movs	r0, #1
 8000d46:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e100 	.word	0xe000e100

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	; (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	; (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e2c:	d301      	bcc.n	8000e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00f      	b.n	8000e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <SysTick_Config+0x40>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f7ff ff8e 	bl	8000d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <SysTick_Config+0x40>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <SysTick_Config+0x40>)
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	e000e010 	.word	0xe000e010

08000e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ff29 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e88:	f7ff ff3e 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	6978      	ldr	r0, [r7, #20]
 8000e94:	f7ff ff8e 	bl	8000db4 <NVIC_EncodePriority>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff5d 	bl	8000d60 <__NVIC_SetPriority>
}
 8000ea6:	bf00      	nop
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff31 	bl	8000d24 <__NVIC_EnableIRQ>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffa2 	bl	8000e1c <SysTick_Config>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d005      	beq.n	8000f06 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2204      	movs	r2, #4
 8000efe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	e029      	b.n	8000f5a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 020e 	bic.w	r2, r2, #14
 8000f14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f022 0201 	bic.w	r2, r2, #1
 8000f24:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f003 021c 	and.w	r2, r3, #28
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	2101      	movs	r1, #1
 8000f34:	fa01 f202 	lsl.w	r2, r1, r2
 8000f38:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	4798      	blx	r3
    }
  }
  return status;
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b087      	sub	sp, #28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f72:	e14e      	b.n	8001212 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	2101      	movs	r1, #1
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f80:	4013      	ands	r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 8140 	beq.w	800120c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d00b      	beq.n	8000fac <HAL_GPIO_Init+0x48>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d007      	beq.n	8000fac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa0:	2b11      	cmp	r3, #17
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b12      	cmp	r3, #18
 8000faa:	d130      	bne.n	800100e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	091b      	lsrs	r3, r3, #4
 8000ff8:	f003 0201 	and.w	r2, r3, #1
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b02      	cmp	r3, #2
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0xea>
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2b12      	cmp	r3, #18
 800104c:	d123      	bne.n	8001096 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	08da      	lsrs	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	220f      	movs	r2, #15
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	691a      	ldr	r2, [r3, #16]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	08da      	lsrs	r2, r3, #3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3208      	adds	r2, #8
 8001090:	6939      	ldr	r1, [r7, #16]
 8001092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0203 	and.w	r2, r3, #3
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 809a 	beq.w	800120c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d8:	4b55      	ldr	r3, [pc, #340]	; (8001230 <HAL_GPIO_Init+0x2cc>)
 80010da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010dc:	4a54      	ldr	r2, [pc, #336]	; (8001230 <HAL_GPIO_Init+0x2cc>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	6613      	str	r3, [r2, #96]	; 0x60
 80010e4:	4b52      	ldr	r3, [pc, #328]	; (8001230 <HAL_GPIO_Init+0x2cc>)
 80010e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010f0:	4a50      	ldr	r2, [pc, #320]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	089b      	lsrs	r3, r3, #2
 80010f6:	3302      	adds	r3, #2
 80010f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	220f      	movs	r2, #15
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800111a:	d013      	beq.n	8001144 <HAL_GPIO_Init+0x1e0>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a46      	ldr	r2, [pc, #280]	; (8001238 <HAL_GPIO_Init+0x2d4>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d00d      	beq.n	8001140 <HAL_GPIO_Init+0x1dc>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a45      	ldr	r2, [pc, #276]	; (800123c <HAL_GPIO_Init+0x2d8>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d007      	beq.n	800113c <HAL_GPIO_Init+0x1d8>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a44      	ldr	r2, [pc, #272]	; (8001240 <HAL_GPIO_Init+0x2dc>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d101      	bne.n	8001138 <HAL_GPIO_Init+0x1d4>
 8001134:	2303      	movs	r3, #3
 8001136:	e006      	b.n	8001146 <HAL_GPIO_Init+0x1e2>
 8001138:	2307      	movs	r3, #7
 800113a:	e004      	b.n	8001146 <HAL_GPIO_Init+0x1e2>
 800113c:	2302      	movs	r3, #2
 800113e:	e002      	b.n	8001146 <HAL_GPIO_Init+0x1e2>
 8001140:	2301      	movs	r3, #1
 8001142:	e000      	b.n	8001146 <HAL_GPIO_Init+0x1e2>
 8001144:	2300      	movs	r3, #0
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	f002 0203 	and.w	r2, r2, #3
 800114c:	0092      	lsls	r2, r2, #2
 800114e:	4093      	lsls	r3, r2
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001156:	4937      	ldr	r1, [pc, #220]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	3302      	adds	r3, #2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001164:	4b37      	ldr	r3, [pc, #220]	; (8001244 <HAL_GPIO_Init+0x2e0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	43db      	mvns	r3, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001188:	4a2e      	ldr	r2, [pc, #184]	; (8001244 <HAL_GPIO_Init+0x2e0>)
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800118e:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <HAL_GPIO_Init+0x2e0>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011b2:	4a24      	ldr	r2, [pc, #144]	; (8001244 <HAL_GPIO_Init+0x2e0>)
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011b8:	4b22      	ldr	r3, [pc, #136]	; (8001244 <HAL_GPIO_Init+0x2e0>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011dc:	4a19      	ldr	r2, [pc, #100]	; (8001244 <HAL_GPIO_Init+0x2e0>)
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <HAL_GPIO_Init+0x2e0>)
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <HAL_GPIO_Init+0x2e0>)
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	3301      	adds	r3, #1
 8001210:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	fa22 f303 	lsr.w	r3, r2, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	f47f aea9 	bne.w	8000f74 <HAL_GPIO_Init+0x10>
  }
}
 8001222:	bf00      	nop
 8001224:	371c      	adds	r7, #28
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000
 8001234:	40010000 	.word	0x40010000
 8001238:	48000400 	.word	0x48000400
 800123c:	48000800 	.word	0x48000800
 8001240:	48000c00 	.word	0x48000c00
 8001244:	40010400 	.word	0x40010400

08001248 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001254:	695a      	ldr	r2, [r3, #20]
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	4013      	ands	r3, r2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d006      	beq.n	800126c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff faf8 	bl	800085c <HAL_GPIO_EXTI_Callback>
  }
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40010400 	.word	0x40010400

08001278 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <HAL_PWREx_GetVoltageRange+0x18>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40007000 	.word	0x40007000

08001294 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012a2:	d130      	bne.n	8001306 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012a4:	4b23      	ldr	r3, [pc, #140]	; (8001334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012b0:	d038      	beq.n	8001324 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012ba:	4a1e      	ldr	r2, [pc, #120]	; (8001334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2232      	movs	r2, #50	; 0x32
 80012c8:	fb02 f303 	mul.w	r3, r2, r3
 80012cc:	4a1b      	ldr	r2, [pc, #108]	; (800133c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012ce:	fba2 2303 	umull	r2, r3, r2, r3
 80012d2:	0c9b      	lsrs	r3, r3, #18
 80012d4:	3301      	adds	r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012d8:	e002      	b.n	80012e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3b01      	subs	r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ec:	d102      	bne.n	80012f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1f2      	bne.n	80012da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001300:	d110      	bne.n	8001324 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e00f      	b.n	8001326 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800130e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001312:	d007      	beq.n	8001324 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800131c:	4a05      	ldr	r2, [pc, #20]	; (8001334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001322:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40007000 	.word	0x40007000
 8001338:	20000010 	.word	0x20000010
 800133c:	431bde83 	.word	0x431bde83

08001340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	f000 bc56 	b.w	8001c00 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001354:	4ba1      	ldr	r3, [pc, #644]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 030c 	and.w	r3, r3, #12
 800135c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800135e:	4b9f      	ldr	r3, [pc, #636]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0310 	and.w	r3, r3, #16
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 80e6 	beq.w	8001542 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d007      	beq.n	800138c <HAL_RCC_OscConfig+0x4c>
 800137c:	6a3b      	ldr	r3, [r7, #32]
 800137e:	2b0c      	cmp	r3, #12
 8001380:	f040 808d 	bne.w	800149e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	2b01      	cmp	r3, #1
 8001388:	f040 8089 	bne.w	800149e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800138c:	4b93      	ldr	r3, [pc, #588]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d006      	beq.n	80013a6 <HAL_RCC_OscConfig+0x66>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	f000 bc2d 	b.w	8001c00 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013aa:	4b8c      	ldr	r3, [pc, #560]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d004      	beq.n	80013c0 <HAL_RCC_OscConfig+0x80>
 80013b6:	4b89      	ldr	r3, [pc, #548]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013be:	e005      	b.n	80013cc <HAL_RCC_OscConfig+0x8c>
 80013c0:	4b86      	ldr	r3, [pc, #536]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80013c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c6:	091b      	lsrs	r3, r3, #4
 80013c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d224      	bcs.n	800141a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fdbd 	bl	8001f54 <RCC_SetFlashLatencyFromMSIRange>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d002      	beq.n	80013e6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	f000 bc0d 	b.w	8001c00 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013e6:	4b7d      	ldr	r3, [pc, #500]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a7c      	ldr	r2, [pc, #496]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b7a      	ldr	r3, [pc, #488]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fe:	4977      	ldr	r1, [pc, #476]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001400:	4313      	orrs	r3, r2
 8001402:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001404:	4b75      	ldr	r3, [pc, #468]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	4972      	ldr	r1, [pc, #456]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001414:	4313      	orrs	r3, r2
 8001416:	604b      	str	r3, [r1, #4]
 8001418:	e025      	b.n	8001466 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800141a:	4b70      	ldr	r3, [pc, #448]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a6f      	ldr	r2, [pc, #444]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	4b6d      	ldr	r3, [pc, #436]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	496a      	ldr	r1, [pc, #424]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001434:	4313      	orrs	r3, r2
 8001436:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001438:	4b68      	ldr	r3, [pc, #416]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	021b      	lsls	r3, r3, #8
 8001446:	4965      	ldr	r1, [pc, #404]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001448:	4313      	orrs	r3, r2
 800144a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d109      	bne.n	8001466 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001456:	4618      	mov	r0, r3
 8001458:	f000 fd7c 	bl	8001f54 <RCC_SetFlashLatencyFromMSIRange>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e3cc      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001466:	f000 fcb3 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 800146a:	4601      	mov	r1, r0
 800146c:	4b5b      	ldr	r3, [pc, #364]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	091b      	lsrs	r3, r3, #4
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	4a5a      	ldr	r2, [pc, #360]	; (80015e0 <HAL_RCC_OscConfig+0x2a0>)
 8001478:	5cd3      	ldrb	r3, [r2, r3]
 800147a:	f003 031f 	and.w	r3, r3, #31
 800147e:	fa21 f303 	lsr.w	r3, r1, r3
 8001482:	4a58      	ldr	r2, [pc, #352]	; (80015e4 <HAL_RCC_OscConfig+0x2a4>)
 8001484:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001486:	4b58      	ldr	r3, [pc, #352]	; (80015e8 <HAL_RCC_OscConfig+0x2a8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fbbc 	bl	8000c08 <HAL_InitTick>
 8001490:	4603      	mov	r3, r0
 8001492:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001494:	7dfb      	ldrb	r3, [r7, #23]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d052      	beq.n	8001540 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800149a:	7dfb      	ldrb	r3, [r7, #23]
 800149c:	e3b0      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d032      	beq.n	800150c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014a6:	4b4d      	ldr	r3, [pc, #308]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a4c      	ldr	r2, [pc, #304]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014b2:	f7ff fbf9 	bl	8000ca8 <HAL_GetTick>
 80014b6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014ba:	f7ff fbf5 	bl	8000ca8 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e399      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014cc:	4b43      	ldr	r3, [pc, #268]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014d8:	4b40      	ldr	r3, [pc, #256]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a3f      	ldr	r2, [pc, #252]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80014de:	f043 0308 	orr.w	r3, r3, #8
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b3d      	ldr	r3, [pc, #244]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	493a      	ldr	r1, [pc, #232]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f6:	4b39      	ldr	r3, [pc, #228]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	4935      	ldr	r1, [pc, #212]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001506:	4313      	orrs	r3, r2
 8001508:	604b      	str	r3, [r1, #4]
 800150a:	e01a      	b.n	8001542 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800150c:	4b33      	ldr	r3, [pc, #204]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a32      	ldr	r2, [pc, #200]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001512:	f023 0301 	bic.w	r3, r3, #1
 8001516:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001518:	f7ff fbc6 	bl	8000ca8 <HAL_GetTick>
 800151c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001520:	f7ff fbc2 	bl	8000ca8 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e366      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001532:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x1e0>
 800153e:	e000      	b.n	8001542 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001540:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d073      	beq.n	8001636 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	2b08      	cmp	r3, #8
 8001552:	d005      	beq.n	8001560 <HAL_RCC_OscConfig+0x220>
 8001554:	6a3b      	ldr	r3, [r7, #32]
 8001556:	2b0c      	cmp	r3, #12
 8001558:	d10e      	bne.n	8001578 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	2b03      	cmp	r3, #3
 800155e:	d10b      	bne.n	8001578 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001560:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d063      	beq.n	8001634 <HAL_RCC_OscConfig+0x2f4>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d15f      	bne.n	8001634 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e343      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001580:	d106      	bne.n	8001590 <HAL_RCC_OscConfig+0x250>
 8001582:	4b16      	ldr	r3, [pc, #88]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a15      	ldr	r2, [pc, #84]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e01d      	b.n	80015cc <HAL_RCC_OscConfig+0x28c>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x274>
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80015a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0x28c>
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a08      	ldr	r2, [pc, #32]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80015ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a05      	ldr	r2, [pc, #20]	; (80015dc <HAL_RCC_OscConfig+0x29c>)
 80015c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d01b      	beq.n	800160c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d4:	f7ff fb68 	bl	8000ca8 <HAL_GetTick>
 80015d8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015da:	e010      	b.n	80015fe <HAL_RCC_OscConfig+0x2be>
 80015dc:	40021000 	.word	0x40021000
 80015e0:	080032f4 	.word	0x080032f4
 80015e4:	20000010 	.word	0x20000010
 80015e8:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fb5c 	bl	8000ca8 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e300      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015fe:	4ba0      	ldr	r3, [pc, #640]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x2ac>
 800160a:	e014      	b.n	8001636 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fb4c 	bl	8000ca8 <HAL_GetTick>
 8001610:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fb48 	bl	8000ca8 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	; 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e2ec      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001626:	4b96      	ldr	r3, [pc, #600]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x2d4>
 8001632:	e000      	b.n	8001636 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d060      	beq.n	8001704 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	2b04      	cmp	r3, #4
 8001646:	d005      	beq.n	8001654 <HAL_RCC_OscConfig+0x314>
 8001648:	6a3b      	ldr	r3, [r7, #32]
 800164a:	2b0c      	cmp	r3, #12
 800164c:	d119      	bne.n	8001682 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	2b02      	cmp	r3, #2
 8001652:	d116      	bne.n	8001682 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001654:	4b8a      	ldr	r3, [pc, #552]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <HAL_RCC_OscConfig+0x32c>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e2c9      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166c:	4b84      	ldr	r3, [pc, #528]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	061b      	lsls	r3, r3, #24
 800167a:	4981      	ldr	r1, [pc, #516]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 800167c:	4313      	orrs	r3, r2
 800167e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001680:	e040      	b.n	8001704 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d023      	beq.n	80016d2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800168a:	4b7d      	ldr	r3, [pc, #500]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a7c      	ldr	r2, [pc, #496]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001696:	f7ff fb07 	bl	8000ca8 <HAL_GetTick>
 800169a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800169e:	f7ff fb03 	bl	8000ca8 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e2a7      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016b0:	4b73      	ldr	r3, [pc, #460]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016bc:	4b70      	ldr	r3, [pc, #448]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	061b      	lsls	r3, r3, #24
 80016ca:	496d      	ldr	r1, [pc, #436]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
 80016d0:	e018      	b.n	8001704 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d2:	4b6b      	ldr	r3, [pc, #428]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a6a      	ldr	r2, [pc, #424]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 80016d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016de:	f7ff fae3 	bl	8000ca8 <HAL_GetTick>
 80016e2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e6:	f7ff fadf 	bl	8000ca8 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e283      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016f8:	4b61      	ldr	r3, [pc, #388]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1f0      	bne.n	80016e6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	2b00      	cmp	r3, #0
 800170e:	d07f      	beq.n	8001810 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d05f      	beq.n	80017d8 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001718:	4b59      	ldr	r3, [pc, #356]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 800171a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800171e:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	699a      	ldr	r2, [r3, #24]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f003 0310 	and.w	r3, r3, #16
 800172a:	429a      	cmp	r2, r3
 800172c:	d037      	beq.n	800179e <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d006      	beq.n	8001746 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e25c      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b00      	cmp	r3, #0
 800174e:	d01b      	beq.n	8001788 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8001750:	4b4b      	ldr	r3, [pc, #300]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 8001752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001756:	4a4a      	ldr	r2, [pc, #296]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001760:	f7ff faa2 	bl	8000ca8 <HAL_GetTick>
 8001764:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001768:	f7ff fa9e 	bl	8000ca8 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b11      	cmp	r3, #17
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e242      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800177a:	4b41      	ldr	r3, [pc, #260]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 800177c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1ef      	bne.n	8001768 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001788:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 800178a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800178e:	f023 0210 	bic.w	r2, r3, #16
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	493a      	ldr	r1, [pc, #232]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 8001798:	4313      	orrs	r3, r2
 800179a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179e:	4b38      	ldr	r3, [pc, #224]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 80017a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017a4:	4a36      	ldr	r2, [pc, #216]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ae:	f7ff fa7b 	bl	8000ca8 <HAL_GetTick>
 80017b2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b6:	f7ff fa77 	bl	8000ca8 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b11      	cmp	r3, #17
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e21b      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c8:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 80017ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0ef      	beq.n	80017b6 <HAL_RCC_OscConfig+0x476>
 80017d6:	e01b      	b.n	8001810 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d8:	4b29      	ldr	r3, [pc, #164]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 80017da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017de:	4a28      	ldr	r2, [pc, #160]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 80017e0:	f023 0301 	bic.w	r3, r3, #1
 80017e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e8:	f7ff fa5e 	bl	8000ca8 <HAL_GetTick>
 80017ec:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f0:	f7ff fa5a 	bl	8000ca8 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b11      	cmp	r3, #17
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e1fe      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001802:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 8001804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1ef      	bne.n	80017f0 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 80c1 	beq.w	80019a0 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001824:	4b16      	ldr	r3, [pc, #88]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 8001826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d10e      	bne.n	800184e <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 8001832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001834:	4a12      	ldr	r2, [pc, #72]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 8001836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183a:	6593      	str	r3, [r2, #88]	; 0x58
 800183c:	4b10      	ldr	r3, [pc, #64]	; (8001880 <HAL_RCC_OscConfig+0x540>)
 800183e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001848:	2301      	movs	r3, #1
 800184a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800184e:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <HAL_RCC_OscConfig+0x544>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001856:	2b00      	cmp	r3, #0
 8001858:	d11c      	bne.n	8001894 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_RCC_OscConfig+0x544>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <HAL_RCC_OscConfig+0x544>)
 8001860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001866:	f7ff fa1f 	bl	8000ca8 <HAL_GetTick>
 800186a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186c:	e00c      	b.n	8001888 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186e:	f7ff fa1b 	bl	8000ca8 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d905      	bls.n	8001888 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e1bf      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
 8001880:	40021000 	.word	0x40021000
 8001884:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001888:	4bb1      	ldr	r3, [pc, #708]	; (8001b50 <HAL_RCC_OscConfig+0x810>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0ec      	beq.n	800186e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d02c      	beq.n	80018fa <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80018a0:	4bac      	ldr	r3, [pc, #688]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80018a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b2:	49a8      	ldr	r1, [pc, #672]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d010      	beq.n	80018e8 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80018c6:	4ba3      	ldr	r3, [pc, #652]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80018c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018cc:	4aa1      	ldr	r2, [pc, #644]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018d6:	4b9f      	ldr	r3, [pc, #636]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80018d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018dc:	4a9d      	ldr	r2, [pc, #628]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018e6:	e018      	b.n	800191a <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018e8:	4b9a      	ldr	r3, [pc, #616]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80018ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ee:	4a99      	ldr	r2, [pc, #612]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018f8:	e00f      	b.n	800191a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018fa:	4b96      	ldr	r3, [pc, #600]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80018fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001900:	4a94      	ldr	r2, [pc, #592]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800190a:	4b92      	ldr	r3, [pc, #584]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 800190c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001910:	4a90      	ldr	r2, [pc, #576]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001912:	f023 0304 	bic.w	r3, r3, #4
 8001916:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d016      	beq.n	8001950 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001922:	f7ff f9c1 	bl	8000ca8 <HAL_GetTick>
 8001926:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001928:	e00a      	b.n	8001940 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192a:	f7ff f9bd 	bl	8000ca8 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	f241 3288 	movw	r2, #5000	; 0x1388
 8001938:	4293      	cmp	r3, r2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e15f      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001940:	4b84      	ldr	r3, [pc, #528]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0ed      	beq.n	800192a <HAL_RCC_OscConfig+0x5ea>
 800194e:	e01d      	b.n	800198c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001950:	f7ff f9aa 	bl	8000ca8 <HAL_GetTick>
 8001954:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001956:	e00a      	b.n	800196e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001958:	f7ff f9a6 	bl	8000ca8 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f241 3288 	movw	r2, #5000	; 0x1388
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e148      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800196e:	4b79      	ldr	r3, [pc, #484]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1ed      	bne.n	8001958 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800197c:	4b75      	ldr	r3, [pc, #468]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 800197e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001982:	4a74      	ldr	r2, [pc, #464]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800198c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001990:	2b01      	cmp	r3, #1
 8001992:	d105      	bne.n	80019a0 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001994:	4b6f      	ldr	r3, [pc, #444]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001998:	4a6e      	ldr	r2, [pc, #440]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 800199a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800199e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0320 	and.w	r3, r3, #32
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d03c      	beq.n	8001a26 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d01c      	beq.n	80019ee <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019b4:	4b67      	ldr	r3, [pc, #412]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80019b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ba:	4a66      	ldr	r2, [pc, #408]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c4:	f7ff f970 	bl	8000ca8 <HAL_GetTick>
 80019c8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019cc:	f7ff f96c 	bl	8000ca8 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e110      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019de:	4b5d      	ldr	r3, [pc, #372]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80019e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0ef      	beq.n	80019cc <HAL_RCC_OscConfig+0x68c>
 80019ec:	e01b      	b.n	8001a26 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019ee:	4b59      	ldr	r3, [pc, #356]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80019f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019f4:	4a57      	ldr	r2, [pc, #348]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 80019f6:	f023 0301 	bic.w	r3, r3, #1
 80019fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fe:	f7ff f953 	bl	8000ca8 <HAL_GetTick>
 8001a02:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a06:	f7ff f94f 	bl	8000ca8 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e0f3      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a18:	4b4e      	ldr	r3, [pc, #312]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001a1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1ef      	bne.n	8001a06 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 80e7 	beq.w	8001bfe <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	f040 80b7 	bne.w	8001ba8 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a3a:	4b46      	ldr	r3, [pc, #280]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f003 0203 	and.w	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d124      	bne.n	8001a98 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d11b      	bne.n	8001a98 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d113      	bne.n	8001a98 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7a:	085b      	lsrs	r3, r3, #1
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d109      	bne.n	8001a98 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	085b      	lsrs	r3, r3, #1
 8001a90:	3b01      	subs	r3, #1
 8001a92:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d061      	beq.n	8001b5c <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a98:	6a3b      	ldr	r3, [r7, #32]
 8001a9a:	2b0c      	cmp	r3, #12
 8001a9c:	d056      	beq.n	8001b4c <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a9e:	4b2d      	ldr	r3, [pc, #180]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a2c      	ldr	r2, [pc, #176]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001aa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aa8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001aaa:	f7ff f8fd 	bl	8000ca8 <HAL_GetTick>
 8001aae:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab2:	f7ff f8f9 	bl	8000ca8 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e09d      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac4:	4b23      	ldr	r3, [pc, #140]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1f0      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad0:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_RCC_OscConfig+0x818>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ae0:	3a01      	subs	r2, #1
 8001ae2:	0112      	lsls	r2, r2, #4
 8001ae4:	4311      	orrs	r1, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001aea:	0212      	lsls	r2, r2, #8
 8001aec:	4311      	orrs	r1, r2
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001af2:	0852      	lsrs	r2, r2, #1
 8001af4:	3a01      	subs	r2, #1
 8001af6:	0552      	lsls	r2, r2, #21
 8001af8:	4311      	orrs	r1, r2
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001afe:	0852      	lsrs	r2, r2, #1
 8001b00:	3a01      	subs	r2, #1
 8001b02:	0652      	lsls	r2, r2, #25
 8001b04:	430a      	orrs	r2, r1
 8001b06:	4913      	ldr	r1, [pc, #76]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a10      	ldr	r2, [pc, #64]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b18:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b24:	f7ff f8c0 	bl	8000ca8 <HAL_GetTick>
 8001b28:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2c:	f7ff f8bc 	bl	8000ca8 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e060      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_RCC_OscConfig+0x814>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b4a:	e058      	b.n	8001bfe <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e057      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
 8001b50:	40007000 	.word	0x40007000
 8001b54:	40021000 	.word	0x40021000
 8001b58:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5c:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d14a      	bne.n	8001bfe <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b68:	4b27      	ldr	r3, [pc, #156]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a26      	ldr	r2, [pc, #152]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b74:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	4a23      	ldr	r2, [pc, #140]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b80:	f7ff f892 	bl	8000ca8 <HAL_GetTick>
 8001b84:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b88:	f7ff f88e 	bl	8000ca8 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e032      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9a:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x848>
 8001ba6:	e02a      	b.n	8001bfe <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
 8001baa:	2b0c      	cmp	r3, #12
 8001bac:	d025      	beq.n	8001bfa <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a15      	ldr	r2, [pc, #84]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001bb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bb8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001bba:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	4a12      	ldr	r2, [pc, #72]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001bc0:	f023 0303 	bic.w	r3, r3, #3
 8001bc4:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	4a0f      	ldr	r2, [pc, #60]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001bcc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001bd0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd2:	f7ff f869 	bl	8000ca8 <HAL_GetTick>
 8001bd6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bda:	f7ff f865 	bl	8000ca8 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e009      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_RCC_OscConfig+0x8c8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f0      	bne.n	8001bda <HAL_RCC_OscConfig+0x89a>
 8001bf8:	e001      	b.n	8001bfe <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3728      	adds	r7, #40	; 0x28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40021000 	.word	0x40021000

08001c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0c8      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c20:	4b66      	ldr	r3, [pc, #408]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d910      	bls.n	8001c50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b63      	ldr	r3, [pc, #396]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 0207 	bic.w	r2, r3, #7
 8001c36:	4961      	ldr	r1, [pc, #388]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b5f      	ldr	r3, [pc, #380]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0b0      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d04c      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d107      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c64:	4b56      	ldr	r3, [pc, #344]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d121      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e09e      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d107      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c7c:	4b50      	ldr	r3, [pc, #320]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d115      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e092      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c94:	4b4a      	ldr	r3, [pc, #296]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d109      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e086      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca4:	4b46      	ldr	r3, [pc, #280]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e07e      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cb4:	4b42      	ldr	r3, [pc, #264]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f023 0203 	bic.w	r2, r3, #3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	493f      	ldr	r1, [pc, #252]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc6:	f7fe ffef 	bl	8000ca8 <HAL_GetTick>
 8001cca:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cce:	f7fe ffeb 	bl	8000ca8 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e066      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce4:	4b36      	ldr	r3, [pc, #216]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 020c 	and.w	r2, r3, #12
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d1eb      	bne.n	8001cce <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d008      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d02:	4b2f      	ldr	r3, [pc, #188]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	492c      	ldr	r1, [pc, #176]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d14:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d210      	bcs.n	8001d44 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 0207 	bic.w	r2, r3, #7
 8001d2a:	4924      	ldr	r1, [pc, #144]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b22      	ldr	r3, [pc, #136]	; (8001dbc <HAL_RCC_ClockConfig+0x1b0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e036      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4918      	ldr	r1, [pc, #96]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d009      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d6e:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4910      	ldr	r1, [pc, #64]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d82:	f000 f825 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001d86:	4601      	mov	r1, r0
 8001d88:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	4a0c      	ldr	r2, [pc, #48]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d94:	5cd3      	ldrb	r3, [r2, r3]
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe ff2e 	bl	8000c08 <HAL_InitTick>
 8001dac:	4603      	mov	r3, r0
 8001dae:	72fb      	strb	r3, [r7, #11]

  return status;
 8001db0:	7afb      	ldrb	r3, [r7, #11]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40022000 	.word	0x40022000
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	080032f4 	.word	0x080032f4
 8001dc8:	20000010 	.word	0x20000010
 8001dcc:	20000014 	.word	0x20000014

08001dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dde:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001de8:	4b3a      	ldr	r3, [pc, #232]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0x34>
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d121      	bne.n	8001e42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d11e      	bne.n	8001e42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e04:	4b33      	ldr	r3, [pc, #204]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d107      	bne.n	8001e20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e10:	4b30      	ldr	r3, [pc, #192]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	f003 030f 	and.w	r3, r3, #15
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	e005      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e20:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e2c:	4a2a      	ldr	r2, [pc, #168]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10d      	bne.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d102      	bne.n	8001e4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e48:	4b24      	ldr	r3, [pc, #144]	; (8001edc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e4a:	61bb      	str	r3, [r7, #24]
 8001e4c:	e004      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e54:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	2b0c      	cmp	r3, #12
 8001e5c:	d133      	bne.n	8001ec6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d002      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0xa4>
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d003      	beq.n	8001e7a <HAL_RCC_GetSysClockFreq+0xaa>
 8001e72:	e005      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e76:	617b      	str	r3, [r7, #20]
      break;
 8001e78:	e005      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e7c:	617b      	str	r3, [r7, #20]
      break;
 8001e7e:	e002      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	617b      	str	r3, [r7, #20]
      break;
 8001e84:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e86:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	091b      	lsrs	r3, r3, #4
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	3301      	adds	r3, #1
 8001e92:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e94:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	fb02 f203 	mul.w	r2, r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eaa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eac:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	0e5b      	lsrs	r3, r3, #25
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ec6:	69bb      	ldr	r3, [r7, #24]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3724      	adds	r7, #36	; 0x24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	0800330c 	.word	0x0800330c
 8001edc:	00f42400 	.word	0x00f42400
 8001ee0:	007a1200 	.word	0x007a1200

08001ee4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000010 	.word	0x20000010

08001efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f00:	f7ff fff0 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
 8001f04:	4601      	mov	r1, r0
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	0a1b      	lsrs	r3, r3, #8
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f12:	5cd3      	ldrb	r3, [r2, r3]
 8001f14:	f003 031f 	and.w	r3, r3, #31
 8001f18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	08003304 	.word	0x08003304

08001f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f2c:	f7ff ffda 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
 8001f30:	4601      	mov	r1, r0
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	0adb      	lsrs	r3, r3, #11
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f3e:	5cd3      	ldrb	r3, [r2, r3]
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	08003304 	.word	0x08003304

08001f54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f60:	4b2a      	ldr	r3, [pc, #168]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f6c:	f7ff f984 	bl	8001278 <HAL_PWREx_GetVoltageRange>
 8001f70:	6178      	str	r0, [r7, #20]
 8001f72:	e014      	b.n	8001f9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f74:	4b25      	ldr	r3, [pc, #148]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	4a24      	ldr	r2, [pc, #144]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f80:	4b22      	ldr	r3, [pc, #136]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f8c:	f7ff f974 	bl	8001278 <HAL_PWREx_GetVoltageRange>
 8001f90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f92:	4b1e      	ldr	r3, [pc, #120]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f96:	4a1d      	ldr	r2, [pc, #116]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa4:	d10b      	bne.n	8001fbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b80      	cmp	r3, #128	; 0x80
 8001faa:	d919      	bls.n	8001fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2ba0      	cmp	r3, #160	; 0xa0
 8001fb0:	d902      	bls.n	8001fb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	e013      	b.n	8001fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fb8:	2301      	movs	r3, #1
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	e010      	b.n	8001fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b80      	cmp	r3, #128	; 0x80
 8001fc2:	d902      	bls.n	8001fca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	e00a      	b.n	8001fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b80      	cmp	r3, #128	; 0x80
 8001fce:	d102      	bne.n	8001fd6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	e004      	b.n	8001fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b70      	cmp	r3, #112	; 0x70
 8001fda:	d101      	bne.n	8001fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fdc:	2301      	movs	r3, #1
 8001fde:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f023 0207 	bic.w	r2, r3, #7
 8001fe8:	4909      	ldr	r1, [pc, #36]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ff0:	4b07      	ldr	r3, [pc, #28]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d001      	beq.n	8002002 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40021000 	.word	0x40021000
 8002010:	40022000 	.word	0x40022000

08002014 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800201c:	2300      	movs	r3, #0
 800201e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002020:	2300      	movs	r3, #0
 8002022:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 809e 	beq.w	800216e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002032:	2300      	movs	r3, #0
 8002034:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002036:	4b46      	ldr	r3, [pc, #280]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002046:	2300      	movs	r3, #0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00d      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800204c:	4b40      	ldr	r3, [pc, #256]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002050:	4a3f      	ldr	r2, [pc, #252]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002056:	6593      	str	r3, [r2, #88]	; 0x58
 8002058:	4b3d      	ldr	r3, [pc, #244]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002064:	2301      	movs	r3, #1
 8002066:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002068:	4b3a      	ldr	r3, [pc, #232]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a39      	ldr	r2, [pc, #228]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800206e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002072:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002074:	f7fe fe18 	bl	8000ca8 <HAL_GetTick>
 8002078:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800207a:	e009      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207c:	f7fe fe14 	bl	8000ca8 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d902      	bls.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	74fb      	strb	r3, [r7, #19]
        break;
 800208e:	e005      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002090:	4b30      	ldr	r3, [pc, #192]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0ef      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800209c:	7cfb      	ldrb	r3, [r7, #19]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d15a      	bne.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020a2:	4b2b      	ldr	r3, [pc, #172]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d01e      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d019      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020be:	4b24      	ldr	r3, [pc, #144]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020ca:	4b21      	ldr	r3, [pc, #132]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d0:	4a1f      	ldr	r2, [pc, #124]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020da:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e0:	4a1b      	ldr	r2, [pc, #108]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020ea:	4a19      	ldr	r2, [pc, #100]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d016      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7fe fdd4 	bl	8000ca8 <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002102:	e00b      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002104:	f7fe fdd0 	bl	8000ca8 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002112:	4293      	cmp	r3, r2
 8002114:	d902      	bls.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	74fb      	strb	r3, [r7, #19]
            break;
 800211a:	e006      	b.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800211e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0ec      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800212a:	7cfb      	ldrb	r3, [r7, #19]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10b      	bne.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002130:	4b07      	ldr	r3, [pc, #28]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002136:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4904      	ldr	r1, [pc, #16]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002146:	e009      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002148:	7cfb      	ldrb	r3, [r7, #19]
 800214a:	74bb      	strb	r3, [r7, #18]
 800214c:	e006      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000
 8002154:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002158:	7cfb      	ldrb	r3, [r7, #19]
 800215a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800215c:	7c7b      	ldrb	r3, [r7, #17]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d105      	bne.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002162:	4b6e      	ldr	r3, [pc, #440]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002166:	4a6d      	ldr	r2, [pc, #436]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800216c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800217a:	4b68      	ldr	r3, [pc, #416]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800217c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002180:	f023 0203 	bic.w	r2, r3, #3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	4964      	ldr	r1, [pc, #400]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800219c:	4b5f      	ldr	r3, [pc, #380]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a2:	f023 020c 	bic.w	r2, r3, #12
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	495c      	ldr	r1, [pc, #368]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021be:	4b57      	ldr	r3, [pc, #348]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4953      	ldr	r1, [pc, #332]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021e0:	4b4e      	ldr	r3, [pc, #312]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	494b      	ldr	r1, [pc, #300]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002202:	4b46      	ldr	r3, [pc, #280]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002208:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	4942      	ldr	r1, [pc, #264]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00a      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002224:	4b3d      	ldr	r3, [pc, #244]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	493a      	ldr	r1, [pc, #232]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00a      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002246:	4b35      	ldr	r3, [pc, #212]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	4931      	ldr	r1, [pc, #196]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00a      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002268:	4b2c      	ldr	r3, [pc, #176]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	4929      	ldr	r1, [pc, #164]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00a      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800228a:	4b24      	ldr	r3, [pc, #144]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800228c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002290:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	4920      	ldr	r1, [pc, #128]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d015      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022ac:	4b1b      	ldr	r3, [pc, #108]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	4918      	ldr	r1, [pc, #96]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022ca:	d105      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022cc:	4b13      	ldr	r3, [pc, #76]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4a12      	ldr	r2, [pc, #72]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d015      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022e4:	4b0d      	ldr	r3, [pc, #52]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f2:	490a      	ldr	r1, [pc, #40]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002302:	d105      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002304:	4b05      	ldr	r3, [pc, #20]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	4a04      	ldr	r2, [pc, #16]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800230a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800230e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002310:	7cbb      	ldrb	r3, [r7, #18]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000

08002320 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e040      	b.n	80023b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002336:	2b00      	cmp	r3, #0
 8002338:	d106      	bne.n	8002348 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe fb64 	bl	8000a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2224      	movs	r2, #36	; 0x24
 800234c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0201 	bic.w	r2, r2, #1
 800235c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fa7c 	bl	800285c <UART_SetConfig>
 8002364:	4603      	mov	r3, r0
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e022      	b.n	80023b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fca6 	bl	8002cc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800238a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800239a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 fd2d 	bl	8002e0c <UART_CheckIdleState>
 80023b2:	4603      	mov	r3, r0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	4613      	mov	r3, r2
 80023c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	d144      	bne.n	800245c <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <HAL_UART_Transmit_IT+0x22>
 80023d8:	88fb      	ldrh	r3, [r7, #6]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e03d      	b.n	800245e <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_UART_Transmit_IT+0x34>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e036      	b.n	800245e <HAL_UART_Transmit_IT+0xa2>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	88fa      	ldrh	r2, [r7, #6]
 8002402:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	88fa      	ldrh	r2, [r7, #6]
 800240a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2221      	movs	r2, #33	; 0x21
 800241e:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002428:	d107      	bne.n	800243a <HAL_UART_Transmit_IT+0x7e>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d103      	bne.n	800243a <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4a0d      	ldr	r2, [pc, #52]	; (800246c <HAL_UART_Transmit_IT+0xb0>)
 8002436:	665a      	str	r2, [r3, #100]	; 0x64
 8002438:	e002      	b.n	8002440 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4a0c      	ldr	r2, [pc, #48]	; (8002470 <HAL_UART_Transmit_IT+0xb4>)
 800243e:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002456:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	e000      	b.n	800245e <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800245c:	2302      	movs	r3, #2
  }
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	0800306d 	.word	0x0800306d
 8002470:	08002ff9 	.word	0x08002ff9

08002474 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	4613      	mov	r3, r2
 8002480:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002486:	2b20      	cmp	r3, #32
 8002488:	f040 808a 	bne.w	80025a0 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <HAL_UART_Receive_IT+0x24>
 8002492:	88fb      	ldrh	r3, [r7, #6]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e082      	b.n	80025a2 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_UART_Receive_IT+0x36>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e07b      	b.n	80025a2 <HAL_UART_Receive_IT+0x12e>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	88fa      	ldrh	r2, [r7, #6]
 80024bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	88fa      	ldrh	r2, [r7, #6]
 80024c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d6:	d10e      	bne.n	80024f6 <HAL_UART_Receive_IT+0x82>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d105      	bne.n	80024ec <HAL_UART_Receive_IT+0x78>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80024e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80024ea:	e02d      	b.n	8002548 <HAL_UART_Receive_IT+0xd4>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	22ff      	movs	r2, #255	; 0xff
 80024f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80024f4:	e028      	b.n	8002548 <HAL_UART_Receive_IT+0xd4>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10d      	bne.n	800251a <HAL_UART_Receive_IT+0xa6>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d104      	bne.n	8002510 <HAL_UART_Receive_IT+0x9c>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	22ff      	movs	r2, #255	; 0xff
 800250a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800250e:	e01b      	b.n	8002548 <HAL_UART_Receive_IT+0xd4>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	227f      	movs	r2, #127	; 0x7f
 8002514:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002518:	e016      	b.n	8002548 <HAL_UART_Receive_IT+0xd4>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002522:	d10d      	bne.n	8002540 <HAL_UART_Receive_IT+0xcc>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d104      	bne.n	8002536 <HAL_UART_Receive_IT+0xc2>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	227f      	movs	r2, #127	; 0x7f
 8002530:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002534:	e008      	b.n	8002548 <HAL_UART_Receive_IT+0xd4>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	223f      	movs	r2, #63	; 0x3f
 800253a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800253e:	e003      	b.n	8002548 <HAL_UART_Receive_IT+0xd4>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2222      	movs	r2, #34	; 0x22
 8002552:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0201 	orr.w	r2, r2, #1
 8002562:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800256c:	d107      	bne.n	800257e <HAL_UART_Receive_IT+0x10a>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d103      	bne.n	800257e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4a0d      	ldr	r2, [pc, #52]	; (80025b0 <HAL_UART_Receive_IT+0x13c>)
 800257a:	661a      	str	r2, [r3, #96]	; 0x60
 800257c:	e002      	b.n	8002584 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4a0c      	ldr	r2, [pc, #48]	; (80025b4 <HAL_UART_Receive_IT+0x140>)
 8002582:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800259a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	e000      	b.n	80025a2 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80025a0:	2302      	movs	r3, #2
  }
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	080031c5 	.word	0x080031c5
 80025b4:	0800311b 	.word	0x0800311b

080025b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	f640 030f 	movw	r3, #2063	; 0x80f
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d113      	bne.n	8002610 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f003 0320 	and.w	r3, r3, #32
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00e      	beq.n	8002610 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d009      	beq.n	8002610 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 8114 	beq.w	800282e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	4798      	blx	r3
      }
      return;
 800260e:	e10e      	b.n	800282e <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 80d6 	beq.w	80027c4 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d105      	bne.n	800262e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4b86      	ldr	r3, [pc, #536]	; (8002840 <HAL_UART_IRQHandler+0x288>)
 8002626:	4013      	ands	r3, r2
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 80cb 	beq.w	80027c4 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00e      	beq.n	8002656 <HAL_UART_IRQHandler+0x9e>
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	2b00      	cmp	r3, #0
 8002640:	d009      	beq.n	8002656 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2201      	movs	r2, #1
 8002648:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800264e:	f043 0201 	orr.w	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00e      	beq.n	800267e <HAL_UART_IRQHandler+0xc6>
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2202      	movs	r2, #2
 8002670:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002676:	f043 0204 	orr.w	r2, r3, #4
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00e      	beq.n	80026a6 <HAL_UART_IRQHandler+0xee>
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d009      	beq.n	80026a6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2204      	movs	r2, #4
 8002698:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800269e:	f043 0202 	orr.w	r2, r3, #2
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d104      	bne.n	80026c4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d009      	beq.n	80026d8 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2208      	movs	r2, #8
 80026ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026d0:	f043 0208 	orr.w	r2, r3, #8
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00f      	beq.n	8002702 <HAL_UART_IRQHandler+0x14a>
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026fa:	f043 0220 	orr.w	r2, r3, #32
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 8093 	beq.w	8002832 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f003 0320 	and.w	r3, r3, #32
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00c      	beq.n	8002730 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b00      	cmp	r3, #0
 800271e:	d007      	beq.n	8002730 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002734:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002740:	2b40      	cmp	r3, #64	; 0x40
 8002742:	d004      	beq.n	800274e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800274a:	2b00      	cmp	r3, #0
 800274c:	d031      	beq.n	80027b2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 fc1c 	bl	8002f8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275e:	2b40      	cmp	r3, #64	; 0x40
 8002760:	d123      	bne.n	80027aa <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002770:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d013      	beq.n	80027a2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800277e:	4a31      	ldr	r2, [pc, #196]	; (8002844 <HAL_UART_IRQHandler+0x28c>)
 8002780:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002786:	4618      	mov	r0, r3
 8002788:	f7fe fbab 	bl	8000ee2 <HAL_DMA_Abort_IT>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d016      	beq.n	80027c0 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800279c:	4610      	mov	r0, r2
 800279e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027a0:	e00e      	b.n	80027c0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f850 	bl	8002848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027a8:	e00a      	b.n	80027c0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f84c 	bl	8002848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027b0:	e006      	b.n	80027c0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f848 	bl	8002848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80027be:	e038      	b.n	8002832 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c0:	bf00      	nop
    return;
 80027c2:	e036      	b.n	8002832 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00d      	beq.n	80027ea <HAL_UART_IRQHandler+0x232>
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 fd43 	bl	800326e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80027e8:	e026      	b.n	8002838 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00d      	beq.n	8002810 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d008      	beq.n	8002810 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002802:	2b00      	cmp	r3, #0
 8002804:	d017      	beq.n	8002836 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	4798      	blx	r3
    }
    return;
 800280e:	e012      	b.n	8002836 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00e      	beq.n	8002838 <HAL_UART_IRQHandler+0x280>
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002820:	2b00      	cmp	r3, #0
 8002822:	d009      	beq.n	8002838 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fc5f 	bl	80030e8 <UART_EndTransmit_IT>
    return;
 800282a:	bf00      	nop
 800282c:	e004      	b.n	8002838 <HAL_UART_IRQHandler+0x280>
      return;
 800282e:	bf00      	nop
 8002830:	e002      	b.n	8002838 <HAL_UART_IRQHandler+0x280>
    return;
 8002832:	bf00      	nop
 8002834:	e000      	b.n	8002838 <HAL_UART_IRQHandler+0x280>
    return;
 8002836:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	04000120 	.word	0x04000120
 8002844:	08002fcd 	.word	0x08002fcd

08002848 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800285c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002860:	b088      	sub	sp, #32
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	431a      	orrs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	4313      	orrs	r3, r2
 8002880:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4baa      	ldr	r3, [pc, #680]	; (8002b34 <UART_SetConfig+0x2d8>)
 800288a:	4013      	ands	r3, r2
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	69f9      	ldr	r1, [r7, #28]
 8002892:	430b      	orrs	r3, r1
 8002894:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4aa0      	ldr	r2, [pc, #640]	; (8002b38 <UART_SetConfig+0x2dc>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d004      	beq.n	80028c6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a97      	ldr	r2, [pc, #604]	; (8002b3c <UART_SetConfig+0x2e0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d121      	bne.n	8002928 <UART_SetConfig+0xcc>
 80028e4:	4b96      	ldr	r3, [pc, #600]	; (8002b40 <UART_SetConfig+0x2e4>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d816      	bhi.n	8002920 <UART_SetConfig+0xc4>
 80028f2:	a201      	add	r2, pc, #4	; (adr r2, 80028f8 <UART_SetConfig+0x9c>)
 80028f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f8:	08002909 	.word	0x08002909
 80028fc:	08002915 	.word	0x08002915
 8002900:	0800290f 	.word	0x0800290f
 8002904:	0800291b 	.word	0x0800291b
 8002908:	2301      	movs	r3, #1
 800290a:	76fb      	strb	r3, [r7, #27]
 800290c:	e098      	b.n	8002a40 <UART_SetConfig+0x1e4>
 800290e:	2302      	movs	r3, #2
 8002910:	76fb      	strb	r3, [r7, #27]
 8002912:	e095      	b.n	8002a40 <UART_SetConfig+0x1e4>
 8002914:	2304      	movs	r3, #4
 8002916:	76fb      	strb	r3, [r7, #27]
 8002918:	e092      	b.n	8002a40 <UART_SetConfig+0x1e4>
 800291a:	2308      	movs	r3, #8
 800291c:	76fb      	strb	r3, [r7, #27]
 800291e:	e08f      	b.n	8002a40 <UART_SetConfig+0x1e4>
 8002920:	2310      	movs	r3, #16
 8002922:	76fb      	strb	r3, [r7, #27]
 8002924:	bf00      	nop
 8002926:	e08b      	b.n	8002a40 <UART_SetConfig+0x1e4>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a85      	ldr	r2, [pc, #532]	; (8002b44 <UART_SetConfig+0x2e8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d134      	bne.n	800299c <UART_SetConfig+0x140>
 8002932:	4b83      	ldr	r3, [pc, #524]	; (8002b40 <UART_SetConfig+0x2e4>)
 8002934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002938:	f003 030c 	and.w	r3, r3, #12
 800293c:	2b0c      	cmp	r3, #12
 800293e:	d829      	bhi.n	8002994 <UART_SetConfig+0x138>
 8002940:	a201      	add	r2, pc, #4	; (adr r2, 8002948 <UART_SetConfig+0xec>)
 8002942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002946:	bf00      	nop
 8002948:	0800297d 	.word	0x0800297d
 800294c:	08002995 	.word	0x08002995
 8002950:	08002995 	.word	0x08002995
 8002954:	08002995 	.word	0x08002995
 8002958:	08002989 	.word	0x08002989
 800295c:	08002995 	.word	0x08002995
 8002960:	08002995 	.word	0x08002995
 8002964:	08002995 	.word	0x08002995
 8002968:	08002983 	.word	0x08002983
 800296c:	08002995 	.word	0x08002995
 8002970:	08002995 	.word	0x08002995
 8002974:	08002995 	.word	0x08002995
 8002978:	0800298f 	.word	0x0800298f
 800297c:	2300      	movs	r3, #0
 800297e:	76fb      	strb	r3, [r7, #27]
 8002980:	e05e      	b.n	8002a40 <UART_SetConfig+0x1e4>
 8002982:	2302      	movs	r3, #2
 8002984:	76fb      	strb	r3, [r7, #27]
 8002986:	e05b      	b.n	8002a40 <UART_SetConfig+0x1e4>
 8002988:	2304      	movs	r3, #4
 800298a:	76fb      	strb	r3, [r7, #27]
 800298c:	e058      	b.n	8002a40 <UART_SetConfig+0x1e4>
 800298e:	2308      	movs	r3, #8
 8002990:	76fb      	strb	r3, [r7, #27]
 8002992:	e055      	b.n	8002a40 <UART_SetConfig+0x1e4>
 8002994:	2310      	movs	r3, #16
 8002996:	76fb      	strb	r3, [r7, #27]
 8002998:	bf00      	nop
 800299a:	e051      	b.n	8002a40 <UART_SetConfig+0x1e4>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a69      	ldr	r2, [pc, #420]	; (8002b48 <UART_SetConfig+0x2ec>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d120      	bne.n	80029e8 <UART_SetConfig+0x18c>
 80029a6:	4b66      	ldr	r3, [pc, #408]	; (8002b40 <UART_SetConfig+0x2e4>)
 80029a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80029b0:	2b10      	cmp	r3, #16
 80029b2:	d00f      	beq.n	80029d4 <UART_SetConfig+0x178>
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	d802      	bhi.n	80029be <UART_SetConfig+0x162>
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <UART_SetConfig+0x16c>
 80029bc:	e010      	b.n	80029e0 <UART_SetConfig+0x184>
 80029be:	2b20      	cmp	r3, #32
 80029c0:	d005      	beq.n	80029ce <UART_SetConfig+0x172>
 80029c2:	2b30      	cmp	r3, #48	; 0x30
 80029c4:	d009      	beq.n	80029da <UART_SetConfig+0x17e>
 80029c6:	e00b      	b.n	80029e0 <UART_SetConfig+0x184>
 80029c8:	2300      	movs	r3, #0
 80029ca:	76fb      	strb	r3, [r7, #27]
 80029cc:	e038      	b.n	8002a40 <UART_SetConfig+0x1e4>
 80029ce:	2302      	movs	r3, #2
 80029d0:	76fb      	strb	r3, [r7, #27]
 80029d2:	e035      	b.n	8002a40 <UART_SetConfig+0x1e4>
 80029d4:	2304      	movs	r3, #4
 80029d6:	76fb      	strb	r3, [r7, #27]
 80029d8:	e032      	b.n	8002a40 <UART_SetConfig+0x1e4>
 80029da:	2308      	movs	r3, #8
 80029dc:	76fb      	strb	r3, [r7, #27]
 80029de:	e02f      	b.n	8002a40 <UART_SetConfig+0x1e4>
 80029e0:	2310      	movs	r3, #16
 80029e2:	76fb      	strb	r3, [r7, #27]
 80029e4:	bf00      	nop
 80029e6:	e02b      	b.n	8002a40 <UART_SetConfig+0x1e4>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a52      	ldr	r2, [pc, #328]	; (8002b38 <UART_SetConfig+0x2dc>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d124      	bne.n	8002a3c <UART_SetConfig+0x1e0>
 80029f2:	4b53      	ldr	r3, [pc, #332]	; (8002b40 <UART_SetConfig+0x2e4>)
 80029f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a00:	d012      	beq.n	8002a28 <UART_SetConfig+0x1cc>
 8002a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a06:	d802      	bhi.n	8002a0e <UART_SetConfig+0x1b2>
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <UART_SetConfig+0x1c0>
 8002a0c:	e012      	b.n	8002a34 <UART_SetConfig+0x1d8>
 8002a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a12:	d006      	beq.n	8002a22 <UART_SetConfig+0x1c6>
 8002a14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a18:	d009      	beq.n	8002a2e <UART_SetConfig+0x1d2>
 8002a1a:	e00b      	b.n	8002a34 <UART_SetConfig+0x1d8>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	76fb      	strb	r3, [r7, #27]
 8002a20:	e00e      	b.n	8002a40 <UART_SetConfig+0x1e4>
 8002a22:	2302      	movs	r3, #2
 8002a24:	76fb      	strb	r3, [r7, #27]
 8002a26:	e00b      	b.n	8002a40 <UART_SetConfig+0x1e4>
 8002a28:	2304      	movs	r3, #4
 8002a2a:	76fb      	strb	r3, [r7, #27]
 8002a2c:	e008      	b.n	8002a40 <UART_SetConfig+0x1e4>
 8002a2e:	2308      	movs	r3, #8
 8002a30:	76fb      	strb	r3, [r7, #27]
 8002a32:	e005      	b.n	8002a40 <UART_SetConfig+0x1e4>
 8002a34:	2310      	movs	r3, #16
 8002a36:	76fb      	strb	r3, [r7, #27]
 8002a38:	bf00      	nop
 8002a3a:	e001      	b.n	8002a40 <UART_SetConfig+0x1e4>
 8002a3c:	2310      	movs	r3, #16
 8002a3e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a3c      	ldr	r2, [pc, #240]	; (8002b38 <UART_SetConfig+0x2dc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	f040 8082 	bne.w	8002b50 <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a4c:	7efb      	ldrb	r3, [r7, #27]
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d823      	bhi.n	8002a9a <UART_SetConfig+0x23e>
 8002a52:	a201      	add	r2, pc, #4	; (adr r2, 8002a58 <UART_SetConfig+0x1fc>)
 8002a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a58:	08002a7d 	.word	0x08002a7d
 8002a5c:	08002a9b 	.word	0x08002a9b
 8002a60:	08002a85 	.word	0x08002a85
 8002a64:	08002a9b 	.word	0x08002a9b
 8002a68:	08002a8b 	.word	0x08002a8b
 8002a6c:	08002a9b 	.word	0x08002a9b
 8002a70:	08002a9b 	.word	0x08002a9b
 8002a74:	08002a9b 	.word	0x08002a9b
 8002a78:	08002a93 	.word	0x08002a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a7c:	f7ff fa3e 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 8002a80:	6178      	str	r0, [r7, #20]
        break;
 8002a82:	e00f      	b.n	8002aa4 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a84:	4b31      	ldr	r3, [pc, #196]	; (8002b4c <UART_SetConfig+0x2f0>)
 8002a86:	617b      	str	r3, [r7, #20]
        break;
 8002a88:	e00c      	b.n	8002aa4 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a8a:	f7ff f9a1 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8002a8e:	6178      	str	r0, [r7, #20]
        break;
 8002a90:	e008      	b.n	8002aa4 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a96:	617b      	str	r3, [r7, #20]
        break;
 8002a98:	e004      	b.n	8002aa4 <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	76bb      	strb	r3, [r7, #26]
        break;
 8002aa2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 8100 	beq.w	8002cac <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4413      	add	r3, r2
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d305      	bcc.n	8002ac8 <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d902      	bls.n	8002ace <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	76bb      	strb	r3, [r7, #26]
 8002acc:	e0ee      	b.n	8002cac <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	f04f 0400 	mov.w	r4, #0
 8002ade:	0214      	lsls	r4, r2, #8
 8002ae0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002ae4:	020b      	lsls	r3, r1, #8
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6852      	ldr	r2, [r2, #4]
 8002aea:	0852      	lsrs	r2, r2, #1
 8002aec:	4611      	mov	r1, r2
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	eb13 0b01 	adds.w	fp, r3, r1
 8002af6:	eb44 0c02 	adc.w	ip, r4, r2
 8002afa:	4658      	mov	r0, fp
 8002afc:	4661      	mov	r1, ip
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f04f 0400 	mov.w	r4, #0
 8002b06:	461a      	mov	r2, r3
 8002b08:	4623      	mov	r3, r4
 8002b0a:	f7fd fb5f 	bl	80001cc <__aeabi_uldivmod>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	460c      	mov	r4, r1
 8002b12:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b1a:	d308      	bcc.n	8002b2e <UART_SetConfig+0x2d2>
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b22:	d204      	bcs.n	8002b2e <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	60da      	str	r2, [r3, #12]
 8002b2c:	e0be      	b.n	8002cac <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	76bb      	strb	r3, [r7, #26]
 8002b32:	e0bb      	b.n	8002cac <UART_SetConfig+0x450>
 8002b34:	efff69f3 	.word	0xefff69f3
 8002b38:	40008000 	.word	0x40008000
 8002b3c:	40013800 	.word	0x40013800
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40004400 	.word	0x40004400
 8002b48:	40004800 	.word	0x40004800
 8002b4c:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b58:	d15c      	bne.n	8002c14 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8002b5a:	7efb      	ldrb	r3, [r7, #27]
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d828      	bhi.n	8002bb2 <UART_SetConfig+0x356>
 8002b60:	a201      	add	r2, pc, #4	; (adr r2, 8002b68 <UART_SetConfig+0x30c>)
 8002b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b66:	bf00      	nop
 8002b68:	08002b8d 	.word	0x08002b8d
 8002b6c:	08002b95 	.word	0x08002b95
 8002b70:	08002b9d 	.word	0x08002b9d
 8002b74:	08002bb3 	.word	0x08002bb3
 8002b78:	08002ba3 	.word	0x08002ba3
 8002b7c:	08002bb3 	.word	0x08002bb3
 8002b80:	08002bb3 	.word	0x08002bb3
 8002b84:	08002bb3 	.word	0x08002bb3
 8002b88:	08002bab 	.word	0x08002bab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b8c:	f7ff f9b6 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 8002b90:	6178      	str	r0, [r7, #20]
        break;
 8002b92:	e013      	b.n	8002bbc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b94:	f7ff f9c8 	bl	8001f28 <HAL_RCC_GetPCLK2Freq>
 8002b98:	6178      	str	r0, [r7, #20]
        break;
 8002b9a:	e00f      	b.n	8002bbc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b9c:	4b49      	ldr	r3, [pc, #292]	; (8002cc4 <UART_SetConfig+0x468>)
 8002b9e:	617b      	str	r3, [r7, #20]
        break;
 8002ba0:	e00c      	b.n	8002bbc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ba2:	f7ff f915 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8002ba6:	6178      	str	r0, [r7, #20]
        break;
 8002ba8:	e008      	b.n	8002bbc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bae:	617b      	str	r3, [r7, #20]
        break;
 8002bb0:	e004      	b.n	8002bbc <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	76bb      	strb	r3, [r7, #26]
        break;
 8002bba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d074      	beq.n	8002cac <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	005a      	lsls	r2, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	085b      	lsrs	r3, r3, #1
 8002bcc:	441a      	add	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	2b0f      	cmp	r3, #15
 8002bde:	d916      	bls.n	8002c0e <UART_SetConfig+0x3b2>
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be6:	d212      	bcs.n	8002c0e <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	f023 030f 	bic.w	r3, r3, #15
 8002bf0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	085b      	lsrs	r3, r3, #1
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	89fb      	ldrh	r3, [r7, #14]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	89fa      	ldrh	r2, [r7, #14]
 8002c0a:	60da      	str	r2, [r3, #12]
 8002c0c:	e04e      	b.n	8002cac <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	76bb      	strb	r3, [r7, #26]
 8002c12:	e04b      	b.n	8002cac <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c14:	7efb      	ldrb	r3, [r7, #27]
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d827      	bhi.n	8002c6a <UART_SetConfig+0x40e>
 8002c1a:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <UART_SetConfig+0x3c4>)
 8002c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c20:	08002c45 	.word	0x08002c45
 8002c24:	08002c4d 	.word	0x08002c4d
 8002c28:	08002c55 	.word	0x08002c55
 8002c2c:	08002c6b 	.word	0x08002c6b
 8002c30:	08002c5b 	.word	0x08002c5b
 8002c34:	08002c6b 	.word	0x08002c6b
 8002c38:	08002c6b 	.word	0x08002c6b
 8002c3c:	08002c6b 	.word	0x08002c6b
 8002c40:	08002c63 	.word	0x08002c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c44:	f7ff f95a 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 8002c48:	6178      	str	r0, [r7, #20]
        break;
 8002c4a:	e013      	b.n	8002c74 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c4c:	f7ff f96c 	bl	8001f28 <HAL_RCC_GetPCLK2Freq>
 8002c50:	6178      	str	r0, [r7, #20]
        break;
 8002c52:	e00f      	b.n	8002c74 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c54:	4b1b      	ldr	r3, [pc, #108]	; (8002cc4 <UART_SetConfig+0x468>)
 8002c56:	617b      	str	r3, [r7, #20]
        break;
 8002c58:	e00c      	b.n	8002c74 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c5a:	f7ff f8b9 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8002c5e:	6178      	str	r0, [r7, #20]
        break;
 8002c60:	e008      	b.n	8002c74 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c66:	617b      	str	r3, [r7, #20]
        break;
 8002c68:	e004      	b.n	8002c74 <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	76bb      	strb	r3, [r7, #26]
        break;
 8002c72:	bf00      	nop
    }

    if (pclk != 0U)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d018      	beq.n	8002cac <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	085a      	lsrs	r2, r3, #1
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	441a      	add	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	2b0f      	cmp	r3, #15
 8002c94:	d908      	bls.n	8002ca8 <UART_SetConfig+0x44c>
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9c:	d204      	bcs.n	8002ca8 <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	60da      	str	r2, [r3, #12]
 8002ca6:	e001      	b.n	8002cac <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002cb8:	7ebb      	ldrb	r3, [r7, #26]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3720      	adds	r7, #32
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002cc4:	00f42400 	.word	0x00f42400

08002cc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00a      	beq.n	8002d7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d01a      	beq.n	8002dde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dc6:	d10a      	bne.n	8002dde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	605a      	str	r2, [r3, #4]
  }
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002e1a:	f7fd ff45 	bl	8000ca8 <HAL_GetTick>
 8002e1e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d10e      	bne.n	8002e4c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f82a 	bl	8002e96 <UART_WaitOnFlagUntilTimeout>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e020      	b.n	8002e8e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d10e      	bne.n	8002e78 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f814 	bl	8002e96 <UART_WaitOnFlagUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e00a      	b.n	8002e8e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2220      	movs	r2, #32
 8002e82:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	603b      	str	r3, [r7, #0]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ea6:	e05d      	b.n	8002f64 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eae:	d059      	beq.n	8002f64 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb0:	f7fd fefa 	bl	8000ca8 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d302      	bcc.n	8002ec6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d11b      	bne.n	8002efe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ed4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0201 	bic.w	r2, r2, #1
 8002ee4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e042      	b.n	8002f84 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d02b      	beq.n	8002f64 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f1a:	d123      	bne.n	8002f64 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f24:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f34:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0201 	bic.w	r2, r2, #1
 8002f44:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2220      	movs	r2, #32
 8002f56:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e00f      	b.n	8002f84 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	69da      	ldr	r2, [r3, #28]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	bf0c      	ite	eq
 8002f74:	2301      	moveq	r3, #1
 8002f76:	2300      	movne	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d092      	beq.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fa2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0201 	bic.w	r2, r2, #1
 8002fb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	661a      	str	r2, [r3, #96]	; 0x60
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f7ff fc2c 	bl	8002848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ff0:	bf00      	nop
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003004:	2b21      	cmp	r3, #33	; 0x21
 8003006:	d12b      	bne.n	8003060 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d110      	bne.n	8003036 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003022:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003032:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003034:	e014      	b.n	8003060 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303a:	781a      	ldrb	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	b292      	uxth	r2, r2
 8003042:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003054:	b29b      	uxth	r3, r3
 8003056:	3b01      	subs	r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003078:	2b21      	cmp	r3, #33	; 0x21
 800307a:	d12f      	bne.n	80030dc <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d110      	bne.n	80030aa <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003096:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030a6:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80030a8:	e018      	b.n	80030dc <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	881a      	ldrh	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030bc:	b292      	uxth	r2, r2
 80030be:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c4:	1c9a      	adds	r2, r3, #2
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030fe:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2220      	movs	r2, #32
 8003104:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7fd fb29 	bl	8000764 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003128:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800312e:	2b22      	cmp	r3, #34	; 0x22
 8003130:	d13a      	bne.n	80031a8 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003138:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800313a:	89bb      	ldrh	r3, [r7, #12]
 800313c:	b2d9      	uxtb	r1, r3
 800313e:	89fb      	ldrh	r3, [r7, #14]
 8003140:	b2da      	uxtb	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003146:	400a      	ands	r2, r1
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800315c:	b29b      	uxth	r3, r3
 800315e:	3b01      	subs	r3, #1
 8003160:	b29a      	uxth	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d123      	bne.n	80031bc <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003182:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2220      	movs	r2, #32
 8003198:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7fd fb03 	bl	80007ac <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80031a6:	e009      	b.n	80031bc <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	8b1b      	ldrh	r3, [r3, #24]
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0208 	orr.w	r2, r2, #8
 80031b8:	b292      	uxth	r2, r2
 80031ba:	831a      	strh	r2, [r3, #24]
}
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80031d2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031d8:	2b22      	cmp	r3, #34	; 0x22
 80031da:	d13a      	bne.n	8003252 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80031e2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80031ea:	89ba      	ldrh	r2, [r7, #12]
 80031ec:	89fb      	ldrh	r3, [r7, #14]
 80031ee:	4013      	ands	r3, r2
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fa:	1c9a      	adds	r2, r3, #2
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d123      	bne.n	8003266 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800322c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0201 	bic.w	r2, r2, #1
 800323c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2220      	movs	r2, #32
 8003242:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7fd faae 	bl	80007ac <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003250:	e009      	b.n	8003266 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	8b1b      	ldrh	r3, [r3, #24]
 8003258:	b29a      	uxth	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0208 	orr.w	r2, r2, #8
 8003262:	b292      	uxth	r2, r2
 8003264:	831a      	strh	r2, [r3, #24]
}
 8003266:	bf00      	nop
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <__libc_init_array>:
 8003284:	b570      	push	{r4, r5, r6, lr}
 8003286:	4e0d      	ldr	r6, [pc, #52]	; (80032bc <__libc_init_array+0x38>)
 8003288:	4c0d      	ldr	r4, [pc, #52]	; (80032c0 <__libc_init_array+0x3c>)
 800328a:	1ba4      	subs	r4, r4, r6
 800328c:	10a4      	asrs	r4, r4, #2
 800328e:	2500      	movs	r5, #0
 8003290:	42a5      	cmp	r5, r4
 8003292:	d109      	bne.n	80032a8 <__libc_init_array+0x24>
 8003294:	4e0b      	ldr	r6, [pc, #44]	; (80032c4 <__libc_init_array+0x40>)
 8003296:	4c0c      	ldr	r4, [pc, #48]	; (80032c8 <__libc_init_array+0x44>)
 8003298:	f000 f820 	bl	80032dc <_init>
 800329c:	1ba4      	subs	r4, r4, r6
 800329e:	10a4      	asrs	r4, r4, #2
 80032a0:	2500      	movs	r5, #0
 80032a2:	42a5      	cmp	r5, r4
 80032a4:	d105      	bne.n	80032b2 <__libc_init_array+0x2e>
 80032a6:	bd70      	pop	{r4, r5, r6, pc}
 80032a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032ac:	4798      	blx	r3
 80032ae:	3501      	adds	r5, #1
 80032b0:	e7ee      	b.n	8003290 <__libc_init_array+0xc>
 80032b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032b6:	4798      	blx	r3
 80032b8:	3501      	adds	r5, #1
 80032ba:	e7f2      	b.n	80032a2 <__libc_init_array+0x1e>
 80032bc:	08003344 	.word	0x08003344
 80032c0:	08003344 	.word	0x08003344
 80032c4:	08003344 	.word	0x08003344
 80032c8:	08003348 	.word	0x08003348

080032cc <memset>:
 80032cc:	4402      	add	r2, r0
 80032ce:	4603      	mov	r3, r0
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d100      	bne.n	80032d6 <memset+0xa>
 80032d4:	4770      	bx	lr
 80032d6:	f803 1b01 	strb.w	r1, [r3], #1
 80032da:	e7f9      	b.n	80032d0 <memset+0x4>

080032dc <_init>:
 80032dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032de:	bf00      	nop
 80032e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032e2:	bc08      	pop	{r3}
 80032e4:	469e      	mov	lr, r3
 80032e6:	4770      	bx	lr

080032e8 <_fini>:
 80032e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ea:	bf00      	nop
 80032ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ee:	bc08      	pop	{r3}
 80032f0:	469e      	mov	lr, r3
 80032f2:	4770      	bx	lr
