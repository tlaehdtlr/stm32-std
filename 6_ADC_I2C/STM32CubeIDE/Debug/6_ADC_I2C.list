
6_ADC_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f74  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004100  08004100  00014100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041c4  080041c4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080041c4  080041c4  000141c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041cc  080041cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041cc  080041cc  000141cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041d0  080041d0  000141d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080041d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000070  08004244  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08004244  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001154c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002402  00000000  00000000  000315ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf8  00000000  00000000  000339f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc0  00000000  00000000  000346e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b45e  00000000  00000000  000352a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bf24  00000000  00000000  00050706  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a2e98  00000000  00000000  0005c62a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ff4c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003964  00000000  00000000  000ff540  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000070 	.word	0x20000070
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080040e8 	.word	0x080040e8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000074 	.word	0x20000074
 80001c8:	080040e8 	.word	0x080040e8

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 030c 	add.w	r3, r7, #12
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e2:	4b18      	ldr	r3, [pc, #96]	; (8000544 <MX_GPIO_Init+0x78>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	4a17      	ldr	r2, [pc, #92]	; (8000544 <MX_GPIO_Init+0x78>)
 80004e8:	f043 0302 	orr.w	r3, r3, #2
 80004ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <MX_GPIO_Init+0x78>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	f003 0302 	and.w	r3, r3, #2
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b12      	ldr	r3, [pc, #72]	; (8000544 <MX_GPIO_Init+0x78>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a11      	ldr	r2, [pc, #68]	; (8000544 <MX_GPIO_Init+0x78>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <MX_GPIO_Init+0x78>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000518:	480b      	ldr	r0, [pc, #44]	; (8000548 <MX_GPIO_Init+0x7c>)
 800051a:	f000 fdf9 	bl	8001110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800051e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000522:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000524:	2301      	movs	r3, #1
 8000526:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052c:	2300      	movs	r3, #0
 800052e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	4619      	mov	r1, r3
 8000536:	4804      	ldr	r0, [pc, #16]	; (8000548 <MX_GPIO_Init+0x7c>)
 8000538:	f000 fc78 	bl	8000e2c <HAL_GPIO_Init>

}
 800053c:	bf00      	nop
 800053e:	3720      	adds	r7, #32
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40021000 	.word	0x40021000
 8000548:	48000400 	.word	0x48000400

0800054c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000550:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <MX_I2C1_Init+0x74>)
 8000552:	4a1c      	ldr	r2, [pc, #112]	; (80005c4 <MX_I2C1_Init+0x78>)
 8000554:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000556:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <MX_I2C1_Init+0x74>)
 8000558:	f640 6214 	movw	r2, #3604	; 0xe14
 800055c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800055e:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <MX_I2C1_Init+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000564:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <MX_I2C1_Init+0x74>)
 8000566:	2201      	movs	r2, #1
 8000568:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_I2C1_Init+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000570:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <MX_I2C1_Init+0x74>)
 8000572:	2200      	movs	r2, #0
 8000574:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <MX_I2C1_Init+0x74>)
 8000578:	2200      	movs	r2, #0
 800057a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800057c:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <MX_I2C1_Init+0x74>)
 800057e:	2200      	movs	r2, #0
 8000580:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <MX_I2C1_Init+0x74>)
 8000584:	2200      	movs	r2, #0
 8000586:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000588:	480d      	ldr	r0, [pc, #52]	; (80005c0 <MX_I2C1_Init+0x74>)
 800058a:	f000 fdf3 	bl	8001174 <HAL_I2C_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000594:	f000 f903 	bl	800079e <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000598:	2100      	movs	r1, #0
 800059a:	4809      	ldr	r0, [pc, #36]	; (80005c0 <MX_I2C1_Init+0x74>)
 800059c:	f001 fa44 	bl	8001a28 <HAL_I2CEx_ConfigAnalogFilter>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80005a6:	f000 f8fa 	bl	800079e <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005aa:	2100      	movs	r1, #0
 80005ac:	4804      	ldr	r0, [pc, #16]	; (80005c0 <MX_I2C1_Init+0x74>)
 80005ae:	f001 fa86 	bl	8001abe <HAL_I2CEx_ConfigDigitalFilter>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80005b8:	f000 f8f1 	bl	800079e <Error_Handler>
  }

}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000098 	.word	0x20000098
 80005c4:	40005400 	.word	0x40005400

080005c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a17      	ldr	r2, [pc, #92]	; (8000644 <HAL_I2C_MspInit+0x7c>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d128      	bne.n	800063c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	4b17      	ldr	r3, [pc, #92]	; (8000648 <HAL_I2C_MspInit+0x80>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	4a16      	ldr	r2, [pc, #88]	; (8000648 <HAL_I2C_MspInit+0x80>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <HAL_I2C_MspInit+0x80>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000602:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000608:	2312      	movs	r3, #18
 800060a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800060c:	2301      	movs	r3, #1
 800060e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000610:	2303      	movs	r3, #3
 8000612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000614:	2304      	movs	r3, #4
 8000616:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	4619      	mov	r1, r3
 800061e:	480b      	ldr	r0, [pc, #44]	; (800064c <HAL_I2C_MspInit+0x84>)
 8000620:	f000 fc04 	bl	8000e2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <HAL_I2C_MspInit+0x80>)
 8000626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000628:	4a07      	ldr	r2, [pc, #28]	; (8000648 <HAL_I2C_MspInit+0x80>)
 800062a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800062e:	6593      	str	r3, [r2, #88]	; 0x58
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <HAL_I2C_MspInit+0x80>)
 8000632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800063c:	bf00      	nop
 800063e:	3728      	adds	r7, #40	; 0x28
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40005400 	.word	0x40005400
 8000648:	40021000 	.word	0x40021000
 800064c:	48000400 	.word	0x48000400

08000650 <__io_putchar>:
#else
    #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000658:	1d39      	adds	r1, r7, #4
 800065a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800065e:	2201      	movs	r2, #1
 8000660:	4803      	ldr	r0, [pc, #12]	; (8000670 <__io_putchar+0x20>)
 8000662:	f002 fb1b 	bl	8002c9c <HAL_UART_Transmit>
  return ch;
 8000666:	687b      	ldr	r3, [r7, #4]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200000e4 	.word	0x200000e4

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000678:	f000 fa5c 	bl	8000b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067c:	f000 f832 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000680:	f7ff ff24 	bl	80004cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000684:	f000 f982 	bl	800098c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000688:	f7ff ff60 	bl	800054c <MX_I2C1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if 1
  printf("start!! \r\n");
 800068c:	4810      	ldr	r0, [pc, #64]	; (80006d0 <main+0x5c>)
 800068e:	f003 f91f 	bl	80038d0 <puts>
  MAX30100_Init(&hi2c1, &huart1);
 8000692:	4910      	ldr	r1, [pc, #64]	; (80006d4 <main+0x60>)
 8000694:	4810      	ldr	r0, [pc, #64]	; (80006d8 <main+0x64>)
 8000696:	f002 ff2d 	bl	80034f4 <MAX30100_Init>
  MAX30100_SetSpO2SampleRate(MAX30100_SPO2SR_DEFAULT);
 800069a:	2001      	movs	r0, #1
 800069c:	f003 f804 	bl	80036a8 <MAX30100_SetSpO2SampleRate>
  MAX30100_SetLEDPulseWidth(MAX30100_LEDPW_DEFAULT);
 80006a0:	2003      	movs	r0, #3
 80006a2:	f003 f822 	bl	80036ea <MAX30100_SetLEDPulseWidth>
  MAX30100_SetLEDCurrent(MAX30100_LEDCURRENT_DEFAULT, MAX30100_LEDCURRENT_DEFAULT);
 80006a6:	210f      	movs	r1, #15
 80006a8:	200f      	movs	r0, #15
 80006aa:	f003 f83f 	bl	800372c <MAX30100_SetLEDCurrent>
  MAX30100_SetMode(MAX30100_SPO2_MODE);
 80006ae:	2003      	movs	r0, #3
 80006b0:	f002 ffae 	bl	8003610 <MAX30100_SetMode>
#else
#endif
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80006b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b8:	4808      	ldr	r0, [pc, #32]	; (80006dc <main+0x68>)
 80006ba:	f000 fd41 	bl	8001140 <HAL_GPIO_TogglePin>
    printf("running~ \r\n");
 80006be:	4808      	ldr	r0, [pc, #32]	; (80006e0 <main+0x6c>)
 80006c0:	f003 f906 	bl	80038d0 <puts>
    HAL_Delay(1000);
 80006c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c8:	f000 faa8 	bl	8000c1c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80006cc:	e7f2      	b.n	80006b4 <main+0x40>
 80006ce:	bf00      	nop
 80006d0:	08004100 	.word	0x08004100
 80006d4:	200000e4 	.word	0x200000e4
 80006d8:	20000098 	.word	0x20000098
 80006dc:	48000400 	.word	0x48000400
 80006e0:	0800410c 	.word	0x0800410c

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b0a4      	sub	sp, #144	; 0x90
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006ee:	2244      	movs	r2, #68	; 0x44
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 f888 	bl	8003808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2234      	movs	r2, #52	; 0x34
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f003 f87a 	bl	8003808 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000714:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000718:	f001 fa2c 	bl	8001b74 <HAL_PWREx_ControlVoltageScaling>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000722:	f000 f83c 	bl	800079e <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000726:	2310      	movs	r3, #16
 8000728:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800072a:	2301      	movs	r3, #1
 800072c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000732:	2360      	movs	r3, #96	; 0x60
 8000734:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000736:	2300      	movs	r3, #0
 8000738:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800073e:	4618      	mov	r0, r3
 8000740:	f001 fa6e 	bl	8001c20 <HAL_RCC_OscConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800074a:	f000 f828 	bl	800079e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074e:	230f      	movs	r3, #15
 8000750:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000752:	2300      	movs	r3, #0
 8000754:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000762:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f001 febf 	bl	80024ec <HAL_RCC_ClockConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000774:	f000 f813 	bl	800079e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000778:	2341      	movs	r3, #65	; 0x41
 800077a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	4618      	mov	r0, r3
 8000788:	f002 f8b4 	bl	80028f4 <HAL_RCCEx_PeriphCLKConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000792:	f000 f804 	bl	800079e <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3790      	adds	r7, #144	; 0x90
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a2:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <Error_Handler+0x6>
	...

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <HAL_MspInit+0x44>)
 80007b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007b2:	4a0e      	ldr	r2, [pc, #56]	; (80007ec <HAL_MspInit+0x44>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6613      	str	r3, [r2, #96]	; 0x60
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <HAL_MspInit+0x44>)
 80007bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <HAL_MspInit+0x44>)
 80007c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <HAL_MspInit+0x44>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d0:	6593      	str	r3, [r2, #88]	; 0x58
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_MspInit+0x44>)
 80007d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000

080007f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <NMI_Handler+0x4>

080007f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <HardFault_Handler+0x4>

080007fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <MemManage_Handler+0x4>

08000802 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <BusFault_Handler+0x4>

08000808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800080c:	e7fe      	b.n	800080c <UsageFault_Handler+0x4>

0800080e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083c:	f000 f9ce 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	e00a      	b.n	800086c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000856:	f3af 8000 	nop.w
 800085a:	4601      	mov	r1, r0
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	1c5a      	adds	r2, r3, #1
 8000860:	60ba      	str	r2, [r7, #8]
 8000862:	b2ca      	uxtb	r2, r1
 8000864:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	3301      	adds	r3, #1
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	429a      	cmp	r2, r3
 8000872:	dbf0      	blt.n	8000856 <_read+0x12>
	}

return len;
 8000874:	687b      	ldr	r3, [r7, #4]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3718      	adds	r7, #24
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b086      	sub	sp, #24
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	e009      	b.n	80008a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	60ba      	str	r2, [r7, #8]
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fed9 	bl	8000650 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	3301      	adds	r3, #1
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	697a      	ldr	r2, [r7, #20]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	dbf1      	blt.n	8000890 <_write+0x12>
	}
	return len;
 80008ac:	687b      	ldr	r3, [r7, #4]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <_close>:

int _close(int file)
{
 80008b6:	b480      	push	{r7}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
	return -1;
 80008be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
 80008d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008de:	605a      	str	r2, [r3, #4]
	return 0;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <_isatty>:

int _isatty(int file)
{
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
	return 1;
 80008f6:	2301      	movs	r3, #1
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
	return 0;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
	...

08000920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000928:	4a14      	ldr	r2, [pc, #80]	; (800097c <_sbrk+0x5c>)
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <_sbrk+0x60>)
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000934:	4b13      	ldr	r3, [pc, #76]	; (8000984 <_sbrk+0x64>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d102      	bne.n	8000942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <_sbrk+0x64>)
 800093e:	4a12      	ldr	r2, [pc, #72]	; (8000988 <_sbrk+0x68>)
 8000940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <_sbrk+0x64>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4413      	add	r3, r2
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	429a      	cmp	r2, r3
 800094e:	d207      	bcs.n	8000960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000950:	f002 ff30 	bl	80037b4 <__errno>
 8000954:	4602      	mov	r2, r0
 8000956:	230c      	movs	r3, #12
 8000958:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800095a:	f04f 33ff 	mov.w	r3, #4294967295
 800095e:	e009      	b.n	8000974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <_sbrk+0x64>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <_sbrk+0x64>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <_sbrk+0x64>)
 8000970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000972:	68fb      	ldr	r3, [r7, #12]
}
 8000974:	4618      	mov	r0, r3
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000a000 	.word	0x2000a000
 8000980:	00000400 	.word	0x00000400
 8000984:	2000008c 	.word	0x2000008c
 8000988:	200001c8 	.word	0x200001c8

0800098c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_USART1_UART_Init+0x58>)
 8000992:	4a15      	ldr	r2, [pc, #84]	; (80009e8 <MX_USART1_UART_Init+0x5c>)
 8000994:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_USART1_UART_Init+0x58>)
 8000998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800099c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_USART1_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_USART1_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_USART1_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_USART1_UART_Init+0x58>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_USART1_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_USART1_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_USART1_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_USART1_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_USART1_UART_Init+0x58>)
 80009d0:	f002 f916 	bl	8002c00 <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009da:	f7ff fee0 	bl	800079e <Error_Handler>
  }

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000e4 	.word	0x200000e4
 80009e8:	40013800 	.word	0x40013800

080009ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a18      	ldr	r2, [pc, #96]	; (8000a6c <HAL_UART_MspInit+0x80>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d129      	bne.n	8000a62 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <HAL_UART_MspInit+0x84>)
 8000a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a12:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <HAL_UART_MspInit+0x84>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a18:	6613      	str	r3, [r2, #96]	; 0x60
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <HAL_UART_MspInit+0x84>)
 8000a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <HAL_UART_MspInit+0x84>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	4a11      	ldr	r2, [pc, #68]	; (8000a70 <HAL_UART_MspInit+0x84>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <HAL_UART_MspInit+0x84>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a50:	2307      	movs	r3, #7
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5e:	f000 f9e5 	bl	8000e2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	; 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40013800 	.word	0x40013800
 8000a70:	40021000 	.word	0x40021000

08000a74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a78:	f000 f826 	bl	8000ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a7e:	e003      	b.n	8000a88 <LoopCopyDataInit>

08000a80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a86:	3104      	adds	r1, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a88:	480a      	ldr	r0, [pc, #40]	; (8000ab4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a90:	d3f6      	bcc.n	8000a80 <CopyDataInit>
	ldr	r2, =_sbss
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a94:	e002      	b.n	8000a9c <LoopFillZerobss>

08000a96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a98:	f842 3b04 	str.w	r3, [r2], #4

08000a9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <LoopForever+0x16>)
	cmp	r2, r3
 8000a9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000aa0:	d3f9      	bcc.n	8000a96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f002 fe8d 	bl	80037c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aa6:	f7ff fde5 	bl	8000674 <main>

08000aaa <LoopForever>:

LoopForever:
    b LoopForever
 8000aaa:	e7fe      	b.n	8000aaa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000aac:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000ab0:	080041d4 	.word	0x080041d4
	ldr	r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ab8:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000abc:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000ac0:	200001c4 	.word	0x200001c4

08000ac4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC1_2_IRQHandler>
	...

08000ac8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <SystemInit+0x64>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a16      	ldr	r2, [pc, #88]	; (8000b2c <SystemInit+0x64>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <SystemInit+0x68>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a13      	ldr	r2, [pc, #76]	; (8000b30 <SystemInit+0x68>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <SystemInit+0x68>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <SystemInit+0x68>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a0f      	ldr	r2, [pc, #60]	; (8000b30 <SystemInit+0x68>)
 8000af4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000af8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000afc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <SystemInit+0x68>)
 8000b00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b04:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <SystemInit+0x68>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a09      	ldr	r2, [pc, #36]	; (8000b30 <SystemInit+0x68>)
 8000b0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b12:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <SystemInit+0x68>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <SystemInit+0x64>)
 8000b1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b1e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00
 8000b30:	40021000 	.word	0x40021000

08000b34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3e:	2003      	movs	r0, #3
 8000b40:	f000 f940 	bl	8000dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b44:	2000      	movs	r0, #0
 8000b46:	f000 f80d 	bl	8000b64 <HAL_InitTick>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d002      	beq.n	8000b56 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	71fb      	strb	r3, [r7, #7]
 8000b54:	e001      	b.n	8000b5a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b56:	f7ff fe27 	bl	80007a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <HAL_InitTick+0x6c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d023      	beq.n	8000bc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <HAL_InitTick+0x70>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_InitTick+0x6c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 f93f 	bl	8000e12 <HAL_SYSTICK_Config>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d10f      	bne.n	8000bba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d809      	bhi.n	8000bb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	f000 f917 	bl	8000dda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bac:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <HAL_InitTick+0x74>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	e007      	b.n	8000bc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]
 8000bb8:	e004      	b.n	8000bc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	73fb      	strb	r3, [r7, #15]
 8000bbe:	e001      	b.n	8000bc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000004 	.word	0x20000004

08000bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x20>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x24>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <HAL_IncTick+0x24>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000164 	.word	0x20000164

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <HAL_GetTick+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000164 	.word	0x20000164

08000c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c24:	f7ff ffee 	bl	8000c04 <HAL_GetTick>
 8000c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c34:	d005      	beq.n	8000c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_Delay+0x40>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c42:	bf00      	nop
 8000c44:	f7ff ffde 	bl	8000c04 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d8f7      	bhi.n	8000c44 <HAL_Delay+0x28>
  {
  }
}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000008 	.word	0x20000008

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db0a      	blt.n	8000cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	490c      	ldr	r1, [pc, #48]	; (8000d10 <__NVIC_SetPriority+0x4c>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cec:	e00a      	b.n	8000d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4908      	ldr	r1, [pc, #32]	; (8000d14 <__NVIC_SetPriority+0x50>)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	3b04      	subs	r3, #4
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	440b      	add	r3, r1
 8000d02:	761a      	strb	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f1c3 0307 	rsb	r3, r3, #7
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	bf28      	it	cs
 8000d36:	2304      	movcs	r3, #4
 8000d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d902      	bls.n	8000d48 <NVIC_EncodePriority+0x30>
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3b03      	subs	r3, #3
 8000d46:	e000      	b.n	8000d4a <NVIC_EncodePriority+0x32>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43da      	mvns	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	43d9      	mvns	r1, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	4313      	orrs	r3, r2
         );
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d90:	d301      	bcc.n	8000d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00f      	b.n	8000db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <SysTick_Config+0x40>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9e:	210f      	movs	r1, #15
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f7ff ff8e 	bl	8000cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <SysTick_Config+0x40>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <SysTick_Config+0x40>)
 8000db0:	2207      	movs	r2, #7
 8000db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	e000e010 	.word	0xe000e010

08000dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ff47 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b086      	sub	sp, #24
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	4603      	mov	r3, r0
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
 8000de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dec:	f7ff ff5c 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000df0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	68b9      	ldr	r1, [r7, #8]
 8000df6:	6978      	ldr	r0, [r7, #20]
 8000df8:	f7ff ff8e 	bl	8000d18 <NVIC_EncodePriority>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff5d 	bl	8000cc4 <__NVIC_SetPriority>
}
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ffb0 	bl	8000d80 <SysTick_Config>
 8000e20:	4603      	mov	r3, r0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b087      	sub	sp, #28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3a:	e14e      	b.n	80010da <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	2101      	movs	r1, #1
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	fa01 f303 	lsl.w	r3, r1, r3
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f000 8140 	beq.w	80010d4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d00b      	beq.n	8000e74 <HAL_GPIO_Init+0x48>
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d007      	beq.n	8000e74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e68:	2b11      	cmp	r3, #17
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b12      	cmp	r3, #18
 8000e72:	d130      	bne.n	8000ed6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	68da      	ldr	r2, [r3, #12]
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eaa:	2201      	movs	r2, #1
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	091b      	lsrs	r3, r3, #4
 8000ec0:	f003 0201 	and.w	r2, r3, #1
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0xea>
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b12      	cmp	r3, #18
 8000f14:	d123      	bne.n	8000f5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	08da      	lsrs	r2, r3, #3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3208      	adds	r2, #8
 8000f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	691a      	ldr	r2, [r3, #16]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	08da      	lsrs	r2, r3, #3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3208      	adds	r2, #8
 8000f58:	6939      	ldr	r1, [r7, #16]
 8000f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2203      	movs	r2, #3
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0203 	and.w	r2, r3, #3
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 809a 	beq.w	80010d4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa0:	4b55      	ldr	r3, [pc, #340]	; (80010f8 <HAL_GPIO_Init+0x2cc>)
 8000fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa4:	4a54      	ldr	r2, [pc, #336]	; (80010f8 <HAL_GPIO_Init+0x2cc>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	6613      	str	r3, [r2, #96]	; 0x60
 8000fac:	4b52      	ldr	r3, [pc, #328]	; (80010f8 <HAL_GPIO_Init+0x2cc>)
 8000fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fb8:	4a50      	ldr	r2, [pc, #320]	; (80010fc <HAL_GPIO_Init+0x2d0>)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	089b      	lsrs	r3, r3, #2
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	220f      	movs	r2, #15
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fe2:	d013      	beq.n	800100c <HAL_GPIO_Init+0x1e0>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a46      	ldr	r2, [pc, #280]	; (8001100 <HAL_GPIO_Init+0x2d4>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d00d      	beq.n	8001008 <HAL_GPIO_Init+0x1dc>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a45      	ldr	r2, [pc, #276]	; (8001104 <HAL_GPIO_Init+0x2d8>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d007      	beq.n	8001004 <HAL_GPIO_Init+0x1d8>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a44      	ldr	r2, [pc, #272]	; (8001108 <HAL_GPIO_Init+0x2dc>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d101      	bne.n	8001000 <HAL_GPIO_Init+0x1d4>
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e006      	b.n	800100e <HAL_GPIO_Init+0x1e2>
 8001000:	2307      	movs	r3, #7
 8001002:	e004      	b.n	800100e <HAL_GPIO_Init+0x1e2>
 8001004:	2302      	movs	r3, #2
 8001006:	e002      	b.n	800100e <HAL_GPIO_Init+0x1e2>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <HAL_GPIO_Init+0x1e2>
 800100c:	2300      	movs	r3, #0
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	f002 0203 	and.w	r2, r2, #3
 8001014:	0092      	lsls	r2, r2, #2
 8001016:	4093      	lsls	r3, r2
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800101e:	4937      	ldr	r1, [pc, #220]	; (80010fc <HAL_GPIO_Init+0x2d0>)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800102c:	4b37      	ldr	r3, [pc, #220]	; (800110c <HAL_GPIO_Init+0x2e0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001050:	4a2e      	ldr	r2, [pc, #184]	; (800110c <HAL_GPIO_Init+0x2e0>)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001056:	4b2d      	ldr	r3, [pc, #180]	; (800110c <HAL_GPIO_Init+0x2e0>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800107a:	4a24      	ldr	r2, [pc, #144]	; (800110c <HAL_GPIO_Init+0x2e0>)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <HAL_GPIO_Init+0x2e0>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	43db      	mvns	r3, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010a4:	4a19      	ldr	r2, [pc, #100]	; (800110c <HAL_GPIO_Init+0x2e0>)
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <HAL_GPIO_Init+0x2e0>)
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ce:	4a0f      	ldr	r2, [pc, #60]	; (800110c <HAL_GPIO_Init+0x2e0>)
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	3301      	adds	r3, #1
 80010d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	fa22 f303 	lsr.w	r3, r2, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f47f aea9 	bne.w	8000e3c <HAL_GPIO_Init+0x10>
  }
}
 80010ea:	bf00      	nop
 80010ec:	371c      	adds	r7, #28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010000 	.word	0x40010000
 8001100:	48000400 	.word	0x48000400
 8001104:	48000800 	.word	0x48000800
 8001108:	48000c00 	.word	0x48000c00
 800110c:	40010400 	.word	0x40010400

08001110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
 800111c:	4613      	mov	r3, r2
 800111e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001120:	787b      	ldrb	r3, [r7, #1]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001126:	887a      	ldrh	r2, [r7, #2]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800112c:	e002      	b.n	8001134 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4013      	ands	r3, r2
 8001158:	041a      	lsls	r2, r3, #16
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43d9      	mvns	r1, r3
 800115e:	887b      	ldrh	r3, [r7, #2]
 8001160:	400b      	ands	r3, r1
 8001162:	431a      	orrs	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	619a      	str	r2, [r3, #24]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e081      	b.n	800128a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d106      	bne.n	80011a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff fa14 	bl	80005c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2224      	movs	r2, #36	; 0x24
 80011a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0201 	bic.w	r2, r2, #1
 80011b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d107      	bne.n	80011ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	e006      	b.n	80011fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	2b02      	cmp	r3, #2
 8001202:	d104      	bne.n	800120e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800120c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	6812      	ldr	r2, [r2, #0]
 8001218:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800121c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001220:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001230:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691a      	ldr	r2, [r3, #16]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	ea42 0103 	orr.w	r1, r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	021a      	lsls	r2, r3, #8
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	430a      	orrs	r2, r1
 800124a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69d9      	ldr	r1, [r3, #28]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a1a      	ldr	r2, [r3, #32]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	430a      	orrs	r2, r1
 800125a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0201 	orr.w	r2, r2, #1
 800126a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2220      	movs	r2, #32
 8001276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af02      	add	r7, sp, #8
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	461a      	mov	r2, r3
 80012a0:	460b      	mov	r3, r1
 80012a2:	817b      	strh	r3, [r7, #10]
 80012a4:	4613      	mov	r3, r2
 80012a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b20      	cmp	r3, #32
 80012b2:	f040 80da 	bne.w	800146a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d101      	bne.n	80012c4 <HAL_I2C_Master_Transmit+0x30>
 80012c0:	2302      	movs	r3, #2
 80012c2:	e0d3      	b.n	800146c <HAL_I2C_Master_Transmit+0x1d8>
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2201      	movs	r2, #1
 80012c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012cc:	f7ff fc9a 	bl	8000c04 <HAL_GetTick>
 80012d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2319      	movs	r3, #25
 80012d8:	2201      	movs	r2, #1
 80012da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 f9e6 	bl	80016b0 <I2C_WaitOnFlagUntilTimeout>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e0be      	b.n	800146c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2221      	movs	r2, #33	; 0x21
 80012f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2210      	movs	r2, #16
 80012fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2200      	movs	r2, #0
 8001302:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	893a      	ldrh	r2, [r7, #8]
 800130e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2200      	movs	r2, #0
 8001314:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800131a:	b29b      	uxth	r3, r3
 800131c:	2bff      	cmp	r3, #255	; 0xff
 800131e:	d90e      	bls.n	800133e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	22ff      	movs	r2, #255	; 0xff
 8001324:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800132a:	b2da      	uxtb	r2, r3
 800132c:	8979      	ldrh	r1, [r7, #10]
 800132e:	4b51      	ldr	r3, [pc, #324]	; (8001474 <HAL_I2C_Master_Transmit+0x1e0>)
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f000 fb48 	bl	80019cc <I2C_TransferConfig>
 800133c:	e06c      	b.n	8001418 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001342:	b29a      	uxth	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800134c:	b2da      	uxtb	r2, r3
 800134e:	8979      	ldrh	r1, [r7, #10]
 8001350:	4b48      	ldr	r3, [pc, #288]	; (8001474 <HAL_I2C_Master_Transmit+0x1e0>)
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f000 fb37 	bl	80019cc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800135e:	e05b      	b.n	8001418 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	6a39      	ldr	r1, [r7, #32]
 8001364:	68f8      	ldr	r0, [r7, #12]
 8001366:	f000 f9e3 	bl	8001730 <I2C_WaitOnTXISFlagUntilTimeout>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e07b      	b.n	800146c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	781a      	ldrb	r2, [r3, #0]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	1c5a      	adds	r2, r3, #1
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800138e:	b29b      	uxth	r3, r3
 8001390:	3b01      	subs	r3, #1
 8001392:	b29a      	uxth	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800139c:	3b01      	subs	r3, #1
 800139e:	b29a      	uxth	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d034      	beq.n	8001418 <HAL_I2C_Master_Transmit+0x184>
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d130      	bne.n	8001418 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	2200      	movs	r2, #0
 80013be:	2180      	movs	r1, #128	; 0x80
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f000 f975 	bl	80016b0 <I2C_WaitOnFlagUntilTimeout>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e04d      	b.n	800146c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	2bff      	cmp	r3, #255	; 0xff
 80013d8:	d90e      	bls.n	80013f8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	22ff      	movs	r2, #255	; 0xff
 80013de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	8979      	ldrh	r1, [r7, #10]
 80013e8:	2300      	movs	r3, #0
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f000 faeb 	bl	80019cc <I2C_TransferConfig>
 80013f6:	e00f      	b.n	8001418 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001406:	b2da      	uxtb	r2, r3
 8001408:	8979      	ldrh	r1, [r7, #10]
 800140a:	2300      	movs	r3, #0
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f000 fada 	bl	80019cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800141c:	b29b      	uxth	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d19e      	bne.n	8001360 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	6a39      	ldr	r1, [r7, #32]
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f000 f9c2 	bl	80017b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e01a      	b.n	800146c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2220      	movs	r2, #32
 800143c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6859      	ldr	r1, [r3, #4]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_I2C_Master_Transmit+0x1e4>)
 800144a:	400b      	ands	r3, r1
 800144c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2220      	movs	r2, #32
 8001452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	e000      	b.n	800146c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800146a:	2302      	movs	r3, #2
  }
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	80002000 	.word	0x80002000
 8001478:	fe00e800 	.word	0xfe00e800

0800147c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af02      	add	r7, sp, #8
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	461a      	mov	r2, r3
 8001488:	460b      	mov	r3, r1
 800148a:	817b      	strh	r3, [r7, #10]
 800148c:	4613      	mov	r3, r2
 800148e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b20      	cmp	r3, #32
 800149a:	f040 80db 	bne.w	8001654 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d101      	bne.n	80014ac <HAL_I2C_Master_Receive+0x30>
 80014a8:	2302      	movs	r3, #2
 80014aa:	e0d4      	b.n	8001656 <HAL_I2C_Master_Receive+0x1da>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014b4:	f7ff fba6 	bl	8000c04 <HAL_GetTick>
 80014b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	2319      	movs	r3, #25
 80014c0:	2201      	movs	r2, #1
 80014c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f000 f8f2 	bl	80016b0 <I2C_WaitOnFlagUntilTimeout>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e0bf      	b.n	8001656 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2222      	movs	r2, #34	; 0x22
 80014da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2210      	movs	r2, #16
 80014e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2200      	movs	r2, #0
 80014ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	893a      	ldrh	r2, [r7, #8]
 80014f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2200      	movs	r2, #0
 80014fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001502:	b29b      	uxth	r3, r3
 8001504:	2bff      	cmp	r3, #255	; 0xff
 8001506:	d90e      	bls.n	8001526 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	22ff      	movs	r2, #255	; 0xff
 800150c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001512:	b2da      	uxtb	r2, r3
 8001514:	8979      	ldrh	r1, [r7, #10]
 8001516:	4b52      	ldr	r3, [pc, #328]	; (8001660 <HAL_I2C_Master_Receive+0x1e4>)
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f000 fa54 	bl	80019cc <I2C_TransferConfig>
 8001524:	e06d      	b.n	8001602 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800152a:	b29a      	uxth	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001534:	b2da      	uxtb	r2, r3
 8001536:	8979      	ldrh	r1, [r7, #10]
 8001538:	4b49      	ldr	r3, [pc, #292]	; (8001660 <HAL_I2C_Master_Receive+0x1e4>)
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f000 fa43 	bl	80019cc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001546:	e05c      	b.n	8001602 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	6a39      	ldr	r1, [r7, #32]
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 f96b 	bl	8001828 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e07c      	b.n	8001656 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	1c5a      	adds	r2, r3, #1
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001578:	3b01      	subs	r3, #1
 800157a:	b29a      	uxth	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001584:	b29b      	uxth	r3, r3
 8001586:	3b01      	subs	r3, #1
 8001588:	b29a      	uxth	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001592:	b29b      	uxth	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d034      	beq.n	8001602 <HAL_I2C_Master_Receive+0x186>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800159c:	2b00      	cmp	r3, #0
 800159e:	d130      	bne.n	8001602 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	2200      	movs	r2, #0
 80015a8:	2180      	movs	r1, #128	; 0x80
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f000 f880 	bl	80016b0 <I2C_WaitOnFlagUntilTimeout>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e04d      	b.n	8001656 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015be:	b29b      	uxth	r3, r3
 80015c0:	2bff      	cmp	r3, #255	; 0xff
 80015c2:	d90e      	bls.n	80015e2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	22ff      	movs	r2, #255	; 0xff
 80015c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	8979      	ldrh	r1, [r7, #10]
 80015d2:	2300      	movs	r3, #0
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f000 f9f6 	bl	80019cc <I2C_TransferConfig>
 80015e0:	e00f      	b.n	8001602 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	8979      	ldrh	r1, [r7, #10]
 80015f4:	2300      	movs	r3, #0
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f000 f9e5 	bl	80019cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001606:	b29b      	uxth	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d19d      	bne.n	8001548 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	6a39      	ldr	r1, [r7, #32]
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f000 f8cd 	bl	80017b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e01a      	b.n	8001656 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2220      	movs	r2, #32
 8001626:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6859      	ldr	r1, [r3, #4]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <HAL_I2C_Master_Receive+0x1e8>)
 8001634:	400b      	ands	r3, r1
 8001636:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2220      	movs	r2, #32
 800163c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	e000      	b.n	8001656 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001654:	2302      	movs	r3, #2
  }
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	80002400 	.word	0x80002400
 8001664:	fe00e800 	.word	0xfe00e800

08001668 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b02      	cmp	r3, #2
 800167c:	d103      	bne.n	8001686 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2200      	movs	r2, #0
 8001684:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b01      	cmp	r3, #1
 8001692:	d007      	beq.n	80016a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	699a      	ldr	r2, [r3, #24]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0201 	orr.w	r2, r2, #1
 80016a2:	619a      	str	r2, [r3, #24]
  }
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	4613      	mov	r3, r2
 80016be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016c0:	e022      	b.n	8001708 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c8:	d01e      	beq.n	8001708 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ca:	f7ff fa9b 	bl	8000c04 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d302      	bcc.n	80016e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d113      	bne.n	8001708 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e4:	f043 0220 	orr.w	r2, r3, #32
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2220      	movs	r2, #32
 80016f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e00f      	b.n	8001728 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	699a      	ldr	r2, [r3, #24]
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	4013      	ands	r3, r2
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	429a      	cmp	r2, r3
 8001716:	bf0c      	ite	eq
 8001718:	2301      	moveq	r3, #1
 800171a:	2300      	movne	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	461a      	mov	r2, r3
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	429a      	cmp	r2, r3
 8001724:	d0cd      	beq.n	80016c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800173c:	e02c      	b.n	8001798 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	68b9      	ldr	r1, [r7, #8]
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 f8dc 	bl	8001900 <I2C_IsAcknowledgeFailed>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e02a      	b.n	80017a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001758:	d01e      	beq.n	8001798 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800175a:	f7ff fa53 	bl	8000c04 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	68ba      	ldr	r2, [r7, #8]
 8001766:	429a      	cmp	r2, r3
 8001768:	d302      	bcc.n	8001770 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d113      	bne.n	8001798 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001774:	f043 0220 	orr.w	r2, r3, #32
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2220      	movs	r2, #32
 8001780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e007      	b.n	80017a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d1cb      	bne.n	800173e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017bc:	e028      	b.n	8001810 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 f89c 	bl	8001900 <I2C_IsAcknowledgeFailed>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e026      	b.n	8001820 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017d2:	f7ff fa17 	bl	8000c04 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	68ba      	ldr	r2, [r7, #8]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d302      	bcc.n	80017e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d113      	bne.n	8001810 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ec:	f043 0220 	orr.w	r2, r3, #32
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2220      	movs	r2, #32
 80017f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e007      	b.n	8001820 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	f003 0320 	and.w	r3, r3, #32
 800181a:	2b20      	cmp	r3, #32
 800181c:	d1cf      	bne.n	80017be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001834:	e055      	b.n	80018e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 f860 	bl	8001900 <I2C_IsAcknowledgeFailed>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e053      	b.n	80018f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f003 0320 	and.w	r3, r3, #32
 8001854:	2b20      	cmp	r3, #32
 8001856:	d129      	bne.n	80018ac <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	2b04      	cmp	r3, #4
 8001864:	d105      	bne.n	8001872 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	e03f      	b.n	80018f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2220      	movs	r2, #32
 8001878:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6859      	ldr	r1, [r3, #4]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001886:	400b      	ands	r3, r1
 8001888:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2220      	movs	r2, #32
 8001894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e022      	b.n	80018f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ac:	f7ff f9aa 	bl	8000c04 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d302      	bcc.n	80018c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10f      	bne.n	80018e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	f043 0220 	orr.w	r2, r3, #32
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2220      	movs	r2, #32
 80018d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e007      	b.n	80018f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d1a2      	bne.n	8001836 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	fe00e800 	.word	0xfe00e800

08001900 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f003 0310 	and.w	r3, r3, #16
 8001916:	2b10      	cmp	r3, #16
 8001918:	d151      	bne.n	80019be <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800191a:	e022      	b.n	8001962 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001922:	d01e      	beq.n	8001962 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001924:	f7ff f96e 	bl	8000c04 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	429a      	cmp	r2, r3
 8001932:	d302      	bcc.n	800193a <I2C_IsAcknowledgeFailed+0x3a>
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d113      	bne.n	8001962 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	f043 0220 	orr.w	r2, r3, #32
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2220      	movs	r2, #32
 800194a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e02e      	b.n	80019c0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f003 0320 	and.w	r3, r3, #32
 800196c:	2b20      	cmp	r3, #32
 800196e:	d1d5      	bne.n	800191c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2210      	movs	r2, #16
 8001976:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2220      	movs	r2, #32
 800197e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f7ff fe71 	bl	8001668 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6859      	ldr	r1, [r3, #4]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <I2C_IsAcknowledgeFailed+0xc8>)
 8001992:	400b      	ands	r3, r1
 8001994:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f043 0204 	orr.w	r2, r3, #4
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2220      	movs	r2, #32
 80019a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	fe00e800 	.word	0xfe00e800

080019cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	460b      	mov	r3, r1
 80019d8:	817b      	strh	r3, [r7, #10]
 80019da:	4613      	mov	r3, r2
 80019dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	0d5b      	lsrs	r3, r3, #21
 80019e8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80019ec:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <I2C_TransferConfig+0x58>)
 80019ee:	430b      	orrs	r3, r1
 80019f0:	43db      	mvns	r3, r3
 80019f2:	ea02 0103 	and.w	r1, r2, r3
 80019f6:	897b      	ldrh	r3, [r7, #10]
 80019f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019fc:	7a7b      	ldrb	r3, [r7, #9]
 80019fe:	041b      	lsls	r3, r3, #16
 8001a00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001a04:	431a      	orrs	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001a16:	bf00      	nop
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	03ff63ff 	.word	0x03ff63ff

08001a28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b20      	cmp	r3, #32
 8001a3c:	d138      	bne.n	8001ab0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	e032      	b.n	8001ab2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2224      	movs	r2, #36	; 0x24
 8001a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0201 	bic.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6819      	ldr	r1, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0201 	orr.w	r2, r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001aac:	2300      	movs	r3, #0
 8001aae:	e000      	b.n	8001ab2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ab0:	2302      	movs	r3, #2
  }
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b085      	sub	sp, #20
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b20      	cmp	r3, #32
 8001ad2:	d139      	bne.n	8001b48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e033      	b.n	8001b4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2224      	movs	r2, #36	; 0x24
 8001aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0201 	bic.w	r2, r2, #1
 8001b00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e000      	b.n	8001b4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b48:	2302      	movs	r3, #2
  }
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40007000 	.word	0x40007000

08001b74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b82:	d130      	bne.n	8001be6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b84:	4b23      	ldr	r3, [pc, #140]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b90:	d038      	beq.n	8001c04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b92:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b9a:	4a1e      	ldr	r2, [pc, #120]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ba0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2232      	movs	r2, #50	; 0x32
 8001ba8:	fb02 f303 	mul.w	r3, r2, r3
 8001bac:	4a1b      	ldr	r2, [pc, #108]	; (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bae:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb2:	0c9b      	lsrs	r3, r3, #18
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bb8:	e002      	b.n	8001bc0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bc0:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bcc:	d102      	bne.n	8001bd4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1f2      	bne.n	8001bba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001be0:	d110      	bne.n	8001c04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e00f      	b.n	8001c06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf2:	d007      	beq.n	8001c04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bf4:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bfc:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40007000 	.word	0x40007000
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	431bde83 	.word	0x431bde83

08001c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d102      	bne.n	8001c34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f000 bc56 	b.w	80024e0 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c34:	4ba1      	ldr	r3, [pc, #644]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c3e:	4b9f      	ldr	r3, [pc, #636]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80e6 	beq.w	8001e22 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d007      	beq.n	8001c6c <HAL_RCC_OscConfig+0x4c>
 8001c5c:	6a3b      	ldr	r3, [r7, #32]
 8001c5e:	2b0c      	cmp	r3, #12
 8001c60:	f040 808d 	bne.w	8001d7e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	f040 8089 	bne.w	8001d7e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c6c:	4b93      	ldr	r3, [pc, #588]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d006      	beq.n	8001c86 <HAL_RCC_OscConfig+0x66>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d102      	bne.n	8001c86 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	f000 bc2d 	b.w	80024e0 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c8a:	4b8c      	ldr	r3, [pc, #560]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d004      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x80>
 8001c96:	4b89      	ldr	r3, [pc, #548]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c9e:	e005      	b.n	8001cac <HAL_RCC_OscConfig+0x8c>
 8001ca0:	4b86      	ldr	r3, [pc, #536]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca6:	091b      	lsrs	r3, r3, #4
 8001ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d224      	bcs.n	8001cfa <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f000 fdbd 	bl	8002834 <RCC_SetFlashLatencyFromMSIRange>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	f000 bc0d 	b.w	80024e0 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cc6:	4b7d      	ldr	r3, [pc, #500]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a7c      	ldr	r2, [pc, #496]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001ccc:	f043 0308 	orr.w	r3, r3, #8
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	4b7a      	ldr	r3, [pc, #488]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	4977      	ldr	r1, [pc, #476]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ce4:	4b75      	ldr	r3, [pc, #468]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	4972      	ldr	r1, [pc, #456]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
 8001cf8:	e025      	b.n	8001d46 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cfa:	4b70      	ldr	r3, [pc, #448]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a6f      	ldr	r2, [pc, #444]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001d00:	f043 0308 	orr.w	r3, r3, #8
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	4b6d      	ldr	r3, [pc, #436]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	496a      	ldr	r1, [pc, #424]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d18:	4b68      	ldr	r3, [pc, #416]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	4965      	ldr	r1, [pc, #404]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d109      	bne.n	8001d46 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 fd7c 	bl	8002834 <RCC_SetFlashLatencyFromMSIRange>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e3cc      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d46:	f000 fcb3 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 8001d4a:	4601      	mov	r1, r0
 8001d4c:	4b5b      	ldr	r3, [pc, #364]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	4a5a      	ldr	r2, [pc, #360]	; (8001ec0 <HAL_RCC_OscConfig+0x2a0>)
 8001d58:	5cd3      	ldrb	r3, [r2, r3]
 8001d5a:	f003 031f 	and.w	r3, r3, #31
 8001d5e:	fa21 f303 	lsr.w	r3, r1, r3
 8001d62:	4a58      	ldr	r2, [pc, #352]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001d64:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d66:	4b58      	ldr	r3, [pc, #352]	; (8001ec8 <HAL_RCC_OscConfig+0x2a8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fefa 	bl	8000b64 <HAL_InitTick>
 8001d70:	4603      	mov	r3, r0
 8001d72:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d052      	beq.n	8001e20 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001d7a:	7dfb      	ldrb	r3, [r7, #23]
 8001d7c:	e3b0      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d032      	beq.n	8001dec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d86:	4b4d      	ldr	r3, [pc, #308]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a4c      	ldr	r2, [pc, #304]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d92:	f7fe ff37 	bl	8000c04 <HAL_GetTick>
 8001d96:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d9a:	f7fe ff33 	bl	8000c04 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e399      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dac:	4b43      	ldr	r3, [pc, #268]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001db8:	4b40      	ldr	r3, [pc, #256]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a3f      	ldr	r2, [pc, #252]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001dbe:	f043 0308 	orr.w	r3, r3, #8
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	493a      	ldr	r1, [pc, #232]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dd6:	4b39      	ldr	r3, [pc, #228]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	4935      	ldr	r1, [pc, #212]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	604b      	str	r3, [r1, #4]
 8001dea:	e01a      	b.n	8001e22 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dec:	4b33      	ldr	r3, [pc, #204]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a32      	ldr	r2, [pc, #200]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001df2:	f023 0301 	bic.w	r3, r3, #1
 8001df6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001df8:	f7fe ff04 	bl	8000c04 <HAL_GetTick>
 8001dfc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e00:	f7fe ff00 	bl	8000c04 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e366      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e12:	4b2a      	ldr	r3, [pc, #168]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x1e0>
 8001e1e:	e000      	b.n	8001e22 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d073      	beq.n	8001f16 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_OscConfig+0x220>
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	2b0c      	cmp	r3, #12
 8001e38:	d10e      	bne.n	8001e58 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d10b      	bne.n	8001e58 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e40:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d063      	beq.n	8001f14 <HAL_RCC_OscConfig+0x2f4>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d15f      	bne.n	8001f14 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e343      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e60:	d106      	bne.n	8001e70 <HAL_RCC_OscConfig+0x250>
 8001e62:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a15      	ldr	r2, [pc, #84]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e01d      	b.n	8001eac <HAL_RCC_OscConfig+0x28c>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x274>
 8001e7a:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a0f      	ldr	r2, [pc, #60]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a0c      	ldr	r2, [pc, #48]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e00b      	b.n	8001eac <HAL_RCC_OscConfig+0x28c>
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a08      	ldr	r2, [pc, #32]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <HAL_RCC_OscConfig+0x29c>)
 8001ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d01b      	beq.n	8001eec <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7fe fea6 	bl	8000c04 <HAL_GetTick>
 8001eb8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eba:	e010      	b.n	8001ede <HAL_RCC_OscConfig+0x2be>
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	08004118 	.word	0x08004118
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7fe fe9a 	bl	8000c04 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	; 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e300      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ede:	4ba0      	ldr	r3, [pc, #640]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x2ac>
 8001eea:	e014      	b.n	8001f16 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eec:	f7fe fe8a 	bl	8000c04 <HAL_GetTick>
 8001ef0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef4:	f7fe fe86 	bl	8000c04 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b64      	cmp	r3, #100	; 0x64
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e2ec      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f06:	4b96      	ldr	r3, [pc, #600]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x2d4>
 8001f12:	e000      	b.n	8001f16 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d060      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d005      	beq.n	8001f34 <HAL_RCC_OscConfig+0x314>
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	2b0c      	cmp	r3, #12
 8001f2c:	d119      	bne.n	8001f62 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d116      	bne.n	8001f62 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f34:	4b8a      	ldr	r3, [pc, #552]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_OscConfig+0x32c>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e2c9      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4c:	4b84      	ldr	r3, [pc, #528]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	061b      	lsls	r3, r3, #24
 8001f5a:	4981      	ldr	r1, [pc, #516]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f60:	e040      	b.n	8001fe4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d023      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f6a:	4b7d      	ldr	r3, [pc, #500]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a7c      	ldr	r2, [pc, #496]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 8001f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f76:	f7fe fe45 	bl	8000c04 <HAL_GetTick>
 8001f7a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f7e:	f7fe fe41 	bl	8000c04 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e2a7      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f90:	4b73      	ldr	r3, [pc, #460]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9c:	4b70      	ldr	r3, [pc, #448]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	061b      	lsls	r3, r3, #24
 8001faa:	496d      	ldr	r1, [pc, #436]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]
 8001fb0:	e018      	b.n	8001fe4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb2:	4b6b      	ldr	r3, [pc, #428]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a6a      	ldr	r2, [pc, #424]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 8001fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbe:	f7fe fe21 	bl	8000c04 <HAL_GetTick>
 8001fc2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc6:	f7fe fe1d 	bl	8000c04 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e283      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fd8:	4b61      	ldr	r3, [pc, #388]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1f0      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0308 	and.w	r3, r3, #8
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d07f      	beq.n	80020f0 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d05f      	beq.n	80020b8 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001ff8:	4b59      	ldr	r3, [pc, #356]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 8001ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ffe:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699a      	ldr	r2, [r3, #24]
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	f003 0310 	and.w	r3, r3, #16
 800200a:	429a      	cmp	r2, r3
 800200c:	d037      	beq.n	800207e <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d006      	beq.n	8002026 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e25c      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	d01b      	beq.n	8002068 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8002030:	4b4b      	ldr	r3, [pc, #300]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 8002032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002036:	4a4a      	ldr	r2, [pc, #296]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002040:	f7fe fde0 	bl	8000c04 <HAL_GetTick>
 8002044:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002048:	f7fe fddc 	bl	8000c04 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b11      	cmp	r3, #17
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e242      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800205a:	4b41      	ldr	r3, [pc, #260]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 800205c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1ef      	bne.n	8002048 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002068:	4b3d      	ldr	r3, [pc, #244]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 800206a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800206e:	f023 0210 	bic.w	r2, r3, #16
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	493a      	ldr	r1, [pc, #232]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800207e:	4b38      	ldr	r3, [pc, #224]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 8002080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002084:	4a36      	ldr	r2, [pc, #216]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208e:	f7fe fdb9 	bl	8000c04 <HAL_GetTick>
 8002092:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002096:	f7fe fdb5 	bl	8000c04 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b11      	cmp	r3, #17
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e21b      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020a8:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 80020aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0ef      	beq.n	8002096 <HAL_RCC_OscConfig+0x476>
 80020b6:	e01b      	b.n	80020f0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b8:	4b29      	ldr	r3, [pc, #164]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 80020ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020be:	4a28      	ldr	r2, [pc, #160]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 80020c0:	f023 0301 	bic.w	r3, r3, #1
 80020c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7fe fd9c 	bl	8000c04 <HAL_GetTick>
 80020cc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d0:	f7fe fd98 	bl	8000c04 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b11      	cmp	r3, #17
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e1fe      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020e2:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 80020e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1ef      	bne.n	80020d0 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 80c1 	beq.w	8002280 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020fe:	2300      	movs	r3, #0
 8002100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002104:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10e      	bne.n	800212e <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002114:	4a12      	ldr	r2, [pc, #72]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 8002116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211a:	6593      	str	r3, [r2, #88]	; 0x58
 800211c:	4b10      	ldr	r3, [pc, #64]	; (8002160 <HAL_RCC_OscConfig+0x540>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002128:	2301      	movs	r3, #1
 800212a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <HAL_RCC_OscConfig+0x544>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002136:	2b00      	cmp	r3, #0
 8002138:	d11c      	bne.n	8002174 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_RCC_OscConfig+0x544>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a09      	ldr	r2, [pc, #36]	; (8002164 <HAL_RCC_OscConfig+0x544>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002146:	f7fe fd5d 	bl	8000c04 <HAL_GetTick>
 800214a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800214c:	e00c      	b.n	8002168 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214e:	f7fe fd59 	bl	8000c04 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d905      	bls.n	8002168 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e1bf      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
 8002160:	40021000 	.word	0x40021000
 8002164:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002168:	4bb1      	ldr	r3, [pc, #708]	; (8002430 <HAL_RCC_OscConfig+0x810>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0ec      	beq.n	800214e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	d02c      	beq.n	80021da <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002180:	4bac      	ldr	r3, [pc, #688]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002186:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002192:	49a8      	ldr	r1, [pc, #672]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d010      	beq.n	80021c8 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80021a6:	4ba3      	ldr	r3, [pc, #652]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ac:	4aa1      	ldr	r2, [pc, #644]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 80021ae:	f043 0304 	orr.w	r3, r3, #4
 80021b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80021b6:	4b9f      	ldr	r3, [pc, #636]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 80021b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021bc:	4a9d      	ldr	r2, [pc, #628]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021c6:	e018      	b.n	80021fa <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80021c8:	4b9a      	ldr	r3, [pc, #616]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ce:	4a99      	ldr	r2, [pc, #612]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021d8:	e00f      	b.n	80021fa <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80021da:	4b96      	ldr	r3, [pc, #600]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 80021dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e0:	4a94      	ldr	r2, [pc, #592]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 80021e2:	f023 0301 	bic.w	r3, r3, #1
 80021e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80021ea:	4b92      	ldr	r3, [pc, #584]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f0:	4a90      	ldr	r2, [pc, #576]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 80021f2:	f023 0304 	bic.w	r3, r3, #4
 80021f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d016      	beq.n	8002230 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002202:	f7fe fcff 	bl	8000c04 <HAL_GetTick>
 8002206:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002208:	e00a      	b.n	8002220 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7fe fcfb 	bl	8000c04 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f241 3288 	movw	r2, #5000	; 0x1388
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e15f      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002220:	4b84      	ldr	r3, [pc, #528]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 8002222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0ed      	beq.n	800220a <HAL_RCC_OscConfig+0x5ea>
 800222e:	e01d      	b.n	800226c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002230:	f7fe fce8 	bl	8000c04 <HAL_GetTick>
 8002234:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002236:	e00a      	b.n	800224e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002238:	f7fe fce4 	bl	8000c04 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f241 3288 	movw	r2, #5000	; 0x1388
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e148      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800224e:	4b79      	ldr	r3, [pc, #484]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 8002250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1ed      	bne.n	8002238 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800225c:	4b75      	ldr	r3, [pc, #468]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 800225e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002262:	4a74      	ldr	r2, [pc, #464]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 8002264:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800226c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002270:	2b01      	cmp	r3, #1
 8002272:	d105      	bne.n	8002280 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002274:	4b6f      	ldr	r3, [pc, #444]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 8002276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002278:	4a6e      	ldr	r2, [pc, #440]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 800227a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800227e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0320 	and.w	r3, r3, #32
 8002288:	2b00      	cmp	r3, #0
 800228a:	d03c      	beq.n	8002306 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01c      	beq.n	80022ce <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002294:	4b67      	ldr	r3, [pc, #412]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 8002296:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800229a:	4a66      	ldr	r2, [pc, #408]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7fe fcae 	bl	8000c04 <HAL_GetTick>
 80022a8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022ac:	f7fe fcaa 	bl	8000c04 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e110      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022be:	4b5d      	ldr	r3, [pc, #372]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 80022c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0ef      	beq.n	80022ac <HAL_RCC_OscConfig+0x68c>
 80022cc:	e01b      	b.n	8002306 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022ce:	4b59      	ldr	r3, [pc, #356]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 80022d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022d4:	4a57      	ldr	r2, [pc, #348]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 80022d6:	f023 0301 	bic.w	r3, r3, #1
 80022da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022de:	f7fe fc91 	bl	8000c04 <HAL_GetTick>
 80022e2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022e6:	f7fe fc8d 	bl	8000c04 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e0f3      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022f8:	4b4e      	ldr	r3, [pc, #312]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 80022fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1ef      	bne.n	80022e6 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 80e7 	beq.w	80024de <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002314:	2b02      	cmp	r3, #2
 8002316:	f040 80b7 	bne.w	8002488 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800231a:	4b46      	ldr	r3, [pc, #280]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f003 0203 	and.w	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	429a      	cmp	r2, r3
 800232c:	d124      	bne.n	8002378 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002338:	3b01      	subs	r3, #1
 800233a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d11b      	bne.n	8002378 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800234c:	429a      	cmp	r2, r3
 800234e:	d113      	bne.n	8002378 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235a:	085b      	lsrs	r3, r3, #1
 800235c:	3b01      	subs	r3, #1
 800235e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002360:	429a      	cmp	r2, r3
 8002362:	d109      	bne.n	8002378 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	085b      	lsrs	r3, r3, #1
 8002370:	3b01      	subs	r3, #1
 8002372:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002374:	429a      	cmp	r2, r3
 8002376:	d061      	beq.n	800243c <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	2b0c      	cmp	r3, #12
 800237c:	d056      	beq.n	800242c <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800237e:	4b2d      	ldr	r3, [pc, #180]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a2c      	ldr	r2, [pc, #176]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 8002384:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002388:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800238a:	f7fe fc3b 	bl	8000c04 <HAL_GetTick>
 800238e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002392:	f7fe fc37 	bl	8000c04 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e09d      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a4:	4b23      	ldr	r3, [pc, #140]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f0      	bne.n	8002392 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b0:	4b20      	ldr	r3, [pc, #128]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	4b20      	ldr	r3, [pc, #128]	; (8002438 <HAL_RCC_OscConfig+0x818>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023c0:	3a01      	subs	r2, #1
 80023c2:	0112      	lsls	r2, r2, #4
 80023c4:	4311      	orrs	r1, r2
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023ca:	0212      	lsls	r2, r2, #8
 80023cc:	4311      	orrs	r1, r2
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023d2:	0852      	lsrs	r2, r2, #1
 80023d4:	3a01      	subs	r2, #1
 80023d6:	0552      	lsls	r2, r2, #21
 80023d8:	4311      	orrs	r1, r2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023de:	0852      	lsrs	r2, r2, #1
 80023e0:	3a01      	subs	r2, #1
 80023e2:	0652      	lsls	r2, r2, #25
 80023e4:	430a      	orrs	r2, r1
 80023e6:	4913      	ldr	r1, [pc, #76]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023ec:	4b11      	ldr	r3, [pc, #68]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a10      	ldr	r2, [pc, #64]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 80023f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023f8:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	4a0d      	ldr	r2, [pc, #52]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 80023fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002402:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002404:	f7fe fbfe 	bl	8000c04 <HAL_GetTick>
 8002408:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240c:	f7fe fbfa 	bl	8000c04 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e060      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241e:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_RCC_OscConfig+0x814>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800242a:	e058      	b.n	80024de <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e057      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
 8002430:	40007000 	.word	0x40007000
 8002434:	40021000 	.word	0x40021000
 8002438:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800243c:	4b2a      	ldr	r3, [pc, #168]	; (80024e8 <HAL_RCC_OscConfig+0x8c8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d14a      	bne.n	80024de <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002448:	4b27      	ldr	r3, [pc, #156]	; (80024e8 <HAL_RCC_OscConfig+0x8c8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a26      	ldr	r2, [pc, #152]	; (80024e8 <HAL_RCC_OscConfig+0x8c8>)
 800244e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002452:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002454:	4b24      	ldr	r3, [pc, #144]	; (80024e8 <HAL_RCC_OscConfig+0x8c8>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	4a23      	ldr	r2, [pc, #140]	; (80024e8 <HAL_RCC_OscConfig+0x8c8>)
 800245a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800245e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002460:	f7fe fbd0 	bl	8000c04 <HAL_GetTick>
 8002464:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002468:	f7fe fbcc 	bl	8000c04 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e032      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800247a:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <HAL_RCC_OscConfig+0x8c8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0x848>
 8002486:	e02a      	b.n	80024de <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	2b0c      	cmp	r3, #12
 800248c:	d025      	beq.n	80024da <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248e:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <HAL_RCC_OscConfig+0x8c8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a15      	ldr	r2, [pc, #84]	; (80024e8 <HAL_RCC_OscConfig+0x8c8>)
 8002494:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002498:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <HAL_RCC_OscConfig+0x8c8>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	4a12      	ldr	r2, [pc, #72]	; (80024e8 <HAL_RCC_OscConfig+0x8c8>)
 80024a0:	f023 0303 	bic.w	r3, r3, #3
 80024a4:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <HAL_RCC_OscConfig+0x8c8>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	4a0f      	ldr	r2, [pc, #60]	; (80024e8 <HAL_RCC_OscConfig+0x8c8>)
 80024ac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80024b0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7fe fba7 	bl	8000c04 <HAL_GetTick>
 80024b6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ba:	f7fe fba3 	bl	8000c04 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e009      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024cc:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_RCC_OscConfig+0x8c8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x89a>
 80024d8:	e001      	b.n	80024de <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3728      	adds	r7, #40	; 0x28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40021000 	.word	0x40021000

080024ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0c8      	b.n	8002692 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002500:	4b66      	ldr	r3, [pc, #408]	; (800269c <HAL_RCC_ClockConfig+0x1b0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d910      	bls.n	8002530 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250e:	4b63      	ldr	r3, [pc, #396]	; (800269c <HAL_RCC_ClockConfig+0x1b0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 0207 	bic.w	r2, r3, #7
 8002516:	4961      	ldr	r1, [pc, #388]	; (800269c <HAL_RCC_ClockConfig+0x1b0>)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800251e:	4b5f      	ldr	r3, [pc, #380]	; (800269c <HAL_RCC_ClockConfig+0x1b0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d001      	beq.n	8002530 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0b0      	b.n	8002692 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d04c      	beq.n	80025d6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d107      	bne.n	8002554 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002544:	4b56      	ldr	r3, [pc, #344]	; (80026a0 <HAL_RCC_ClockConfig+0x1b4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d121      	bne.n	8002594 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e09e      	b.n	8002692 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d107      	bne.n	800256c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800255c:	4b50      	ldr	r3, [pc, #320]	; (80026a0 <HAL_RCC_ClockConfig+0x1b4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d115      	bne.n	8002594 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e092      	b.n	8002692 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d107      	bne.n	8002584 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002574:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <HAL_RCC_ClockConfig+0x1b4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d109      	bne.n	8002594 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e086      	b.n	8002692 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002584:	4b46      	ldr	r3, [pc, #280]	; (80026a0 <HAL_RCC_ClockConfig+0x1b4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e07e      	b.n	8002692 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002594:	4b42      	ldr	r3, [pc, #264]	; (80026a0 <HAL_RCC_ClockConfig+0x1b4>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f023 0203 	bic.w	r2, r3, #3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	493f      	ldr	r1, [pc, #252]	; (80026a0 <HAL_RCC_ClockConfig+0x1b4>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a6:	f7fe fb2d 	bl	8000c04 <HAL_GetTick>
 80025aa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ac:	e00a      	b.n	80025c4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ae:	f7fe fb29 	bl	8000c04 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e066      	b.n	8002692 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c4:	4b36      	ldr	r3, [pc, #216]	; (80026a0 <HAL_RCC_ClockConfig+0x1b4>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 020c 	and.w	r2, r3, #12
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d1eb      	bne.n	80025ae <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d008      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e2:	4b2f      	ldr	r3, [pc, #188]	; (80026a0 <HAL_RCC_ClockConfig+0x1b4>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	492c      	ldr	r1, [pc, #176]	; (80026a0 <HAL_RCC_ClockConfig+0x1b4>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025f4:	4b29      	ldr	r3, [pc, #164]	; (800269c <HAL_RCC_ClockConfig+0x1b0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d210      	bcs.n	8002624 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002602:	4b26      	ldr	r3, [pc, #152]	; (800269c <HAL_RCC_ClockConfig+0x1b0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 0207 	bic.w	r2, r3, #7
 800260a:	4924      	ldr	r1, [pc, #144]	; (800269c <HAL_RCC_ClockConfig+0x1b0>)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002612:	4b22      	ldr	r3, [pc, #136]	; (800269c <HAL_RCC_ClockConfig+0x1b0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e036      	b.n	8002692 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002630:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <HAL_RCC_ClockConfig+0x1b4>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	4918      	ldr	r1, [pc, #96]	; (80026a0 <HAL_RCC_ClockConfig+0x1b4>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d009      	beq.n	8002662 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800264e:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <HAL_RCC_ClockConfig+0x1b4>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4910      	ldr	r1, [pc, #64]	; (80026a0 <HAL_RCC_ClockConfig+0x1b4>)
 800265e:	4313      	orrs	r3, r2
 8002660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002662:	f000 f825 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 8002666:	4601      	mov	r1, r0
 8002668:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <HAL_RCC_ClockConfig+0x1b4>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	4a0c      	ldr	r2, [pc, #48]	; (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002674:	5cd3      	ldrb	r3, [r2, r3]
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	fa21 f303 	lsr.w	r3, r1, r3
 800267e:	4a0a      	ldr	r2, [pc, #40]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002682:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe fa6c 	bl	8000b64 <HAL_InitTick>
 800268c:	4603      	mov	r3, r0
 800268e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002690:	7afb      	ldrb	r3, [r7, #11]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40022000 	.word	0x40022000
 80026a0:	40021000 	.word	0x40021000
 80026a4:	08004118 	.word	0x08004118
 80026a8:	20000000 	.word	0x20000000
 80026ac:	20000004 	.word	0x20000004

080026b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b089      	sub	sp, #36	; 0x24
 80026b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61fb      	str	r3, [r7, #28]
 80026ba:	2300      	movs	r3, #0
 80026bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026be:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026c8:	4b3a      	ldr	r3, [pc, #232]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_GetSysClockFreq+0x34>
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	2b0c      	cmp	r3, #12
 80026dc:	d121      	bne.n	8002722 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d11e      	bne.n	8002722 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026e4:	4b33      	ldr	r3, [pc, #204]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d107      	bne.n	8002700 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026f0:	4b30      	ldr	r3, [pc, #192]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80026f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026f6:	0a1b      	lsrs	r3, r3, #8
 80026f8:	f003 030f 	and.w	r3, r3, #15
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	e005      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002700:	4b2c      	ldr	r3, [pc, #176]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800270c:	4a2a      	ldr	r2, [pc, #168]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002714:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10d      	bne.n	8002738 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002720:	e00a      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	2b04      	cmp	r3, #4
 8002726:	d102      	bne.n	800272e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002728:	4b24      	ldr	r3, [pc, #144]	; (80027bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	e004      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2b08      	cmp	r3, #8
 8002732:	d101      	bne.n	8002738 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002734:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002736:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	2b0c      	cmp	r3, #12
 800273c:	d133      	bne.n	80027a6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800273e:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d002      	beq.n	8002754 <HAL_RCC_GetSysClockFreq+0xa4>
 800274e:	2b03      	cmp	r3, #3
 8002750:	d003      	beq.n	800275a <HAL_RCC_GetSysClockFreq+0xaa>
 8002752:	e005      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002754:	4b19      	ldr	r3, [pc, #100]	; (80027bc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002756:	617b      	str	r3, [r7, #20]
      break;
 8002758:	e005      	b.n	8002766 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800275a:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800275c:	617b      	str	r3, [r7, #20]
      break;
 800275e:	e002      	b.n	8002766 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	617b      	str	r3, [r7, #20]
      break;
 8002764:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002766:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	091b      	lsrs	r3, r3, #4
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	3301      	adds	r3, #1
 8002772:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002774:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	fb02 f203 	mul.w	r2, r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	fbb2 f3f3 	udiv	r3, r2, r3
 800278a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800278c:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x104>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	0e5b      	lsrs	r3, r3, #25
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	3301      	adds	r3, #1
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027a6:	69bb      	ldr	r3, [r7, #24]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3724      	adds	r7, #36	; 0x24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	40021000 	.word	0x40021000
 80027b8:	08004130 	.word	0x08004130
 80027bc:	00f42400 	.word	0x00f42400
 80027c0:	007a1200 	.word	0x007a1200

080027c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c8:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000000 	.word	0x20000000

080027dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027e0:	f7ff fff0 	bl	80027c4 <HAL_RCC_GetHCLKFreq>
 80027e4:	4601      	mov	r1, r0
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	0a1b      	lsrs	r3, r3, #8
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	4a04      	ldr	r2, [pc, #16]	; (8002804 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027f2:	5cd3      	ldrb	r3, [r2, r3]
 80027f4:	f003 031f 	and.w	r3, r3, #31
 80027f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40021000 	.word	0x40021000
 8002804:	08004128 	.word	0x08004128

08002808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800280c:	f7ff ffda 	bl	80027c4 <HAL_RCC_GetHCLKFreq>
 8002810:	4601      	mov	r1, r0
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	0adb      	lsrs	r3, r3, #11
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	4a04      	ldr	r2, [pc, #16]	; (8002830 <HAL_RCC_GetPCLK2Freq+0x28>)
 800281e:	5cd3      	ldrb	r3, [r2, r3]
 8002820:	f003 031f 	and.w	r3, r3, #31
 8002824:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40021000 	.word	0x40021000
 8002830:	08004128 	.word	0x08004128

08002834 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800283c:	2300      	movs	r3, #0
 800283e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002840:	4b2a      	ldr	r3, [pc, #168]	; (80028ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800284c:	f7ff f984 	bl	8001b58 <HAL_PWREx_GetVoltageRange>
 8002850:	6178      	str	r0, [r7, #20]
 8002852:	e014      	b.n	800287e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002854:	4b25      	ldr	r3, [pc, #148]	; (80028ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002858:	4a24      	ldr	r2, [pc, #144]	; (80028ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800285a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285e:	6593      	str	r3, [r2, #88]	; 0x58
 8002860:	4b22      	ldr	r3, [pc, #136]	; (80028ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800286c:	f7ff f974 	bl	8001b58 <HAL_PWREx_GetVoltageRange>
 8002870:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002872:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002876:	4a1d      	ldr	r2, [pc, #116]	; (80028ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800287c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002884:	d10b      	bne.n	800289e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b80      	cmp	r3, #128	; 0x80
 800288a:	d919      	bls.n	80028c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2ba0      	cmp	r3, #160	; 0xa0
 8002890:	d902      	bls.n	8002898 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002892:	2302      	movs	r3, #2
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	e013      	b.n	80028c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002898:	2301      	movs	r3, #1
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	e010      	b.n	80028c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b80      	cmp	r3, #128	; 0x80
 80028a2:	d902      	bls.n	80028aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80028a4:	2303      	movs	r3, #3
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	e00a      	b.n	80028c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b80      	cmp	r3, #128	; 0x80
 80028ae:	d102      	bne.n	80028b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028b0:	2302      	movs	r3, #2
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	e004      	b.n	80028c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b70      	cmp	r3, #112	; 0x70
 80028ba:	d101      	bne.n	80028c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028bc:	2301      	movs	r3, #1
 80028be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f023 0207 	bic.w	r2, r3, #7
 80028c8:	4909      	ldr	r1, [pc, #36]	; (80028f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028d0:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d001      	beq.n	80028e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40022000 	.word	0x40022000

080028f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028fc:	2300      	movs	r3, #0
 80028fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002900:	2300      	movs	r3, #0
 8002902:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 809e 	beq.w	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002912:	2300      	movs	r3, #0
 8002914:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002916:	4b46      	ldr	r3, [pc, #280]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002926:	2300      	movs	r3, #0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00d      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800292c:	4b40      	ldr	r3, [pc, #256]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002930:	4a3f      	ldr	r2, [pc, #252]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002936:	6593      	str	r3, [r2, #88]	; 0x58
 8002938:	4b3d      	ldr	r3, [pc, #244]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800293a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002944:	2301      	movs	r3, #1
 8002946:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002948:	4b3a      	ldr	r3, [pc, #232]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a39      	ldr	r2, [pc, #228]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800294e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002952:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002954:	f7fe f956 	bl	8000c04 <HAL_GetTick>
 8002958:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800295a:	e009      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295c:	f7fe f952 	bl	8000c04 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d902      	bls.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	74fb      	strb	r3, [r7, #19]
        break;
 800296e:	e005      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002970:	4b30      	ldr	r3, [pc, #192]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0ef      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800297c:	7cfb      	ldrb	r3, [r7, #19]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d15a      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002982:	4b2b      	ldr	r3, [pc, #172]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d01e      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	429a      	cmp	r2, r3
 800299c:	d019      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800299e:	4b24      	ldr	r3, [pc, #144]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80029a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029aa:	4b21      	ldr	r3, [pc, #132]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80029ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b0:	4a1f      	ldr	r2, [pc, #124]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80029b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029ba:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80029bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c0:	4a1b      	ldr	r2, [pc, #108]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80029c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029ca:	4a19      	ldr	r2, [pc, #100]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d016      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7fe f912 	bl	8000c04 <HAL_GetTick>
 80029e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e2:	e00b      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e4:	f7fe f90e 	bl	8000c04 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d902      	bls.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	74fb      	strb	r3, [r7, #19]
            break;
 80029fa:	e006      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029fc:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80029fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0ec      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002a0a:	7cfb      	ldrb	r3, [r7, #19]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10b      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a10:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	4904      	ldr	r1, [pc, #16]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a26:	e009      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a28:	7cfb      	ldrb	r3, [r7, #19]
 8002a2a:	74bb      	strb	r3, [r7, #18]
 8002a2c:	e006      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a38:	7cfb      	ldrb	r3, [r7, #19]
 8002a3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a3c:	7c7b      	ldrb	r3, [r7, #17]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d105      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a42:	4b6e      	ldr	r3, [pc, #440]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a46:	4a6d      	ldr	r2, [pc, #436]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a5a:	4b68      	ldr	r3, [pc, #416]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a60:	f023 0203 	bic.w	r2, r3, #3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4964      	ldr	r1, [pc, #400]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00a      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a7c:	4b5f      	ldr	r3, [pc, #380]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a82:	f023 020c 	bic.w	r2, r3, #12
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	495c      	ldr	r1, [pc, #368]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a9e:	4b57      	ldr	r3, [pc, #348]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4953      	ldr	r1, [pc, #332]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0320 	and.w	r3, r3, #32
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00a      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ac0:	4b4e      	ldr	r3, [pc, #312]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	494b      	ldr	r1, [pc, #300]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00a      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ae2:	4b46      	ldr	r3, [pc, #280]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	4942      	ldr	r1, [pc, #264]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b04:	4b3d      	ldr	r3, [pc, #244]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	493a      	ldr	r1, [pc, #232]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b26:	4b35      	ldr	r3, [pc, #212]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	4931      	ldr	r1, [pc, #196]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00a      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b48:	4b2c      	ldr	r3, [pc, #176]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	4929      	ldr	r1, [pc, #164]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b6a:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	4920      	ldr	r1, [pc, #128]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d015      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	4918      	ldr	r1, [pc, #96]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002baa:	d105      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bac:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4a12      	ldr	r2, [pc, #72]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002bb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bb6:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d015      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bc4:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd2:	490a      	ldr	r1, [pc, #40]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002be2:	d105      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4a04      	ldr	r2, [pc, #16]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002bea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bf0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000

08002c00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e040      	b.n	8002c94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fd fee2 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2224      	movs	r2, #36	; 0x24
 8002c2c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0201 	bic.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f8c0 	bl	8002dc4 <UART_SetConfig>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e022      	b.n	8002c94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 faea 	bl	8003230 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0201 	orr.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 fb71 	bl	8003374 <UART_CheckIdleState>
 8002c92:	4603      	mov	r3, r0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08a      	sub	sp, #40	; 0x28
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb0:	2b20      	cmp	r3, #32
 8002cb2:	f040 8081 	bne.w	8002db8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <HAL_UART_Transmit+0x26>
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e079      	b.n	8002dba <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_UART_Transmit+0x38>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e072      	b.n	8002dba <HAL_UART_Transmit+0x11e>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2221      	movs	r2, #33	; 0x21
 8002ce6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002ce8:	f7fd ff8c 	bl	8000c04 <HAL_GetTick>
 8002cec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	88fa      	ldrh	r2, [r7, #6]
 8002cf2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	88fa      	ldrh	r2, [r7, #6]
 8002cfa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d06:	d108      	bne.n	8002d1a <HAL_UART_Transmit+0x7e>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d104      	bne.n	8002d1a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	61bb      	str	r3, [r7, #24]
 8002d18:	e003      	b.n	8002d22 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002d2a:	e02d      	b.n	8002d88 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2200      	movs	r2, #0
 8002d34:	2180      	movs	r1, #128	; 0x80
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 fb61 	bl	80033fe <UART_WaitOnFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e039      	b.n	8002dba <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10b      	bne.n	8002d64 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	881a      	ldrh	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d58:	b292      	uxth	r2, r2
 8002d5a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	3302      	adds	r3, #2
 8002d60:	61bb      	str	r3, [r7, #24]
 8002d62:	e008      	b.n	8002d76 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	781a      	ldrb	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	b292      	uxth	r2, r2
 8002d6e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	3301      	adds	r3, #1
 8002d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1cb      	bne.n	8002d2c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2140      	movs	r1, #64	; 0x40
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 fb2d 	bl	80033fe <UART_WaitOnFlagUntilTimeout>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e005      	b.n	8002dba <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2220      	movs	r2, #32
 8002db2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	e000      	b.n	8002dba <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002db8:	2302      	movs	r3, #2
  }
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3720      	adds	r7, #32
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dc4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002dc8:	b088      	sub	sp, #32
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4baa      	ldr	r3, [pc, #680]	; (800309c <UART_SetConfig+0x2d8>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	69f9      	ldr	r1, [r7, #28]
 8002dfa:	430b      	orrs	r3, r1
 8002dfc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4aa0      	ldr	r2, [pc, #640]	; (80030a0 <UART_SetConfig+0x2dc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d004      	beq.n	8002e2e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	69fa      	ldr	r2, [r7, #28]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a97      	ldr	r2, [pc, #604]	; (80030a4 <UART_SetConfig+0x2e0>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d121      	bne.n	8002e90 <UART_SetConfig+0xcc>
 8002e4c:	4b96      	ldr	r3, [pc, #600]	; (80030a8 <UART_SetConfig+0x2e4>)
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d816      	bhi.n	8002e88 <UART_SetConfig+0xc4>
 8002e5a:	a201      	add	r2, pc, #4	; (adr r2, 8002e60 <UART_SetConfig+0x9c>)
 8002e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e60:	08002e71 	.word	0x08002e71
 8002e64:	08002e7d 	.word	0x08002e7d
 8002e68:	08002e77 	.word	0x08002e77
 8002e6c:	08002e83 	.word	0x08002e83
 8002e70:	2301      	movs	r3, #1
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e098      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002e76:	2302      	movs	r3, #2
 8002e78:	76fb      	strb	r3, [r7, #27]
 8002e7a:	e095      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	76fb      	strb	r3, [r7, #27]
 8002e80:	e092      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002e82:	2308      	movs	r3, #8
 8002e84:	76fb      	strb	r3, [r7, #27]
 8002e86:	e08f      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002e88:	2310      	movs	r3, #16
 8002e8a:	76fb      	strb	r3, [r7, #27]
 8002e8c:	bf00      	nop
 8002e8e:	e08b      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a85      	ldr	r2, [pc, #532]	; (80030ac <UART_SetConfig+0x2e8>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d134      	bne.n	8002f04 <UART_SetConfig+0x140>
 8002e9a:	4b83      	ldr	r3, [pc, #524]	; (80030a8 <UART_SetConfig+0x2e4>)
 8002e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea0:	f003 030c 	and.w	r3, r3, #12
 8002ea4:	2b0c      	cmp	r3, #12
 8002ea6:	d829      	bhi.n	8002efc <UART_SetConfig+0x138>
 8002ea8:	a201      	add	r2, pc, #4	; (adr r2, 8002eb0 <UART_SetConfig+0xec>)
 8002eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eae:	bf00      	nop
 8002eb0:	08002ee5 	.word	0x08002ee5
 8002eb4:	08002efd 	.word	0x08002efd
 8002eb8:	08002efd 	.word	0x08002efd
 8002ebc:	08002efd 	.word	0x08002efd
 8002ec0:	08002ef1 	.word	0x08002ef1
 8002ec4:	08002efd 	.word	0x08002efd
 8002ec8:	08002efd 	.word	0x08002efd
 8002ecc:	08002efd 	.word	0x08002efd
 8002ed0:	08002eeb 	.word	0x08002eeb
 8002ed4:	08002efd 	.word	0x08002efd
 8002ed8:	08002efd 	.word	0x08002efd
 8002edc:	08002efd 	.word	0x08002efd
 8002ee0:	08002ef7 	.word	0x08002ef7
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	76fb      	strb	r3, [r7, #27]
 8002ee8:	e05e      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002eea:	2302      	movs	r3, #2
 8002eec:	76fb      	strb	r3, [r7, #27]
 8002eee:	e05b      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	76fb      	strb	r3, [r7, #27]
 8002ef4:	e058      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002ef6:	2308      	movs	r3, #8
 8002ef8:	76fb      	strb	r3, [r7, #27]
 8002efa:	e055      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002efc:	2310      	movs	r3, #16
 8002efe:	76fb      	strb	r3, [r7, #27]
 8002f00:	bf00      	nop
 8002f02:	e051      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a69      	ldr	r2, [pc, #420]	; (80030b0 <UART_SetConfig+0x2ec>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d120      	bne.n	8002f50 <UART_SetConfig+0x18c>
 8002f0e:	4b66      	ldr	r3, [pc, #408]	; (80030a8 <UART_SetConfig+0x2e4>)
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f14:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	d00f      	beq.n	8002f3c <UART_SetConfig+0x178>
 8002f1c:	2b10      	cmp	r3, #16
 8002f1e:	d802      	bhi.n	8002f26 <UART_SetConfig+0x162>
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <UART_SetConfig+0x16c>
 8002f24:	e010      	b.n	8002f48 <UART_SetConfig+0x184>
 8002f26:	2b20      	cmp	r3, #32
 8002f28:	d005      	beq.n	8002f36 <UART_SetConfig+0x172>
 8002f2a:	2b30      	cmp	r3, #48	; 0x30
 8002f2c:	d009      	beq.n	8002f42 <UART_SetConfig+0x17e>
 8002f2e:	e00b      	b.n	8002f48 <UART_SetConfig+0x184>
 8002f30:	2300      	movs	r3, #0
 8002f32:	76fb      	strb	r3, [r7, #27]
 8002f34:	e038      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002f36:	2302      	movs	r3, #2
 8002f38:	76fb      	strb	r3, [r7, #27]
 8002f3a:	e035      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	76fb      	strb	r3, [r7, #27]
 8002f40:	e032      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002f42:	2308      	movs	r3, #8
 8002f44:	76fb      	strb	r3, [r7, #27]
 8002f46:	e02f      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002f48:	2310      	movs	r3, #16
 8002f4a:	76fb      	strb	r3, [r7, #27]
 8002f4c:	bf00      	nop
 8002f4e:	e02b      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a52      	ldr	r2, [pc, #328]	; (80030a0 <UART_SetConfig+0x2dc>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d124      	bne.n	8002fa4 <UART_SetConfig+0x1e0>
 8002f5a:	4b53      	ldr	r3, [pc, #332]	; (80030a8 <UART_SetConfig+0x2e4>)
 8002f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f68:	d012      	beq.n	8002f90 <UART_SetConfig+0x1cc>
 8002f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6e:	d802      	bhi.n	8002f76 <UART_SetConfig+0x1b2>
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d007      	beq.n	8002f84 <UART_SetConfig+0x1c0>
 8002f74:	e012      	b.n	8002f9c <UART_SetConfig+0x1d8>
 8002f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f7a:	d006      	beq.n	8002f8a <UART_SetConfig+0x1c6>
 8002f7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f80:	d009      	beq.n	8002f96 <UART_SetConfig+0x1d2>
 8002f82:	e00b      	b.n	8002f9c <UART_SetConfig+0x1d8>
 8002f84:	2300      	movs	r3, #0
 8002f86:	76fb      	strb	r3, [r7, #27]
 8002f88:	e00e      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	76fb      	strb	r3, [r7, #27]
 8002f8e:	e00b      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002f90:	2304      	movs	r3, #4
 8002f92:	76fb      	strb	r3, [r7, #27]
 8002f94:	e008      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002f96:	2308      	movs	r3, #8
 8002f98:	76fb      	strb	r3, [r7, #27]
 8002f9a:	e005      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002f9c:	2310      	movs	r3, #16
 8002f9e:	76fb      	strb	r3, [r7, #27]
 8002fa0:	bf00      	nop
 8002fa2:	e001      	b.n	8002fa8 <UART_SetConfig+0x1e4>
 8002fa4:	2310      	movs	r3, #16
 8002fa6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a3c      	ldr	r2, [pc, #240]	; (80030a0 <UART_SetConfig+0x2dc>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	f040 8082 	bne.w	80030b8 <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fb4:	7efb      	ldrb	r3, [r7, #27]
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d823      	bhi.n	8003002 <UART_SetConfig+0x23e>
 8002fba:	a201      	add	r2, pc, #4	; (adr r2, 8002fc0 <UART_SetConfig+0x1fc>)
 8002fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc0:	08002fe5 	.word	0x08002fe5
 8002fc4:	08003003 	.word	0x08003003
 8002fc8:	08002fed 	.word	0x08002fed
 8002fcc:	08003003 	.word	0x08003003
 8002fd0:	08002ff3 	.word	0x08002ff3
 8002fd4:	08003003 	.word	0x08003003
 8002fd8:	08003003 	.word	0x08003003
 8002fdc:	08003003 	.word	0x08003003
 8002fe0:	08002ffb 	.word	0x08002ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fe4:	f7ff fbfa 	bl	80027dc <HAL_RCC_GetPCLK1Freq>
 8002fe8:	6178      	str	r0, [r7, #20]
        break;
 8002fea:	e00f      	b.n	800300c <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fec:	4b31      	ldr	r3, [pc, #196]	; (80030b4 <UART_SetConfig+0x2f0>)
 8002fee:	617b      	str	r3, [r7, #20]
        break;
 8002ff0:	e00c      	b.n	800300c <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ff2:	f7ff fb5d 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 8002ff6:	6178      	str	r0, [r7, #20]
        break;
 8002ff8:	e008      	b.n	800300c <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ffe:	617b      	str	r3, [r7, #20]
        break;
 8003000:	e004      	b.n	800300c <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	76bb      	strb	r3, [r7, #26]
        break;
 800300a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 8100 	beq.w	8003214 <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4413      	add	r3, r2
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	429a      	cmp	r2, r3
 8003022:	d305      	bcc.n	8003030 <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	429a      	cmp	r2, r3
 800302e:	d902      	bls.n	8003036 <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	76bb      	strb	r3, [r7, #26]
 8003034:	e0ee      	b.n	8003214 <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	4619      	mov	r1, r3
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	f04f 0400 	mov.w	r4, #0
 8003046:	0214      	lsls	r4, r2, #8
 8003048:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800304c:	020b      	lsls	r3, r1, #8
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6852      	ldr	r2, [r2, #4]
 8003052:	0852      	lsrs	r2, r2, #1
 8003054:	4611      	mov	r1, r2
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	eb13 0b01 	adds.w	fp, r3, r1
 800305e:	eb44 0c02 	adc.w	ip, r4, r2
 8003062:	4658      	mov	r0, fp
 8003064:	4661      	mov	r1, ip
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f04f 0400 	mov.w	r4, #0
 800306e:	461a      	mov	r2, r3
 8003070:	4623      	mov	r3, r4
 8003072:	f7fd f8ab 	bl	80001cc <__aeabi_uldivmod>
 8003076:	4603      	mov	r3, r0
 8003078:	460c      	mov	r4, r1
 800307a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003082:	d308      	bcc.n	8003096 <UART_SetConfig+0x2d2>
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800308a:	d204      	bcs.n	8003096 <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	60da      	str	r2, [r3, #12]
 8003094:	e0be      	b.n	8003214 <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	76bb      	strb	r3, [r7, #26]
 800309a:	e0bb      	b.n	8003214 <UART_SetConfig+0x450>
 800309c:	efff69f3 	.word	0xefff69f3
 80030a0:	40008000 	.word	0x40008000
 80030a4:	40013800 	.word	0x40013800
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40004400 	.word	0x40004400
 80030b0:	40004800 	.word	0x40004800
 80030b4:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c0:	d15c      	bne.n	800317c <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 80030c2:	7efb      	ldrb	r3, [r7, #27]
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d828      	bhi.n	800311a <UART_SetConfig+0x356>
 80030c8:	a201      	add	r2, pc, #4	; (adr r2, 80030d0 <UART_SetConfig+0x30c>)
 80030ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ce:	bf00      	nop
 80030d0:	080030f5 	.word	0x080030f5
 80030d4:	080030fd 	.word	0x080030fd
 80030d8:	08003105 	.word	0x08003105
 80030dc:	0800311b 	.word	0x0800311b
 80030e0:	0800310b 	.word	0x0800310b
 80030e4:	0800311b 	.word	0x0800311b
 80030e8:	0800311b 	.word	0x0800311b
 80030ec:	0800311b 	.word	0x0800311b
 80030f0:	08003113 	.word	0x08003113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030f4:	f7ff fb72 	bl	80027dc <HAL_RCC_GetPCLK1Freq>
 80030f8:	6178      	str	r0, [r7, #20]
        break;
 80030fa:	e013      	b.n	8003124 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030fc:	f7ff fb84 	bl	8002808 <HAL_RCC_GetPCLK2Freq>
 8003100:	6178      	str	r0, [r7, #20]
        break;
 8003102:	e00f      	b.n	8003124 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003104:	4b49      	ldr	r3, [pc, #292]	; (800322c <UART_SetConfig+0x468>)
 8003106:	617b      	str	r3, [r7, #20]
        break;
 8003108:	e00c      	b.n	8003124 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800310a:	f7ff fad1 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 800310e:	6178      	str	r0, [r7, #20]
        break;
 8003110:	e008      	b.n	8003124 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003116:	617b      	str	r3, [r7, #20]
        break;
 8003118:	e004      	b.n	8003124 <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	76bb      	strb	r3, [r7, #26]
        break;
 8003122:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d074      	beq.n	8003214 <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	005a      	lsls	r2, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	085b      	lsrs	r3, r3, #1
 8003134:	441a      	add	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	fbb2 f3f3 	udiv	r3, r2, r3
 800313e:	b29b      	uxth	r3, r3
 8003140:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b0f      	cmp	r3, #15
 8003146:	d916      	bls.n	8003176 <UART_SetConfig+0x3b2>
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800314e:	d212      	bcs.n	8003176 <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	b29b      	uxth	r3, r3
 8003154:	f023 030f 	bic.w	r3, r3, #15
 8003158:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	085b      	lsrs	r3, r3, #1
 800315e:	b29b      	uxth	r3, r3
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	b29a      	uxth	r2, r3
 8003166:	89fb      	ldrh	r3, [r7, #14]
 8003168:	4313      	orrs	r3, r2
 800316a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	89fa      	ldrh	r2, [r7, #14]
 8003172:	60da      	str	r2, [r3, #12]
 8003174:	e04e      	b.n	8003214 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	76bb      	strb	r3, [r7, #26]
 800317a:	e04b      	b.n	8003214 <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 800317c:	7efb      	ldrb	r3, [r7, #27]
 800317e:	2b08      	cmp	r3, #8
 8003180:	d827      	bhi.n	80031d2 <UART_SetConfig+0x40e>
 8003182:	a201      	add	r2, pc, #4	; (adr r2, 8003188 <UART_SetConfig+0x3c4>)
 8003184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003188:	080031ad 	.word	0x080031ad
 800318c:	080031b5 	.word	0x080031b5
 8003190:	080031bd 	.word	0x080031bd
 8003194:	080031d3 	.word	0x080031d3
 8003198:	080031c3 	.word	0x080031c3
 800319c:	080031d3 	.word	0x080031d3
 80031a0:	080031d3 	.word	0x080031d3
 80031a4:	080031d3 	.word	0x080031d3
 80031a8:	080031cb 	.word	0x080031cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031ac:	f7ff fb16 	bl	80027dc <HAL_RCC_GetPCLK1Freq>
 80031b0:	6178      	str	r0, [r7, #20]
        break;
 80031b2:	e013      	b.n	80031dc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031b4:	f7ff fb28 	bl	8002808 <HAL_RCC_GetPCLK2Freq>
 80031b8:	6178      	str	r0, [r7, #20]
        break;
 80031ba:	e00f      	b.n	80031dc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031bc:	4b1b      	ldr	r3, [pc, #108]	; (800322c <UART_SetConfig+0x468>)
 80031be:	617b      	str	r3, [r7, #20]
        break;
 80031c0:	e00c      	b.n	80031dc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031c2:	f7ff fa75 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 80031c6:	6178      	str	r0, [r7, #20]
        break;
 80031c8:	e008      	b.n	80031dc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ce:	617b      	str	r3, [r7, #20]
        break;
 80031d0:	e004      	b.n	80031dc <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	76bb      	strb	r3, [r7, #26]
        break;
 80031da:	bf00      	nop
    }

    if (pclk != 0U)
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d018      	beq.n	8003214 <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	085a      	lsrs	r2, r3, #1
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	441a      	add	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	2b0f      	cmp	r3, #15
 80031fc:	d908      	bls.n	8003210 <UART_SetConfig+0x44c>
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003204:	d204      	bcs.n	8003210 <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	60da      	str	r2, [r3, #12]
 800320e:	e001      	b.n	8003214 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003220:	7ebb      	ldrb	r3, [r7, #26]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3720      	adds	r7, #32
 8003226:	46bd      	mov	sp, r7
 8003228:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800322c:	00f42400 	.word	0x00f42400

08003230 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00a      	beq.n	80032e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330c:	2b00      	cmp	r3, #0
 800330e:	d01a      	beq.n	8003346 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800332e:	d10a      	bne.n	8003346 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	605a      	str	r2, [r3, #4]
  }
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af02      	add	r7, sp, #8
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003382:	f7fd fc3f 	bl	8000c04 <HAL_GetTick>
 8003386:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b08      	cmp	r3, #8
 8003394:	d10e      	bne.n	80033b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003396:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f82a 	bl	80033fe <UART_WaitOnFlagUntilTimeout>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e020      	b.n	80033f6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d10e      	bne.n	80033e0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f814 	bl	80033fe <UART_WaitOnFlagUntilTimeout>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e00a      	b.n	80033f6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b084      	sub	sp, #16
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	603b      	str	r3, [r7, #0]
 800340a:	4613      	mov	r3, r2
 800340c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800340e:	e05d      	b.n	80034cc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003416:	d059      	beq.n	80034cc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003418:	f7fd fbf4 	bl	8000c04 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	429a      	cmp	r2, r3
 8003426:	d302      	bcc.n	800342e <UART_WaitOnFlagUntilTimeout+0x30>
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d11b      	bne.n	8003466 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800343c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0201 	bic.w	r2, r2, #1
 800344c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2220      	movs	r2, #32
 8003452:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e042      	b.n	80034ec <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d02b      	beq.n	80034cc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800347e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003482:	d123      	bne.n	80034cc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800348c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800349c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0201 	bic.w	r2, r2, #1
 80034ac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2220      	movs	r2, #32
 80034b2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2220      	movs	r2, #32
 80034be:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e00f      	b.n	80034ec <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	69da      	ldr	r2, [r3, #28]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4013      	ands	r3, r2
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	429a      	cmp	r2, r3
 80034da:	bf0c      	ite	eq
 80034dc:	2301      	moveq	r3, #1
 80034de:	2300      	movne	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d092      	beq.n	8003410 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <MAX30100_Init>:
uint8_t _max30100_red_current;
uint8_t _max30100_ir_current_prev;
uint8_t _max30100_red_current_prev;
float _max30100_temp;

void MAX30100_Init(I2C_HandleTypeDef *ui2c, UART_HandleTypeDef *uuart){
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
	_max30100_ui2c = ui2c;
 80034fe:	4a07      	ldr	r2, [pc, #28]	; (800351c <MAX30100_Init+0x28>)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6013      	str	r3, [r2, #0]
	_max30100_uuart = uuart;
 8003504:	4a06      	ldr	r2, [pc, #24]	; (8003520 <MAX30100_Init+0x2c>)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6013      	str	r3, [r2, #0]
	MAX30100_Stop();
 800350a:	f000 f941 	bl	8003790 <MAX30100_Stop>
	MAX30100_ClearFIFO();
 800350e:	f000 f92f 	bl	8003770 <MAX30100_ClearFIFO>
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	2000016c 	.word	0x2000016c
 8003520:	20000198 	.word	0x20000198

08003524 <MAX30100_ReadReg>:

uint8_t MAX30100_ReadReg(uint8_t regAddr){
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af02      	add	r7, sp, #8
 800352a:	4603      	mov	r3, r0
 800352c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = regAddr, result;
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(_max30100_ui2c, MAX30100_I2C_ADDR, &reg, 1, MAX30100_TIMEOUT);
 8003532:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <MAX30100_ReadReg+0x44>)
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	f107 020f 	add.w	r2, r7, #15
 800353a:	f04f 33ff 	mov.w	r3, #4294967295
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	2301      	movs	r3, #1
 8003542:	21ae      	movs	r1, #174	; 0xae
 8003544:	f7fd fea6 	bl	8001294 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_max30100_ui2c, MAX30100_I2C_ADDR, &result, 1, MAX30100_TIMEOUT);
 8003548:	4b07      	ldr	r3, [pc, #28]	; (8003568 <MAX30100_ReadReg+0x44>)
 800354a:	6818      	ldr	r0, [r3, #0]
 800354c:	f107 020e 	add.w	r2, r7, #14
 8003550:	f04f 33ff 	mov.w	r3, #4294967295
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	2301      	movs	r3, #1
 8003558:	21ae      	movs	r1, #174	; 0xae
 800355a:	f7fd ff8f 	bl	800147c <HAL_I2C_Master_Receive>
	return result;
 800355e:	7bbb      	ldrb	r3, [r7, #14]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	2000016c 	.word	0x2000016c

0800356c <MAX30100_WriteReg>:

void MAX30100_WriteReg(uint8_t regAddr, uint8_t byte){
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af02      	add	r7, sp, #8
 8003572:	4603      	mov	r3, r0
 8003574:	460a      	mov	r2, r1
 8003576:	71fb      	strb	r3, [r7, #7]
 8003578:	4613      	mov	r3, r2
 800357a:	71bb      	strb	r3, [r7, #6]
	uint8_t reg[2] = { regAddr, byte };
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	733b      	strb	r3, [r7, #12]
 8003580:	79bb      	ldrb	r3, [r7, #6]
 8003582:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_max30100_ui2c, MAX30100_I2C_ADDR, reg, 2, MAX30100_TIMEOUT);
 8003584:	4b07      	ldr	r3, [pc, #28]	; (80035a4 <MAX30100_WriteReg+0x38>)
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	f107 020c 	add.w	r2, r7, #12
 800358c:	f04f 33ff 	mov.w	r3, #4294967295
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	2302      	movs	r3, #2
 8003594:	21ae      	movs	r1, #174	; 0xae
 8003596:	f7fd fe7d 	bl	8001294 <HAL_I2C_Master_Transmit>
}
 800359a:	bf00      	nop
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	2000016c 	.word	0x2000016c

080035a8 <MAX30100_EnableInterrupt>:

void MAX30100_EnableInterrupt(uint8_t a_full, uint8_t tmp_rdy, uint8_t hr_rdy, uint8_t spo2){
 80035a8:	b590      	push	{r4, r7, lr}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4604      	mov	r4, r0
 80035b0:	4608      	mov	r0, r1
 80035b2:	4611      	mov	r1, r2
 80035b4:	461a      	mov	r2, r3
 80035b6:	4623      	mov	r3, r4
 80035b8:	71fb      	strb	r3, [r7, #7]
 80035ba:	4603      	mov	r3, r0
 80035bc:	71bb      	strb	r3, [r7, #6]
 80035be:	460b      	mov	r3, r1
 80035c0:	717b      	strb	r3, [r7, #5]
 80035c2:	4613      	mov	r3, r2
 80035c4:	713b      	strb	r3, [r7, #4]
	uint8_t itReg = ((a_full & 0x01) << MAX30100_ENB_A_FULL) | ((tmp_rdy & 0x01) << MAX30100_ENB_TMP_RDY) | ((hr_rdy & 0x01) << MAX30100_ENB_HR_RDY) | ((spo2 & 0x01) << MAX30100_ENB_SPO2_RDY);
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	01db      	lsls	r3, r3, #7
 80035ca:	b25a      	sxtb	r2, r3
 80035cc:	79bb      	ldrb	r3, [r7, #6]
 80035ce:	019b      	lsls	r3, r3, #6
 80035d0:	b25b      	sxtb	r3, r3
 80035d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d6:	b25b      	sxtb	r3, r3
 80035d8:	4313      	orrs	r3, r2
 80035da:	b25a      	sxtb	r2, r3
 80035dc:	797b      	ldrb	r3, [r7, #5]
 80035de:	015b      	lsls	r3, r3, #5
 80035e0:	b25b      	sxtb	r3, r3
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	b25b      	sxtb	r3, r3
 80035e8:	4313      	orrs	r3, r2
 80035ea:	b25a      	sxtb	r2, r3
 80035ec:	793b      	ldrb	r3, [r7, #4]
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	b25b      	sxtb	r3, r3
 80035f2:	f003 0310 	and.w	r3, r3, #16
 80035f6:	b25b      	sxtb	r3, r3
 80035f8:	4313      	orrs	r3, r2
 80035fa:	b25b      	sxtb	r3, r3
 80035fc:	73fb      	strb	r3, [r7, #15]
	MAX30100_WriteReg(MAX30100_INTERRUPT_ENB, itReg);
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	4619      	mov	r1, r3
 8003602:	2001      	movs	r0, #1
 8003604:	f7ff ffb2 	bl	800356c <MAX30100_WriteReg>
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	bd90      	pop	{r4, r7, pc}

08003610 <MAX30100_SetMode>:
	}else if((itReg >> MAX30100_SPO2_RDY) & 0x01){

	}
}

void MAX30100_SetMode(enum MAX30100_Mode mode){
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	71fb      	strb	r3, [r7, #7]
	_max30100_mode = mode;
 800361a:	4a22      	ldr	r2, [pc, #136]	; (80036a4 <MAX30100_SetMode+0x94>)
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	7013      	strb	r3, [r2, #0]
	uint8_t modeReg = (MAX30100_ReadReg(MAX30100_MODE_CONFIG) & ~(0x07)) | ((mode << MAX30100_MODE) & 0x07);
 8003620:	2006      	movs	r0, #6
 8003622:	f7ff ff7f 	bl	8003524 <MAX30100_ReadReg>
 8003626:	4603      	mov	r3, r0
 8003628:	b25b      	sxtb	r3, r3
 800362a:	f023 0307 	bic.w	r3, r3, #7
 800362e:	b25a      	sxtb	r2, r3
 8003630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	b25b      	sxtb	r3, r3
 800363a:	4313      	orrs	r3, r2
 800363c:	b25b      	sxtb	r3, r3
 800363e:	73fb      	strb	r3, [r7, #15]
	if(mode == MAX30100_SPO2_MODE)
 8003640:	79fb      	ldrb	r3, [r7, #7]
 8003642:	2b03      	cmp	r3, #3
 8003644:	d104      	bne.n	8003650 <MAX30100_SetMode+0x40>
		modeReg |= 0x08;
 8003646:	7bfb      	ldrb	r3, [r7, #15]
 8003648:	f043 0308 	orr.w	r3, r3, #8
 800364c:	73fb      	strb	r3, [r7, #15]
 800364e:	e003      	b.n	8003658 <MAX30100_SetMode+0x48>
	else
		modeReg &= ~0x08;
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	f023 0308 	bic.w	r3, r3, #8
 8003656:	73fb      	strb	r3, [r7, #15]
	MAX30100_WriteReg(MAX30100_MODE_CONFIG, modeReg);
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	4619      	mov	r1, r3
 800365c:	2006      	movs	r0, #6
 800365e:	f7ff ff85 	bl	800356c <MAX30100_WriteReg>
	if(_max30100_mode == MAX30100_SPO2_MODE)
 8003662:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <MAX30100_SetMode+0x94>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b03      	cmp	r3, #3
 8003668:	d106      	bne.n	8003678 <MAX30100_SetMode+0x68>
		MAX30100_EnableInterrupt(0, 1, 0, 0);
 800366a:	2300      	movs	r3, #0
 800366c:	2200      	movs	r2, #0
 800366e:	2101      	movs	r1, #1
 8003670:	2000      	movs	r0, #0
 8003672:	f7ff ff99 	bl	80035a8 <MAX30100_EnableInterrupt>
	else if(_max30100_mode == MAX30100_HRONLY_MODE)
		MAX30100_EnableInterrupt(1, 0, 0, 0);
	else
		MAX30100_EnableInterrupt(0, 0, 0, 0);
}
 8003676:	e010      	b.n	800369a <MAX30100_SetMode+0x8a>
	else if(_max30100_mode == MAX30100_HRONLY_MODE)
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <MAX30100_SetMode+0x94>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d106      	bne.n	800368e <MAX30100_SetMode+0x7e>
		MAX30100_EnableInterrupt(1, 0, 0, 0);
 8003680:	2300      	movs	r3, #0
 8003682:	2200      	movs	r2, #0
 8003684:	2100      	movs	r1, #0
 8003686:	2001      	movs	r0, #1
 8003688:	f7ff ff8e 	bl	80035a8 <MAX30100_EnableInterrupt>
}
 800368c:	e005      	b.n	800369a <MAX30100_SetMode+0x8a>
		MAX30100_EnableInterrupt(0, 0, 0, 0);
 800368e:	2300      	movs	r3, #0
 8003690:	2200      	movs	r2, #0
 8003692:	2100      	movs	r1, #0
 8003694:	2000      	movs	r0, #0
 8003696:	f7ff ff87 	bl	80035a8 <MAX30100_EnableInterrupt>
}
 800369a:	bf00      	nop
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000194 	.word	0x20000194

080036a8 <MAX30100_SetSpO2SampleRate>:
//ok
void MAX30100_SetSpO2SampleRate(enum MAX30100_SpO2SR sr){
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	71fb      	strb	r3, [r7, #7]
	uint8_t spo2Reg = MAX30100_ReadReg(MAX30100_SPO2_CONFIG);
 80036b2:	2007      	movs	r0, #7
 80036b4:	f7ff ff36 	bl	8003524 <MAX30100_ReadReg>
 80036b8:	4603      	mov	r3, r0
 80036ba:	73fb      	strb	r3, [r7, #15]
	spo2Reg = ((sr << MAX30100_SPO2_SR) & 0x1c) | (spo2Reg & ~0x1c);
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	b25b      	sxtb	r3, r3
 80036c2:	f003 031c 	and.w	r3, r3, #28
 80036c6:	b25a      	sxtb	r2, r3
 80036c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036cc:	f023 031c 	bic.w	r3, r3, #28
 80036d0:	b25b      	sxtb	r3, r3
 80036d2:	4313      	orrs	r3, r2
 80036d4:	b25b      	sxtb	r3, r3
 80036d6:	73fb      	strb	r3, [r7, #15]
	MAX30100_WriteReg(MAX30100_SPO2_CONFIG, spo2Reg);
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	4619      	mov	r1, r3
 80036dc:	2007      	movs	r0, #7
 80036de:	f7ff ff45 	bl	800356c <MAX30100_WriteReg>
}
 80036e2:	bf00      	nop
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <MAX30100_SetLEDPulseWidth>:
//ok
void MAX30100_SetLEDPulseWidth(enum MAX30100_LEDPulseWidth pw){
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b084      	sub	sp, #16
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	4603      	mov	r3, r0
 80036f2:	71fb      	strb	r3, [r7, #7]
	uint8_t spo2Reg = MAX30100_ReadReg(MAX30100_SPO2_CONFIG);
 80036f4:	2007      	movs	r0, #7
 80036f6:	f7ff ff15 	bl	8003524 <MAX30100_ReadReg>
 80036fa:	4603      	mov	r3, r0
 80036fc:	73fb      	strb	r3, [r7, #15]
	spo2Reg = ((pw << MAX30100_LED_PW) & 0x03) | (spo2Reg & ~0x03);
 80036fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	b25a      	sxtb	r2, r3
 8003708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800370c:	f023 0303 	bic.w	r3, r3, #3
 8003710:	b25b      	sxtb	r3, r3
 8003712:	4313      	orrs	r3, r2
 8003714:	b25b      	sxtb	r3, r3
 8003716:	73fb      	strb	r3, [r7, #15]
	MAX30100_WriteReg(MAX30100_SPO2_CONFIG, spo2Reg);
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	4619      	mov	r1, r3
 800371c:	2007      	movs	r0, #7
 800371e:	f7ff ff25 	bl	800356c <MAX30100_WriteReg>
}
 8003722:	bf00      	nop
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <MAX30100_SetLEDCurrent>:
void MAX30100_SetLEDCurrent(enum MAX30100_LEDCurrent redpa, enum MAX30100_LEDCurrent irpa){
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	460a      	mov	r2, r1
 8003736:	71fb      	strb	r3, [r7, #7]
 8003738:	4613      	mov	r3, r2
 800373a:	71bb      	strb	r3, [r7, #6]
	_max30100_red_current = redpa;
 800373c:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <MAX30100_SetLEDCurrent+0x3c>)
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	7013      	strb	r3, [r2, #0]
	_max30100_ir_current = irpa;
 8003742:	4a0a      	ldr	r2, [pc, #40]	; (800376c <MAX30100_SetLEDCurrent+0x40>)
 8003744:	79bb      	ldrb	r3, [r7, #6]
 8003746:	7013      	strb	r3, [r2, #0]
	MAX30100_WriteReg(MAX30100_LED_CONFIG, (redpa << MAX30100_LED_RED_PA) | irpa);
 8003748:	79fb      	ldrb	r3, [r7, #7]
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	b25a      	sxtb	r2, r3
 800374e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003752:	4313      	orrs	r3, r2
 8003754:	b25b      	sxtb	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	4619      	mov	r1, r3
 800375a:	2009      	movs	r0, #9
 800375c:	f7ff ff06 	bl	800356c <MAX30100_WriteReg>
}
 8003760:	bf00      	nop
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	2000019c 	.word	0x2000019c
 800376c:	2000016a 	.word	0x2000016a

08003770 <MAX30100_ClearFIFO>:

void MAX30100_ClearFIFO(void){
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
	MAX30100_WriteReg(MAX30100_FIFO_WR_PTR, 0x00);
 8003774:	2100      	movs	r1, #0
 8003776:	2002      	movs	r0, #2
 8003778:	f7ff fef8 	bl	800356c <MAX30100_WriteReg>
	MAX30100_WriteReg(MAX30100_FIFO_RD_PTR, 0x00);
 800377c:	2100      	movs	r1, #0
 800377e:	2004      	movs	r0, #4
 8003780:	f7ff fef4 	bl	800356c <MAX30100_WriteReg>
	MAX30100_WriteReg(MAX30100_OVF_COUNTER, 0x00);
 8003784:	2100      	movs	r1, #0
 8003786:	2003      	movs	r0, #3
 8003788:	f7ff fef0 	bl	800356c <MAX30100_WriteReg>
}
 800378c:	bf00      	nop
 800378e:	bd80      	pop	{r7, pc}

08003790 <MAX30100_Stop>:
	  sprintf(data, "red:%d\tir:%d\n", samplesRed[i], samplesIr[i]);
      HAL_UART_Transmit(uuart, data, strlen(data), MAX30100_TIMEOUT);
	}
}

void MAX30100_Stop(void){
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
	_max30100_mode = MAX30100_IDLE_MODE;
 8003794:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <MAX30100_Stop+0x20>)
 8003796:	2200      	movs	r2, #0
 8003798:	701a      	strb	r2, [r3, #0]
	MAX30100_SetLEDCurrent(MAX30100_LEDCURRENT_0_0, MAX30100_LEDCURRENT_0_0);
 800379a:	2100      	movs	r1, #0
 800379c:	2000      	movs	r0, #0
 800379e:	f7ff ffc5 	bl	800372c <MAX30100_SetLEDCurrent>
	MAX30100_WriteReg(MAX30100_INTERRUPT_ENB, 0x00);
 80037a2:	2100      	movs	r1, #0
 80037a4:	2001      	movs	r0, #1
 80037a6:	f7ff fee1 	bl	800356c <MAX30100_WriteReg>
}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20000194 	.word	0x20000194

080037b4 <__errno>:
 80037b4:	4b01      	ldr	r3, [pc, #4]	; (80037bc <__errno+0x8>)
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	2000000c 	.word	0x2000000c

080037c0 <__libc_init_array>:
 80037c0:	b570      	push	{r4, r5, r6, lr}
 80037c2:	4e0d      	ldr	r6, [pc, #52]	; (80037f8 <__libc_init_array+0x38>)
 80037c4:	4c0d      	ldr	r4, [pc, #52]	; (80037fc <__libc_init_array+0x3c>)
 80037c6:	1ba4      	subs	r4, r4, r6
 80037c8:	10a4      	asrs	r4, r4, #2
 80037ca:	2500      	movs	r5, #0
 80037cc:	42a5      	cmp	r5, r4
 80037ce:	d109      	bne.n	80037e4 <__libc_init_array+0x24>
 80037d0:	4e0b      	ldr	r6, [pc, #44]	; (8003800 <__libc_init_array+0x40>)
 80037d2:	4c0c      	ldr	r4, [pc, #48]	; (8003804 <__libc_init_array+0x44>)
 80037d4:	f000 fc88 	bl	80040e8 <_init>
 80037d8:	1ba4      	subs	r4, r4, r6
 80037da:	10a4      	asrs	r4, r4, #2
 80037dc:	2500      	movs	r5, #0
 80037de:	42a5      	cmp	r5, r4
 80037e0:	d105      	bne.n	80037ee <__libc_init_array+0x2e>
 80037e2:	bd70      	pop	{r4, r5, r6, pc}
 80037e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037e8:	4798      	blx	r3
 80037ea:	3501      	adds	r5, #1
 80037ec:	e7ee      	b.n	80037cc <__libc_init_array+0xc>
 80037ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037f2:	4798      	blx	r3
 80037f4:	3501      	adds	r5, #1
 80037f6:	e7f2      	b.n	80037de <__libc_init_array+0x1e>
 80037f8:	080041cc 	.word	0x080041cc
 80037fc:	080041cc 	.word	0x080041cc
 8003800:	080041cc 	.word	0x080041cc
 8003804:	080041d0 	.word	0x080041d0

08003808 <memset>:
 8003808:	4402      	add	r2, r0
 800380a:	4603      	mov	r3, r0
 800380c:	4293      	cmp	r3, r2
 800380e:	d100      	bne.n	8003812 <memset+0xa>
 8003810:	4770      	bx	lr
 8003812:	f803 1b01 	strb.w	r1, [r3], #1
 8003816:	e7f9      	b.n	800380c <memset+0x4>

08003818 <_puts_r>:
 8003818:	b570      	push	{r4, r5, r6, lr}
 800381a:	460e      	mov	r6, r1
 800381c:	4605      	mov	r5, r0
 800381e:	b118      	cbz	r0, 8003828 <_puts_r+0x10>
 8003820:	6983      	ldr	r3, [r0, #24]
 8003822:	b90b      	cbnz	r3, 8003828 <_puts_r+0x10>
 8003824:	f000 fa0c 	bl	8003c40 <__sinit>
 8003828:	69ab      	ldr	r3, [r5, #24]
 800382a:	68ac      	ldr	r4, [r5, #8]
 800382c:	b913      	cbnz	r3, 8003834 <_puts_r+0x1c>
 800382e:	4628      	mov	r0, r5
 8003830:	f000 fa06 	bl	8003c40 <__sinit>
 8003834:	4b23      	ldr	r3, [pc, #140]	; (80038c4 <_puts_r+0xac>)
 8003836:	429c      	cmp	r4, r3
 8003838:	d117      	bne.n	800386a <_puts_r+0x52>
 800383a:	686c      	ldr	r4, [r5, #4]
 800383c:	89a3      	ldrh	r3, [r4, #12]
 800383e:	071b      	lsls	r3, r3, #28
 8003840:	d51d      	bpl.n	800387e <_puts_r+0x66>
 8003842:	6923      	ldr	r3, [r4, #16]
 8003844:	b1db      	cbz	r3, 800387e <_puts_r+0x66>
 8003846:	3e01      	subs	r6, #1
 8003848:	68a3      	ldr	r3, [r4, #8]
 800384a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800384e:	3b01      	subs	r3, #1
 8003850:	60a3      	str	r3, [r4, #8]
 8003852:	b9e9      	cbnz	r1, 8003890 <_puts_r+0x78>
 8003854:	2b00      	cmp	r3, #0
 8003856:	da2e      	bge.n	80038b6 <_puts_r+0x9e>
 8003858:	4622      	mov	r2, r4
 800385a:	210a      	movs	r1, #10
 800385c:	4628      	mov	r0, r5
 800385e:	f000 f83f 	bl	80038e0 <__swbuf_r>
 8003862:	3001      	adds	r0, #1
 8003864:	d011      	beq.n	800388a <_puts_r+0x72>
 8003866:	200a      	movs	r0, #10
 8003868:	e011      	b.n	800388e <_puts_r+0x76>
 800386a:	4b17      	ldr	r3, [pc, #92]	; (80038c8 <_puts_r+0xb0>)
 800386c:	429c      	cmp	r4, r3
 800386e:	d101      	bne.n	8003874 <_puts_r+0x5c>
 8003870:	68ac      	ldr	r4, [r5, #8]
 8003872:	e7e3      	b.n	800383c <_puts_r+0x24>
 8003874:	4b15      	ldr	r3, [pc, #84]	; (80038cc <_puts_r+0xb4>)
 8003876:	429c      	cmp	r4, r3
 8003878:	bf08      	it	eq
 800387a:	68ec      	ldreq	r4, [r5, #12]
 800387c:	e7de      	b.n	800383c <_puts_r+0x24>
 800387e:	4621      	mov	r1, r4
 8003880:	4628      	mov	r0, r5
 8003882:	f000 f87f 	bl	8003984 <__swsetup_r>
 8003886:	2800      	cmp	r0, #0
 8003888:	d0dd      	beq.n	8003846 <_puts_r+0x2e>
 800388a:	f04f 30ff 	mov.w	r0, #4294967295
 800388e:	bd70      	pop	{r4, r5, r6, pc}
 8003890:	2b00      	cmp	r3, #0
 8003892:	da04      	bge.n	800389e <_puts_r+0x86>
 8003894:	69a2      	ldr	r2, [r4, #24]
 8003896:	429a      	cmp	r2, r3
 8003898:	dc06      	bgt.n	80038a8 <_puts_r+0x90>
 800389a:	290a      	cmp	r1, #10
 800389c:	d004      	beq.n	80038a8 <_puts_r+0x90>
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	6022      	str	r2, [r4, #0]
 80038a4:	7019      	strb	r1, [r3, #0]
 80038a6:	e7cf      	b.n	8003848 <_puts_r+0x30>
 80038a8:	4622      	mov	r2, r4
 80038aa:	4628      	mov	r0, r5
 80038ac:	f000 f818 	bl	80038e0 <__swbuf_r>
 80038b0:	3001      	adds	r0, #1
 80038b2:	d1c9      	bne.n	8003848 <_puts_r+0x30>
 80038b4:	e7e9      	b.n	800388a <_puts_r+0x72>
 80038b6:	6823      	ldr	r3, [r4, #0]
 80038b8:	200a      	movs	r0, #10
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	6022      	str	r2, [r4, #0]
 80038be:	7018      	strb	r0, [r3, #0]
 80038c0:	e7e5      	b.n	800388e <_puts_r+0x76>
 80038c2:	bf00      	nop
 80038c4:	08004184 	.word	0x08004184
 80038c8:	080041a4 	.word	0x080041a4
 80038cc:	08004164 	.word	0x08004164

080038d0 <puts>:
 80038d0:	4b02      	ldr	r3, [pc, #8]	; (80038dc <puts+0xc>)
 80038d2:	4601      	mov	r1, r0
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	f7ff bf9f 	b.w	8003818 <_puts_r>
 80038da:	bf00      	nop
 80038dc:	2000000c 	.word	0x2000000c

080038e0 <__swbuf_r>:
 80038e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e2:	460e      	mov	r6, r1
 80038e4:	4614      	mov	r4, r2
 80038e6:	4605      	mov	r5, r0
 80038e8:	b118      	cbz	r0, 80038f2 <__swbuf_r+0x12>
 80038ea:	6983      	ldr	r3, [r0, #24]
 80038ec:	b90b      	cbnz	r3, 80038f2 <__swbuf_r+0x12>
 80038ee:	f000 f9a7 	bl	8003c40 <__sinit>
 80038f2:	4b21      	ldr	r3, [pc, #132]	; (8003978 <__swbuf_r+0x98>)
 80038f4:	429c      	cmp	r4, r3
 80038f6:	d12a      	bne.n	800394e <__swbuf_r+0x6e>
 80038f8:	686c      	ldr	r4, [r5, #4]
 80038fa:	69a3      	ldr	r3, [r4, #24]
 80038fc:	60a3      	str	r3, [r4, #8]
 80038fe:	89a3      	ldrh	r3, [r4, #12]
 8003900:	071a      	lsls	r2, r3, #28
 8003902:	d52e      	bpl.n	8003962 <__swbuf_r+0x82>
 8003904:	6923      	ldr	r3, [r4, #16]
 8003906:	b363      	cbz	r3, 8003962 <__swbuf_r+0x82>
 8003908:	6923      	ldr	r3, [r4, #16]
 800390a:	6820      	ldr	r0, [r4, #0]
 800390c:	1ac0      	subs	r0, r0, r3
 800390e:	6963      	ldr	r3, [r4, #20]
 8003910:	b2f6      	uxtb	r6, r6
 8003912:	4283      	cmp	r3, r0
 8003914:	4637      	mov	r7, r6
 8003916:	dc04      	bgt.n	8003922 <__swbuf_r+0x42>
 8003918:	4621      	mov	r1, r4
 800391a:	4628      	mov	r0, r5
 800391c:	f000 f926 	bl	8003b6c <_fflush_r>
 8003920:	bb28      	cbnz	r0, 800396e <__swbuf_r+0x8e>
 8003922:	68a3      	ldr	r3, [r4, #8]
 8003924:	3b01      	subs	r3, #1
 8003926:	60a3      	str	r3, [r4, #8]
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	6022      	str	r2, [r4, #0]
 800392e:	701e      	strb	r6, [r3, #0]
 8003930:	6963      	ldr	r3, [r4, #20]
 8003932:	3001      	adds	r0, #1
 8003934:	4283      	cmp	r3, r0
 8003936:	d004      	beq.n	8003942 <__swbuf_r+0x62>
 8003938:	89a3      	ldrh	r3, [r4, #12]
 800393a:	07db      	lsls	r3, r3, #31
 800393c:	d519      	bpl.n	8003972 <__swbuf_r+0x92>
 800393e:	2e0a      	cmp	r6, #10
 8003940:	d117      	bne.n	8003972 <__swbuf_r+0x92>
 8003942:	4621      	mov	r1, r4
 8003944:	4628      	mov	r0, r5
 8003946:	f000 f911 	bl	8003b6c <_fflush_r>
 800394a:	b190      	cbz	r0, 8003972 <__swbuf_r+0x92>
 800394c:	e00f      	b.n	800396e <__swbuf_r+0x8e>
 800394e:	4b0b      	ldr	r3, [pc, #44]	; (800397c <__swbuf_r+0x9c>)
 8003950:	429c      	cmp	r4, r3
 8003952:	d101      	bne.n	8003958 <__swbuf_r+0x78>
 8003954:	68ac      	ldr	r4, [r5, #8]
 8003956:	e7d0      	b.n	80038fa <__swbuf_r+0x1a>
 8003958:	4b09      	ldr	r3, [pc, #36]	; (8003980 <__swbuf_r+0xa0>)
 800395a:	429c      	cmp	r4, r3
 800395c:	bf08      	it	eq
 800395e:	68ec      	ldreq	r4, [r5, #12]
 8003960:	e7cb      	b.n	80038fa <__swbuf_r+0x1a>
 8003962:	4621      	mov	r1, r4
 8003964:	4628      	mov	r0, r5
 8003966:	f000 f80d 	bl	8003984 <__swsetup_r>
 800396a:	2800      	cmp	r0, #0
 800396c:	d0cc      	beq.n	8003908 <__swbuf_r+0x28>
 800396e:	f04f 37ff 	mov.w	r7, #4294967295
 8003972:	4638      	mov	r0, r7
 8003974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003976:	bf00      	nop
 8003978:	08004184 	.word	0x08004184
 800397c:	080041a4 	.word	0x080041a4
 8003980:	08004164 	.word	0x08004164

08003984 <__swsetup_r>:
 8003984:	4b32      	ldr	r3, [pc, #200]	; (8003a50 <__swsetup_r+0xcc>)
 8003986:	b570      	push	{r4, r5, r6, lr}
 8003988:	681d      	ldr	r5, [r3, #0]
 800398a:	4606      	mov	r6, r0
 800398c:	460c      	mov	r4, r1
 800398e:	b125      	cbz	r5, 800399a <__swsetup_r+0x16>
 8003990:	69ab      	ldr	r3, [r5, #24]
 8003992:	b913      	cbnz	r3, 800399a <__swsetup_r+0x16>
 8003994:	4628      	mov	r0, r5
 8003996:	f000 f953 	bl	8003c40 <__sinit>
 800399a:	4b2e      	ldr	r3, [pc, #184]	; (8003a54 <__swsetup_r+0xd0>)
 800399c:	429c      	cmp	r4, r3
 800399e:	d10f      	bne.n	80039c0 <__swsetup_r+0x3c>
 80039a0:	686c      	ldr	r4, [r5, #4]
 80039a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	0715      	lsls	r5, r2, #28
 80039aa:	d42c      	bmi.n	8003a06 <__swsetup_r+0x82>
 80039ac:	06d0      	lsls	r0, r2, #27
 80039ae:	d411      	bmi.n	80039d4 <__swsetup_r+0x50>
 80039b0:	2209      	movs	r2, #9
 80039b2:	6032      	str	r2, [r6, #0]
 80039b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039b8:	81a3      	strh	r3, [r4, #12]
 80039ba:	f04f 30ff 	mov.w	r0, #4294967295
 80039be:	e03e      	b.n	8003a3e <__swsetup_r+0xba>
 80039c0:	4b25      	ldr	r3, [pc, #148]	; (8003a58 <__swsetup_r+0xd4>)
 80039c2:	429c      	cmp	r4, r3
 80039c4:	d101      	bne.n	80039ca <__swsetup_r+0x46>
 80039c6:	68ac      	ldr	r4, [r5, #8]
 80039c8:	e7eb      	b.n	80039a2 <__swsetup_r+0x1e>
 80039ca:	4b24      	ldr	r3, [pc, #144]	; (8003a5c <__swsetup_r+0xd8>)
 80039cc:	429c      	cmp	r4, r3
 80039ce:	bf08      	it	eq
 80039d0:	68ec      	ldreq	r4, [r5, #12]
 80039d2:	e7e6      	b.n	80039a2 <__swsetup_r+0x1e>
 80039d4:	0751      	lsls	r1, r2, #29
 80039d6:	d512      	bpl.n	80039fe <__swsetup_r+0x7a>
 80039d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039da:	b141      	cbz	r1, 80039ee <__swsetup_r+0x6a>
 80039dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039e0:	4299      	cmp	r1, r3
 80039e2:	d002      	beq.n	80039ea <__swsetup_r+0x66>
 80039e4:	4630      	mov	r0, r6
 80039e6:	f000 fa19 	bl	8003e1c <_free_r>
 80039ea:	2300      	movs	r3, #0
 80039ec:	6363      	str	r3, [r4, #52]	; 0x34
 80039ee:	89a3      	ldrh	r3, [r4, #12]
 80039f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80039f4:	81a3      	strh	r3, [r4, #12]
 80039f6:	2300      	movs	r3, #0
 80039f8:	6063      	str	r3, [r4, #4]
 80039fa:	6923      	ldr	r3, [r4, #16]
 80039fc:	6023      	str	r3, [r4, #0]
 80039fe:	89a3      	ldrh	r3, [r4, #12]
 8003a00:	f043 0308 	orr.w	r3, r3, #8
 8003a04:	81a3      	strh	r3, [r4, #12]
 8003a06:	6923      	ldr	r3, [r4, #16]
 8003a08:	b94b      	cbnz	r3, 8003a1e <__swsetup_r+0x9a>
 8003a0a:	89a3      	ldrh	r3, [r4, #12]
 8003a0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a14:	d003      	beq.n	8003a1e <__swsetup_r+0x9a>
 8003a16:	4621      	mov	r1, r4
 8003a18:	4630      	mov	r0, r6
 8003a1a:	f000 f9bf 	bl	8003d9c <__smakebuf_r>
 8003a1e:	89a2      	ldrh	r2, [r4, #12]
 8003a20:	f012 0301 	ands.w	r3, r2, #1
 8003a24:	d00c      	beq.n	8003a40 <__swsetup_r+0xbc>
 8003a26:	2300      	movs	r3, #0
 8003a28:	60a3      	str	r3, [r4, #8]
 8003a2a:	6963      	ldr	r3, [r4, #20]
 8003a2c:	425b      	negs	r3, r3
 8003a2e:	61a3      	str	r3, [r4, #24]
 8003a30:	6923      	ldr	r3, [r4, #16]
 8003a32:	b953      	cbnz	r3, 8003a4a <__swsetup_r+0xc6>
 8003a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a38:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003a3c:	d1ba      	bne.n	80039b4 <__swsetup_r+0x30>
 8003a3e:	bd70      	pop	{r4, r5, r6, pc}
 8003a40:	0792      	lsls	r2, r2, #30
 8003a42:	bf58      	it	pl
 8003a44:	6963      	ldrpl	r3, [r4, #20]
 8003a46:	60a3      	str	r3, [r4, #8]
 8003a48:	e7f2      	b.n	8003a30 <__swsetup_r+0xac>
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	e7f7      	b.n	8003a3e <__swsetup_r+0xba>
 8003a4e:	bf00      	nop
 8003a50:	2000000c 	.word	0x2000000c
 8003a54:	08004184 	.word	0x08004184
 8003a58:	080041a4 	.word	0x080041a4
 8003a5c:	08004164 	.word	0x08004164

08003a60 <__sflush_r>:
 8003a60:	898a      	ldrh	r2, [r1, #12]
 8003a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a66:	4605      	mov	r5, r0
 8003a68:	0710      	lsls	r0, r2, #28
 8003a6a:	460c      	mov	r4, r1
 8003a6c:	d458      	bmi.n	8003b20 <__sflush_r+0xc0>
 8003a6e:	684b      	ldr	r3, [r1, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	dc05      	bgt.n	8003a80 <__sflush_r+0x20>
 8003a74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	dc02      	bgt.n	8003a80 <__sflush_r+0x20>
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a82:	2e00      	cmp	r6, #0
 8003a84:	d0f9      	beq.n	8003a7a <__sflush_r+0x1a>
 8003a86:	2300      	movs	r3, #0
 8003a88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003a8c:	682f      	ldr	r7, [r5, #0]
 8003a8e:	6a21      	ldr	r1, [r4, #32]
 8003a90:	602b      	str	r3, [r5, #0]
 8003a92:	d032      	beq.n	8003afa <__sflush_r+0x9a>
 8003a94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a96:	89a3      	ldrh	r3, [r4, #12]
 8003a98:	075a      	lsls	r2, r3, #29
 8003a9a:	d505      	bpl.n	8003aa8 <__sflush_r+0x48>
 8003a9c:	6863      	ldr	r3, [r4, #4]
 8003a9e:	1ac0      	subs	r0, r0, r3
 8003aa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003aa2:	b10b      	cbz	r3, 8003aa8 <__sflush_r+0x48>
 8003aa4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003aa6:	1ac0      	subs	r0, r0, r3
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	4602      	mov	r2, r0
 8003aac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003aae:	6a21      	ldr	r1, [r4, #32]
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	47b0      	blx	r6
 8003ab4:	1c43      	adds	r3, r0, #1
 8003ab6:	89a3      	ldrh	r3, [r4, #12]
 8003ab8:	d106      	bne.n	8003ac8 <__sflush_r+0x68>
 8003aba:	6829      	ldr	r1, [r5, #0]
 8003abc:	291d      	cmp	r1, #29
 8003abe:	d848      	bhi.n	8003b52 <__sflush_r+0xf2>
 8003ac0:	4a29      	ldr	r2, [pc, #164]	; (8003b68 <__sflush_r+0x108>)
 8003ac2:	40ca      	lsrs	r2, r1
 8003ac4:	07d6      	lsls	r6, r2, #31
 8003ac6:	d544      	bpl.n	8003b52 <__sflush_r+0xf2>
 8003ac8:	2200      	movs	r2, #0
 8003aca:	6062      	str	r2, [r4, #4]
 8003acc:	04d9      	lsls	r1, r3, #19
 8003ace:	6922      	ldr	r2, [r4, #16]
 8003ad0:	6022      	str	r2, [r4, #0]
 8003ad2:	d504      	bpl.n	8003ade <__sflush_r+0x7e>
 8003ad4:	1c42      	adds	r2, r0, #1
 8003ad6:	d101      	bne.n	8003adc <__sflush_r+0x7c>
 8003ad8:	682b      	ldr	r3, [r5, #0]
 8003ada:	b903      	cbnz	r3, 8003ade <__sflush_r+0x7e>
 8003adc:	6560      	str	r0, [r4, #84]	; 0x54
 8003ade:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ae0:	602f      	str	r7, [r5, #0]
 8003ae2:	2900      	cmp	r1, #0
 8003ae4:	d0c9      	beq.n	8003a7a <__sflush_r+0x1a>
 8003ae6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003aea:	4299      	cmp	r1, r3
 8003aec:	d002      	beq.n	8003af4 <__sflush_r+0x94>
 8003aee:	4628      	mov	r0, r5
 8003af0:	f000 f994 	bl	8003e1c <_free_r>
 8003af4:	2000      	movs	r0, #0
 8003af6:	6360      	str	r0, [r4, #52]	; 0x34
 8003af8:	e7c0      	b.n	8003a7c <__sflush_r+0x1c>
 8003afa:	2301      	movs	r3, #1
 8003afc:	4628      	mov	r0, r5
 8003afe:	47b0      	blx	r6
 8003b00:	1c41      	adds	r1, r0, #1
 8003b02:	d1c8      	bne.n	8003a96 <__sflush_r+0x36>
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0c5      	beq.n	8003a96 <__sflush_r+0x36>
 8003b0a:	2b1d      	cmp	r3, #29
 8003b0c:	d001      	beq.n	8003b12 <__sflush_r+0xb2>
 8003b0e:	2b16      	cmp	r3, #22
 8003b10:	d101      	bne.n	8003b16 <__sflush_r+0xb6>
 8003b12:	602f      	str	r7, [r5, #0]
 8003b14:	e7b1      	b.n	8003a7a <__sflush_r+0x1a>
 8003b16:	89a3      	ldrh	r3, [r4, #12]
 8003b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b1c:	81a3      	strh	r3, [r4, #12]
 8003b1e:	e7ad      	b.n	8003a7c <__sflush_r+0x1c>
 8003b20:	690f      	ldr	r7, [r1, #16]
 8003b22:	2f00      	cmp	r7, #0
 8003b24:	d0a9      	beq.n	8003a7a <__sflush_r+0x1a>
 8003b26:	0793      	lsls	r3, r2, #30
 8003b28:	680e      	ldr	r6, [r1, #0]
 8003b2a:	bf08      	it	eq
 8003b2c:	694b      	ldreq	r3, [r1, #20]
 8003b2e:	600f      	str	r7, [r1, #0]
 8003b30:	bf18      	it	ne
 8003b32:	2300      	movne	r3, #0
 8003b34:	eba6 0807 	sub.w	r8, r6, r7
 8003b38:	608b      	str	r3, [r1, #8]
 8003b3a:	f1b8 0f00 	cmp.w	r8, #0
 8003b3e:	dd9c      	ble.n	8003a7a <__sflush_r+0x1a>
 8003b40:	4643      	mov	r3, r8
 8003b42:	463a      	mov	r2, r7
 8003b44:	6a21      	ldr	r1, [r4, #32]
 8003b46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b48:	4628      	mov	r0, r5
 8003b4a:	47b0      	blx	r6
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	dc06      	bgt.n	8003b5e <__sflush_r+0xfe>
 8003b50:	89a3      	ldrh	r3, [r4, #12]
 8003b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b56:	81a3      	strh	r3, [r4, #12]
 8003b58:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5c:	e78e      	b.n	8003a7c <__sflush_r+0x1c>
 8003b5e:	4407      	add	r7, r0
 8003b60:	eba8 0800 	sub.w	r8, r8, r0
 8003b64:	e7e9      	b.n	8003b3a <__sflush_r+0xda>
 8003b66:	bf00      	nop
 8003b68:	20400001 	.word	0x20400001

08003b6c <_fflush_r>:
 8003b6c:	b538      	push	{r3, r4, r5, lr}
 8003b6e:	690b      	ldr	r3, [r1, #16]
 8003b70:	4605      	mov	r5, r0
 8003b72:	460c      	mov	r4, r1
 8003b74:	b1db      	cbz	r3, 8003bae <_fflush_r+0x42>
 8003b76:	b118      	cbz	r0, 8003b80 <_fflush_r+0x14>
 8003b78:	6983      	ldr	r3, [r0, #24]
 8003b7a:	b90b      	cbnz	r3, 8003b80 <_fflush_r+0x14>
 8003b7c:	f000 f860 	bl	8003c40 <__sinit>
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <_fflush_r+0x48>)
 8003b82:	429c      	cmp	r4, r3
 8003b84:	d109      	bne.n	8003b9a <_fflush_r+0x2e>
 8003b86:	686c      	ldr	r4, [r5, #4]
 8003b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b8c:	b17b      	cbz	r3, 8003bae <_fflush_r+0x42>
 8003b8e:	4621      	mov	r1, r4
 8003b90:	4628      	mov	r0, r5
 8003b92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b96:	f7ff bf63 	b.w	8003a60 <__sflush_r>
 8003b9a:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <_fflush_r+0x4c>)
 8003b9c:	429c      	cmp	r4, r3
 8003b9e:	d101      	bne.n	8003ba4 <_fflush_r+0x38>
 8003ba0:	68ac      	ldr	r4, [r5, #8]
 8003ba2:	e7f1      	b.n	8003b88 <_fflush_r+0x1c>
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <_fflush_r+0x50>)
 8003ba6:	429c      	cmp	r4, r3
 8003ba8:	bf08      	it	eq
 8003baa:	68ec      	ldreq	r4, [r5, #12]
 8003bac:	e7ec      	b.n	8003b88 <_fflush_r+0x1c>
 8003bae:	2000      	movs	r0, #0
 8003bb0:	bd38      	pop	{r3, r4, r5, pc}
 8003bb2:	bf00      	nop
 8003bb4:	08004184 	.word	0x08004184
 8003bb8:	080041a4 	.word	0x080041a4
 8003bbc:	08004164 	.word	0x08004164

08003bc0 <std>:
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	b510      	push	{r4, lr}
 8003bc4:	4604      	mov	r4, r0
 8003bc6:	e9c0 3300 	strd	r3, r3, [r0]
 8003bca:	6083      	str	r3, [r0, #8]
 8003bcc:	8181      	strh	r1, [r0, #12]
 8003bce:	6643      	str	r3, [r0, #100]	; 0x64
 8003bd0:	81c2      	strh	r2, [r0, #14]
 8003bd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bd6:	6183      	str	r3, [r0, #24]
 8003bd8:	4619      	mov	r1, r3
 8003bda:	2208      	movs	r2, #8
 8003bdc:	305c      	adds	r0, #92	; 0x5c
 8003bde:	f7ff fe13 	bl	8003808 <memset>
 8003be2:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <std+0x38>)
 8003be4:	6263      	str	r3, [r4, #36]	; 0x24
 8003be6:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <std+0x3c>)
 8003be8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <std+0x40>)
 8003bec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003bee:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <std+0x44>)
 8003bf0:	6224      	str	r4, [r4, #32]
 8003bf2:	6323      	str	r3, [r4, #48]	; 0x30
 8003bf4:	bd10      	pop	{r4, pc}
 8003bf6:	bf00      	nop
 8003bf8:	08003f8d 	.word	0x08003f8d
 8003bfc:	08003faf 	.word	0x08003faf
 8003c00:	08003fe7 	.word	0x08003fe7
 8003c04:	0800400b 	.word	0x0800400b

08003c08 <_cleanup_r>:
 8003c08:	4901      	ldr	r1, [pc, #4]	; (8003c10 <_cleanup_r+0x8>)
 8003c0a:	f000 b885 	b.w	8003d18 <_fwalk_reent>
 8003c0e:	bf00      	nop
 8003c10:	08003b6d 	.word	0x08003b6d

08003c14 <__sfmoreglue>:
 8003c14:	b570      	push	{r4, r5, r6, lr}
 8003c16:	1e4a      	subs	r2, r1, #1
 8003c18:	2568      	movs	r5, #104	; 0x68
 8003c1a:	4355      	muls	r5, r2
 8003c1c:	460e      	mov	r6, r1
 8003c1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003c22:	f000 f949 	bl	8003eb8 <_malloc_r>
 8003c26:	4604      	mov	r4, r0
 8003c28:	b140      	cbz	r0, 8003c3c <__sfmoreglue+0x28>
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	e9c0 1600 	strd	r1, r6, [r0]
 8003c30:	300c      	adds	r0, #12
 8003c32:	60a0      	str	r0, [r4, #8]
 8003c34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003c38:	f7ff fde6 	bl	8003808 <memset>
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	bd70      	pop	{r4, r5, r6, pc}

08003c40 <__sinit>:
 8003c40:	6983      	ldr	r3, [r0, #24]
 8003c42:	b510      	push	{r4, lr}
 8003c44:	4604      	mov	r4, r0
 8003c46:	bb33      	cbnz	r3, 8003c96 <__sinit+0x56>
 8003c48:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003c4c:	6503      	str	r3, [r0, #80]	; 0x50
 8003c4e:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <__sinit+0x58>)
 8003c50:	4a12      	ldr	r2, [pc, #72]	; (8003c9c <__sinit+0x5c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6282      	str	r2, [r0, #40]	; 0x28
 8003c56:	4298      	cmp	r0, r3
 8003c58:	bf04      	itt	eq
 8003c5a:	2301      	moveq	r3, #1
 8003c5c:	6183      	streq	r3, [r0, #24]
 8003c5e:	f000 f81f 	bl	8003ca0 <__sfp>
 8003c62:	6060      	str	r0, [r4, #4]
 8003c64:	4620      	mov	r0, r4
 8003c66:	f000 f81b 	bl	8003ca0 <__sfp>
 8003c6a:	60a0      	str	r0, [r4, #8]
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f000 f817 	bl	8003ca0 <__sfp>
 8003c72:	2200      	movs	r2, #0
 8003c74:	60e0      	str	r0, [r4, #12]
 8003c76:	2104      	movs	r1, #4
 8003c78:	6860      	ldr	r0, [r4, #4]
 8003c7a:	f7ff ffa1 	bl	8003bc0 <std>
 8003c7e:	2201      	movs	r2, #1
 8003c80:	2109      	movs	r1, #9
 8003c82:	68a0      	ldr	r0, [r4, #8]
 8003c84:	f7ff ff9c 	bl	8003bc0 <std>
 8003c88:	2202      	movs	r2, #2
 8003c8a:	2112      	movs	r1, #18
 8003c8c:	68e0      	ldr	r0, [r4, #12]
 8003c8e:	f7ff ff97 	bl	8003bc0 <std>
 8003c92:	2301      	movs	r3, #1
 8003c94:	61a3      	str	r3, [r4, #24]
 8003c96:	bd10      	pop	{r4, pc}
 8003c98:	08004160 	.word	0x08004160
 8003c9c:	08003c09 	.word	0x08003c09

08003ca0 <__sfp>:
 8003ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca2:	4b1b      	ldr	r3, [pc, #108]	; (8003d10 <__sfp+0x70>)
 8003ca4:	681e      	ldr	r6, [r3, #0]
 8003ca6:	69b3      	ldr	r3, [r6, #24]
 8003ca8:	4607      	mov	r7, r0
 8003caa:	b913      	cbnz	r3, 8003cb2 <__sfp+0x12>
 8003cac:	4630      	mov	r0, r6
 8003cae:	f7ff ffc7 	bl	8003c40 <__sinit>
 8003cb2:	3648      	adds	r6, #72	; 0x48
 8003cb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	d503      	bpl.n	8003cc4 <__sfp+0x24>
 8003cbc:	6833      	ldr	r3, [r6, #0]
 8003cbe:	b133      	cbz	r3, 8003cce <__sfp+0x2e>
 8003cc0:	6836      	ldr	r6, [r6, #0]
 8003cc2:	e7f7      	b.n	8003cb4 <__sfp+0x14>
 8003cc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003cc8:	b16d      	cbz	r5, 8003ce6 <__sfp+0x46>
 8003cca:	3468      	adds	r4, #104	; 0x68
 8003ccc:	e7f4      	b.n	8003cb8 <__sfp+0x18>
 8003cce:	2104      	movs	r1, #4
 8003cd0:	4638      	mov	r0, r7
 8003cd2:	f7ff ff9f 	bl	8003c14 <__sfmoreglue>
 8003cd6:	6030      	str	r0, [r6, #0]
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	d1f1      	bne.n	8003cc0 <__sfp+0x20>
 8003cdc:	230c      	movs	r3, #12
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	4604      	mov	r4, r0
 8003ce2:	4620      	mov	r0, r4
 8003ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <__sfp+0x74>)
 8003ce8:	6665      	str	r5, [r4, #100]	; 0x64
 8003cea:	e9c4 5500 	strd	r5, r5, [r4]
 8003cee:	60a5      	str	r5, [r4, #8]
 8003cf0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003cf4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003cf8:	2208      	movs	r2, #8
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003d00:	f7ff fd82 	bl	8003808 <memset>
 8003d04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003d08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003d0c:	e7e9      	b.n	8003ce2 <__sfp+0x42>
 8003d0e:	bf00      	nop
 8003d10:	08004160 	.word	0x08004160
 8003d14:	ffff0001 	.word	0xffff0001

08003d18 <_fwalk_reent>:
 8003d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d1c:	4680      	mov	r8, r0
 8003d1e:	4689      	mov	r9, r1
 8003d20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003d24:	2600      	movs	r6, #0
 8003d26:	b914      	cbnz	r4, 8003d2e <_fwalk_reent+0x16>
 8003d28:	4630      	mov	r0, r6
 8003d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d2e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003d32:	3f01      	subs	r7, #1
 8003d34:	d501      	bpl.n	8003d3a <_fwalk_reent+0x22>
 8003d36:	6824      	ldr	r4, [r4, #0]
 8003d38:	e7f5      	b.n	8003d26 <_fwalk_reent+0xe>
 8003d3a:	89ab      	ldrh	r3, [r5, #12]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d907      	bls.n	8003d50 <_fwalk_reent+0x38>
 8003d40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d44:	3301      	adds	r3, #1
 8003d46:	d003      	beq.n	8003d50 <_fwalk_reent+0x38>
 8003d48:	4629      	mov	r1, r5
 8003d4a:	4640      	mov	r0, r8
 8003d4c:	47c8      	blx	r9
 8003d4e:	4306      	orrs	r6, r0
 8003d50:	3568      	adds	r5, #104	; 0x68
 8003d52:	e7ee      	b.n	8003d32 <_fwalk_reent+0x1a>

08003d54 <__swhatbuf_r>:
 8003d54:	b570      	push	{r4, r5, r6, lr}
 8003d56:	460e      	mov	r6, r1
 8003d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d5c:	2900      	cmp	r1, #0
 8003d5e:	b096      	sub	sp, #88	; 0x58
 8003d60:	4614      	mov	r4, r2
 8003d62:	461d      	mov	r5, r3
 8003d64:	da07      	bge.n	8003d76 <__swhatbuf_r+0x22>
 8003d66:	2300      	movs	r3, #0
 8003d68:	602b      	str	r3, [r5, #0]
 8003d6a:	89b3      	ldrh	r3, [r6, #12]
 8003d6c:	061a      	lsls	r2, r3, #24
 8003d6e:	d410      	bmi.n	8003d92 <__swhatbuf_r+0x3e>
 8003d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d74:	e00e      	b.n	8003d94 <__swhatbuf_r+0x40>
 8003d76:	466a      	mov	r2, sp
 8003d78:	f000 f96e 	bl	8004058 <_fstat_r>
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	dbf2      	blt.n	8003d66 <__swhatbuf_r+0x12>
 8003d80:	9a01      	ldr	r2, [sp, #4]
 8003d82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d8a:	425a      	negs	r2, r3
 8003d8c:	415a      	adcs	r2, r3
 8003d8e:	602a      	str	r2, [r5, #0]
 8003d90:	e7ee      	b.n	8003d70 <__swhatbuf_r+0x1c>
 8003d92:	2340      	movs	r3, #64	; 0x40
 8003d94:	2000      	movs	r0, #0
 8003d96:	6023      	str	r3, [r4, #0]
 8003d98:	b016      	add	sp, #88	; 0x58
 8003d9a:	bd70      	pop	{r4, r5, r6, pc}

08003d9c <__smakebuf_r>:
 8003d9c:	898b      	ldrh	r3, [r1, #12]
 8003d9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003da0:	079d      	lsls	r5, r3, #30
 8003da2:	4606      	mov	r6, r0
 8003da4:	460c      	mov	r4, r1
 8003da6:	d507      	bpl.n	8003db8 <__smakebuf_r+0x1c>
 8003da8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003dac:	6023      	str	r3, [r4, #0]
 8003dae:	6123      	str	r3, [r4, #16]
 8003db0:	2301      	movs	r3, #1
 8003db2:	6163      	str	r3, [r4, #20]
 8003db4:	b002      	add	sp, #8
 8003db6:	bd70      	pop	{r4, r5, r6, pc}
 8003db8:	ab01      	add	r3, sp, #4
 8003dba:	466a      	mov	r2, sp
 8003dbc:	f7ff ffca 	bl	8003d54 <__swhatbuf_r>
 8003dc0:	9900      	ldr	r1, [sp, #0]
 8003dc2:	4605      	mov	r5, r0
 8003dc4:	4630      	mov	r0, r6
 8003dc6:	f000 f877 	bl	8003eb8 <_malloc_r>
 8003dca:	b948      	cbnz	r0, 8003de0 <__smakebuf_r+0x44>
 8003dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dd0:	059a      	lsls	r2, r3, #22
 8003dd2:	d4ef      	bmi.n	8003db4 <__smakebuf_r+0x18>
 8003dd4:	f023 0303 	bic.w	r3, r3, #3
 8003dd8:	f043 0302 	orr.w	r3, r3, #2
 8003ddc:	81a3      	strh	r3, [r4, #12]
 8003dde:	e7e3      	b.n	8003da8 <__smakebuf_r+0xc>
 8003de0:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <__smakebuf_r+0x7c>)
 8003de2:	62b3      	str	r3, [r6, #40]	; 0x28
 8003de4:	89a3      	ldrh	r3, [r4, #12]
 8003de6:	6020      	str	r0, [r4, #0]
 8003de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dec:	81a3      	strh	r3, [r4, #12]
 8003dee:	9b00      	ldr	r3, [sp, #0]
 8003df0:	6163      	str	r3, [r4, #20]
 8003df2:	9b01      	ldr	r3, [sp, #4]
 8003df4:	6120      	str	r0, [r4, #16]
 8003df6:	b15b      	cbz	r3, 8003e10 <__smakebuf_r+0x74>
 8003df8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dfc:	4630      	mov	r0, r6
 8003dfe:	f000 f93d 	bl	800407c <_isatty_r>
 8003e02:	b128      	cbz	r0, 8003e10 <__smakebuf_r+0x74>
 8003e04:	89a3      	ldrh	r3, [r4, #12]
 8003e06:	f023 0303 	bic.w	r3, r3, #3
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	81a3      	strh	r3, [r4, #12]
 8003e10:	89a3      	ldrh	r3, [r4, #12]
 8003e12:	431d      	orrs	r5, r3
 8003e14:	81a5      	strh	r5, [r4, #12]
 8003e16:	e7cd      	b.n	8003db4 <__smakebuf_r+0x18>
 8003e18:	08003c09 	.word	0x08003c09

08003e1c <_free_r>:
 8003e1c:	b538      	push	{r3, r4, r5, lr}
 8003e1e:	4605      	mov	r5, r0
 8003e20:	2900      	cmp	r1, #0
 8003e22:	d045      	beq.n	8003eb0 <_free_r+0x94>
 8003e24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e28:	1f0c      	subs	r4, r1, #4
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	bfb8      	it	lt
 8003e2e:	18e4      	addlt	r4, r4, r3
 8003e30:	f000 f946 	bl	80040c0 <__malloc_lock>
 8003e34:	4a1f      	ldr	r2, [pc, #124]	; (8003eb4 <_free_r+0x98>)
 8003e36:	6813      	ldr	r3, [r2, #0]
 8003e38:	4610      	mov	r0, r2
 8003e3a:	b933      	cbnz	r3, 8003e4a <_free_r+0x2e>
 8003e3c:	6063      	str	r3, [r4, #4]
 8003e3e:	6014      	str	r4, [r2, #0]
 8003e40:	4628      	mov	r0, r5
 8003e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e46:	f000 b93c 	b.w	80040c2 <__malloc_unlock>
 8003e4a:	42a3      	cmp	r3, r4
 8003e4c:	d90c      	bls.n	8003e68 <_free_r+0x4c>
 8003e4e:	6821      	ldr	r1, [r4, #0]
 8003e50:	1862      	adds	r2, r4, r1
 8003e52:	4293      	cmp	r3, r2
 8003e54:	bf04      	itt	eq
 8003e56:	681a      	ldreq	r2, [r3, #0]
 8003e58:	685b      	ldreq	r3, [r3, #4]
 8003e5a:	6063      	str	r3, [r4, #4]
 8003e5c:	bf04      	itt	eq
 8003e5e:	1852      	addeq	r2, r2, r1
 8003e60:	6022      	streq	r2, [r4, #0]
 8003e62:	6004      	str	r4, [r0, #0]
 8003e64:	e7ec      	b.n	8003e40 <_free_r+0x24>
 8003e66:	4613      	mov	r3, r2
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	b10a      	cbz	r2, 8003e70 <_free_r+0x54>
 8003e6c:	42a2      	cmp	r2, r4
 8003e6e:	d9fa      	bls.n	8003e66 <_free_r+0x4a>
 8003e70:	6819      	ldr	r1, [r3, #0]
 8003e72:	1858      	adds	r0, r3, r1
 8003e74:	42a0      	cmp	r0, r4
 8003e76:	d10b      	bne.n	8003e90 <_free_r+0x74>
 8003e78:	6820      	ldr	r0, [r4, #0]
 8003e7a:	4401      	add	r1, r0
 8003e7c:	1858      	adds	r0, r3, r1
 8003e7e:	4282      	cmp	r2, r0
 8003e80:	6019      	str	r1, [r3, #0]
 8003e82:	d1dd      	bne.n	8003e40 <_free_r+0x24>
 8003e84:	6810      	ldr	r0, [r2, #0]
 8003e86:	6852      	ldr	r2, [r2, #4]
 8003e88:	605a      	str	r2, [r3, #4]
 8003e8a:	4401      	add	r1, r0
 8003e8c:	6019      	str	r1, [r3, #0]
 8003e8e:	e7d7      	b.n	8003e40 <_free_r+0x24>
 8003e90:	d902      	bls.n	8003e98 <_free_r+0x7c>
 8003e92:	230c      	movs	r3, #12
 8003e94:	602b      	str	r3, [r5, #0]
 8003e96:	e7d3      	b.n	8003e40 <_free_r+0x24>
 8003e98:	6820      	ldr	r0, [r4, #0]
 8003e9a:	1821      	adds	r1, r4, r0
 8003e9c:	428a      	cmp	r2, r1
 8003e9e:	bf04      	itt	eq
 8003ea0:	6811      	ldreq	r1, [r2, #0]
 8003ea2:	6852      	ldreq	r2, [r2, #4]
 8003ea4:	6062      	str	r2, [r4, #4]
 8003ea6:	bf04      	itt	eq
 8003ea8:	1809      	addeq	r1, r1, r0
 8003eaa:	6021      	streq	r1, [r4, #0]
 8003eac:	605c      	str	r4, [r3, #4]
 8003eae:	e7c7      	b.n	8003e40 <_free_r+0x24>
 8003eb0:	bd38      	pop	{r3, r4, r5, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20000090 	.word	0x20000090

08003eb8 <_malloc_r>:
 8003eb8:	b570      	push	{r4, r5, r6, lr}
 8003eba:	1ccd      	adds	r5, r1, #3
 8003ebc:	f025 0503 	bic.w	r5, r5, #3
 8003ec0:	3508      	adds	r5, #8
 8003ec2:	2d0c      	cmp	r5, #12
 8003ec4:	bf38      	it	cc
 8003ec6:	250c      	movcc	r5, #12
 8003ec8:	2d00      	cmp	r5, #0
 8003eca:	4606      	mov	r6, r0
 8003ecc:	db01      	blt.n	8003ed2 <_malloc_r+0x1a>
 8003ece:	42a9      	cmp	r1, r5
 8003ed0:	d903      	bls.n	8003eda <_malloc_r+0x22>
 8003ed2:	230c      	movs	r3, #12
 8003ed4:	6033      	str	r3, [r6, #0]
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	bd70      	pop	{r4, r5, r6, pc}
 8003eda:	f000 f8f1 	bl	80040c0 <__malloc_lock>
 8003ede:	4a21      	ldr	r2, [pc, #132]	; (8003f64 <_malloc_r+0xac>)
 8003ee0:	6814      	ldr	r4, [r2, #0]
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	b991      	cbnz	r1, 8003f0c <_malloc_r+0x54>
 8003ee6:	4c20      	ldr	r4, [pc, #128]	; (8003f68 <_malloc_r+0xb0>)
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	b91b      	cbnz	r3, 8003ef4 <_malloc_r+0x3c>
 8003eec:	4630      	mov	r0, r6
 8003eee:	f000 f83d 	bl	8003f6c <_sbrk_r>
 8003ef2:	6020      	str	r0, [r4, #0]
 8003ef4:	4629      	mov	r1, r5
 8003ef6:	4630      	mov	r0, r6
 8003ef8:	f000 f838 	bl	8003f6c <_sbrk_r>
 8003efc:	1c43      	adds	r3, r0, #1
 8003efe:	d124      	bne.n	8003f4a <_malloc_r+0x92>
 8003f00:	230c      	movs	r3, #12
 8003f02:	6033      	str	r3, [r6, #0]
 8003f04:	4630      	mov	r0, r6
 8003f06:	f000 f8dc 	bl	80040c2 <__malloc_unlock>
 8003f0a:	e7e4      	b.n	8003ed6 <_malloc_r+0x1e>
 8003f0c:	680b      	ldr	r3, [r1, #0]
 8003f0e:	1b5b      	subs	r3, r3, r5
 8003f10:	d418      	bmi.n	8003f44 <_malloc_r+0x8c>
 8003f12:	2b0b      	cmp	r3, #11
 8003f14:	d90f      	bls.n	8003f36 <_malloc_r+0x7e>
 8003f16:	600b      	str	r3, [r1, #0]
 8003f18:	50cd      	str	r5, [r1, r3]
 8003f1a:	18cc      	adds	r4, r1, r3
 8003f1c:	4630      	mov	r0, r6
 8003f1e:	f000 f8d0 	bl	80040c2 <__malloc_unlock>
 8003f22:	f104 000b 	add.w	r0, r4, #11
 8003f26:	1d23      	adds	r3, r4, #4
 8003f28:	f020 0007 	bic.w	r0, r0, #7
 8003f2c:	1ac3      	subs	r3, r0, r3
 8003f2e:	d0d3      	beq.n	8003ed8 <_malloc_r+0x20>
 8003f30:	425a      	negs	r2, r3
 8003f32:	50e2      	str	r2, [r4, r3]
 8003f34:	e7d0      	b.n	8003ed8 <_malloc_r+0x20>
 8003f36:	428c      	cmp	r4, r1
 8003f38:	684b      	ldr	r3, [r1, #4]
 8003f3a:	bf16      	itet	ne
 8003f3c:	6063      	strne	r3, [r4, #4]
 8003f3e:	6013      	streq	r3, [r2, #0]
 8003f40:	460c      	movne	r4, r1
 8003f42:	e7eb      	b.n	8003f1c <_malloc_r+0x64>
 8003f44:	460c      	mov	r4, r1
 8003f46:	6849      	ldr	r1, [r1, #4]
 8003f48:	e7cc      	b.n	8003ee4 <_malloc_r+0x2c>
 8003f4a:	1cc4      	adds	r4, r0, #3
 8003f4c:	f024 0403 	bic.w	r4, r4, #3
 8003f50:	42a0      	cmp	r0, r4
 8003f52:	d005      	beq.n	8003f60 <_malloc_r+0xa8>
 8003f54:	1a21      	subs	r1, r4, r0
 8003f56:	4630      	mov	r0, r6
 8003f58:	f000 f808 	bl	8003f6c <_sbrk_r>
 8003f5c:	3001      	adds	r0, #1
 8003f5e:	d0cf      	beq.n	8003f00 <_malloc_r+0x48>
 8003f60:	6025      	str	r5, [r4, #0]
 8003f62:	e7db      	b.n	8003f1c <_malloc_r+0x64>
 8003f64:	20000090 	.word	0x20000090
 8003f68:	20000094 	.word	0x20000094

08003f6c <_sbrk_r>:
 8003f6c:	b538      	push	{r3, r4, r5, lr}
 8003f6e:	4c06      	ldr	r4, [pc, #24]	; (8003f88 <_sbrk_r+0x1c>)
 8003f70:	2300      	movs	r3, #0
 8003f72:	4605      	mov	r5, r0
 8003f74:	4608      	mov	r0, r1
 8003f76:	6023      	str	r3, [r4, #0]
 8003f78:	f7fc fcd2 	bl	8000920 <_sbrk>
 8003f7c:	1c43      	adds	r3, r0, #1
 8003f7e:	d102      	bne.n	8003f86 <_sbrk_r+0x1a>
 8003f80:	6823      	ldr	r3, [r4, #0]
 8003f82:	b103      	cbz	r3, 8003f86 <_sbrk_r+0x1a>
 8003f84:	602b      	str	r3, [r5, #0]
 8003f86:	bd38      	pop	{r3, r4, r5, pc}
 8003f88:	200001c0 	.word	0x200001c0

08003f8c <__sread>:
 8003f8c:	b510      	push	{r4, lr}
 8003f8e:	460c      	mov	r4, r1
 8003f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f94:	f000 f896 	bl	80040c4 <_read_r>
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	bfab      	itete	ge
 8003f9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f9e:	89a3      	ldrhlt	r3, [r4, #12]
 8003fa0:	181b      	addge	r3, r3, r0
 8003fa2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003fa6:	bfac      	ite	ge
 8003fa8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003faa:	81a3      	strhlt	r3, [r4, #12]
 8003fac:	bd10      	pop	{r4, pc}

08003fae <__swrite>:
 8003fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fb2:	461f      	mov	r7, r3
 8003fb4:	898b      	ldrh	r3, [r1, #12]
 8003fb6:	05db      	lsls	r3, r3, #23
 8003fb8:	4605      	mov	r5, r0
 8003fba:	460c      	mov	r4, r1
 8003fbc:	4616      	mov	r6, r2
 8003fbe:	d505      	bpl.n	8003fcc <__swrite+0x1e>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fc8:	f000 f868 	bl	800409c <_lseek_r>
 8003fcc:	89a3      	ldrh	r3, [r4, #12]
 8003fce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fd6:	81a3      	strh	r3, [r4, #12]
 8003fd8:	4632      	mov	r2, r6
 8003fda:	463b      	mov	r3, r7
 8003fdc:	4628      	mov	r0, r5
 8003fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe2:	f000 b817 	b.w	8004014 <_write_r>

08003fe6 <__sseek>:
 8003fe6:	b510      	push	{r4, lr}
 8003fe8:	460c      	mov	r4, r1
 8003fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fee:	f000 f855 	bl	800409c <_lseek_r>
 8003ff2:	1c43      	adds	r3, r0, #1
 8003ff4:	89a3      	ldrh	r3, [r4, #12]
 8003ff6:	bf15      	itete	ne
 8003ff8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ffa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ffe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004002:	81a3      	strheq	r3, [r4, #12]
 8004004:	bf18      	it	ne
 8004006:	81a3      	strhne	r3, [r4, #12]
 8004008:	bd10      	pop	{r4, pc}

0800400a <__sclose>:
 800400a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800400e:	f000 b813 	b.w	8004038 <_close_r>
	...

08004014 <_write_r>:
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	4c07      	ldr	r4, [pc, #28]	; (8004034 <_write_r+0x20>)
 8004018:	4605      	mov	r5, r0
 800401a:	4608      	mov	r0, r1
 800401c:	4611      	mov	r1, r2
 800401e:	2200      	movs	r2, #0
 8004020:	6022      	str	r2, [r4, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	f7fc fc2b 	bl	800087e <_write>
 8004028:	1c43      	adds	r3, r0, #1
 800402a:	d102      	bne.n	8004032 <_write_r+0x1e>
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	b103      	cbz	r3, 8004032 <_write_r+0x1e>
 8004030:	602b      	str	r3, [r5, #0]
 8004032:	bd38      	pop	{r3, r4, r5, pc}
 8004034:	200001c0 	.word	0x200001c0

08004038 <_close_r>:
 8004038:	b538      	push	{r3, r4, r5, lr}
 800403a:	4c06      	ldr	r4, [pc, #24]	; (8004054 <_close_r+0x1c>)
 800403c:	2300      	movs	r3, #0
 800403e:	4605      	mov	r5, r0
 8004040:	4608      	mov	r0, r1
 8004042:	6023      	str	r3, [r4, #0]
 8004044:	f7fc fc37 	bl	80008b6 <_close>
 8004048:	1c43      	adds	r3, r0, #1
 800404a:	d102      	bne.n	8004052 <_close_r+0x1a>
 800404c:	6823      	ldr	r3, [r4, #0]
 800404e:	b103      	cbz	r3, 8004052 <_close_r+0x1a>
 8004050:	602b      	str	r3, [r5, #0]
 8004052:	bd38      	pop	{r3, r4, r5, pc}
 8004054:	200001c0 	.word	0x200001c0

08004058 <_fstat_r>:
 8004058:	b538      	push	{r3, r4, r5, lr}
 800405a:	4c07      	ldr	r4, [pc, #28]	; (8004078 <_fstat_r+0x20>)
 800405c:	2300      	movs	r3, #0
 800405e:	4605      	mov	r5, r0
 8004060:	4608      	mov	r0, r1
 8004062:	4611      	mov	r1, r2
 8004064:	6023      	str	r3, [r4, #0]
 8004066:	f7fc fc32 	bl	80008ce <_fstat>
 800406a:	1c43      	adds	r3, r0, #1
 800406c:	d102      	bne.n	8004074 <_fstat_r+0x1c>
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	b103      	cbz	r3, 8004074 <_fstat_r+0x1c>
 8004072:	602b      	str	r3, [r5, #0]
 8004074:	bd38      	pop	{r3, r4, r5, pc}
 8004076:	bf00      	nop
 8004078:	200001c0 	.word	0x200001c0

0800407c <_isatty_r>:
 800407c:	b538      	push	{r3, r4, r5, lr}
 800407e:	4c06      	ldr	r4, [pc, #24]	; (8004098 <_isatty_r+0x1c>)
 8004080:	2300      	movs	r3, #0
 8004082:	4605      	mov	r5, r0
 8004084:	4608      	mov	r0, r1
 8004086:	6023      	str	r3, [r4, #0]
 8004088:	f7fc fc31 	bl	80008ee <_isatty>
 800408c:	1c43      	adds	r3, r0, #1
 800408e:	d102      	bne.n	8004096 <_isatty_r+0x1a>
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	b103      	cbz	r3, 8004096 <_isatty_r+0x1a>
 8004094:	602b      	str	r3, [r5, #0]
 8004096:	bd38      	pop	{r3, r4, r5, pc}
 8004098:	200001c0 	.word	0x200001c0

0800409c <_lseek_r>:
 800409c:	b538      	push	{r3, r4, r5, lr}
 800409e:	4c07      	ldr	r4, [pc, #28]	; (80040bc <_lseek_r+0x20>)
 80040a0:	4605      	mov	r5, r0
 80040a2:	4608      	mov	r0, r1
 80040a4:	4611      	mov	r1, r2
 80040a6:	2200      	movs	r2, #0
 80040a8:	6022      	str	r2, [r4, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	f7fc fc2a 	bl	8000904 <_lseek>
 80040b0:	1c43      	adds	r3, r0, #1
 80040b2:	d102      	bne.n	80040ba <_lseek_r+0x1e>
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	b103      	cbz	r3, 80040ba <_lseek_r+0x1e>
 80040b8:	602b      	str	r3, [r5, #0]
 80040ba:	bd38      	pop	{r3, r4, r5, pc}
 80040bc:	200001c0 	.word	0x200001c0

080040c0 <__malloc_lock>:
 80040c0:	4770      	bx	lr

080040c2 <__malloc_unlock>:
 80040c2:	4770      	bx	lr

080040c4 <_read_r>:
 80040c4:	b538      	push	{r3, r4, r5, lr}
 80040c6:	4c07      	ldr	r4, [pc, #28]	; (80040e4 <_read_r+0x20>)
 80040c8:	4605      	mov	r5, r0
 80040ca:	4608      	mov	r0, r1
 80040cc:	4611      	mov	r1, r2
 80040ce:	2200      	movs	r2, #0
 80040d0:	6022      	str	r2, [r4, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	f7fc fbb6 	bl	8000844 <_read>
 80040d8:	1c43      	adds	r3, r0, #1
 80040da:	d102      	bne.n	80040e2 <_read_r+0x1e>
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	b103      	cbz	r3, 80040e2 <_read_r+0x1e>
 80040e0:	602b      	str	r3, [r5, #0]
 80040e2:	bd38      	pop	{r3, r4, r5, pc}
 80040e4:	200001c0 	.word	0x200001c0

080040e8 <_init>:
 80040e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ea:	bf00      	nop
 80040ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ee:	bc08      	pop	{r3}
 80040f0:	469e      	mov	lr, r3
 80040f2:	4770      	bx	lr

080040f4 <_fini>:
 80040f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f6:	bf00      	nop
 80040f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040fa:	bc08      	pop	{r3}
 80040fc:	469e      	mov	lr, r3
 80040fe:	4770      	bx	lr
