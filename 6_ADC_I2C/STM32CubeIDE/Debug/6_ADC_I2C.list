
6_ADC_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000549c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800562c  0800562c  0001562c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800573c  0800573c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800573c  0800573c  0001573c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005744  08005744  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005744  08005744  00015744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005748  08005748  00015748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800574c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000070  080057bc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  080057bc  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012205  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000260b  00000000  00000000  000322a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da0  00000000  00000000  000348b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c58  00000000  00000000  00035650  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b716  00000000  00000000  000362a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c8c3  00000000  00000000  000519be  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a31c7  00000000  00000000  0005e281  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00101448  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e10  00000000  00000000  001014c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005614 	.word	0x08005614

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005614 	.word	0x08005614

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000596:	4b29      	ldr	r3, [pc, #164]	; (800063c <MX_GPIO_Init+0xbc>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	4a28      	ldr	r2, [pc, #160]	; (800063c <MX_GPIO_Init+0xbc>)
 800059c:	f043 0302 	orr.w	r3, r3, #2
 80005a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a2:	4b26      	ldr	r3, [pc, #152]	; (800063c <MX_GPIO_Init+0xbc>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	f003 0302 	and.w	r3, r3, #2
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	4b23      	ldr	r3, [pc, #140]	; (800063c <MX_GPIO_Init+0xbc>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	4a22      	ldr	r2, [pc, #136]	; (800063c <MX_GPIO_Init+0xbc>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ba:	4b20      	ldr	r3, [pc, #128]	; (800063c <MX_GPIO_Init+0xbc>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	4b1d      	ldr	r3, [pc, #116]	; (800063c <MX_GPIO_Init+0xbc>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	4a1c      	ldr	r2, [pc, #112]	; (800063c <MX_GPIO_Init+0xbc>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d2:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_GPIO_Init+0xbc>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e4:	4816      	ldr	r0, [pc, #88]	; (8000640 <MX_GPIO_Init+0xc0>)
 80005e6:	f000 feab 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f0:	2301      	movs	r3, #1
 80005f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	4619      	mov	r1, r3
 8000602:	480f      	ldr	r0, [pc, #60]	; (8000640 <MX_GPIO_Init+0xc0>)
 8000604:	f000 fd2a 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800060c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <MX_GPIO_Init+0xc4>)
 8000610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	4619      	mov	r1, r3
 800061c:	480a      	ldr	r0, [pc, #40]	; (8000648 <MX_GPIO_Init+0xc8>)
 800061e:	f000 fd1d 	bl	800105c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	2100      	movs	r1, #0
 8000626:	2017      	movs	r0, #23
 8000628:	f000 fc93 	bl	8000f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800062c:	2017      	movs	r0, #23
 800062e:	f000 fcac 	bl	8000f8a <HAL_NVIC_EnableIRQ>

}
 8000632:	bf00      	nop
 8000634:	3720      	adds	r7, #32
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40021000 	.word	0x40021000
 8000640:	48000400 	.word	0x48000400
 8000644:	10110000 	.word	0x10110000
 8000648:	48000800 	.word	0x48000800

0800064c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000650:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <MX_I2C1_Init+0x74>)
 8000652:	4a1c      	ldr	r2, [pc, #112]	; (80006c4 <MX_I2C1_Init+0x78>)
 8000654:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000004;
 8000656:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <MX_I2C1_Init+0x74>)
 8000658:	2204      	movs	r2, #4
 800065a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <MX_I2C1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <MX_I2C1_Init+0x74>)
 8000664:	2201      	movs	r2, #1
 8000666:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000668:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_I2C1_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_I2C1_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_I2C1_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_I2C1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000686:	480e      	ldr	r0, [pc, #56]	; (80006c0 <MX_I2C1_Init+0x74>)
 8000688:	f000 fe95 	bl	80013b6 <HAL_I2C_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000692:	f000 f922 	bl	80008da <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000696:	2100      	movs	r1, #0
 8000698:	4809      	ldr	r0, [pc, #36]	; (80006c0 <MX_I2C1_Init+0x74>)
 800069a:	f002 f859 	bl	8002750 <HAL_I2CEx_ConfigAnalogFilter>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006a4:	f000 f919 	bl	80008da <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006a8:	2100      	movs	r1, #0
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_I2C1_Init+0x74>)
 80006ac:	f002 f89b 	bl	80027e6 <HAL_I2CEx_ConfigDigitalFilter>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006b6:	f000 f910 	bl	80008da <Error_Handler>
  }

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000098 	.word	0x20000098
 80006c4:	40005400 	.word	0x40005400

080006c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a1f      	ldr	r2, [pc, #124]	; (8000764 <HAL_I2C_MspInit+0x9c>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d138      	bne.n	800075c <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <HAL_I2C_MspInit+0xa0>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	4a1e      	ldr	r2, [pc, #120]	; (8000768 <HAL_I2C_MspInit+0xa0>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <HAL_I2C_MspInit+0xa0>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000702:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000708:	2312      	movs	r3, #18
 800070a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800070c:	2301      	movs	r3, #1
 800070e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000710:	2303      	movs	r3, #3
 8000712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000714:	2304      	movs	r3, #4
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	4813      	ldr	r0, [pc, #76]	; (800076c <HAL_I2C_MspInit+0xa4>)
 8000720:	f000 fc9c 	bl	800105c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <HAL_I2C_MspInit+0xa0>)
 8000726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000728:	4a0f      	ldr	r2, [pc, #60]	; (8000768 <HAL_I2C_MspInit+0xa0>)
 800072a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800072e:	6593      	str	r3, [r2, #88]	; 0x58
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <HAL_I2C_MspInit+0xa0>)
 8000732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	2100      	movs	r1, #0
 8000740:	201f      	movs	r0, #31
 8000742:	f000 fc06 	bl	8000f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000746:	201f      	movs	r0, #31
 8000748:	f000 fc1f 	bl	8000f8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800074c:	2200      	movs	r2, #0
 800074e:	2100      	movs	r1, #0
 8000750:	2020      	movs	r0, #32
 8000752:	f000 fbfe 	bl	8000f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000756:	2020      	movs	r0, #32
 8000758:	f000 fc17 	bl	8000f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800075c:	bf00      	nop
 800075e:	3728      	adds	r7, #40	; 0x28
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40005400 	.word	0x40005400
 8000768:	40021000 	.word	0x40021000
 800076c:	48000400 	.word	0x48000400

08000770 <_write>:
}



int _write(int file, char *ptr, int len)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	e00a      	b.n	8000798 <_write+0x28>
    {
        HAL_UART_Transmit(&huart1,(uint8_t*)ptr++,1,100);
 8000782:	68b9      	ldr	r1, [r7, #8]
 8000784:	1c4b      	adds	r3, r1, #1
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	2364      	movs	r3, #100	; 0x64
 800078a:	2201      	movs	r2, #1
 800078c:	4807      	ldr	r0, [pc, #28]	; (80007ac <_write+0x3c>)
 800078e:	f003 f919 	bl	80039c4 <HAL_UART_Transmit>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	3301      	adds	r3, #1
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	697a      	ldr	r2, [r7, #20]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	429a      	cmp	r2, r3
 800079e:	dbf0      	blt.n	8000782 <_write+0x12>
    }
    return len;
 80007a0:	687b      	ldr	r3, [r7, #4]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200000e4 	.word	0x200000e4

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b6:	f000 fa5b 	bl	8000c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ba:	f000 f831 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007be:	f7ff fedf 	bl	8000580 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007c2:	f000 f981 	bl	8000ac8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80007c6:	f7ff ff41 	bl	800064c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("start!! \r\n");
 80007ca:	4810      	ldr	r0, [pc, #64]	; (800080c <main+0x5c>)
 80007cc:	f003 ffca 	bl	8004764 <puts>
#if 1
  MAX30100_Init(&hi2c1, &huart1);
 80007d0:	490f      	ldr	r1, [pc, #60]	; (8000810 <main+0x60>)
 80007d2:	4810      	ldr	r0, [pc, #64]	; (8000814 <main+0x64>)
 80007d4:	f003 fd22 	bl	800421c <MAX30100_Init>
  MAX30100_SetSpO2SampleRate(MAX30100_SPO2SR_DEFAULT);
 80007d8:	2001      	movs	r0, #1
 80007da:	f003 fdf9 	bl	80043d0 <MAX30100_SetSpO2SampleRate>
  MAX30100_SetLEDPulseWidth(MAX30100_LEDPW_DEFAULT);
 80007de:	2003      	movs	r0, #3
 80007e0:	f003 fe17 	bl	8004412 <MAX30100_SetLEDPulseWidth>
  MAX30100_SetLEDCurrent(MAX30100_LEDCURRENT_DEFAULT, MAX30100_LEDCURRENT_DEFAULT);
 80007e4:	210f      	movs	r1, #15
 80007e6:	200f      	movs	r0, #15
 80007e8:	f003 fe34 	bl	8004454 <MAX30100_SetLEDCurrent>
  MAX30100_SetMode(MAX30100_SPO2_MODE);
 80007ec:	2003      	movs	r0, #3
 80007ee:	f003 fda3 	bl	8004338 <MAX30100_SetMode>
  }
  printf("\r\n");
#endif
  while (1)
  {
    MAX30100_ReadFIFO();
 80007f2:	f003 fe61 	bl	80044b8 <MAX30100_ReadFIFO>
    MAX30100_PlotBothToUART(&huart1, _max30100_red_sample, _max30100_ir_sample, 16);
 80007f6:	2310      	movs	r3, #16
 80007f8:	4a07      	ldr	r2, [pc, #28]	; (8000818 <main+0x68>)
 80007fa:	4908      	ldr	r1, [pc, #32]	; (800081c <main+0x6c>)
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <main+0x60>)
 80007fe:	f003 fed5 	bl	80045ac <MAX30100_PlotBothToUART>
    HAL_Delay(1000);
 8000802:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000806:	f000 faa7 	bl	8000d58 <HAL_Delay>
    MAX30100_ReadFIFO();
 800080a:	e7f2      	b.n	80007f2 <main+0x42>
 800080c:	08005630 	.word	0x08005630
 8000810:	200000e4 	.word	0x200000e4
 8000814:	20000098 	.word	0x20000098
 8000818:	200001a0 	.word	0x200001a0
 800081c:	20000170 	.word	0x20000170

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b0a4      	sub	sp, #144	; 0x90
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800082a:	2244      	movs	r2, #68	; 0x44
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f003 ff34 	bl	800469c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2234      	movs	r2, #52	; 0x34
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f003 ff26 	bl	800469c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000850:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000854:	f002 f822 	bl	800289c <HAL_PWREx_ControlVoltageScaling>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0x42>
  {
    Error_Handler();
 800085e:	f000 f83c 	bl	80008da <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000862:	2310      	movs	r3, #16
 8000864:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000866:	2301      	movs	r3, #1
 8000868:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800086e:	2360      	movs	r3, #96	; 0x60
 8000870:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000872:	2300      	movs	r3, #0
 8000874:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000876:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800087a:	4618      	mov	r0, r3
 800087c:	f002 f864 	bl	8002948 <HAL_RCC_OscConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000886:	f000 f828 	bl	80008da <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088a:	230f      	movs	r3, #15
 800088c:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800088e:	2300      	movs	r3, #0
 8000890:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800089e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 fcb5 	bl	8003214 <HAL_RCC_ClockConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b0:	f000 f813 	bl	80008da <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80008b4:	2341      	movs	r3, #65	; 0x41
 80008b6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	4618      	mov	r0, r3
 80008c4:	f002 feaa 	bl	800361c <HAL_RCCEx_PeriphCLKConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80008ce:	f000 f804 	bl	80008da <Error_Handler>
  }
}
 80008d2:	bf00      	nop
 80008d4:	3790      	adds	r7, #144	; 0x90
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008de:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x6>
	...

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <HAL_MspInit+0x44>)
 80008ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <HAL_MspInit+0x44>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6613      	str	r3, [r2, #96]	; 0x60
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_MspInit+0x44>)
 80008f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_MspInit+0x44>)
 8000904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000906:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_MspInit+0x44>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090c:	6593      	str	r3, [r2, #88]	; 0x58
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_MspInit+0x44>)
 8000910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <NMI_Handler+0x4>

08000932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <MemManage_Handler+0x4>

0800093e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <BusFault_Handler+0x4>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <UsageFault_Handler+0x4>

0800094a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000978:	f000 f9ce 	bl	8000d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}

08000980 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000984:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000988:	f000 fcf2 	bl	8001370 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  //MAX30100_InterruptHandler();

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}

08000990 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000994:	4802      	ldr	r0, [pc, #8]	; (80009a0 <I2C1_EV_IRQHandler+0x10>)
 8000996:	f000 ff87 	bl	80018a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000098 	.word	0x20000098

080009a4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80009a8:	4802      	ldr	r0, [pc, #8]	; (80009b4 <I2C1_ER_IRQHandler+0x10>)
 80009aa:	f000 ff97 	bl	80018dc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000098 	.word	0x20000098

080009b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	e00a      	b.n	80009e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009ca:	f3af 8000 	nop.w
 80009ce:	4601      	mov	r1, r0
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	60ba      	str	r2, [r7, #8]
 80009d6:	b2ca      	uxtb	r2, r1
 80009d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	3301      	adds	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	697a      	ldr	r2, [r7, #20]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	dbf0      	blt.n	80009ca <_read+0x12>
	}

return len;
 80009e8:	687b      	ldr	r3, [r7, #4]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
	return -1;
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a1a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <_isatty>:

int _isatty(int file)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
	return 1;
 8000a32:	2301      	movs	r3, #1
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
	return 0;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a64:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <_sbrk+0x5c>)
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <_sbrk+0x60>)
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <_sbrk+0x64>)
 8000a7a:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <_sbrk+0x68>)
 8000a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d207      	bcs.n	8000a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a8c:	f003 fddc 	bl	8004648 <__errno>
 8000a90:	4602      	mov	r2, r0
 8000a92:	230c      	movs	r3, #12
 8000a94:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9a:	e009      	b.n	8000ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <_sbrk+0x64>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <_sbrk+0x64>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <_sbrk+0x64>)
 8000aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aae:	68fb      	ldr	r3, [r7, #12]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2000a000 	.word	0x2000a000
 8000abc:	00000400 	.word	0x00000400
 8000ac0:	2000008c 	.word	0x2000008c
 8000ac4:	200001c8 	.word	0x200001c8

08000ac8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_USART1_UART_Init+0x58>)
 8000ace:	4a15      	ldr	r2, [pc, #84]	; (8000b24 <MX_USART1_UART_Init+0x5c>)
 8000ad0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <MX_USART1_UART_Init+0x58>)
 8000ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_USART1_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_USART1_UART_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_USART1_UART_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_USART1_UART_Init+0x58>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_USART1_UART_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_USART1_UART_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_USART1_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_USART1_UART_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_USART1_UART_Init+0x58>)
 8000b0c:	f002 ff0c 	bl	8003928 <HAL_UART_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b16:	f7ff fee0 	bl	80008da <Error_Handler>
  }

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200000e4 	.word	0x200000e4
 8000b24:	40013800 	.word	0x40013800

08000b28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a18      	ldr	r2, [pc, #96]	; (8000ba8 <HAL_UART_MspInit+0x80>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d129      	bne.n	8000b9e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_UART_MspInit+0x84>)
 8000b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4e:	4a17      	ldr	r2, [pc, #92]	; (8000bac <HAL_UART_MspInit+0x84>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b54:	6613      	str	r3, [r2, #96]	; 0x60
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_UART_MspInit+0x84>)
 8000b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_UART_MspInit+0x84>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	4a11      	ldr	r2, [pc, #68]	; (8000bac <HAL_UART_MspInit+0x84>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <HAL_UART_MspInit+0x84>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b8c:	2307      	movs	r3, #7
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9a:	f000 fa5f 	bl	800105c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	; 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40013800 	.word	0x40013800
 8000bac:	40021000 	.word	0x40021000

08000bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb4:	f000 f826 	bl	8000c04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bb8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bba:	e003      	b.n	8000bc4 <LoopCopyDataInit>

08000bbc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000bbe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bc0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bc2:	3104      	adds	r1, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000bc4:	480a      	ldr	r0, [pc, #40]	; (8000bf0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000bc8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bcc:	d3f6      	bcc.n	8000bbc <CopyDataInit>
	ldr	r2, =_sbss
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000bd0:	e002      	b.n	8000bd8 <LoopFillZerobss>

08000bd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bd2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000bd4:	f842 3b04 	str.w	r3, [r2], #4

08000bd8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <LoopForever+0x16>)
	cmp	r2, r3
 8000bda:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000bdc:	d3f9      	bcc.n	8000bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bde:	f003 fd39 	bl	8004654 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000be2:	f7ff fde5 	bl	80007b0 <main>

08000be6 <LoopForever>:

LoopForever:
    b LoopForever
 8000be6:	e7fe      	b.n	8000be6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000be8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000bec:	0800574c 	.word	0x0800574c
	ldr	r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bf4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000bf8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000bfc:	200001c4 	.word	0x200001c4

08000c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC1_2_IRQHandler>
	...

08000c04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <SystemInit+0x64>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a16      	ldr	r2, [pc, #88]	; (8000c68 <SystemInit+0x64>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <SystemInit+0x68>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a13      	ldr	r2, [pc, #76]	; (8000c6c <SystemInit+0x68>)
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <SystemInit+0x68>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <SystemInit+0x68>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a0f      	ldr	r2, [pc, #60]	; (8000c6c <SystemInit+0x68>)
 8000c30:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c34:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c38:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <SystemInit+0x68>)
 8000c3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c40:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <SystemInit+0x68>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a09      	ldr	r2, [pc, #36]	; (8000c6c <SystemInit+0x68>)
 8000c48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c4c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <SystemInit+0x68>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <SystemInit+0x64>)
 8000c56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c5a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00
 8000c6c:	40021000 	.word	0x40021000

08000c70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7a:	2003      	movs	r0, #3
 8000c7c:	f000 f95e 	bl	8000f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c80:	2000      	movs	r0, #0
 8000c82:	f000 f80d 	bl	8000ca0 <HAL_InitTick>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d002      	beq.n	8000c92 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	71fb      	strb	r3, [r7, #7]
 8000c90:	e001      	b.n	8000c96 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c92:	f7ff fe27 	bl	80008e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c96:	79fb      	ldrb	r3, [r7, #7]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cac:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <HAL_InitTick+0x6c>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d023      	beq.n	8000cfc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <HAL_InitTick+0x70>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <HAL_InitTick+0x6c>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 f96b 	bl	8000fa6 <HAL_SYSTICK_Config>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d10f      	bne.n	8000cf6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b0f      	cmp	r3, #15
 8000cda:	d809      	bhi.n	8000cf0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce4:	f000 f935 	bl	8000f52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_InitTick+0x74>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	e007      	b.n	8000d00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	73fb      	strb	r3, [r7, #15]
 8000cf4:	e004      	b.n	8000d00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	73fb      	strb	r3, [r7, #15]
 8000cfa:	e001      	b.n	8000d00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000000 	.word	0x20000000
 8000d14:	20000004 	.word	0x20000004

08000d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	20000164 	.word	0x20000164

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000164 	.word	0x20000164

08000d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff ffee 	bl	8000d40 <HAL_GetTick>
 8000d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d70:	d005      	beq.n	8000d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_Delay+0x40>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d7e:	bf00      	nop
 8000d80:	f7ff ffde 	bl	8000d40 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8f7      	bhi.n	8000d80 <HAL_Delay+0x28>
  {
  }
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000008 	.word	0x20000008

08000d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	60d3      	str	r3, [r2, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <__NVIC_GetPriorityGrouping+0x18>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	f003 0307 	and.w	r3, r3, #7
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	db0b      	blt.n	8000e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	f003 021f 	and.w	r2, r3, #31
 8000e18:	4907      	ldr	r1, [pc, #28]	; (8000e38 <__NVIC_EnableIRQ+0x38>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	095b      	lsrs	r3, r3, #5
 8000e20:	2001      	movs	r0, #1
 8000e22:	fa00 f202 	lsl.w	r2, r0, r2
 8000e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000e100 	.word	0xe000e100

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db0a      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	490c      	ldr	r1, [pc, #48]	; (8000e88 <__NVIC_SetPriority+0x4c>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	440b      	add	r3, r1
 8000e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e64:	e00a      	b.n	8000e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4908      	ldr	r1, [pc, #32]	; (8000e8c <__NVIC_SetPriority+0x50>)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	3b04      	subs	r3, #4
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	; 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf28      	it	cs
 8000eae:	2304      	movcs	r3, #4
 8000eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d902      	bls.n	8000ec0 <NVIC_EncodePriority+0x30>
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3b03      	subs	r3, #3
 8000ebe:	e000      	b.n	8000ec2 <NVIC_EncodePriority+0x32>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4313      	orrs	r3, r2
         );
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	; 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f08:	d301      	bcc.n	8000f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00f      	b.n	8000f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <SysTick_Config+0x40>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f16:	210f      	movs	r1, #15
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f7ff ff8e 	bl	8000e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <SysTick_Config+0x40>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <SysTick_Config+0x40>)
 8000f28:	2207      	movs	r2, #7
 8000f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	e000e010 	.word	0xe000e010

08000f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ff29 	bl	8000d9c <__NVIC_SetPriorityGrouping>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b086      	sub	sp, #24
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f64:	f7ff ff3e 	bl	8000de4 <__NVIC_GetPriorityGrouping>
 8000f68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	68b9      	ldr	r1, [r7, #8]
 8000f6e:	6978      	ldr	r0, [r7, #20]
 8000f70:	f7ff ff8e 	bl	8000e90 <NVIC_EncodePriority>
 8000f74:	4602      	mov	r2, r0
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff5d 	bl	8000e3c <__NVIC_SetPriority>
}
 8000f82:	bf00      	nop
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff31 	bl	8000e00 <__NVIC_EnableIRQ>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ffa2 	bl	8000ef8 <SysTick_Config>
 8000fb4:	4603      	mov	r3, r0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d005      	beq.n	8000fe2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2204      	movs	r2, #4
 8000fda:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	73fb      	strb	r3, [r7, #15]
 8000fe0:	e029      	b.n	8001036 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 020e 	bic.w	r2, r2, #14
 8000ff0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f022 0201 	bic.w	r2, r2, #1
 8001000:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f003 021c 	and.w	r2, r3, #28
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	2101      	movs	r1, #1
 8001010:	fa01 f202 	lsl.w	r2, r1, r2
 8001014:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2201      	movs	r2, #1
 800101a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	4798      	blx	r3
    }
  }
  return status;
 8001036:	7bfb      	ldrb	r3, [r7, #15]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800104e:	b2db      	uxtb	r3, r3
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800105c:	b480      	push	{r7}
 800105e:	b087      	sub	sp, #28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800106a:	e14e      	b.n	800130a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	2101      	movs	r1, #1
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	fa01 f303 	lsl.w	r3, r1, r3
 8001078:	4013      	ands	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 8140 	beq.w	8001304 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d00b      	beq.n	80010a4 <HAL_GPIO_Init+0x48>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d007      	beq.n	80010a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001098:	2b11      	cmp	r3, #17
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b12      	cmp	r3, #18
 80010a2:	d130      	bne.n	8001106 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	68da      	ldr	r2, [r3, #12]
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010da:	2201      	movs	r2, #1
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	091b      	lsrs	r3, r3, #4
 80010f0:	f003 0201 	and.w	r2, r3, #1
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	2203      	movs	r2, #3
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0xea>
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b12      	cmp	r3, #18
 8001144:	d123      	bne.n	800118e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	08da      	lsrs	r2, r3, #3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3208      	adds	r2, #8
 800114e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	220f      	movs	r2, #15
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	691a      	ldr	r2, [r3, #16]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	f003 0307 	and.w	r3, r3, #7
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	08da      	lsrs	r2, r3, #3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3208      	adds	r2, #8
 8001188:	6939      	ldr	r1, [r7, #16]
 800118a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0203 	and.w	r2, r3, #3
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 809a 	beq.w	8001304 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d0:	4b55      	ldr	r3, [pc, #340]	; (8001328 <HAL_GPIO_Init+0x2cc>)
 80011d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d4:	4a54      	ldr	r2, [pc, #336]	; (8001328 <HAL_GPIO_Init+0x2cc>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	6613      	str	r3, [r2, #96]	; 0x60
 80011dc:	4b52      	ldr	r3, [pc, #328]	; (8001328 <HAL_GPIO_Init+0x2cc>)
 80011de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011e8:	4a50      	ldr	r2, [pc, #320]	; (800132c <HAL_GPIO_Init+0x2d0>)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	3302      	adds	r3, #2
 80011f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	220f      	movs	r2, #15
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001212:	d013      	beq.n	800123c <HAL_GPIO_Init+0x1e0>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a46      	ldr	r2, [pc, #280]	; (8001330 <HAL_GPIO_Init+0x2d4>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d00d      	beq.n	8001238 <HAL_GPIO_Init+0x1dc>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a45      	ldr	r2, [pc, #276]	; (8001334 <HAL_GPIO_Init+0x2d8>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d007      	beq.n	8001234 <HAL_GPIO_Init+0x1d8>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a44      	ldr	r2, [pc, #272]	; (8001338 <HAL_GPIO_Init+0x2dc>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d101      	bne.n	8001230 <HAL_GPIO_Init+0x1d4>
 800122c:	2303      	movs	r3, #3
 800122e:	e006      	b.n	800123e <HAL_GPIO_Init+0x1e2>
 8001230:	2307      	movs	r3, #7
 8001232:	e004      	b.n	800123e <HAL_GPIO_Init+0x1e2>
 8001234:	2302      	movs	r3, #2
 8001236:	e002      	b.n	800123e <HAL_GPIO_Init+0x1e2>
 8001238:	2301      	movs	r3, #1
 800123a:	e000      	b.n	800123e <HAL_GPIO_Init+0x1e2>
 800123c:	2300      	movs	r3, #0
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	f002 0203 	and.w	r2, r2, #3
 8001244:	0092      	lsls	r2, r2, #2
 8001246:	4093      	lsls	r3, r2
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800124e:	4937      	ldr	r1, [pc, #220]	; (800132c <HAL_GPIO_Init+0x2d0>)
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	3302      	adds	r3, #2
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800125c:	4b37      	ldr	r3, [pc, #220]	; (800133c <HAL_GPIO_Init+0x2e0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	43db      	mvns	r3, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001280:	4a2e      	ldr	r2, [pc, #184]	; (800133c <HAL_GPIO_Init+0x2e0>)
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001286:	4b2d      	ldr	r3, [pc, #180]	; (800133c <HAL_GPIO_Init+0x2e0>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	43db      	mvns	r3, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012aa:	4a24      	ldr	r2, [pc, #144]	; (800133c <HAL_GPIO_Init+0x2e0>)
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012b0:	4b22      	ldr	r3, [pc, #136]	; (800133c <HAL_GPIO_Init+0x2e0>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012d4:	4a19      	ldr	r2, [pc, #100]	; (800133c <HAL_GPIO_Init+0x2e0>)
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <HAL_GPIO_Init+0x2e0>)
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4013      	ands	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012fe:	4a0f      	ldr	r2, [pc, #60]	; (800133c <HAL_GPIO_Init+0x2e0>)
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	3301      	adds	r3, #1
 8001308:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	fa22 f303 	lsr.w	r3, r2, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	f47f aea9 	bne.w	800106c <HAL_GPIO_Init+0x10>
  }
}
 800131a:	bf00      	nop
 800131c:	371c      	adds	r7, #28
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000
 800132c:	40010000 	.word	0x40010000
 8001330:	48000400 	.word	0x48000400
 8001334:	48000800 	.word	0x48000800
 8001338:	48000c00 	.word	0x48000c00
 800133c:	40010400 	.word	0x40010400

08001340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	807b      	strh	r3, [r7, #2]
 800134c:	4613      	mov	r3, r2
 800134e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001350:	787b      	ldrb	r3, [r7, #1]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800135c:	e002      	b.n	8001364 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800135e:	887a      	ldrh	r2, [r7, #2]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800137c:	695a      	ldr	r2, [r3, #20]
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	4013      	ands	r3, r2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d006      	beq.n	8001394 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f806 	bl	80013a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40010400 	.word	0x40010400

080013a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e081      	b.n	80014cc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d106      	bne.n	80013e2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff f973 	bl	80006c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2224      	movs	r2, #36	; 0x24
 80013e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0201 	bic.w	r2, r2, #1
 80013f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001406:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001416:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d107      	bne.n	8001430 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	e006      	b.n	800143e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800143c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d104      	bne.n	8001450 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800144e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800145e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001462:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68da      	ldr	r2, [r3, #12]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001472:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691a      	ldr	r2, [r3, #16]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	ea42 0103 	orr.w	r1, r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	021a      	lsls	r2, r3, #8
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69d9      	ldr	r1, [r3, #28]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1a      	ldr	r2, [r3, #32]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f042 0201 	orr.w	r2, r2, #1
 80014ac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2220      	movs	r2, #32
 80014b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af02      	add	r7, sp, #8
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	461a      	mov	r2, r3
 80014e0:	460b      	mov	r3, r1
 80014e2:	817b      	strh	r3, [r7, #10]
 80014e4:	4613      	mov	r3, r2
 80014e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b20      	cmp	r3, #32
 80014f2:	f040 80da 	bne.w	80016aa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d101      	bne.n	8001504 <HAL_I2C_Master_Transmit+0x30>
 8001500:	2302      	movs	r3, #2
 8001502:	e0d3      	b.n	80016ac <HAL_I2C_Master_Transmit+0x1d8>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800150c:	f7ff fc18 	bl	8000d40 <HAL_GetTick>
 8001510:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	2319      	movs	r3, #25
 8001518:	2201      	movs	r2, #1
 800151a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f000 fefb 	bl	800231a <I2C_WaitOnFlagUntilTimeout>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e0be      	b.n	80016ac <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2221      	movs	r2, #33	; 0x21
 8001532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2210      	movs	r2, #16
 800153a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2200      	movs	r2, #0
 8001542:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	893a      	ldrh	r2, [r7, #8]
 800154e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800155a:	b29b      	uxth	r3, r3
 800155c:	2bff      	cmp	r3, #255	; 0xff
 800155e:	d90e      	bls.n	800157e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	22ff      	movs	r2, #255	; 0xff
 8001564:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800156a:	b2da      	uxtb	r2, r3
 800156c:	8979      	ldrh	r1, [r7, #10]
 800156e:	4b51      	ldr	r3, [pc, #324]	; (80016b4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f001 f85e 	bl	8002638 <I2C_TransferConfig>
 800157c:	e06c      	b.n	8001658 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001582:	b29a      	uxth	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158c:	b2da      	uxtb	r2, r3
 800158e:	8979      	ldrh	r1, [r7, #10]
 8001590:	4b48      	ldr	r3, [pc, #288]	; (80016b4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f001 f84d 	bl	8002638 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800159e:	e05b      	b.n	8001658 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	6a39      	ldr	r1, [r7, #32]
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f000 fef8 	bl	800239a <I2C_WaitOnTXISFlagUntilTimeout>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e07b      	b.n	80016ac <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b8:	781a      	ldrb	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	1c5a      	adds	r2, r3, #1
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	3b01      	subs	r3, #1
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015dc:	3b01      	subs	r3, #1
 80015de:	b29a      	uxth	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d034      	beq.n	8001658 <HAL_I2C_Master_Transmit+0x184>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d130      	bne.n	8001658 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	2200      	movs	r2, #0
 80015fe:	2180      	movs	r1, #128	; 0x80
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f000 fe8a 	bl	800231a <I2C_WaitOnFlagUntilTimeout>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e04d      	b.n	80016ac <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001614:	b29b      	uxth	r3, r3
 8001616:	2bff      	cmp	r3, #255	; 0xff
 8001618:	d90e      	bls.n	8001638 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	22ff      	movs	r2, #255	; 0xff
 800161e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001624:	b2da      	uxtb	r2, r3
 8001626:	8979      	ldrh	r1, [r7, #10]
 8001628:	2300      	movs	r3, #0
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f001 f801 	bl	8002638 <I2C_TransferConfig>
 8001636:	e00f      	b.n	8001658 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800163c:	b29a      	uxth	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001646:	b2da      	uxtb	r2, r3
 8001648:	8979      	ldrh	r1, [r7, #10]
 800164a:	2300      	movs	r3, #0
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f000 fff0 	bl	8002638 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800165c:	b29b      	uxth	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d19e      	bne.n	80015a0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	6a39      	ldr	r1, [r7, #32]
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f000 fed7 	bl	800241a <I2C_WaitOnSTOPFlagUntilTimeout>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e01a      	b.n	80016ac <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2220      	movs	r2, #32
 800167c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6859      	ldr	r1, [r3, #4]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_I2C_Master_Transmit+0x1e4>)
 800168a:	400b      	ands	r3, r1
 800168c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2220      	movs	r2, #32
 8001692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e000      	b.n	80016ac <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80016aa:	2302      	movs	r3, #2
  }
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	80002000 	.word	0x80002000
 80016b8:	fe00e800 	.word	0xfe00e800

080016bc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af02      	add	r7, sp, #8
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	461a      	mov	r2, r3
 80016c8:	460b      	mov	r3, r1
 80016ca:	817b      	strh	r3, [r7, #10]
 80016cc:	4613      	mov	r3, r2
 80016ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b20      	cmp	r3, #32
 80016da:	f040 80db 	bne.w	8001894 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <HAL_I2C_Master_Receive+0x30>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e0d4      	b.n	8001896 <HAL_I2C_Master_Receive+0x1da>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016f4:	f7ff fb24 	bl	8000d40 <HAL_GetTick>
 80016f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	2319      	movs	r3, #25
 8001700:	2201      	movs	r2, #1
 8001702:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f000 fe07 	bl	800231a <I2C_WaitOnFlagUntilTimeout>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e0bf      	b.n	8001896 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2222      	movs	r2, #34	; 0x22
 800171a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2210      	movs	r2, #16
 8001722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	893a      	ldrh	r2, [r7, #8]
 8001736:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2200      	movs	r2, #0
 800173c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001742:	b29b      	uxth	r3, r3
 8001744:	2bff      	cmp	r3, #255	; 0xff
 8001746:	d90e      	bls.n	8001766 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	22ff      	movs	r2, #255	; 0xff
 800174c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001752:	b2da      	uxtb	r2, r3
 8001754:	8979      	ldrh	r1, [r7, #10]
 8001756:	4b52      	ldr	r3, [pc, #328]	; (80018a0 <HAL_I2C_Master_Receive+0x1e4>)
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f000 ff6a 	bl	8002638 <I2C_TransferConfig>
 8001764:	e06d      	b.n	8001842 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176a:	b29a      	uxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001774:	b2da      	uxtb	r2, r3
 8001776:	8979      	ldrh	r1, [r7, #10]
 8001778:	4b49      	ldr	r3, [pc, #292]	; (80018a0 <HAL_I2C_Master_Receive+0x1e4>)
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 ff59 	bl	8002638 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001786:	e05c      	b.n	8001842 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	6a39      	ldr	r1, [r7, #32]
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f000 fe81 	bl	8002494 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e07c      	b.n	8001896 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d034      	beq.n	8001842 <HAL_I2C_Master_Receive+0x186>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d130      	bne.n	8001842 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	2200      	movs	r2, #0
 80017e8:	2180      	movs	r1, #128	; 0x80
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 fd95 	bl	800231a <I2C_WaitOnFlagUntilTimeout>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e04d      	b.n	8001896 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017fe:	b29b      	uxth	r3, r3
 8001800:	2bff      	cmp	r3, #255	; 0xff
 8001802:	d90e      	bls.n	8001822 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	22ff      	movs	r2, #255	; 0xff
 8001808:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800180e:	b2da      	uxtb	r2, r3
 8001810:	8979      	ldrh	r1, [r7, #10]
 8001812:	2300      	movs	r3, #0
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 ff0c 	bl	8002638 <I2C_TransferConfig>
 8001820:	e00f      	b.n	8001842 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001826:	b29a      	uxth	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001830:	b2da      	uxtb	r2, r3
 8001832:	8979      	ldrh	r1, [r7, #10]
 8001834:	2300      	movs	r3, #0
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f000 fefb 	bl	8002638 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001846:	b29b      	uxth	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	d19d      	bne.n	8001788 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	6a39      	ldr	r1, [r7, #32]
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f000 fde2 	bl	800241a <I2C_WaitOnSTOPFlagUntilTimeout>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e01a      	b.n	8001896 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2220      	movs	r2, #32
 8001866:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6859      	ldr	r1, [r3, #4]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <HAL_I2C_Master_Receive+0x1e8>)
 8001874:	400b      	ands	r3, r1
 8001876:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2220      	movs	r2, #32
 800187c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	e000      	b.n	8001896 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001894:	2302      	movs	r3, #2
  }
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	80002400 	.word	0x80002400
 80018a4:	fe00e800 	.word	0xfe00e800

080018a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	68f9      	ldr	r1, [r7, #12]
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	4798      	blx	r3
  }
}
 80018d4:	bf00      	nop
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	0a1b      	lsrs	r3, r3, #8
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d010      	beq.n	8001922 <HAL_I2C_ER_IRQHandler+0x46>
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	09db      	lsrs	r3, r3, #7
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00a      	beq.n	8001922 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001910:	f043 0201 	orr.w	r2, r3, #1
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001920:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	0a9b      	lsrs	r3, r3, #10
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d010      	beq.n	8001950 <HAL_I2C_ER_IRQHandler+0x74>
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	09db      	lsrs	r3, r3, #7
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00a      	beq.n	8001950 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	f043 0208 	orr.w	r2, r3, #8
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800194e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	0a5b      	lsrs	r3, r3, #9
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d010      	beq.n	800197e <HAL_I2C_ER_IRQHandler+0xa2>
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	09db      	lsrs	r3, r3, #7
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00a      	beq.n	800197e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196c:	f043 0202 	orr.w	r2, r3, #2
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800197c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 030b 	and.w	r3, r3, #11
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800198e:	68f9      	ldr	r1, [r7, #12]
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 fb89 	bl	80020a8 <I2C_ITError>
  }
}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	460b      	mov	r3, r1
 80019d0:	70fb      	strb	r3, [r7, #3]
 80019d2:	4613      	mov	r3, r2
 80019d4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <I2C_Slave_ISR_IT+0x24>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e0ec      	b.n	8001c1c <I2C_Slave_ISR_IT+0x1fe>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	095b      	lsrs	r3, r3, #5
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d009      	beq.n	8001a6a <I2C_Slave_ISR_IT+0x4c>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	095b      	lsrs	r3, r3, #5
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001a62:	6939      	ldr	r1, [r7, #16]
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f000 f9bf 	bl	8001de8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	091b      	lsrs	r3, r3, #4
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d04d      	beq.n	8001b12 <I2C_Slave_ISR_IT+0xf4>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d047      	beq.n	8001b12 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d128      	bne.n	8001ade <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b28      	cmp	r3, #40	; 0x28
 8001a96:	d108      	bne.n	8001aaa <I2C_Slave_ISR_IT+0x8c>
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a9e:	d104      	bne.n	8001aaa <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001aa0:	6939      	ldr	r1, [r7, #16]
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 faaa 	bl	8001ffc <I2C_ITListenCplt>
 8001aa8:	e032      	b.n	8001b10 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b29      	cmp	r3, #41	; 0x29
 8001ab4:	d10e      	bne.n	8001ad4 <I2C_Slave_ISR_IT+0xb6>
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001abc:	d00a      	beq.n	8001ad4 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2210      	movs	r2, #16
 8001ac4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 fbe5 	bl	8002296 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 f92d 	bl	8001d2c <I2C_ITSlaveSeqCplt>
 8001ad2:	e01d      	b.n	8001b10 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2210      	movs	r2, #16
 8001ada:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001adc:	e096      	b.n	8001c0c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2210      	movs	r2, #16
 8001ae4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f043 0204 	orr.w	r2, r3, #4
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d004      	beq.n	8001b02 <I2C_Slave_ISR_IT+0xe4>
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001afe:	f040 8085 	bne.w	8001c0c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	4619      	mov	r1, r3
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f000 facd 	bl	80020a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001b0e:	e07d      	b.n	8001c0c <I2C_Slave_ISR_IT+0x1ee>
 8001b10:	e07c      	b.n	8001c0c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	089b      	lsrs	r3, r3, #2
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d030      	beq.n	8001b80 <I2C_Slave_ISR_IT+0x162>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	089b      	lsrs	r3, r3, #2
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d02a      	beq.n	8001b80 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d018      	beq.n	8001b66 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d14f      	bne.n	8001c10 <I2C_Slave_ISR_IT+0x1f2>
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b76:	d04b      	beq.n	8001c10 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f000 f8d7 	bl	8001d2c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001b7e:	e047      	b.n	8001c10 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	08db      	lsrs	r3, r3, #3
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00a      	beq.n	8001ba2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	08db      	lsrs	r3, r3, #3
 8001b90:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d004      	beq.n	8001ba2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001b98:	6939      	ldr	r1, [r7, #16]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 f842 	bl	8001c24 <I2C_ITAddrCplt>
 8001ba0:	e037      	b.n	8001c12 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	085b      	lsrs	r3, r3, #1
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d031      	beq.n	8001c12 <I2C_Slave_ISR_IT+0x1f4>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	085b      	lsrs	r3, r3, #1
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d02b      	beq.n	8001c12 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d018      	beq.n	8001bf6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	781a      	ldrb	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bec:	3b01      	subs	r3, #1
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	851a      	strh	r2, [r3, #40]	; 0x28
 8001bf4:	e00d      	b.n	8001c12 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bfc:	d002      	beq.n	8001c04 <I2C_Slave_ISR_IT+0x1e6>
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d106      	bne.n	8001c12 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f000 f891 	bl	8001d2c <I2C_ITSlaveSeqCplt>
 8001c0a:	e002      	b.n	8001c12 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8001c0c:	bf00      	nop
 8001c0e:	e000      	b.n	8001c12 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8001c10:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001c3a:	2b28      	cmp	r3, #40	; 0x28
 8001c3c:	d16a      	bne.n	8001d14 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	0c1b      	lsrs	r3, r3, #16
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	0c1b      	lsrs	r3, r3, #16
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001c5c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c6a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001c78:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d138      	bne.n	8001cf4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001c82:	897b      	ldrh	r3, [r7, #10]
 8001c84:	09db      	lsrs	r3, r3, #7
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	89bb      	ldrh	r3, [r7, #12]
 8001c8a:	4053      	eors	r3, r2
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	f003 0306 	and.w	r3, r3, #6
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d11c      	bne.n	8001cd0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001c96:	897b      	ldrh	r3, [r7, #10]
 8001c98:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d13b      	bne.n	8001d24 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2208      	movs	r2, #8
 8001cb8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001cc2:	89ba      	ldrh	r2, [r7, #12]
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff fe7c 	bl	80019c6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001cce:	e029      	b.n	8001d24 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001cd0:	893b      	ldrh	r3, [r7, #8]
 8001cd2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001cd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 fcdb 	bl	8002694 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001ce6:	89ba      	ldrh	r2, [r7, #12]
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	4619      	mov	r1, r3
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff fe6a 	bl	80019c6 <HAL_I2C_AddrCallback>
}
 8001cf2:	e017      	b.n	8001d24 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001cf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 fccb 	bl	8002694 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d06:	89ba      	ldrh	r2, [r7, #12]
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff fe5a 	bl	80019c6 <HAL_I2C_AddrCallback>
}
 8001d12:	e007      	b.n	8001d24 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2208      	movs	r2, #8
 8001d1a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001d24:	bf00      	nop
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	0b9b      	lsrs	r3, r3, #14
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	e00d      	b.n	8001d7e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	0bdb      	lsrs	r3, r3, #15
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d007      	beq.n	8001d7e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d7c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b29      	cmp	r3, #41	; 0x29
 8001d88:	d112      	bne.n	8001db0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2228      	movs	r2, #40	; 0x28
 8001d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2221      	movs	r2, #33	; 0x21
 8001d96:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001d98:	2101      	movs	r1, #1
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 fc7a 	bl	8002694 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff fdf8 	bl	800199e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001dae:	e017      	b.n	8001de0 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b2a      	cmp	r3, #42	; 0x2a
 8001dba:	d111      	bne.n	8001de0 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2228      	movs	r2, #40	; 0x28
 8001dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2222      	movs	r2, #34	; 0x22
 8001dc8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001dca:	2102      	movs	r1, #2
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 fc61 	bl	8002694 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff fde9 	bl	80019b2 <HAL_I2C_SlaveRxCpltCallback>
}
 8001de0:	bf00      	nop
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e04:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	2b21      	cmp	r3, #33	; 0x21
 8001e12:	d002      	beq.n	8001e1a <I2C_ITSlaveCplt+0x32>
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	2b29      	cmp	r3, #41	; 0x29
 8001e18:	d108      	bne.n	8001e2c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001e1a:	f248 0101 	movw	r1, #32769	; 0x8001
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 fc38 	bl	8002694 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2221      	movs	r2, #33	; 0x21
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30
 8001e2a:	e00d      	b.n	8001e48 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	2b22      	cmp	r3, #34	; 0x22
 8001e30:	d002      	beq.n	8001e38 <I2C_ITSlaveCplt+0x50>
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	2b2a      	cmp	r3, #42	; 0x2a
 8001e36:	d107      	bne.n	8001e48 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001e38:	f248 0102 	movw	r1, #32770	; 0x8002
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 fc29 	bl	8002694 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2222      	movs	r2, #34	; 0x22
 8001e46:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e56:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6859      	ldr	r1, [r3, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	4b64      	ldr	r3, [pc, #400]	; (8001ff4 <I2C_ITSlaveCplt+0x20c>)
 8001e64:	400b      	ands	r3, r1
 8001e66:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 fa14 	bl	8002296 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	0b9b      	lsrs	r3, r3, #14
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d013      	beq.n	8001ea2 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e88:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d020      	beq.n	8001ed4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ea0:	e018      	b.n	8001ed4 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	0bdb      	lsrs	r3, r3, #15
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d012      	beq.n	8001ed4 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ebc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d006      	beq.n	8001ed4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	089b      	lsrs	r3, r3, #2
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d020      	beq.n	8001f22 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f023 0304 	bic.w	r3, r3, #4
 8001ee6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00c      	beq.n	8001f22 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f30:	f043 0204 	orr.w	r2, r3, #4
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d010      	beq.n	8001f70 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	4619      	mov	r1, r3
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f8a7 	bl	80020a8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b28      	cmp	r3, #40	; 0x28
 8001f64:	d141      	bne.n	8001fea <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001f66:	6979      	ldr	r1, [r7, #20]
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f847 	bl	8001ffc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001f6e:	e03c      	b.n	8001fea <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f78:	d014      	beq.n	8001fa4 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff fed6 	bl	8001d2c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a1d      	ldr	r2, [pc, #116]	; (8001ff8 <I2C_ITSlaveCplt+0x210>)
 8001f84:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff fd20 	bl	80019e2 <HAL_I2C_ListenCpltCallback>
}
 8001fa2:	e022      	b.n	8001fea <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b22      	cmp	r3, #34	; 0x22
 8001fae:	d10e      	bne.n	8001fce <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff fcf3 	bl	80019b2 <HAL_I2C_SlaveRxCpltCallback>
}
 8001fcc:	e00d      	b.n	8001fea <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff fcda 	bl	800199e <HAL_I2C_SlaveTxCpltCallback>
}
 8001fea:	bf00      	nop
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	fe00e800 	.word	0xfe00e800
 8001ff8:	ffff0000 	.word	0xffff0000

08001ffc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a26      	ldr	r2, [pc, #152]	; (80020a4 <I2C_ITListenCplt+0xa8>)
 800200a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2220      	movs	r2, #32
 8002016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b00      	cmp	r3, #0
 8002032:	d022      	beq.n	800207a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002050:	2b00      	cmp	r3, #0
 8002052:	d012      	beq.n	800207a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002058:	3b01      	subs	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002064:	b29b      	uxth	r3, r3
 8002066:	3b01      	subs	r3, #1
 8002068:	b29a      	uxth	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	f043 0204 	orr.w	r2, r3, #4
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800207a:	f248 0103 	movw	r1, #32771	; 0x8003
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fb08 	bl	8002694 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2210      	movs	r2, #16
 800208a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff fca4 	bl	80019e2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	ffff0000 	.word	0xffff0000

080020a8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a5d      	ldr	r2, [pc, #372]	; (800223c <I2C_ITError+0x194>)
 80020c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	431a      	orrs	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	2b28      	cmp	r3, #40	; 0x28
 80020de:	d005      	beq.n	80020ec <I2C_ITError+0x44>
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	2b29      	cmp	r3, #41	; 0x29
 80020e4:	d002      	beq.n	80020ec <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	2b2a      	cmp	r3, #42	; 0x2a
 80020ea:	d10b      	bne.n	8002104 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80020ec:	2103      	movs	r1, #3
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 fad0 	bl	8002694 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2228      	movs	r2, #40	; 0x28
 80020f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a50      	ldr	r2, [pc, #320]	; (8002240 <I2C_ITError+0x198>)
 8002100:	635a      	str	r2, [r3, #52]	; 0x34
 8002102:	e011      	b.n	8002128 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002104:	f248 0103 	movw	r1, #32771	; 0x8003
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 fac3 	bl	8002694 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b60      	cmp	r3, #96	; 0x60
 8002118:	d003      	beq.n	8002122 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2220      	movs	r2, #32
 800211e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002132:	2b00      	cmp	r3, #0
 8002134:	d039      	beq.n	80021aa <I2C_ITError+0x102>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b11      	cmp	r3, #17
 800213a:	d002      	beq.n	8002142 <I2C_ITError+0x9a>
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b21      	cmp	r3, #33	; 0x21
 8002140:	d133      	bne.n	80021aa <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800214c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002150:	d107      	bne.n	8002162 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002160:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe ff6a 	bl	8001040 <HAL_DMA_GetState>
 800216c:	4603      	mov	r3, r0
 800216e:	2b01      	cmp	r3, #1
 8002170:	d017      	beq.n	80021a2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002176:	4a33      	ldr	r2, [pc, #204]	; (8002244 <I2C_ITError+0x19c>)
 8002178:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe ff19 	bl	8000fbe <HAL_DMA_Abort_IT>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d04d      	beq.n	800222e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800219c:	4610      	mov	r0, r2
 800219e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80021a0:	e045      	b.n	800222e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f850 	bl	8002248 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80021a8:	e041      	b.n	800222e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d039      	beq.n	8002226 <I2C_ITError+0x17e>
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2b12      	cmp	r3, #18
 80021b6:	d002      	beq.n	80021be <I2C_ITError+0x116>
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b22      	cmp	r3, #34	; 0x22
 80021bc:	d133      	bne.n	8002226 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021cc:	d107      	bne.n	80021de <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021dc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe ff2c 	bl	8001040 <HAL_DMA_GetState>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d017      	beq.n	800221e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f2:	4a14      	ldr	r2, [pc, #80]	; (8002244 <I2C_ITError+0x19c>)
 80021f4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe fedb 	bl	8000fbe <HAL_DMA_Abort_IT>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d011      	beq.n	8002232 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002218:	4610      	mov	r0, r2
 800221a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800221c:	e009      	b.n	8002232 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f812 	bl	8002248 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002224:	e005      	b.n	8002232 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f80e 	bl	8002248 <I2C_TreatErrorCallback>
  }
}
 800222c:	e002      	b.n	8002234 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800222e:	bf00      	nop
 8002230:	e000      	b.n	8002234 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002232:	bf00      	nop
}
 8002234:	bf00      	nop
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	ffff0000 	.word	0xffff0000
 8002240:	08001a1f 	.word	0x08001a1f
 8002244:	080022df 	.word	0x080022df

08002248 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b60      	cmp	r3, #96	; 0x60
 800225a:	d10e      	bne.n	800227a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2220      	movs	r2, #32
 8002260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff fbc9 	bl	8001a0a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002278:	e009      	b.n	800228e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff fbb4 	bl	80019f6 <HAL_I2C_ErrorCallback>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d103      	bne.n	80022b4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2200      	movs	r2, #0
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d007      	beq.n	80022d2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	699a      	ldr	r2, [r3, #24]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 0201 	orr.w	r2, r2, #1
 80022d0:	619a      	str	r2, [r3, #24]
  }
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f8:	2200      	movs	r2, #0
 80022fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002308:	2200      	movs	r2, #0
 800230a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f7ff ff9b 	bl	8002248 <I2C_TreatErrorCallback>
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	603b      	str	r3, [r7, #0]
 8002326:	4613      	mov	r3, r2
 8002328:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800232a:	e022      	b.n	8002372 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002332:	d01e      	beq.n	8002372 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002334:	f7fe fd04 	bl	8000d40 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d302      	bcc.n	800234a <I2C_WaitOnFlagUntilTimeout+0x30>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d113      	bne.n	8002372 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	f043 0220 	orr.w	r2, r3, #32
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2220      	movs	r2, #32
 800235a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e00f      	b.n	8002392 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	699a      	ldr	r2, [r3, #24]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	4013      	ands	r3, r2
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	429a      	cmp	r2, r3
 8002380:	bf0c      	ite	eq
 8002382:	2301      	moveq	r3, #1
 8002384:	2300      	movne	r3, #0
 8002386:	b2db      	uxtb	r3, r3
 8002388:	461a      	mov	r2, r3
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	429a      	cmp	r2, r3
 800238e:	d0cd      	beq.n	800232c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023a6:	e02c      	b.n	8002402 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68b9      	ldr	r1, [r7, #8]
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 f8dd 	bl	800256c <I2C_IsAcknowledgeFailed>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e02a      	b.n	8002412 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c2:	d01e      	beq.n	8002402 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c4:	f7fe fcbc 	bl	8000d40 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d302      	bcc.n	80023da <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d113      	bne.n	8002402 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023de:	f043 0220 	orr.w	r2, r3, #32
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e007      	b.n	8002412 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b02      	cmp	r3, #2
 800240e:	d1cb      	bne.n	80023a8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002426:	e028      	b.n	800247a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	68b9      	ldr	r1, [r7, #8]
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f89d 	bl	800256c <I2C_IsAcknowledgeFailed>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e026      	b.n	800248a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800243c:	f7fe fc80 	bl	8000d40 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	429a      	cmp	r2, r3
 800244a:	d302      	bcc.n	8002452 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d113      	bne.n	800247a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	f043 0220 	orr.w	r2, r3, #32
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2220      	movs	r2, #32
 8002462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e007      	b.n	800248a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f003 0320 	and.w	r3, r3, #32
 8002484:	2b20      	cmp	r3, #32
 8002486:	d1cf      	bne.n	8002428 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024a0:	e055      	b.n	800254e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68b9      	ldr	r1, [r7, #8]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f860 	bl	800256c <I2C_IsAcknowledgeFailed>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e053      	b.n	800255e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f003 0320 	and.w	r3, r3, #32
 80024c0:	2b20      	cmp	r3, #32
 80024c2:	d129      	bne.n	8002518 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d105      	bne.n	80024de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	e03f      	b.n	800255e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2220      	movs	r2, #32
 80024e4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6859      	ldr	r1, [r3, #4]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80024f2:	400b      	ands	r3, r1
 80024f4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e022      	b.n	800255e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002518:	f7fe fc12 	bl	8000d40 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	429a      	cmp	r2, r3
 8002526:	d302      	bcc.n	800252e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10f      	bne.n	800254e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	f043 0220 	orr.w	r2, r3, #32
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2220      	movs	r2, #32
 800253e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e007      	b.n	800255e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b04      	cmp	r3, #4
 800255a:	d1a2      	bne.n	80024a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	fe00e800 	.word	0xfe00e800

0800256c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	2b10      	cmp	r3, #16
 8002584:	d151      	bne.n	800262a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002586:	e022      	b.n	80025ce <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258e:	d01e      	beq.n	80025ce <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002590:	f7fe fbd6 	bl	8000d40 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	429a      	cmp	r2, r3
 800259e:	d302      	bcc.n	80025a6 <I2C_IsAcknowledgeFailed+0x3a>
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d113      	bne.n	80025ce <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	f043 0220 	orr.w	r2, r3, #32
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2220      	movs	r2, #32
 80025b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e02e      	b.n	800262c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	2b20      	cmp	r3, #32
 80025da:	d1d5      	bne.n	8002588 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2210      	movs	r2, #16
 80025e2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2220      	movs	r2, #32
 80025ea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f7ff fe52 	bl	8002296 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <I2C_IsAcknowledgeFailed+0xc8>)
 80025fe:	400b      	ands	r3, r1
 8002600:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	f043 0204 	orr.w	r2, r3, #4
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2220      	movs	r2, #32
 8002612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	fe00e800 	.word	0xfe00e800

08002638 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	607b      	str	r3, [r7, #4]
 8002642:	460b      	mov	r3, r1
 8002644:	817b      	strh	r3, [r7, #10]
 8002646:	4613      	mov	r3, r2
 8002648:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	0d5b      	lsrs	r3, r3, #21
 8002654:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002658:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <I2C_TransferConfig+0x58>)
 800265a:	430b      	orrs	r3, r1
 800265c:	43db      	mvns	r3, r3
 800265e:	ea02 0103 	and.w	r1, r2, r3
 8002662:	897b      	ldrh	r3, [r7, #10]
 8002664:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002668:	7a7b      	ldrb	r3, [r7, #9]
 800266a:	041b      	lsls	r3, r3, #16
 800266c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	431a      	orrs	r2, r3
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	431a      	orrs	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	03ff63ff 	.word	0x03ff63ff

08002694 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80026a4:	887b      	ldrh	r3, [r7, #2]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00f      	beq.n	80026ce <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80026b4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80026c2:	2b28      	cmp	r3, #40	; 0x28
 80026c4:	d003      	beq.n	80026ce <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80026cc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80026ce:	887b      	ldrh	r3, [r7, #2]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00f      	beq.n	80026f8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80026de:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80026ec:	2b28      	cmp	r3, #40	; 0x28
 80026ee:	d003      	beq.n	80026f8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80026f6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80026f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	da03      	bge.n	8002708 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002706:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002708:	887b      	ldrh	r3, [r7, #2]
 800270a:	2b10      	cmp	r3, #16
 800270c:	d103      	bne.n	8002716 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002714:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002716:	887b      	ldrh	r3, [r7, #2]
 8002718:	2b20      	cmp	r3, #32
 800271a:	d103      	bne.n	8002724 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f043 0320 	orr.w	r3, r3, #32
 8002722:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002724:	887b      	ldrh	r3, [r7, #2]
 8002726:	2b40      	cmp	r3, #64	; 0x40
 8002728:	d103      	bne.n	8002732 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002730:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6819      	ldr	r1, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	43da      	mvns	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	400a      	ands	r2, r1
 8002742:	601a      	str	r2, [r3, #0]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b20      	cmp	r3, #32
 8002764:	d138      	bne.n	80027d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002770:	2302      	movs	r3, #2
 8002772:	e032      	b.n	80027da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2224      	movs	r2, #36	; 0x24
 8002780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6819      	ldr	r1, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e000      	b.n	80027da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027d8:	2302      	movs	r3, #2
  }
}
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b085      	sub	sp, #20
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d139      	bne.n	8002870 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002806:	2302      	movs	r3, #2
 8002808:	e033      	b.n	8002872 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2224      	movs	r2, #36	; 0x24
 8002816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0201 	bic.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002838:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	021b      	lsls	r3, r3, #8
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4313      	orrs	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	e000      	b.n	8002872 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002870:	2302      	movs	r3, #2
  }
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002884:	4b04      	ldr	r3, [pc, #16]	; (8002898 <HAL_PWREx_GetVoltageRange+0x18>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40007000 	.word	0x40007000

0800289c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028aa:	d130      	bne.n	800290e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028ac:	4b23      	ldr	r3, [pc, #140]	; (800293c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028b8:	d038      	beq.n	800292c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028ba:	4b20      	ldr	r3, [pc, #128]	; (800293c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028c2:	4a1e      	ldr	r2, [pc, #120]	; (800293c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028ca:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2232      	movs	r2, #50	; 0x32
 80028d0:	fb02 f303 	mul.w	r3, r2, r3
 80028d4:	4a1b      	ldr	r2, [pc, #108]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	0c9b      	lsrs	r3, r3, #18
 80028dc:	3301      	adds	r3, #1
 80028de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028e0:	e002      	b.n	80028e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	3b01      	subs	r3, #1
 80028e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028e8:	4b14      	ldr	r3, [pc, #80]	; (800293c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f4:	d102      	bne.n	80028fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f2      	bne.n	80028e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028fc:	4b0f      	ldr	r3, [pc, #60]	; (800293c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002908:	d110      	bne.n	800292c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e00f      	b.n	800292e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800290e:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800291a:	d007      	beq.n	800292c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800291c:	4b07      	ldr	r3, [pc, #28]	; (800293c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002924:	4a05      	ldr	r2, [pc, #20]	; (800293c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002926:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800292a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40007000 	.word	0x40007000
 8002940:	20000000 	.word	0x20000000
 8002944:	431bde83 	.word	0x431bde83

08002948 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08a      	sub	sp, #40	; 0x28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d102      	bne.n	800295c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	f000 bc56 	b.w	8003208 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800295c:	4ba1      	ldr	r3, [pc, #644]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 030c 	and.w	r3, r3, #12
 8002964:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002966:	4b9f      	ldr	r3, [pc, #636]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 80e6 	beq.w	8002b4a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d007      	beq.n	8002994 <HAL_RCC_OscConfig+0x4c>
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	2b0c      	cmp	r3, #12
 8002988:	f040 808d 	bne.w	8002aa6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b01      	cmp	r3, #1
 8002990:	f040 8089 	bne.w	8002aa6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002994:	4b93      	ldr	r3, [pc, #588]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d006      	beq.n	80029ae <HAL_RCC_OscConfig+0x66>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d102      	bne.n	80029ae <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	f000 bc2d 	b.w	8003208 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029b2:	4b8c      	ldr	r3, [pc, #560]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d004      	beq.n	80029c8 <HAL_RCC_OscConfig+0x80>
 80029be:	4b89      	ldr	r3, [pc, #548]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029c6:	e005      	b.n	80029d4 <HAL_RCC_OscConfig+0x8c>
 80029c8:	4b86      	ldr	r3, [pc, #536]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 80029ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ce:	091b      	lsrs	r3, r3, #4
 80029d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d224      	bcs.n	8002a22 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fdbd 	bl	800355c <RCC_SetFlashLatencyFromMSIRange>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	f000 bc0d 	b.w	8003208 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029ee:	4b7d      	ldr	r3, [pc, #500]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a7c      	ldr	r2, [pc, #496]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 80029f4:	f043 0308 	orr.w	r3, r3, #8
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	4b7a      	ldr	r3, [pc, #488]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	4977      	ldr	r1, [pc, #476]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a0c:	4b75      	ldr	r3, [pc, #468]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	021b      	lsls	r3, r3, #8
 8002a1a:	4972      	ldr	r1, [pc, #456]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]
 8002a20:	e025      	b.n	8002a6e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a22:	4b70      	ldr	r3, [pc, #448]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a6f      	ldr	r2, [pc, #444]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a28:	f043 0308 	orr.w	r3, r3, #8
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	4b6d      	ldr	r3, [pc, #436]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	496a      	ldr	r1, [pc, #424]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a40:	4b68      	ldr	r3, [pc, #416]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	021b      	lsls	r3, r3, #8
 8002a4e:	4965      	ldr	r1, [pc, #404]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d109      	bne.n	8002a6e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 fd7c 	bl	800355c <RCC_SetFlashLatencyFromMSIRange>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e3cc      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a6e:	f000 fcb3 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8002a72:	4601      	mov	r1, r0
 8002a74:	4b5b      	ldr	r3, [pc, #364]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	4a5a      	ldr	r2, [pc, #360]	; (8002be8 <HAL_RCC_OscConfig+0x2a0>)
 8002a80:	5cd3      	ldrb	r3, [r2, r3]
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	fa21 f303 	lsr.w	r3, r1, r3
 8002a8a:	4a58      	ldr	r2, [pc, #352]	; (8002bec <HAL_RCC_OscConfig+0x2a4>)
 8002a8c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a8e:	4b58      	ldr	r3, [pc, #352]	; (8002bf0 <HAL_RCC_OscConfig+0x2a8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe f904 	bl	8000ca0 <HAL_InitTick>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002a9c:	7dfb      	ldrb	r3, [r7, #23]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d052      	beq.n	8002b48 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002aa2:	7dfb      	ldrb	r3, [r7, #23]
 8002aa4:	e3b0      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d032      	beq.n	8002b14 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002aae:	4b4d      	ldr	r3, [pc, #308]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a4c      	ldr	r2, [pc, #304]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002aba:	f7fe f941 	bl	8000d40 <HAL_GetTick>
 8002abe:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ac2:	f7fe f93d 	bl	8000d40 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e399      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ad4:	4b43      	ldr	r3, [pc, #268]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ae0:	4b40      	ldr	r3, [pc, #256]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a3f      	ldr	r2, [pc, #252]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002ae6:	f043 0308 	orr.w	r3, r3, #8
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	4b3d      	ldr	r3, [pc, #244]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	493a      	ldr	r1, [pc, #232]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002afe:	4b39      	ldr	r3, [pc, #228]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	021b      	lsls	r3, r3, #8
 8002b0c:	4935      	ldr	r1, [pc, #212]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	604b      	str	r3, [r1, #4]
 8002b12:	e01a      	b.n	8002b4a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b14:	4b33      	ldr	r3, [pc, #204]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a32      	ldr	r2, [pc, #200]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002b1a:	f023 0301 	bic.w	r3, r3, #1
 8002b1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b20:	f7fe f90e 	bl	8000d40 <HAL_GetTick>
 8002b24:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b28:	f7fe f90a 	bl	8000d40 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e366      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b3a:	4b2a      	ldr	r3, [pc, #168]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x1e0>
 8002b46:	e000      	b.n	8002b4a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d073      	beq.n	8002c3e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d005      	beq.n	8002b68 <HAL_RCC_OscConfig+0x220>
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	2b0c      	cmp	r3, #12
 8002b60:	d10e      	bne.n	8002b80 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d10b      	bne.n	8002b80 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b68:	4b1e      	ldr	r3, [pc, #120]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d063      	beq.n	8002c3c <HAL_RCC_OscConfig+0x2f4>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d15f      	bne.n	8002c3c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e343      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b88:	d106      	bne.n	8002b98 <HAL_RCC_OscConfig+0x250>
 8002b8a:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a15      	ldr	r2, [pc, #84]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	e01d      	b.n	8002bd4 <HAL_RCC_OscConfig+0x28c>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ba0:	d10c      	bne.n	8002bbc <HAL_RCC_OscConfig+0x274>
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a0f      	ldr	r2, [pc, #60]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a0c      	ldr	r2, [pc, #48]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	e00b      	b.n	8002bd4 <HAL_RCC_OscConfig+0x28c>
 8002bbc:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a08      	ldr	r2, [pc, #32]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a05      	ldr	r2, [pc, #20]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d01b      	beq.n	8002c14 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7fe f8b0 	bl	8000d40 <HAL_GetTick>
 8002be0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002be2:	e010      	b.n	8002c06 <HAL_RCC_OscConfig+0x2be>
 8002be4:	40021000 	.word	0x40021000
 8002be8:	0800565c 	.word	0x0800565c
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf4:	f7fe f8a4 	bl	8000d40 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	; 0x64
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e300      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c06:	4ba0      	ldr	r3, [pc, #640]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x2ac>
 8002c12:	e014      	b.n	8002c3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fe f894 	bl	8000d40 <HAL_GetTick>
 8002c18:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7fe f890 	bl	8000d40 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e2ec      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c2e:	4b96      	ldr	r3, [pc, #600]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x2d4>
 8002c3a:	e000      	b.n	8002c3e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d060      	beq.n	8002d0c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	d005      	beq.n	8002c5c <HAL_RCC_OscConfig+0x314>
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	2b0c      	cmp	r3, #12
 8002c54:	d119      	bne.n	8002c8a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d116      	bne.n	8002c8a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c5c:	4b8a      	ldr	r3, [pc, #552]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d005      	beq.n	8002c74 <HAL_RCC_OscConfig+0x32c>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e2c9      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c74:	4b84      	ldr	r3, [pc, #528]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	061b      	lsls	r3, r3, #24
 8002c82:	4981      	ldr	r1, [pc, #516]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c88:	e040      	b.n	8002d0c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d023      	beq.n	8002cda <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c92:	4b7d      	ldr	r3, [pc, #500]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a7c      	ldr	r2, [pc, #496]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9e:	f7fe f84f 	bl	8000d40 <HAL_GetTick>
 8002ca2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca6:	f7fe f84b 	bl	8000d40 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e2a7      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cb8:	4b73      	ldr	r3, [pc, #460]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc4:	4b70      	ldr	r3, [pc, #448]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	061b      	lsls	r3, r3, #24
 8002cd2:	496d      	ldr	r1, [pc, #436]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	604b      	str	r3, [r1, #4]
 8002cd8:	e018      	b.n	8002d0c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cda:	4b6b      	ldr	r3, [pc, #428]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a6a      	ldr	r2, [pc, #424]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce6:	f7fe f82b 	bl	8000d40 <HAL_GetTick>
 8002cea:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cee:	f7fe f827 	bl	8000d40 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e283      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d00:	4b61      	ldr	r3, [pc, #388]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f0      	bne.n	8002cee <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d07f      	beq.n	8002e18 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d05f      	beq.n	8002de0 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002d20:	4b59      	ldr	r3, [pc, #356]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d26:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699a      	ldr	r2, [r3, #24]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d037      	beq.n	8002da6 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d006      	beq.n	8002d4e <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e25c      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01b      	beq.n	8002d90 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8002d58:	4b4b      	ldr	r3, [pc, #300]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d5e:	4a4a      	ldr	r2, [pc, #296]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d68:	f7fd ffea 	bl	8000d40 <HAL_GetTick>
 8002d6c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d70:	f7fd ffe6 	bl	8000d40 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b11      	cmp	r3, #17
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e242      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d82:	4b41      	ldr	r3, [pc, #260]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002d84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1ef      	bne.n	8002d70 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002d90:	4b3d      	ldr	r3, [pc, #244]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d96:	f023 0210 	bic.w	r2, r3, #16
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	493a      	ldr	r1, [pc, #232]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da6:	4b38      	ldr	r3, [pc, #224]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dac:	4a36      	ldr	r2, [pc, #216]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db6:	f7fd ffc3 	bl	8000d40 <HAL_GetTick>
 8002dba:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dbe:	f7fd ffbf 	bl	8000d40 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b11      	cmp	r3, #17
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e21b      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dd0:	4b2d      	ldr	r3, [pc, #180]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0ef      	beq.n	8002dbe <HAL_RCC_OscConfig+0x476>
 8002dde:	e01b      	b.n	8002e18 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de0:	4b29      	ldr	r3, [pc, #164]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de6:	4a28      	ldr	r2, [pc, #160]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df0:	f7fd ffa6 	bl	8000d40 <HAL_GetTick>
 8002df4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df8:	f7fd ffa2 	bl	8000d40 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b11      	cmp	r3, #17
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e1fe      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e0a:	4b1f      	ldr	r3, [pc, #124]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1ef      	bne.n	8002df8 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 80c1 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e2c:	4b16      	ldr	r3, [pc, #88]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10e      	bne.n	8002e56 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e38:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3c:	4a12      	ldr	r2, [pc, #72]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e42:	6593      	str	r3, [r2, #88]	; 0x58
 8002e44:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <HAL_RCC_OscConfig+0x540>)
 8002e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e50:	2301      	movs	r3, #1
 8002e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e56:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <HAL_RCC_OscConfig+0x544>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d11c      	bne.n	8002e9c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e62:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <HAL_RCC_OscConfig+0x544>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a09      	ldr	r2, [pc, #36]	; (8002e8c <HAL_RCC_OscConfig+0x544>)
 8002e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e6e:	f7fd ff67 	bl	8000d40 <HAL_GetTick>
 8002e72:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e74:	e00c      	b.n	8002e90 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e76:	f7fd ff63 	bl	8000d40 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d905      	bls.n	8002e90 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e1bf      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e90:	4bb1      	ldr	r3, [pc, #708]	; (8003158 <HAL_RCC_OscConfig+0x810>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0ec      	beq.n	8002e76 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d02c      	beq.n	8002f02 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002ea8:	4bac      	ldr	r3, [pc, #688]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8002eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eba:	49a8      	ldr	r1, [pc, #672]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d010      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ece:	4ba3      	ldr	r3, [pc, #652]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed4:	4aa1      	ldr	r2, [pc, #644]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8002ed6:	f043 0304 	orr.w	r3, r3, #4
 8002eda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ede:	4b9f      	ldr	r3, [pc, #636]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8002ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee4:	4a9d      	ldr	r2, [pc, #628]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eee:	e018      	b.n	8002f22 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ef0:	4b9a      	ldr	r3, [pc, #616]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	4a99      	ldr	r2, [pc, #612]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f00:	e00f      	b.n	8002f22 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f02:	4b96      	ldr	r3, [pc, #600]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8002f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f08:	4a94      	ldr	r2, [pc, #592]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8002f0a:	f023 0301 	bic.w	r3, r3, #1
 8002f0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f12:	4b92      	ldr	r3, [pc, #584]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f18:	4a90      	ldr	r2, [pc, #576]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8002f1a:	f023 0304 	bic.w	r3, r3, #4
 8002f1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d016      	beq.n	8002f58 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2a:	f7fd ff09 	bl	8000d40 <HAL_GetTick>
 8002f2e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f30:	e00a      	b.n	8002f48 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f32:	f7fd ff05 	bl	8000d40 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e15f      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f48:	4b84      	ldr	r3, [pc, #528]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8002f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0ed      	beq.n	8002f32 <HAL_RCC_OscConfig+0x5ea>
 8002f56:	e01d      	b.n	8002f94 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f58:	f7fd fef2 	bl	8000d40 <HAL_GetTick>
 8002f5c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f5e:	e00a      	b.n	8002f76 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f60:	f7fd feee 	bl	8000d40 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e148      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f76:	4b79      	ldr	r3, [pc, #484]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8002f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1ed      	bne.n	8002f60 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002f84:	4b75      	ldr	r3, [pc, #468]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8002f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8a:	4a74      	ldr	r2, [pc, #464]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8002f8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d105      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f9c:	4b6f      	ldr	r3, [pc, #444]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa0:	4a6e      	ldr	r2, [pc, #440]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8002fa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d03c      	beq.n	800302e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01c      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fbc:	4b67      	ldr	r3, [pc, #412]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8002fbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fc2:	4a66      	ldr	r2, [pc, #408]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fcc:	f7fd feb8 	bl	8000d40 <HAL_GetTick>
 8002fd0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fd4:	f7fd feb4 	bl	8000d40 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e110      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fe6:	4b5d      	ldr	r3, [pc, #372]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8002fe8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0ef      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x68c>
 8002ff4:	e01b      	b.n	800302e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ff6:	4b59      	ldr	r3, [pc, #356]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8002ff8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ffc:	4a57      	ldr	r2, [pc, #348]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003006:	f7fd fe9b 	bl	8000d40 <HAL_GetTick>
 800300a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800300e:	f7fd fe97 	bl	8000d40 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e0f3      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003020:	4b4e      	ldr	r3, [pc, #312]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8003022:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1ef      	bne.n	800300e <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 80e7 	beq.w	8003206 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	2b02      	cmp	r3, #2
 800303e:	f040 80b7 	bne.w	80031b0 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003042:	4b46      	ldr	r3, [pc, #280]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f003 0203 	and.w	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	429a      	cmp	r2, r3
 8003054:	d124      	bne.n	80030a0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003060:	3b01      	subs	r3, #1
 8003062:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003064:	429a      	cmp	r2, r3
 8003066:	d11b      	bne.n	80030a0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003072:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003074:	429a      	cmp	r2, r3
 8003076:	d113      	bne.n	80030a0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003082:	085b      	lsrs	r3, r3, #1
 8003084:	3b01      	subs	r3, #1
 8003086:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003088:	429a      	cmp	r2, r3
 800308a:	d109      	bne.n	80030a0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	085b      	lsrs	r3, r3, #1
 8003098:	3b01      	subs	r3, #1
 800309a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800309c:	429a      	cmp	r2, r3
 800309e:	d061      	beq.n	8003164 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	2b0c      	cmp	r3, #12
 80030a4:	d056      	beq.n	8003154 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030a6:	4b2d      	ldr	r3, [pc, #180]	; (800315c <HAL_RCC_OscConfig+0x814>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a2c      	ldr	r2, [pc, #176]	; (800315c <HAL_RCC_OscConfig+0x814>)
 80030ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030b2:	f7fd fe45 	bl	8000d40 <HAL_GetTick>
 80030b6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ba:	f7fd fe41 	bl	8000d40 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e09d      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030cc:	4b23      	ldr	r3, [pc, #140]	; (800315c <HAL_RCC_OscConfig+0x814>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f0      	bne.n	80030ba <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030d8:	4b20      	ldr	r3, [pc, #128]	; (800315c <HAL_RCC_OscConfig+0x814>)
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	4b20      	ldr	r3, [pc, #128]	; (8003160 <HAL_RCC_OscConfig+0x818>)
 80030de:	4013      	ands	r3, r2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030e8:	3a01      	subs	r2, #1
 80030ea:	0112      	lsls	r2, r2, #4
 80030ec:	4311      	orrs	r1, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030f2:	0212      	lsls	r2, r2, #8
 80030f4:	4311      	orrs	r1, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030fa:	0852      	lsrs	r2, r2, #1
 80030fc:	3a01      	subs	r2, #1
 80030fe:	0552      	lsls	r2, r2, #21
 8003100:	4311      	orrs	r1, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003106:	0852      	lsrs	r2, r2, #1
 8003108:	3a01      	subs	r2, #1
 800310a:	0652      	lsls	r2, r2, #25
 800310c:	430a      	orrs	r2, r1
 800310e:	4913      	ldr	r1, [pc, #76]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8003110:	4313      	orrs	r3, r2
 8003112:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003114:	4b11      	ldr	r3, [pc, #68]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a10      	ldr	r2, [pc, #64]	; (800315c <HAL_RCC_OscConfig+0x814>)
 800311a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800311e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003120:	4b0e      	ldr	r3, [pc, #56]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4a0d      	ldr	r2, [pc, #52]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8003126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800312a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800312c:	f7fd fe08 	bl	8000d40 <HAL_GetTick>
 8003130:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003134:	f7fd fe04 	bl	8000d40 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e060      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003146:	4b05      	ldr	r3, [pc, #20]	; (800315c <HAL_RCC_OscConfig+0x814>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0f0      	beq.n	8003134 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003152:	e058      	b.n	8003206 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e057      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
 8003158:	40007000 	.word	0x40007000
 800315c:	40021000 	.word	0x40021000
 8003160:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003164:	4b2a      	ldr	r3, [pc, #168]	; (8003210 <HAL_RCC_OscConfig+0x8c8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d14a      	bne.n	8003206 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003170:	4b27      	ldr	r3, [pc, #156]	; (8003210 <HAL_RCC_OscConfig+0x8c8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a26      	ldr	r2, [pc, #152]	; (8003210 <HAL_RCC_OscConfig+0x8c8>)
 8003176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800317a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800317c:	4b24      	ldr	r3, [pc, #144]	; (8003210 <HAL_RCC_OscConfig+0x8c8>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4a23      	ldr	r2, [pc, #140]	; (8003210 <HAL_RCC_OscConfig+0x8c8>)
 8003182:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003186:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003188:	f7fd fdda 	bl	8000d40 <HAL_GetTick>
 800318c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003190:	f7fd fdd6 	bl	8000d40 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e032      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a2:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <HAL_RCC_OscConfig+0x8c8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCC_OscConfig+0x848>
 80031ae:	e02a      	b.n	8003206 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	2b0c      	cmp	r3, #12
 80031b4:	d025      	beq.n	8003202 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b6:	4b16      	ldr	r3, [pc, #88]	; (8003210 <HAL_RCC_OscConfig+0x8c8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a15      	ldr	r2, [pc, #84]	; (8003210 <HAL_RCC_OscConfig+0x8c8>)
 80031bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031c0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80031c2:	4b13      	ldr	r3, [pc, #76]	; (8003210 <HAL_RCC_OscConfig+0x8c8>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	4a12      	ldr	r2, [pc, #72]	; (8003210 <HAL_RCC_OscConfig+0x8c8>)
 80031c8:	f023 0303 	bic.w	r3, r3, #3
 80031cc:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80031ce:	4b10      	ldr	r3, [pc, #64]	; (8003210 <HAL_RCC_OscConfig+0x8c8>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	4a0f      	ldr	r2, [pc, #60]	; (8003210 <HAL_RCC_OscConfig+0x8c8>)
 80031d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80031d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031da:	f7fd fdb1 	bl	8000d40 <HAL_GetTick>
 80031de:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e2:	f7fd fdad 	bl	8000d40 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e009      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_RCC_OscConfig+0x8c8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1f0      	bne.n	80031e2 <HAL_RCC_OscConfig+0x89a>
 8003200:	e001      	b.n	8003206 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3728      	adds	r7, #40	; 0x28
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40021000 	.word	0x40021000

08003214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0c8      	b.n	80033ba <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003228:	4b66      	ldr	r3, [pc, #408]	; (80033c4 <HAL_RCC_ClockConfig+0x1b0>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d910      	bls.n	8003258 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003236:	4b63      	ldr	r3, [pc, #396]	; (80033c4 <HAL_RCC_ClockConfig+0x1b0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 0207 	bic.w	r2, r3, #7
 800323e:	4961      	ldr	r1, [pc, #388]	; (80033c4 <HAL_RCC_ClockConfig+0x1b0>)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003246:	4b5f      	ldr	r3, [pc, #380]	; (80033c4 <HAL_RCC_ClockConfig+0x1b0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d001      	beq.n	8003258 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0b0      	b.n	80033ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d04c      	beq.n	80032fe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b03      	cmp	r3, #3
 800326a:	d107      	bne.n	800327c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800326c:	4b56      	ldr	r3, [pc, #344]	; (80033c8 <HAL_RCC_ClockConfig+0x1b4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d121      	bne.n	80032bc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e09e      	b.n	80033ba <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d107      	bne.n	8003294 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003284:	4b50      	ldr	r3, [pc, #320]	; (80033c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d115      	bne.n	80032bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e092      	b.n	80033ba <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d107      	bne.n	80032ac <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800329c:	4b4a      	ldr	r3, [pc, #296]	; (80033c8 <HAL_RCC_ClockConfig+0x1b4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d109      	bne.n	80032bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e086      	b.n	80033ba <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032ac:	4b46      	ldr	r3, [pc, #280]	; (80033c8 <HAL_RCC_ClockConfig+0x1b4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e07e      	b.n	80033ba <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032bc:	4b42      	ldr	r3, [pc, #264]	; (80033c8 <HAL_RCC_ClockConfig+0x1b4>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f023 0203 	bic.w	r2, r3, #3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	493f      	ldr	r1, [pc, #252]	; (80033c8 <HAL_RCC_ClockConfig+0x1b4>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ce:	f7fd fd37 	bl	8000d40 <HAL_GetTick>
 80032d2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d4:	e00a      	b.n	80032ec <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d6:	f7fd fd33 	bl	8000d40 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e066      	b.n	80033ba <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ec:	4b36      	ldr	r3, [pc, #216]	; (80033c8 <HAL_RCC_ClockConfig+0x1b4>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 020c 	and.w	r2, r3, #12
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d1eb      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d008      	beq.n	800331c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800330a:	4b2f      	ldr	r3, [pc, #188]	; (80033c8 <HAL_RCC_ClockConfig+0x1b4>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	492c      	ldr	r1, [pc, #176]	; (80033c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003318:	4313      	orrs	r3, r2
 800331a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800331c:	4b29      	ldr	r3, [pc, #164]	; (80033c4 <HAL_RCC_ClockConfig+0x1b0>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d210      	bcs.n	800334c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332a:	4b26      	ldr	r3, [pc, #152]	; (80033c4 <HAL_RCC_ClockConfig+0x1b0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f023 0207 	bic.w	r2, r3, #7
 8003332:	4924      	ldr	r1, [pc, #144]	; (80033c4 <HAL_RCC_ClockConfig+0x1b0>)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	4313      	orrs	r3, r2
 8003338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800333a:	4b22      	ldr	r3, [pc, #136]	; (80033c4 <HAL_RCC_ClockConfig+0x1b0>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e036      	b.n	80033ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	d008      	beq.n	800336a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003358:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <HAL_RCC_ClockConfig+0x1b4>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	4918      	ldr	r1, [pc, #96]	; (80033c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003366:	4313      	orrs	r3, r2
 8003368:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d009      	beq.n	800338a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003376:	4b14      	ldr	r3, [pc, #80]	; (80033c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	4910      	ldr	r1, [pc, #64]	; (80033c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003386:	4313      	orrs	r3, r2
 8003388:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800338a:	f000 f825 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 800338e:	4601      	mov	r1, r0
 8003390:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	4a0c      	ldr	r2, [pc, #48]	; (80033cc <HAL_RCC_ClockConfig+0x1b8>)
 800339c:	5cd3      	ldrb	r3, [r2, r3]
 800339e:	f003 031f 	and.w	r3, r3, #31
 80033a2:	fa21 f303 	lsr.w	r3, r1, r3
 80033a6:	4a0a      	ldr	r2, [pc, #40]	; (80033d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033aa:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <HAL_RCC_ClockConfig+0x1c0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fd fc76 	bl	8000ca0 <HAL_InitTick>
 80033b4:	4603      	mov	r3, r0
 80033b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80033b8:	7afb      	ldrb	r3, [r7, #11]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40022000 	.word	0x40022000
 80033c8:	40021000 	.word	0x40021000
 80033cc:	0800565c 	.word	0x0800565c
 80033d0:	20000000 	.word	0x20000000
 80033d4:	20000004 	.word	0x20000004

080033d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	b089      	sub	sp, #36	; 0x24
 80033dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	2300      	movs	r3, #0
 80033e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033e6:	4b3d      	ldr	r3, [pc, #244]	; (80034dc <HAL_RCC_GetSysClockFreq+0x104>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033f0:	4b3a      	ldr	r3, [pc, #232]	; (80034dc <HAL_RCC_GetSysClockFreq+0x104>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_RCC_GetSysClockFreq+0x34>
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	2b0c      	cmp	r3, #12
 8003404:	d121      	bne.n	800344a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d11e      	bne.n	800344a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800340c:	4b33      	ldr	r3, [pc, #204]	; (80034dc <HAL_RCC_GetSysClockFreq+0x104>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d107      	bne.n	8003428 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003418:	4b30      	ldr	r3, [pc, #192]	; (80034dc <HAL_RCC_GetSysClockFreq+0x104>)
 800341a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800341e:	0a1b      	lsrs	r3, r3, #8
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	61fb      	str	r3, [r7, #28]
 8003426:	e005      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003428:	4b2c      	ldr	r3, [pc, #176]	; (80034dc <HAL_RCC_GetSysClockFreq+0x104>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003434:	4a2a      	ldr	r2, [pc, #168]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10d      	bne.n	8003460 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003448:	e00a      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b04      	cmp	r3, #4
 800344e:	d102      	bne.n	8003456 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003450:	4b24      	ldr	r3, [pc, #144]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003452:	61bb      	str	r3, [r7, #24]
 8003454:	e004      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	2b08      	cmp	r3, #8
 800345a:	d101      	bne.n	8003460 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800345c:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x110>)
 800345e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	2b0c      	cmp	r3, #12
 8003464:	d133      	bne.n	80034ce <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003466:	4b1d      	ldr	r3, [pc, #116]	; (80034dc <HAL_RCC_GetSysClockFreq+0x104>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d002      	beq.n	800347c <HAL_RCC_GetSysClockFreq+0xa4>
 8003476:	2b03      	cmp	r3, #3
 8003478:	d003      	beq.n	8003482 <HAL_RCC_GetSysClockFreq+0xaa>
 800347a:	e005      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800347c:	4b19      	ldr	r3, [pc, #100]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800347e:	617b      	str	r3, [r7, #20]
      break;
 8003480:	e005      	b.n	800348e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003482:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003484:	617b      	str	r3, [r7, #20]
      break;
 8003486:	e002      	b.n	800348e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	617b      	str	r3, [r7, #20]
      break;
 800348c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800348e:	4b13      	ldr	r3, [pc, #76]	; (80034dc <HAL_RCC_GetSysClockFreq+0x104>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	3301      	adds	r3, #1
 800349a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800349c:	4b0f      	ldr	r3, [pc, #60]	; (80034dc <HAL_RCC_GetSysClockFreq+0x104>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	0a1b      	lsrs	r3, r3, #8
 80034a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	fb02 f203 	mul.w	r2, r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034b4:	4b09      	ldr	r3, [pc, #36]	; (80034dc <HAL_RCC_GetSysClockFreq+0x104>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	0e5b      	lsrs	r3, r3, #25
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	3301      	adds	r3, #1
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034cc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034ce:	69bb      	ldr	r3, [r7, #24]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3724      	adds	r7, #36	; 0x24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	40021000 	.word	0x40021000
 80034e0:	08005674 	.word	0x08005674
 80034e4:	00f42400 	.word	0x00f42400
 80034e8:	007a1200 	.word	0x007a1200

080034ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034f0:	4b03      	ldr	r3, [pc, #12]	; (8003500 <HAL_RCC_GetHCLKFreq+0x14>)
 80034f2:	681b      	ldr	r3, [r3, #0]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	20000000 	.word	0x20000000

08003504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003508:	f7ff fff0 	bl	80034ec <HAL_RCC_GetHCLKFreq>
 800350c:	4601      	mov	r1, r0
 800350e:	4b06      	ldr	r3, [pc, #24]	; (8003528 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	0a1b      	lsrs	r3, r3, #8
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	4a04      	ldr	r2, [pc, #16]	; (800352c <HAL_RCC_GetPCLK1Freq+0x28>)
 800351a:	5cd3      	ldrb	r3, [r2, r3]
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003524:	4618      	mov	r0, r3
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40021000 	.word	0x40021000
 800352c:	0800566c 	.word	0x0800566c

08003530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003534:	f7ff ffda 	bl	80034ec <HAL_RCC_GetHCLKFreq>
 8003538:	4601      	mov	r1, r0
 800353a:	4b06      	ldr	r3, [pc, #24]	; (8003554 <HAL_RCC_GetPCLK2Freq+0x24>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	0adb      	lsrs	r3, r3, #11
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	4a04      	ldr	r2, [pc, #16]	; (8003558 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003546:	5cd3      	ldrb	r3, [r2, r3]
 8003548:	f003 031f 	and.w	r3, r3, #31
 800354c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003550:	4618      	mov	r0, r3
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40021000 	.word	0x40021000
 8003558:	0800566c 	.word	0x0800566c

0800355c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003564:	2300      	movs	r3, #0
 8003566:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003568:	4b2a      	ldr	r3, [pc, #168]	; (8003614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800356a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003574:	f7ff f984 	bl	8002880 <HAL_PWREx_GetVoltageRange>
 8003578:	6178      	str	r0, [r7, #20]
 800357a:	e014      	b.n	80035a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800357c:	4b25      	ldr	r3, [pc, #148]	; (8003614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003580:	4a24      	ldr	r2, [pc, #144]	; (8003614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003586:	6593      	str	r3, [r2, #88]	; 0x58
 8003588:	4b22      	ldr	r3, [pc, #136]	; (8003614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800358a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003594:	f7ff f974 	bl	8002880 <HAL_PWREx_GetVoltageRange>
 8003598:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800359a:	4b1e      	ldr	r3, [pc, #120]	; (8003614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800359c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359e:	4a1d      	ldr	r2, [pc, #116]	; (8003614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ac:	d10b      	bne.n	80035c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b80      	cmp	r3, #128	; 0x80
 80035b2:	d919      	bls.n	80035e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2ba0      	cmp	r3, #160	; 0xa0
 80035b8:	d902      	bls.n	80035c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035ba:	2302      	movs	r3, #2
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	e013      	b.n	80035e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035c0:	2301      	movs	r3, #1
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	e010      	b.n	80035e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b80      	cmp	r3, #128	; 0x80
 80035ca:	d902      	bls.n	80035d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035cc:	2303      	movs	r3, #3
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	e00a      	b.n	80035e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b80      	cmp	r3, #128	; 0x80
 80035d6:	d102      	bne.n	80035de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035d8:	2302      	movs	r3, #2
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	e004      	b.n	80035e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b70      	cmp	r3, #112	; 0x70
 80035e2:	d101      	bne.n	80035e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035e4:	2301      	movs	r3, #1
 80035e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f023 0207 	bic.w	r2, r3, #7
 80035f0:	4909      	ldr	r1, [pc, #36]	; (8003618 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035f8:	4b07      	ldr	r3, [pc, #28]	; (8003618 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	429a      	cmp	r2, r3
 8003604:	d001      	beq.n	800360a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40021000 	.word	0x40021000
 8003618:	40022000 	.word	0x40022000

0800361c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003624:	2300      	movs	r3, #0
 8003626:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003628:	2300      	movs	r3, #0
 800362a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 809e 	beq.w	8003776 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800363a:	2300      	movs	r3, #0
 800363c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800363e:	4b46      	ldr	r3, [pc, #280]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800364e:	2300      	movs	r3, #0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00d      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003654:	4b40      	ldr	r3, [pc, #256]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003658:	4a3f      	ldr	r2, [pc, #252]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800365a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365e:	6593      	str	r3, [r2, #88]	; 0x58
 8003660:	4b3d      	ldr	r3, [pc, #244]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003668:	60bb      	str	r3, [r7, #8]
 800366a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800366c:	2301      	movs	r3, #1
 800366e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003670:	4b3a      	ldr	r3, [pc, #232]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a39      	ldr	r2, [pc, #228]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800367a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800367c:	f7fd fb60 	bl	8000d40 <HAL_GetTick>
 8003680:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003682:	e009      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003684:	f7fd fb5c 	bl	8000d40 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d902      	bls.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	74fb      	strb	r3, [r7, #19]
        break;
 8003696:	e005      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003698:	4b30      	ldr	r3, [pc, #192]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0ef      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80036a4:	7cfb      	ldrb	r3, [r7, #19]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d15a      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036aa:	4b2b      	ldr	r3, [pc, #172]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80036ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01e      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xde>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d019      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036c6:	4b24      	ldr	r3, [pc, #144]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80036c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036d2:	4b21      	ldr	r3, [pc, #132]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80036d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d8:	4a1f      	ldr	r2, [pc, #124]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80036da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036e2:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80036e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e8:	4a1b      	ldr	r2, [pc, #108]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80036ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036f2:	4a19      	ldr	r2, [pc, #100]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	d016      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003704:	f7fd fb1c 	bl	8000d40 <HAL_GetTick>
 8003708:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800370a:	e00b      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370c:	f7fd fb18 	bl	8000d40 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	f241 3288 	movw	r2, #5000	; 0x1388
 800371a:	4293      	cmp	r3, r2
 800371c:	d902      	bls.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	74fb      	strb	r3, [r7, #19]
            break;
 8003722:	e006      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003724:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0ec      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003732:	7cfb      	ldrb	r3, [r7, #19]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10b      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003738:	4b07      	ldr	r3, [pc, #28]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	4904      	ldr	r1, [pc, #16]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800374e:	e009      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003750:	7cfb      	ldrb	r3, [r7, #19]
 8003752:	74bb      	strb	r3, [r7, #18]
 8003754:	e006      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000
 800375c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003764:	7c7b      	ldrb	r3, [r7, #17]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d105      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376a:	4b6e      	ldr	r3, [pc, #440]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800376c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376e:	4a6d      	ldr	r2, [pc, #436]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003774:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003782:	4b68      	ldr	r3, [pc, #416]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003788:	f023 0203 	bic.w	r2, r3, #3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	4964      	ldr	r1, [pc, #400]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037a4:	4b5f      	ldr	r3, [pc, #380]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037aa:	f023 020c 	bic.w	r2, r3, #12
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	495c      	ldr	r1, [pc, #368]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037c6:	4b57      	ldr	r3, [pc, #348]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	4953      	ldr	r1, [pc, #332]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037e8:	4b4e      	ldr	r3, [pc, #312]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	494b      	ldr	r1, [pc, #300]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800380a:	4b46      	ldr	r3, [pc, #280]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003810:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	4942      	ldr	r1, [pc, #264]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00a      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800382c:	4b3d      	ldr	r3, [pc, #244]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003832:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	493a      	ldr	r1, [pc, #232]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800384e:	4b35      	ldr	r3, [pc, #212]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003854:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	4931      	ldr	r1, [pc, #196]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003870:	4b2c      	ldr	r3, [pc, #176]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003876:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	4929      	ldr	r1, [pc, #164]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003892:	4b24      	ldr	r3, [pc, #144]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003898:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	4920      	ldr	r1, [pc, #128]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d015      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038b4:	4b1b      	ldr	r3, [pc, #108]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c2:	4918      	ldr	r1, [pc, #96]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038d2:	d105      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038d4:	4b13      	ldr	r3, [pc, #76]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	4a12      	ldr	r2, [pc, #72]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038de:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d015      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038ec:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	490a      	ldr	r1, [pc, #40]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800390a:	d105      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800390c:	4b05      	ldr	r3, [pc, #20]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	4a04      	ldr	r2, [pc, #16]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003916:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003918:	7cbb      	ldrb	r3, [r7, #18]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40021000 	.word	0x40021000

08003928 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e040      	b.n	80039bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fd f8ec 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2224      	movs	r2, #36	; 0x24
 8003954:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0201 	bic.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f8c0 	bl	8003aec <UART_SetConfig>
 800396c:	4603      	mov	r3, r0
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e022      	b.n	80039bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 faea 	bl	8003f58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003992:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fb71 	bl	800409c <UART_CheckIdleState>
 80039ba:	4603      	mov	r3, r0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b08a      	sub	sp, #40	; 0x28
 80039c8:	af02      	add	r7, sp, #8
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	4613      	mov	r3, r2
 80039d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d8:	2b20      	cmp	r3, #32
 80039da:	f040 8081 	bne.w	8003ae0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <HAL_UART_Transmit+0x26>
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e079      	b.n	8003ae2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_UART_Transmit+0x38>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e072      	b.n	8003ae2 <HAL_UART_Transmit+0x11e>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2221      	movs	r2, #33	; 0x21
 8003a0e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003a10:	f7fd f996 	bl	8000d40 <HAL_GetTick>
 8003a14:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	88fa      	ldrh	r2, [r7, #6]
 8003a1a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	88fa      	ldrh	r2, [r7, #6]
 8003a22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2e:	d108      	bne.n	8003a42 <HAL_UART_Transmit+0x7e>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d104      	bne.n	8003a42 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	61bb      	str	r3, [r7, #24]
 8003a40:	e003      	b.n	8003a4a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003a52:	e02d      	b.n	8003ab0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2180      	movs	r1, #128	; 0x80
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 fb61 	bl	8004126 <UART_WaitOnFlagUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e039      	b.n	8003ae2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10b      	bne.n	8003a8c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	881a      	ldrh	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a80:	b292      	uxth	r2, r2
 8003a82:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	3302      	adds	r3, #2
 8003a88:	61bb      	str	r3, [r7, #24]
 8003a8a:	e008      	b.n	8003a9e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	781a      	ldrb	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	b292      	uxth	r2, r2
 8003a96:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1cb      	bne.n	8003a54 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2140      	movs	r1, #64	; 0x40
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 fb2d 	bl	8004126 <UART_WaitOnFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e005      	b.n	8003ae2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	e000      	b.n	8003ae2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003ae0:	2302      	movs	r3, #2
  }
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3720      	adds	r7, #32
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aec:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003af0:	b088      	sub	sp, #32
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	4baa      	ldr	r3, [pc, #680]	; (8003dc4 <UART_SetConfig+0x2d8>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6812      	ldr	r2, [r2, #0]
 8003b20:	69f9      	ldr	r1, [r7, #28]
 8003b22:	430b      	orrs	r3, r1
 8003b24:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4aa0      	ldr	r2, [pc, #640]	; (8003dc8 <UART_SetConfig+0x2dc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d004      	beq.n	8003b56 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	69fa      	ldr	r2, [r7, #28]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a97      	ldr	r2, [pc, #604]	; (8003dcc <UART_SetConfig+0x2e0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d121      	bne.n	8003bb8 <UART_SetConfig+0xcc>
 8003b74:	4b96      	ldr	r3, [pc, #600]	; (8003dd0 <UART_SetConfig+0x2e4>)
 8003b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	d816      	bhi.n	8003bb0 <UART_SetConfig+0xc4>
 8003b82:	a201      	add	r2, pc, #4	; (adr r2, 8003b88 <UART_SetConfig+0x9c>)
 8003b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b88:	08003b99 	.word	0x08003b99
 8003b8c:	08003ba5 	.word	0x08003ba5
 8003b90:	08003b9f 	.word	0x08003b9f
 8003b94:	08003bab 	.word	0x08003bab
 8003b98:	2301      	movs	r3, #1
 8003b9a:	76fb      	strb	r3, [r7, #27]
 8003b9c:	e098      	b.n	8003cd0 <UART_SetConfig+0x1e4>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	76fb      	strb	r3, [r7, #27]
 8003ba2:	e095      	b.n	8003cd0 <UART_SetConfig+0x1e4>
 8003ba4:	2304      	movs	r3, #4
 8003ba6:	76fb      	strb	r3, [r7, #27]
 8003ba8:	e092      	b.n	8003cd0 <UART_SetConfig+0x1e4>
 8003baa:	2308      	movs	r3, #8
 8003bac:	76fb      	strb	r3, [r7, #27]
 8003bae:	e08f      	b.n	8003cd0 <UART_SetConfig+0x1e4>
 8003bb0:	2310      	movs	r3, #16
 8003bb2:	76fb      	strb	r3, [r7, #27]
 8003bb4:	bf00      	nop
 8003bb6:	e08b      	b.n	8003cd0 <UART_SetConfig+0x1e4>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a85      	ldr	r2, [pc, #532]	; (8003dd4 <UART_SetConfig+0x2e8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d134      	bne.n	8003c2c <UART_SetConfig+0x140>
 8003bc2:	4b83      	ldr	r3, [pc, #524]	; (8003dd0 <UART_SetConfig+0x2e4>)
 8003bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc8:	f003 030c 	and.w	r3, r3, #12
 8003bcc:	2b0c      	cmp	r3, #12
 8003bce:	d829      	bhi.n	8003c24 <UART_SetConfig+0x138>
 8003bd0:	a201      	add	r2, pc, #4	; (adr r2, 8003bd8 <UART_SetConfig+0xec>)
 8003bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd6:	bf00      	nop
 8003bd8:	08003c0d 	.word	0x08003c0d
 8003bdc:	08003c25 	.word	0x08003c25
 8003be0:	08003c25 	.word	0x08003c25
 8003be4:	08003c25 	.word	0x08003c25
 8003be8:	08003c19 	.word	0x08003c19
 8003bec:	08003c25 	.word	0x08003c25
 8003bf0:	08003c25 	.word	0x08003c25
 8003bf4:	08003c25 	.word	0x08003c25
 8003bf8:	08003c13 	.word	0x08003c13
 8003bfc:	08003c25 	.word	0x08003c25
 8003c00:	08003c25 	.word	0x08003c25
 8003c04:	08003c25 	.word	0x08003c25
 8003c08:	08003c1f 	.word	0x08003c1f
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	76fb      	strb	r3, [r7, #27]
 8003c10:	e05e      	b.n	8003cd0 <UART_SetConfig+0x1e4>
 8003c12:	2302      	movs	r3, #2
 8003c14:	76fb      	strb	r3, [r7, #27]
 8003c16:	e05b      	b.n	8003cd0 <UART_SetConfig+0x1e4>
 8003c18:	2304      	movs	r3, #4
 8003c1a:	76fb      	strb	r3, [r7, #27]
 8003c1c:	e058      	b.n	8003cd0 <UART_SetConfig+0x1e4>
 8003c1e:	2308      	movs	r3, #8
 8003c20:	76fb      	strb	r3, [r7, #27]
 8003c22:	e055      	b.n	8003cd0 <UART_SetConfig+0x1e4>
 8003c24:	2310      	movs	r3, #16
 8003c26:	76fb      	strb	r3, [r7, #27]
 8003c28:	bf00      	nop
 8003c2a:	e051      	b.n	8003cd0 <UART_SetConfig+0x1e4>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a69      	ldr	r2, [pc, #420]	; (8003dd8 <UART_SetConfig+0x2ec>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d120      	bne.n	8003c78 <UART_SetConfig+0x18c>
 8003c36:	4b66      	ldr	r3, [pc, #408]	; (8003dd0 <UART_SetConfig+0x2e4>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c40:	2b10      	cmp	r3, #16
 8003c42:	d00f      	beq.n	8003c64 <UART_SetConfig+0x178>
 8003c44:	2b10      	cmp	r3, #16
 8003c46:	d802      	bhi.n	8003c4e <UART_SetConfig+0x162>
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <UART_SetConfig+0x16c>
 8003c4c:	e010      	b.n	8003c70 <UART_SetConfig+0x184>
 8003c4e:	2b20      	cmp	r3, #32
 8003c50:	d005      	beq.n	8003c5e <UART_SetConfig+0x172>
 8003c52:	2b30      	cmp	r3, #48	; 0x30
 8003c54:	d009      	beq.n	8003c6a <UART_SetConfig+0x17e>
 8003c56:	e00b      	b.n	8003c70 <UART_SetConfig+0x184>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	76fb      	strb	r3, [r7, #27]
 8003c5c:	e038      	b.n	8003cd0 <UART_SetConfig+0x1e4>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	76fb      	strb	r3, [r7, #27]
 8003c62:	e035      	b.n	8003cd0 <UART_SetConfig+0x1e4>
 8003c64:	2304      	movs	r3, #4
 8003c66:	76fb      	strb	r3, [r7, #27]
 8003c68:	e032      	b.n	8003cd0 <UART_SetConfig+0x1e4>
 8003c6a:	2308      	movs	r3, #8
 8003c6c:	76fb      	strb	r3, [r7, #27]
 8003c6e:	e02f      	b.n	8003cd0 <UART_SetConfig+0x1e4>
 8003c70:	2310      	movs	r3, #16
 8003c72:	76fb      	strb	r3, [r7, #27]
 8003c74:	bf00      	nop
 8003c76:	e02b      	b.n	8003cd0 <UART_SetConfig+0x1e4>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a52      	ldr	r2, [pc, #328]	; (8003dc8 <UART_SetConfig+0x2dc>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d124      	bne.n	8003ccc <UART_SetConfig+0x1e0>
 8003c82:	4b53      	ldr	r3, [pc, #332]	; (8003dd0 <UART_SetConfig+0x2e4>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c90:	d012      	beq.n	8003cb8 <UART_SetConfig+0x1cc>
 8003c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c96:	d802      	bhi.n	8003c9e <UART_SetConfig+0x1b2>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d007      	beq.n	8003cac <UART_SetConfig+0x1c0>
 8003c9c:	e012      	b.n	8003cc4 <UART_SetConfig+0x1d8>
 8003c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca2:	d006      	beq.n	8003cb2 <UART_SetConfig+0x1c6>
 8003ca4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ca8:	d009      	beq.n	8003cbe <UART_SetConfig+0x1d2>
 8003caa:	e00b      	b.n	8003cc4 <UART_SetConfig+0x1d8>
 8003cac:	2300      	movs	r3, #0
 8003cae:	76fb      	strb	r3, [r7, #27]
 8003cb0:	e00e      	b.n	8003cd0 <UART_SetConfig+0x1e4>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	76fb      	strb	r3, [r7, #27]
 8003cb6:	e00b      	b.n	8003cd0 <UART_SetConfig+0x1e4>
 8003cb8:	2304      	movs	r3, #4
 8003cba:	76fb      	strb	r3, [r7, #27]
 8003cbc:	e008      	b.n	8003cd0 <UART_SetConfig+0x1e4>
 8003cbe:	2308      	movs	r3, #8
 8003cc0:	76fb      	strb	r3, [r7, #27]
 8003cc2:	e005      	b.n	8003cd0 <UART_SetConfig+0x1e4>
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	76fb      	strb	r3, [r7, #27]
 8003cc8:	bf00      	nop
 8003cca:	e001      	b.n	8003cd0 <UART_SetConfig+0x1e4>
 8003ccc:	2310      	movs	r3, #16
 8003cce:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a3c      	ldr	r2, [pc, #240]	; (8003dc8 <UART_SetConfig+0x2dc>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	f040 8082 	bne.w	8003de0 <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cdc:	7efb      	ldrb	r3, [r7, #27]
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d823      	bhi.n	8003d2a <UART_SetConfig+0x23e>
 8003ce2:	a201      	add	r2, pc, #4	; (adr r2, 8003ce8 <UART_SetConfig+0x1fc>)
 8003ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce8:	08003d0d 	.word	0x08003d0d
 8003cec:	08003d2b 	.word	0x08003d2b
 8003cf0:	08003d15 	.word	0x08003d15
 8003cf4:	08003d2b 	.word	0x08003d2b
 8003cf8:	08003d1b 	.word	0x08003d1b
 8003cfc:	08003d2b 	.word	0x08003d2b
 8003d00:	08003d2b 	.word	0x08003d2b
 8003d04:	08003d2b 	.word	0x08003d2b
 8003d08:	08003d23 	.word	0x08003d23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d0c:	f7ff fbfa 	bl	8003504 <HAL_RCC_GetPCLK1Freq>
 8003d10:	6178      	str	r0, [r7, #20]
        break;
 8003d12:	e00f      	b.n	8003d34 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d14:	4b31      	ldr	r3, [pc, #196]	; (8003ddc <UART_SetConfig+0x2f0>)
 8003d16:	617b      	str	r3, [r7, #20]
        break;
 8003d18:	e00c      	b.n	8003d34 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d1a:	f7ff fb5d 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8003d1e:	6178      	str	r0, [r7, #20]
        break;
 8003d20:	e008      	b.n	8003d34 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d26:	617b      	str	r3, [r7, #20]
        break;
 8003d28:	e004      	b.n	8003d34 <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	76bb      	strb	r3, [r7, #26]
        break;
 8003d32:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 8100 	beq.w	8003f3c <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	4413      	add	r3, r2
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d305      	bcc.n	8003d58 <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d902      	bls.n	8003d5e <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	76bb      	strb	r3, [r7, #26]
 8003d5c:	e0ee      	b.n	8003f3c <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	4619      	mov	r1, r3
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	f04f 0300 	mov.w	r3, #0
 8003d6a:	f04f 0400 	mov.w	r4, #0
 8003d6e:	0214      	lsls	r4, r2, #8
 8003d70:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003d74:	020b      	lsls	r3, r1, #8
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6852      	ldr	r2, [r2, #4]
 8003d7a:	0852      	lsrs	r2, r2, #1
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	eb13 0b01 	adds.w	fp, r3, r1
 8003d86:	eb44 0c02 	adc.w	ip, r4, r2
 8003d8a:	4658      	mov	r0, fp
 8003d8c:	4661      	mov	r1, ip
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f04f 0400 	mov.w	r4, #0
 8003d96:	461a      	mov	r2, r3
 8003d98:	4623      	mov	r3, r4
 8003d9a:	f7fc fa71 	bl	8000280 <__aeabi_uldivmod>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	460c      	mov	r4, r1
 8003da2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003daa:	d308      	bcc.n	8003dbe <UART_SetConfig+0x2d2>
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003db2:	d204      	bcs.n	8003dbe <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	60da      	str	r2, [r3, #12]
 8003dbc:	e0be      	b.n	8003f3c <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	76bb      	strb	r3, [r7, #26]
 8003dc2:	e0bb      	b.n	8003f3c <UART_SetConfig+0x450>
 8003dc4:	efff69f3 	.word	0xefff69f3
 8003dc8:	40008000 	.word	0x40008000
 8003dcc:	40013800 	.word	0x40013800
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40004400 	.word	0x40004400
 8003dd8:	40004800 	.word	0x40004800
 8003ddc:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de8:	d15c      	bne.n	8003ea4 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8003dea:	7efb      	ldrb	r3, [r7, #27]
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d828      	bhi.n	8003e42 <UART_SetConfig+0x356>
 8003df0:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <UART_SetConfig+0x30c>)
 8003df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df6:	bf00      	nop
 8003df8:	08003e1d 	.word	0x08003e1d
 8003dfc:	08003e25 	.word	0x08003e25
 8003e00:	08003e2d 	.word	0x08003e2d
 8003e04:	08003e43 	.word	0x08003e43
 8003e08:	08003e33 	.word	0x08003e33
 8003e0c:	08003e43 	.word	0x08003e43
 8003e10:	08003e43 	.word	0x08003e43
 8003e14:	08003e43 	.word	0x08003e43
 8003e18:	08003e3b 	.word	0x08003e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e1c:	f7ff fb72 	bl	8003504 <HAL_RCC_GetPCLK1Freq>
 8003e20:	6178      	str	r0, [r7, #20]
        break;
 8003e22:	e013      	b.n	8003e4c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e24:	f7ff fb84 	bl	8003530 <HAL_RCC_GetPCLK2Freq>
 8003e28:	6178      	str	r0, [r7, #20]
        break;
 8003e2a:	e00f      	b.n	8003e4c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e2c:	4b49      	ldr	r3, [pc, #292]	; (8003f54 <UART_SetConfig+0x468>)
 8003e2e:	617b      	str	r3, [r7, #20]
        break;
 8003e30:	e00c      	b.n	8003e4c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e32:	f7ff fad1 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8003e36:	6178      	str	r0, [r7, #20]
        break;
 8003e38:	e008      	b.n	8003e4c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e3e:	617b      	str	r3, [r7, #20]
        break;
 8003e40:	e004      	b.n	8003e4c <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	76bb      	strb	r3, [r7, #26]
        break;
 8003e4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d074      	beq.n	8003f3c <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	005a      	lsls	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	085b      	lsrs	r3, r3, #1
 8003e5c:	441a      	add	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b0f      	cmp	r3, #15
 8003e6e:	d916      	bls.n	8003e9e <UART_SetConfig+0x3b2>
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e76:	d212      	bcs.n	8003e9e <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	f023 030f 	bic.w	r3, r3, #15
 8003e80:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	085b      	lsrs	r3, r3, #1
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	89fb      	ldrh	r3, [r7, #14]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	89fa      	ldrh	r2, [r7, #14]
 8003e9a:	60da      	str	r2, [r3, #12]
 8003e9c:	e04e      	b.n	8003f3c <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	76bb      	strb	r3, [r7, #26]
 8003ea2:	e04b      	b.n	8003f3c <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ea4:	7efb      	ldrb	r3, [r7, #27]
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d827      	bhi.n	8003efa <UART_SetConfig+0x40e>
 8003eaa:	a201      	add	r2, pc, #4	; (adr r2, 8003eb0 <UART_SetConfig+0x3c4>)
 8003eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb0:	08003ed5 	.word	0x08003ed5
 8003eb4:	08003edd 	.word	0x08003edd
 8003eb8:	08003ee5 	.word	0x08003ee5
 8003ebc:	08003efb 	.word	0x08003efb
 8003ec0:	08003eeb 	.word	0x08003eeb
 8003ec4:	08003efb 	.word	0x08003efb
 8003ec8:	08003efb 	.word	0x08003efb
 8003ecc:	08003efb 	.word	0x08003efb
 8003ed0:	08003ef3 	.word	0x08003ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ed4:	f7ff fb16 	bl	8003504 <HAL_RCC_GetPCLK1Freq>
 8003ed8:	6178      	str	r0, [r7, #20]
        break;
 8003eda:	e013      	b.n	8003f04 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003edc:	f7ff fb28 	bl	8003530 <HAL_RCC_GetPCLK2Freq>
 8003ee0:	6178      	str	r0, [r7, #20]
        break;
 8003ee2:	e00f      	b.n	8003f04 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ee4:	4b1b      	ldr	r3, [pc, #108]	; (8003f54 <UART_SetConfig+0x468>)
 8003ee6:	617b      	str	r3, [r7, #20]
        break;
 8003ee8:	e00c      	b.n	8003f04 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eea:	f7ff fa75 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8003eee:	6178      	str	r0, [r7, #20]
        break;
 8003ef0:	e008      	b.n	8003f04 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ef6:	617b      	str	r3, [r7, #20]
        break;
 8003ef8:	e004      	b.n	8003f04 <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	76bb      	strb	r3, [r7, #26]
        break;
 8003f02:	bf00      	nop
    }

    if (pclk != 0U)
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d018      	beq.n	8003f3c <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	085a      	lsrs	r2, r3, #1
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	441a      	add	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	2b0f      	cmp	r3, #15
 8003f24:	d908      	bls.n	8003f38 <UART_SetConfig+0x44c>
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2c:	d204      	bcs.n	8003f38 <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	60da      	str	r2, [r3, #12]
 8003f36:	e001      	b.n	8003f3c <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003f48:	7ebb      	ldrb	r3, [r7, #26]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3720      	adds	r7, #32
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003f54:	00f42400 	.word	0x00f42400

08003f58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	f003 0310 	and.w	r3, r3, #16
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01a      	beq.n	800406e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004056:	d10a      	bne.n	800406e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	605a      	str	r2, [r3, #4]
  }
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80040aa:	f7fc fe49 	bl	8000d40 <HAL_GetTick>
 80040ae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b08      	cmp	r3, #8
 80040bc:	d10e      	bne.n	80040dc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f82a 	bl	8004126 <UART_WaitOnFlagUntilTimeout>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e020      	b.n	800411e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d10e      	bne.n	8004108 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f814 	bl	8004126 <UART_WaitOnFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e00a      	b.n	800411e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2220      	movs	r2, #32
 8004112:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b084      	sub	sp, #16
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	603b      	str	r3, [r7, #0]
 8004132:	4613      	mov	r3, r2
 8004134:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004136:	e05d      	b.n	80041f4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413e:	d059      	beq.n	80041f4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004140:	f7fc fdfe 	bl	8000d40 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	429a      	cmp	r2, r3
 800414e:	d302      	bcc.n	8004156 <UART_WaitOnFlagUntilTimeout+0x30>
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d11b      	bne.n	800418e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004164:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0201 	bic.w	r2, r2, #1
 8004174:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2220      	movs	r2, #32
 800417a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2220      	movs	r2, #32
 8004180:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e042      	b.n	8004214 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d02b      	beq.n	80041f4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041aa:	d123      	bne.n	80041f4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041c4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0201 	bic.w	r2, r2, #1
 80041d4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2220      	movs	r2, #32
 80041da:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2220      	movs	r2, #32
 80041e6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e00f      	b.n	8004214 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69da      	ldr	r2, [r3, #28]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	4013      	ands	r3, r2
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	429a      	cmp	r2, r3
 8004202:	bf0c      	ite	eq
 8004204:	2301      	moveq	r3, #1
 8004206:	2300      	movne	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	461a      	mov	r2, r3
 800420c:	79fb      	ldrb	r3, [r7, #7]
 800420e:	429a      	cmp	r2, r3
 8004210:	d092      	beq.n	8004138 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <MAX30100_Init>:
uint8_t _max30100_red_current;
uint8_t _max30100_ir_current_prev;
uint8_t _max30100_red_current_prev;
float _max30100_temp;

void MAX30100_Init(I2C_HandleTypeDef *ui2c, UART_HandleTypeDef *uuart){
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
	_max30100_ui2c = ui2c;
 8004226:	4a07      	ldr	r2, [pc, #28]	; (8004244 <MAX30100_Init+0x28>)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6013      	str	r3, [r2, #0]
	_max30100_uuart = uuart;
 800422c:	4a06      	ldr	r2, [pc, #24]	; (8004248 <MAX30100_Init+0x2c>)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	6013      	str	r3, [r2, #0]
	MAX30100_Stop();
 8004232:	f000 f9f7 	bl	8004624 <MAX30100_Stop>
	MAX30100_ClearFIFO();
 8004236:	f000 f92f 	bl	8004498 <MAX30100_ClearFIFO>
}
 800423a:	bf00      	nop
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	2000016c 	.word	0x2000016c
 8004248:	20000198 	.word	0x20000198

0800424c <MAX30100_ReadReg>:

uint8_t MAX30100_ReadReg(uint8_t regAddr){
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af02      	add	r7, sp, #8
 8004252:	4603      	mov	r3, r0
 8004254:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = regAddr, result;
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(_max30100_ui2c, MAX30100_I2C_ADDR, &reg, 1, MAX30100_TIMEOUT);
 800425a:	4b0d      	ldr	r3, [pc, #52]	; (8004290 <MAX30100_ReadReg+0x44>)
 800425c:	6818      	ldr	r0, [r3, #0]
 800425e:	f107 020f 	add.w	r2, r7, #15
 8004262:	f04f 33ff 	mov.w	r3, #4294967295
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	2301      	movs	r3, #1
 800426a:	21ae      	movs	r1, #174	; 0xae
 800426c:	f7fd f932 	bl	80014d4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_max30100_ui2c, MAX30100_I2C_ADDR, &result, 1, MAX30100_TIMEOUT);
 8004270:	4b07      	ldr	r3, [pc, #28]	; (8004290 <MAX30100_ReadReg+0x44>)
 8004272:	6818      	ldr	r0, [r3, #0]
 8004274:	f107 020e 	add.w	r2, r7, #14
 8004278:	f04f 33ff 	mov.w	r3, #4294967295
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	2301      	movs	r3, #1
 8004280:	21ae      	movs	r1, #174	; 0xae
 8004282:	f7fd fa1b 	bl	80016bc <HAL_I2C_Master_Receive>
	return result;
 8004286:	7bbb      	ldrb	r3, [r7, #14]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	2000016c 	.word	0x2000016c

08004294 <MAX30100_WriteReg>:

void MAX30100_WriteReg(uint8_t regAddr, uint8_t byte){
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af02      	add	r7, sp, #8
 800429a:	4603      	mov	r3, r0
 800429c:	460a      	mov	r2, r1
 800429e:	71fb      	strb	r3, [r7, #7]
 80042a0:	4613      	mov	r3, r2
 80042a2:	71bb      	strb	r3, [r7, #6]
	uint8_t reg[2] = { regAddr, byte };
 80042a4:	79fb      	ldrb	r3, [r7, #7]
 80042a6:	733b      	strb	r3, [r7, #12]
 80042a8:	79bb      	ldrb	r3, [r7, #6]
 80042aa:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_max30100_ui2c, MAX30100_I2C_ADDR, reg, 2, MAX30100_TIMEOUT);
 80042ac:	4b07      	ldr	r3, [pc, #28]	; (80042cc <MAX30100_WriteReg+0x38>)
 80042ae:	6818      	ldr	r0, [r3, #0]
 80042b0:	f107 020c 	add.w	r2, r7, #12
 80042b4:	f04f 33ff 	mov.w	r3, #4294967295
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	2302      	movs	r3, #2
 80042bc:	21ae      	movs	r1, #174	; 0xae
 80042be:	f7fd f909 	bl	80014d4 <HAL_I2C_Master_Transmit>
}
 80042c2:	bf00      	nop
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	2000016c 	.word	0x2000016c

080042d0 <MAX30100_EnableInterrupt>:

void MAX30100_EnableInterrupt(uint8_t a_full, uint8_t tmp_rdy, uint8_t hr_rdy, uint8_t spo2){
 80042d0:	b590      	push	{r4, r7, lr}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4604      	mov	r4, r0
 80042d8:	4608      	mov	r0, r1
 80042da:	4611      	mov	r1, r2
 80042dc:	461a      	mov	r2, r3
 80042de:	4623      	mov	r3, r4
 80042e0:	71fb      	strb	r3, [r7, #7]
 80042e2:	4603      	mov	r3, r0
 80042e4:	71bb      	strb	r3, [r7, #6]
 80042e6:	460b      	mov	r3, r1
 80042e8:	717b      	strb	r3, [r7, #5]
 80042ea:	4613      	mov	r3, r2
 80042ec:	713b      	strb	r3, [r7, #4]
	uint8_t itReg = ((a_full & 0x01) << MAX30100_ENB_A_FULL) | ((tmp_rdy & 0x01) << MAX30100_ENB_TMP_RDY) | ((hr_rdy & 0x01) << MAX30100_ENB_HR_RDY) | ((spo2 & 0x01) << MAX30100_ENB_SPO2_RDY);
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	01db      	lsls	r3, r3, #7
 80042f2:	b25a      	sxtb	r2, r3
 80042f4:	79bb      	ldrb	r3, [r7, #6]
 80042f6:	019b      	lsls	r3, r3, #6
 80042f8:	b25b      	sxtb	r3, r3
 80042fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fe:	b25b      	sxtb	r3, r3
 8004300:	4313      	orrs	r3, r2
 8004302:	b25a      	sxtb	r2, r3
 8004304:	797b      	ldrb	r3, [r7, #5]
 8004306:	015b      	lsls	r3, r3, #5
 8004308:	b25b      	sxtb	r3, r3
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	b25b      	sxtb	r3, r3
 8004310:	4313      	orrs	r3, r2
 8004312:	b25a      	sxtb	r2, r3
 8004314:	793b      	ldrb	r3, [r7, #4]
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	b25b      	sxtb	r3, r3
 800431a:	f003 0310 	and.w	r3, r3, #16
 800431e:	b25b      	sxtb	r3, r3
 8004320:	4313      	orrs	r3, r2
 8004322:	b25b      	sxtb	r3, r3
 8004324:	73fb      	strb	r3, [r7, #15]
	MAX30100_WriteReg(MAX30100_INTERRUPT_ENB, itReg);
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	4619      	mov	r1, r3
 800432a:	2001      	movs	r0, #1
 800432c:	f7ff ffb2 	bl	8004294 <MAX30100_WriteReg>
}
 8004330:	bf00      	nop
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	bd90      	pop	{r4, r7, pc}

08004338 <MAX30100_SetMode>:
	}else if((itReg >> MAX30100_SPO2_RDY) & 0x01){

	}
}

void MAX30100_SetMode(enum MAX30100_Mode mode){
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	4603      	mov	r3, r0
 8004340:	71fb      	strb	r3, [r7, #7]
	_max30100_mode = mode;
 8004342:	4a22      	ldr	r2, [pc, #136]	; (80043cc <MAX30100_SetMode+0x94>)
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	7013      	strb	r3, [r2, #0]
	uint8_t modeReg = (MAX30100_ReadReg(MAX30100_MODE_CONFIG) & ~(0x07)) | ((mode << MAX30100_MODE) & 0x07);
 8004348:	2006      	movs	r0, #6
 800434a:	f7ff ff7f 	bl	800424c <MAX30100_ReadReg>
 800434e:	4603      	mov	r3, r0
 8004350:	b25b      	sxtb	r3, r3
 8004352:	f023 0307 	bic.w	r3, r3, #7
 8004356:	b25a      	sxtb	r2, r3
 8004358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	b25b      	sxtb	r3, r3
 8004362:	4313      	orrs	r3, r2
 8004364:	b25b      	sxtb	r3, r3
 8004366:	73fb      	strb	r3, [r7, #15]
	if(mode == MAX30100_SPO2_MODE)
 8004368:	79fb      	ldrb	r3, [r7, #7]
 800436a:	2b03      	cmp	r3, #3
 800436c:	d104      	bne.n	8004378 <MAX30100_SetMode+0x40>
		modeReg |= 0x08;
 800436e:	7bfb      	ldrb	r3, [r7, #15]
 8004370:	f043 0308 	orr.w	r3, r3, #8
 8004374:	73fb      	strb	r3, [r7, #15]
 8004376:	e003      	b.n	8004380 <MAX30100_SetMode+0x48>
	else
		modeReg &= ~0x08;
 8004378:	7bfb      	ldrb	r3, [r7, #15]
 800437a:	f023 0308 	bic.w	r3, r3, #8
 800437e:	73fb      	strb	r3, [r7, #15]
	MAX30100_WriteReg(MAX30100_MODE_CONFIG, modeReg);
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	4619      	mov	r1, r3
 8004384:	2006      	movs	r0, #6
 8004386:	f7ff ff85 	bl	8004294 <MAX30100_WriteReg>
	if(_max30100_mode == MAX30100_SPO2_MODE)
 800438a:	4b10      	ldr	r3, [pc, #64]	; (80043cc <MAX30100_SetMode+0x94>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b03      	cmp	r3, #3
 8004390:	d106      	bne.n	80043a0 <MAX30100_SetMode+0x68>
		MAX30100_EnableInterrupt(0, 1, 0, 0);
 8004392:	2300      	movs	r3, #0
 8004394:	2200      	movs	r2, #0
 8004396:	2101      	movs	r1, #1
 8004398:	2000      	movs	r0, #0
 800439a:	f7ff ff99 	bl	80042d0 <MAX30100_EnableInterrupt>
	else if(_max30100_mode == MAX30100_HRONLY_MODE)
		MAX30100_EnableInterrupt(1, 0, 0, 0);
	else
		MAX30100_EnableInterrupt(0, 0, 0, 0);
}
 800439e:	e010      	b.n	80043c2 <MAX30100_SetMode+0x8a>
	else if(_max30100_mode == MAX30100_HRONLY_MODE)
 80043a0:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <MAX30100_SetMode+0x94>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d106      	bne.n	80043b6 <MAX30100_SetMode+0x7e>
		MAX30100_EnableInterrupt(1, 0, 0, 0);
 80043a8:	2300      	movs	r3, #0
 80043aa:	2200      	movs	r2, #0
 80043ac:	2100      	movs	r1, #0
 80043ae:	2001      	movs	r0, #1
 80043b0:	f7ff ff8e 	bl	80042d0 <MAX30100_EnableInterrupt>
}
 80043b4:	e005      	b.n	80043c2 <MAX30100_SetMode+0x8a>
		MAX30100_EnableInterrupt(0, 0, 0, 0);
 80043b6:	2300      	movs	r3, #0
 80043b8:	2200      	movs	r2, #0
 80043ba:	2100      	movs	r1, #0
 80043bc:	2000      	movs	r0, #0
 80043be:	f7ff ff87 	bl	80042d0 <MAX30100_EnableInterrupt>
}
 80043c2:	bf00      	nop
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	20000194 	.word	0x20000194

080043d0 <MAX30100_SetSpO2SampleRate>:
//ok
void MAX30100_SetSpO2SampleRate(enum MAX30100_SpO2SR sr){
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	71fb      	strb	r3, [r7, #7]
	uint8_t spo2Reg = MAX30100_ReadReg(MAX30100_SPO2_CONFIG);
 80043da:	2007      	movs	r0, #7
 80043dc:	f7ff ff36 	bl	800424c <MAX30100_ReadReg>
 80043e0:	4603      	mov	r3, r0
 80043e2:	73fb      	strb	r3, [r7, #15]
	spo2Reg = ((sr << MAX30100_SPO2_SR) & 0x1c) | (spo2Reg & ~0x1c);
 80043e4:	79fb      	ldrb	r3, [r7, #7]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	b25b      	sxtb	r3, r3
 80043ea:	f003 031c 	and.w	r3, r3, #28
 80043ee:	b25a      	sxtb	r2, r3
 80043f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043f4:	f023 031c 	bic.w	r3, r3, #28
 80043f8:	b25b      	sxtb	r3, r3
 80043fa:	4313      	orrs	r3, r2
 80043fc:	b25b      	sxtb	r3, r3
 80043fe:	73fb      	strb	r3, [r7, #15]
	MAX30100_WriteReg(MAX30100_SPO2_CONFIG, spo2Reg);
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	4619      	mov	r1, r3
 8004404:	2007      	movs	r0, #7
 8004406:	f7ff ff45 	bl	8004294 <MAX30100_WriteReg>
}
 800440a:	bf00      	nop
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <MAX30100_SetLEDPulseWidth>:
//ok
void MAX30100_SetLEDPulseWidth(enum MAX30100_LEDPulseWidth pw){
 8004412:	b580      	push	{r7, lr}
 8004414:	b084      	sub	sp, #16
 8004416:	af00      	add	r7, sp, #0
 8004418:	4603      	mov	r3, r0
 800441a:	71fb      	strb	r3, [r7, #7]
	uint8_t spo2Reg = MAX30100_ReadReg(MAX30100_SPO2_CONFIG);
 800441c:	2007      	movs	r0, #7
 800441e:	f7ff ff15 	bl	800424c <MAX30100_ReadReg>
 8004422:	4603      	mov	r3, r0
 8004424:	73fb      	strb	r3, [r7, #15]
	spo2Reg = ((pw << MAX30100_LED_PW) & 0x03) | (spo2Reg & ~0x03);
 8004426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	b25a      	sxtb	r2, r3
 8004430:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004434:	f023 0303 	bic.w	r3, r3, #3
 8004438:	b25b      	sxtb	r3, r3
 800443a:	4313      	orrs	r3, r2
 800443c:	b25b      	sxtb	r3, r3
 800443e:	73fb      	strb	r3, [r7, #15]
	MAX30100_WriteReg(MAX30100_SPO2_CONFIG, spo2Reg);
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	4619      	mov	r1, r3
 8004444:	2007      	movs	r0, #7
 8004446:	f7ff ff25 	bl	8004294 <MAX30100_WriteReg>
}
 800444a:	bf00      	nop
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <MAX30100_SetLEDCurrent>:
void MAX30100_SetLEDCurrent(enum MAX30100_LEDCurrent redpa, enum MAX30100_LEDCurrent irpa){
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	4603      	mov	r3, r0
 800445c:	460a      	mov	r2, r1
 800445e:	71fb      	strb	r3, [r7, #7]
 8004460:	4613      	mov	r3, r2
 8004462:	71bb      	strb	r3, [r7, #6]
	_max30100_red_current = redpa;
 8004464:	4a0a      	ldr	r2, [pc, #40]	; (8004490 <MAX30100_SetLEDCurrent+0x3c>)
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	7013      	strb	r3, [r2, #0]
	_max30100_ir_current = irpa;
 800446a:	4a0a      	ldr	r2, [pc, #40]	; (8004494 <MAX30100_SetLEDCurrent+0x40>)
 800446c:	79bb      	ldrb	r3, [r7, #6]
 800446e:	7013      	strb	r3, [r2, #0]
	MAX30100_WriteReg(MAX30100_LED_CONFIG, (redpa << MAX30100_LED_RED_PA) | irpa);
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	b25a      	sxtb	r2, r3
 8004476:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800447a:	4313      	orrs	r3, r2
 800447c:	b25b      	sxtb	r3, r3
 800447e:	b2db      	uxtb	r3, r3
 8004480:	4619      	mov	r1, r3
 8004482:	2009      	movs	r0, #9
 8004484:	f7ff ff06 	bl	8004294 <MAX30100_WriteReg>
}
 8004488:	bf00      	nop
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	2000019c 	.word	0x2000019c
 8004494:	2000016a 	.word	0x2000016a

08004498 <MAX30100_ClearFIFO>:

void MAX30100_ClearFIFO(void){
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
	MAX30100_WriteReg(MAX30100_FIFO_WR_PTR, 0x00);
 800449c:	2100      	movs	r1, #0
 800449e:	2002      	movs	r0, #2
 80044a0:	f7ff fef8 	bl	8004294 <MAX30100_WriteReg>
	MAX30100_WriteReg(MAX30100_FIFO_RD_PTR, 0x00);
 80044a4:	2100      	movs	r1, #0
 80044a6:	2004      	movs	r0, #4
 80044a8:	f7ff fef4 	bl	8004294 <MAX30100_WriteReg>
	MAX30100_WriteReg(MAX30100_OVF_COUNTER, 0x00);
 80044ac:	2100      	movs	r1, #0
 80044ae:	2003      	movs	r0, #3
 80044b0:	f7ff fef0 	bl	8004294 <MAX30100_WriteReg>
}
 80044b4:	bf00      	nop
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <MAX30100_ReadFIFO>:

void MAX30100_ReadFIFO(void){
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b094      	sub	sp, #80	; 0x50
 80044bc:	af02      	add	r7, sp, #8
	//uint8_t fifo_wr_ptr = MAX30100_ReadReg(MAX30100_FIFO_WR_PTR);
	//uint8_t fifo_rd_ptr = MAX30100_ReadReg(MAX30100_FIFO_RD_PTR);
	uint8_t num_sample = 64;//(fifo_wr_ptr - fifo_rd_ptr) * 4;
 80044be:	2340      	movs	r3, #64	; 0x40
 80044c0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	uint8_t fifo_data[64] = { 0 };
 80044c4:	1d3b      	adds	r3, r7, #4
 80044c6:	2240      	movs	r2, #64	; 0x40
 80044c8:	2100      	movs	r1, #0
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 f8e6 	bl	800469c <memset>
	uint8_t reg = MAX30100_FIFO_DATA;
 80044d0:	2305      	movs	r3, #5
 80044d2:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(_max30100_ui2c, MAX30100_I2C_ADDR, &reg, 1, MAX30100_TIMEOUT);
 80044d4:	4b32      	ldr	r3, [pc, #200]	; (80045a0 <MAX30100_ReadFIFO+0xe8>)
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	1cfa      	adds	r2, r7, #3
 80044da:	f04f 33ff 	mov.w	r3, #4294967295
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	2301      	movs	r3, #1
 80044e2:	21ae      	movs	r1, #174	; 0xae
 80044e4:	f7fc fff6 	bl	80014d4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_max30100_ui2c, MAX30100_I2C_ADDR, fifo_data, num_sample, MAX30100_TIMEOUT);
 80044e8:	4b2d      	ldr	r3, [pc, #180]	; (80045a0 <MAX30100_ReadFIFO+0xe8>)
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80044f0:	b299      	uxth	r1, r3
 80044f2:	1d3a      	adds	r2, r7, #4
 80044f4:	f04f 33ff 	mov.w	r3, #4294967295
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	460b      	mov	r3, r1
 80044fc:	21ae      	movs	r1, #174	; 0xae
 80044fe:	f7fd f8dd 	bl	80016bc <HAL_I2C_Master_Receive>
	for(uint8_t i = 0; i < num_sample; i += 4){
 8004502:	2300      	movs	r3, #0
 8004504:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004508:	e03f      	b.n	800458a <MAX30100_ReadFIFO+0xd2>
		_max30100_ir_sample[i / 4] = (fifo_data[i] << 8) | fifo_data[i + 1];
 800450a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800450e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004512:	4413      	add	r3, r2
 8004514:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8004518:	021b      	lsls	r3, r3, #8
 800451a:	b21a      	sxth	r2, r3
 800451c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004520:	3301      	adds	r3, #1
 8004522:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004526:	440b      	add	r3, r1
 8004528:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800452c:	b21b      	sxth	r3, r3
 800452e:	4313      	orrs	r3, r2
 8004530:	b219      	sxth	r1, r3
 8004532:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004536:	089b      	lsrs	r3, r3, #2
 8004538:	b2db      	uxtb	r3, r3
 800453a:	461a      	mov	r2, r3
 800453c:	b289      	uxth	r1, r1
 800453e:	4b19      	ldr	r3, [pc, #100]	; (80045a4 <MAX30100_ReadFIFO+0xec>)
 8004540:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		_max30100_red_sample[i / 4] = (fifo_data[i + 2] << 8) | fifo_data[i + 3];
 8004544:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004548:	3302      	adds	r3, #2
 800454a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800454e:	4413      	add	r3, r2
 8004550:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8004554:	021b      	lsls	r3, r3, #8
 8004556:	b21a      	sxth	r2, r3
 8004558:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800455c:	3303      	adds	r3, #3
 800455e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004562:	440b      	add	r3, r1
 8004564:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8004568:	b21b      	sxth	r3, r3
 800456a:	4313      	orrs	r3, r2
 800456c:	b219      	sxth	r1, r3
 800456e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004572:	089b      	lsrs	r3, r3, #2
 8004574:	b2db      	uxtb	r3, r3
 8004576:	461a      	mov	r2, r3
 8004578:	b289      	uxth	r1, r1
 800457a:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <MAX30100_ReadFIFO+0xf0>)
 800457c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint8_t i = 0; i < num_sample; i += 4){
 8004580:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004584:	3304      	adds	r3, #4
 8004586:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800458a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800458e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004592:	429a      	cmp	r2, r3
 8004594:	d3b9      	bcc.n	800450a <MAX30100_ReadFIFO+0x52>
	}

}
 8004596:	bf00      	nop
 8004598:	3748      	adds	r7, #72	; 0x48
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	2000016c 	.word	0x2000016c
 80045a4:	200001a0 	.word	0x200001a0
 80045a8:	20000170 	.word	0x20000170

080045ac <MAX30100_PlotBothToUART>:
	}
}



void MAX30100_PlotBothToUART(UART_HandleTypeDef *uuart, uint16_t *samplesRed, uint16_t *samplesIr, uint8_t sampleSize){
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	; 0x28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	70fb      	strb	r3, [r7, #3]
	char data[20];
	for(uint8_t i = 0; i< sampleSize; i++){
 80045ba:	2300      	movs	r3, #0
 80045bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80045c0:	e025      	b.n	800460e <MAX30100_PlotBothToUART+0x62>
	  //sprintf(data, "red:%d\tir:%d \r\n", samplesRed[i], samplesIr[i]);
	  sprintf(data, "%d,%d \r\n", samplesRed[i], samplesIr[i]);
 80045c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	4413      	add	r3, r2
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	4619      	mov	r1, r3
 80045d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	4413      	add	r3, r2
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	f107 0010 	add.w	r0, r7, #16
 80045e0:	460a      	mov	r2, r1
 80045e2:	490f      	ldr	r1, [pc, #60]	; (8004620 <MAX30100_PlotBothToUART+0x74>)
 80045e4:	f000 f8c6 	bl	8004774 <siprintf>
      HAL_UART_Transmit(uuart, data, strlen(data), MAX30100_TIMEOUT);
 80045e8:	f107 0310 	add.w	r3, r7, #16
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fb fdef 	bl	80001d0 <strlen>
 80045f2:	4603      	mov	r3, r0
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	f107 0110 	add.w	r1, r7, #16
 80045fa:	f04f 33ff 	mov.w	r3, #4294967295
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f7ff f9e0 	bl	80039c4 <HAL_UART_Transmit>
	for(uint8_t i = 0; i< sampleSize; i++){
 8004604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004608:	3301      	adds	r3, #1
 800460a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800460e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004612:	78fb      	ldrb	r3, [r7, #3]
 8004614:	429a      	cmp	r2, r3
 8004616:	d3d4      	bcc.n	80045c2 <MAX30100_PlotBothToUART+0x16>
	}
}
 8004618:	bf00      	nop
 800461a:	3728      	adds	r7, #40	; 0x28
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	08005650 	.word	0x08005650

08004624 <MAX30100_Stop>:

void MAX30100_Stop(void){
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
	_max30100_mode = MAX30100_IDLE_MODE;
 8004628:	4b06      	ldr	r3, [pc, #24]	; (8004644 <MAX30100_Stop+0x20>)
 800462a:	2200      	movs	r2, #0
 800462c:	701a      	strb	r2, [r3, #0]
	MAX30100_SetLEDCurrent(MAX30100_LEDCURRENT_0_0, MAX30100_LEDCURRENT_0_0);
 800462e:	2100      	movs	r1, #0
 8004630:	2000      	movs	r0, #0
 8004632:	f7ff ff0f 	bl	8004454 <MAX30100_SetLEDCurrent>
	MAX30100_WriteReg(MAX30100_INTERRUPT_ENB, 0x00);
 8004636:	2100      	movs	r1, #0
 8004638:	2001      	movs	r0, #1
 800463a:	f7ff fe2b 	bl	8004294 <MAX30100_WriteReg>
}
 800463e:	bf00      	nop
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20000194 	.word	0x20000194

08004648 <__errno>:
 8004648:	4b01      	ldr	r3, [pc, #4]	; (8004650 <__errno+0x8>)
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	2000000c 	.word	0x2000000c

08004654 <__libc_init_array>:
 8004654:	b570      	push	{r4, r5, r6, lr}
 8004656:	4e0d      	ldr	r6, [pc, #52]	; (800468c <__libc_init_array+0x38>)
 8004658:	4c0d      	ldr	r4, [pc, #52]	; (8004690 <__libc_init_array+0x3c>)
 800465a:	1ba4      	subs	r4, r4, r6
 800465c:	10a4      	asrs	r4, r4, #2
 800465e:	2500      	movs	r5, #0
 8004660:	42a5      	cmp	r5, r4
 8004662:	d109      	bne.n	8004678 <__libc_init_array+0x24>
 8004664:	4e0b      	ldr	r6, [pc, #44]	; (8004694 <__libc_init_array+0x40>)
 8004666:	4c0c      	ldr	r4, [pc, #48]	; (8004698 <__libc_init_array+0x44>)
 8004668:	f000 ffd4 	bl	8005614 <_init>
 800466c:	1ba4      	subs	r4, r4, r6
 800466e:	10a4      	asrs	r4, r4, #2
 8004670:	2500      	movs	r5, #0
 8004672:	42a5      	cmp	r5, r4
 8004674:	d105      	bne.n	8004682 <__libc_init_array+0x2e>
 8004676:	bd70      	pop	{r4, r5, r6, pc}
 8004678:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800467c:	4798      	blx	r3
 800467e:	3501      	adds	r5, #1
 8004680:	e7ee      	b.n	8004660 <__libc_init_array+0xc>
 8004682:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004686:	4798      	blx	r3
 8004688:	3501      	adds	r5, #1
 800468a:	e7f2      	b.n	8004672 <__libc_init_array+0x1e>
 800468c:	08005744 	.word	0x08005744
 8004690:	08005744 	.word	0x08005744
 8004694:	08005744 	.word	0x08005744
 8004698:	08005748 	.word	0x08005748

0800469c <memset>:
 800469c:	4402      	add	r2, r0
 800469e:	4603      	mov	r3, r0
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d100      	bne.n	80046a6 <memset+0xa>
 80046a4:	4770      	bx	lr
 80046a6:	f803 1b01 	strb.w	r1, [r3], #1
 80046aa:	e7f9      	b.n	80046a0 <memset+0x4>

080046ac <_puts_r>:
 80046ac:	b570      	push	{r4, r5, r6, lr}
 80046ae:	460e      	mov	r6, r1
 80046b0:	4605      	mov	r5, r0
 80046b2:	b118      	cbz	r0, 80046bc <_puts_r+0x10>
 80046b4:	6983      	ldr	r3, [r0, #24]
 80046b6:	b90b      	cbnz	r3, 80046bc <_puts_r+0x10>
 80046b8:	f000 fa2c 	bl	8004b14 <__sinit>
 80046bc:	69ab      	ldr	r3, [r5, #24]
 80046be:	68ac      	ldr	r4, [r5, #8]
 80046c0:	b913      	cbnz	r3, 80046c8 <_puts_r+0x1c>
 80046c2:	4628      	mov	r0, r5
 80046c4:	f000 fa26 	bl	8004b14 <__sinit>
 80046c8:	4b23      	ldr	r3, [pc, #140]	; (8004758 <_puts_r+0xac>)
 80046ca:	429c      	cmp	r4, r3
 80046cc:	d117      	bne.n	80046fe <_puts_r+0x52>
 80046ce:	686c      	ldr	r4, [r5, #4]
 80046d0:	89a3      	ldrh	r3, [r4, #12]
 80046d2:	071b      	lsls	r3, r3, #28
 80046d4:	d51d      	bpl.n	8004712 <_puts_r+0x66>
 80046d6:	6923      	ldr	r3, [r4, #16]
 80046d8:	b1db      	cbz	r3, 8004712 <_puts_r+0x66>
 80046da:	3e01      	subs	r6, #1
 80046dc:	68a3      	ldr	r3, [r4, #8]
 80046de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046e2:	3b01      	subs	r3, #1
 80046e4:	60a3      	str	r3, [r4, #8]
 80046e6:	b9e9      	cbnz	r1, 8004724 <_puts_r+0x78>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	da2e      	bge.n	800474a <_puts_r+0x9e>
 80046ec:	4622      	mov	r2, r4
 80046ee:	210a      	movs	r1, #10
 80046f0:	4628      	mov	r0, r5
 80046f2:	f000 f85f 	bl	80047b4 <__swbuf_r>
 80046f6:	3001      	adds	r0, #1
 80046f8:	d011      	beq.n	800471e <_puts_r+0x72>
 80046fa:	200a      	movs	r0, #10
 80046fc:	e011      	b.n	8004722 <_puts_r+0x76>
 80046fe:	4b17      	ldr	r3, [pc, #92]	; (800475c <_puts_r+0xb0>)
 8004700:	429c      	cmp	r4, r3
 8004702:	d101      	bne.n	8004708 <_puts_r+0x5c>
 8004704:	68ac      	ldr	r4, [r5, #8]
 8004706:	e7e3      	b.n	80046d0 <_puts_r+0x24>
 8004708:	4b15      	ldr	r3, [pc, #84]	; (8004760 <_puts_r+0xb4>)
 800470a:	429c      	cmp	r4, r3
 800470c:	bf08      	it	eq
 800470e:	68ec      	ldreq	r4, [r5, #12]
 8004710:	e7de      	b.n	80046d0 <_puts_r+0x24>
 8004712:	4621      	mov	r1, r4
 8004714:	4628      	mov	r0, r5
 8004716:	f000 f89f 	bl	8004858 <__swsetup_r>
 800471a:	2800      	cmp	r0, #0
 800471c:	d0dd      	beq.n	80046da <_puts_r+0x2e>
 800471e:	f04f 30ff 	mov.w	r0, #4294967295
 8004722:	bd70      	pop	{r4, r5, r6, pc}
 8004724:	2b00      	cmp	r3, #0
 8004726:	da04      	bge.n	8004732 <_puts_r+0x86>
 8004728:	69a2      	ldr	r2, [r4, #24]
 800472a:	429a      	cmp	r2, r3
 800472c:	dc06      	bgt.n	800473c <_puts_r+0x90>
 800472e:	290a      	cmp	r1, #10
 8004730:	d004      	beq.n	800473c <_puts_r+0x90>
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	6022      	str	r2, [r4, #0]
 8004738:	7019      	strb	r1, [r3, #0]
 800473a:	e7cf      	b.n	80046dc <_puts_r+0x30>
 800473c:	4622      	mov	r2, r4
 800473e:	4628      	mov	r0, r5
 8004740:	f000 f838 	bl	80047b4 <__swbuf_r>
 8004744:	3001      	adds	r0, #1
 8004746:	d1c9      	bne.n	80046dc <_puts_r+0x30>
 8004748:	e7e9      	b.n	800471e <_puts_r+0x72>
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	200a      	movs	r0, #10
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	6022      	str	r2, [r4, #0]
 8004752:	7018      	strb	r0, [r3, #0]
 8004754:	e7e5      	b.n	8004722 <_puts_r+0x76>
 8004756:	bf00      	nop
 8004758:	080056c8 	.word	0x080056c8
 800475c:	080056e8 	.word	0x080056e8
 8004760:	080056a8 	.word	0x080056a8

08004764 <puts>:
 8004764:	4b02      	ldr	r3, [pc, #8]	; (8004770 <puts+0xc>)
 8004766:	4601      	mov	r1, r0
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	f7ff bf9f 	b.w	80046ac <_puts_r>
 800476e:	bf00      	nop
 8004770:	2000000c 	.word	0x2000000c

08004774 <siprintf>:
 8004774:	b40e      	push	{r1, r2, r3}
 8004776:	b500      	push	{lr}
 8004778:	b09c      	sub	sp, #112	; 0x70
 800477a:	ab1d      	add	r3, sp, #116	; 0x74
 800477c:	9002      	str	r0, [sp, #8]
 800477e:	9006      	str	r0, [sp, #24]
 8004780:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004784:	4809      	ldr	r0, [pc, #36]	; (80047ac <siprintf+0x38>)
 8004786:	9107      	str	r1, [sp, #28]
 8004788:	9104      	str	r1, [sp, #16]
 800478a:	4909      	ldr	r1, [pc, #36]	; (80047b0 <siprintf+0x3c>)
 800478c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004790:	9105      	str	r1, [sp, #20]
 8004792:	6800      	ldr	r0, [r0, #0]
 8004794:	9301      	str	r3, [sp, #4]
 8004796:	a902      	add	r1, sp, #8
 8004798:	f000 fbac 	bl	8004ef4 <_svfiprintf_r>
 800479c:	9b02      	ldr	r3, [sp, #8]
 800479e:	2200      	movs	r2, #0
 80047a0:	701a      	strb	r2, [r3, #0]
 80047a2:	b01c      	add	sp, #112	; 0x70
 80047a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047a8:	b003      	add	sp, #12
 80047aa:	4770      	bx	lr
 80047ac:	2000000c 	.word	0x2000000c
 80047b0:	ffff0208 	.word	0xffff0208

080047b4 <__swbuf_r>:
 80047b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b6:	460e      	mov	r6, r1
 80047b8:	4614      	mov	r4, r2
 80047ba:	4605      	mov	r5, r0
 80047bc:	b118      	cbz	r0, 80047c6 <__swbuf_r+0x12>
 80047be:	6983      	ldr	r3, [r0, #24]
 80047c0:	b90b      	cbnz	r3, 80047c6 <__swbuf_r+0x12>
 80047c2:	f000 f9a7 	bl	8004b14 <__sinit>
 80047c6:	4b21      	ldr	r3, [pc, #132]	; (800484c <__swbuf_r+0x98>)
 80047c8:	429c      	cmp	r4, r3
 80047ca:	d12a      	bne.n	8004822 <__swbuf_r+0x6e>
 80047cc:	686c      	ldr	r4, [r5, #4]
 80047ce:	69a3      	ldr	r3, [r4, #24]
 80047d0:	60a3      	str	r3, [r4, #8]
 80047d2:	89a3      	ldrh	r3, [r4, #12]
 80047d4:	071a      	lsls	r2, r3, #28
 80047d6:	d52e      	bpl.n	8004836 <__swbuf_r+0x82>
 80047d8:	6923      	ldr	r3, [r4, #16]
 80047da:	b363      	cbz	r3, 8004836 <__swbuf_r+0x82>
 80047dc:	6923      	ldr	r3, [r4, #16]
 80047de:	6820      	ldr	r0, [r4, #0]
 80047e0:	1ac0      	subs	r0, r0, r3
 80047e2:	6963      	ldr	r3, [r4, #20]
 80047e4:	b2f6      	uxtb	r6, r6
 80047e6:	4283      	cmp	r3, r0
 80047e8:	4637      	mov	r7, r6
 80047ea:	dc04      	bgt.n	80047f6 <__swbuf_r+0x42>
 80047ec:	4621      	mov	r1, r4
 80047ee:	4628      	mov	r0, r5
 80047f0:	f000 f926 	bl	8004a40 <_fflush_r>
 80047f4:	bb28      	cbnz	r0, 8004842 <__swbuf_r+0x8e>
 80047f6:	68a3      	ldr	r3, [r4, #8]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	60a3      	str	r3, [r4, #8]
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	6022      	str	r2, [r4, #0]
 8004802:	701e      	strb	r6, [r3, #0]
 8004804:	6963      	ldr	r3, [r4, #20]
 8004806:	3001      	adds	r0, #1
 8004808:	4283      	cmp	r3, r0
 800480a:	d004      	beq.n	8004816 <__swbuf_r+0x62>
 800480c:	89a3      	ldrh	r3, [r4, #12]
 800480e:	07db      	lsls	r3, r3, #31
 8004810:	d519      	bpl.n	8004846 <__swbuf_r+0x92>
 8004812:	2e0a      	cmp	r6, #10
 8004814:	d117      	bne.n	8004846 <__swbuf_r+0x92>
 8004816:	4621      	mov	r1, r4
 8004818:	4628      	mov	r0, r5
 800481a:	f000 f911 	bl	8004a40 <_fflush_r>
 800481e:	b190      	cbz	r0, 8004846 <__swbuf_r+0x92>
 8004820:	e00f      	b.n	8004842 <__swbuf_r+0x8e>
 8004822:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <__swbuf_r+0x9c>)
 8004824:	429c      	cmp	r4, r3
 8004826:	d101      	bne.n	800482c <__swbuf_r+0x78>
 8004828:	68ac      	ldr	r4, [r5, #8]
 800482a:	e7d0      	b.n	80047ce <__swbuf_r+0x1a>
 800482c:	4b09      	ldr	r3, [pc, #36]	; (8004854 <__swbuf_r+0xa0>)
 800482e:	429c      	cmp	r4, r3
 8004830:	bf08      	it	eq
 8004832:	68ec      	ldreq	r4, [r5, #12]
 8004834:	e7cb      	b.n	80047ce <__swbuf_r+0x1a>
 8004836:	4621      	mov	r1, r4
 8004838:	4628      	mov	r0, r5
 800483a:	f000 f80d 	bl	8004858 <__swsetup_r>
 800483e:	2800      	cmp	r0, #0
 8004840:	d0cc      	beq.n	80047dc <__swbuf_r+0x28>
 8004842:	f04f 37ff 	mov.w	r7, #4294967295
 8004846:	4638      	mov	r0, r7
 8004848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800484a:	bf00      	nop
 800484c:	080056c8 	.word	0x080056c8
 8004850:	080056e8 	.word	0x080056e8
 8004854:	080056a8 	.word	0x080056a8

08004858 <__swsetup_r>:
 8004858:	4b32      	ldr	r3, [pc, #200]	; (8004924 <__swsetup_r+0xcc>)
 800485a:	b570      	push	{r4, r5, r6, lr}
 800485c:	681d      	ldr	r5, [r3, #0]
 800485e:	4606      	mov	r6, r0
 8004860:	460c      	mov	r4, r1
 8004862:	b125      	cbz	r5, 800486e <__swsetup_r+0x16>
 8004864:	69ab      	ldr	r3, [r5, #24]
 8004866:	b913      	cbnz	r3, 800486e <__swsetup_r+0x16>
 8004868:	4628      	mov	r0, r5
 800486a:	f000 f953 	bl	8004b14 <__sinit>
 800486e:	4b2e      	ldr	r3, [pc, #184]	; (8004928 <__swsetup_r+0xd0>)
 8004870:	429c      	cmp	r4, r3
 8004872:	d10f      	bne.n	8004894 <__swsetup_r+0x3c>
 8004874:	686c      	ldr	r4, [r5, #4]
 8004876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800487a:	b29a      	uxth	r2, r3
 800487c:	0715      	lsls	r5, r2, #28
 800487e:	d42c      	bmi.n	80048da <__swsetup_r+0x82>
 8004880:	06d0      	lsls	r0, r2, #27
 8004882:	d411      	bmi.n	80048a8 <__swsetup_r+0x50>
 8004884:	2209      	movs	r2, #9
 8004886:	6032      	str	r2, [r6, #0]
 8004888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800488c:	81a3      	strh	r3, [r4, #12]
 800488e:	f04f 30ff 	mov.w	r0, #4294967295
 8004892:	e03e      	b.n	8004912 <__swsetup_r+0xba>
 8004894:	4b25      	ldr	r3, [pc, #148]	; (800492c <__swsetup_r+0xd4>)
 8004896:	429c      	cmp	r4, r3
 8004898:	d101      	bne.n	800489e <__swsetup_r+0x46>
 800489a:	68ac      	ldr	r4, [r5, #8]
 800489c:	e7eb      	b.n	8004876 <__swsetup_r+0x1e>
 800489e:	4b24      	ldr	r3, [pc, #144]	; (8004930 <__swsetup_r+0xd8>)
 80048a0:	429c      	cmp	r4, r3
 80048a2:	bf08      	it	eq
 80048a4:	68ec      	ldreq	r4, [r5, #12]
 80048a6:	e7e6      	b.n	8004876 <__swsetup_r+0x1e>
 80048a8:	0751      	lsls	r1, r2, #29
 80048aa:	d512      	bpl.n	80048d2 <__swsetup_r+0x7a>
 80048ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048ae:	b141      	cbz	r1, 80048c2 <__swsetup_r+0x6a>
 80048b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048b4:	4299      	cmp	r1, r3
 80048b6:	d002      	beq.n	80048be <__swsetup_r+0x66>
 80048b8:	4630      	mov	r0, r6
 80048ba:	f000 fa19 	bl	8004cf0 <_free_r>
 80048be:	2300      	movs	r3, #0
 80048c0:	6363      	str	r3, [r4, #52]	; 0x34
 80048c2:	89a3      	ldrh	r3, [r4, #12]
 80048c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80048c8:	81a3      	strh	r3, [r4, #12]
 80048ca:	2300      	movs	r3, #0
 80048cc:	6063      	str	r3, [r4, #4]
 80048ce:	6923      	ldr	r3, [r4, #16]
 80048d0:	6023      	str	r3, [r4, #0]
 80048d2:	89a3      	ldrh	r3, [r4, #12]
 80048d4:	f043 0308 	orr.w	r3, r3, #8
 80048d8:	81a3      	strh	r3, [r4, #12]
 80048da:	6923      	ldr	r3, [r4, #16]
 80048dc:	b94b      	cbnz	r3, 80048f2 <__swsetup_r+0x9a>
 80048de:	89a3      	ldrh	r3, [r4, #12]
 80048e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80048e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e8:	d003      	beq.n	80048f2 <__swsetup_r+0x9a>
 80048ea:	4621      	mov	r1, r4
 80048ec:	4630      	mov	r0, r6
 80048ee:	f000 f9bf 	bl	8004c70 <__smakebuf_r>
 80048f2:	89a2      	ldrh	r2, [r4, #12]
 80048f4:	f012 0301 	ands.w	r3, r2, #1
 80048f8:	d00c      	beq.n	8004914 <__swsetup_r+0xbc>
 80048fa:	2300      	movs	r3, #0
 80048fc:	60a3      	str	r3, [r4, #8]
 80048fe:	6963      	ldr	r3, [r4, #20]
 8004900:	425b      	negs	r3, r3
 8004902:	61a3      	str	r3, [r4, #24]
 8004904:	6923      	ldr	r3, [r4, #16]
 8004906:	b953      	cbnz	r3, 800491e <__swsetup_r+0xc6>
 8004908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800490c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004910:	d1ba      	bne.n	8004888 <__swsetup_r+0x30>
 8004912:	bd70      	pop	{r4, r5, r6, pc}
 8004914:	0792      	lsls	r2, r2, #30
 8004916:	bf58      	it	pl
 8004918:	6963      	ldrpl	r3, [r4, #20]
 800491a:	60a3      	str	r3, [r4, #8]
 800491c:	e7f2      	b.n	8004904 <__swsetup_r+0xac>
 800491e:	2000      	movs	r0, #0
 8004920:	e7f7      	b.n	8004912 <__swsetup_r+0xba>
 8004922:	bf00      	nop
 8004924:	2000000c 	.word	0x2000000c
 8004928:	080056c8 	.word	0x080056c8
 800492c:	080056e8 	.word	0x080056e8
 8004930:	080056a8 	.word	0x080056a8

08004934 <__sflush_r>:
 8004934:	898a      	ldrh	r2, [r1, #12]
 8004936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800493a:	4605      	mov	r5, r0
 800493c:	0710      	lsls	r0, r2, #28
 800493e:	460c      	mov	r4, r1
 8004940:	d458      	bmi.n	80049f4 <__sflush_r+0xc0>
 8004942:	684b      	ldr	r3, [r1, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	dc05      	bgt.n	8004954 <__sflush_r+0x20>
 8004948:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800494a:	2b00      	cmp	r3, #0
 800494c:	dc02      	bgt.n	8004954 <__sflush_r+0x20>
 800494e:	2000      	movs	r0, #0
 8004950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004954:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004956:	2e00      	cmp	r6, #0
 8004958:	d0f9      	beq.n	800494e <__sflush_r+0x1a>
 800495a:	2300      	movs	r3, #0
 800495c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004960:	682f      	ldr	r7, [r5, #0]
 8004962:	6a21      	ldr	r1, [r4, #32]
 8004964:	602b      	str	r3, [r5, #0]
 8004966:	d032      	beq.n	80049ce <__sflush_r+0x9a>
 8004968:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800496a:	89a3      	ldrh	r3, [r4, #12]
 800496c:	075a      	lsls	r2, r3, #29
 800496e:	d505      	bpl.n	800497c <__sflush_r+0x48>
 8004970:	6863      	ldr	r3, [r4, #4]
 8004972:	1ac0      	subs	r0, r0, r3
 8004974:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004976:	b10b      	cbz	r3, 800497c <__sflush_r+0x48>
 8004978:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800497a:	1ac0      	subs	r0, r0, r3
 800497c:	2300      	movs	r3, #0
 800497e:	4602      	mov	r2, r0
 8004980:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004982:	6a21      	ldr	r1, [r4, #32]
 8004984:	4628      	mov	r0, r5
 8004986:	47b0      	blx	r6
 8004988:	1c43      	adds	r3, r0, #1
 800498a:	89a3      	ldrh	r3, [r4, #12]
 800498c:	d106      	bne.n	800499c <__sflush_r+0x68>
 800498e:	6829      	ldr	r1, [r5, #0]
 8004990:	291d      	cmp	r1, #29
 8004992:	d848      	bhi.n	8004a26 <__sflush_r+0xf2>
 8004994:	4a29      	ldr	r2, [pc, #164]	; (8004a3c <__sflush_r+0x108>)
 8004996:	40ca      	lsrs	r2, r1
 8004998:	07d6      	lsls	r6, r2, #31
 800499a:	d544      	bpl.n	8004a26 <__sflush_r+0xf2>
 800499c:	2200      	movs	r2, #0
 800499e:	6062      	str	r2, [r4, #4]
 80049a0:	04d9      	lsls	r1, r3, #19
 80049a2:	6922      	ldr	r2, [r4, #16]
 80049a4:	6022      	str	r2, [r4, #0]
 80049a6:	d504      	bpl.n	80049b2 <__sflush_r+0x7e>
 80049a8:	1c42      	adds	r2, r0, #1
 80049aa:	d101      	bne.n	80049b0 <__sflush_r+0x7c>
 80049ac:	682b      	ldr	r3, [r5, #0]
 80049ae:	b903      	cbnz	r3, 80049b2 <__sflush_r+0x7e>
 80049b0:	6560      	str	r0, [r4, #84]	; 0x54
 80049b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049b4:	602f      	str	r7, [r5, #0]
 80049b6:	2900      	cmp	r1, #0
 80049b8:	d0c9      	beq.n	800494e <__sflush_r+0x1a>
 80049ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049be:	4299      	cmp	r1, r3
 80049c0:	d002      	beq.n	80049c8 <__sflush_r+0x94>
 80049c2:	4628      	mov	r0, r5
 80049c4:	f000 f994 	bl	8004cf0 <_free_r>
 80049c8:	2000      	movs	r0, #0
 80049ca:	6360      	str	r0, [r4, #52]	; 0x34
 80049cc:	e7c0      	b.n	8004950 <__sflush_r+0x1c>
 80049ce:	2301      	movs	r3, #1
 80049d0:	4628      	mov	r0, r5
 80049d2:	47b0      	blx	r6
 80049d4:	1c41      	adds	r1, r0, #1
 80049d6:	d1c8      	bne.n	800496a <__sflush_r+0x36>
 80049d8:	682b      	ldr	r3, [r5, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0c5      	beq.n	800496a <__sflush_r+0x36>
 80049de:	2b1d      	cmp	r3, #29
 80049e0:	d001      	beq.n	80049e6 <__sflush_r+0xb2>
 80049e2:	2b16      	cmp	r3, #22
 80049e4:	d101      	bne.n	80049ea <__sflush_r+0xb6>
 80049e6:	602f      	str	r7, [r5, #0]
 80049e8:	e7b1      	b.n	800494e <__sflush_r+0x1a>
 80049ea:	89a3      	ldrh	r3, [r4, #12]
 80049ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049f0:	81a3      	strh	r3, [r4, #12]
 80049f2:	e7ad      	b.n	8004950 <__sflush_r+0x1c>
 80049f4:	690f      	ldr	r7, [r1, #16]
 80049f6:	2f00      	cmp	r7, #0
 80049f8:	d0a9      	beq.n	800494e <__sflush_r+0x1a>
 80049fa:	0793      	lsls	r3, r2, #30
 80049fc:	680e      	ldr	r6, [r1, #0]
 80049fe:	bf08      	it	eq
 8004a00:	694b      	ldreq	r3, [r1, #20]
 8004a02:	600f      	str	r7, [r1, #0]
 8004a04:	bf18      	it	ne
 8004a06:	2300      	movne	r3, #0
 8004a08:	eba6 0807 	sub.w	r8, r6, r7
 8004a0c:	608b      	str	r3, [r1, #8]
 8004a0e:	f1b8 0f00 	cmp.w	r8, #0
 8004a12:	dd9c      	ble.n	800494e <__sflush_r+0x1a>
 8004a14:	4643      	mov	r3, r8
 8004a16:	463a      	mov	r2, r7
 8004a18:	6a21      	ldr	r1, [r4, #32]
 8004a1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	47b0      	blx	r6
 8004a20:	2800      	cmp	r0, #0
 8004a22:	dc06      	bgt.n	8004a32 <__sflush_r+0xfe>
 8004a24:	89a3      	ldrh	r3, [r4, #12]
 8004a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a2a:	81a3      	strh	r3, [r4, #12]
 8004a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a30:	e78e      	b.n	8004950 <__sflush_r+0x1c>
 8004a32:	4407      	add	r7, r0
 8004a34:	eba8 0800 	sub.w	r8, r8, r0
 8004a38:	e7e9      	b.n	8004a0e <__sflush_r+0xda>
 8004a3a:	bf00      	nop
 8004a3c:	20400001 	.word	0x20400001

08004a40 <_fflush_r>:
 8004a40:	b538      	push	{r3, r4, r5, lr}
 8004a42:	690b      	ldr	r3, [r1, #16]
 8004a44:	4605      	mov	r5, r0
 8004a46:	460c      	mov	r4, r1
 8004a48:	b1db      	cbz	r3, 8004a82 <_fflush_r+0x42>
 8004a4a:	b118      	cbz	r0, 8004a54 <_fflush_r+0x14>
 8004a4c:	6983      	ldr	r3, [r0, #24]
 8004a4e:	b90b      	cbnz	r3, 8004a54 <_fflush_r+0x14>
 8004a50:	f000 f860 	bl	8004b14 <__sinit>
 8004a54:	4b0c      	ldr	r3, [pc, #48]	; (8004a88 <_fflush_r+0x48>)
 8004a56:	429c      	cmp	r4, r3
 8004a58:	d109      	bne.n	8004a6e <_fflush_r+0x2e>
 8004a5a:	686c      	ldr	r4, [r5, #4]
 8004a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a60:	b17b      	cbz	r3, 8004a82 <_fflush_r+0x42>
 8004a62:	4621      	mov	r1, r4
 8004a64:	4628      	mov	r0, r5
 8004a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a6a:	f7ff bf63 	b.w	8004934 <__sflush_r>
 8004a6e:	4b07      	ldr	r3, [pc, #28]	; (8004a8c <_fflush_r+0x4c>)
 8004a70:	429c      	cmp	r4, r3
 8004a72:	d101      	bne.n	8004a78 <_fflush_r+0x38>
 8004a74:	68ac      	ldr	r4, [r5, #8]
 8004a76:	e7f1      	b.n	8004a5c <_fflush_r+0x1c>
 8004a78:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <_fflush_r+0x50>)
 8004a7a:	429c      	cmp	r4, r3
 8004a7c:	bf08      	it	eq
 8004a7e:	68ec      	ldreq	r4, [r5, #12]
 8004a80:	e7ec      	b.n	8004a5c <_fflush_r+0x1c>
 8004a82:	2000      	movs	r0, #0
 8004a84:	bd38      	pop	{r3, r4, r5, pc}
 8004a86:	bf00      	nop
 8004a88:	080056c8 	.word	0x080056c8
 8004a8c:	080056e8 	.word	0x080056e8
 8004a90:	080056a8 	.word	0x080056a8

08004a94 <std>:
 8004a94:	2300      	movs	r3, #0
 8004a96:	b510      	push	{r4, lr}
 8004a98:	4604      	mov	r4, r0
 8004a9a:	e9c0 3300 	strd	r3, r3, [r0]
 8004a9e:	6083      	str	r3, [r0, #8]
 8004aa0:	8181      	strh	r1, [r0, #12]
 8004aa2:	6643      	str	r3, [r0, #100]	; 0x64
 8004aa4:	81c2      	strh	r2, [r0, #14]
 8004aa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004aaa:	6183      	str	r3, [r0, #24]
 8004aac:	4619      	mov	r1, r3
 8004aae:	2208      	movs	r2, #8
 8004ab0:	305c      	adds	r0, #92	; 0x5c
 8004ab2:	f7ff fdf3 	bl	800469c <memset>
 8004ab6:	4b05      	ldr	r3, [pc, #20]	; (8004acc <std+0x38>)
 8004ab8:	6263      	str	r3, [r4, #36]	; 0x24
 8004aba:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <std+0x3c>)
 8004abc:	62a3      	str	r3, [r4, #40]	; 0x28
 8004abe:	4b05      	ldr	r3, [pc, #20]	; (8004ad4 <std+0x40>)
 8004ac0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ac2:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <std+0x44>)
 8004ac4:	6224      	str	r4, [r4, #32]
 8004ac6:	6323      	str	r3, [r4, #48]	; 0x30
 8004ac8:	bd10      	pop	{r4, pc}
 8004aca:	bf00      	nop
 8004acc:	08005415 	.word	0x08005415
 8004ad0:	08005437 	.word	0x08005437
 8004ad4:	0800546f 	.word	0x0800546f
 8004ad8:	08005493 	.word	0x08005493

08004adc <_cleanup_r>:
 8004adc:	4901      	ldr	r1, [pc, #4]	; (8004ae4 <_cleanup_r+0x8>)
 8004ade:	f000 b885 	b.w	8004bec <_fwalk_reent>
 8004ae2:	bf00      	nop
 8004ae4:	08004a41 	.word	0x08004a41

08004ae8 <__sfmoreglue>:
 8004ae8:	b570      	push	{r4, r5, r6, lr}
 8004aea:	1e4a      	subs	r2, r1, #1
 8004aec:	2568      	movs	r5, #104	; 0x68
 8004aee:	4355      	muls	r5, r2
 8004af0:	460e      	mov	r6, r1
 8004af2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004af6:	f000 f949 	bl	8004d8c <_malloc_r>
 8004afa:	4604      	mov	r4, r0
 8004afc:	b140      	cbz	r0, 8004b10 <__sfmoreglue+0x28>
 8004afe:	2100      	movs	r1, #0
 8004b00:	e9c0 1600 	strd	r1, r6, [r0]
 8004b04:	300c      	adds	r0, #12
 8004b06:	60a0      	str	r0, [r4, #8]
 8004b08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b0c:	f7ff fdc6 	bl	800469c <memset>
 8004b10:	4620      	mov	r0, r4
 8004b12:	bd70      	pop	{r4, r5, r6, pc}

08004b14 <__sinit>:
 8004b14:	6983      	ldr	r3, [r0, #24]
 8004b16:	b510      	push	{r4, lr}
 8004b18:	4604      	mov	r4, r0
 8004b1a:	bb33      	cbnz	r3, 8004b6a <__sinit+0x56>
 8004b1c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004b20:	6503      	str	r3, [r0, #80]	; 0x50
 8004b22:	4b12      	ldr	r3, [pc, #72]	; (8004b6c <__sinit+0x58>)
 8004b24:	4a12      	ldr	r2, [pc, #72]	; (8004b70 <__sinit+0x5c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6282      	str	r2, [r0, #40]	; 0x28
 8004b2a:	4298      	cmp	r0, r3
 8004b2c:	bf04      	itt	eq
 8004b2e:	2301      	moveq	r3, #1
 8004b30:	6183      	streq	r3, [r0, #24]
 8004b32:	f000 f81f 	bl	8004b74 <__sfp>
 8004b36:	6060      	str	r0, [r4, #4]
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f000 f81b 	bl	8004b74 <__sfp>
 8004b3e:	60a0      	str	r0, [r4, #8]
 8004b40:	4620      	mov	r0, r4
 8004b42:	f000 f817 	bl	8004b74 <__sfp>
 8004b46:	2200      	movs	r2, #0
 8004b48:	60e0      	str	r0, [r4, #12]
 8004b4a:	2104      	movs	r1, #4
 8004b4c:	6860      	ldr	r0, [r4, #4]
 8004b4e:	f7ff ffa1 	bl	8004a94 <std>
 8004b52:	2201      	movs	r2, #1
 8004b54:	2109      	movs	r1, #9
 8004b56:	68a0      	ldr	r0, [r4, #8]
 8004b58:	f7ff ff9c 	bl	8004a94 <std>
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	2112      	movs	r1, #18
 8004b60:	68e0      	ldr	r0, [r4, #12]
 8004b62:	f7ff ff97 	bl	8004a94 <std>
 8004b66:	2301      	movs	r3, #1
 8004b68:	61a3      	str	r3, [r4, #24]
 8004b6a:	bd10      	pop	{r4, pc}
 8004b6c:	080056a4 	.word	0x080056a4
 8004b70:	08004add 	.word	0x08004add

08004b74 <__sfp>:
 8004b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b76:	4b1b      	ldr	r3, [pc, #108]	; (8004be4 <__sfp+0x70>)
 8004b78:	681e      	ldr	r6, [r3, #0]
 8004b7a:	69b3      	ldr	r3, [r6, #24]
 8004b7c:	4607      	mov	r7, r0
 8004b7e:	b913      	cbnz	r3, 8004b86 <__sfp+0x12>
 8004b80:	4630      	mov	r0, r6
 8004b82:	f7ff ffc7 	bl	8004b14 <__sinit>
 8004b86:	3648      	adds	r6, #72	; 0x48
 8004b88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	d503      	bpl.n	8004b98 <__sfp+0x24>
 8004b90:	6833      	ldr	r3, [r6, #0]
 8004b92:	b133      	cbz	r3, 8004ba2 <__sfp+0x2e>
 8004b94:	6836      	ldr	r6, [r6, #0]
 8004b96:	e7f7      	b.n	8004b88 <__sfp+0x14>
 8004b98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b9c:	b16d      	cbz	r5, 8004bba <__sfp+0x46>
 8004b9e:	3468      	adds	r4, #104	; 0x68
 8004ba0:	e7f4      	b.n	8004b8c <__sfp+0x18>
 8004ba2:	2104      	movs	r1, #4
 8004ba4:	4638      	mov	r0, r7
 8004ba6:	f7ff ff9f 	bl	8004ae8 <__sfmoreglue>
 8004baa:	6030      	str	r0, [r6, #0]
 8004bac:	2800      	cmp	r0, #0
 8004bae:	d1f1      	bne.n	8004b94 <__sfp+0x20>
 8004bb0:	230c      	movs	r3, #12
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	4604      	mov	r4, r0
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bba:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <__sfp+0x74>)
 8004bbc:	6665      	str	r5, [r4, #100]	; 0x64
 8004bbe:	e9c4 5500 	strd	r5, r5, [r4]
 8004bc2:	60a5      	str	r5, [r4, #8]
 8004bc4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004bc8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004bcc:	2208      	movs	r2, #8
 8004bce:	4629      	mov	r1, r5
 8004bd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004bd4:	f7ff fd62 	bl	800469c <memset>
 8004bd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004bdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004be0:	e7e9      	b.n	8004bb6 <__sfp+0x42>
 8004be2:	bf00      	nop
 8004be4:	080056a4 	.word	0x080056a4
 8004be8:	ffff0001 	.word	0xffff0001

08004bec <_fwalk_reent>:
 8004bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bf0:	4680      	mov	r8, r0
 8004bf2:	4689      	mov	r9, r1
 8004bf4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bf8:	2600      	movs	r6, #0
 8004bfa:	b914      	cbnz	r4, 8004c02 <_fwalk_reent+0x16>
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c02:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004c06:	3f01      	subs	r7, #1
 8004c08:	d501      	bpl.n	8004c0e <_fwalk_reent+0x22>
 8004c0a:	6824      	ldr	r4, [r4, #0]
 8004c0c:	e7f5      	b.n	8004bfa <_fwalk_reent+0xe>
 8004c0e:	89ab      	ldrh	r3, [r5, #12]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d907      	bls.n	8004c24 <_fwalk_reent+0x38>
 8004c14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	d003      	beq.n	8004c24 <_fwalk_reent+0x38>
 8004c1c:	4629      	mov	r1, r5
 8004c1e:	4640      	mov	r0, r8
 8004c20:	47c8      	blx	r9
 8004c22:	4306      	orrs	r6, r0
 8004c24:	3568      	adds	r5, #104	; 0x68
 8004c26:	e7ee      	b.n	8004c06 <_fwalk_reent+0x1a>

08004c28 <__swhatbuf_r>:
 8004c28:	b570      	push	{r4, r5, r6, lr}
 8004c2a:	460e      	mov	r6, r1
 8004c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c30:	2900      	cmp	r1, #0
 8004c32:	b096      	sub	sp, #88	; 0x58
 8004c34:	4614      	mov	r4, r2
 8004c36:	461d      	mov	r5, r3
 8004c38:	da07      	bge.n	8004c4a <__swhatbuf_r+0x22>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	602b      	str	r3, [r5, #0]
 8004c3e:	89b3      	ldrh	r3, [r6, #12]
 8004c40:	061a      	lsls	r2, r3, #24
 8004c42:	d410      	bmi.n	8004c66 <__swhatbuf_r+0x3e>
 8004c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c48:	e00e      	b.n	8004c68 <__swhatbuf_r+0x40>
 8004c4a:	466a      	mov	r2, sp
 8004c4c:	f000 fc48 	bl	80054e0 <_fstat_r>
 8004c50:	2800      	cmp	r0, #0
 8004c52:	dbf2      	blt.n	8004c3a <__swhatbuf_r+0x12>
 8004c54:	9a01      	ldr	r2, [sp, #4]
 8004c56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c5e:	425a      	negs	r2, r3
 8004c60:	415a      	adcs	r2, r3
 8004c62:	602a      	str	r2, [r5, #0]
 8004c64:	e7ee      	b.n	8004c44 <__swhatbuf_r+0x1c>
 8004c66:	2340      	movs	r3, #64	; 0x40
 8004c68:	2000      	movs	r0, #0
 8004c6a:	6023      	str	r3, [r4, #0]
 8004c6c:	b016      	add	sp, #88	; 0x58
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}

08004c70 <__smakebuf_r>:
 8004c70:	898b      	ldrh	r3, [r1, #12]
 8004c72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c74:	079d      	lsls	r5, r3, #30
 8004c76:	4606      	mov	r6, r0
 8004c78:	460c      	mov	r4, r1
 8004c7a:	d507      	bpl.n	8004c8c <__smakebuf_r+0x1c>
 8004c7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c80:	6023      	str	r3, [r4, #0]
 8004c82:	6123      	str	r3, [r4, #16]
 8004c84:	2301      	movs	r3, #1
 8004c86:	6163      	str	r3, [r4, #20]
 8004c88:	b002      	add	sp, #8
 8004c8a:	bd70      	pop	{r4, r5, r6, pc}
 8004c8c:	ab01      	add	r3, sp, #4
 8004c8e:	466a      	mov	r2, sp
 8004c90:	f7ff ffca 	bl	8004c28 <__swhatbuf_r>
 8004c94:	9900      	ldr	r1, [sp, #0]
 8004c96:	4605      	mov	r5, r0
 8004c98:	4630      	mov	r0, r6
 8004c9a:	f000 f877 	bl	8004d8c <_malloc_r>
 8004c9e:	b948      	cbnz	r0, 8004cb4 <__smakebuf_r+0x44>
 8004ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ca4:	059a      	lsls	r2, r3, #22
 8004ca6:	d4ef      	bmi.n	8004c88 <__smakebuf_r+0x18>
 8004ca8:	f023 0303 	bic.w	r3, r3, #3
 8004cac:	f043 0302 	orr.w	r3, r3, #2
 8004cb0:	81a3      	strh	r3, [r4, #12]
 8004cb2:	e7e3      	b.n	8004c7c <__smakebuf_r+0xc>
 8004cb4:	4b0d      	ldr	r3, [pc, #52]	; (8004cec <__smakebuf_r+0x7c>)
 8004cb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004cb8:	89a3      	ldrh	r3, [r4, #12]
 8004cba:	6020      	str	r0, [r4, #0]
 8004cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc0:	81a3      	strh	r3, [r4, #12]
 8004cc2:	9b00      	ldr	r3, [sp, #0]
 8004cc4:	6163      	str	r3, [r4, #20]
 8004cc6:	9b01      	ldr	r3, [sp, #4]
 8004cc8:	6120      	str	r0, [r4, #16]
 8004cca:	b15b      	cbz	r3, 8004ce4 <__smakebuf_r+0x74>
 8004ccc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	f000 fc17 	bl	8005504 <_isatty_r>
 8004cd6:	b128      	cbz	r0, 8004ce4 <__smakebuf_r+0x74>
 8004cd8:	89a3      	ldrh	r3, [r4, #12]
 8004cda:	f023 0303 	bic.w	r3, r3, #3
 8004cde:	f043 0301 	orr.w	r3, r3, #1
 8004ce2:	81a3      	strh	r3, [r4, #12]
 8004ce4:	89a3      	ldrh	r3, [r4, #12]
 8004ce6:	431d      	orrs	r5, r3
 8004ce8:	81a5      	strh	r5, [r4, #12]
 8004cea:	e7cd      	b.n	8004c88 <__smakebuf_r+0x18>
 8004cec:	08004add 	.word	0x08004add

08004cf0 <_free_r>:
 8004cf0:	b538      	push	{r3, r4, r5, lr}
 8004cf2:	4605      	mov	r5, r0
 8004cf4:	2900      	cmp	r1, #0
 8004cf6:	d045      	beq.n	8004d84 <_free_r+0x94>
 8004cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cfc:	1f0c      	subs	r4, r1, #4
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	bfb8      	it	lt
 8004d02:	18e4      	addlt	r4, r4, r3
 8004d04:	f000 fc44 	bl	8005590 <__malloc_lock>
 8004d08:	4a1f      	ldr	r2, [pc, #124]	; (8004d88 <_free_r+0x98>)
 8004d0a:	6813      	ldr	r3, [r2, #0]
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	b933      	cbnz	r3, 8004d1e <_free_r+0x2e>
 8004d10:	6063      	str	r3, [r4, #4]
 8004d12:	6014      	str	r4, [r2, #0]
 8004d14:	4628      	mov	r0, r5
 8004d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d1a:	f000 bc3a 	b.w	8005592 <__malloc_unlock>
 8004d1e:	42a3      	cmp	r3, r4
 8004d20:	d90c      	bls.n	8004d3c <_free_r+0x4c>
 8004d22:	6821      	ldr	r1, [r4, #0]
 8004d24:	1862      	adds	r2, r4, r1
 8004d26:	4293      	cmp	r3, r2
 8004d28:	bf04      	itt	eq
 8004d2a:	681a      	ldreq	r2, [r3, #0]
 8004d2c:	685b      	ldreq	r3, [r3, #4]
 8004d2e:	6063      	str	r3, [r4, #4]
 8004d30:	bf04      	itt	eq
 8004d32:	1852      	addeq	r2, r2, r1
 8004d34:	6022      	streq	r2, [r4, #0]
 8004d36:	6004      	str	r4, [r0, #0]
 8004d38:	e7ec      	b.n	8004d14 <_free_r+0x24>
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	b10a      	cbz	r2, 8004d44 <_free_r+0x54>
 8004d40:	42a2      	cmp	r2, r4
 8004d42:	d9fa      	bls.n	8004d3a <_free_r+0x4a>
 8004d44:	6819      	ldr	r1, [r3, #0]
 8004d46:	1858      	adds	r0, r3, r1
 8004d48:	42a0      	cmp	r0, r4
 8004d4a:	d10b      	bne.n	8004d64 <_free_r+0x74>
 8004d4c:	6820      	ldr	r0, [r4, #0]
 8004d4e:	4401      	add	r1, r0
 8004d50:	1858      	adds	r0, r3, r1
 8004d52:	4282      	cmp	r2, r0
 8004d54:	6019      	str	r1, [r3, #0]
 8004d56:	d1dd      	bne.n	8004d14 <_free_r+0x24>
 8004d58:	6810      	ldr	r0, [r2, #0]
 8004d5a:	6852      	ldr	r2, [r2, #4]
 8004d5c:	605a      	str	r2, [r3, #4]
 8004d5e:	4401      	add	r1, r0
 8004d60:	6019      	str	r1, [r3, #0]
 8004d62:	e7d7      	b.n	8004d14 <_free_r+0x24>
 8004d64:	d902      	bls.n	8004d6c <_free_r+0x7c>
 8004d66:	230c      	movs	r3, #12
 8004d68:	602b      	str	r3, [r5, #0]
 8004d6a:	e7d3      	b.n	8004d14 <_free_r+0x24>
 8004d6c:	6820      	ldr	r0, [r4, #0]
 8004d6e:	1821      	adds	r1, r4, r0
 8004d70:	428a      	cmp	r2, r1
 8004d72:	bf04      	itt	eq
 8004d74:	6811      	ldreq	r1, [r2, #0]
 8004d76:	6852      	ldreq	r2, [r2, #4]
 8004d78:	6062      	str	r2, [r4, #4]
 8004d7a:	bf04      	itt	eq
 8004d7c:	1809      	addeq	r1, r1, r0
 8004d7e:	6021      	streq	r1, [r4, #0]
 8004d80:	605c      	str	r4, [r3, #4]
 8004d82:	e7c7      	b.n	8004d14 <_free_r+0x24>
 8004d84:	bd38      	pop	{r3, r4, r5, pc}
 8004d86:	bf00      	nop
 8004d88:	20000090 	.word	0x20000090

08004d8c <_malloc_r>:
 8004d8c:	b570      	push	{r4, r5, r6, lr}
 8004d8e:	1ccd      	adds	r5, r1, #3
 8004d90:	f025 0503 	bic.w	r5, r5, #3
 8004d94:	3508      	adds	r5, #8
 8004d96:	2d0c      	cmp	r5, #12
 8004d98:	bf38      	it	cc
 8004d9a:	250c      	movcc	r5, #12
 8004d9c:	2d00      	cmp	r5, #0
 8004d9e:	4606      	mov	r6, r0
 8004da0:	db01      	blt.n	8004da6 <_malloc_r+0x1a>
 8004da2:	42a9      	cmp	r1, r5
 8004da4:	d903      	bls.n	8004dae <_malloc_r+0x22>
 8004da6:	230c      	movs	r3, #12
 8004da8:	6033      	str	r3, [r6, #0]
 8004daa:	2000      	movs	r0, #0
 8004dac:	bd70      	pop	{r4, r5, r6, pc}
 8004dae:	f000 fbef 	bl	8005590 <__malloc_lock>
 8004db2:	4a21      	ldr	r2, [pc, #132]	; (8004e38 <_malloc_r+0xac>)
 8004db4:	6814      	ldr	r4, [r2, #0]
 8004db6:	4621      	mov	r1, r4
 8004db8:	b991      	cbnz	r1, 8004de0 <_malloc_r+0x54>
 8004dba:	4c20      	ldr	r4, [pc, #128]	; (8004e3c <_malloc_r+0xb0>)
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	b91b      	cbnz	r3, 8004dc8 <_malloc_r+0x3c>
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	f000 fb17 	bl	80053f4 <_sbrk_r>
 8004dc6:	6020      	str	r0, [r4, #0]
 8004dc8:	4629      	mov	r1, r5
 8004dca:	4630      	mov	r0, r6
 8004dcc:	f000 fb12 	bl	80053f4 <_sbrk_r>
 8004dd0:	1c43      	adds	r3, r0, #1
 8004dd2:	d124      	bne.n	8004e1e <_malloc_r+0x92>
 8004dd4:	230c      	movs	r3, #12
 8004dd6:	6033      	str	r3, [r6, #0]
 8004dd8:	4630      	mov	r0, r6
 8004dda:	f000 fbda 	bl	8005592 <__malloc_unlock>
 8004dde:	e7e4      	b.n	8004daa <_malloc_r+0x1e>
 8004de0:	680b      	ldr	r3, [r1, #0]
 8004de2:	1b5b      	subs	r3, r3, r5
 8004de4:	d418      	bmi.n	8004e18 <_malloc_r+0x8c>
 8004de6:	2b0b      	cmp	r3, #11
 8004de8:	d90f      	bls.n	8004e0a <_malloc_r+0x7e>
 8004dea:	600b      	str	r3, [r1, #0]
 8004dec:	50cd      	str	r5, [r1, r3]
 8004dee:	18cc      	adds	r4, r1, r3
 8004df0:	4630      	mov	r0, r6
 8004df2:	f000 fbce 	bl	8005592 <__malloc_unlock>
 8004df6:	f104 000b 	add.w	r0, r4, #11
 8004dfa:	1d23      	adds	r3, r4, #4
 8004dfc:	f020 0007 	bic.w	r0, r0, #7
 8004e00:	1ac3      	subs	r3, r0, r3
 8004e02:	d0d3      	beq.n	8004dac <_malloc_r+0x20>
 8004e04:	425a      	negs	r2, r3
 8004e06:	50e2      	str	r2, [r4, r3]
 8004e08:	e7d0      	b.n	8004dac <_malloc_r+0x20>
 8004e0a:	428c      	cmp	r4, r1
 8004e0c:	684b      	ldr	r3, [r1, #4]
 8004e0e:	bf16      	itet	ne
 8004e10:	6063      	strne	r3, [r4, #4]
 8004e12:	6013      	streq	r3, [r2, #0]
 8004e14:	460c      	movne	r4, r1
 8004e16:	e7eb      	b.n	8004df0 <_malloc_r+0x64>
 8004e18:	460c      	mov	r4, r1
 8004e1a:	6849      	ldr	r1, [r1, #4]
 8004e1c:	e7cc      	b.n	8004db8 <_malloc_r+0x2c>
 8004e1e:	1cc4      	adds	r4, r0, #3
 8004e20:	f024 0403 	bic.w	r4, r4, #3
 8004e24:	42a0      	cmp	r0, r4
 8004e26:	d005      	beq.n	8004e34 <_malloc_r+0xa8>
 8004e28:	1a21      	subs	r1, r4, r0
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	f000 fae2 	bl	80053f4 <_sbrk_r>
 8004e30:	3001      	adds	r0, #1
 8004e32:	d0cf      	beq.n	8004dd4 <_malloc_r+0x48>
 8004e34:	6025      	str	r5, [r4, #0]
 8004e36:	e7db      	b.n	8004df0 <_malloc_r+0x64>
 8004e38:	20000090 	.word	0x20000090
 8004e3c:	20000094 	.word	0x20000094

08004e40 <__ssputs_r>:
 8004e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e44:	688e      	ldr	r6, [r1, #8]
 8004e46:	429e      	cmp	r6, r3
 8004e48:	4682      	mov	sl, r0
 8004e4a:	460c      	mov	r4, r1
 8004e4c:	4690      	mov	r8, r2
 8004e4e:	4699      	mov	r9, r3
 8004e50:	d837      	bhi.n	8004ec2 <__ssputs_r+0x82>
 8004e52:	898a      	ldrh	r2, [r1, #12]
 8004e54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e58:	d031      	beq.n	8004ebe <__ssputs_r+0x7e>
 8004e5a:	6825      	ldr	r5, [r4, #0]
 8004e5c:	6909      	ldr	r1, [r1, #16]
 8004e5e:	1a6f      	subs	r7, r5, r1
 8004e60:	6965      	ldr	r5, [r4, #20]
 8004e62:	2302      	movs	r3, #2
 8004e64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e68:	fb95 f5f3 	sdiv	r5, r5, r3
 8004e6c:	f109 0301 	add.w	r3, r9, #1
 8004e70:	443b      	add	r3, r7
 8004e72:	429d      	cmp	r5, r3
 8004e74:	bf38      	it	cc
 8004e76:	461d      	movcc	r5, r3
 8004e78:	0553      	lsls	r3, r2, #21
 8004e7a:	d530      	bpl.n	8004ede <__ssputs_r+0x9e>
 8004e7c:	4629      	mov	r1, r5
 8004e7e:	f7ff ff85 	bl	8004d8c <_malloc_r>
 8004e82:	4606      	mov	r6, r0
 8004e84:	b950      	cbnz	r0, 8004e9c <__ssputs_r+0x5c>
 8004e86:	230c      	movs	r3, #12
 8004e88:	f8ca 3000 	str.w	r3, [sl]
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e92:	81a3      	strh	r3, [r4, #12]
 8004e94:	f04f 30ff 	mov.w	r0, #4294967295
 8004e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e9c:	463a      	mov	r2, r7
 8004e9e:	6921      	ldr	r1, [r4, #16]
 8004ea0:	f000 fb52 	bl	8005548 <memcpy>
 8004ea4:	89a3      	ldrh	r3, [r4, #12]
 8004ea6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eae:	81a3      	strh	r3, [r4, #12]
 8004eb0:	6126      	str	r6, [r4, #16]
 8004eb2:	6165      	str	r5, [r4, #20]
 8004eb4:	443e      	add	r6, r7
 8004eb6:	1bed      	subs	r5, r5, r7
 8004eb8:	6026      	str	r6, [r4, #0]
 8004eba:	60a5      	str	r5, [r4, #8]
 8004ebc:	464e      	mov	r6, r9
 8004ebe:	454e      	cmp	r6, r9
 8004ec0:	d900      	bls.n	8004ec4 <__ssputs_r+0x84>
 8004ec2:	464e      	mov	r6, r9
 8004ec4:	4632      	mov	r2, r6
 8004ec6:	4641      	mov	r1, r8
 8004ec8:	6820      	ldr	r0, [r4, #0]
 8004eca:	f000 fb48 	bl	800555e <memmove>
 8004ece:	68a3      	ldr	r3, [r4, #8]
 8004ed0:	1b9b      	subs	r3, r3, r6
 8004ed2:	60a3      	str	r3, [r4, #8]
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	441e      	add	r6, r3
 8004ed8:	6026      	str	r6, [r4, #0]
 8004eda:	2000      	movs	r0, #0
 8004edc:	e7dc      	b.n	8004e98 <__ssputs_r+0x58>
 8004ede:	462a      	mov	r2, r5
 8004ee0:	f000 fb58 	bl	8005594 <_realloc_r>
 8004ee4:	4606      	mov	r6, r0
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	d1e2      	bne.n	8004eb0 <__ssputs_r+0x70>
 8004eea:	6921      	ldr	r1, [r4, #16]
 8004eec:	4650      	mov	r0, sl
 8004eee:	f7ff feff 	bl	8004cf0 <_free_r>
 8004ef2:	e7c8      	b.n	8004e86 <__ssputs_r+0x46>

08004ef4 <_svfiprintf_r>:
 8004ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef8:	461d      	mov	r5, r3
 8004efa:	898b      	ldrh	r3, [r1, #12]
 8004efc:	061f      	lsls	r7, r3, #24
 8004efe:	b09d      	sub	sp, #116	; 0x74
 8004f00:	4680      	mov	r8, r0
 8004f02:	460c      	mov	r4, r1
 8004f04:	4616      	mov	r6, r2
 8004f06:	d50f      	bpl.n	8004f28 <_svfiprintf_r+0x34>
 8004f08:	690b      	ldr	r3, [r1, #16]
 8004f0a:	b96b      	cbnz	r3, 8004f28 <_svfiprintf_r+0x34>
 8004f0c:	2140      	movs	r1, #64	; 0x40
 8004f0e:	f7ff ff3d 	bl	8004d8c <_malloc_r>
 8004f12:	6020      	str	r0, [r4, #0]
 8004f14:	6120      	str	r0, [r4, #16]
 8004f16:	b928      	cbnz	r0, 8004f24 <_svfiprintf_r+0x30>
 8004f18:	230c      	movs	r3, #12
 8004f1a:	f8c8 3000 	str.w	r3, [r8]
 8004f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f22:	e0c8      	b.n	80050b6 <_svfiprintf_r+0x1c2>
 8004f24:	2340      	movs	r3, #64	; 0x40
 8004f26:	6163      	str	r3, [r4, #20]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f2c:	2320      	movs	r3, #32
 8004f2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f32:	2330      	movs	r3, #48	; 0x30
 8004f34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f38:	9503      	str	r5, [sp, #12]
 8004f3a:	f04f 0b01 	mov.w	fp, #1
 8004f3e:	4637      	mov	r7, r6
 8004f40:	463d      	mov	r5, r7
 8004f42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004f46:	b10b      	cbz	r3, 8004f4c <_svfiprintf_r+0x58>
 8004f48:	2b25      	cmp	r3, #37	; 0x25
 8004f4a:	d13e      	bne.n	8004fca <_svfiprintf_r+0xd6>
 8004f4c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004f50:	d00b      	beq.n	8004f6a <_svfiprintf_r+0x76>
 8004f52:	4653      	mov	r3, sl
 8004f54:	4632      	mov	r2, r6
 8004f56:	4621      	mov	r1, r4
 8004f58:	4640      	mov	r0, r8
 8004f5a:	f7ff ff71 	bl	8004e40 <__ssputs_r>
 8004f5e:	3001      	adds	r0, #1
 8004f60:	f000 80a4 	beq.w	80050ac <_svfiprintf_r+0x1b8>
 8004f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f66:	4453      	add	r3, sl
 8004f68:	9309      	str	r3, [sp, #36]	; 0x24
 8004f6a:	783b      	ldrb	r3, [r7, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 809d 	beq.w	80050ac <_svfiprintf_r+0x1b8>
 8004f72:	2300      	movs	r3, #0
 8004f74:	f04f 32ff 	mov.w	r2, #4294967295
 8004f78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f7c:	9304      	str	r3, [sp, #16]
 8004f7e:	9307      	str	r3, [sp, #28]
 8004f80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f84:	931a      	str	r3, [sp, #104]	; 0x68
 8004f86:	462f      	mov	r7, r5
 8004f88:	2205      	movs	r2, #5
 8004f8a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004f8e:	4850      	ldr	r0, [pc, #320]	; (80050d0 <_svfiprintf_r+0x1dc>)
 8004f90:	f7fb f926 	bl	80001e0 <memchr>
 8004f94:	9b04      	ldr	r3, [sp, #16]
 8004f96:	b9d0      	cbnz	r0, 8004fce <_svfiprintf_r+0xda>
 8004f98:	06d9      	lsls	r1, r3, #27
 8004f9a:	bf44      	itt	mi
 8004f9c:	2220      	movmi	r2, #32
 8004f9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fa2:	071a      	lsls	r2, r3, #28
 8004fa4:	bf44      	itt	mi
 8004fa6:	222b      	movmi	r2, #43	; 0x2b
 8004fa8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fac:	782a      	ldrb	r2, [r5, #0]
 8004fae:	2a2a      	cmp	r2, #42	; 0x2a
 8004fb0:	d015      	beq.n	8004fde <_svfiprintf_r+0xea>
 8004fb2:	9a07      	ldr	r2, [sp, #28]
 8004fb4:	462f      	mov	r7, r5
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	250a      	movs	r5, #10
 8004fba:	4639      	mov	r1, r7
 8004fbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fc0:	3b30      	subs	r3, #48	; 0x30
 8004fc2:	2b09      	cmp	r3, #9
 8004fc4:	d94d      	bls.n	8005062 <_svfiprintf_r+0x16e>
 8004fc6:	b1b8      	cbz	r0, 8004ff8 <_svfiprintf_r+0x104>
 8004fc8:	e00f      	b.n	8004fea <_svfiprintf_r+0xf6>
 8004fca:	462f      	mov	r7, r5
 8004fcc:	e7b8      	b.n	8004f40 <_svfiprintf_r+0x4c>
 8004fce:	4a40      	ldr	r2, [pc, #256]	; (80050d0 <_svfiprintf_r+0x1dc>)
 8004fd0:	1a80      	subs	r0, r0, r2
 8004fd2:	fa0b f000 	lsl.w	r0, fp, r0
 8004fd6:	4318      	orrs	r0, r3
 8004fd8:	9004      	str	r0, [sp, #16]
 8004fda:	463d      	mov	r5, r7
 8004fdc:	e7d3      	b.n	8004f86 <_svfiprintf_r+0x92>
 8004fde:	9a03      	ldr	r2, [sp, #12]
 8004fe0:	1d11      	adds	r1, r2, #4
 8004fe2:	6812      	ldr	r2, [r2, #0]
 8004fe4:	9103      	str	r1, [sp, #12]
 8004fe6:	2a00      	cmp	r2, #0
 8004fe8:	db01      	blt.n	8004fee <_svfiprintf_r+0xfa>
 8004fea:	9207      	str	r2, [sp, #28]
 8004fec:	e004      	b.n	8004ff8 <_svfiprintf_r+0x104>
 8004fee:	4252      	negs	r2, r2
 8004ff0:	f043 0302 	orr.w	r3, r3, #2
 8004ff4:	9207      	str	r2, [sp, #28]
 8004ff6:	9304      	str	r3, [sp, #16]
 8004ff8:	783b      	ldrb	r3, [r7, #0]
 8004ffa:	2b2e      	cmp	r3, #46	; 0x2e
 8004ffc:	d10c      	bne.n	8005018 <_svfiprintf_r+0x124>
 8004ffe:	787b      	ldrb	r3, [r7, #1]
 8005000:	2b2a      	cmp	r3, #42	; 0x2a
 8005002:	d133      	bne.n	800506c <_svfiprintf_r+0x178>
 8005004:	9b03      	ldr	r3, [sp, #12]
 8005006:	1d1a      	adds	r2, r3, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	9203      	str	r2, [sp, #12]
 800500c:	2b00      	cmp	r3, #0
 800500e:	bfb8      	it	lt
 8005010:	f04f 33ff 	movlt.w	r3, #4294967295
 8005014:	3702      	adds	r7, #2
 8005016:	9305      	str	r3, [sp, #20]
 8005018:	4d2e      	ldr	r5, [pc, #184]	; (80050d4 <_svfiprintf_r+0x1e0>)
 800501a:	7839      	ldrb	r1, [r7, #0]
 800501c:	2203      	movs	r2, #3
 800501e:	4628      	mov	r0, r5
 8005020:	f7fb f8de 	bl	80001e0 <memchr>
 8005024:	b138      	cbz	r0, 8005036 <_svfiprintf_r+0x142>
 8005026:	2340      	movs	r3, #64	; 0x40
 8005028:	1b40      	subs	r0, r0, r5
 800502a:	fa03 f000 	lsl.w	r0, r3, r0
 800502e:	9b04      	ldr	r3, [sp, #16]
 8005030:	4303      	orrs	r3, r0
 8005032:	3701      	adds	r7, #1
 8005034:	9304      	str	r3, [sp, #16]
 8005036:	7839      	ldrb	r1, [r7, #0]
 8005038:	4827      	ldr	r0, [pc, #156]	; (80050d8 <_svfiprintf_r+0x1e4>)
 800503a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800503e:	2206      	movs	r2, #6
 8005040:	1c7e      	adds	r6, r7, #1
 8005042:	f7fb f8cd 	bl	80001e0 <memchr>
 8005046:	2800      	cmp	r0, #0
 8005048:	d038      	beq.n	80050bc <_svfiprintf_r+0x1c8>
 800504a:	4b24      	ldr	r3, [pc, #144]	; (80050dc <_svfiprintf_r+0x1e8>)
 800504c:	bb13      	cbnz	r3, 8005094 <_svfiprintf_r+0x1a0>
 800504e:	9b03      	ldr	r3, [sp, #12]
 8005050:	3307      	adds	r3, #7
 8005052:	f023 0307 	bic.w	r3, r3, #7
 8005056:	3308      	adds	r3, #8
 8005058:	9303      	str	r3, [sp, #12]
 800505a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800505c:	444b      	add	r3, r9
 800505e:	9309      	str	r3, [sp, #36]	; 0x24
 8005060:	e76d      	b.n	8004f3e <_svfiprintf_r+0x4a>
 8005062:	fb05 3202 	mla	r2, r5, r2, r3
 8005066:	2001      	movs	r0, #1
 8005068:	460f      	mov	r7, r1
 800506a:	e7a6      	b.n	8004fba <_svfiprintf_r+0xc6>
 800506c:	2300      	movs	r3, #0
 800506e:	3701      	adds	r7, #1
 8005070:	9305      	str	r3, [sp, #20]
 8005072:	4619      	mov	r1, r3
 8005074:	250a      	movs	r5, #10
 8005076:	4638      	mov	r0, r7
 8005078:	f810 2b01 	ldrb.w	r2, [r0], #1
 800507c:	3a30      	subs	r2, #48	; 0x30
 800507e:	2a09      	cmp	r2, #9
 8005080:	d903      	bls.n	800508a <_svfiprintf_r+0x196>
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0c8      	beq.n	8005018 <_svfiprintf_r+0x124>
 8005086:	9105      	str	r1, [sp, #20]
 8005088:	e7c6      	b.n	8005018 <_svfiprintf_r+0x124>
 800508a:	fb05 2101 	mla	r1, r5, r1, r2
 800508e:	2301      	movs	r3, #1
 8005090:	4607      	mov	r7, r0
 8005092:	e7f0      	b.n	8005076 <_svfiprintf_r+0x182>
 8005094:	ab03      	add	r3, sp, #12
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	4622      	mov	r2, r4
 800509a:	4b11      	ldr	r3, [pc, #68]	; (80050e0 <_svfiprintf_r+0x1ec>)
 800509c:	a904      	add	r1, sp, #16
 800509e:	4640      	mov	r0, r8
 80050a0:	f3af 8000 	nop.w
 80050a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80050a8:	4681      	mov	r9, r0
 80050aa:	d1d6      	bne.n	800505a <_svfiprintf_r+0x166>
 80050ac:	89a3      	ldrh	r3, [r4, #12]
 80050ae:	065b      	lsls	r3, r3, #25
 80050b0:	f53f af35 	bmi.w	8004f1e <_svfiprintf_r+0x2a>
 80050b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050b6:	b01d      	add	sp, #116	; 0x74
 80050b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050bc:	ab03      	add	r3, sp, #12
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	4622      	mov	r2, r4
 80050c2:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <_svfiprintf_r+0x1ec>)
 80050c4:	a904      	add	r1, sp, #16
 80050c6:	4640      	mov	r0, r8
 80050c8:	f000 f882 	bl	80051d0 <_printf_i>
 80050cc:	e7ea      	b.n	80050a4 <_svfiprintf_r+0x1b0>
 80050ce:	bf00      	nop
 80050d0:	08005708 	.word	0x08005708
 80050d4:	0800570e 	.word	0x0800570e
 80050d8:	08005712 	.word	0x08005712
 80050dc:	00000000 	.word	0x00000000
 80050e0:	08004e41 	.word	0x08004e41

080050e4 <_printf_common>:
 80050e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050e8:	4691      	mov	r9, r2
 80050ea:	461f      	mov	r7, r3
 80050ec:	688a      	ldr	r2, [r1, #8]
 80050ee:	690b      	ldr	r3, [r1, #16]
 80050f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050f4:	4293      	cmp	r3, r2
 80050f6:	bfb8      	it	lt
 80050f8:	4613      	movlt	r3, r2
 80050fa:	f8c9 3000 	str.w	r3, [r9]
 80050fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005102:	4606      	mov	r6, r0
 8005104:	460c      	mov	r4, r1
 8005106:	b112      	cbz	r2, 800510e <_printf_common+0x2a>
 8005108:	3301      	adds	r3, #1
 800510a:	f8c9 3000 	str.w	r3, [r9]
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	0699      	lsls	r1, r3, #26
 8005112:	bf42      	ittt	mi
 8005114:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005118:	3302      	addmi	r3, #2
 800511a:	f8c9 3000 	strmi.w	r3, [r9]
 800511e:	6825      	ldr	r5, [r4, #0]
 8005120:	f015 0506 	ands.w	r5, r5, #6
 8005124:	d107      	bne.n	8005136 <_printf_common+0x52>
 8005126:	f104 0a19 	add.w	sl, r4, #25
 800512a:	68e3      	ldr	r3, [r4, #12]
 800512c:	f8d9 2000 	ldr.w	r2, [r9]
 8005130:	1a9b      	subs	r3, r3, r2
 8005132:	42ab      	cmp	r3, r5
 8005134:	dc28      	bgt.n	8005188 <_printf_common+0xa4>
 8005136:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800513a:	6822      	ldr	r2, [r4, #0]
 800513c:	3300      	adds	r3, #0
 800513e:	bf18      	it	ne
 8005140:	2301      	movne	r3, #1
 8005142:	0692      	lsls	r2, r2, #26
 8005144:	d42d      	bmi.n	80051a2 <_printf_common+0xbe>
 8005146:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800514a:	4639      	mov	r1, r7
 800514c:	4630      	mov	r0, r6
 800514e:	47c0      	blx	r8
 8005150:	3001      	adds	r0, #1
 8005152:	d020      	beq.n	8005196 <_printf_common+0xb2>
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	68e5      	ldr	r5, [r4, #12]
 8005158:	f8d9 2000 	ldr.w	r2, [r9]
 800515c:	f003 0306 	and.w	r3, r3, #6
 8005160:	2b04      	cmp	r3, #4
 8005162:	bf08      	it	eq
 8005164:	1aad      	subeq	r5, r5, r2
 8005166:	68a3      	ldr	r3, [r4, #8]
 8005168:	6922      	ldr	r2, [r4, #16]
 800516a:	bf0c      	ite	eq
 800516c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005170:	2500      	movne	r5, #0
 8005172:	4293      	cmp	r3, r2
 8005174:	bfc4      	itt	gt
 8005176:	1a9b      	subgt	r3, r3, r2
 8005178:	18ed      	addgt	r5, r5, r3
 800517a:	f04f 0900 	mov.w	r9, #0
 800517e:	341a      	adds	r4, #26
 8005180:	454d      	cmp	r5, r9
 8005182:	d11a      	bne.n	80051ba <_printf_common+0xd6>
 8005184:	2000      	movs	r0, #0
 8005186:	e008      	b.n	800519a <_printf_common+0xb6>
 8005188:	2301      	movs	r3, #1
 800518a:	4652      	mov	r2, sl
 800518c:	4639      	mov	r1, r7
 800518e:	4630      	mov	r0, r6
 8005190:	47c0      	blx	r8
 8005192:	3001      	adds	r0, #1
 8005194:	d103      	bne.n	800519e <_printf_common+0xba>
 8005196:	f04f 30ff 	mov.w	r0, #4294967295
 800519a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800519e:	3501      	adds	r5, #1
 80051a0:	e7c3      	b.n	800512a <_printf_common+0x46>
 80051a2:	18e1      	adds	r1, r4, r3
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	2030      	movs	r0, #48	; 0x30
 80051a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051ac:	4422      	add	r2, r4
 80051ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051b6:	3302      	adds	r3, #2
 80051b8:	e7c5      	b.n	8005146 <_printf_common+0x62>
 80051ba:	2301      	movs	r3, #1
 80051bc:	4622      	mov	r2, r4
 80051be:	4639      	mov	r1, r7
 80051c0:	4630      	mov	r0, r6
 80051c2:	47c0      	blx	r8
 80051c4:	3001      	adds	r0, #1
 80051c6:	d0e6      	beq.n	8005196 <_printf_common+0xb2>
 80051c8:	f109 0901 	add.w	r9, r9, #1
 80051cc:	e7d8      	b.n	8005180 <_printf_common+0x9c>
	...

080051d0 <_printf_i>:
 80051d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80051d8:	460c      	mov	r4, r1
 80051da:	7e09      	ldrb	r1, [r1, #24]
 80051dc:	b085      	sub	sp, #20
 80051de:	296e      	cmp	r1, #110	; 0x6e
 80051e0:	4617      	mov	r7, r2
 80051e2:	4606      	mov	r6, r0
 80051e4:	4698      	mov	r8, r3
 80051e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051e8:	f000 80b3 	beq.w	8005352 <_printf_i+0x182>
 80051ec:	d822      	bhi.n	8005234 <_printf_i+0x64>
 80051ee:	2963      	cmp	r1, #99	; 0x63
 80051f0:	d036      	beq.n	8005260 <_printf_i+0x90>
 80051f2:	d80a      	bhi.n	800520a <_printf_i+0x3a>
 80051f4:	2900      	cmp	r1, #0
 80051f6:	f000 80b9 	beq.w	800536c <_printf_i+0x19c>
 80051fa:	2958      	cmp	r1, #88	; 0x58
 80051fc:	f000 8083 	beq.w	8005306 <_printf_i+0x136>
 8005200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005204:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005208:	e032      	b.n	8005270 <_printf_i+0xa0>
 800520a:	2964      	cmp	r1, #100	; 0x64
 800520c:	d001      	beq.n	8005212 <_printf_i+0x42>
 800520e:	2969      	cmp	r1, #105	; 0x69
 8005210:	d1f6      	bne.n	8005200 <_printf_i+0x30>
 8005212:	6820      	ldr	r0, [r4, #0]
 8005214:	6813      	ldr	r3, [r2, #0]
 8005216:	0605      	lsls	r5, r0, #24
 8005218:	f103 0104 	add.w	r1, r3, #4
 800521c:	d52a      	bpl.n	8005274 <_printf_i+0xa4>
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6011      	str	r1, [r2, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	da03      	bge.n	800522e <_printf_i+0x5e>
 8005226:	222d      	movs	r2, #45	; 0x2d
 8005228:	425b      	negs	r3, r3
 800522a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800522e:	486f      	ldr	r0, [pc, #444]	; (80053ec <_printf_i+0x21c>)
 8005230:	220a      	movs	r2, #10
 8005232:	e039      	b.n	80052a8 <_printf_i+0xd8>
 8005234:	2973      	cmp	r1, #115	; 0x73
 8005236:	f000 809d 	beq.w	8005374 <_printf_i+0x1a4>
 800523a:	d808      	bhi.n	800524e <_printf_i+0x7e>
 800523c:	296f      	cmp	r1, #111	; 0x6f
 800523e:	d020      	beq.n	8005282 <_printf_i+0xb2>
 8005240:	2970      	cmp	r1, #112	; 0x70
 8005242:	d1dd      	bne.n	8005200 <_printf_i+0x30>
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	f043 0320 	orr.w	r3, r3, #32
 800524a:	6023      	str	r3, [r4, #0]
 800524c:	e003      	b.n	8005256 <_printf_i+0x86>
 800524e:	2975      	cmp	r1, #117	; 0x75
 8005250:	d017      	beq.n	8005282 <_printf_i+0xb2>
 8005252:	2978      	cmp	r1, #120	; 0x78
 8005254:	d1d4      	bne.n	8005200 <_printf_i+0x30>
 8005256:	2378      	movs	r3, #120	; 0x78
 8005258:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800525c:	4864      	ldr	r0, [pc, #400]	; (80053f0 <_printf_i+0x220>)
 800525e:	e055      	b.n	800530c <_printf_i+0x13c>
 8005260:	6813      	ldr	r3, [r2, #0]
 8005262:	1d19      	adds	r1, r3, #4
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6011      	str	r1, [r2, #0]
 8005268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800526c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005270:	2301      	movs	r3, #1
 8005272:	e08c      	b.n	800538e <_printf_i+0x1be>
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6011      	str	r1, [r2, #0]
 8005278:	f010 0f40 	tst.w	r0, #64	; 0x40
 800527c:	bf18      	it	ne
 800527e:	b21b      	sxthne	r3, r3
 8005280:	e7cf      	b.n	8005222 <_printf_i+0x52>
 8005282:	6813      	ldr	r3, [r2, #0]
 8005284:	6825      	ldr	r5, [r4, #0]
 8005286:	1d18      	adds	r0, r3, #4
 8005288:	6010      	str	r0, [r2, #0]
 800528a:	0628      	lsls	r0, r5, #24
 800528c:	d501      	bpl.n	8005292 <_printf_i+0xc2>
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	e002      	b.n	8005298 <_printf_i+0xc8>
 8005292:	0668      	lsls	r0, r5, #25
 8005294:	d5fb      	bpl.n	800528e <_printf_i+0xbe>
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	4854      	ldr	r0, [pc, #336]	; (80053ec <_printf_i+0x21c>)
 800529a:	296f      	cmp	r1, #111	; 0x6f
 800529c:	bf14      	ite	ne
 800529e:	220a      	movne	r2, #10
 80052a0:	2208      	moveq	r2, #8
 80052a2:	2100      	movs	r1, #0
 80052a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052a8:	6865      	ldr	r5, [r4, #4]
 80052aa:	60a5      	str	r5, [r4, #8]
 80052ac:	2d00      	cmp	r5, #0
 80052ae:	f2c0 8095 	blt.w	80053dc <_printf_i+0x20c>
 80052b2:	6821      	ldr	r1, [r4, #0]
 80052b4:	f021 0104 	bic.w	r1, r1, #4
 80052b8:	6021      	str	r1, [r4, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d13d      	bne.n	800533a <_printf_i+0x16a>
 80052be:	2d00      	cmp	r5, #0
 80052c0:	f040 808e 	bne.w	80053e0 <_printf_i+0x210>
 80052c4:	4665      	mov	r5, ip
 80052c6:	2a08      	cmp	r2, #8
 80052c8:	d10b      	bne.n	80052e2 <_printf_i+0x112>
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	07db      	lsls	r3, r3, #31
 80052ce:	d508      	bpl.n	80052e2 <_printf_i+0x112>
 80052d0:	6923      	ldr	r3, [r4, #16]
 80052d2:	6862      	ldr	r2, [r4, #4]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	bfde      	ittt	le
 80052d8:	2330      	movle	r3, #48	; 0x30
 80052da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052e2:	ebac 0305 	sub.w	r3, ip, r5
 80052e6:	6123      	str	r3, [r4, #16]
 80052e8:	f8cd 8000 	str.w	r8, [sp]
 80052ec:	463b      	mov	r3, r7
 80052ee:	aa03      	add	r2, sp, #12
 80052f0:	4621      	mov	r1, r4
 80052f2:	4630      	mov	r0, r6
 80052f4:	f7ff fef6 	bl	80050e4 <_printf_common>
 80052f8:	3001      	adds	r0, #1
 80052fa:	d14d      	bne.n	8005398 <_printf_i+0x1c8>
 80052fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005300:	b005      	add	sp, #20
 8005302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005306:	4839      	ldr	r0, [pc, #228]	; (80053ec <_printf_i+0x21c>)
 8005308:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800530c:	6813      	ldr	r3, [r2, #0]
 800530e:	6821      	ldr	r1, [r4, #0]
 8005310:	1d1d      	adds	r5, r3, #4
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6015      	str	r5, [r2, #0]
 8005316:	060a      	lsls	r2, r1, #24
 8005318:	d50b      	bpl.n	8005332 <_printf_i+0x162>
 800531a:	07ca      	lsls	r2, r1, #31
 800531c:	bf44      	itt	mi
 800531e:	f041 0120 	orrmi.w	r1, r1, #32
 8005322:	6021      	strmi	r1, [r4, #0]
 8005324:	b91b      	cbnz	r3, 800532e <_printf_i+0x15e>
 8005326:	6822      	ldr	r2, [r4, #0]
 8005328:	f022 0220 	bic.w	r2, r2, #32
 800532c:	6022      	str	r2, [r4, #0]
 800532e:	2210      	movs	r2, #16
 8005330:	e7b7      	b.n	80052a2 <_printf_i+0xd2>
 8005332:	064d      	lsls	r5, r1, #25
 8005334:	bf48      	it	mi
 8005336:	b29b      	uxthmi	r3, r3
 8005338:	e7ef      	b.n	800531a <_printf_i+0x14a>
 800533a:	4665      	mov	r5, ip
 800533c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005340:	fb02 3311 	mls	r3, r2, r1, r3
 8005344:	5cc3      	ldrb	r3, [r0, r3]
 8005346:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800534a:	460b      	mov	r3, r1
 800534c:	2900      	cmp	r1, #0
 800534e:	d1f5      	bne.n	800533c <_printf_i+0x16c>
 8005350:	e7b9      	b.n	80052c6 <_printf_i+0xf6>
 8005352:	6813      	ldr	r3, [r2, #0]
 8005354:	6825      	ldr	r5, [r4, #0]
 8005356:	6961      	ldr	r1, [r4, #20]
 8005358:	1d18      	adds	r0, r3, #4
 800535a:	6010      	str	r0, [r2, #0]
 800535c:	0628      	lsls	r0, r5, #24
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	d501      	bpl.n	8005366 <_printf_i+0x196>
 8005362:	6019      	str	r1, [r3, #0]
 8005364:	e002      	b.n	800536c <_printf_i+0x19c>
 8005366:	066a      	lsls	r2, r5, #25
 8005368:	d5fb      	bpl.n	8005362 <_printf_i+0x192>
 800536a:	8019      	strh	r1, [r3, #0]
 800536c:	2300      	movs	r3, #0
 800536e:	6123      	str	r3, [r4, #16]
 8005370:	4665      	mov	r5, ip
 8005372:	e7b9      	b.n	80052e8 <_printf_i+0x118>
 8005374:	6813      	ldr	r3, [r2, #0]
 8005376:	1d19      	adds	r1, r3, #4
 8005378:	6011      	str	r1, [r2, #0]
 800537a:	681d      	ldr	r5, [r3, #0]
 800537c:	6862      	ldr	r2, [r4, #4]
 800537e:	2100      	movs	r1, #0
 8005380:	4628      	mov	r0, r5
 8005382:	f7fa ff2d 	bl	80001e0 <memchr>
 8005386:	b108      	cbz	r0, 800538c <_printf_i+0x1bc>
 8005388:	1b40      	subs	r0, r0, r5
 800538a:	6060      	str	r0, [r4, #4]
 800538c:	6863      	ldr	r3, [r4, #4]
 800538e:	6123      	str	r3, [r4, #16]
 8005390:	2300      	movs	r3, #0
 8005392:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005396:	e7a7      	b.n	80052e8 <_printf_i+0x118>
 8005398:	6923      	ldr	r3, [r4, #16]
 800539a:	462a      	mov	r2, r5
 800539c:	4639      	mov	r1, r7
 800539e:	4630      	mov	r0, r6
 80053a0:	47c0      	blx	r8
 80053a2:	3001      	adds	r0, #1
 80053a4:	d0aa      	beq.n	80052fc <_printf_i+0x12c>
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	079b      	lsls	r3, r3, #30
 80053aa:	d413      	bmi.n	80053d4 <_printf_i+0x204>
 80053ac:	68e0      	ldr	r0, [r4, #12]
 80053ae:	9b03      	ldr	r3, [sp, #12]
 80053b0:	4298      	cmp	r0, r3
 80053b2:	bfb8      	it	lt
 80053b4:	4618      	movlt	r0, r3
 80053b6:	e7a3      	b.n	8005300 <_printf_i+0x130>
 80053b8:	2301      	movs	r3, #1
 80053ba:	464a      	mov	r2, r9
 80053bc:	4639      	mov	r1, r7
 80053be:	4630      	mov	r0, r6
 80053c0:	47c0      	blx	r8
 80053c2:	3001      	adds	r0, #1
 80053c4:	d09a      	beq.n	80052fc <_printf_i+0x12c>
 80053c6:	3501      	adds	r5, #1
 80053c8:	68e3      	ldr	r3, [r4, #12]
 80053ca:	9a03      	ldr	r2, [sp, #12]
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	42ab      	cmp	r3, r5
 80053d0:	dcf2      	bgt.n	80053b8 <_printf_i+0x1e8>
 80053d2:	e7eb      	b.n	80053ac <_printf_i+0x1dc>
 80053d4:	2500      	movs	r5, #0
 80053d6:	f104 0919 	add.w	r9, r4, #25
 80053da:	e7f5      	b.n	80053c8 <_printf_i+0x1f8>
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1ac      	bne.n	800533a <_printf_i+0x16a>
 80053e0:	7803      	ldrb	r3, [r0, #0]
 80053e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053ea:	e76c      	b.n	80052c6 <_printf_i+0xf6>
 80053ec:	08005719 	.word	0x08005719
 80053f0:	0800572a 	.word	0x0800572a

080053f4 <_sbrk_r>:
 80053f4:	b538      	push	{r3, r4, r5, lr}
 80053f6:	4c06      	ldr	r4, [pc, #24]	; (8005410 <_sbrk_r+0x1c>)
 80053f8:	2300      	movs	r3, #0
 80053fa:	4605      	mov	r5, r0
 80053fc:	4608      	mov	r0, r1
 80053fe:	6023      	str	r3, [r4, #0]
 8005400:	f7fb fb2c 	bl	8000a5c <_sbrk>
 8005404:	1c43      	adds	r3, r0, #1
 8005406:	d102      	bne.n	800540e <_sbrk_r+0x1a>
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	b103      	cbz	r3, 800540e <_sbrk_r+0x1a>
 800540c:	602b      	str	r3, [r5, #0]
 800540e:	bd38      	pop	{r3, r4, r5, pc}
 8005410:	200001c0 	.word	0x200001c0

08005414 <__sread>:
 8005414:	b510      	push	{r4, lr}
 8005416:	460c      	mov	r4, r1
 8005418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800541c:	f000 f8e0 	bl	80055e0 <_read_r>
 8005420:	2800      	cmp	r0, #0
 8005422:	bfab      	itete	ge
 8005424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005426:	89a3      	ldrhlt	r3, [r4, #12]
 8005428:	181b      	addge	r3, r3, r0
 800542a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800542e:	bfac      	ite	ge
 8005430:	6563      	strge	r3, [r4, #84]	; 0x54
 8005432:	81a3      	strhlt	r3, [r4, #12]
 8005434:	bd10      	pop	{r4, pc}

08005436 <__swrite>:
 8005436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800543a:	461f      	mov	r7, r3
 800543c:	898b      	ldrh	r3, [r1, #12]
 800543e:	05db      	lsls	r3, r3, #23
 8005440:	4605      	mov	r5, r0
 8005442:	460c      	mov	r4, r1
 8005444:	4616      	mov	r6, r2
 8005446:	d505      	bpl.n	8005454 <__swrite+0x1e>
 8005448:	2302      	movs	r3, #2
 800544a:	2200      	movs	r2, #0
 800544c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005450:	f000 f868 	bl	8005524 <_lseek_r>
 8005454:	89a3      	ldrh	r3, [r4, #12]
 8005456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800545a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800545e:	81a3      	strh	r3, [r4, #12]
 8005460:	4632      	mov	r2, r6
 8005462:	463b      	mov	r3, r7
 8005464:	4628      	mov	r0, r5
 8005466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800546a:	f000 b817 	b.w	800549c <_write_r>

0800546e <__sseek>:
 800546e:	b510      	push	{r4, lr}
 8005470:	460c      	mov	r4, r1
 8005472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005476:	f000 f855 	bl	8005524 <_lseek_r>
 800547a:	1c43      	adds	r3, r0, #1
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	bf15      	itete	ne
 8005480:	6560      	strne	r0, [r4, #84]	; 0x54
 8005482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800548a:	81a3      	strheq	r3, [r4, #12]
 800548c:	bf18      	it	ne
 800548e:	81a3      	strhne	r3, [r4, #12]
 8005490:	bd10      	pop	{r4, pc}

08005492 <__sclose>:
 8005492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005496:	f000 b813 	b.w	80054c0 <_close_r>
	...

0800549c <_write_r>:
 800549c:	b538      	push	{r3, r4, r5, lr}
 800549e:	4c07      	ldr	r4, [pc, #28]	; (80054bc <_write_r+0x20>)
 80054a0:	4605      	mov	r5, r0
 80054a2:	4608      	mov	r0, r1
 80054a4:	4611      	mov	r1, r2
 80054a6:	2200      	movs	r2, #0
 80054a8:	6022      	str	r2, [r4, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	f7fb f960 	bl	8000770 <_write>
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	d102      	bne.n	80054ba <_write_r+0x1e>
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	b103      	cbz	r3, 80054ba <_write_r+0x1e>
 80054b8:	602b      	str	r3, [r5, #0]
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
 80054bc:	200001c0 	.word	0x200001c0

080054c0 <_close_r>:
 80054c0:	b538      	push	{r3, r4, r5, lr}
 80054c2:	4c06      	ldr	r4, [pc, #24]	; (80054dc <_close_r+0x1c>)
 80054c4:	2300      	movs	r3, #0
 80054c6:	4605      	mov	r5, r0
 80054c8:	4608      	mov	r0, r1
 80054ca:	6023      	str	r3, [r4, #0]
 80054cc:	f7fb fa91 	bl	80009f2 <_close>
 80054d0:	1c43      	adds	r3, r0, #1
 80054d2:	d102      	bne.n	80054da <_close_r+0x1a>
 80054d4:	6823      	ldr	r3, [r4, #0]
 80054d6:	b103      	cbz	r3, 80054da <_close_r+0x1a>
 80054d8:	602b      	str	r3, [r5, #0]
 80054da:	bd38      	pop	{r3, r4, r5, pc}
 80054dc:	200001c0 	.word	0x200001c0

080054e0 <_fstat_r>:
 80054e0:	b538      	push	{r3, r4, r5, lr}
 80054e2:	4c07      	ldr	r4, [pc, #28]	; (8005500 <_fstat_r+0x20>)
 80054e4:	2300      	movs	r3, #0
 80054e6:	4605      	mov	r5, r0
 80054e8:	4608      	mov	r0, r1
 80054ea:	4611      	mov	r1, r2
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	f7fb fa8c 	bl	8000a0a <_fstat>
 80054f2:	1c43      	adds	r3, r0, #1
 80054f4:	d102      	bne.n	80054fc <_fstat_r+0x1c>
 80054f6:	6823      	ldr	r3, [r4, #0]
 80054f8:	b103      	cbz	r3, 80054fc <_fstat_r+0x1c>
 80054fa:	602b      	str	r3, [r5, #0]
 80054fc:	bd38      	pop	{r3, r4, r5, pc}
 80054fe:	bf00      	nop
 8005500:	200001c0 	.word	0x200001c0

08005504 <_isatty_r>:
 8005504:	b538      	push	{r3, r4, r5, lr}
 8005506:	4c06      	ldr	r4, [pc, #24]	; (8005520 <_isatty_r+0x1c>)
 8005508:	2300      	movs	r3, #0
 800550a:	4605      	mov	r5, r0
 800550c:	4608      	mov	r0, r1
 800550e:	6023      	str	r3, [r4, #0]
 8005510:	f7fb fa8b 	bl	8000a2a <_isatty>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d102      	bne.n	800551e <_isatty_r+0x1a>
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	b103      	cbz	r3, 800551e <_isatty_r+0x1a>
 800551c:	602b      	str	r3, [r5, #0]
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	200001c0 	.word	0x200001c0

08005524 <_lseek_r>:
 8005524:	b538      	push	{r3, r4, r5, lr}
 8005526:	4c07      	ldr	r4, [pc, #28]	; (8005544 <_lseek_r+0x20>)
 8005528:	4605      	mov	r5, r0
 800552a:	4608      	mov	r0, r1
 800552c:	4611      	mov	r1, r2
 800552e:	2200      	movs	r2, #0
 8005530:	6022      	str	r2, [r4, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	f7fb fa84 	bl	8000a40 <_lseek>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	d102      	bne.n	8005542 <_lseek_r+0x1e>
 800553c:	6823      	ldr	r3, [r4, #0]
 800553e:	b103      	cbz	r3, 8005542 <_lseek_r+0x1e>
 8005540:	602b      	str	r3, [r5, #0]
 8005542:	bd38      	pop	{r3, r4, r5, pc}
 8005544:	200001c0 	.word	0x200001c0

08005548 <memcpy>:
 8005548:	b510      	push	{r4, lr}
 800554a:	1e43      	subs	r3, r0, #1
 800554c:	440a      	add	r2, r1
 800554e:	4291      	cmp	r1, r2
 8005550:	d100      	bne.n	8005554 <memcpy+0xc>
 8005552:	bd10      	pop	{r4, pc}
 8005554:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005558:	f803 4f01 	strb.w	r4, [r3, #1]!
 800555c:	e7f7      	b.n	800554e <memcpy+0x6>

0800555e <memmove>:
 800555e:	4288      	cmp	r0, r1
 8005560:	b510      	push	{r4, lr}
 8005562:	eb01 0302 	add.w	r3, r1, r2
 8005566:	d807      	bhi.n	8005578 <memmove+0x1a>
 8005568:	1e42      	subs	r2, r0, #1
 800556a:	4299      	cmp	r1, r3
 800556c:	d00a      	beq.n	8005584 <memmove+0x26>
 800556e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005572:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005576:	e7f8      	b.n	800556a <memmove+0xc>
 8005578:	4283      	cmp	r3, r0
 800557a:	d9f5      	bls.n	8005568 <memmove+0xa>
 800557c:	1881      	adds	r1, r0, r2
 800557e:	1ad2      	subs	r2, r2, r3
 8005580:	42d3      	cmn	r3, r2
 8005582:	d100      	bne.n	8005586 <memmove+0x28>
 8005584:	bd10      	pop	{r4, pc}
 8005586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800558a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800558e:	e7f7      	b.n	8005580 <memmove+0x22>

08005590 <__malloc_lock>:
 8005590:	4770      	bx	lr

08005592 <__malloc_unlock>:
 8005592:	4770      	bx	lr

08005594 <_realloc_r>:
 8005594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005596:	4607      	mov	r7, r0
 8005598:	4614      	mov	r4, r2
 800559a:	460e      	mov	r6, r1
 800559c:	b921      	cbnz	r1, 80055a8 <_realloc_r+0x14>
 800559e:	4611      	mov	r1, r2
 80055a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80055a4:	f7ff bbf2 	b.w	8004d8c <_malloc_r>
 80055a8:	b922      	cbnz	r2, 80055b4 <_realloc_r+0x20>
 80055aa:	f7ff fba1 	bl	8004cf0 <_free_r>
 80055ae:	4625      	mov	r5, r4
 80055b0:	4628      	mov	r0, r5
 80055b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055b4:	f000 f826 	bl	8005604 <_malloc_usable_size_r>
 80055b8:	42a0      	cmp	r0, r4
 80055ba:	d20f      	bcs.n	80055dc <_realloc_r+0x48>
 80055bc:	4621      	mov	r1, r4
 80055be:	4638      	mov	r0, r7
 80055c0:	f7ff fbe4 	bl	8004d8c <_malloc_r>
 80055c4:	4605      	mov	r5, r0
 80055c6:	2800      	cmp	r0, #0
 80055c8:	d0f2      	beq.n	80055b0 <_realloc_r+0x1c>
 80055ca:	4631      	mov	r1, r6
 80055cc:	4622      	mov	r2, r4
 80055ce:	f7ff ffbb 	bl	8005548 <memcpy>
 80055d2:	4631      	mov	r1, r6
 80055d4:	4638      	mov	r0, r7
 80055d6:	f7ff fb8b 	bl	8004cf0 <_free_r>
 80055da:	e7e9      	b.n	80055b0 <_realloc_r+0x1c>
 80055dc:	4635      	mov	r5, r6
 80055de:	e7e7      	b.n	80055b0 <_realloc_r+0x1c>

080055e0 <_read_r>:
 80055e0:	b538      	push	{r3, r4, r5, lr}
 80055e2:	4c07      	ldr	r4, [pc, #28]	; (8005600 <_read_r+0x20>)
 80055e4:	4605      	mov	r5, r0
 80055e6:	4608      	mov	r0, r1
 80055e8:	4611      	mov	r1, r2
 80055ea:	2200      	movs	r2, #0
 80055ec:	6022      	str	r2, [r4, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	f7fb f9e2 	bl	80009b8 <_read>
 80055f4:	1c43      	adds	r3, r0, #1
 80055f6:	d102      	bne.n	80055fe <_read_r+0x1e>
 80055f8:	6823      	ldr	r3, [r4, #0]
 80055fa:	b103      	cbz	r3, 80055fe <_read_r+0x1e>
 80055fc:	602b      	str	r3, [r5, #0]
 80055fe:	bd38      	pop	{r3, r4, r5, pc}
 8005600:	200001c0 	.word	0x200001c0

08005604 <_malloc_usable_size_r>:
 8005604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005608:	1f18      	subs	r0, r3, #4
 800560a:	2b00      	cmp	r3, #0
 800560c:	bfbc      	itt	lt
 800560e:	580b      	ldrlt	r3, [r1, r0]
 8005610:	18c0      	addlt	r0, r0, r3
 8005612:	4770      	bx	lr

08005614 <_init>:
 8005614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005616:	bf00      	nop
 8005618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561a:	bc08      	pop	{r3}
 800561c:	469e      	mov	lr, r3
 800561e:	4770      	bx	lr

08005620 <_fini>:
 8005620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005622:	bf00      	nop
 8005624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005626:	bc08      	pop	{r3}
 8005628:	469e      	mov	lr, r3
 800562a:	4770      	bx	lr
