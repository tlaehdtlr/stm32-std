
SPI_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a88  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004c14  08004c14  00014c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d00  08004d00  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004d00  08004d00  00014d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d08  08004d08  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d08  08004d08  00014d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d0c  08004d0c  00014d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000070  08004d80  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08004d80  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e96e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000229c  00000000  00000000  0002ea0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c28  00000000  00000000  00030cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af0  00000000  00000000  000318d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b4ca  00000000  00000000  000323c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b15c  00000000  00000000  0004d892  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a38d1  00000000  00000000  000589ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fc2bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000356c  00000000  00000000  000fc33c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000070 	.word	0x20000070
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004bfc 	.word	0x08004bfc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000074 	.word	0x20000074
 80001c8:	08004bfc 	.word	0x08004bfc

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d2:	4b18      	ldr	r3, [pc, #96]	; (8000534 <MX_DMA_Init+0x68>)
 80004d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004d6:	4a17      	ldr	r2, [pc, #92]	; (8000534 <MX_DMA_Init+0x68>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6493      	str	r3, [r2, #72]	; 0x48
 80004de:	4b15      	ldr	r3, [pc, #84]	; (8000534 <MX_DMA_Init+0x68>)
 80004e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2100      	movs	r1, #0
 80004ee:	200c      	movs	r0, #12
 80004f0:	f000 fea9 	bl	8001246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80004f4:	200c      	movs	r0, #12
 80004f6:	f000 fec2 	bl	800127e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2100      	movs	r1, #0
 80004fe:	200d      	movs	r0, #13
 8000500:	f000 fea1 	bl	8001246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000504:	200d      	movs	r0, #13
 8000506:	f000 feba 	bl	800127e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800050a:	2200      	movs	r2, #0
 800050c:	2100      	movs	r1, #0
 800050e:	200e      	movs	r0, #14
 8000510:	f000 fe99 	bl	8001246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000514:	200e      	movs	r0, #14
 8000516:	f000 feb2 	bl	800127e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800051a:	2200      	movs	r2, #0
 800051c:	2100      	movs	r1, #0
 800051e:	200f      	movs	r0, #15
 8000520:	f000 fe91 	bl	8001246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000524:	200f      	movs	r0, #15
 8000526:	f000 feaa 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40021000 	.word	0x40021000

08000538 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053e:	f107 030c 	add.w	r3, r7, #12
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
 800054c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800054e:	4b29      	ldr	r3, [pc, #164]	; (80005f4 <MX_GPIO_Init+0xbc>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	4a28      	ldr	r2, [pc, #160]	; (80005f4 <MX_GPIO_Init+0xbc>)
 8000554:	f043 0304 	orr.w	r3, r3, #4
 8000558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800055a:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <MX_GPIO_Init+0xbc>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	f003 0304 	and.w	r3, r3, #4
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <MX_GPIO_Init+0xbc>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	4a22      	ldr	r2, [pc, #136]	; (80005f4 <MX_GPIO_Init+0xbc>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000572:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <MX_GPIO_Init+0xbc>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <MX_GPIO_Init+0xbc>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4a1c      	ldr	r2, [pc, #112]	; (80005f4 <MX_GPIO_Init+0xbc>)
 8000584:	f043 0302 	orr.w	r3, r3, #2
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058a:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <MX_GPIO_Init+0xbc>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0302 	and.w	r3, r3, #2
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059c:	4816      	ldr	r0, [pc, #88]	; (80005f8 <MX_GPIO_Init+0xc0>)
 800059e:	f001 f9f3 	bl	8001988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <MX_GPIO_Init+0xc4>)
 80005aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	4619      	mov	r1, r3
 80005b6:	4812      	ldr	r0, [pc, #72]	; (8000600 <MX_GPIO_Init+0xc8>)
 80005b8:	f001 f874 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ce:	f107 030c 	add.w	r3, r7, #12
 80005d2:	4619      	mov	r1, r3
 80005d4:	4808      	ldr	r0, [pc, #32]	; (80005f8 <MX_GPIO_Init+0xc0>)
 80005d6:	f001 f865 	bl	80016a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	2100      	movs	r1, #0
 80005de:	2028      	movs	r0, #40	; 0x28
 80005e0:	f000 fe31 	bl	8001246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005e4:	2028      	movs	r0, #40	; 0x28
 80005e6:	f000 fe4a 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 80005ea:	bf00      	nop
 80005ec:	3720      	adds	r7, #32
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000
 80005f8:	48000400 	.word	0x48000400
 80005fc:	10210000 	.word	0x10210000
 8000600:	48000800 	.word	0x48000800

08000604 <__io_putchar>:
#else
    #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800060c:	1d39      	adds	r1, r7, #4
 800060e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000612:	2201      	movs	r2, #1
 8000614:	4803      	ldr	r0, [pc, #12]	; (8000624 <__io_putchar+0x20>)
 8000616:	f003 fa2b 	bl	8003a70 <HAL_UART_Transmit>
  return ch;
 800061a:	687b      	ldr	r3, [r7, #4]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000280 	.word	0x20000280

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b5b0      	push	{r4, r5, r7, lr}
 800062a:	b09c      	sub	sp, #112	; 0x70
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062e:	f000 fc98 	bl	8000f62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000632:	f000 f867 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000636:	f7ff ff7f 	bl	8000538 <MX_GPIO_Init>
  MX_DMA_Init();
 800063a:	f7ff ff47 	bl	80004cc <MX_DMA_Init>
  MX_SPI1_Init();
 800063e:	f000 f8dd 	bl	80007fc <MX_SPI1_Init>
  MX_SPI2_Init();
 8000642:	f000 f919 	bl	8000878 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000646:	f000 fbf1 	bl	8000e2c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Hi \r\n");
 800064a:	4828      	ldr	r0, [pc, #160]	; (80006ec <main+0xc4>)
 800064c:	f003 feca 	bl	80043e4 <puts>
  {
  }

#else

  uint8_t master_buffer_tx[] = "STM32L412RB SPI Master Tx";
 8000650:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <main+0xc8>)
 8000652:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000656:	461d      	mov	r5, r3
 8000658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000660:	c403      	stmia	r4!, {r0, r1}
 8000662:	8022      	strh	r2, [r4, #0]
  uint8_t slave_buffer_tx[] = "STM32L412RB SPI Slave TX";
 8000664:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <main+0xcc>)
 8000666:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800066a:	461d      	mov	r5, r3
 800066c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000670:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000674:	c403      	stmia	r4!, {r0, r1}
 8000676:	7022      	strb	r2, [r4, #0]

  /* Master, Slave Rx Buffer */
  uint8_t master_buffer_rx[SLAVE_TX_SIZE] = {0,};
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
 8000688:	615a      	str	r2, [r3, #20]
  uint8_t slave_buffer_rx[MASTER_TX_SIZE] = {0,};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
 8000698:	615a      	str	r2, [r3, #20]
 800069a:	761a      	strb	r2, [r3, #24]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800069c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a0:	4815      	ldr	r0, [pc, #84]	; (80006f8 <main+0xd0>)
 80006a2:	f001 f989 	bl	80019b8 <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 80006a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006aa:	f000 fccf 	bl	800104c <HAL_Delay>
//    if (HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)master_buffer_tx, (uint8_t*)master_buffer_rx, MASTER_TX_SIZE+SLAVE_TX_SIZE) != HAL_OK)
    if (HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)master_buffer_tx, MASTER_TX_SIZE) != HAL_OK)
 80006ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006b2:	2219      	movs	r2, #25
 80006b4:	4619      	mov	r1, r3
 80006b6:	4811      	ldr	r0, [pc, #68]	; (80006fc <main+0xd4>)
 80006b8:	f002 fab4 	bl	8002c24 <HAL_SPI_Transmit_DMA>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <main+0x9e>
    {
      Error_Handler();
 80006c2:	f000 f896 	bl	80007f2 <Error_Handler>
    }
    HAL_DMA_STATE_CHANGE(&hspi1);
 80006c6:	480d      	ldr	r0, [pc, #52]	; (80006fc <main+0xd4>)
 80006c8:	f000 f885 	bl	80007d6 <HAL_DMA_STATE_CHANGE>
//    if (HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)slave_buffer_tx, (uint8_t*)slave_buffer_rx, MASTER_TX_SIZE+SLAVE_TX_SIZE) != HAL_OK)
    if (HAL_SPI_Receive_DMA(&hspi2, (uint8_t*)slave_buffer_rx, MASTER_TX_SIZE) != HAL_OK)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2219      	movs	r2, #25
 80006d0:	4619      	mov	r1, r3
 80006d2:	480b      	ldr	r0, [pc, #44]	; (8000700 <main+0xd8>)
 80006d4:	f002 fb9a 	bl	8002e0c <HAL_SPI_Receive_DMA>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <main+0xba>
    {
      Error_Handler();
 80006de:	f000 f888 	bl	80007f2 <Error_Handler>
    }
    HAL_DMA_STATE_CHANGE(&hspi2);
 80006e2:	4807      	ldr	r0, [pc, #28]	; (8000700 <main+0xd8>)
 80006e4:	f000 f877 	bl	80007d6 <HAL_DMA_STATE_CHANGE>
  {
 80006e8:	e7d8      	b.n	800069c <main+0x74>
 80006ea:	bf00      	nop
 80006ec:	08004c14 	.word	0x08004c14
 80006f0:	08004c1c 	.word	0x08004c1c
 80006f4:	08004c38 	.word	0x08004c38
 80006f8:	48000400 	.word	0x48000400
 80006fc:	20000144 	.word	0x20000144
 8000700:	20000098 	.word	0x20000098

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b0a4      	sub	sp, #144	; 0x90
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800070e:	2244      	movs	r2, #68	; 0x44
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f003 fe02 	bl	800431c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2234      	movs	r2, #52	; 0x34
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f003 fdf4 	bl	800431c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000734:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000738:	f001 f98a 	bl	8001a50 <HAL_PWREx_ControlVoltageScaling>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000742:	f000 f856 	bl	80007f2 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000746:	2310      	movs	r3, #16
 8000748:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800074a:	2301      	movs	r3, #1
 800074c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000752:	2360      	movs	r3, #96	; 0x60
 8000754:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800075a:	2301      	movs	r3, #1
 800075c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800075e:	2301      	movs	r3, #1
 8000760:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000764:	2319      	movs	r3, #25
 8000766:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800076a:	2302      	movs	r3, #2
 800076c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000770:	2302      	movs	r3, #2
 8000772:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000776:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800077a:	4618      	mov	r0, r3
 800077c:	f001 f9be 	bl	8001afc <HAL_RCC_OscConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000786:	f000 f834 	bl	80007f2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	230f      	movs	r3, #15
 800078c:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078e:	2303      	movs	r3, #3
 8000790:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800079e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007a2:	2103      	movs	r1, #3
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 fe0f 	bl	80023c8 <HAL_RCC_ClockConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80007b0:	f000 f81f 	bl	80007f2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	4618      	mov	r0, r3
 80007c0:	f002 f806 	bl	80027d0 <HAL_RCCEx_PeriphCLKConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007ca:	f000 f812 	bl	80007f2 <Error_Handler>
  }
}
 80007ce:	bf00      	nop
 80007d0:	3790      	adds	r7, #144	; 0x90
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <HAL_DMA_STATE_CHANGE>:

/* USER CODE BEGIN 4 */
void HAL_DMA_STATE_CHANGE(SPI_HandleTypeDef *hspi)
{
 80007d6:	b480      	push	{r7}
 80007d8:	b083      	sub	sp, #12
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2201      	movs	r2, #1
 80007e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f6:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <Error_Handler+0x6>
	...

080007fc <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <MX_SPI1_Init+0x74>)
 8000802:	4a1c      	ldr	r2, [pc, #112]	; (8000874 <MX_SPI1_Init+0x78>)
 8000804:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000806:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <MX_SPI1_Init+0x74>)
 8000808:	f44f 7282 	mov.w	r2, #260	; 0x104
 800080c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800080e:	4b18      	ldr	r3, [pc, #96]	; (8000870 <MX_SPI1_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <MX_SPI1_Init+0x74>)
 8000816:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800081a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_SPI1_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <MX_SPI1_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_SPI1_Init+0x74>)
 800082a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800082e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_SPI1_Init+0x74>)
 8000832:	2220      	movs	r2, #32
 8000834:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_SPI1_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_SPI1_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_SPI1_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_SPI1_Init+0x74>)
 800084a:	2207      	movs	r2, #7
 800084c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <MX_SPI1_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_SPI1_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_SPI1_Init+0x74>)
 800085c:	f002 f93e 	bl	8002adc <HAL_SPI_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000866:	f7ff ffc4 	bl	80007f2 <Error_Handler>
  }

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000144 	.word	0x20000144
 8000874:	40013000 	.word	0x40013000

08000878 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800087c:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_SPI2_Init+0x6c>)
 800087e:	4a1a      	ldr	r2, [pc, #104]	; (80008e8 <MX_SPI2_Init+0x70>)
 8000880:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_SPI2_Init+0x6c>)
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_SPI2_Init+0x6c>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_SPI2_Init+0x6c>)
 8000890:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000894:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_SPI2_Init+0x6c>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_SPI2_Init+0x6c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MX_SPI2_Init+0x6c>)
 80008a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_SPI2_Init+0x6c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_SPI2_Init+0x6c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_SPI2_Init+0x6c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_SPI2_Init+0x6c>)
 80008be:	2207      	movs	r2, #7
 80008c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_SPI2_Init+0x6c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_SPI2_Init+0x6c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_SPI2_Init+0x6c>)
 80008d0:	f002 f904 	bl	8002adc <HAL_SPI_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 80008da:	f7ff ff8a 	bl	80007f2 <Error_Handler>
  }

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000098 	.word	0x20000098
 80008e8:	40003800 	.word	0x40003800

080008ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	; 0x30
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a8f      	ldr	r2, [pc, #572]	; (8000b48 <HAL_SPI_MspInit+0x25c>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d17b      	bne.n	8000a06 <HAL_SPI_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800090e:	4b8f      	ldr	r3, [pc, #572]	; (8000b4c <HAL_SPI_MspInit+0x260>)
 8000910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000912:	4a8e      	ldr	r2, [pc, #568]	; (8000b4c <HAL_SPI_MspInit+0x260>)
 8000914:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000918:	6613      	str	r3, [r2, #96]	; 0x60
 800091a:	4b8c      	ldr	r3, [pc, #560]	; (8000b4c <HAL_SPI_MspInit+0x260>)
 800091c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000922:	61bb      	str	r3, [r7, #24]
 8000924:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b89      	ldr	r3, [pc, #548]	; (8000b4c <HAL_SPI_MspInit+0x260>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4a88      	ldr	r2, [pc, #544]	; (8000b4c <HAL_SPI_MspInit+0x260>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4b86      	ldr	r3, [pc, #536]	; (8000b4c <HAL_SPI_MspInit+0x260>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800093e:	23c2      	movs	r3, #194	; 0xc2
 8000940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800094e:	2305      	movs	r3, #5
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095c:	f000 fea2 	bl	80016a4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000960:	4b7b      	ldr	r3, [pc, #492]	; (8000b50 <HAL_SPI_MspInit+0x264>)
 8000962:	4a7c      	ldr	r2, [pc, #496]	; (8000b54 <HAL_SPI_MspInit+0x268>)
 8000964:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8000966:	4b7a      	ldr	r3, [pc, #488]	; (8000b50 <HAL_SPI_MspInit+0x264>)
 8000968:	2201      	movs	r2, #1
 800096a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800096c:	4b78      	ldr	r3, [pc, #480]	; (8000b50 <HAL_SPI_MspInit+0x264>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000972:	4b77      	ldr	r3, [pc, #476]	; (8000b50 <HAL_SPI_MspInit+0x264>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000978:	4b75      	ldr	r3, [pc, #468]	; (8000b50 <HAL_SPI_MspInit+0x264>)
 800097a:	2280      	movs	r2, #128	; 0x80
 800097c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800097e:	4b74      	ldr	r3, [pc, #464]	; (8000b50 <HAL_SPI_MspInit+0x264>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000984:	4b72      	ldr	r3, [pc, #456]	; (8000b50 <HAL_SPI_MspInit+0x264>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800098a:	4b71      	ldr	r3, [pc, #452]	; (8000b50 <HAL_SPI_MspInit+0x264>)
 800098c:	2200      	movs	r2, #0
 800098e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000990:	4b6f      	ldr	r3, [pc, #444]	; (8000b50 <HAL_SPI_MspInit+0x264>)
 8000992:	2200      	movs	r2, #0
 8000994:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000996:	486e      	ldr	r0, [pc, #440]	; (8000b50 <HAL_SPI_MspInit+0x264>)
 8000998:	f000 fc8c 	bl	80012b4 <HAL_DMA_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80009a2:	f7ff ff26 	bl	80007f2 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a69      	ldr	r2, [pc, #420]	; (8000b50 <HAL_SPI_MspInit+0x264>)
 80009aa:	659a      	str	r2, [r3, #88]	; 0x58
 80009ac:	4a68      	ldr	r2, [pc, #416]	; (8000b50 <HAL_SPI_MspInit+0x264>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80009b2:	4b69      	ldr	r3, [pc, #420]	; (8000b58 <HAL_SPI_MspInit+0x26c>)
 80009b4:	4a69      	ldr	r2, [pc, #420]	; (8000b5c <HAL_SPI_MspInit+0x270>)
 80009b6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80009b8:	4b67      	ldr	r3, [pc, #412]	; (8000b58 <HAL_SPI_MspInit+0x26c>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009be:	4b66      	ldr	r3, [pc, #408]	; (8000b58 <HAL_SPI_MspInit+0x26c>)
 80009c0:	2210      	movs	r2, #16
 80009c2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009c4:	4b64      	ldr	r3, [pc, #400]	; (8000b58 <HAL_SPI_MspInit+0x26c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009ca:	4b63      	ldr	r3, [pc, #396]	; (8000b58 <HAL_SPI_MspInit+0x26c>)
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009d0:	4b61      	ldr	r3, [pc, #388]	; (8000b58 <HAL_SPI_MspInit+0x26c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009d6:	4b60      	ldr	r3, [pc, #384]	; (8000b58 <HAL_SPI_MspInit+0x26c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80009dc:	4b5e      	ldr	r3, [pc, #376]	; (8000b58 <HAL_SPI_MspInit+0x26c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009e2:	4b5d      	ldr	r3, [pc, #372]	; (8000b58 <HAL_SPI_MspInit+0x26c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80009e8:	485b      	ldr	r0, [pc, #364]	; (8000b58 <HAL_SPI_MspInit+0x26c>)
 80009ea:	f000 fc63 	bl	80012b4 <HAL_DMA_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 80009f4:	f7ff fefd 	bl	80007f2 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a57      	ldr	r2, [pc, #348]	; (8000b58 <HAL_SPI_MspInit+0x26c>)
 80009fc:	655a      	str	r2, [r3, #84]	; 0x54
 80009fe:	4a56      	ldr	r2, [pc, #344]	; (8000b58 <HAL_SPI_MspInit+0x26c>)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a04:	e09c      	b.n	8000b40 <HAL_SPI_MspInit+0x254>
  else if(spiHandle->Instance==SPI2)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a55      	ldr	r2, [pc, #340]	; (8000b60 <HAL_SPI_MspInit+0x274>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	f040 8097 	bne.w	8000b40 <HAL_SPI_MspInit+0x254>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a12:	4b4e      	ldr	r3, [pc, #312]	; (8000b4c <HAL_SPI_MspInit+0x260>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a16:	4a4d      	ldr	r2, [pc, #308]	; (8000b4c <HAL_SPI_MspInit+0x260>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a1e:	4b4b      	ldr	r3, [pc, #300]	; (8000b4c <HAL_SPI_MspInit+0x260>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4b48      	ldr	r3, [pc, #288]	; (8000b4c <HAL_SPI_MspInit+0x260>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	4a47      	ldr	r2, [pc, #284]	; (8000b4c <HAL_SPI_MspInit+0x260>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a36:	4b45      	ldr	r3, [pc, #276]	; (8000b4c <HAL_SPI_MspInit+0x260>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	4b42      	ldr	r3, [pc, #264]	; (8000b4c <HAL_SPI_MspInit+0x260>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	4a41      	ldr	r2, [pc, #260]	; (8000b4c <HAL_SPI_MspInit+0x260>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4b3f      	ldr	r3, [pc, #252]	; (8000b4c <HAL_SPI_MspInit+0x260>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a5a:	230c      	movs	r3, #12
 8000a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a6a:	2305      	movs	r3, #5
 8000a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	483b      	ldr	r0, [pc, #236]	; (8000b64 <HAL_SPI_MspInit+0x278>)
 8000a76:	f000 fe15 	bl	80016a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a8c:	2305      	movs	r3, #5
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	4834      	ldr	r0, [pc, #208]	; (8000b68 <HAL_SPI_MspInit+0x27c>)
 8000a98:	f000 fe04 	bl	80016a4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8000a9c:	4b33      	ldr	r3, [pc, #204]	; (8000b6c <HAL_SPI_MspInit+0x280>)
 8000a9e:	4a34      	ldr	r2, [pc, #208]	; (8000b70 <HAL_SPI_MspInit+0x284>)
 8000aa0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 8000aa2:	4b32      	ldr	r3, [pc, #200]	; (8000b6c <HAL_SPI_MspInit+0x280>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aa8:	4b30      	ldr	r3, [pc, #192]	; (8000b6c <HAL_SPI_MspInit+0x280>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aae:	4b2f      	ldr	r3, [pc, #188]	; (8000b6c <HAL_SPI_MspInit+0x280>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <HAL_SPI_MspInit+0x280>)
 8000ab6:	2280      	movs	r2, #128	; 0x80
 8000ab8:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aba:	4b2c      	ldr	r3, [pc, #176]	; (8000b6c <HAL_SPI_MspInit+0x280>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ac0:	4b2a      	ldr	r3, [pc, #168]	; (8000b6c <HAL_SPI_MspInit+0x280>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000ac6:	4b29      	ldr	r3, [pc, #164]	; (8000b6c <HAL_SPI_MspInit+0x280>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000acc:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <HAL_SPI_MspInit+0x280>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000ad2:	4826      	ldr	r0, [pc, #152]	; (8000b6c <HAL_SPI_MspInit+0x280>)
 8000ad4:	f000 fbee 	bl	80012b4 <HAL_DMA_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_SPI_MspInit+0x1f6>
      Error_Handler();
 8000ade:	f7ff fe88 	bl	80007f2 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a21      	ldr	r2, [pc, #132]	; (8000b6c <HAL_SPI_MspInit+0x280>)
 8000ae6:	659a      	str	r2, [r3, #88]	; 0x58
 8000ae8:	4a20      	ldr	r2, [pc, #128]	; (8000b6c <HAL_SPI_MspInit+0x280>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000aee:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <HAL_SPI_MspInit+0x288>)
 8000af0:	4a21      	ldr	r2, [pc, #132]	; (8000b78 <HAL_SPI_MspInit+0x28c>)
 8000af2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8000af4:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <HAL_SPI_MspInit+0x288>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000afa:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <HAL_SPI_MspInit+0x288>)
 8000afc:	2210      	movs	r2, #16
 8000afe:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b00:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <HAL_SPI_MspInit+0x288>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b06:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <HAL_SPI_MspInit+0x288>)
 8000b08:	2280      	movs	r2, #128	; 0x80
 8000b0a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <HAL_SPI_MspInit+0x288>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <HAL_SPI_MspInit+0x288>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000b18:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <HAL_SPI_MspInit+0x288>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <HAL_SPI_MspInit+0x288>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000b24:	4813      	ldr	r0, [pc, #76]	; (8000b74 <HAL_SPI_MspInit+0x288>)
 8000b26:	f000 fbc5 	bl	80012b4 <HAL_DMA_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <HAL_SPI_MspInit+0x248>
      Error_Handler();
 8000b30:	f7ff fe5f 	bl	80007f2 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <HAL_SPI_MspInit+0x288>)
 8000b38:	655a      	str	r2, [r3, #84]	; 0x54
 8000b3a:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <HAL_SPI_MspInit+0x288>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000b40:	bf00      	nop
 8000b42:	3730      	adds	r7, #48	; 0x30
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40013000 	.word	0x40013000
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	200001a8 	.word	0x200001a8
 8000b54:	4002001c 	.word	0x4002001c
 8000b58:	20000238 	.word	0x20000238
 8000b5c:	40020030 	.word	0x40020030
 8000b60:	40003800 	.word	0x40003800
 8000b64:	48000800 	.word	0x48000800
 8000b68:	48000400 	.word	0x48000400
 8000b6c:	200000fc 	.word	0x200000fc
 8000b70:	40020044 	.word	0x40020044
 8000b74:	200001f0 	.word	0x200001f0
 8000b78:	40020058 	.word	0x40020058

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_MspInit+0x44>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_MspInit+0x44>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <NMI_Handler+0x4>

08000bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <HardFault_Handler+0x4>

08000bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <MemManage_Handler+0x4>

08000bd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <BusFault_Handler+0x4>

08000bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <UsageFault_Handler+0x4>

08000be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c10:	f000 f9fc 	bl	800100c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <DMA1_Channel2_IRQHandler+0x10>)
 8000c1e:	f000 fc61 	bl	80014e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200001a8 	.word	0x200001a8

08000c2c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <DMA1_Channel3_IRQHandler+0x10>)
 8000c32:	f000 fc57 	bl	80014e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000238 	.word	0x20000238

08000c40 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <DMA1_Channel4_IRQHandler+0x10>)
 8000c46:	f000 fc4d 	bl	80014e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200000fc 	.word	0x200000fc

08000c54 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000c58:	4802      	ldr	r0, [pc, #8]	; (8000c64 <DMA1_Channel5_IRQHandler+0x10>)
 8000c5a:	f000 fc43 	bl	80014e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	200001f0 	.word	0x200001f0

08000c68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c6c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c70:	f000 febc 	bl	80019ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	e00a      	b.n	8000ca0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c8a:	f3af 8000 	nop.w
 8000c8e:	4601      	mov	r1, r0
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	1c5a      	adds	r2, r3, #1
 8000c94:	60ba      	str	r2, [r7, #8]
 8000c96:	b2ca      	uxtb	r2, r1
 8000c98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697a      	ldr	r2, [r7, #20]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	dbf0      	blt.n	8000c8a <_read+0x12>
	}

return len;
 8000ca8:	687b      	ldr	r3, [r7, #4]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	e009      	b.n	8000cd8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	60ba      	str	r2, [r7, #8]
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fc99 	bl	8000604 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	dbf1      	blt.n	8000cc4 <_write+0x12>
	}
	return len;
 8000ce0:	687b      	ldr	r3, [r7, #4]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_close>:

int _close(int file)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
	return -1;
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d12:	605a      	str	r2, [r3, #4]
	return 0;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <_isatty>:

int _isatty(int file)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
	return 1;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
	return 0;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
	...

08000d54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d5c:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <_sbrk+0x5c>)
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <_sbrk+0x60>)
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d102      	bne.n	8000d76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <_sbrk+0x64>)
 8000d72:	4a12      	ldr	r2, [pc, #72]	; (8000dbc <_sbrk+0x68>)
 8000d74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d207      	bcs.n	8000d94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d84:	f003 faa0 	bl	80042c8 <__errno>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	230c      	movs	r3, #12
 8000d8c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d92:	e009      	b.n	8000da8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d9a:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <_sbrk+0x64>)
 8000da4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000da6:	68fb      	ldr	r3, [r7, #12]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	2000a000 	.word	0x2000a000
 8000db4:	00000400 	.word	0x00000400
 8000db8:	2000008c 	.word	0x2000008c
 8000dbc:	20000308 	.word	0x20000308

08000dc0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <SystemInit+0x64>)
 8000dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dca:	4a16      	ldr	r2, [pc, #88]	; (8000e24 <SystemInit+0x64>)
 8000dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <SystemInit+0x68>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a13      	ldr	r2, [pc, #76]	; (8000e28 <SystemInit+0x68>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <SystemInit+0x68>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <SystemInit+0x68>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a0f      	ldr	r2, [pc, #60]	; (8000e28 <SystemInit+0x68>)
 8000dec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000df0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000df4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <SystemInit+0x68>)
 8000df8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dfc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <SystemInit+0x68>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a09      	ldr	r2, [pc, #36]	; (8000e28 <SystemInit+0x68>)
 8000e04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <SystemInit+0x68>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <SystemInit+0x64>)
 8000e12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e16:	609a      	str	r2, [r3, #8]
#endif
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00
 8000e28:	40021000 	.word	0x40021000

08000e2c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e32:	4a15      	ldr	r2, [pc, #84]	; (8000e88 <MX_USART2_UART_Init+0x5c>)
 8000e34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e52:	220c      	movs	r2, #12
 8000e54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_USART2_UART_Init+0x58>)
 8000e70:	f002 fdb0 	bl	80039d4 <HAL_UART_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e7a:	f7ff fcba 	bl	80007f2 <Error_Handler>
  }

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000280 	.word	0x20000280
 8000e88:	40004400 	.word	0x40004400

08000e8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a17      	ldr	r2, [pc, #92]	; (8000f08 <HAL_UART_MspInit+0x7c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d128      	bne.n	8000f00 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <HAL_UART_MspInit+0x80>)
 8000eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb2:	4a16      	ldr	r2, [pc, #88]	; (8000f0c <HAL_UART_MspInit+0x80>)
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <HAL_UART_MspInit+0x80>)
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <HAL_UART_MspInit+0x80>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	4a10      	ldr	r2, [pc, #64]	; (8000f0c <HAL_UART_MspInit+0x80>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <HAL_UART_MspInit+0x80>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ede:	230c      	movs	r3, #12
 8000ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	2303      	movs	r3, #3
 8000eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eee:	2307      	movs	r3, #7
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efc:	f000 fbd2 	bl	80016a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f00:	bf00      	nop
 8000f02:	3728      	adds	r7, #40	; 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40004400 	.word	0x40004400
 8000f0c:	40021000 	.word	0x40021000

08000f10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f14:	f7ff ff54 	bl	8000dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f1a:	e003      	b.n	8000f24 <LoopCopyDataInit>

08000f1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f22:	3104      	adds	r1, #4

08000f24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f24:	480a      	ldr	r0, [pc, #40]	; (8000f50 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f2c:	d3f6      	bcc.n	8000f1c <CopyDataInit>
	ldr	r2, =_sbss
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f30:	e002      	b.n	8000f38 <LoopFillZerobss>

08000f32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f34:	f842 3b04 	str.w	r3, [r2], #4

08000f38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <LoopForever+0x16>)
	cmp	r2, r3
 8000f3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f3c:	d3f9      	bcc.n	8000f32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f3e:	f003 f9c9 	bl	80042d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f42:	f7ff fb71 	bl	8000628 <main>

08000f46 <LoopForever>:

LoopForever:
    b LoopForever
 8000f46:	e7fe      	b.n	8000f46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f48:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000f4c:	08004d10 	.word	0x08004d10
	ldr	r0, =_sdata
 8000f50:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f54:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000f58:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000f5c:	20000308 	.word	0x20000308

08000f60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f60:	e7fe      	b.n	8000f60 <ADC1_2_IRQHandler>

08000f62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 f95f 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f72:	2000      	movs	r0, #0
 8000f74:	f000 f80e 	bl	8000f94 <HAL_InitTick>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d002      	beq.n	8000f84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	71fb      	strb	r3, [r7, #7]
 8000f82:	e001      	b.n	8000f88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f84:	f7ff fdfa 	bl	8000b7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f88:	79fb      	ldrb	r3, [r7, #7]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fa0:	4b17      	ldr	r3, [pc, #92]	; (8001000 <HAL_InitTick+0x6c>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d023      	beq.n	8000ff0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <HAL_InitTick+0x70>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <HAL_InitTick+0x6c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f96b 	bl	800129a <HAL_SYSTICK_Config>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10f      	bne.n	8000fea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	d809      	bhi.n	8000fe4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	f000 f935 	bl	8001246 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <HAL_InitTick+0x74>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	e007      	b.n	8000ff4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	e004      	b.n	8000ff4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	73fb      	strb	r3, [r7, #15]
 8000fee:	e001      	b.n	8000ff4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000008 	.word	0x20000008
 8001004:	20000000 	.word	0x20000000
 8001008:	20000004 	.word	0x20000004

0800100c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_IncTick+0x20>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_IncTick+0x24>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4413      	add	r3, r2
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <HAL_IncTick+0x24>)
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000008 	.word	0x20000008
 8001030:	20000300 	.word	0x20000300

08001034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return uwTick;
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <HAL_GetTick+0x14>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000300 	.word	0x20000300

0800104c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001054:	f7ff ffee 	bl	8001034 <HAL_GetTick>
 8001058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001064:	d005      	beq.n	8001072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <HAL_Delay+0x40>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001072:	bf00      	nop
 8001074:	f7ff ffde 	bl	8001034 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	429a      	cmp	r2, r3
 8001082:	d8f7      	bhi.n	8001074 <HAL_Delay+0x28>
  {
  }
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000008 	.word	0x20000008

08001090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ac:	4013      	ands	r3, r2
 80010ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c2:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	60d3      	str	r3, [r2, #12]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <__NVIC_GetPriorityGrouping+0x18>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	f003 0307 	and.w	r3, r3, #7
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	2b00      	cmp	r3, #0
 8001104:	db0b      	blt.n	800111e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	f003 021f 	and.w	r2, r3, #31
 800110c:	4907      	ldr	r1, [pc, #28]	; (800112c <__NVIC_EnableIRQ+0x38>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	095b      	lsrs	r3, r3, #5
 8001114:	2001      	movs	r0, #1
 8001116:	fa00 f202 	lsl.w	r2, r0, r2
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000e100 	.word	0xe000e100

08001130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	2b00      	cmp	r3, #0
 8001142:	db0a      	blt.n	800115a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	490c      	ldr	r1, [pc, #48]	; (800117c <__NVIC_SetPriority+0x4c>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	440b      	add	r3, r1
 8001154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001158:	e00a      	b.n	8001170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4908      	ldr	r1, [pc, #32]	; (8001180 <__NVIC_SetPriority+0x50>)
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	3b04      	subs	r3, #4
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	440b      	add	r3, r1
 800116e:	761a      	strb	r2, [r3, #24]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000e100 	.word	0xe000e100
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	; 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f1c3 0307 	rsb	r3, r3, #7
 800119e:	2b04      	cmp	r3, #4
 80011a0:	bf28      	it	cs
 80011a2:	2304      	movcs	r3, #4
 80011a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3304      	adds	r3, #4
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d902      	bls.n	80011b4 <NVIC_EncodePriority+0x30>
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3b03      	subs	r3, #3
 80011b2:	e000      	b.n	80011b6 <NVIC_EncodePriority+0x32>
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	401a      	ands	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43d9      	mvns	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	4313      	orrs	r3, r2
         );
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011fc:	d301      	bcc.n	8001202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fe:	2301      	movs	r3, #1
 8001200:	e00f      	b.n	8001222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <SysTick_Config+0x40>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120a:	210f      	movs	r1, #15
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f7ff ff8e 	bl	8001130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <SysTick_Config+0x40>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <SysTick_Config+0x40>)
 800121c:	2207      	movs	r2, #7
 800121e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	e000e010 	.word	0xe000e010

08001230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff29 	bl	8001090 <__NVIC_SetPriorityGrouping>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff3e 	bl	80010d8 <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff8e 	bl	8001184 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5d 	bl	8001130 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff31 	bl	80010f4 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa2 	bl	80011ec <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e098      	b.n	80013f8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b4d      	ldr	r3, [pc, #308]	; (8001404 <HAL_DMA_Init+0x150>)
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d80f      	bhi.n	80012f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b4b      	ldr	r3, [pc, #300]	; (8001408 <HAL_DMA_Init+0x154>)
 80012da:	4413      	add	r3, r2
 80012dc:	4a4b      	ldr	r2, [pc, #300]	; (800140c <HAL_DMA_Init+0x158>)
 80012de:	fba2 2303 	umull	r2, r3, r2, r3
 80012e2:	091b      	lsrs	r3, r3, #4
 80012e4:	009a      	lsls	r2, r3, #2
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a48      	ldr	r2, [pc, #288]	; (8001410 <HAL_DMA_Init+0x15c>)
 80012ee:	641a      	str	r2, [r3, #64]	; 0x40
 80012f0:	e00e      	b.n	8001310 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b46      	ldr	r3, [pc, #280]	; (8001414 <HAL_DMA_Init+0x160>)
 80012fa:	4413      	add	r3, r2
 80012fc:	4a43      	ldr	r2, [pc, #268]	; (800140c <HAL_DMA_Init+0x158>)
 80012fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001302:	091b      	lsrs	r3, r3, #4
 8001304:	009a      	lsls	r2, r3, #2
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a42      	ldr	r2, [pc, #264]	; (8001418 <HAL_DMA_Init+0x164>)
 800130e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2202      	movs	r2, #2
 8001314:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800132a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001334:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001340:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800134c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	4313      	orrs	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800136a:	d039      	beq.n	80013e0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	4a27      	ldr	r2, [pc, #156]	; (8001410 <HAL_DMA_Init+0x15c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d11a      	bne.n	80013ac <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001376:	4b29      	ldr	r3, [pc, #164]	; (800141c <HAL_DMA_Init+0x168>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f003 031c 	and.w	r3, r3, #28
 8001382:	210f      	movs	r1, #15
 8001384:	fa01 f303 	lsl.w	r3, r1, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	4924      	ldr	r1, [pc, #144]	; (800141c <HAL_DMA_Init+0x168>)
 800138c:	4013      	ands	r3, r2
 800138e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001390:	4b22      	ldr	r3, [pc, #136]	; (800141c <HAL_DMA_Init+0x168>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6859      	ldr	r1, [r3, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139c:	f003 031c 	and.w	r3, r3, #28
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	491d      	ldr	r1, [pc, #116]	; (800141c <HAL_DMA_Init+0x168>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
 80013aa:	e019      	b.n	80013e0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80013ac:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <HAL_DMA_Init+0x16c>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b4:	f003 031c 	and.w	r3, r3, #28
 80013b8:	210f      	movs	r1, #15
 80013ba:	fa01 f303 	lsl.w	r3, r1, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	4917      	ldr	r1, [pc, #92]	; (8001420 <HAL_DMA_Init+0x16c>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80013c6:	4b16      	ldr	r3, [pc, #88]	; (8001420 <HAL_DMA_Init+0x16c>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6859      	ldr	r1, [r3, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f003 031c 	and.w	r3, r3, #28
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	4911      	ldr	r1, [pc, #68]	; (8001420 <HAL_DMA_Init+0x16c>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	40020407 	.word	0x40020407
 8001408:	bffdfff8 	.word	0xbffdfff8
 800140c:	cccccccd 	.word	0xcccccccd
 8001410:	40020000 	.word	0x40020000
 8001414:	bffdfbf8 	.word	0xbffdfbf8
 8001418:	40020400 	.word	0x40020400
 800141c:	400200a8 	.word	0x400200a8
 8001420:	400204a8 	.word	0x400204a8

08001424 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
 8001430:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800143c:	2b01      	cmp	r3, #1
 800143e:	d101      	bne.n	8001444 <HAL_DMA_Start_IT+0x20>
 8001440:	2302      	movs	r3, #2
 8001442:	e04b      	b.n	80014dc <HAL_DMA_Start_IT+0xb8>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b01      	cmp	r3, #1
 8001456:	d13a      	bne.n	80014ce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2202      	movs	r2, #2
 800145c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2200      	movs	r2, #0
 8001464:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0201 	bic.w	r2, r2, #1
 8001474:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	68b9      	ldr	r1, [r7, #8]
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f000 f8e0 	bl	8001642 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	2b00      	cmp	r3, #0
 8001488:	d008      	beq.n	800149c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f042 020e 	orr.w	r2, r2, #14
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	e00f      	b.n	80014bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 0204 	bic.w	r2, r2, #4
 80014aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 020a 	orr.w	r2, r2, #10
 80014ba:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0201 	orr.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	e005      	b.n	80014da <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80014d6:	2302      	movs	r3, #2
 80014d8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80014da:	7dfb      	ldrb	r3, [r7, #23]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001500:	f003 031c 	and.w	r3, r3, #28
 8001504:	2204      	movs	r2, #4
 8001506:	409a      	lsls	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4013      	ands	r3, r2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d026      	beq.n	800155e <HAL_DMA_IRQHandler+0x7a>
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	2b00      	cmp	r3, #0
 8001518:	d021      	beq.n	800155e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0320 	and.w	r3, r3, #32
 8001524:	2b00      	cmp	r3, #0
 8001526:	d107      	bne.n	8001538 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0204 	bic.w	r2, r2, #4
 8001536:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153c:	f003 021c 	and.w	r2, r3, #28
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	2104      	movs	r1, #4
 8001546:	fa01 f202 	lsl.w	r2, r1, r2
 800154a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	2b00      	cmp	r3, #0
 8001552:	d071      	beq.n	8001638 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800155c:	e06c      	b.n	8001638 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f003 031c 	and.w	r3, r3, #28
 8001566:	2202      	movs	r2, #2
 8001568:	409a      	lsls	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4013      	ands	r3, r2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d02e      	beq.n	80015d0 <HAL_DMA_IRQHandler+0xec>
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d029      	beq.n	80015d0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0320 	and.w	r3, r3, #32
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10b      	bne.n	80015a2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 020a 	bic.w	r2, r2, #10
 8001598:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f003 021c 	and.w	r2, r3, #28
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	2102      	movs	r1, #2
 80015b0:	fa01 f202 	lsl.w	r2, r1, r2
 80015b4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d038      	beq.n	8001638 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80015ce:	e033      	b.n	8001638 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d4:	f003 031c 	and.w	r3, r3, #28
 80015d8:	2208      	movs	r2, #8
 80015da:	409a      	lsls	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4013      	ands	r3, r2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d02a      	beq.n	800163a <HAL_DMA_IRQHandler+0x156>
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d025      	beq.n	800163a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 020e 	bic.w	r2, r2, #14
 80015fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	f003 021c 	and.w	r2, r3, #28
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	2101      	movs	r1, #1
 800160c:	fa01 f202 	lsl.w	r2, r1, r2
 8001610:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162c:	2b00      	cmp	r3, #0
 800162e:	d004      	beq.n	800163a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001638:	bf00      	nop
 800163a:	bf00      	nop
}
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001642:	b480      	push	{r7}
 8001644:	b085      	sub	sp, #20
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001654:	f003 021c 	and.w	r2, r3, #28
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	2101      	movs	r1, #1
 800165e:	fa01 f202 	lsl.w	r2, r1, r2
 8001662:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b10      	cmp	r3, #16
 8001672:	d108      	bne.n	8001686 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001684:	e007      	b.n	8001696 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	60da      	str	r2, [r3, #12]
}
 8001696:	bf00      	nop
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b087      	sub	sp, #28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b2:	e14e      	b.n	8001952 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2101      	movs	r1, #1
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	4013      	ands	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 8140 	beq.w	800194c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d00b      	beq.n	80016ec <HAL_GPIO_Init+0x48>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d007      	beq.n	80016ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016e0:	2b11      	cmp	r3, #17
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b12      	cmp	r3, #18
 80016ea:	d130      	bne.n	800174e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	2203      	movs	r2, #3
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001722:	2201      	movs	r2, #1
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4013      	ands	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	091b      	lsrs	r3, r3, #4
 8001738:	f003 0201 	and.w	r2, r3, #1
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	2203      	movs	r2, #3
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0xea>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b12      	cmp	r3, #18
 800178c:	d123      	bne.n	80017d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	08da      	lsrs	r2, r3, #3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3208      	adds	r2, #8
 8001796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	220f      	movs	r2, #15
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	08da      	lsrs	r2, r3, #3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3208      	adds	r2, #8
 80017d0:	6939      	ldr	r1, [r7, #16]
 80017d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	2203      	movs	r2, #3
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0203 	and.w	r2, r3, #3
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 809a 	beq.w	800194c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001818:	4b55      	ldr	r3, [pc, #340]	; (8001970 <HAL_GPIO_Init+0x2cc>)
 800181a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181c:	4a54      	ldr	r2, [pc, #336]	; (8001970 <HAL_GPIO_Init+0x2cc>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6613      	str	r3, [r2, #96]	; 0x60
 8001824:	4b52      	ldr	r3, [pc, #328]	; (8001970 <HAL_GPIO_Init+0x2cc>)
 8001826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001830:	4a50      	ldr	r2, [pc, #320]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	089b      	lsrs	r3, r3, #2
 8001836:	3302      	adds	r3, #2
 8001838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	220f      	movs	r2, #15
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800185a:	d013      	beq.n	8001884 <HAL_GPIO_Init+0x1e0>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a46      	ldr	r2, [pc, #280]	; (8001978 <HAL_GPIO_Init+0x2d4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d00d      	beq.n	8001880 <HAL_GPIO_Init+0x1dc>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a45      	ldr	r2, [pc, #276]	; (800197c <HAL_GPIO_Init+0x2d8>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d007      	beq.n	800187c <HAL_GPIO_Init+0x1d8>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a44      	ldr	r2, [pc, #272]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d101      	bne.n	8001878 <HAL_GPIO_Init+0x1d4>
 8001874:	2303      	movs	r3, #3
 8001876:	e006      	b.n	8001886 <HAL_GPIO_Init+0x1e2>
 8001878:	2307      	movs	r3, #7
 800187a:	e004      	b.n	8001886 <HAL_GPIO_Init+0x1e2>
 800187c:	2302      	movs	r3, #2
 800187e:	e002      	b.n	8001886 <HAL_GPIO_Init+0x1e2>
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <HAL_GPIO_Init+0x1e2>
 8001884:	2300      	movs	r3, #0
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	f002 0203 	and.w	r2, r2, #3
 800188c:	0092      	lsls	r2, r2, #2
 800188e:	4093      	lsls	r3, r2
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001896:	4937      	ldr	r1, [pc, #220]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	089b      	lsrs	r3, r3, #2
 800189c:	3302      	adds	r3, #2
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018a4:	4b37      	ldr	r3, [pc, #220]	; (8001984 <HAL_GPIO_Init+0x2e0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018c8:	4a2e      	ldr	r2, [pc, #184]	; (8001984 <HAL_GPIO_Init+0x2e0>)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80018ce:	4b2d      	ldr	r3, [pc, #180]	; (8001984 <HAL_GPIO_Init+0x2e0>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018f2:	4a24      	ldr	r2, [pc, #144]	; (8001984 <HAL_GPIO_Init+0x2e0>)
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018f8:	4b22      	ldr	r3, [pc, #136]	; (8001984 <HAL_GPIO_Init+0x2e0>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800191c:	4a19      	ldr	r2, [pc, #100]	; (8001984 <HAL_GPIO_Init+0x2e0>)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <HAL_GPIO_Init+0x2e0>)
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001946:	4a0f      	ldr	r2, [pc, #60]	; (8001984 <HAL_GPIO_Init+0x2e0>)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	3301      	adds	r3, #1
 8001950:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	fa22 f303 	lsr.w	r3, r2, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	f47f aea9 	bne.w	80016b4 <HAL_GPIO_Init+0x10>
  }
}
 8001962:	bf00      	nop
 8001964:	371c      	adds	r7, #28
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000
 8001974:	40010000 	.word	0x40010000
 8001978:	48000400 	.word	0x48000400
 800197c:	48000800 	.word	0x48000800
 8001980:	48000c00 	.word	0x48000c00
 8001984:	40010400 	.word	0x40010400

08001988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	807b      	strh	r3, [r7, #2]
 8001994:	4613      	mov	r3, r2
 8001996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001998:	787b      	ldrb	r3, [r7, #1]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019a4:	e002      	b.n	80019ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019a6:	887a      	ldrh	r2, [r7, #2]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019ca:	887a      	ldrh	r2, [r7, #2]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4013      	ands	r3, r2
 80019d0:	041a      	lsls	r2, r3, #16
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	43d9      	mvns	r1, r3
 80019d6:	887b      	ldrh	r3, [r7, #2]
 80019d8:	400b      	ands	r3, r1
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	619a      	str	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f8:	695a      	ldr	r2, [r3, #20]
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	4013      	ands	r3, r2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d006      	beq.n	8001a10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a02:	4a05      	ldr	r2, [pc, #20]	; (8001a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a04:	88fb      	ldrh	r3, [r7, #6]
 8001a06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f806 	bl	8001a1c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40010400 	.word	0x40010400

08001a1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a38:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <HAL_PWREx_GetVoltageRange+0x18>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40007000 	.word	0x40007000

08001a50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a5e:	d130      	bne.n	8001ac2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a60:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a6c:	d038      	beq.n	8001ae0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a6e:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a76:	4a1e      	ldr	r2, [pc, #120]	; (8001af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2232      	movs	r2, #50	; 0x32
 8001a84:	fb02 f303 	mul.w	r3, r2, r3
 8001a88:	4a1b      	ldr	r2, [pc, #108]	; (8001af8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8e:	0c9b      	lsrs	r3, r3, #18
 8001a90:	3301      	adds	r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a94:	e002      	b.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a9c:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa8:	d102      	bne.n	8001ab0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f2      	bne.n	8001a96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001abc:	d110      	bne.n	8001ae0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e00f      	b.n	8001ae2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ace:	d007      	beq.n	8001ae0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ad8:	4a05      	ldr	r2, [pc, #20]	; (8001af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ade:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40007000 	.word	0x40007000
 8001af4:	20000000 	.word	0x20000000
 8001af8:	431bde83 	.word	0x431bde83

08001afc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	; 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d102      	bne.n	8001b10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	f000 bc56 	b.w	80023bc <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b10:	4ba1      	ldr	r3, [pc, #644]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b1a:	4b9f      	ldr	r3, [pc, #636]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80e6 	beq.w	8001cfe <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b32:	6a3b      	ldr	r3, [r7, #32]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d007      	beq.n	8001b48 <HAL_RCC_OscConfig+0x4c>
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	2b0c      	cmp	r3, #12
 8001b3c:	f040 808d 	bne.w	8001c5a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	f040 8089 	bne.w	8001c5a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b48:	4b93      	ldr	r3, [pc, #588]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d006      	beq.n	8001b62 <HAL_RCC_OscConfig+0x66>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d102      	bne.n	8001b62 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	f000 bc2d 	b.w	80023bc <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b66:	4b8c      	ldr	r3, [pc, #560]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d004      	beq.n	8001b7c <HAL_RCC_OscConfig+0x80>
 8001b72:	4b89      	ldr	r3, [pc, #548]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b7a:	e005      	b.n	8001b88 <HAL_RCC_OscConfig+0x8c>
 8001b7c:	4b86      	ldr	r3, [pc, #536]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b82:	091b      	lsrs	r3, r3, #4
 8001b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d224      	bcs.n	8001bd6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 fdbd 	bl	8002710 <RCC_SetFlashLatencyFromMSIRange>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d002      	beq.n	8001ba2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f000 bc0d 	b.w	80023bc <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ba2:	4b7d      	ldr	r3, [pc, #500]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a7c      	ldr	r2, [pc, #496]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001ba8:	f043 0308 	orr.w	r3, r3, #8
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b7a      	ldr	r3, [pc, #488]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	4977      	ldr	r1, [pc, #476]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bc0:	4b75      	ldr	r3, [pc, #468]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	4972      	ldr	r1, [pc, #456]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
 8001bd4:	e025      	b.n	8001c22 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bd6:	4b70      	ldr	r3, [pc, #448]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a6f      	ldr	r2, [pc, #444]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001bdc:	f043 0308 	orr.w	r3, r3, #8
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	4b6d      	ldr	r3, [pc, #436]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	496a      	ldr	r1, [pc, #424]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bf4:	4b68      	ldr	r3, [pc, #416]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	4965      	ldr	r1, [pc, #404]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d109      	bne.n	8001c22 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 fd7c 	bl	8002710 <RCC_SetFlashLatencyFromMSIRange>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e3cc      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c22:	f000 fcb3 	bl	800258c <HAL_RCC_GetSysClockFreq>
 8001c26:	4601      	mov	r1, r0
 8001c28:	4b5b      	ldr	r3, [pc, #364]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	4a5a      	ldr	r2, [pc, #360]	; (8001d9c <HAL_RCC_OscConfig+0x2a0>)
 8001c34:	5cd3      	ldrb	r3, [r2, r3]
 8001c36:	f003 031f 	and.w	r3, r3, #31
 8001c3a:	fa21 f303 	lsr.w	r3, r1, r3
 8001c3e:	4a58      	ldr	r2, [pc, #352]	; (8001da0 <HAL_RCC_OscConfig+0x2a4>)
 8001c40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c42:	4b58      	ldr	r3, [pc, #352]	; (8001da4 <HAL_RCC_OscConfig+0x2a8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff f9a4 	bl	8000f94 <HAL_InitTick>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001c50:	7dfb      	ldrb	r3, [r7, #23]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d052      	beq.n	8001cfc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001c56:	7dfb      	ldrb	r3, [r7, #23]
 8001c58:	e3b0      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d032      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c62:	4b4d      	ldr	r3, [pc, #308]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a4c      	ldr	r2, [pc, #304]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c6e:	f7ff f9e1 	bl	8001034 <HAL_GetTick>
 8001c72:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c76:	f7ff f9dd 	bl	8001034 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e399      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c88:	4b43      	ldr	r3, [pc, #268]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c94:	4b40      	ldr	r3, [pc, #256]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a3f      	ldr	r2, [pc, #252]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001c9a:	f043 0308 	orr.w	r3, r3, #8
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	493a      	ldr	r1, [pc, #232]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cb2:	4b39      	ldr	r3, [pc, #228]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	4935      	ldr	r1, [pc, #212]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	604b      	str	r3, [r1, #4]
 8001cc6:	e01a      	b.n	8001cfe <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cc8:	4b33      	ldr	r3, [pc, #204]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a32      	ldr	r2, [pc, #200]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001cce:	f023 0301 	bic.w	r3, r3, #1
 8001cd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff f9ae 	bl	8001034 <HAL_GetTick>
 8001cd8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cdc:	f7ff f9aa 	bl	8001034 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e366      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cee:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x1e0>
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cfc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d073      	beq.n	8001df2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d005      	beq.n	8001d1c <HAL_RCC_OscConfig+0x220>
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	d10e      	bne.n	8001d34 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d10b      	bne.n	8001d34 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1c:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d063      	beq.n	8001df0 <HAL_RCC_OscConfig+0x2f4>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d15f      	bne.n	8001df0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e343      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3c:	d106      	bne.n	8001d4c <HAL_RCC_OscConfig+0x250>
 8001d3e:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e01d      	b.n	8001d88 <HAL_RCC_OscConfig+0x28c>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d54:	d10c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x274>
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a0c      	ldr	r2, [pc, #48]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	e00b      	b.n	8001d88 <HAL_RCC_OscConfig+0x28c>
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <HAL_RCC_OscConfig+0x29c>)
 8001d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d01b      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d90:	f7ff f950 	bl	8001034 <HAL_GetTick>
 8001d94:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d96:	e010      	b.n	8001dba <HAL_RCC_OscConfig+0x2be>
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	08004c54 	.word	0x08004c54
 8001da0:	20000000 	.word	0x20000000
 8001da4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da8:	f7ff f944 	bl	8001034 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	; 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e300      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dba:	4ba0      	ldr	r3, [pc, #640]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x2ac>
 8001dc6:	e014      	b.n	8001df2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7ff f934 	bl	8001034 <HAL_GetTick>
 8001dcc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7ff f930 	bl	8001034 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	; 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e2ec      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001de2:	4b96      	ldr	r3, [pc, #600]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x2d4>
 8001dee:	e000      	b.n	8001df2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d060      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_OscConfig+0x314>
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	2b0c      	cmp	r3, #12
 8001e08:	d119      	bne.n	8001e3e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d116      	bne.n	8001e3e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e10:	4b8a      	ldr	r3, [pc, #552]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_RCC_OscConfig+0x32c>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e2c9      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e28:	4b84      	ldr	r3, [pc, #528]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	061b      	lsls	r3, r3, #24
 8001e36:	4981      	ldr	r1, [pc, #516]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e3c:	e040      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d023      	beq.n	8001e8e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e46:	4b7d      	ldr	r3, [pc, #500]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a7c      	ldr	r2, [pc, #496]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e52:	f7ff f8ef 	bl	8001034 <HAL_GetTick>
 8001e56:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5a:	f7ff f8eb 	bl	8001034 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e2a7      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e6c:	4b73      	ldr	r3, [pc, #460]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e78:	4b70      	ldr	r3, [pc, #448]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	061b      	lsls	r3, r3, #24
 8001e86:	496d      	ldr	r1, [pc, #436]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
 8001e8c:	e018      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8e:	4b6b      	ldr	r3, [pc, #428]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a6a      	ldr	r2, [pc, #424]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9a:	f7ff f8cb 	bl	8001034 <HAL_GetTick>
 8001e9e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea2:	f7ff f8c7 	bl	8001034 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e283      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eb4:	4b61      	ldr	r3, [pc, #388]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f0      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d07f      	beq.n	8001fcc <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d05f      	beq.n	8001f94 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001ed4:	4b59      	ldr	r3, [pc, #356]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eda:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699a      	ldr	r2, [r3, #24]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	f003 0310 	and.w	r3, r3, #16
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d037      	beq.n	8001f5a <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d006      	beq.n	8001f02 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e25c      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d01b      	beq.n	8001f44 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8001f0c:	4b4b      	ldr	r3, [pc, #300]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f12:	4a4a      	ldr	r2, [pc, #296]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001f14:	f023 0301 	bic.w	r3, r3, #1
 8001f18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f1c:	f7ff f88a 	bl	8001034 <HAL_GetTick>
 8001f20:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f24:	f7ff f886 	bl	8001034 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b11      	cmp	r3, #17
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e242      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f36:	4b41      	ldr	r3, [pc, #260]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1ef      	bne.n	8001f24 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001f44:	4b3d      	ldr	r3, [pc, #244]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f4a:	f023 0210 	bic.w	r2, r3, #16
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	493a      	ldr	r1, [pc, #232]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5a:	4b38      	ldr	r3, [pc, #224]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f60:	4a36      	ldr	r2, [pc, #216]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6a:	f7ff f863 	bl	8001034 <HAL_GetTick>
 8001f6e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f72:	f7ff f85f 	bl	8001034 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b11      	cmp	r3, #17
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e21b      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f84:	4b2d      	ldr	r3, [pc, #180]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0ef      	beq.n	8001f72 <HAL_RCC_OscConfig+0x476>
 8001f92:	e01b      	b.n	8001fcc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f94:	4b29      	ldr	r3, [pc, #164]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f9a:	4a28      	ldr	r2, [pc, #160]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa4:	f7ff f846 	bl	8001034 <HAL_GetTick>
 8001fa8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fac:	f7ff f842 	bl	8001034 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b11      	cmp	r3, #17
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e1fe      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fbe:	4b1f      	ldr	r3, [pc, #124]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1ef      	bne.n	8001fac <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 80c1 	beq.w	800215c <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fe0:	4b16      	ldr	r3, [pc, #88]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10e      	bne.n	800200a <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fec:	4b13      	ldr	r3, [pc, #76]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff0:	4a12      	ldr	r2, [pc, #72]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff8:	4b10      	ldr	r3, [pc, #64]	; (800203c <HAL_RCC_OscConfig+0x540>)
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002004:	2301      	movs	r3, #1
 8002006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800200a:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <HAL_RCC_OscConfig+0x544>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002012:	2b00      	cmp	r3, #0
 8002014:	d11c      	bne.n	8002050 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_RCC_OscConfig+0x544>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a09      	ldr	r2, [pc, #36]	; (8002040 <HAL_RCC_OscConfig+0x544>)
 800201c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002022:	f7ff f807 	bl	8001034 <HAL_GetTick>
 8002026:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002028:	e00c      	b.n	8002044 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800202a:	f7ff f803 	bl	8001034 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d905      	bls.n	8002044 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e1bf      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
 800203c:	40021000 	.word	0x40021000
 8002040:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002044:	4bb1      	ldr	r3, [pc, #708]	; (800230c <HAL_RCC_OscConfig+0x810>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0ec      	beq.n	800202a <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d02c      	beq.n	80020b6 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800205c:	4bac      	ldr	r3, [pc, #688]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206e:	49a8      	ldr	r1, [pc, #672]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	2b00      	cmp	r3, #0
 8002080:	d010      	beq.n	80020a4 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002082:	4ba3      	ldr	r3, [pc, #652]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 8002084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002088:	4aa1      	ldr	r2, [pc, #644]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002092:	4b9f      	ldr	r3, [pc, #636]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 8002094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002098:	4a9d      	ldr	r2, [pc, #628]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020a2:	e018      	b.n	80020d6 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020a4:	4b9a      	ldr	r3, [pc, #616]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 80020a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020aa:	4a99      	ldr	r2, [pc, #612]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020b4:	e00f      	b.n	80020d6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020b6:	4b96      	ldr	r3, [pc, #600]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 80020b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020bc:	4a94      	ldr	r2, [pc, #592]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 80020be:	f023 0301 	bic.w	r3, r3, #1
 80020c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80020c6:	4b92      	ldr	r3, [pc, #584]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 80020c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020cc:	4a90      	ldr	r2, [pc, #576]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 80020ce:	f023 0304 	bic.w	r3, r3, #4
 80020d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d016      	beq.n	800210c <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020de:	f7fe ffa9 	bl	8001034 <HAL_GetTick>
 80020e2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e4:	e00a      	b.n	80020fc <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e6:	f7fe ffa5 	bl	8001034 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e15f      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020fc:	4b84      	ldr	r3, [pc, #528]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0ed      	beq.n	80020e6 <HAL_RCC_OscConfig+0x5ea>
 800210a:	e01d      	b.n	8002148 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210c:	f7fe ff92 	bl	8001034 <HAL_GetTick>
 8002110:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002112:	e00a      	b.n	800212a <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002114:	f7fe ff8e 	bl	8001034 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002122:	4293      	cmp	r3, r2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e148      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800212a:	4b79      	ldr	r3, [pc, #484]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 800212c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1ed      	bne.n	8002114 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002138:	4b75      	ldr	r3, [pc, #468]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 800213a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213e:	4a74      	ldr	r2, [pc, #464]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 8002140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800214c:	2b01      	cmp	r3, #1
 800214e:	d105      	bne.n	800215c <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002150:	4b6f      	ldr	r3, [pc, #444]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002154:	4a6e      	ldr	r2, [pc, #440]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 8002156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800215a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0320 	and.w	r3, r3, #32
 8002164:	2b00      	cmp	r3, #0
 8002166:	d03c      	beq.n	80021e2 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01c      	beq.n	80021aa <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002170:	4b67      	ldr	r3, [pc, #412]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 8002172:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002176:	4a66      	ldr	r2, [pc, #408]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002180:	f7fe ff58 	bl	8001034 <HAL_GetTick>
 8002184:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002188:	f7fe ff54 	bl	8001034 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e110      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800219a:	4b5d      	ldr	r3, [pc, #372]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 800219c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0ef      	beq.n	8002188 <HAL_RCC_OscConfig+0x68c>
 80021a8:	e01b      	b.n	80021e2 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021aa:	4b59      	ldr	r3, [pc, #356]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 80021ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021b0:	4a57      	ldr	r2, [pc, #348]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 80021b2:	f023 0301 	bic.w	r3, r3, #1
 80021b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ba:	f7fe ff3b 	bl	8001034 <HAL_GetTick>
 80021be:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021c2:	f7fe ff37 	bl	8001034 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e0f3      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021d4:	4b4e      	ldr	r3, [pc, #312]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 80021d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1ef      	bne.n	80021c2 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 80e7 	beq.w	80023ba <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	f040 80b7 	bne.w	8002364 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021f6:	4b46      	ldr	r3, [pc, #280]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f003 0203 	and.w	r2, r3, #3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	429a      	cmp	r2, r3
 8002208:	d124      	bne.n	8002254 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002214:	3b01      	subs	r3, #1
 8002216:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002218:	429a      	cmp	r2, r3
 800221a:	d11b      	bne.n	8002254 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002226:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002228:	429a      	cmp	r2, r3
 800222a:	d113      	bne.n	8002254 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002236:	085b      	lsrs	r3, r3, #1
 8002238:	3b01      	subs	r3, #1
 800223a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800223c:	429a      	cmp	r2, r3
 800223e:	d109      	bne.n	8002254 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	085b      	lsrs	r3, r3, #1
 800224c:	3b01      	subs	r3, #1
 800224e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002250:	429a      	cmp	r2, r3
 8002252:	d061      	beq.n	8002318 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	2b0c      	cmp	r3, #12
 8002258:	d056      	beq.n	8002308 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800225a:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a2c      	ldr	r2, [pc, #176]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 8002260:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002264:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002266:	f7fe fee5 	bl	8001034 <HAL_GetTick>
 800226a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226e:	f7fe fee1 	bl	8001034 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e09d      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002280:	4b23      	ldr	r3, [pc, #140]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f0      	bne.n	800226e <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800228c:	4b20      	ldr	r3, [pc, #128]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	4b20      	ldr	r3, [pc, #128]	; (8002314 <HAL_RCC_OscConfig+0x818>)
 8002292:	4013      	ands	r3, r2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800229c:	3a01      	subs	r2, #1
 800229e:	0112      	lsls	r2, r2, #4
 80022a0:	4311      	orrs	r1, r2
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022a6:	0212      	lsls	r2, r2, #8
 80022a8:	4311      	orrs	r1, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022ae:	0852      	lsrs	r2, r2, #1
 80022b0:	3a01      	subs	r2, #1
 80022b2:	0552      	lsls	r2, r2, #21
 80022b4:	4311      	orrs	r1, r2
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022ba:	0852      	lsrs	r2, r2, #1
 80022bc:	3a01      	subs	r2, #1
 80022be:	0652      	lsls	r2, r2, #25
 80022c0:	430a      	orrs	r2, r1
 80022c2:	4913      	ldr	r1, [pc, #76]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a10      	ldr	r2, [pc, #64]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 80022ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022d4:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4a0d      	ldr	r2, [pc, #52]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 80022da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022e0:	f7fe fea8 	bl	8001034 <HAL_GetTick>
 80022e4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e8:	f7fe fea4 	bl	8001034 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e060      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_RCC_OscConfig+0x814>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002306:	e058      	b.n	80023ba <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e057      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
 800230c:	40007000 	.word	0x40007000
 8002310:	40021000 	.word	0x40021000
 8002314:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002318:	4b2a      	ldr	r3, [pc, #168]	; (80023c4 <HAL_RCC_OscConfig+0x8c8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d14a      	bne.n	80023ba <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002324:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <HAL_RCC_OscConfig+0x8c8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a26      	ldr	r2, [pc, #152]	; (80023c4 <HAL_RCC_OscConfig+0x8c8>)
 800232a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800232e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002330:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <HAL_RCC_OscConfig+0x8c8>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4a23      	ldr	r2, [pc, #140]	; (80023c4 <HAL_RCC_OscConfig+0x8c8>)
 8002336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800233a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800233c:	f7fe fe7a 	bl	8001034 <HAL_GetTick>
 8002340:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002344:	f7fe fe76 	bl	8001034 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e032      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <HAL_RCC_OscConfig+0x8c8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0f0      	beq.n	8002344 <HAL_RCC_OscConfig+0x848>
 8002362:	e02a      	b.n	80023ba <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	2b0c      	cmp	r3, #12
 8002368:	d025      	beq.n	80023b6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236a:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <HAL_RCC_OscConfig+0x8c8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a15      	ldr	r2, [pc, #84]	; (80023c4 <HAL_RCC_OscConfig+0x8c8>)
 8002370:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002374:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002376:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <HAL_RCC_OscConfig+0x8c8>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <HAL_RCC_OscConfig+0x8c8>)
 800237c:	f023 0303 	bic.w	r3, r3, #3
 8002380:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <HAL_RCC_OscConfig+0x8c8>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	4a0f      	ldr	r2, [pc, #60]	; (80023c4 <HAL_RCC_OscConfig+0x8c8>)
 8002388:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800238c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238e:	f7fe fe51 	bl	8001034 <HAL_GetTick>
 8002392:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002396:	f7fe fe4d 	bl	8001034 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e009      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_RCC_OscConfig+0x8c8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1f0      	bne.n	8002396 <HAL_RCC_OscConfig+0x89a>
 80023b4:	e001      	b.n	80023ba <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3728      	adds	r7, #40	; 0x28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000

080023c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0c8      	b.n	800256e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023dc:	4b66      	ldr	r3, [pc, #408]	; (8002578 <HAL_RCC_ClockConfig+0x1b0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d910      	bls.n	800240c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b63      	ldr	r3, [pc, #396]	; (8002578 <HAL_RCC_ClockConfig+0x1b0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 0207 	bic.w	r2, r3, #7
 80023f2:	4961      	ldr	r1, [pc, #388]	; (8002578 <HAL_RCC_ClockConfig+0x1b0>)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fa:	4b5f      	ldr	r3, [pc, #380]	; (8002578 <HAL_RCC_ClockConfig+0x1b0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0b0      	b.n	800256e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d04c      	beq.n	80024b2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b03      	cmp	r3, #3
 800241e:	d107      	bne.n	8002430 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002420:	4b56      	ldr	r3, [pc, #344]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d121      	bne.n	8002470 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e09e      	b.n	800256e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d107      	bne.n	8002448 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002438:	4b50      	ldr	r3, [pc, #320]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d115      	bne.n	8002470 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e092      	b.n	800256e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d107      	bne.n	8002460 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002450:	4b4a      	ldr	r3, [pc, #296]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d109      	bne.n	8002470 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e086      	b.n	800256e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002460:	4b46      	ldr	r3, [pc, #280]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e07e      	b.n	800256e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002470:	4b42      	ldr	r3, [pc, #264]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 0203 	bic.w	r2, r3, #3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	493f      	ldr	r1, [pc, #252]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 800247e:	4313      	orrs	r3, r2
 8002480:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002482:	f7fe fdd7 	bl	8001034 <HAL_GetTick>
 8002486:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248a:	f7fe fdd3 	bl	8001034 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f241 3288 	movw	r2, #5000	; 0x1388
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e066      	b.n	800256e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a0:	4b36      	ldr	r3, [pc, #216]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 020c 	and.w	r2, r3, #12
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d1eb      	bne.n	800248a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d008      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024be:	4b2f      	ldr	r3, [pc, #188]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	492c      	ldr	r1, [pc, #176]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024d0:	4b29      	ldr	r3, [pc, #164]	; (8002578 <HAL_RCC_ClockConfig+0x1b0>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d210      	bcs.n	8002500 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024de:	4b26      	ldr	r3, [pc, #152]	; (8002578 <HAL_RCC_ClockConfig+0x1b0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 0207 	bic.w	r2, r3, #7
 80024e6:	4924      	ldr	r1, [pc, #144]	; (8002578 <HAL_RCC_ClockConfig+0x1b0>)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ee:	4b22      	ldr	r3, [pc, #136]	; (8002578 <HAL_RCC_ClockConfig+0x1b0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e036      	b.n	800256e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4918      	ldr	r1, [pc, #96]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d009      	beq.n	800253e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800252a:	4b14      	ldr	r3, [pc, #80]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4910      	ldr	r1, [pc, #64]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 800253a:	4313      	orrs	r3, r2
 800253c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800253e:	f000 f825 	bl	800258c <HAL_RCC_GetSysClockFreq>
 8002542:	4601      	mov	r1, r0
 8002544:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	4a0c      	ldr	r2, [pc, #48]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 8002550:	5cd3      	ldrb	r3, [r2, r3]
 8002552:	f003 031f 	and.w	r3, r3, #31
 8002556:	fa21 f303 	lsr.w	r3, r1, r3
 800255a:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800255e:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe fd16 	bl	8000f94 <HAL_InitTick>
 8002568:	4603      	mov	r3, r0
 800256a:	72fb      	strb	r3, [r7, #11]

  return status;
 800256c:	7afb      	ldrb	r3, [r7, #11]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40022000 	.word	0x40022000
 800257c:	40021000 	.word	0x40021000
 8002580:	08004c54 	.word	0x08004c54
 8002584:	20000000 	.word	0x20000000
 8002588:	20000004 	.word	0x20000004

0800258c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800258c:	b480      	push	{r7}
 800258e:	b089      	sub	sp, #36	; 0x24
 8002590:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	2300      	movs	r3, #0
 8002598:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800259a:	4b3d      	ldr	r3, [pc, #244]	; (8002690 <HAL_RCC_GetSysClockFreq+0x104>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025a4:	4b3a      	ldr	r3, [pc, #232]	; (8002690 <HAL_RCC_GetSysClockFreq+0x104>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_GetSysClockFreq+0x34>
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	2b0c      	cmp	r3, #12
 80025b8:	d121      	bne.n	80025fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d11e      	bne.n	80025fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025c0:	4b33      	ldr	r3, [pc, #204]	; (8002690 <HAL_RCC_GetSysClockFreq+0x104>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d107      	bne.n	80025dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025cc:	4b30      	ldr	r3, [pc, #192]	; (8002690 <HAL_RCC_GetSysClockFreq+0x104>)
 80025ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d2:	0a1b      	lsrs	r3, r3, #8
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	61fb      	str	r3, [r7, #28]
 80025da:	e005      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025dc:	4b2c      	ldr	r3, [pc, #176]	; (8002690 <HAL_RCC_GetSysClockFreq+0x104>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025e8:	4a2a      	ldr	r2, [pc, #168]	; (8002694 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10d      	bne.n	8002614 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025fc:	e00a      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	2b04      	cmp	r3, #4
 8002602:	d102      	bne.n	800260a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002604:	4b24      	ldr	r3, [pc, #144]	; (8002698 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	e004      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	2b08      	cmp	r3, #8
 800260e:	d101      	bne.n	8002614 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002610:	4b22      	ldr	r3, [pc, #136]	; (800269c <HAL_RCC_GetSysClockFreq+0x110>)
 8002612:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	2b0c      	cmp	r3, #12
 8002618:	d133      	bne.n	8002682 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800261a:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <HAL_RCC_GetSysClockFreq+0x104>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d002      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0xa4>
 800262a:	2b03      	cmp	r3, #3
 800262c:	d003      	beq.n	8002636 <HAL_RCC_GetSysClockFreq+0xaa>
 800262e:	e005      	b.n	800263c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002632:	617b      	str	r3, [r7, #20]
      break;
 8002634:	e005      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002636:	4b19      	ldr	r3, [pc, #100]	; (800269c <HAL_RCC_GetSysClockFreq+0x110>)
 8002638:	617b      	str	r3, [r7, #20]
      break;
 800263a:	e002      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	617b      	str	r3, [r7, #20]
      break;
 8002640:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002642:	4b13      	ldr	r3, [pc, #76]	; (8002690 <HAL_RCC_GetSysClockFreq+0x104>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	091b      	lsrs	r3, r3, #4
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	3301      	adds	r3, #1
 800264e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002650:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <HAL_RCC_GetSysClockFreq+0x104>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	0a1b      	lsrs	r3, r3, #8
 8002656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	fb02 f203 	mul.w	r2, r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	fbb2 f3f3 	udiv	r3, r2, r3
 8002666:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002668:	4b09      	ldr	r3, [pc, #36]	; (8002690 <HAL_RCC_GetSysClockFreq+0x104>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	0e5b      	lsrs	r3, r3, #25
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	3301      	adds	r3, #1
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002680:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002682:	69bb      	ldr	r3, [r7, #24]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3724      	adds	r7, #36	; 0x24
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	40021000 	.word	0x40021000
 8002694:	08004c6c 	.word	0x08004c6c
 8002698:	00f42400 	.word	0x00f42400
 800269c:	007a1200 	.word	0x007a1200

080026a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a4:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	20000000 	.word	0x20000000

080026b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026bc:	f7ff fff0 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 80026c0:	4601      	mov	r1, r0
 80026c2:	4b06      	ldr	r3, [pc, #24]	; (80026dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	0a1b      	lsrs	r3, r3, #8
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	4a04      	ldr	r2, [pc, #16]	; (80026e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026ce:	5cd3      	ldrb	r3, [r2, r3]
 80026d0:	f003 031f 	and.w	r3, r3, #31
 80026d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026d8:	4618      	mov	r0, r3
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40021000 	.word	0x40021000
 80026e0:	08004c64 	.word	0x08004c64

080026e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026e8:	f7ff ffda 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 80026ec:	4601      	mov	r1, r0
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	0adb      	lsrs	r3, r3, #11
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	4a04      	ldr	r2, [pc, #16]	; (800270c <HAL_RCC_GetPCLK2Freq+0x28>)
 80026fa:	5cd3      	ldrb	r3, [r2, r3]
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002704:	4618      	mov	r0, r3
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40021000 	.word	0x40021000
 800270c:	08004c64 	.word	0x08004c64

08002710 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002718:	2300      	movs	r3, #0
 800271a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800271c:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800271e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002728:	f7ff f984 	bl	8001a34 <HAL_PWREx_GetVoltageRange>
 800272c:	6178      	str	r0, [r7, #20]
 800272e:	e014      	b.n	800275a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002730:	4b25      	ldr	r3, [pc, #148]	; (80027c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002734:	4a24      	ldr	r2, [pc, #144]	; (80027c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273a:	6593      	str	r3, [r2, #88]	; 0x58
 800273c:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800273e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002748:	f7ff f974 	bl	8001a34 <HAL_PWREx_GetVoltageRange>
 800274c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800274e:	4b1e      	ldr	r3, [pc, #120]	; (80027c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002752:	4a1d      	ldr	r2, [pc, #116]	; (80027c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002758:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002760:	d10b      	bne.n	800277a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b80      	cmp	r3, #128	; 0x80
 8002766:	d919      	bls.n	800279c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2ba0      	cmp	r3, #160	; 0xa0
 800276c:	d902      	bls.n	8002774 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800276e:	2302      	movs	r3, #2
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	e013      	b.n	800279c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002774:	2301      	movs	r3, #1
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	e010      	b.n	800279c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b80      	cmp	r3, #128	; 0x80
 800277e:	d902      	bls.n	8002786 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002780:	2303      	movs	r3, #3
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	e00a      	b.n	800279c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b80      	cmp	r3, #128	; 0x80
 800278a:	d102      	bne.n	8002792 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800278c:	2302      	movs	r3, #2
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	e004      	b.n	800279c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b70      	cmp	r3, #112	; 0x70
 8002796:	d101      	bne.n	800279c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002798:	2301      	movs	r3, #1
 800279a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f023 0207 	bic.w	r2, r3, #7
 80027a4:	4909      	ldr	r1, [pc, #36]	; (80027cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027ac:	4b07      	ldr	r3, [pc, #28]	; (80027cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d001      	beq.n	80027be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40022000 	.word	0x40022000

080027d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027d8:	2300      	movs	r3, #0
 80027da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027dc:	2300      	movs	r3, #0
 80027de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 809e 	beq.w	800292a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ee:	2300      	movs	r3, #0
 80027f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027f2:	4b46      	ldr	r3, [pc, #280]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002802:	2300      	movs	r3, #0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00d      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002808:	4b40      	ldr	r3, [pc, #256]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800280a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280c:	4a3f      	ldr	r2, [pc, #252]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800280e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002812:	6593      	str	r3, [r2, #88]	; 0x58
 8002814:	4b3d      	ldr	r3, [pc, #244]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002820:	2301      	movs	r3, #1
 8002822:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002824:	4b3a      	ldr	r3, [pc, #232]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a39      	ldr	r2, [pc, #228]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800282a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002830:	f7fe fc00 	bl	8001034 <HAL_GetTick>
 8002834:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002836:	e009      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002838:	f7fe fbfc 	bl	8001034 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d902      	bls.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	74fb      	strb	r3, [r7, #19]
        break;
 800284a:	e005      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800284c:	4b30      	ldr	r3, [pc, #192]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0ef      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d15a      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800285e:	4b2b      	ldr	r3, [pc, #172]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002868:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01e      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	429a      	cmp	r2, r3
 8002878:	d019      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800287a:	4b24      	ldr	r3, [pc, #144]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002884:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002886:	4b21      	ldr	r3, [pc, #132]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288c:	4a1f      	ldr	r2, [pc, #124]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800288e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002892:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002896:	4b1d      	ldr	r3, [pc, #116]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289c:	4a1b      	ldr	r2, [pc, #108]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800289e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028a6:	4a19      	ldr	r2, [pc, #100]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d016      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7fe fbbc 	bl	8001034 <HAL_GetTick>
 80028bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028be:	e00b      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c0:	f7fe fbb8 	bl	8001034 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d902      	bls.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	74fb      	strb	r3, [r7, #19]
            break;
 80028d6:	e006      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0ec      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80028e6:	7cfb      	ldrb	r3, [r7, #19]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10b      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ec:	4b07      	ldr	r3, [pc, #28]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4904      	ldr	r1, [pc, #16]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002902:	e009      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002904:	7cfb      	ldrb	r3, [r7, #19]
 8002906:	74bb      	strb	r3, [r7, #18]
 8002908:	e006      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800290a:	bf00      	nop
 800290c:	40021000 	.word	0x40021000
 8002910:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002914:	7cfb      	ldrb	r3, [r7, #19]
 8002916:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002918:	7c7b      	ldrb	r3, [r7, #17]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d105      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800291e:	4b6e      	ldr	r3, [pc, #440]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002922:	4a6d      	ldr	r2, [pc, #436]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002928:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002936:	4b68      	ldr	r3, [pc, #416]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293c:	f023 0203 	bic.w	r2, r3, #3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4964      	ldr	r1, [pc, #400]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00a      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002958:	4b5f      	ldr	r3, [pc, #380]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295e:	f023 020c 	bic.w	r2, r3, #12
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	495c      	ldr	r1, [pc, #368]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800297a:	4b57      	ldr	r3, [pc, #348]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800297c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002980:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4953      	ldr	r1, [pc, #332]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0320 	and.w	r3, r3, #32
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800299c:	4b4e      	ldr	r3, [pc, #312]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	494b      	ldr	r1, [pc, #300]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029be:	4b46      	ldr	r3, [pc, #280]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	4942      	ldr	r1, [pc, #264]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029e0:	4b3d      	ldr	r3, [pc, #244]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	493a      	ldr	r1, [pc, #232]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a02:	4b35      	ldr	r3, [pc, #212]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	4931      	ldr	r1, [pc, #196]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a24:	4b2c      	ldr	r3, [pc, #176]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	4929      	ldr	r1, [pc, #164]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a46:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	4920      	ldr	r1, [pc, #128]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d015      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a68:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a76:	4918      	ldr	r1, [pc, #96]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a86:	d105      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a88:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	4a12      	ldr	r2, [pc, #72]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a92:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d015      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002aa0:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	490a      	ldr	r1, [pc, #40]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002abe:	d105      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4a04      	ldr	r2, [pc, #16]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002acc:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40021000 	.word	0x40021000

08002adc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e095      	b.n	8002c1a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d108      	bne.n	8002b08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002afe:	d009      	beq.n	8002b14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	61da      	str	r2, [r3, #28]
 8002b06:	e005      	b.n	8002b14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d106      	bne.n	8002b34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7fd fedc 	bl	80008ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b54:	d902      	bls.n	8002b5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	e002      	b.n	8002b62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002b6a:	d007      	beq.n	8002b7c <HAL_SPI_Init+0xa0>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b74:	d002      	beq.n	8002b7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbe:	ea42 0103 	orr.w	r1, r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	0c1b      	lsrs	r3, r3, #16
 8002bd8:	f003 0204 	and.w	r2, r3, #4
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002bf8:	ea42 0103 	orr.w	r1, r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_SPI_Transmit_DMA+0x20>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e0d8      	b.n	8002df6 <HAL_SPI_Transmit_DMA+0x1d2>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d002      	beq.n	8002c5e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c5c:	e0c6      	b.n	8002dec <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <HAL_SPI_Transmit_DMA+0x46>
 8002c64:	88fb      	ldrh	r3, [r7, #6]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d102      	bne.n	8002c70 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c6e:	e0bd      	b.n	8002dec <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2203      	movs	r2, #3
 8002c74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	88fa      	ldrh	r2, [r7, #6]
 8002c88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	88fa      	ldrh	r2, [r7, #6]
 8002c8e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cba:	d10f      	bne.n	8002cdc <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce0:	4a47      	ldr	r2, [pc, #284]	; (8002e00 <HAL_SPI_Transmit_DMA+0x1dc>)
 8002ce2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce8:	4a46      	ldr	r2, [pc, #280]	; (8002e04 <HAL_SPI_Transmit_DMA+0x1e0>)
 8002cea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf0:	4a45      	ldr	r2, [pc, #276]	; (8002e08 <HAL_SPI_Transmit_DMA+0x1e4>)
 8002cf2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d0a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d14:	d82d      	bhi.n	8002d72 <HAL_SPI_Transmit_DMA+0x14e>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d20:	d127      	bne.n	8002d72 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10f      	bne.n	8002d50 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d3e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	085b      	lsrs	r3, r3, #1
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d4e:	e010      	b.n	8002d72 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d5e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	085b      	lsrs	r3, r3, #1
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	330c      	adds	r3, #12
 8002d82:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d88:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002d8a:	f7fe fb4b 	bl	8001424 <HAL_DMA_Start_IT>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00c      	beq.n	8002dae <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d98:	f043 0210 	orr.w	r2, r3, #16
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8002dac:	e01e      	b.n	8002dec <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db8:	2b40      	cmp	r3, #64	; 0x40
 8002dba:	d007      	beq.n	8002dcc <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dca:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0220 	orr.w	r2, r2, #32
 8002dda:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0202 	orr.w	r2, r2, #2
 8002dea:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	080035d7 	.word	0x080035d7
 8002e04:	080033f9 	.word	0x080033f9
 8002e08:	0800362b 	.word	0x0800362b

08002e0c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	4613      	mov	r3, r2
 8002e18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d110      	bne.n	8002e48 <HAL_SPI_Receive_DMA+0x3c>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e2e:	d10b      	bne.n	8002e48 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2204      	movs	r2, #4
 8002e34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8002e38:	88fb      	ldrh	r3, [r7, #6]
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f908 	bl	8003054 <HAL_SPI_TransmitReceive_DMA>
 8002e44:	4603      	mov	r3, r0
 8002e46:	e0fb      	b.n	8003040 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_SPI_Receive_DMA+0x4a>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e0f4      	b.n	8003040 <HAL_SPI_Receive_DMA+0x234>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d002      	beq.n	8002e70 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e6e:	e0e2      	b.n	8003036 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_SPI_Receive_DMA+0x70>
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d102      	bne.n	8002e82 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e80:	e0d9      	b.n	8003036 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2204      	movs	r2, #4
 8002e86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	88fa      	ldrh	r2, [r7, #6]
 8002e9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	88fa      	ldrh	r2, [r7, #6]
 8002ea2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ec6:	d10f      	bne.n	8002ee8 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ed6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ee6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ef6:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f00:	d908      	bls.n	8002f14 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	e042      	b.n	8002f9a <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f22:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f2e:	d134      	bne.n	8002f9a <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f3e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d111      	bne.n	8002f74 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f5e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	085b      	lsrs	r3, r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002f72:	e012      	b.n	8002f9a <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f82:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	085b      	lsrs	r3, r3, #1
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3301      	adds	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9e:	4a2a      	ldr	r2, [pc, #168]	; (8003048 <HAL_SPI_Receive_DMA+0x23c>)
 8002fa0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	4a29      	ldr	r2, [pc, #164]	; (800304c <HAL_SPI_Receive_DMA+0x240>)
 8002fa8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fae:	4a28      	ldr	r2, [pc, #160]	; (8003050 <HAL_SPI_Receive_DMA+0x244>)
 8002fb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	330c      	adds	r3, #12
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fd2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002fd4:	f7fe fa26 	bl	8001424 <HAL_DMA_Start_IT>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00c      	beq.n	8002ff8 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe2:	f043 0210 	orr.w	r2, r3, #16
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8002ff6:	e01e      	b.n	8003036 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003002:	2b40      	cmp	r3, #64	; 0x40
 8003004:	d007      	beq.n	8003016 <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003014:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0220 	orr.w	r2, r2, #32
 8003024:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0201 	orr.w	r2, r2, #1
 8003034:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800303e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	080035f3 	.word	0x080035f3
 800304c:	0800349f 	.word	0x0800349f
 8003050:	0800362b 	.word	0x0800362b

08003054 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003070:	2302      	movs	r3, #2
 8003072:	e16c      	b.n	800334e <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003082:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800308a:	7dbb      	ldrb	r3, [r7, #22]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d00d      	beq.n	80030ac <HAL_SPI_TransmitReceive_DMA+0x58>
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003096:	d106      	bne.n	80030a6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d102      	bne.n	80030a6 <HAL_SPI_TransmitReceive_DMA+0x52>
 80030a0:	7dbb      	ldrb	r3, [r7, #22]
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d002      	beq.n	80030ac <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80030a6:	2302      	movs	r3, #2
 80030a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030aa:	e14b      	b.n	8003344 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d005      	beq.n	80030be <HAL_SPI_TransmitReceive_DMA+0x6a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HAL_SPI_TransmitReceive_DMA+0x6a>
 80030b8:	887b      	ldrh	r3, [r7, #2]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d102      	bne.n	80030c4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030c2:	e13f      	b.n	8003344 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d003      	beq.n	80030d8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2205      	movs	r2, #5
 80030d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	887a      	ldrh	r2, [r7, #2]
 80030e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	887a      	ldrh	r2, [r7, #2]
 80030ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	887a      	ldrh	r2, [r7, #2]
 80030fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	887a      	ldrh	r2, [r7, #2]
 8003102:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8003120:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800312a:	d908      	bls.n	800313e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800313a:	605a      	str	r2, [r3, #4]
 800313c:	e06f      	b.n	800321e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800314c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003158:	d126      	bne.n	80031a8 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10f      	bne.n	8003186 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003174:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800317a:	b29b      	uxth	r3, r3
 800317c:	085b      	lsrs	r3, r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003184:	e010      	b.n	80031a8 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003194:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800319a:	b29b      	uxth	r3, r3
 800319c:	085b      	lsrs	r3, r3, #1
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3301      	adds	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b2:	d134      	bne.n	800321e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031c2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d111      	bne.n	80031f8 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031e2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	085b      	lsrs	r3, r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80031f6:	e012      	b.n	800321e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003206:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800320e:	b29b      	uxth	r3, r3
 8003210:	085b      	lsrs	r3, r3, #1
 8003212:	b29b      	uxth	r3, r3
 8003214:	3301      	adds	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b04      	cmp	r3, #4
 8003228:	d108      	bne.n	800323c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322e:	4a4a      	ldr	r2, [pc, #296]	; (8003358 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8003230:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003236:	4a49      	ldr	r2, [pc, #292]	; (800335c <HAL_SPI_TransmitReceive_DMA+0x308>)
 8003238:	62da      	str	r2, [r3, #44]	; 0x2c
 800323a:	e007      	b.n	800324c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003240:	4a47      	ldr	r2, [pc, #284]	; (8003360 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003248:	4a46      	ldr	r2, [pc, #280]	; (8003364 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800324a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003250:	4a45      	ldr	r2, [pc, #276]	; (8003368 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8003252:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003258:	2200      	movs	r2, #0
 800325a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	330c      	adds	r3, #12
 8003266:	4619      	mov	r1, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003274:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003276:	f7fe f8d5 	bl	8001424 <HAL_DMA_Start_IT>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00c      	beq.n	800329a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003284:	f043 0210 	orr.w	r2, r3, #16
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8003298:	e054      	b.n	8003344 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0201 	orr.w	r2, r2, #1
 80032a8:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ae:	2200      	movs	r2, #0
 80032b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b6:	2200      	movs	r2, #0
 80032b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032be:	2200      	movs	r2, #0
 80032c0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c6:	2200      	movs	r2, #0
 80032c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d2:	4619      	mov	r1, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80032e2:	f7fe f89f 	bl	8001424 <HAL_DMA_Start_IT>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00c      	beq.n	8003306 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f0:	f043 0210 	orr.w	r2, r3, #16
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8003304:	e01e      	b.n	8003344 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003310:	2b40      	cmp	r3, #64	; 0x40
 8003312:	d007      	beq.n	8003324 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003322:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0220 	orr.w	r2, r2, #32
 8003332:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0202 	orr.w	r2, r2, #2
 8003342:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800334c:	7dfb      	ldrb	r3, [r7, #23]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	080035f3 	.word	0x080035f3
 800335c:	0800349f 	.word	0x0800349f
 8003360:	0800360f 	.word	0x0800360f
 8003364:	08003547 	.word	0x08003547
 8003368:	0800362b 	.word	0x0800362b

0800336c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003406:	f7fd fe15 	bl	8001034 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	2b20      	cmp	r3, #32
 8003418:	d03b      	beq.n	8003492 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0220 	bic.w	r2, r2, #32
 8003428:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0202 	bic.w	r2, r2, #2
 8003438:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	2164      	movs	r1, #100	; 0x64
 800343e:	6978      	ldr	r0, [r7, #20]
 8003440:	f000 fa82 	bl	8003948 <SPI_EndRxTxTransaction>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d005      	beq.n	8003456 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800344e:	f043 0220 	orr.w	r2, r3, #32
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10a      	bne.n	8003474 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2200      	movs	r2, #0
 8003478:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800348a:	6978      	ldr	r0, [r7, #20]
 800348c:	f7ff ffaa 	bl	80033e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003490:	e002      	b.n	8003498 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003492:	6978      	ldr	r0, [r7, #20]
 8003494:	f7ff ff6a 	bl	800336c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b084      	sub	sp, #16
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034aa:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034ac:	f7fd fdc2 	bl	8001034 <HAL_GetTick>
 80034b0:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b20      	cmp	r3, #32
 80034be:	d03c      	beq.n	800353a <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0220 	bic.w	r2, r2, #32
 80034ce:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10d      	bne.n	80034f4 <SPI_DMAReceiveCplt+0x56>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e0:	d108      	bne.n	80034f4 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0203 	bic.w	r2, r2, #3
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	e007      	b.n	8003504 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	2164      	movs	r1, #100	; 0x64
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f9c5 	bl	8003898 <SPI_EndRxTransaction>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2220      	movs	r2, #32
 8003518:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f7ff ff56 	bl	80033e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003538:	e002      	b.n	8003540 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f7ff ff20 	bl	8003380 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003554:	f7fd fd6e 	bl	8001034 <HAL_GetTick>
 8003558:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b20      	cmp	r3, #32
 8003566:	d030      	beq.n	80035ca <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0220 	bic.w	r2, r2, #32
 8003576:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	2164      	movs	r1, #100	; 0x64
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f9e3 	bl	8003948 <SPI_EndRxTxTransaction>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358c:	f043 0220 	orr.w	r2, r3, #32
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0203 	bic.w	r2, r2, #3
 80035a2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f7ff ff0e 	bl	80033e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80035c8:	e002      	b.n	80035d0 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f7ff fee2 	bl	8003394 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f7ff fedf 	bl	80033a8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f7ff fedb 	bl	80033bc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003606:	bf00      	nop
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b084      	sub	sp, #16
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361a:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f7ff fed7 	bl	80033d0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003622:	bf00      	nop
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b084      	sub	sp, #16
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0203 	bic.w	r2, r2, #3
 8003646:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364c:	f043 0210 	orr.w	r2, r3, #16
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7ff fec1 	bl	80033e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003662:	bf00      	nop
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
	...

0800366c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	4613      	mov	r3, r2
 800367a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800367c:	f7fd fcda 	bl	8001034 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	4413      	add	r3, r2
 800368a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800368c:	f7fd fcd2 	bl	8001034 <HAL_GetTick>
 8003690:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003692:	4b39      	ldr	r3, [pc, #228]	; (8003778 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	015b      	lsls	r3, r3, #5
 8003698:	0d1b      	lsrs	r3, r3, #20
 800369a:	69fa      	ldr	r2, [r7, #28]
 800369c:	fb02 f303 	mul.w	r3, r2, r3
 80036a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036a2:	e054      	b.n	800374e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036aa:	d050      	beq.n	800374e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036ac:	f7fd fcc2 	bl	8001034 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d902      	bls.n	80036c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d13d      	bne.n	800373e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036da:	d111      	bne.n	8003700 <SPI_WaitFlagStateUntilTimeout+0x94>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036e4:	d004      	beq.n	80036f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ee:	d107      	bne.n	8003700 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003708:	d10f      	bne.n	800372a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003728:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e017      	b.n	800376e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	3b01      	subs	r3, #1
 800374c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4013      	ands	r3, r2
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	429a      	cmp	r2, r3
 800375c:	bf0c      	ite	eq
 800375e:	2301      	moveq	r3, #1
 8003760:	2300      	movne	r3, #0
 8003762:	b2db      	uxtb	r3, r3
 8003764:	461a      	mov	r2, r3
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	429a      	cmp	r2, r3
 800376a:	d19b      	bne.n	80036a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3720      	adds	r7, #32
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20000000 	.word	0x20000000

0800377c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
 8003788:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800378a:	f7fd fc53 	bl	8001034 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	4413      	add	r3, r2
 8003798:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800379a:	f7fd fc4b 	bl	8001034 <HAL_GetTick>
 800379e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80037a0:	4b3c      	ldr	r3, [pc, #240]	; (8003894 <SPI_WaitFifoStateUntilTimeout+0x118>)
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	4613      	mov	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	00da      	lsls	r2, r3, #3
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	0d1b      	lsrs	r3, r3, #20
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	fb02 f303 	mul.w	r3, r2, r3
 80037b6:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80037b8:	e05f      	b.n	800387a <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80037c0:	d106      	bne.n	80037d0 <SPI_WaitFifoStateUntilTimeout+0x54>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d103      	bne.n	80037d0 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	330c      	adds	r3, #12
 80037ce:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d6:	d050      	beq.n	800387a <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037d8:	f7fd fc2c 	bl	8001034 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	69fa      	ldr	r2, [r7, #28]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d902      	bls.n	80037ee <SPI_WaitFifoStateUntilTimeout+0x72>
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d13d      	bne.n	800386a <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003806:	d111      	bne.n	800382c <SPI_WaitFifoStateUntilTimeout+0xb0>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003810:	d004      	beq.n	800381c <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800381a:	d107      	bne.n	800382c <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800382a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003830:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003834:	d10f      	bne.n	8003856 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003854:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e010      	b.n	800388c <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	3b01      	subs	r3, #1
 8003878:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4013      	ands	r3, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	429a      	cmp	r2, r3
 8003888:	d197      	bne.n	80037ba <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3720      	adds	r7, #32
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20000000 	.word	0x20000000

08003898 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af02      	add	r7, sp, #8
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ac:	d111      	bne.n	80038d2 <SPI_EndRxTransaction+0x3a>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b6:	d004      	beq.n	80038c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c0:	d107      	bne.n	80038d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038d0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2200      	movs	r2, #0
 80038da:	2180      	movs	r1, #128	; 0x80
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f7ff fec5 	bl	800366c <SPI_WaitFlagStateUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ec:	f043 0220 	orr.w	r2, r3, #32
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e023      	b.n	8003940 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003900:	d11d      	bne.n	800393e <SPI_EndRxTransaction+0xa6>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800390a:	d004      	beq.n	8003916 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003914:	d113      	bne.n	800393e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2200      	movs	r2, #0
 800391e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f7ff ff2a 	bl	800377c <SPI_WaitFifoStateUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d007      	beq.n	800393e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003932:	f043 0220 	orr.w	r2, r3, #32
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e000      	b.n	8003940 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af02      	add	r7, sp, #8
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2200      	movs	r2, #0
 800395c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f7ff ff0b 	bl	800377c <SPI_WaitFifoStateUntilTimeout>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d007      	beq.n	800397c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003970:	f043 0220 	orr.w	r2, r3, #32
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e027      	b.n	80039cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2200      	movs	r2, #0
 8003984:	2180      	movs	r1, #128	; 0x80
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f7ff fe70 	bl	800366c <SPI_WaitFlagStateUntilTimeout>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d007      	beq.n	80039a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003996:	f043 0220 	orr.w	r2, r3, #32
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e014      	b.n	80039cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f7ff fee4 	bl	800377c <SPI_WaitFifoStateUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d007      	beq.n	80039ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039be:	f043 0220 	orr.w	r2, r3, #32
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e000      	b.n	80039cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e040      	b.n	8003a68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7fd fa48 	bl	8000e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2224      	movs	r2, #36	; 0x24
 8003a00:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0201 	bic.w	r2, r2, #1
 8003a10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f8c0 	bl	8003b98 <UART_SetConfig>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e022      	b.n	8003a68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 faea 	bl	8004004 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 fb71 	bl	8004148 <UART_CheckIdleState>
 8003a66:	4603      	mov	r3, r0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08a      	sub	sp, #40	; 0x28
 8003a74:	af02      	add	r7, sp, #8
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	603b      	str	r3, [r7, #0]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	f040 8081 	bne.w	8003b8c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <HAL_UART_Transmit+0x26>
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e079      	b.n	8003b8e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_UART_Transmit+0x38>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e072      	b.n	8003b8e <HAL_UART_Transmit+0x11e>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2221      	movs	r2, #33	; 0x21
 8003aba:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003abc:	f7fd faba 	bl	8001034 <HAL_GetTick>
 8003ac0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	88fa      	ldrh	r2, [r7, #6]
 8003ac6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	88fa      	ldrh	r2, [r7, #6]
 8003ace:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ada:	d108      	bne.n	8003aee <HAL_UART_Transmit+0x7e>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d104      	bne.n	8003aee <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	61bb      	str	r3, [r7, #24]
 8003aec:	e003      	b.n	8003af6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003afe:	e02d      	b.n	8003b5c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2200      	movs	r2, #0
 8003b08:	2180      	movs	r1, #128	; 0x80
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 fb61 	bl	80041d2 <UART_WaitOnFlagUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e039      	b.n	8003b8e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10b      	bne.n	8003b38 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	881a      	ldrh	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b2c:	b292      	uxth	r2, r2
 8003b2e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	3302      	adds	r3, #2
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	e008      	b.n	8003b4a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	781a      	ldrb	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	b292      	uxth	r2, r2
 8003b42:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	3301      	adds	r3, #1
 8003b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1cb      	bne.n	8003b00 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2140      	movs	r1, #64	; 0x40
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 fb2d 	bl	80041d2 <UART_WaitOnFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e005      	b.n	8003b8e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2220      	movs	r2, #32
 8003b86:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e000      	b.n	8003b8e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003b8c:	2302      	movs	r3, #2
  }
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3720      	adds	r7, #32
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b98:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003b9c:	b088      	sub	sp, #32
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	4baa      	ldr	r3, [pc, #680]	; (8003e70 <UART_SetConfig+0x2d8>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	69f9      	ldr	r1, [r7, #28]
 8003bce:	430b      	orrs	r3, r1
 8003bd0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4aa0      	ldr	r2, [pc, #640]	; (8003e74 <UART_SetConfig+0x2dc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d004      	beq.n	8003c02 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	69fa      	ldr	r2, [r7, #28]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a97      	ldr	r2, [pc, #604]	; (8003e78 <UART_SetConfig+0x2e0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d121      	bne.n	8003c64 <UART_SetConfig+0xcc>
 8003c20:	4b96      	ldr	r3, [pc, #600]	; (8003e7c <UART_SetConfig+0x2e4>)
 8003c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d816      	bhi.n	8003c5c <UART_SetConfig+0xc4>
 8003c2e:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <UART_SetConfig+0x9c>)
 8003c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c34:	08003c45 	.word	0x08003c45
 8003c38:	08003c51 	.word	0x08003c51
 8003c3c:	08003c4b 	.word	0x08003c4b
 8003c40:	08003c57 	.word	0x08003c57
 8003c44:	2301      	movs	r3, #1
 8003c46:	76fb      	strb	r3, [r7, #27]
 8003c48:	e098      	b.n	8003d7c <UART_SetConfig+0x1e4>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	76fb      	strb	r3, [r7, #27]
 8003c4e:	e095      	b.n	8003d7c <UART_SetConfig+0x1e4>
 8003c50:	2304      	movs	r3, #4
 8003c52:	76fb      	strb	r3, [r7, #27]
 8003c54:	e092      	b.n	8003d7c <UART_SetConfig+0x1e4>
 8003c56:	2308      	movs	r3, #8
 8003c58:	76fb      	strb	r3, [r7, #27]
 8003c5a:	e08f      	b.n	8003d7c <UART_SetConfig+0x1e4>
 8003c5c:	2310      	movs	r3, #16
 8003c5e:	76fb      	strb	r3, [r7, #27]
 8003c60:	bf00      	nop
 8003c62:	e08b      	b.n	8003d7c <UART_SetConfig+0x1e4>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a85      	ldr	r2, [pc, #532]	; (8003e80 <UART_SetConfig+0x2e8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d134      	bne.n	8003cd8 <UART_SetConfig+0x140>
 8003c6e:	4b83      	ldr	r3, [pc, #524]	; (8003e7c <UART_SetConfig+0x2e4>)
 8003c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c74:	f003 030c 	and.w	r3, r3, #12
 8003c78:	2b0c      	cmp	r3, #12
 8003c7a:	d829      	bhi.n	8003cd0 <UART_SetConfig+0x138>
 8003c7c:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <UART_SetConfig+0xec>)
 8003c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c82:	bf00      	nop
 8003c84:	08003cb9 	.word	0x08003cb9
 8003c88:	08003cd1 	.word	0x08003cd1
 8003c8c:	08003cd1 	.word	0x08003cd1
 8003c90:	08003cd1 	.word	0x08003cd1
 8003c94:	08003cc5 	.word	0x08003cc5
 8003c98:	08003cd1 	.word	0x08003cd1
 8003c9c:	08003cd1 	.word	0x08003cd1
 8003ca0:	08003cd1 	.word	0x08003cd1
 8003ca4:	08003cbf 	.word	0x08003cbf
 8003ca8:	08003cd1 	.word	0x08003cd1
 8003cac:	08003cd1 	.word	0x08003cd1
 8003cb0:	08003cd1 	.word	0x08003cd1
 8003cb4:	08003ccb 	.word	0x08003ccb
 8003cb8:	2300      	movs	r3, #0
 8003cba:	76fb      	strb	r3, [r7, #27]
 8003cbc:	e05e      	b.n	8003d7c <UART_SetConfig+0x1e4>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	76fb      	strb	r3, [r7, #27]
 8003cc2:	e05b      	b.n	8003d7c <UART_SetConfig+0x1e4>
 8003cc4:	2304      	movs	r3, #4
 8003cc6:	76fb      	strb	r3, [r7, #27]
 8003cc8:	e058      	b.n	8003d7c <UART_SetConfig+0x1e4>
 8003cca:	2308      	movs	r3, #8
 8003ccc:	76fb      	strb	r3, [r7, #27]
 8003cce:	e055      	b.n	8003d7c <UART_SetConfig+0x1e4>
 8003cd0:	2310      	movs	r3, #16
 8003cd2:	76fb      	strb	r3, [r7, #27]
 8003cd4:	bf00      	nop
 8003cd6:	e051      	b.n	8003d7c <UART_SetConfig+0x1e4>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a69      	ldr	r2, [pc, #420]	; (8003e84 <UART_SetConfig+0x2ec>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d120      	bne.n	8003d24 <UART_SetConfig+0x18c>
 8003ce2:	4b66      	ldr	r3, [pc, #408]	; (8003e7c <UART_SetConfig+0x2e4>)
 8003ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d00f      	beq.n	8003d10 <UART_SetConfig+0x178>
 8003cf0:	2b10      	cmp	r3, #16
 8003cf2:	d802      	bhi.n	8003cfa <UART_SetConfig+0x162>
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <UART_SetConfig+0x16c>
 8003cf8:	e010      	b.n	8003d1c <UART_SetConfig+0x184>
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d005      	beq.n	8003d0a <UART_SetConfig+0x172>
 8003cfe:	2b30      	cmp	r3, #48	; 0x30
 8003d00:	d009      	beq.n	8003d16 <UART_SetConfig+0x17e>
 8003d02:	e00b      	b.n	8003d1c <UART_SetConfig+0x184>
 8003d04:	2300      	movs	r3, #0
 8003d06:	76fb      	strb	r3, [r7, #27]
 8003d08:	e038      	b.n	8003d7c <UART_SetConfig+0x1e4>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	76fb      	strb	r3, [r7, #27]
 8003d0e:	e035      	b.n	8003d7c <UART_SetConfig+0x1e4>
 8003d10:	2304      	movs	r3, #4
 8003d12:	76fb      	strb	r3, [r7, #27]
 8003d14:	e032      	b.n	8003d7c <UART_SetConfig+0x1e4>
 8003d16:	2308      	movs	r3, #8
 8003d18:	76fb      	strb	r3, [r7, #27]
 8003d1a:	e02f      	b.n	8003d7c <UART_SetConfig+0x1e4>
 8003d1c:	2310      	movs	r3, #16
 8003d1e:	76fb      	strb	r3, [r7, #27]
 8003d20:	bf00      	nop
 8003d22:	e02b      	b.n	8003d7c <UART_SetConfig+0x1e4>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a52      	ldr	r2, [pc, #328]	; (8003e74 <UART_SetConfig+0x2dc>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d124      	bne.n	8003d78 <UART_SetConfig+0x1e0>
 8003d2e:	4b53      	ldr	r3, [pc, #332]	; (8003e7c <UART_SetConfig+0x2e4>)
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d3c:	d012      	beq.n	8003d64 <UART_SetConfig+0x1cc>
 8003d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d42:	d802      	bhi.n	8003d4a <UART_SetConfig+0x1b2>
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d007      	beq.n	8003d58 <UART_SetConfig+0x1c0>
 8003d48:	e012      	b.n	8003d70 <UART_SetConfig+0x1d8>
 8003d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d4e:	d006      	beq.n	8003d5e <UART_SetConfig+0x1c6>
 8003d50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d54:	d009      	beq.n	8003d6a <UART_SetConfig+0x1d2>
 8003d56:	e00b      	b.n	8003d70 <UART_SetConfig+0x1d8>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	76fb      	strb	r3, [r7, #27]
 8003d5c:	e00e      	b.n	8003d7c <UART_SetConfig+0x1e4>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	76fb      	strb	r3, [r7, #27]
 8003d62:	e00b      	b.n	8003d7c <UART_SetConfig+0x1e4>
 8003d64:	2304      	movs	r3, #4
 8003d66:	76fb      	strb	r3, [r7, #27]
 8003d68:	e008      	b.n	8003d7c <UART_SetConfig+0x1e4>
 8003d6a:	2308      	movs	r3, #8
 8003d6c:	76fb      	strb	r3, [r7, #27]
 8003d6e:	e005      	b.n	8003d7c <UART_SetConfig+0x1e4>
 8003d70:	2310      	movs	r3, #16
 8003d72:	76fb      	strb	r3, [r7, #27]
 8003d74:	bf00      	nop
 8003d76:	e001      	b.n	8003d7c <UART_SetConfig+0x1e4>
 8003d78:	2310      	movs	r3, #16
 8003d7a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a3c      	ldr	r2, [pc, #240]	; (8003e74 <UART_SetConfig+0x2dc>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	f040 8082 	bne.w	8003e8c <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d88:	7efb      	ldrb	r3, [r7, #27]
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d823      	bhi.n	8003dd6 <UART_SetConfig+0x23e>
 8003d8e:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <UART_SetConfig+0x1fc>)
 8003d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d94:	08003db9 	.word	0x08003db9
 8003d98:	08003dd7 	.word	0x08003dd7
 8003d9c:	08003dc1 	.word	0x08003dc1
 8003da0:	08003dd7 	.word	0x08003dd7
 8003da4:	08003dc7 	.word	0x08003dc7
 8003da8:	08003dd7 	.word	0x08003dd7
 8003dac:	08003dd7 	.word	0x08003dd7
 8003db0:	08003dd7 	.word	0x08003dd7
 8003db4:	08003dcf 	.word	0x08003dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003db8:	f7fe fc7e 	bl	80026b8 <HAL_RCC_GetPCLK1Freq>
 8003dbc:	6178      	str	r0, [r7, #20]
        break;
 8003dbe:	e00f      	b.n	8003de0 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dc0:	4b31      	ldr	r3, [pc, #196]	; (8003e88 <UART_SetConfig+0x2f0>)
 8003dc2:	617b      	str	r3, [r7, #20]
        break;
 8003dc4:	e00c      	b.n	8003de0 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dc6:	f7fe fbe1 	bl	800258c <HAL_RCC_GetSysClockFreq>
 8003dca:	6178      	str	r0, [r7, #20]
        break;
 8003dcc:	e008      	b.n	8003de0 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dd2:	617b      	str	r3, [r7, #20]
        break;
 8003dd4:	e004      	b.n	8003de0 <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	76bb      	strb	r3, [r7, #26]
        break;
 8003dde:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 8100 	beq.w	8003fe8 <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	4613      	mov	r3, r2
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	4413      	add	r3, r2
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d305      	bcc.n	8003e04 <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d902      	bls.n	8003e0a <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	76bb      	strb	r3, [r7, #26]
 8003e08:	e0ee      	b.n	8003fe8 <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	f04f 0400 	mov.w	r4, #0
 8003e1a:	0214      	lsls	r4, r2, #8
 8003e1c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003e20:	020b      	lsls	r3, r1, #8
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6852      	ldr	r2, [r2, #4]
 8003e26:	0852      	lsrs	r2, r2, #1
 8003e28:	4611      	mov	r1, r2
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	eb13 0b01 	adds.w	fp, r3, r1
 8003e32:	eb44 0c02 	adc.w	ip, r4, r2
 8003e36:	4658      	mov	r0, fp
 8003e38:	4661      	mov	r1, ip
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f04f 0400 	mov.w	r4, #0
 8003e42:	461a      	mov	r2, r3
 8003e44:	4623      	mov	r3, r4
 8003e46:	f7fc f9c1 	bl	80001cc <__aeabi_uldivmod>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e56:	d308      	bcc.n	8003e6a <UART_SetConfig+0x2d2>
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e5e:	d204      	bcs.n	8003e6a <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	60da      	str	r2, [r3, #12]
 8003e68:	e0be      	b.n	8003fe8 <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	76bb      	strb	r3, [r7, #26]
 8003e6e:	e0bb      	b.n	8003fe8 <UART_SetConfig+0x450>
 8003e70:	efff69f3 	.word	0xefff69f3
 8003e74:	40008000 	.word	0x40008000
 8003e78:	40013800 	.word	0x40013800
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40004400 	.word	0x40004400
 8003e84:	40004800 	.word	0x40004800
 8003e88:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e94:	d15c      	bne.n	8003f50 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8003e96:	7efb      	ldrb	r3, [r7, #27]
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d828      	bhi.n	8003eee <UART_SetConfig+0x356>
 8003e9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ea4 <UART_SetConfig+0x30c>)
 8003e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea2:	bf00      	nop
 8003ea4:	08003ec9 	.word	0x08003ec9
 8003ea8:	08003ed1 	.word	0x08003ed1
 8003eac:	08003ed9 	.word	0x08003ed9
 8003eb0:	08003eef 	.word	0x08003eef
 8003eb4:	08003edf 	.word	0x08003edf
 8003eb8:	08003eef 	.word	0x08003eef
 8003ebc:	08003eef 	.word	0x08003eef
 8003ec0:	08003eef 	.word	0x08003eef
 8003ec4:	08003ee7 	.word	0x08003ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ec8:	f7fe fbf6 	bl	80026b8 <HAL_RCC_GetPCLK1Freq>
 8003ecc:	6178      	str	r0, [r7, #20]
        break;
 8003ece:	e013      	b.n	8003ef8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ed0:	f7fe fc08 	bl	80026e4 <HAL_RCC_GetPCLK2Freq>
 8003ed4:	6178      	str	r0, [r7, #20]
        break;
 8003ed6:	e00f      	b.n	8003ef8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ed8:	4b49      	ldr	r3, [pc, #292]	; (8004000 <UART_SetConfig+0x468>)
 8003eda:	617b      	str	r3, [r7, #20]
        break;
 8003edc:	e00c      	b.n	8003ef8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ede:	f7fe fb55 	bl	800258c <HAL_RCC_GetSysClockFreq>
 8003ee2:	6178      	str	r0, [r7, #20]
        break;
 8003ee4:	e008      	b.n	8003ef8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eea:	617b      	str	r3, [r7, #20]
        break;
 8003eec:	e004      	b.n	8003ef8 <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	76bb      	strb	r3, [r7, #26]
        break;
 8003ef6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d074      	beq.n	8003fe8 <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	005a      	lsls	r2, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	085b      	lsrs	r3, r3, #1
 8003f08:	441a      	add	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	2b0f      	cmp	r3, #15
 8003f1a:	d916      	bls.n	8003f4a <UART_SetConfig+0x3b2>
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f22:	d212      	bcs.n	8003f4a <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	f023 030f 	bic.w	r3, r3, #15
 8003f2c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	085b      	lsrs	r3, r3, #1
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	89fb      	ldrh	r3, [r7, #14]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	89fa      	ldrh	r2, [r7, #14]
 8003f46:	60da      	str	r2, [r3, #12]
 8003f48:	e04e      	b.n	8003fe8 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	76bb      	strb	r3, [r7, #26]
 8003f4e:	e04b      	b.n	8003fe8 <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f50:	7efb      	ldrb	r3, [r7, #27]
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d827      	bhi.n	8003fa6 <UART_SetConfig+0x40e>
 8003f56:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <UART_SetConfig+0x3c4>)
 8003f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5c:	08003f81 	.word	0x08003f81
 8003f60:	08003f89 	.word	0x08003f89
 8003f64:	08003f91 	.word	0x08003f91
 8003f68:	08003fa7 	.word	0x08003fa7
 8003f6c:	08003f97 	.word	0x08003f97
 8003f70:	08003fa7 	.word	0x08003fa7
 8003f74:	08003fa7 	.word	0x08003fa7
 8003f78:	08003fa7 	.word	0x08003fa7
 8003f7c:	08003f9f 	.word	0x08003f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f80:	f7fe fb9a 	bl	80026b8 <HAL_RCC_GetPCLK1Freq>
 8003f84:	6178      	str	r0, [r7, #20]
        break;
 8003f86:	e013      	b.n	8003fb0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f88:	f7fe fbac 	bl	80026e4 <HAL_RCC_GetPCLK2Freq>
 8003f8c:	6178      	str	r0, [r7, #20]
        break;
 8003f8e:	e00f      	b.n	8003fb0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f90:	4b1b      	ldr	r3, [pc, #108]	; (8004000 <UART_SetConfig+0x468>)
 8003f92:	617b      	str	r3, [r7, #20]
        break;
 8003f94:	e00c      	b.n	8003fb0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f96:	f7fe faf9 	bl	800258c <HAL_RCC_GetSysClockFreq>
 8003f9a:	6178      	str	r0, [r7, #20]
        break;
 8003f9c:	e008      	b.n	8003fb0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fa2:	617b      	str	r3, [r7, #20]
        break;
 8003fa4:	e004      	b.n	8003fb0 <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	76bb      	strb	r3, [r7, #26]
        break;
 8003fae:	bf00      	nop
    }

    if (pclk != 0U)
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d018      	beq.n	8003fe8 <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	085a      	lsrs	r2, r3, #1
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	441a      	add	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	2b0f      	cmp	r3, #15
 8003fd0:	d908      	bls.n	8003fe4 <UART_SetConfig+0x44c>
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd8:	d204      	bcs.n	8003fe4 <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	60da      	str	r2, [r3, #12]
 8003fe2:	e001      	b.n	8003fe8 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003ff4:	7ebb      	ldrb	r3, [r7, #26]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3720      	adds	r7, #32
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004000:	00f42400 	.word	0x00f42400

08004004 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	f003 0310 	and.w	r3, r3, #16
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	f003 0320 	and.w	r3, r3, #32
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d01a      	beq.n	800411a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004102:	d10a      	bne.n	800411a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	605a      	str	r2, [r3, #4]
  }
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af02      	add	r7, sp, #8
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004156:	f7fc ff6d 	bl	8001034 <HAL_GetTick>
 800415a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b08      	cmp	r3, #8
 8004168:	d10e      	bne.n	8004188 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800416a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f82a 	bl	80041d2 <UART_WaitOnFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e020      	b.n	80041ca <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b04      	cmp	r3, #4
 8004194:	d10e      	bne.n	80041b4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004196:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f814 	bl	80041d2 <UART_WaitOnFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e00a      	b.n	80041ca <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2220      	movs	r2, #32
 80041b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	603b      	str	r3, [r7, #0]
 80041de:	4613      	mov	r3, r2
 80041e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e2:	e05d      	b.n	80042a0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ea:	d059      	beq.n	80042a0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ec:	f7fc ff22 	bl	8001034 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d302      	bcc.n	8004202 <UART_WaitOnFlagUntilTimeout+0x30>
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d11b      	bne.n	800423a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004210:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0201 	bic.w	r2, r2, #1
 8004220:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2220      	movs	r2, #32
 8004226:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e042      	b.n	80042c0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d02b      	beq.n	80042a0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004256:	d123      	bne.n	80042a0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004260:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004270:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0201 	bic.w	r2, r2, #1
 8004280:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2220      	movs	r2, #32
 8004286:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2220      	movs	r2, #32
 8004292:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e00f      	b.n	80042c0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	69da      	ldr	r2, [r3, #28]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	4013      	ands	r3, r2
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	bf0c      	ite	eq
 80042b0:	2301      	moveq	r3, #1
 80042b2:	2300      	movne	r3, #0
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	461a      	mov	r2, r3
 80042b8:	79fb      	ldrb	r3, [r7, #7]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d092      	beq.n	80041e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <__errno>:
 80042c8:	4b01      	ldr	r3, [pc, #4]	; (80042d0 <__errno+0x8>)
 80042ca:	6818      	ldr	r0, [r3, #0]
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	2000000c 	.word	0x2000000c

080042d4 <__libc_init_array>:
 80042d4:	b570      	push	{r4, r5, r6, lr}
 80042d6:	4e0d      	ldr	r6, [pc, #52]	; (800430c <__libc_init_array+0x38>)
 80042d8:	4c0d      	ldr	r4, [pc, #52]	; (8004310 <__libc_init_array+0x3c>)
 80042da:	1ba4      	subs	r4, r4, r6
 80042dc:	10a4      	asrs	r4, r4, #2
 80042de:	2500      	movs	r5, #0
 80042e0:	42a5      	cmp	r5, r4
 80042e2:	d109      	bne.n	80042f8 <__libc_init_array+0x24>
 80042e4:	4e0b      	ldr	r6, [pc, #44]	; (8004314 <__libc_init_array+0x40>)
 80042e6:	4c0c      	ldr	r4, [pc, #48]	; (8004318 <__libc_init_array+0x44>)
 80042e8:	f000 fc88 	bl	8004bfc <_init>
 80042ec:	1ba4      	subs	r4, r4, r6
 80042ee:	10a4      	asrs	r4, r4, #2
 80042f0:	2500      	movs	r5, #0
 80042f2:	42a5      	cmp	r5, r4
 80042f4:	d105      	bne.n	8004302 <__libc_init_array+0x2e>
 80042f6:	bd70      	pop	{r4, r5, r6, pc}
 80042f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042fc:	4798      	blx	r3
 80042fe:	3501      	adds	r5, #1
 8004300:	e7ee      	b.n	80042e0 <__libc_init_array+0xc>
 8004302:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004306:	4798      	blx	r3
 8004308:	3501      	adds	r5, #1
 800430a:	e7f2      	b.n	80042f2 <__libc_init_array+0x1e>
 800430c:	08004d08 	.word	0x08004d08
 8004310:	08004d08 	.word	0x08004d08
 8004314:	08004d08 	.word	0x08004d08
 8004318:	08004d0c 	.word	0x08004d0c

0800431c <memset>:
 800431c:	4402      	add	r2, r0
 800431e:	4603      	mov	r3, r0
 8004320:	4293      	cmp	r3, r2
 8004322:	d100      	bne.n	8004326 <memset+0xa>
 8004324:	4770      	bx	lr
 8004326:	f803 1b01 	strb.w	r1, [r3], #1
 800432a:	e7f9      	b.n	8004320 <memset+0x4>

0800432c <_puts_r>:
 800432c:	b570      	push	{r4, r5, r6, lr}
 800432e:	460e      	mov	r6, r1
 8004330:	4605      	mov	r5, r0
 8004332:	b118      	cbz	r0, 800433c <_puts_r+0x10>
 8004334:	6983      	ldr	r3, [r0, #24]
 8004336:	b90b      	cbnz	r3, 800433c <_puts_r+0x10>
 8004338:	f000 fa0c 	bl	8004754 <__sinit>
 800433c:	69ab      	ldr	r3, [r5, #24]
 800433e:	68ac      	ldr	r4, [r5, #8]
 8004340:	b913      	cbnz	r3, 8004348 <_puts_r+0x1c>
 8004342:	4628      	mov	r0, r5
 8004344:	f000 fa06 	bl	8004754 <__sinit>
 8004348:	4b23      	ldr	r3, [pc, #140]	; (80043d8 <_puts_r+0xac>)
 800434a:	429c      	cmp	r4, r3
 800434c:	d117      	bne.n	800437e <_puts_r+0x52>
 800434e:	686c      	ldr	r4, [r5, #4]
 8004350:	89a3      	ldrh	r3, [r4, #12]
 8004352:	071b      	lsls	r3, r3, #28
 8004354:	d51d      	bpl.n	8004392 <_puts_r+0x66>
 8004356:	6923      	ldr	r3, [r4, #16]
 8004358:	b1db      	cbz	r3, 8004392 <_puts_r+0x66>
 800435a:	3e01      	subs	r6, #1
 800435c:	68a3      	ldr	r3, [r4, #8]
 800435e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004362:	3b01      	subs	r3, #1
 8004364:	60a3      	str	r3, [r4, #8]
 8004366:	b9e9      	cbnz	r1, 80043a4 <_puts_r+0x78>
 8004368:	2b00      	cmp	r3, #0
 800436a:	da2e      	bge.n	80043ca <_puts_r+0x9e>
 800436c:	4622      	mov	r2, r4
 800436e:	210a      	movs	r1, #10
 8004370:	4628      	mov	r0, r5
 8004372:	f000 f83f 	bl	80043f4 <__swbuf_r>
 8004376:	3001      	adds	r0, #1
 8004378:	d011      	beq.n	800439e <_puts_r+0x72>
 800437a:	200a      	movs	r0, #10
 800437c:	e011      	b.n	80043a2 <_puts_r+0x76>
 800437e:	4b17      	ldr	r3, [pc, #92]	; (80043dc <_puts_r+0xb0>)
 8004380:	429c      	cmp	r4, r3
 8004382:	d101      	bne.n	8004388 <_puts_r+0x5c>
 8004384:	68ac      	ldr	r4, [r5, #8]
 8004386:	e7e3      	b.n	8004350 <_puts_r+0x24>
 8004388:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <_puts_r+0xb4>)
 800438a:	429c      	cmp	r4, r3
 800438c:	bf08      	it	eq
 800438e:	68ec      	ldreq	r4, [r5, #12]
 8004390:	e7de      	b.n	8004350 <_puts_r+0x24>
 8004392:	4621      	mov	r1, r4
 8004394:	4628      	mov	r0, r5
 8004396:	f000 f87f 	bl	8004498 <__swsetup_r>
 800439a:	2800      	cmp	r0, #0
 800439c:	d0dd      	beq.n	800435a <_puts_r+0x2e>
 800439e:	f04f 30ff 	mov.w	r0, #4294967295
 80043a2:	bd70      	pop	{r4, r5, r6, pc}
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	da04      	bge.n	80043b2 <_puts_r+0x86>
 80043a8:	69a2      	ldr	r2, [r4, #24]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	dc06      	bgt.n	80043bc <_puts_r+0x90>
 80043ae:	290a      	cmp	r1, #10
 80043b0:	d004      	beq.n	80043bc <_puts_r+0x90>
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	6022      	str	r2, [r4, #0]
 80043b8:	7019      	strb	r1, [r3, #0]
 80043ba:	e7cf      	b.n	800435c <_puts_r+0x30>
 80043bc:	4622      	mov	r2, r4
 80043be:	4628      	mov	r0, r5
 80043c0:	f000 f818 	bl	80043f4 <__swbuf_r>
 80043c4:	3001      	adds	r0, #1
 80043c6:	d1c9      	bne.n	800435c <_puts_r+0x30>
 80043c8:	e7e9      	b.n	800439e <_puts_r+0x72>
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	200a      	movs	r0, #10
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	6022      	str	r2, [r4, #0]
 80043d2:	7018      	strb	r0, [r3, #0]
 80043d4:	e7e5      	b.n	80043a2 <_puts_r+0x76>
 80043d6:	bf00      	nop
 80043d8:	08004cc0 	.word	0x08004cc0
 80043dc:	08004ce0 	.word	0x08004ce0
 80043e0:	08004ca0 	.word	0x08004ca0

080043e4 <puts>:
 80043e4:	4b02      	ldr	r3, [pc, #8]	; (80043f0 <puts+0xc>)
 80043e6:	4601      	mov	r1, r0
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	f7ff bf9f 	b.w	800432c <_puts_r>
 80043ee:	bf00      	nop
 80043f0:	2000000c 	.word	0x2000000c

080043f4 <__swbuf_r>:
 80043f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f6:	460e      	mov	r6, r1
 80043f8:	4614      	mov	r4, r2
 80043fa:	4605      	mov	r5, r0
 80043fc:	b118      	cbz	r0, 8004406 <__swbuf_r+0x12>
 80043fe:	6983      	ldr	r3, [r0, #24]
 8004400:	b90b      	cbnz	r3, 8004406 <__swbuf_r+0x12>
 8004402:	f000 f9a7 	bl	8004754 <__sinit>
 8004406:	4b21      	ldr	r3, [pc, #132]	; (800448c <__swbuf_r+0x98>)
 8004408:	429c      	cmp	r4, r3
 800440a:	d12a      	bne.n	8004462 <__swbuf_r+0x6e>
 800440c:	686c      	ldr	r4, [r5, #4]
 800440e:	69a3      	ldr	r3, [r4, #24]
 8004410:	60a3      	str	r3, [r4, #8]
 8004412:	89a3      	ldrh	r3, [r4, #12]
 8004414:	071a      	lsls	r2, r3, #28
 8004416:	d52e      	bpl.n	8004476 <__swbuf_r+0x82>
 8004418:	6923      	ldr	r3, [r4, #16]
 800441a:	b363      	cbz	r3, 8004476 <__swbuf_r+0x82>
 800441c:	6923      	ldr	r3, [r4, #16]
 800441e:	6820      	ldr	r0, [r4, #0]
 8004420:	1ac0      	subs	r0, r0, r3
 8004422:	6963      	ldr	r3, [r4, #20]
 8004424:	b2f6      	uxtb	r6, r6
 8004426:	4283      	cmp	r3, r0
 8004428:	4637      	mov	r7, r6
 800442a:	dc04      	bgt.n	8004436 <__swbuf_r+0x42>
 800442c:	4621      	mov	r1, r4
 800442e:	4628      	mov	r0, r5
 8004430:	f000 f926 	bl	8004680 <_fflush_r>
 8004434:	bb28      	cbnz	r0, 8004482 <__swbuf_r+0x8e>
 8004436:	68a3      	ldr	r3, [r4, #8]
 8004438:	3b01      	subs	r3, #1
 800443a:	60a3      	str	r3, [r4, #8]
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	6022      	str	r2, [r4, #0]
 8004442:	701e      	strb	r6, [r3, #0]
 8004444:	6963      	ldr	r3, [r4, #20]
 8004446:	3001      	adds	r0, #1
 8004448:	4283      	cmp	r3, r0
 800444a:	d004      	beq.n	8004456 <__swbuf_r+0x62>
 800444c:	89a3      	ldrh	r3, [r4, #12]
 800444e:	07db      	lsls	r3, r3, #31
 8004450:	d519      	bpl.n	8004486 <__swbuf_r+0x92>
 8004452:	2e0a      	cmp	r6, #10
 8004454:	d117      	bne.n	8004486 <__swbuf_r+0x92>
 8004456:	4621      	mov	r1, r4
 8004458:	4628      	mov	r0, r5
 800445a:	f000 f911 	bl	8004680 <_fflush_r>
 800445e:	b190      	cbz	r0, 8004486 <__swbuf_r+0x92>
 8004460:	e00f      	b.n	8004482 <__swbuf_r+0x8e>
 8004462:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <__swbuf_r+0x9c>)
 8004464:	429c      	cmp	r4, r3
 8004466:	d101      	bne.n	800446c <__swbuf_r+0x78>
 8004468:	68ac      	ldr	r4, [r5, #8]
 800446a:	e7d0      	b.n	800440e <__swbuf_r+0x1a>
 800446c:	4b09      	ldr	r3, [pc, #36]	; (8004494 <__swbuf_r+0xa0>)
 800446e:	429c      	cmp	r4, r3
 8004470:	bf08      	it	eq
 8004472:	68ec      	ldreq	r4, [r5, #12]
 8004474:	e7cb      	b.n	800440e <__swbuf_r+0x1a>
 8004476:	4621      	mov	r1, r4
 8004478:	4628      	mov	r0, r5
 800447a:	f000 f80d 	bl	8004498 <__swsetup_r>
 800447e:	2800      	cmp	r0, #0
 8004480:	d0cc      	beq.n	800441c <__swbuf_r+0x28>
 8004482:	f04f 37ff 	mov.w	r7, #4294967295
 8004486:	4638      	mov	r0, r7
 8004488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800448a:	bf00      	nop
 800448c:	08004cc0 	.word	0x08004cc0
 8004490:	08004ce0 	.word	0x08004ce0
 8004494:	08004ca0 	.word	0x08004ca0

08004498 <__swsetup_r>:
 8004498:	4b32      	ldr	r3, [pc, #200]	; (8004564 <__swsetup_r+0xcc>)
 800449a:	b570      	push	{r4, r5, r6, lr}
 800449c:	681d      	ldr	r5, [r3, #0]
 800449e:	4606      	mov	r6, r0
 80044a0:	460c      	mov	r4, r1
 80044a2:	b125      	cbz	r5, 80044ae <__swsetup_r+0x16>
 80044a4:	69ab      	ldr	r3, [r5, #24]
 80044a6:	b913      	cbnz	r3, 80044ae <__swsetup_r+0x16>
 80044a8:	4628      	mov	r0, r5
 80044aa:	f000 f953 	bl	8004754 <__sinit>
 80044ae:	4b2e      	ldr	r3, [pc, #184]	; (8004568 <__swsetup_r+0xd0>)
 80044b0:	429c      	cmp	r4, r3
 80044b2:	d10f      	bne.n	80044d4 <__swsetup_r+0x3c>
 80044b4:	686c      	ldr	r4, [r5, #4]
 80044b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	0715      	lsls	r5, r2, #28
 80044be:	d42c      	bmi.n	800451a <__swsetup_r+0x82>
 80044c0:	06d0      	lsls	r0, r2, #27
 80044c2:	d411      	bmi.n	80044e8 <__swsetup_r+0x50>
 80044c4:	2209      	movs	r2, #9
 80044c6:	6032      	str	r2, [r6, #0]
 80044c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044cc:	81a3      	strh	r3, [r4, #12]
 80044ce:	f04f 30ff 	mov.w	r0, #4294967295
 80044d2:	e03e      	b.n	8004552 <__swsetup_r+0xba>
 80044d4:	4b25      	ldr	r3, [pc, #148]	; (800456c <__swsetup_r+0xd4>)
 80044d6:	429c      	cmp	r4, r3
 80044d8:	d101      	bne.n	80044de <__swsetup_r+0x46>
 80044da:	68ac      	ldr	r4, [r5, #8]
 80044dc:	e7eb      	b.n	80044b6 <__swsetup_r+0x1e>
 80044de:	4b24      	ldr	r3, [pc, #144]	; (8004570 <__swsetup_r+0xd8>)
 80044e0:	429c      	cmp	r4, r3
 80044e2:	bf08      	it	eq
 80044e4:	68ec      	ldreq	r4, [r5, #12]
 80044e6:	e7e6      	b.n	80044b6 <__swsetup_r+0x1e>
 80044e8:	0751      	lsls	r1, r2, #29
 80044ea:	d512      	bpl.n	8004512 <__swsetup_r+0x7a>
 80044ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044ee:	b141      	cbz	r1, 8004502 <__swsetup_r+0x6a>
 80044f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044f4:	4299      	cmp	r1, r3
 80044f6:	d002      	beq.n	80044fe <__swsetup_r+0x66>
 80044f8:	4630      	mov	r0, r6
 80044fa:	f000 fa19 	bl	8004930 <_free_r>
 80044fe:	2300      	movs	r3, #0
 8004500:	6363      	str	r3, [r4, #52]	; 0x34
 8004502:	89a3      	ldrh	r3, [r4, #12]
 8004504:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004508:	81a3      	strh	r3, [r4, #12]
 800450a:	2300      	movs	r3, #0
 800450c:	6063      	str	r3, [r4, #4]
 800450e:	6923      	ldr	r3, [r4, #16]
 8004510:	6023      	str	r3, [r4, #0]
 8004512:	89a3      	ldrh	r3, [r4, #12]
 8004514:	f043 0308 	orr.w	r3, r3, #8
 8004518:	81a3      	strh	r3, [r4, #12]
 800451a:	6923      	ldr	r3, [r4, #16]
 800451c:	b94b      	cbnz	r3, 8004532 <__swsetup_r+0x9a>
 800451e:	89a3      	ldrh	r3, [r4, #12]
 8004520:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004528:	d003      	beq.n	8004532 <__swsetup_r+0x9a>
 800452a:	4621      	mov	r1, r4
 800452c:	4630      	mov	r0, r6
 800452e:	f000 f9bf 	bl	80048b0 <__smakebuf_r>
 8004532:	89a2      	ldrh	r2, [r4, #12]
 8004534:	f012 0301 	ands.w	r3, r2, #1
 8004538:	d00c      	beq.n	8004554 <__swsetup_r+0xbc>
 800453a:	2300      	movs	r3, #0
 800453c:	60a3      	str	r3, [r4, #8]
 800453e:	6963      	ldr	r3, [r4, #20]
 8004540:	425b      	negs	r3, r3
 8004542:	61a3      	str	r3, [r4, #24]
 8004544:	6923      	ldr	r3, [r4, #16]
 8004546:	b953      	cbnz	r3, 800455e <__swsetup_r+0xc6>
 8004548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800454c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004550:	d1ba      	bne.n	80044c8 <__swsetup_r+0x30>
 8004552:	bd70      	pop	{r4, r5, r6, pc}
 8004554:	0792      	lsls	r2, r2, #30
 8004556:	bf58      	it	pl
 8004558:	6963      	ldrpl	r3, [r4, #20]
 800455a:	60a3      	str	r3, [r4, #8]
 800455c:	e7f2      	b.n	8004544 <__swsetup_r+0xac>
 800455e:	2000      	movs	r0, #0
 8004560:	e7f7      	b.n	8004552 <__swsetup_r+0xba>
 8004562:	bf00      	nop
 8004564:	2000000c 	.word	0x2000000c
 8004568:	08004cc0 	.word	0x08004cc0
 800456c:	08004ce0 	.word	0x08004ce0
 8004570:	08004ca0 	.word	0x08004ca0

08004574 <__sflush_r>:
 8004574:	898a      	ldrh	r2, [r1, #12]
 8004576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800457a:	4605      	mov	r5, r0
 800457c:	0710      	lsls	r0, r2, #28
 800457e:	460c      	mov	r4, r1
 8004580:	d458      	bmi.n	8004634 <__sflush_r+0xc0>
 8004582:	684b      	ldr	r3, [r1, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	dc05      	bgt.n	8004594 <__sflush_r+0x20>
 8004588:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	dc02      	bgt.n	8004594 <__sflush_r+0x20>
 800458e:	2000      	movs	r0, #0
 8004590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004594:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004596:	2e00      	cmp	r6, #0
 8004598:	d0f9      	beq.n	800458e <__sflush_r+0x1a>
 800459a:	2300      	movs	r3, #0
 800459c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045a0:	682f      	ldr	r7, [r5, #0]
 80045a2:	6a21      	ldr	r1, [r4, #32]
 80045a4:	602b      	str	r3, [r5, #0]
 80045a6:	d032      	beq.n	800460e <__sflush_r+0x9a>
 80045a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045aa:	89a3      	ldrh	r3, [r4, #12]
 80045ac:	075a      	lsls	r2, r3, #29
 80045ae:	d505      	bpl.n	80045bc <__sflush_r+0x48>
 80045b0:	6863      	ldr	r3, [r4, #4]
 80045b2:	1ac0      	subs	r0, r0, r3
 80045b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045b6:	b10b      	cbz	r3, 80045bc <__sflush_r+0x48>
 80045b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045ba:	1ac0      	subs	r0, r0, r3
 80045bc:	2300      	movs	r3, #0
 80045be:	4602      	mov	r2, r0
 80045c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045c2:	6a21      	ldr	r1, [r4, #32]
 80045c4:	4628      	mov	r0, r5
 80045c6:	47b0      	blx	r6
 80045c8:	1c43      	adds	r3, r0, #1
 80045ca:	89a3      	ldrh	r3, [r4, #12]
 80045cc:	d106      	bne.n	80045dc <__sflush_r+0x68>
 80045ce:	6829      	ldr	r1, [r5, #0]
 80045d0:	291d      	cmp	r1, #29
 80045d2:	d848      	bhi.n	8004666 <__sflush_r+0xf2>
 80045d4:	4a29      	ldr	r2, [pc, #164]	; (800467c <__sflush_r+0x108>)
 80045d6:	40ca      	lsrs	r2, r1
 80045d8:	07d6      	lsls	r6, r2, #31
 80045da:	d544      	bpl.n	8004666 <__sflush_r+0xf2>
 80045dc:	2200      	movs	r2, #0
 80045de:	6062      	str	r2, [r4, #4]
 80045e0:	04d9      	lsls	r1, r3, #19
 80045e2:	6922      	ldr	r2, [r4, #16]
 80045e4:	6022      	str	r2, [r4, #0]
 80045e6:	d504      	bpl.n	80045f2 <__sflush_r+0x7e>
 80045e8:	1c42      	adds	r2, r0, #1
 80045ea:	d101      	bne.n	80045f0 <__sflush_r+0x7c>
 80045ec:	682b      	ldr	r3, [r5, #0]
 80045ee:	b903      	cbnz	r3, 80045f2 <__sflush_r+0x7e>
 80045f0:	6560      	str	r0, [r4, #84]	; 0x54
 80045f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045f4:	602f      	str	r7, [r5, #0]
 80045f6:	2900      	cmp	r1, #0
 80045f8:	d0c9      	beq.n	800458e <__sflush_r+0x1a>
 80045fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045fe:	4299      	cmp	r1, r3
 8004600:	d002      	beq.n	8004608 <__sflush_r+0x94>
 8004602:	4628      	mov	r0, r5
 8004604:	f000 f994 	bl	8004930 <_free_r>
 8004608:	2000      	movs	r0, #0
 800460a:	6360      	str	r0, [r4, #52]	; 0x34
 800460c:	e7c0      	b.n	8004590 <__sflush_r+0x1c>
 800460e:	2301      	movs	r3, #1
 8004610:	4628      	mov	r0, r5
 8004612:	47b0      	blx	r6
 8004614:	1c41      	adds	r1, r0, #1
 8004616:	d1c8      	bne.n	80045aa <__sflush_r+0x36>
 8004618:	682b      	ldr	r3, [r5, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0c5      	beq.n	80045aa <__sflush_r+0x36>
 800461e:	2b1d      	cmp	r3, #29
 8004620:	d001      	beq.n	8004626 <__sflush_r+0xb2>
 8004622:	2b16      	cmp	r3, #22
 8004624:	d101      	bne.n	800462a <__sflush_r+0xb6>
 8004626:	602f      	str	r7, [r5, #0]
 8004628:	e7b1      	b.n	800458e <__sflush_r+0x1a>
 800462a:	89a3      	ldrh	r3, [r4, #12]
 800462c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004630:	81a3      	strh	r3, [r4, #12]
 8004632:	e7ad      	b.n	8004590 <__sflush_r+0x1c>
 8004634:	690f      	ldr	r7, [r1, #16]
 8004636:	2f00      	cmp	r7, #0
 8004638:	d0a9      	beq.n	800458e <__sflush_r+0x1a>
 800463a:	0793      	lsls	r3, r2, #30
 800463c:	680e      	ldr	r6, [r1, #0]
 800463e:	bf08      	it	eq
 8004640:	694b      	ldreq	r3, [r1, #20]
 8004642:	600f      	str	r7, [r1, #0]
 8004644:	bf18      	it	ne
 8004646:	2300      	movne	r3, #0
 8004648:	eba6 0807 	sub.w	r8, r6, r7
 800464c:	608b      	str	r3, [r1, #8]
 800464e:	f1b8 0f00 	cmp.w	r8, #0
 8004652:	dd9c      	ble.n	800458e <__sflush_r+0x1a>
 8004654:	4643      	mov	r3, r8
 8004656:	463a      	mov	r2, r7
 8004658:	6a21      	ldr	r1, [r4, #32]
 800465a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800465c:	4628      	mov	r0, r5
 800465e:	47b0      	blx	r6
 8004660:	2800      	cmp	r0, #0
 8004662:	dc06      	bgt.n	8004672 <__sflush_r+0xfe>
 8004664:	89a3      	ldrh	r3, [r4, #12]
 8004666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800466a:	81a3      	strh	r3, [r4, #12]
 800466c:	f04f 30ff 	mov.w	r0, #4294967295
 8004670:	e78e      	b.n	8004590 <__sflush_r+0x1c>
 8004672:	4407      	add	r7, r0
 8004674:	eba8 0800 	sub.w	r8, r8, r0
 8004678:	e7e9      	b.n	800464e <__sflush_r+0xda>
 800467a:	bf00      	nop
 800467c:	20400001 	.word	0x20400001

08004680 <_fflush_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	690b      	ldr	r3, [r1, #16]
 8004684:	4605      	mov	r5, r0
 8004686:	460c      	mov	r4, r1
 8004688:	b1db      	cbz	r3, 80046c2 <_fflush_r+0x42>
 800468a:	b118      	cbz	r0, 8004694 <_fflush_r+0x14>
 800468c:	6983      	ldr	r3, [r0, #24]
 800468e:	b90b      	cbnz	r3, 8004694 <_fflush_r+0x14>
 8004690:	f000 f860 	bl	8004754 <__sinit>
 8004694:	4b0c      	ldr	r3, [pc, #48]	; (80046c8 <_fflush_r+0x48>)
 8004696:	429c      	cmp	r4, r3
 8004698:	d109      	bne.n	80046ae <_fflush_r+0x2e>
 800469a:	686c      	ldr	r4, [r5, #4]
 800469c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046a0:	b17b      	cbz	r3, 80046c2 <_fflush_r+0x42>
 80046a2:	4621      	mov	r1, r4
 80046a4:	4628      	mov	r0, r5
 80046a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046aa:	f7ff bf63 	b.w	8004574 <__sflush_r>
 80046ae:	4b07      	ldr	r3, [pc, #28]	; (80046cc <_fflush_r+0x4c>)
 80046b0:	429c      	cmp	r4, r3
 80046b2:	d101      	bne.n	80046b8 <_fflush_r+0x38>
 80046b4:	68ac      	ldr	r4, [r5, #8]
 80046b6:	e7f1      	b.n	800469c <_fflush_r+0x1c>
 80046b8:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <_fflush_r+0x50>)
 80046ba:	429c      	cmp	r4, r3
 80046bc:	bf08      	it	eq
 80046be:	68ec      	ldreq	r4, [r5, #12]
 80046c0:	e7ec      	b.n	800469c <_fflush_r+0x1c>
 80046c2:	2000      	movs	r0, #0
 80046c4:	bd38      	pop	{r3, r4, r5, pc}
 80046c6:	bf00      	nop
 80046c8:	08004cc0 	.word	0x08004cc0
 80046cc:	08004ce0 	.word	0x08004ce0
 80046d0:	08004ca0 	.word	0x08004ca0

080046d4 <std>:
 80046d4:	2300      	movs	r3, #0
 80046d6:	b510      	push	{r4, lr}
 80046d8:	4604      	mov	r4, r0
 80046da:	e9c0 3300 	strd	r3, r3, [r0]
 80046de:	6083      	str	r3, [r0, #8]
 80046e0:	8181      	strh	r1, [r0, #12]
 80046e2:	6643      	str	r3, [r0, #100]	; 0x64
 80046e4:	81c2      	strh	r2, [r0, #14]
 80046e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046ea:	6183      	str	r3, [r0, #24]
 80046ec:	4619      	mov	r1, r3
 80046ee:	2208      	movs	r2, #8
 80046f0:	305c      	adds	r0, #92	; 0x5c
 80046f2:	f7ff fe13 	bl	800431c <memset>
 80046f6:	4b05      	ldr	r3, [pc, #20]	; (800470c <std+0x38>)
 80046f8:	6263      	str	r3, [r4, #36]	; 0x24
 80046fa:	4b05      	ldr	r3, [pc, #20]	; (8004710 <std+0x3c>)
 80046fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80046fe:	4b05      	ldr	r3, [pc, #20]	; (8004714 <std+0x40>)
 8004700:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004702:	4b05      	ldr	r3, [pc, #20]	; (8004718 <std+0x44>)
 8004704:	6224      	str	r4, [r4, #32]
 8004706:	6323      	str	r3, [r4, #48]	; 0x30
 8004708:	bd10      	pop	{r4, pc}
 800470a:	bf00      	nop
 800470c:	08004aa1 	.word	0x08004aa1
 8004710:	08004ac3 	.word	0x08004ac3
 8004714:	08004afb 	.word	0x08004afb
 8004718:	08004b1f 	.word	0x08004b1f

0800471c <_cleanup_r>:
 800471c:	4901      	ldr	r1, [pc, #4]	; (8004724 <_cleanup_r+0x8>)
 800471e:	f000 b885 	b.w	800482c <_fwalk_reent>
 8004722:	bf00      	nop
 8004724:	08004681 	.word	0x08004681

08004728 <__sfmoreglue>:
 8004728:	b570      	push	{r4, r5, r6, lr}
 800472a:	1e4a      	subs	r2, r1, #1
 800472c:	2568      	movs	r5, #104	; 0x68
 800472e:	4355      	muls	r5, r2
 8004730:	460e      	mov	r6, r1
 8004732:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004736:	f000 f949 	bl	80049cc <_malloc_r>
 800473a:	4604      	mov	r4, r0
 800473c:	b140      	cbz	r0, 8004750 <__sfmoreglue+0x28>
 800473e:	2100      	movs	r1, #0
 8004740:	e9c0 1600 	strd	r1, r6, [r0]
 8004744:	300c      	adds	r0, #12
 8004746:	60a0      	str	r0, [r4, #8]
 8004748:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800474c:	f7ff fde6 	bl	800431c <memset>
 8004750:	4620      	mov	r0, r4
 8004752:	bd70      	pop	{r4, r5, r6, pc}

08004754 <__sinit>:
 8004754:	6983      	ldr	r3, [r0, #24]
 8004756:	b510      	push	{r4, lr}
 8004758:	4604      	mov	r4, r0
 800475a:	bb33      	cbnz	r3, 80047aa <__sinit+0x56>
 800475c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004760:	6503      	str	r3, [r0, #80]	; 0x50
 8004762:	4b12      	ldr	r3, [pc, #72]	; (80047ac <__sinit+0x58>)
 8004764:	4a12      	ldr	r2, [pc, #72]	; (80047b0 <__sinit+0x5c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6282      	str	r2, [r0, #40]	; 0x28
 800476a:	4298      	cmp	r0, r3
 800476c:	bf04      	itt	eq
 800476e:	2301      	moveq	r3, #1
 8004770:	6183      	streq	r3, [r0, #24]
 8004772:	f000 f81f 	bl	80047b4 <__sfp>
 8004776:	6060      	str	r0, [r4, #4]
 8004778:	4620      	mov	r0, r4
 800477a:	f000 f81b 	bl	80047b4 <__sfp>
 800477e:	60a0      	str	r0, [r4, #8]
 8004780:	4620      	mov	r0, r4
 8004782:	f000 f817 	bl	80047b4 <__sfp>
 8004786:	2200      	movs	r2, #0
 8004788:	60e0      	str	r0, [r4, #12]
 800478a:	2104      	movs	r1, #4
 800478c:	6860      	ldr	r0, [r4, #4]
 800478e:	f7ff ffa1 	bl	80046d4 <std>
 8004792:	2201      	movs	r2, #1
 8004794:	2109      	movs	r1, #9
 8004796:	68a0      	ldr	r0, [r4, #8]
 8004798:	f7ff ff9c 	bl	80046d4 <std>
 800479c:	2202      	movs	r2, #2
 800479e:	2112      	movs	r1, #18
 80047a0:	68e0      	ldr	r0, [r4, #12]
 80047a2:	f7ff ff97 	bl	80046d4 <std>
 80047a6:	2301      	movs	r3, #1
 80047a8:	61a3      	str	r3, [r4, #24]
 80047aa:	bd10      	pop	{r4, pc}
 80047ac:	08004c9c 	.word	0x08004c9c
 80047b0:	0800471d 	.word	0x0800471d

080047b4 <__sfp>:
 80047b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b6:	4b1b      	ldr	r3, [pc, #108]	; (8004824 <__sfp+0x70>)
 80047b8:	681e      	ldr	r6, [r3, #0]
 80047ba:	69b3      	ldr	r3, [r6, #24]
 80047bc:	4607      	mov	r7, r0
 80047be:	b913      	cbnz	r3, 80047c6 <__sfp+0x12>
 80047c0:	4630      	mov	r0, r6
 80047c2:	f7ff ffc7 	bl	8004754 <__sinit>
 80047c6:	3648      	adds	r6, #72	; 0x48
 80047c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	d503      	bpl.n	80047d8 <__sfp+0x24>
 80047d0:	6833      	ldr	r3, [r6, #0]
 80047d2:	b133      	cbz	r3, 80047e2 <__sfp+0x2e>
 80047d4:	6836      	ldr	r6, [r6, #0]
 80047d6:	e7f7      	b.n	80047c8 <__sfp+0x14>
 80047d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80047dc:	b16d      	cbz	r5, 80047fa <__sfp+0x46>
 80047de:	3468      	adds	r4, #104	; 0x68
 80047e0:	e7f4      	b.n	80047cc <__sfp+0x18>
 80047e2:	2104      	movs	r1, #4
 80047e4:	4638      	mov	r0, r7
 80047e6:	f7ff ff9f 	bl	8004728 <__sfmoreglue>
 80047ea:	6030      	str	r0, [r6, #0]
 80047ec:	2800      	cmp	r0, #0
 80047ee:	d1f1      	bne.n	80047d4 <__sfp+0x20>
 80047f0:	230c      	movs	r3, #12
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	4604      	mov	r4, r0
 80047f6:	4620      	mov	r0, r4
 80047f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047fa:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <__sfp+0x74>)
 80047fc:	6665      	str	r5, [r4, #100]	; 0x64
 80047fe:	e9c4 5500 	strd	r5, r5, [r4]
 8004802:	60a5      	str	r5, [r4, #8]
 8004804:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004808:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800480c:	2208      	movs	r2, #8
 800480e:	4629      	mov	r1, r5
 8004810:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004814:	f7ff fd82 	bl	800431c <memset>
 8004818:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800481c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004820:	e7e9      	b.n	80047f6 <__sfp+0x42>
 8004822:	bf00      	nop
 8004824:	08004c9c 	.word	0x08004c9c
 8004828:	ffff0001 	.word	0xffff0001

0800482c <_fwalk_reent>:
 800482c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004830:	4680      	mov	r8, r0
 8004832:	4689      	mov	r9, r1
 8004834:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004838:	2600      	movs	r6, #0
 800483a:	b914      	cbnz	r4, 8004842 <_fwalk_reent+0x16>
 800483c:	4630      	mov	r0, r6
 800483e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004842:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004846:	3f01      	subs	r7, #1
 8004848:	d501      	bpl.n	800484e <_fwalk_reent+0x22>
 800484a:	6824      	ldr	r4, [r4, #0]
 800484c:	e7f5      	b.n	800483a <_fwalk_reent+0xe>
 800484e:	89ab      	ldrh	r3, [r5, #12]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d907      	bls.n	8004864 <_fwalk_reent+0x38>
 8004854:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004858:	3301      	adds	r3, #1
 800485a:	d003      	beq.n	8004864 <_fwalk_reent+0x38>
 800485c:	4629      	mov	r1, r5
 800485e:	4640      	mov	r0, r8
 8004860:	47c8      	blx	r9
 8004862:	4306      	orrs	r6, r0
 8004864:	3568      	adds	r5, #104	; 0x68
 8004866:	e7ee      	b.n	8004846 <_fwalk_reent+0x1a>

08004868 <__swhatbuf_r>:
 8004868:	b570      	push	{r4, r5, r6, lr}
 800486a:	460e      	mov	r6, r1
 800486c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004870:	2900      	cmp	r1, #0
 8004872:	b096      	sub	sp, #88	; 0x58
 8004874:	4614      	mov	r4, r2
 8004876:	461d      	mov	r5, r3
 8004878:	da07      	bge.n	800488a <__swhatbuf_r+0x22>
 800487a:	2300      	movs	r3, #0
 800487c:	602b      	str	r3, [r5, #0]
 800487e:	89b3      	ldrh	r3, [r6, #12]
 8004880:	061a      	lsls	r2, r3, #24
 8004882:	d410      	bmi.n	80048a6 <__swhatbuf_r+0x3e>
 8004884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004888:	e00e      	b.n	80048a8 <__swhatbuf_r+0x40>
 800488a:	466a      	mov	r2, sp
 800488c:	f000 f96e 	bl	8004b6c <_fstat_r>
 8004890:	2800      	cmp	r0, #0
 8004892:	dbf2      	blt.n	800487a <__swhatbuf_r+0x12>
 8004894:	9a01      	ldr	r2, [sp, #4]
 8004896:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800489a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800489e:	425a      	negs	r2, r3
 80048a0:	415a      	adcs	r2, r3
 80048a2:	602a      	str	r2, [r5, #0]
 80048a4:	e7ee      	b.n	8004884 <__swhatbuf_r+0x1c>
 80048a6:	2340      	movs	r3, #64	; 0x40
 80048a8:	2000      	movs	r0, #0
 80048aa:	6023      	str	r3, [r4, #0]
 80048ac:	b016      	add	sp, #88	; 0x58
 80048ae:	bd70      	pop	{r4, r5, r6, pc}

080048b0 <__smakebuf_r>:
 80048b0:	898b      	ldrh	r3, [r1, #12]
 80048b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80048b4:	079d      	lsls	r5, r3, #30
 80048b6:	4606      	mov	r6, r0
 80048b8:	460c      	mov	r4, r1
 80048ba:	d507      	bpl.n	80048cc <__smakebuf_r+0x1c>
 80048bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80048c0:	6023      	str	r3, [r4, #0]
 80048c2:	6123      	str	r3, [r4, #16]
 80048c4:	2301      	movs	r3, #1
 80048c6:	6163      	str	r3, [r4, #20]
 80048c8:	b002      	add	sp, #8
 80048ca:	bd70      	pop	{r4, r5, r6, pc}
 80048cc:	ab01      	add	r3, sp, #4
 80048ce:	466a      	mov	r2, sp
 80048d0:	f7ff ffca 	bl	8004868 <__swhatbuf_r>
 80048d4:	9900      	ldr	r1, [sp, #0]
 80048d6:	4605      	mov	r5, r0
 80048d8:	4630      	mov	r0, r6
 80048da:	f000 f877 	bl	80049cc <_malloc_r>
 80048de:	b948      	cbnz	r0, 80048f4 <__smakebuf_r+0x44>
 80048e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048e4:	059a      	lsls	r2, r3, #22
 80048e6:	d4ef      	bmi.n	80048c8 <__smakebuf_r+0x18>
 80048e8:	f023 0303 	bic.w	r3, r3, #3
 80048ec:	f043 0302 	orr.w	r3, r3, #2
 80048f0:	81a3      	strh	r3, [r4, #12]
 80048f2:	e7e3      	b.n	80048bc <__smakebuf_r+0xc>
 80048f4:	4b0d      	ldr	r3, [pc, #52]	; (800492c <__smakebuf_r+0x7c>)
 80048f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80048f8:	89a3      	ldrh	r3, [r4, #12]
 80048fa:	6020      	str	r0, [r4, #0]
 80048fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004900:	81a3      	strh	r3, [r4, #12]
 8004902:	9b00      	ldr	r3, [sp, #0]
 8004904:	6163      	str	r3, [r4, #20]
 8004906:	9b01      	ldr	r3, [sp, #4]
 8004908:	6120      	str	r0, [r4, #16]
 800490a:	b15b      	cbz	r3, 8004924 <__smakebuf_r+0x74>
 800490c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004910:	4630      	mov	r0, r6
 8004912:	f000 f93d 	bl	8004b90 <_isatty_r>
 8004916:	b128      	cbz	r0, 8004924 <__smakebuf_r+0x74>
 8004918:	89a3      	ldrh	r3, [r4, #12]
 800491a:	f023 0303 	bic.w	r3, r3, #3
 800491e:	f043 0301 	orr.w	r3, r3, #1
 8004922:	81a3      	strh	r3, [r4, #12]
 8004924:	89a3      	ldrh	r3, [r4, #12]
 8004926:	431d      	orrs	r5, r3
 8004928:	81a5      	strh	r5, [r4, #12]
 800492a:	e7cd      	b.n	80048c8 <__smakebuf_r+0x18>
 800492c:	0800471d 	.word	0x0800471d

08004930 <_free_r>:
 8004930:	b538      	push	{r3, r4, r5, lr}
 8004932:	4605      	mov	r5, r0
 8004934:	2900      	cmp	r1, #0
 8004936:	d045      	beq.n	80049c4 <_free_r+0x94>
 8004938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800493c:	1f0c      	subs	r4, r1, #4
 800493e:	2b00      	cmp	r3, #0
 8004940:	bfb8      	it	lt
 8004942:	18e4      	addlt	r4, r4, r3
 8004944:	f000 f946 	bl	8004bd4 <__malloc_lock>
 8004948:	4a1f      	ldr	r2, [pc, #124]	; (80049c8 <_free_r+0x98>)
 800494a:	6813      	ldr	r3, [r2, #0]
 800494c:	4610      	mov	r0, r2
 800494e:	b933      	cbnz	r3, 800495e <_free_r+0x2e>
 8004950:	6063      	str	r3, [r4, #4]
 8004952:	6014      	str	r4, [r2, #0]
 8004954:	4628      	mov	r0, r5
 8004956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800495a:	f000 b93c 	b.w	8004bd6 <__malloc_unlock>
 800495e:	42a3      	cmp	r3, r4
 8004960:	d90c      	bls.n	800497c <_free_r+0x4c>
 8004962:	6821      	ldr	r1, [r4, #0]
 8004964:	1862      	adds	r2, r4, r1
 8004966:	4293      	cmp	r3, r2
 8004968:	bf04      	itt	eq
 800496a:	681a      	ldreq	r2, [r3, #0]
 800496c:	685b      	ldreq	r3, [r3, #4]
 800496e:	6063      	str	r3, [r4, #4]
 8004970:	bf04      	itt	eq
 8004972:	1852      	addeq	r2, r2, r1
 8004974:	6022      	streq	r2, [r4, #0]
 8004976:	6004      	str	r4, [r0, #0]
 8004978:	e7ec      	b.n	8004954 <_free_r+0x24>
 800497a:	4613      	mov	r3, r2
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	b10a      	cbz	r2, 8004984 <_free_r+0x54>
 8004980:	42a2      	cmp	r2, r4
 8004982:	d9fa      	bls.n	800497a <_free_r+0x4a>
 8004984:	6819      	ldr	r1, [r3, #0]
 8004986:	1858      	adds	r0, r3, r1
 8004988:	42a0      	cmp	r0, r4
 800498a:	d10b      	bne.n	80049a4 <_free_r+0x74>
 800498c:	6820      	ldr	r0, [r4, #0]
 800498e:	4401      	add	r1, r0
 8004990:	1858      	adds	r0, r3, r1
 8004992:	4282      	cmp	r2, r0
 8004994:	6019      	str	r1, [r3, #0]
 8004996:	d1dd      	bne.n	8004954 <_free_r+0x24>
 8004998:	6810      	ldr	r0, [r2, #0]
 800499a:	6852      	ldr	r2, [r2, #4]
 800499c:	605a      	str	r2, [r3, #4]
 800499e:	4401      	add	r1, r0
 80049a0:	6019      	str	r1, [r3, #0]
 80049a2:	e7d7      	b.n	8004954 <_free_r+0x24>
 80049a4:	d902      	bls.n	80049ac <_free_r+0x7c>
 80049a6:	230c      	movs	r3, #12
 80049a8:	602b      	str	r3, [r5, #0]
 80049aa:	e7d3      	b.n	8004954 <_free_r+0x24>
 80049ac:	6820      	ldr	r0, [r4, #0]
 80049ae:	1821      	adds	r1, r4, r0
 80049b0:	428a      	cmp	r2, r1
 80049b2:	bf04      	itt	eq
 80049b4:	6811      	ldreq	r1, [r2, #0]
 80049b6:	6852      	ldreq	r2, [r2, #4]
 80049b8:	6062      	str	r2, [r4, #4]
 80049ba:	bf04      	itt	eq
 80049bc:	1809      	addeq	r1, r1, r0
 80049be:	6021      	streq	r1, [r4, #0]
 80049c0:	605c      	str	r4, [r3, #4]
 80049c2:	e7c7      	b.n	8004954 <_free_r+0x24>
 80049c4:	bd38      	pop	{r3, r4, r5, pc}
 80049c6:	bf00      	nop
 80049c8:	20000090 	.word	0x20000090

080049cc <_malloc_r>:
 80049cc:	b570      	push	{r4, r5, r6, lr}
 80049ce:	1ccd      	adds	r5, r1, #3
 80049d0:	f025 0503 	bic.w	r5, r5, #3
 80049d4:	3508      	adds	r5, #8
 80049d6:	2d0c      	cmp	r5, #12
 80049d8:	bf38      	it	cc
 80049da:	250c      	movcc	r5, #12
 80049dc:	2d00      	cmp	r5, #0
 80049de:	4606      	mov	r6, r0
 80049e0:	db01      	blt.n	80049e6 <_malloc_r+0x1a>
 80049e2:	42a9      	cmp	r1, r5
 80049e4:	d903      	bls.n	80049ee <_malloc_r+0x22>
 80049e6:	230c      	movs	r3, #12
 80049e8:	6033      	str	r3, [r6, #0]
 80049ea:	2000      	movs	r0, #0
 80049ec:	bd70      	pop	{r4, r5, r6, pc}
 80049ee:	f000 f8f1 	bl	8004bd4 <__malloc_lock>
 80049f2:	4a21      	ldr	r2, [pc, #132]	; (8004a78 <_malloc_r+0xac>)
 80049f4:	6814      	ldr	r4, [r2, #0]
 80049f6:	4621      	mov	r1, r4
 80049f8:	b991      	cbnz	r1, 8004a20 <_malloc_r+0x54>
 80049fa:	4c20      	ldr	r4, [pc, #128]	; (8004a7c <_malloc_r+0xb0>)
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	b91b      	cbnz	r3, 8004a08 <_malloc_r+0x3c>
 8004a00:	4630      	mov	r0, r6
 8004a02:	f000 f83d 	bl	8004a80 <_sbrk_r>
 8004a06:	6020      	str	r0, [r4, #0]
 8004a08:	4629      	mov	r1, r5
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	f000 f838 	bl	8004a80 <_sbrk_r>
 8004a10:	1c43      	adds	r3, r0, #1
 8004a12:	d124      	bne.n	8004a5e <_malloc_r+0x92>
 8004a14:	230c      	movs	r3, #12
 8004a16:	6033      	str	r3, [r6, #0]
 8004a18:	4630      	mov	r0, r6
 8004a1a:	f000 f8dc 	bl	8004bd6 <__malloc_unlock>
 8004a1e:	e7e4      	b.n	80049ea <_malloc_r+0x1e>
 8004a20:	680b      	ldr	r3, [r1, #0]
 8004a22:	1b5b      	subs	r3, r3, r5
 8004a24:	d418      	bmi.n	8004a58 <_malloc_r+0x8c>
 8004a26:	2b0b      	cmp	r3, #11
 8004a28:	d90f      	bls.n	8004a4a <_malloc_r+0x7e>
 8004a2a:	600b      	str	r3, [r1, #0]
 8004a2c:	50cd      	str	r5, [r1, r3]
 8004a2e:	18cc      	adds	r4, r1, r3
 8004a30:	4630      	mov	r0, r6
 8004a32:	f000 f8d0 	bl	8004bd6 <__malloc_unlock>
 8004a36:	f104 000b 	add.w	r0, r4, #11
 8004a3a:	1d23      	adds	r3, r4, #4
 8004a3c:	f020 0007 	bic.w	r0, r0, #7
 8004a40:	1ac3      	subs	r3, r0, r3
 8004a42:	d0d3      	beq.n	80049ec <_malloc_r+0x20>
 8004a44:	425a      	negs	r2, r3
 8004a46:	50e2      	str	r2, [r4, r3]
 8004a48:	e7d0      	b.n	80049ec <_malloc_r+0x20>
 8004a4a:	428c      	cmp	r4, r1
 8004a4c:	684b      	ldr	r3, [r1, #4]
 8004a4e:	bf16      	itet	ne
 8004a50:	6063      	strne	r3, [r4, #4]
 8004a52:	6013      	streq	r3, [r2, #0]
 8004a54:	460c      	movne	r4, r1
 8004a56:	e7eb      	b.n	8004a30 <_malloc_r+0x64>
 8004a58:	460c      	mov	r4, r1
 8004a5a:	6849      	ldr	r1, [r1, #4]
 8004a5c:	e7cc      	b.n	80049f8 <_malloc_r+0x2c>
 8004a5e:	1cc4      	adds	r4, r0, #3
 8004a60:	f024 0403 	bic.w	r4, r4, #3
 8004a64:	42a0      	cmp	r0, r4
 8004a66:	d005      	beq.n	8004a74 <_malloc_r+0xa8>
 8004a68:	1a21      	subs	r1, r4, r0
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	f000 f808 	bl	8004a80 <_sbrk_r>
 8004a70:	3001      	adds	r0, #1
 8004a72:	d0cf      	beq.n	8004a14 <_malloc_r+0x48>
 8004a74:	6025      	str	r5, [r4, #0]
 8004a76:	e7db      	b.n	8004a30 <_malloc_r+0x64>
 8004a78:	20000090 	.word	0x20000090
 8004a7c:	20000094 	.word	0x20000094

08004a80 <_sbrk_r>:
 8004a80:	b538      	push	{r3, r4, r5, lr}
 8004a82:	4c06      	ldr	r4, [pc, #24]	; (8004a9c <_sbrk_r+0x1c>)
 8004a84:	2300      	movs	r3, #0
 8004a86:	4605      	mov	r5, r0
 8004a88:	4608      	mov	r0, r1
 8004a8a:	6023      	str	r3, [r4, #0]
 8004a8c:	f7fc f962 	bl	8000d54 <_sbrk>
 8004a90:	1c43      	adds	r3, r0, #1
 8004a92:	d102      	bne.n	8004a9a <_sbrk_r+0x1a>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	b103      	cbz	r3, 8004a9a <_sbrk_r+0x1a>
 8004a98:	602b      	str	r3, [r5, #0]
 8004a9a:	bd38      	pop	{r3, r4, r5, pc}
 8004a9c:	20000304 	.word	0x20000304

08004aa0 <__sread>:
 8004aa0:	b510      	push	{r4, lr}
 8004aa2:	460c      	mov	r4, r1
 8004aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aa8:	f000 f896 	bl	8004bd8 <_read_r>
 8004aac:	2800      	cmp	r0, #0
 8004aae:	bfab      	itete	ge
 8004ab0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ab2:	89a3      	ldrhlt	r3, [r4, #12]
 8004ab4:	181b      	addge	r3, r3, r0
 8004ab6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004aba:	bfac      	ite	ge
 8004abc:	6563      	strge	r3, [r4, #84]	; 0x54
 8004abe:	81a3      	strhlt	r3, [r4, #12]
 8004ac0:	bd10      	pop	{r4, pc}

08004ac2 <__swrite>:
 8004ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ac6:	461f      	mov	r7, r3
 8004ac8:	898b      	ldrh	r3, [r1, #12]
 8004aca:	05db      	lsls	r3, r3, #23
 8004acc:	4605      	mov	r5, r0
 8004ace:	460c      	mov	r4, r1
 8004ad0:	4616      	mov	r6, r2
 8004ad2:	d505      	bpl.n	8004ae0 <__swrite+0x1e>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004adc:	f000 f868 	bl	8004bb0 <_lseek_r>
 8004ae0:	89a3      	ldrh	r3, [r4, #12]
 8004ae2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ae6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aea:	81a3      	strh	r3, [r4, #12]
 8004aec:	4632      	mov	r2, r6
 8004aee:	463b      	mov	r3, r7
 8004af0:	4628      	mov	r0, r5
 8004af2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004af6:	f000 b817 	b.w	8004b28 <_write_r>

08004afa <__sseek>:
 8004afa:	b510      	push	{r4, lr}
 8004afc:	460c      	mov	r4, r1
 8004afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b02:	f000 f855 	bl	8004bb0 <_lseek_r>
 8004b06:	1c43      	adds	r3, r0, #1
 8004b08:	89a3      	ldrh	r3, [r4, #12]
 8004b0a:	bf15      	itete	ne
 8004b0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b16:	81a3      	strheq	r3, [r4, #12]
 8004b18:	bf18      	it	ne
 8004b1a:	81a3      	strhne	r3, [r4, #12]
 8004b1c:	bd10      	pop	{r4, pc}

08004b1e <__sclose>:
 8004b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b22:	f000 b813 	b.w	8004b4c <_close_r>
	...

08004b28 <_write_r>:
 8004b28:	b538      	push	{r3, r4, r5, lr}
 8004b2a:	4c07      	ldr	r4, [pc, #28]	; (8004b48 <_write_r+0x20>)
 8004b2c:	4605      	mov	r5, r0
 8004b2e:	4608      	mov	r0, r1
 8004b30:	4611      	mov	r1, r2
 8004b32:	2200      	movs	r2, #0
 8004b34:	6022      	str	r2, [r4, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	f7fc f8bb 	bl	8000cb2 <_write>
 8004b3c:	1c43      	adds	r3, r0, #1
 8004b3e:	d102      	bne.n	8004b46 <_write_r+0x1e>
 8004b40:	6823      	ldr	r3, [r4, #0]
 8004b42:	b103      	cbz	r3, 8004b46 <_write_r+0x1e>
 8004b44:	602b      	str	r3, [r5, #0]
 8004b46:	bd38      	pop	{r3, r4, r5, pc}
 8004b48:	20000304 	.word	0x20000304

08004b4c <_close_r>:
 8004b4c:	b538      	push	{r3, r4, r5, lr}
 8004b4e:	4c06      	ldr	r4, [pc, #24]	; (8004b68 <_close_r+0x1c>)
 8004b50:	2300      	movs	r3, #0
 8004b52:	4605      	mov	r5, r0
 8004b54:	4608      	mov	r0, r1
 8004b56:	6023      	str	r3, [r4, #0]
 8004b58:	f7fc f8c7 	bl	8000cea <_close>
 8004b5c:	1c43      	adds	r3, r0, #1
 8004b5e:	d102      	bne.n	8004b66 <_close_r+0x1a>
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	b103      	cbz	r3, 8004b66 <_close_r+0x1a>
 8004b64:	602b      	str	r3, [r5, #0]
 8004b66:	bd38      	pop	{r3, r4, r5, pc}
 8004b68:	20000304 	.word	0x20000304

08004b6c <_fstat_r>:
 8004b6c:	b538      	push	{r3, r4, r5, lr}
 8004b6e:	4c07      	ldr	r4, [pc, #28]	; (8004b8c <_fstat_r+0x20>)
 8004b70:	2300      	movs	r3, #0
 8004b72:	4605      	mov	r5, r0
 8004b74:	4608      	mov	r0, r1
 8004b76:	4611      	mov	r1, r2
 8004b78:	6023      	str	r3, [r4, #0]
 8004b7a:	f7fc f8c2 	bl	8000d02 <_fstat>
 8004b7e:	1c43      	adds	r3, r0, #1
 8004b80:	d102      	bne.n	8004b88 <_fstat_r+0x1c>
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	b103      	cbz	r3, 8004b88 <_fstat_r+0x1c>
 8004b86:	602b      	str	r3, [r5, #0]
 8004b88:	bd38      	pop	{r3, r4, r5, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20000304 	.word	0x20000304

08004b90 <_isatty_r>:
 8004b90:	b538      	push	{r3, r4, r5, lr}
 8004b92:	4c06      	ldr	r4, [pc, #24]	; (8004bac <_isatty_r+0x1c>)
 8004b94:	2300      	movs	r3, #0
 8004b96:	4605      	mov	r5, r0
 8004b98:	4608      	mov	r0, r1
 8004b9a:	6023      	str	r3, [r4, #0]
 8004b9c:	f7fc f8c1 	bl	8000d22 <_isatty>
 8004ba0:	1c43      	adds	r3, r0, #1
 8004ba2:	d102      	bne.n	8004baa <_isatty_r+0x1a>
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	b103      	cbz	r3, 8004baa <_isatty_r+0x1a>
 8004ba8:	602b      	str	r3, [r5, #0]
 8004baa:	bd38      	pop	{r3, r4, r5, pc}
 8004bac:	20000304 	.word	0x20000304

08004bb0 <_lseek_r>:
 8004bb0:	b538      	push	{r3, r4, r5, lr}
 8004bb2:	4c07      	ldr	r4, [pc, #28]	; (8004bd0 <_lseek_r+0x20>)
 8004bb4:	4605      	mov	r5, r0
 8004bb6:	4608      	mov	r0, r1
 8004bb8:	4611      	mov	r1, r2
 8004bba:	2200      	movs	r2, #0
 8004bbc:	6022      	str	r2, [r4, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f7fc f8ba 	bl	8000d38 <_lseek>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d102      	bne.n	8004bce <_lseek_r+0x1e>
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	b103      	cbz	r3, 8004bce <_lseek_r+0x1e>
 8004bcc:	602b      	str	r3, [r5, #0]
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	20000304 	.word	0x20000304

08004bd4 <__malloc_lock>:
 8004bd4:	4770      	bx	lr

08004bd6 <__malloc_unlock>:
 8004bd6:	4770      	bx	lr

08004bd8 <_read_r>:
 8004bd8:	b538      	push	{r3, r4, r5, lr}
 8004bda:	4c07      	ldr	r4, [pc, #28]	; (8004bf8 <_read_r+0x20>)
 8004bdc:	4605      	mov	r5, r0
 8004bde:	4608      	mov	r0, r1
 8004be0:	4611      	mov	r1, r2
 8004be2:	2200      	movs	r2, #0
 8004be4:	6022      	str	r2, [r4, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	f7fc f846 	bl	8000c78 <_read>
 8004bec:	1c43      	adds	r3, r0, #1
 8004bee:	d102      	bne.n	8004bf6 <_read_r+0x1e>
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	b103      	cbz	r3, 8004bf6 <_read_r+0x1e>
 8004bf4:	602b      	str	r3, [r5, #0]
 8004bf6:	bd38      	pop	{r3, r4, r5, pc}
 8004bf8:	20000304 	.word	0x20000304

08004bfc <_init>:
 8004bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfe:	bf00      	nop
 8004c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c02:	bc08      	pop	{r3}
 8004c04:	469e      	mov	lr, r3
 8004c06:	4770      	bx	lr

08004c08 <_fini>:
 8004c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0a:	bf00      	nop
 8004c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0e:	bc08      	pop	{r3}
 8004c10:	469e      	mov	lr, r3
 8004c12:	4770      	bx	lr
