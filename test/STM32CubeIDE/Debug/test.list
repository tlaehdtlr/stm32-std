
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026b8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002844  08002844  00012844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800288c  0800288c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800288c  0800288c  0001288c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002894  08002894  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002894  08002894  00012894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002898  08002898  00012898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800289c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  080028a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080028a8  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f86  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001698  00000000  00000000  00028fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000878  00000000  00000000  0002a660  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a0  00000000  00000000  0002aed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018d3c  00000000  00000000  0002b678  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000079bc  00000000  00000000  000443b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c286  00000000  00000000  0004bd70  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7ff6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020dc  00000000  00000000  000e8074  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800282c 	.word	0x0800282c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	0800282c 	.word	0x0800282c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b3c      	ldr	r3, [pc, #240]	; (80005d4 <MX_GPIO_Init+0x108>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	4a3b      	ldr	r2, [pc, #236]	; (80005d4 <MX_GPIO_Init+0x108>)
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ee:	4b39      	ldr	r3, [pc, #228]	; (80005d4 <MX_GPIO_Init+0x108>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	f003 0304 	and.w	r3, r3, #4
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fa:	4b36      	ldr	r3, [pc, #216]	; (80005d4 <MX_GPIO_Init+0x108>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a35      	ldr	r2, [pc, #212]	; (80005d4 <MX_GPIO_Init+0x108>)
 8000500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b33      	ldr	r3, [pc, #204]	; (80005d4 <MX_GPIO_Init+0x108>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b30      	ldr	r3, [pc, #192]	; (80005d4 <MX_GPIO_Init+0x108>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4a2f      	ldr	r2, [pc, #188]	; (80005d4 <MX_GPIO_Init+0x108>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <MX_GPIO_Init+0x108>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	4b2a      	ldr	r3, [pc, #168]	; (80005d4 <MX_GPIO_Init+0x108>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4a29      	ldr	r2, [pc, #164]	; (80005d4 <MX_GPIO_Init+0x108>)
 8000530:	f043 0302 	orr.w	r3, r3, #2
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <MX_GPIO_Init+0x108>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0302 	and.w	r3, r3, #2
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	21b0      	movs	r1, #176	; 0xb0
 8000546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054a:	f000 fcf1 	bl	8000f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000554:	4820      	ldr	r0, [pc, #128]	; (80005d8 <MX_GPIO_Init+0x10c>)
 8000556:	f000 fceb 	bl	8000f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800055a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000560:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <MX_GPIO_Init+0x110>)
 8000562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000568:	f107 0314 	add.w	r3, r7, #20
 800056c:	4619      	mov	r1, r3
 800056e:	481c      	ldr	r0, [pc, #112]	; (80005e0 <MX_GPIO_Init+0x114>)
 8000570:	f000 fb6c 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000574:	23b0      	movs	r3, #176	; 0xb0
 8000576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	2301      	movs	r3, #1
 800057a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	2300      	movs	r3, #0
 8000582:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	4619      	mov	r1, r3
 800058a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058e:	f000 fb5d 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000592:	2340      	movs	r3, #64	; 0x40
 8000594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000596:	2300      	movs	r3, #0
 8000598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800059a:	2301      	movs	r3, #1
 800059c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a8:	f000 fb50 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80005ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b2:	2301      	movs	r3, #1
 80005b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ba:	2300      	movs	r3, #0
 80005bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	4619      	mov	r1, r3
 80005c4:	4804      	ldr	r0, [pc, #16]	; (80005d8 <MX_GPIO_Init+0x10c>)
 80005c6:	f000 fb41 	bl	8000c4c <HAL_GPIO_Init>

}
 80005ca:	bf00      	nop
 80005cc:	3728      	adds	r7, #40	; 0x28
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000
 80005d8:	48000400 	.word	0x48000400
 80005dc:	10210000 	.word	0x10210000
 80005e0:	48000800 	.word	0x48000800

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 f9ac 	bl	8000944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f81c 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f7ff ff6c 	bl	80004cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 f8d4 	bl	80007a0 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005fe:	4809      	ldr	r0, [pc, #36]	; (8000624 <main+0x40>)
 8000600:	f000 fc96 	bl	8000f30 <HAL_GPIO_WritePin>
	  HAL_Delay(3000);
 8000604:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000608:	f000 fa18 	bl	8000a3c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <main+0x40>)
 8000614:	f000 fc8c 	bl	8000f30 <HAL_GPIO_WritePin>
	  HAL_Delay(3000);
 8000618:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800061c:	f000 fa0e 	bl	8000a3c <HAL_Delay>
	  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000620:	e7ea      	b.n	80005f8 <main+0x14>
 8000622:	bf00      	nop
 8000624:	48000400 	.word	0x48000400

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b0a4      	sub	sp, #144	; 0x90
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000632:	2244      	movs	r2, #68	; 0x44
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f002 f8f0 	bl	800281c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2234      	movs	r2, #52	; 0x34
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f002 f8e2 	bl	800281c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000658:	f44f 7000 	mov.w	r0, #512	; 0x200
 800065c:	f000 fc8e 	bl	8000f7c <HAL_PWREx_ControlVoltageScaling>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000666:	f000 f848 	bl	80006fa <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800066a:	2310      	movs	r3, #16
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800066e:	2301      	movs	r3, #1
 8000670:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000676:	2360      	movs	r3, #96	; 0x60
 8000678:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800067e:	2301      	movs	r3, #1
 8000680:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000688:	2328      	movs	r3, #40	; 0x28
 800068a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 fcc2 	bl	8001028 <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x86>
  {
    Error_Handler();
 80006aa:	f000 f826 	bl	80006fa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2303      	movs	r3, #3
 80006b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006c6:	2104      	movs	r1, #4
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 f913 	bl	80018f4 <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006d4:	f000 f811 	bl	80006fa <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006d8:	2302      	movs	r3, #2
 80006da:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fb0a 	bl	8001cfc <HAL_RCCEx_PeriphCLKConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006ee:	f000 f804 	bl	80006fa <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3790      	adds	r7, #144	; 0x90
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fe:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000700:	e7fe      	b.n	8000700 <Error_Handler+0x6>
	...

08000704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <HAL_MspInit+0x44>)
 800070c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800070e:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <HAL_MspInit+0x44>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6613      	str	r3, [r2, #96]	; 0x60
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <HAL_MspInit+0x44>)
 8000718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <HAL_MspInit+0x44>)
 8000724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000726:	4a08      	ldr	r2, [pc, #32]	; (8000748 <HAL_MspInit+0x44>)
 8000728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072c:	6593      	str	r3, [r2, #88]	; 0x58
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_MspInit+0x44>)
 8000730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40021000 	.word	0x40021000

0800074c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <NMI_Handler+0x4>

08000752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000756:	e7fe      	b.n	8000756 <HardFault_Handler+0x4>

08000758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800075c:	e7fe      	b.n	800075c <MemManage_Handler+0x4>

0800075e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000762:	e7fe      	b.n	8000762 <BusFault_Handler+0x4>

08000764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <UsageFault_Handler+0x4>

0800076a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000798:	f000 f930 	bl	80009fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007a6:	4a15      	ldr	r2, [pc, #84]	; (80007fc <MX_USART2_UART_Init+0x5c>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007e4:	f001 fc10 	bl	8002008 <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ee:	f7ff ff84 	bl	80006fa <Error_Handler>
  }

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000028 	.word	0x20000028
 80007fc:	40004400 	.word	0x40004400

08000800 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a17      	ldr	r2, [pc, #92]	; (800087c <HAL_UART_MspInit+0x7c>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d128      	bne.n	8000874 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <HAL_UART_MspInit+0x80>)
 8000824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000826:	4a16      	ldr	r2, [pc, #88]	; (8000880 <HAL_UART_MspInit+0x80>)
 8000828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082c:	6593      	str	r3, [r2, #88]	; 0x58
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <HAL_UART_MspInit+0x80>)
 8000830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <HAL_UART_MspInit+0x80>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a10      	ldr	r2, [pc, #64]	; (8000880 <HAL_UART_MspInit+0x80>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <HAL_UART_MspInit+0x80>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000852:	230c      	movs	r3, #12
 8000854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085e:	2303      	movs	r3, #3
 8000860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000862:	2307      	movs	r3, #7
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000870:	f000 f9ec 	bl	8000c4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	; 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40004400 	.word	0x40004400
 8000880:	40021000 	.word	0x40021000

08000884 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000888:	f000 f826 	bl	80008d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800088c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800088e:	e003      	b.n	8000898 <LoopCopyDataInit>

08000890 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000892:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000894:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000896:	3104      	adds	r1, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000898:	480a      	ldr	r0, [pc, #40]	; (80008c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800089c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800089e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80008a0:	d3f6      	bcc.n	8000890 <CopyDataInit>
	ldr	r2, =_sbss
 80008a2:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80008a4:	e002      	b.n	80008ac <LoopFillZerobss>

080008a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80008a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80008a8:	f842 3b04 	str.w	r3, [r2], #4

080008ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <LoopForever+0x16>)
	cmp	r2, r3
 80008ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80008b0:	d3f9      	bcc.n	80008a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008b2:	f001 ff8f 	bl	80027d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008b6:	f7ff fe95 	bl	80005e4 <main>

080008ba <LoopForever>:

LoopForever:
    b LoopForever
 80008ba:	e7fe      	b.n	80008ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008bc:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80008c0:	0800289c 	.word	0x0800289c
	ldr	r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80008c8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80008cc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80008d0:	200000ac 	.word	0x200000ac

080008d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008d4:	e7fe      	b.n	80008d4 <ADC1_2_IRQHandler>
	...

080008d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <SystemInit+0x64>)
 80008de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008e2:	4a16      	ldr	r2, [pc, #88]	; (800093c <SystemInit+0x64>)
 80008e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <SystemInit+0x68>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a13      	ldr	r2, [pc, #76]	; (8000940 <SystemInit+0x68>)
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <SystemInit+0x68>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <SystemInit+0x68>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a0f      	ldr	r2, [pc, #60]	; (8000940 <SystemInit+0x68>)
 8000904:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000908:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800090c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <SystemInit+0x68>)
 8000910:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000914:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <SystemInit+0x68>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a09      	ldr	r2, [pc, #36]	; (8000940 <SystemInit+0x68>)
 800091c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000920:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <SystemInit+0x68>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <SystemInit+0x64>)
 800092a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800092e:	609a      	str	r2, [r3, #8]
#endif
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e000ed00 	.word	0xe000ed00
 8000940:	40021000 	.word	0x40021000

08000944 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800094a:	2300      	movs	r3, #0
 800094c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <HAL_Init+0x3c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <HAL_Init+0x3c>)
 8000954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000958:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095a:	2003      	movs	r0, #3
 800095c:	f000 f942 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000960:	2000      	movs	r0, #0
 8000962:	f000 f80f 	bl	8000984 <HAL_InitTick>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d002      	beq.n	8000972 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	71fb      	strb	r3, [r7, #7]
 8000970:	e001      	b.n	8000976 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000972:	f7ff fec7 	bl	8000704 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000976:	79fb      	ldrb	r3, [r7, #7]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40022000 	.word	0x40022000

08000984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800098c:	2300      	movs	r3, #0
 800098e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <HAL_InitTick+0x6c>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d023      	beq.n	80009e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000998:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <HAL_InitTick+0x70>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <HAL_InitTick+0x6c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4619      	mov	r1, r3
 80009a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 f93f 	bl	8000c32 <HAL_SYSTICK_Config>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d10f      	bne.n	80009da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b0f      	cmp	r3, #15
 80009be:	d809      	bhi.n	80009d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c0:	2200      	movs	r2, #0
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295
 80009c8:	f000 f917 	bl	8000bfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009cc:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <HAL_InitTick+0x74>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6013      	str	r3, [r2, #0]
 80009d2:	e007      	b.n	80009e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009d4:	2301      	movs	r3, #1
 80009d6:	73fb      	strb	r3, [r7, #15]
 80009d8:	e004      	b.n	80009e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	73fb      	strb	r3, [r7, #15]
 80009de:	e001      	b.n	80009e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000004 	.word	0x20000004

080009fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_IncTick+0x20>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_IncTick+0x24>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <HAL_IncTick+0x24>)
 8000a0e:	6013      	str	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	200000a8 	.word	0x200000a8

08000a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return uwTick;
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <HAL_GetTick+0x14>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	200000a8 	.word	0x200000a8

08000a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a44:	f7ff ffee 	bl	8000a24 <HAL_GetTick>
 8000a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a54:	d005      	beq.n	8000a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_Delay+0x40>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4413      	add	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a62:	bf00      	nop
 8000a64:	f7ff ffde 	bl	8000a24 <HAL_GetTick>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d8f7      	bhi.n	8000a64 <HAL_Delay+0x28>
  {
  }
}
 8000a74:	bf00      	nop
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000008 	.word	0x20000008

08000a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab2:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	60d3      	str	r3, [r2, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	f003 0307 	and.w	r3, r3, #7
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db0a      	blt.n	8000b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	490c      	ldr	r1, [pc, #48]	; (8000b30 <__NVIC_SetPriority+0x4c>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	0112      	lsls	r2, r2, #4
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	440b      	add	r3, r1
 8000b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b0c:	e00a      	b.n	8000b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4908      	ldr	r1, [pc, #32]	; (8000b34 <__NVIC_SetPriority+0x50>)
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	f003 030f 	and.w	r3, r3, #15
 8000b1a:	3b04      	subs	r3, #4
 8000b1c:	0112      	lsls	r2, r2, #4
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	440b      	add	r3, r1
 8000b22:	761a      	strb	r2, [r3, #24]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000e100 	.word	0xe000e100
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b089      	sub	sp, #36	; 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	f1c3 0307 	rsb	r3, r3, #7
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	bf28      	it	cs
 8000b56:	2304      	movcs	r3, #4
 8000b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d902      	bls.n	8000b68 <NVIC_EncodePriority+0x30>
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3b03      	subs	r3, #3
 8000b66:	e000      	b.n	8000b6a <NVIC_EncodePriority+0x32>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43da      	mvns	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b80:	f04f 31ff 	mov.w	r1, #4294967295
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8a:	43d9      	mvns	r1, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	4313      	orrs	r3, r2
         );
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3724      	adds	r7, #36	; 0x24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb0:	d301      	bcc.n	8000bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00f      	b.n	8000bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <SysTick_Config+0x40>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f7ff ff8e 	bl	8000ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <SysTick_Config+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <SysTick_Config+0x40>)
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	e000e010 	.word	0xe000e010

08000be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff47 	bl	8000a80 <__NVIC_SetPriorityGrouping>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0c:	f7ff ff5c 	bl	8000ac8 <__NVIC_GetPriorityGrouping>
 8000c10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	6978      	ldr	r0, [r7, #20]
 8000c18:	f7ff ff8e 	bl	8000b38 <NVIC_EncodePriority>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff5d 	bl	8000ae4 <__NVIC_SetPriority>
}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ffb0 	bl	8000ba0 <SysTick_Config>
 8000c40:	4603      	mov	r3, r0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b087      	sub	sp, #28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c5a:	e14e      	b.n	8000efa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	2101      	movs	r1, #1
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	fa01 f303 	lsl.w	r3, r1, r3
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 8140 	beq.w	8000ef4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d00b      	beq.n	8000c94 <HAL_GPIO_Init+0x48>
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d007      	beq.n	8000c94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c88:	2b11      	cmp	r3, #17
 8000c8a:	d003      	beq.n	8000c94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b12      	cmp	r3, #18
 8000c92:	d130      	bne.n	8000cf6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	68da      	ldr	r2, [r3, #12]
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cca:	2201      	movs	r2, #1
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	091b      	lsrs	r3, r3, #4
 8000ce0:	f003 0201 	and.w	r2, r3, #1
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	2203      	movs	r2, #3
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	689a      	ldr	r2, [r3, #8]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d003      	beq.n	8000d36 <HAL_GPIO_Init+0xea>
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	2b12      	cmp	r3, #18
 8000d34:	d123      	bne.n	8000d7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	08da      	lsrs	r2, r3, #3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3208      	adds	r2, #8
 8000d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	220f      	movs	r2, #15
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	691a      	ldr	r2, [r3, #16]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	f003 0307 	and.w	r3, r3, #7
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	08da      	lsrs	r2, r3, #3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3208      	adds	r2, #8
 8000d78:	6939      	ldr	r1, [r7, #16]
 8000d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 0203 	and.w	r2, r3, #3
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 809a 	beq.w	8000ef4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc0:	4b55      	ldr	r3, [pc, #340]	; (8000f18 <HAL_GPIO_Init+0x2cc>)
 8000dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc4:	4a54      	ldr	r2, [pc, #336]	; (8000f18 <HAL_GPIO_Init+0x2cc>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6613      	str	r3, [r2, #96]	; 0x60
 8000dcc:	4b52      	ldr	r3, [pc, #328]	; (8000f18 <HAL_GPIO_Init+0x2cc>)
 8000dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dd8:	4a50      	ldr	r2, [pc, #320]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	3302      	adds	r3, #2
 8000de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	220f      	movs	r2, #15
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e02:	d013      	beq.n	8000e2c <HAL_GPIO_Init+0x1e0>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a46      	ldr	r2, [pc, #280]	; (8000f20 <HAL_GPIO_Init+0x2d4>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d00d      	beq.n	8000e28 <HAL_GPIO_Init+0x1dc>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a45      	ldr	r2, [pc, #276]	; (8000f24 <HAL_GPIO_Init+0x2d8>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d007      	beq.n	8000e24 <HAL_GPIO_Init+0x1d8>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a44      	ldr	r2, [pc, #272]	; (8000f28 <HAL_GPIO_Init+0x2dc>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d101      	bne.n	8000e20 <HAL_GPIO_Init+0x1d4>
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e006      	b.n	8000e2e <HAL_GPIO_Init+0x1e2>
 8000e20:	2307      	movs	r3, #7
 8000e22:	e004      	b.n	8000e2e <HAL_GPIO_Init+0x1e2>
 8000e24:	2302      	movs	r3, #2
 8000e26:	e002      	b.n	8000e2e <HAL_GPIO_Init+0x1e2>
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e000      	b.n	8000e2e <HAL_GPIO_Init+0x1e2>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	f002 0203 	and.w	r2, r2, #3
 8000e34:	0092      	lsls	r2, r2, #2
 8000e36:	4093      	lsls	r3, r2
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e3e:	4937      	ldr	r1, [pc, #220]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	3302      	adds	r3, #2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e4c:	4b37      	ldr	r3, [pc, #220]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e70:	4a2e      	ldr	r2, [pc, #184]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000e76:	4b2d      	ldr	r3, [pc, #180]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e9a:	4a24      	ldr	r2, [pc, #144]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ea0:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ec4:	4a19      	ldr	r2, [pc, #100]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000eee:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	fa22 f303 	lsr.w	r3, r2, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f47f aea9 	bne.w	8000c5c <HAL_GPIO_Init+0x10>
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	371c      	adds	r7, #28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40010000 	.word	0x40010000
 8000f20:	48000400 	.word	0x48000400
 8000f24:	48000800 	.word	0x48000800
 8000f28:	48000c00 	.word	0x48000c00
 8000f2c:	40010400 	.word	0x40010400

08000f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	807b      	strh	r3, [r7, #2]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f40:	787b      	ldrb	r3, [r7, #1]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f46:	887a      	ldrh	r2, [r7, #2]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f4c:	e002      	b.n	8000f54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f4e:	887a      	ldrh	r2, [r7, #2]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40007000 	.word	0x40007000

08000f7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f8a:	d130      	bne.n	8000fee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f8c:	4b23      	ldr	r3, [pc, #140]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f98:	d038      	beq.n	800100c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f9a:	4b20      	ldr	r3, [pc, #128]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fa2:	4a1e      	ldr	r2, [pc, #120]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000faa:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2232      	movs	r2, #50	; 0x32
 8000fb0:	fb02 f303 	mul.w	r3, r2, r3
 8000fb4:	4a1b      	ldr	r2, [pc, #108]	; (8001024 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fba:	0c9b      	lsrs	r3, r3, #18
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fc0:	e002      	b.n	8000fc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fc8:	4b14      	ldr	r3, [pc, #80]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fd4:	d102      	bne.n	8000fdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1f2      	bne.n	8000fc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fe8:	d110      	bne.n	800100c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e00f      	b.n	800100e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ffa:	d007      	beq.n	800100c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001004:	4a05      	ldr	r2, [pc, #20]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40007000 	.word	0x40007000
 8001020:	20000000 	.word	0x20000000
 8001024:	431bde83 	.word	0x431bde83

08001028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d102      	bne.n	800103c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	f000 bc56 	b.w	80018e8 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800103c:	4ba1      	ldr	r3, [pc, #644]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f003 030c 	and.w	r3, r3, #12
 8001044:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001046:	4b9f      	ldr	r3, [pc, #636]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0310 	and.w	r3, r3, #16
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 80e6 	beq.w	800122a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800105e:	6a3b      	ldr	r3, [r7, #32]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d007      	beq.n	8001074 <HAL_RCC_OscConfig+0x4c>
 8001064:	6a3b      	ldr	r3, [r7, #32]
 8001066:	2b0c      	cmp	r3, #12
 8001068:	f040 808d 	bne.w	8001186 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	2b01      	cmp	r3, #1
 8001070:	f040 8089 	bne.w	8001186 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001074:	4b93      	ldr	r3, [pc, #588]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d006      	beq.n	800108e <HAL_RCC_OscConfig+0x66>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69db      	ldr	r3, [r3, #28]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d102      	bne.n	800108e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	f000 bc2d 	b.w	80018e8 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001092:	4b8c      	ldr	r3, [pc, #560]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <HAL_RCC_OscConfig+0x80>
 800109e:	4b89      	ldr	r3, [pc, #548]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010a6:	e005      	b.n	80010b4 <HAL_RCC_OscConfig+0x8c>
 80010a8:	4b86      	ldr	r3, [pc, #536]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 80010aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010ae:	091b      	lsrs	r3, r3, #4
 80010b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d224      	bcs.n	8001102 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 fdbd 	bl	8001c3c <RCC_SetFlashLatencyFromMSIRange>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	f000 bc0d 	b.w	80018e8 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010ce:	4b7d      	ldr	r3, [pc, #500]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a7c      	ldr	r2, [pc, #496]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 80010d4:	f043 0308 	orr.w	r3, r3, #8
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	4b7a      	ldr	r3, [pc, #488]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e6:	4977      	ldr	r1, [pc, #476]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ec:	4b75      	ldr	r3, [pc, #468]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	4972      	ldr	r1, [pc, #456]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 80010fc:	4313      	orrs	r3, r2
 80010fe:	604b      	str	r3, [r1, #4]
 8001100:	e025      	b.n	800114e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001102:	4b70      	ldr	r3, [pc, #448]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a6f      	ldr	r2, [pc, #444]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 8001108:	f043 0308 	orr.w	r3, r3, #8
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	4b6d      	ldr	r3, [pc, #436]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	496a      	ldr	r1, [pc, #424]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 800111c:	4313      	orrs	r3, r2
 800111e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001120:	4b68      	ldr	r3, [pc, #416]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	4965      	ldr	r1, [pc, #404]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 8001130:	4313      	orrs	r3, r2
 8001132:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001134:	6a3b      	ldr	r3, [r7, #32]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d109      	bne.n	800114e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113e:	4618      	mov	r0, r3
 8001140:	f000 fd7c 	bl	8001c3c <RCC_SetFlashLatencyFromMSIRange>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e3cc      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800114e:	f000 fcb3 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 8001152:	4601      	mov	r1, r0
 8001154:	4b5b      	ldr	r3, [pc, #364]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	091b      	lsrs	r3, r3, #4
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	4a5a      	ldr	r2, [pc, #360]	; (80012c8 <HAL_RCC_OscConfig+0x2a0>)
 8001160:	5cd3      	ldrb	r3, [r2, r3]
 8001162:	f003 031f 	and.w	r3, r3, #31
 8001166:	fa21 f303 	lsr.w	r3, r1, r3
 800116a:	4a58      	ldr	r2, [pc, #352]	; (80012cc <HAL_RCC_OscConfig+0x2a4>)
 800116c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800116e:	4b58      	ldr	r3, [pc, #352]	; (80012d0 <HAL_RCC_OscConfig+0x2a8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fc06 	bl	8000984 <HAL_InitTick>
 8001178:	4603      	mov	r3, r0
 800117a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800117c:	7dfb      	ldrb	r3, [r7, #23]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d052      	beq.n	8001228 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001182:	7dfb      	ldrb	r3, [r7, #23]
 8001184:	e3b0      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d032      	beq.n	80011f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800118e:	4b4d      	ldr	r3, [pc, #308]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a4c      	ldr	r2, [pc, #304]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800119a:	f7ff fc43 	bl	8000a24 <HAL_GetTick>
 800119e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011a0:	e008      	b.n	80011b4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011a2:	f7ff fc3f 	bl	8000a24 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d901      	bls.n	80011b4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e399      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011b4:	4b43      	ldr	r3, [pc, #268]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0f0      	beq.n	80011a2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011c0:	4b40      	ldr	r3, [pc, #256]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a3f      	ldr	r2, [pc, #252]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 80011c6:	f043 0308 	orr.w	r3, r3, #8
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	4b3d      	ldr	r3, [pc, #244]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d8:	493a      	ldr	r1, [pc, #232]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011de:	4b39      	ldr	r3, [pc, #228]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	4935      	ldr	r1, [pc, #212]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	604b      	str	r3, [r1, #4]
 80011f2:	e01a      	b.n	800122a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011f4:	4b33      	ldr	r3, [pc, #204]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a32      	ldr	r2, [pc, #200]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 80011fa:	f023 0301 	bic.w	r3, r3, #1
 80011fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001200:	f7ff fc10 	bl	8000a24 <HAL_GetTick>
 8001204:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001208:	f7ff fc0c 	bl	8000a24 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e366      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800121a:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1f0      	bne.n	8001208 <HAL_RCC_OscConfig+0x1e0>
 8001226:	e000      	b.n	800122a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001228:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d073      	beq.n	800131e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	2b08      	cmp	r3, #8
 800123a:	d005      	beq.n	8001248 <HAL_RCC_OscConfig+0x220>
 800123c:	6a3b      	ldr	r3, [r7, #32]
 800123e:	2b0c      	cmp	r3, #12
 8001240:	d10e      	bne.n	8001260 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	2b03      	cmp	r3, #3
 8001246:	d10b      	bne.n	8001260 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001248:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d063      	beq.n	800131c <HAL_RCC_OscConfig+0x2f4>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d15f      	bne.n	800131c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e343      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001268:	d106      	bne.n	8001278 <HAL_RCC_OscConfig+0x250>
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a15      	ldr	r2, [pc, #84]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 8001270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e01d      	b.n	80012b4 <HAL_RCC_OscConfig+0x28c>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001280:	d10c      	bne.n	800129c <HAL_RCC_OscConfig+0x274>
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 8001288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a0c      	ldr	r2, [pc, #48]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 8001294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e00b      	b.n	80012b4 <HAL_RCC_OscConfig+0x28c>
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a08      	ldr	r2, [pc, #32]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 80012a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <HAL_RCC_OscConfig+0x29c>)
 80012ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d01b      	beq.n	80012f4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012bc:	f7ff fbb2 	bl	8000a24 <HAL_GetTick>
 80012c0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012c2:	e010      	b.n	80012e6 <HAL_RCC_OscConfig+0x2be>
 80012c4:	40021000 	.word	0x40021000
 80012c8:	08002844 	.word	0x08002844
 80012cc:	20000000 	.word	0x20000000
 80012d0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d4:	f7ff fba6 	bl	8000a24 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b64      	cmp	r3, #100	; 0x64
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e300      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012e6:	4ba0      	ldr	r3, [pc, #640]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0x2ac>
 80012f2:	e014      	b.n	800131e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f4:	f7ff fb96 	bl	8000a24 <HAL_GetTick>
 80012f8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012fc:	f7ff fb92 	bl	8000a24 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b64      	cmp	r3, #100	; 0x64
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e2ec      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800130e:	4b96      	ldr	r3, [pc, #600]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0x2d4>
 800131a:	e000      	b.n	800131e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d060      	beq.n	80013ec <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	2b04      	cmp	r3, #4
 800132e:	d005      	beq.n	800133c <HAL_RCC_OscConfig+0x314>
 8001330:	6a3b      	ldr	r3, [r7, #32]
 8001332:	2b0c      	cmp	r3, #12
 8001334:	d119      	bne.n	800136a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d116      	bne.n	800136a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800133c:	4b8a      	ldr	r3, [pc, #552]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001344:	2b00      	cmp	r3, #0
 8001346:	d005      	beq.n	8001354 <HAL_RCC_OscConfig+0x32c>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e2c9      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001354:	4b84      	ldr	r3, [pc, #528]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	061b      	lsls	r3, r3, #24
 8001362:	4981      	ldr	r1, [pc, #516]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 8001364:	4313      	orrs	r3, r2
 8001366:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001368:	e040      	b.n	80013ec <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d023      	beq.n	80013ba <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001372:	4b7d      	ldr	r3, [pc, #500]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a7c      	ldr	r2, [pc, #496]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 8001378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137e:	f7ff fb51 	bl	8000a24 <HAL_GetTick>
 8001382:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001386:	f7ff fb4d 	bl	8000a24 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e2a7      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001398:	4b73      	ldr	r3, [pc, #460]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a4:	4b70      	ldr	r3, [pc, #448]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	061b      	lsls	r3, r3, #24
 80013b2:	496d      	ldr	r1, [pc, #436]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	604b      	str	r3, [r1, #4]
 80013b8:	e018      	b.n	80013ec <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ba:	4b6b      	ldr	r3, [pc, #428]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a6a      	ldr	r2, [pc, #424]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 80013c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c6:	f7ff fb2d 	bl	8000a24 <HAL_GetTick>
 80013ca:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ce:	f7ff fb29 	bl	8000a24 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e283      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013e0:	4b61      	ldr	r3, [pc, #388]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f0      	bne.n	80013ce <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0308 	and.w	r3, r3, #8
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d07f      	beq.n	80014f8 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d05f      	beq.n	80014c0 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001400:	4b59      	ldr	r3, [pc, #356]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 8001402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001406:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	699a      	ldr	r2, [r3, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	f003 0310 	and.w	r3, r3, #16
 8001412:	429a      	cmp	r2, r3
 8001414:	d037      	beq.n	8001486 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d006      	beq.n	800142e <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e25c      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d01b      	beq.n	8001470 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8001438:	4b4b      	ldr	r3, [pc, #300]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 800143a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800143e:	4a4a      	ldr	r2, [pc, #296]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 8001440:	f023 0301 	bic.w	r3, r3, #1
 8001444:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001448:	f7ff faec 	bl	8000a24 <HAL_GetTick>
 800144c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001450:	f7ff fae8 	bl	8000a24 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b11      	cmp	r3, #17
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e242      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001462:	4b41      	ldr	r3, [pc, #260]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 8001464:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1ef      	bne.n	8001450 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001470:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 8001472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001476:	f023 0210 	bic.w	r2, r3, #16
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	493a      	ldr	r1, [pc, #232]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 8001480:	4313      	orrs	r3, r2
 8001482:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001486:	4b38      	ldr	r3, [pc, #224]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 8001488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800148c:	4a36      	ldr	r2, [pc, #216]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001496:	f7ff fac5 	bl	8000a24 <HAL_GetTick>
 800149a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800149e:	f7ff fac1 	bl	8000a24 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b11      	cmp	r3, #17
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e21b      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014b0:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 80014b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0ef      	beq.n	800149e <HAL_RCC_OscConfig+0x476>
 80014be:	e01b      	b.n	80014f8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c0:	4b29      	ldr	r3, [pc, #164]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 80014c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014c6:	4a28      	ldr	r2, [pc, #160]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 80014c8:	f023 0301 	bic.w	r3, r3, #1
 80014cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d0:	f7ff faa8 	bl	8000a24 <HAL_GetTick>
 80014d4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d8:	f7ff faa4 	bl	8000a24 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b11      	cmp	r3, #17
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e1fe      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014ea:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 80014ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1ef      	bne.n	80014d8 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 80c1 	beq.w	8001688 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 800150e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d10e      	bne.n	8001536 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 800151a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151c:	4a12      	ldr	r2, [pc, #72]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 800151e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001522:	6593      	str	r3, [r2, #88]	; 0x58
 8001524:	4b10      	ldr	r3, [pc, #64]	; (8001568 <HAL_RCC_OscConfig+0x540>)
 8001526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001530:	2301      	movs	r3, #1
 8001532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001536:	4b0d      	ldr	r3, [pc, #52]	; (800156c <HAL_RCC_OscConfig+0x544>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153e:	2b00      	cmp	r3, #0
 8001540:	d11c      	bne.n	800157c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001542:	4b0a      	ldr	r3, [pc, #40]	; (800156c <HAL_RCC_OscConfig+0x544>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a09      	ldr	r2, [pc, #36]	; (800156c <HAL_RCC_OscConfig+0x544>)
 8001548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800154e:	f7ff fa69 	bl	8000a24 <HAL_GetTick>
 8001552:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001554:	e00c      	b.n	8001570 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001556:	f7ff fa65 	bl	8000a24 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d905      	bls.n	8001570 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e1bf      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
 8001568:	40021000 	.word	0x40021000
 800156c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001570:	4bb1      	ldr	r3, [pc, #708]	; (8001838 <HAL_RCC_OscConfig+0x810>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0ec      	beq.n	8001556 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d02c      	beq.n	80015e2 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001588:	4bac      	ldr	r3, [pc, #688]	; (800183c <HAL_RCC_OscConfig+0x814>)
 800158a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800158e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800159a:	49a8      	ldr	r1, [pc, #672]	; (800183c <HAL_RCC_OscConfig+0x814>)
 800159c:	4313      	orrs	r3, r2
 800159e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d010      	beq.n	80015d0 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80015ae:	4ba3      	ldr	r3, [pc, #652]	; (800183c <HAL_RCC_OscConfig+0x814>)
 80015b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b4:	4aa1      	ldr	r2, [pc, #644]	; (800183c <HAL_RCC_OscConfig+0x814>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015be:	4b9f      	ldr	r3, [pc, #636]	; (800183c <HAL_RCC_OscConfig+0x814>)
 80015c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c4:	4a9d      	ldr	r2, [pc, #628]	; (800183c <HAL_RCC_OscConfig+0x814>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015ce:	e018      	b.n	8001602 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015d0:	4b9a      	ldr	r3, [pc, #616]	; (800183c <HAL_RCC_OscConfig+0x814>)
 80015d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d6:	4a99      	ldr	r2, [pc, #612]	; (800183c <HAL_RCC_OscConfig+0x814>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015e0:	e00f      	b.n	8001602 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015e2:	4b96      	ldr	r3, [pc, #600]	; (800183c <HAL_RCC_OscConfig+0x814>)
 80015e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e8:	4a94      	ldr	r2, [pc, #592]	; (800183c <HAL_RCC_OscConfig+0x814>)
 80015ea:	f023 0301 	bic.w	r3, r3, #1
 80015ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80015f2:	4b92      	ldr	r3, [pc, #584]	; (800183c <HAL_RCC_OscConfig+0x814>)
 80015f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015f8:	4a90      	ldr	r2, [pc, #576]	; (800183c <HAL_RCC_OscConfig+0x814>)
 80015fa:	f023 0304 	bic.w	r3, r3, #4
 80015fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d016      	beq.n	8001638 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160a:	f7ff fa0b 	bl	8000a24 <HAL_GetTick>
 800160e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001610:	e00a      	b.n	8001628 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001612:	f7ff fa07 	bl	8000a24 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001620:	4293      	cmp	r3, r2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e15f      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001628:	4b84      	ldr	r3, [pc, #528]	; (800183c <HAL_RCC_OscConfig+0x814>)
 800162a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0ed      	beq.n	8001612 <HAL_RCC_OscConfig+0x5ea>
 8001636:	e01d      	b.n	8001674 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001638:	f7ff f9f4 	bl	8000a24 <HAL_GetTick>
 800163c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800163e:	e00a      	b.n	8001656 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001640:	f7ff f9f0 	bl	8000a24 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	f241 3288 	movw	r2, #5000	; 0x1388
 800164e:	4293      	cmp	r3, r2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e148      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001656:	4b79      	ldr	r3, [pc, #484]	; (800183c <HAL_RCC_OscConfig+0x814>)
 8001658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1ed      	bne.n	8001640 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001664:	4b75      	ldr	r3, [pc, #468]	; (800183c <HAL_RCC_OscConfig+0x814>)
 8001666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166a:	4a74      	ldr	r2, [pc, #464]	; (800183c <HAL_RCC_OscConfig+0x814>)
 800166c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001678:	2b01      	cmp	r3, #1
 800167a:	d105      	bne.n	8001688 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800167c:	4b6f      	ldr	r3, [pc, #444]	; (800183c <HAL_RCC_OscConfig+0x814>)
 800167e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001680:	4a6e      	ldr	r2, [pc, #440]	; (800183c <HAL_RCC_OscConfig+0x814>)
 8001682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001686:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0320 	and.w	r3, r3, #32
 8001690:	2b00      	cmp	r3, #0
 8001692:	d03c      	beq.n	800170e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	2b00      	cmp	r3, #0
 800169a:	d01c      	beq.n	80016d6 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800169c:	4b67      	ldr	r3, [pc, #412]	; (800183c <HAL_RCC_OscConfig+0x814>)
 800169e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016a2:	4a66      	ldr	r2, [pc, #408]	; (800183c <HAL_RCC_OscConfig+0x814>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ac:	f7ff f9ba 	bl	8000a24 <HAL_GetTick>
 80016b0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016b4:	f7ff f9b6 	bl	8000a24 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e110      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016c6:	4b5d      	ldr	r3, [pc, #372]	; (800183c <HAL_RCC_OscConfig+0x814>)
 80016c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0ef      	beq.n	80016b4 <HAL_RCC_OscConfig+0x68c>
 80016d4:	e01b      	b.n	800170e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016d6:	4b59      	ldr	r3, [pc, #356]	; (800183c <HAL_RCC_OscConfig+0x814>)
 80016d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016dc:	4a57      	ldr	r2, [pc, #348]	; (800183c <HAL_RCC_OscConfig+0x814>)
 80016de:	f023 0301 	bic.w	r3, r3, #1
 80016e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e6:	f7ff f99d 	bl	8000a24 <HAL_GetTick>
 80016ea:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016ee:	f7ff f999 	bl	8000a24 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e0f3      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001700:	4b4e      	ldr	r3, [pc, #312]	; (800183c <HAL_RCC_OscConfig+0x814>)
 8001702:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1ef      	bne.n	80016ee <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 80e7 	beq.w	80018e6 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	2b02      	cmp	r3, #2
 800171e:	f040 80b7 	bne.w	8001890 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001722:	4b46      	ldr	r3, [pc, #280]	; (800183c <HAL_RCC_OscConfig+0x814>)
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f003 0203 	and.w	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	429a      	cmp	r2, r3
 8001734:	d124      	bne.n	8001780 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001740:	3b01      	subs	r3, #1
 8001742:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001744:	429a      	cmp	r2, r3
 8001746:	d11b      	bne.n	8001780 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001752:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001754:	429a      	cmp	r2, r3
 8001756:	d113      	bne.n	8001780 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001762:	085b      	lsrs	r3, r3, #1
 8001764:	3b01      	subs	r3, #1
 8001766:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001768:	429a      	cmp	r2, r3
 800176a:	d109      	bne.n	8001780 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	085b      	lsrs	r3, r3, #1
 8001778:	3b01      	subs	r3, #1
 800177a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d061      	beq.n	8001844 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	2b0c      	cmp	r3, #12
 8001784:	d056      	beq.n	8001834 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001786:	4b2d      	ldr	r3, [pc, #180]	; (800183c <HAL_RCC_OscConfig+0x814>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a2c      	ldr	r2, [pc, #176]	; (800183c <HAL_RCC_OscConfig+0x814>)
 800178c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001790:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001792:	f7ff f947 	bl	8000a24 <HAL_GetTick>
 8001796:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179a:	f7ff f943 	bl	8000a24 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e09d      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ac:	4b23      	ldr	r3, [pc, #140]	; (800183c <HAL_RCC_OscConfig+0x814>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1f0      	bne.n	800179a <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b8:	4b20      	ldr	r3, [pc, #128]	; (800183c <HAL_RCC_OscConfig+0x814>)
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	4b20      	ldr	r3, [pc, #128]	; (8001840 <HAL_RCC_OscConfig+0x818>)
 80017be:	4013      	ands	r3, r2
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017c8:	3a01      	subs	r2, #1
 80017ca:	0112      	lsls	r2, r2, #4
 80017cc:	4311      	orrs	r1, r2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017d2:	0212      	lsls	r2, r2, #8
 80017d4:	4311      	orrs	r1, r2
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017da:	0852      	lsrs	r2, r2, #1
 80017dc:	3a01      	subs	r2, #1
 80017de:	0552      	lsls	r2, r2, #21
 80017e0:	4311      	orrs	r1, r2
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017e6:	0852      	lsrs	r2, r2, #1
 80017e8:	3a01      	subs	r2, #1
 80017ea:	0652      	lsls	r2, r2, #25
 80017ec:	430a      	orrs	r2, r1
 80017ee:	4913      	ldr	r1, [pc, #76]	; (800183c <HAL_RCC_OscConfig+0x814>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <HAL_RCC_OscConfig+0x814>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a10      	ldr	r2, [pc, #64]	; (800183c <HAL_RCC_OscConfig+0x814>)
 80017fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001800:	4b0e      	ldr	r3, [pc, #56]	; (800183c <HAL_RCC_OscConfig+0x814>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	4a0d      	ldr	r2, [pc, #52]	; (800183c <HAL_RCC_OscConfig+0x814>)
 8001806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800180a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800180c:	f7ff f90a 	bl	8000a24 <HAL_GetTick>
 8001810:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001814:	f7ff f906 	bl	8000a24 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e060      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001826:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_RCC_OscConfig+0x814>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001832:	e058      	b.n	80018e6 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e057      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
 8001838:	40007000 	.word	0x40007000
 800183c:	40021000 	.word	0x40021000
 8001840:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001844:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <HAL_RCC_OscConfig+0x8c8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d14a      	bne.n	80018e6 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001850:	4b27      	ldr	r3, [pc, #156]	; (80018f0 <HAL_RCC_OscConfig+0x8c8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a26      	ldr	r2, [pc, #152]	; (80018f0 <HAL_RCC_OscConfig+0x8c8>)
 8001856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800185a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800185c:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <HAL_RCC_OscConfig+0x8c8>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	4a23      	ldr	r2, [pc, #140]	; (80018f0 <HAL_RCC_OscConfig+0x8c8>)
 8001862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001866:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001868:	f7ff f8dc 	bl	8000a24 <HAL_GetTick>
 800186c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001870:	f7ff f8d8 	bl	8000a24 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e032      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001882:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <HAL_RCC_OscConfig+0x8c8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x848>
 800188e:	e02a      	b.n	80018e6 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	2b0c      	cmp	r3, #12
 8001894:	d025      	beq.n	80018e2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <HAL_RCC_OscConfig+0x8c8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a15      	ldr	r2, [pc, #84]	; (80018f0 <HAL_RCC_OscConfig+0x8c8>)
 800189c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018a0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <HAL_RCC_OscConfig+0x8c8>)
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <HAL_RCC_OscConfig+0x8c8>)
 80018a8:	f023 0303 	bic.w	r3, r3, #3
 80018ac:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <HAL_RCC_OscConfig+0x8c8>)
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	4a0f      	ldr	r2, [pc, #60]	; (80018f0 <HAL_RCC_OscConfig+0x8c8>)
 80018b4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80018b8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ba:	f7ff f8b3 	bl	8000a24 <HAL_GetTick>
 80018be:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c2:	f7ff f8af 	bl	8000a24 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e009      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_RCC_OscConfig+0x8c8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1f0      	bne.n	80018c2 <HAL_RCC_OscConfig+0x89a>
 80018e0:	e001      	b.n	80018e6 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3728      	adds	r7, #40	; 0x28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40021000 	.word	0x40021000

080018f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0c8      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001908:	4b66      	ldr	r3, [pc, #408]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d910      	bls.n	8001938 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b63      	ldr	r3, [pc, #396]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 0207 	bic.w	r2, r3, #7
 800191e:	4961      	ldr	r1, [pc, #388]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b0>)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	4313      	orrs	r3, r2
 8001924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001926:	4b5f      	ldr	r3, [pc, #380]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d001      	beq.n	8001938 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0b0      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	d04c      	beq.n	80019de <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b03      	cmp	r3, #3
 800194a:	d107      	bne.n	800195c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194c:	4b56      	ldr	r3, [pc, #344]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d121      	bne.n	800199c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e09e      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d107      	bne.n	8001974 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001964:	4b50      	ldr	r3, [pc, #320]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d115      	bne.n	800199c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e092      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d107      	bne.n	800198c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800197c:	4b4a      	ldr	r3, [pc, #296]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d109      	bne.n	800199c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e086      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800198c:	4b46      	ldr	r3, [pc, #280]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b4>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e07e      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800199c:	4b42      	ldr	r3, [pc, #264]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b4>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f023 0203 	bic.w	r2, r3, #3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	493f      	ldr	r1, [pc, #252]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b4>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019ae:	f7ff f839 	bl	8000a24 <HAL_GetTick>
 80019b2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b4:	e00a      	b.n	80019cc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b6:	f7ff f835 	bl	8000a24 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e066      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019cc:	4b36      	ldr	r3, [pc, #216]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b4>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 020c 	and.w	r2, r3, #12
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	429a      	cmp	r2, r3
 80019dc:	d1eb      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d008      	beq.n	80019fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ea:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b4>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	492c      	ldr	r1, [pc, #176]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b4>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019fc:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d210      	bcs.n	8001a2c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0a:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 0207 	bic.w	r2, r3, #7
 8001a12:	4924      	ldr	r1, [pc, #144]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b0>)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1a:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e036      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d008      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a38:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4918      	ldr	r1, [pc, #96]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d009      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a56:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4910      	ldr	r1, [pc, #64]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a6a:	f000 f825 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 8001a6e:	4601      	mov	r1, r0
 8001a70:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <HAL_RCC_ClockConfig+0x1b4>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	4a0c      	ldr	r2, [pc, #48]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a7c:	5cd3      	ldrb	r3, [r2, r3]
 8001a7e:	f003 031f 	and.w	r3, r3, #31
 8001a82:	fa21 f303 	lsr.w	r3, r1, r3
 8001a86:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe ff78 	bl	8000984 <HAL_InitTick>
 8001a94:	4603      	mov	r3, r0
 8001a96:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a98:	7afb      	ldrb	r3, [r7, #11]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40022000 	.word	0x40022000
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	08002844 	.word	0x08002844
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000004 	.word	0x20000004

08001ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	; 0x24
 8001abc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ac6:	4b3d      	ldr	r3, [pc, #244]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x104>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ad0:	4b3a      	ldr	r3, [pc, #232]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x104>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_RCC_GetSysClockFreq+0x34>
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	2b0c      	cmp	r3, #12
 8001ae4:	d121      	bne.n	8001b2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d11e      	bne.n	8001b2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001aec:	4b33      	ldr	r3, [pc, #204]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x104>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d107      	bne.n	8001b08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001af8:	4b30      	ldr	r3, [pc, #192]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x104>)
 8001afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001afe:	0a1b      	lsrs	r3, r3, #8
 8001b00:	f003 030f 	and.w	r3, r3, #15
 8001b04:	61fb      	str	r3, [r7, #28]
 8001b06:	e005      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b08:	4b2c      	ldr	r3, [pc, #176]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x104>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b14:	4a2a      	ldr	r2, [pc, #168]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10d      	bne.n	8001b40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b28:	e00a      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d102      	bne.n	8001b36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b30:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b32:	61bb      	str	r3, [r7, #24]
 8001b34:	e004      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d101      	bne.n	8001b40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b3c:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	2b0c      	cmp	r3, #12
 8001b44:	d133      	bne.n	8001bae <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b46:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x104>)
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d002      	beq.n	8001b5c <HAL_RCC_GetSysClockFreq+0xa4>
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d003      	beq.n	8001b62 <HAL_RCC_GetSysClockFreq+0xaa>
 8001b5a:	e005      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b5c:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b5e:	617b      	str	r3, [r7, #20]
      break;
 8001b60:	e005      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b62:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b64:	617b      	str	r3, [r7, #20]
      break;
 8001b66:	e002      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	617b      	str	r3, [r7, #20]
      break;
 8001b6c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x104>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	091b      	lsrs	r3, r3, #4
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	3301      	adds	r3, #1
 8001b7a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x104>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	fb02 f203 	mul.w	r2, r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b92:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b94:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x104>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	0e5b      	lsrs	r3, r3, #25
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bac:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001bae:	69bb      	ldr	r3, [r7, #24]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3724      	adds	r7, #36	; 0x24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	0800285c 	.word	0x0800285c
 8001bc4:	00f42400 	.word	0x00f42400
 8001bc8:	007a1200 	.word	0x007a1200

08001bcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000000 	.word	0x20000000

08001be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001be8:	f7ff fff0 	bl	8001bcc <HAL_RCC_GetHCLKFreq>
 8001bec:	4601      	mov	r1, r0
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	0a1b      	lsrs	r3, r3, #8
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bfa:	5cd3      	ldrb	r3, [r2, r3]
 8001bfc:	f003 031f 	and.w	r3, r3, #31
 8001c00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	08002854 	.word	0x08002854

08001c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c14:	f7ff ffda 	bl	8001bcc <HAL_RCC_GetHCLKFreq>
 8001c18:	4601      	mov	r1, r0
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	0adb      	lsrs	r3, r3, #11
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c26:	5cd3      	ldrb	r3, [r2, r3]
 8001c28:	f003 031f 	and.w	r3, r3, #31
 8001c2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40021000 	.word	0x40021000
 8001c38:	08002854 	.word	0x08002854

08001c3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c48:	4b2a      	ldr	r3, [pc, #168]	; (8001cf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c54:	f7ff f984 	bl	8000f60 <HAL_PWREx_GetVoltageRange>
 8001c58:	6178      	str	r0, [r7, #20]
 8001c5a:	e014      	b.n	8001c86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c5c:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c60:	4a24      	ldr	r2, [pc, #144]	; (8001cf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c66:	6593      	str	r3, [r2, #88]	; 0x58
 8001c68:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c74:	f7ff f974 	bl	8000f60 <HAL_PWREx_GetVoltageRange>
 8001c78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7e:	4a1d      	ldr	r2, [pc, #116]	; (8001cf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c8c:	d10b      	bne.n	8001ca6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b80      	cmp	r3, #128	; 0x80
 8001c92:	d919      	bls.n	8001cc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2ba0      	cmp	r3, #160	; 0xa0
 8001c98:	d902      	bls.n	8001ca0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	e013      	b.n	8001cc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	e010      	b.n	8001cc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b80      	cmp	r3, #128	; 0x80
 8001caa:	d902      	bls.n	8001cb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001cac:	2303      	movs	r3, #3
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	e00a      	b.n	8001cc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b80      	cmp	r3, #128	; 0x80
 8001cb6:	d102      	bne.n	8001cbe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cb8:	2302      	movs	r3, #2
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	e004      	b.n	8001cc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b70      	cmp	r3, #112	; 0x70
 8001cc2:	d101      	bne.n	8001cc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f023 0207 	bic.w	r2, r3, #7
 8001cd0:	4909      	ldr	r1, [pc, #36]	; (8001cf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001cd8:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d001      	beq.n	8001cea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40022000 	.word	0x40022000

08001cfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d04:	2300      	movs	r3, #0
 8001d06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d08:	2300      	movs	r3, #0
 8001d0a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 809e 	beq.w	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d1e:	4b46      	ldr	r3, [pc, #280]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00d      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d34:	4b40      	ldr	r3, [pc, #256]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d38:	4a3f      	ldr	r2, [pc, #252]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d40:	4b3d      	ldr	r3, [pc, #244]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d50:	4b3a      	ldr	r3, [pc, #232]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a39      	ldr	r2, [pc, #228]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d5c:	f7fe fe62 	bl	8000a24 <HAL_GetTick>
 8001d60:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d62:	e009      	b.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d64:	f7fe fe5e 	bl	8000a24 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d902      	bls.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	74fb      	strb	r3, [r7, #19]
        break;
 8001d76:	e005      	b.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d78:	4b30      	ldr	r3, [pc, #192]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8001d84:	7cfb      	ldrb	r3, [r7, #19]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d15a      	bne.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d8a:	4b2b      	ldr	r3, [pc, #172]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d94:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d01e      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d019      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001da6:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001db0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001db2:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db8:	4a1f      	ldr	r2, [pc, #124]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc8:	4a1b      	ldr	r2, [pc, #108]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001dd2:	4a19      	ldr	r2, [pc, #100]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d016      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7fe fe1e 	bl	8000a24 <HAL_GetTick>
 8001de8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dea:	e00b      	b.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dec:	f7fe fe1a 	bl	8000a24 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d902      	bls.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	74fb      	strb	r3, [r7, #19]
            break;
 8001e02:	e006      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0ec      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8001e12:	7cfb      	ldrb	r3, [r7, #19]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10b      	bne.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e18:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4904      	ldr	r1, [pc, #16]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e2e:	e009      	b.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e30:	7cfb      	ldrb	r3, [r7, #19]
 8001e32:	74bb      	strb	r3, [r7, #18]
 8001e34:	e006      	b.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e40:	7cfb      	ldrb	r3, [r7, #19]
 8001e42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e44:	7c7b      	ldrb	r3, [r7, #17]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d105      	bne.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e4a:	4b6e      	ldr	r3, [pc, #440]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4e:	4a6d      	ldr	r2, [pc, #436]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00a      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e62:	4b68      	ldr	r3, [pc, #416]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e68:	f023 0203 	bic.w	r2, r3, #3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	4964      	ldr	r1, [pc, #400]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00a      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e84:	4b5f      	ldr	r3, [pc, #380]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e8a:	f023 020c 	bic.w	r2, r3, #12
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	495c      	ldr	r1, [pc, #368]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00a      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ea6:	4b57      	ldr	r3, [pc, #348]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4953      	ldr	r1, [pc, #332]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0320 	and.w	r3, r3, #32
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00a      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ec8:	4b4e      	ldr	r3, [pc, #312]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ece:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	494b      	ldr	r1, [pc, #300]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001eea:	4b46      	ldr	r3, [pc, #280]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	4942      	ldr	r1, [pc, #264]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00a      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f0c:	4b3d      	ldr	r3, [pc, #244]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	493a      	ldr	r1, [pc, #232]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f2e:	4b35      	ldr	r3, [pc, #212]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	4931      	ldr	r1, [pc, #196]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00a      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f50:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	4929      	ldr	r1, [pc, #164]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00a      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f72:	4b24      	ldr	r3, [pc, #144]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	4920      	ldr	r1, [pc, #128]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d015      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f94:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa2:	4918      	ldr	r1, [pc, #96]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fb2:	d105      	bne.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fb4:	4b13      	ldr	r3, [pc, #76]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4a12      	ldr	r2, [pc, #72]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fbe:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d015      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001fcc:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fda:	490a      	ldr	r1, [pc, #40]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fea:	d105      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4a04      	ldr	r2, [pc, #16]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ff2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ff6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001ff8:	7cbb      	ldrb	r3, [r7, #18]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000

08002008 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e040      	b.n	800209c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800201e:	2b00      	cmp	r3, #0
 8002020:	d106      	bne.n	8002030 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7fe fbe8 	bl	8000800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2224      	movs	r2, #36	; 0x24
 8002034:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0201 	bic.w	r2, r2, #1
 8002044:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f82c 	bl	80020a4 <UART_SetConfig>
 800204c:	4603      	mov	r3, r0
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e022      	b.n	800209c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	2b00      	cmp	r3, #0
 800205c:	d002      	beq.n	8002064 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 fa56 	bl	8002510 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002072:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002082:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 fadd 	bl	8002654 <UART_CheckIdleState>
 800209a:	4603      	mov	r3, r0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020a4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80020a8:	b088      	sub	sp, #32
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4baa      	ldr	r3, [pc, #680]	; (800237c <UART_SetConfig+0x2d8>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	69f9      	ldr	r1, [r7, #28]
 80020da:	430b      	orrs	r3, r1
 80020dc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4aa0      	ldr	r2, [pc, #640]	; (8002380 <UART_SetConfig+0x2dc>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d004      	beq.n	800210e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	4313      	orrs	r3, r2
 800210c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	69fa      	ldr	r2, [r7, #28]
 800211e:	430a      	orrs	r2, r1
 8002120:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a97      	ldr	r2, [pc, #604]	; (8002384 <UART_SetConfig+0x2e0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d121      	bne.n	8002170 <UART_SetConfig+0xcc>
 800212c:	4b96      	ldr	r3, [pc, #600]	; (8002388 <UART_SetConfig+0x2e4>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	2b03      	cmp	r3, #3
 8002138:	d816      	bhi.n	8002168 <UART_SetConfig+0xc4>
 800213a:	a201      	add	r2, pc, #4	; (adr r2, 8002140 <UART_SetConfig+0x9c>)
 800213c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002140:	08002151 	.word	0x08002151
 8002144:	0800215d 	.word	0x0800215d
 8002148:	08002157 	.word	0x08002157
 800214c:	08002163 	.word	0x08002163
 8002150:	2301      	movs	r3, #1
 8002152:	76fb      	strb	r3, [r7, #27]
 8002154:	e098      	b.n	8002288 <UART_SetConfig+0x1e4>
 8002156:	2302      	movs	r3, #2
 8002158:	76fb      	strb	r3, [r7, #27]
 800215a:	e095      	b.n	8002288 <UART_SetConfig+0x1e4>
 800215c:	2304      	movs	r3, #4
 800215e:	76fb      	strb	r3, [r7, #27]
 8002160:	e092      	b.n	8002288 <UART_SetConfig+0x1e4>
 8002162:	2308      	movs	r3, #8
 8002164:	76fb      	strb	r3, [r7, #27]
 8002166:	e08f      	b.n	8002288 <UART_SetConfig+0x1e4>
 8002168:	2310      	movs	r3, #16
 800216a:	76fb      	strb	r3, [r7, #27]
 800216c:	bf00      	nop
 800216e:	e08b      	b.n	8002288 <UART_SetConfig+0x1e4>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a85      	ldr	r2, [pc, #532]	; (800238c <UART_SetConfig+0x2e8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d134      	bne.n	80021e4 <UART_SetConfig+0x140>
 800217a:	4b83      	ldr	r3, [pc, #524]	; (8002388 <UART_SetConfig+0x2e4>)
 800217c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002180:	f003 030c 	and.w	r3, r3, #12
 8002184:	2b0c      	cmp	r3, #12
 8002186:	d829      	bhi.n	80021dc <UART_SetConfig+0x138>
 8002188:	a201      	add	r2, pc, #4	; (adr r2, 8002190 <UART_SetConfig+0xec>)
 800218a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218e:	bf00      	nop
 8002190:	080021c5 	.word	0x080021c5
 8002194:	080021dd 	.word	0x080021dd
 8002198:	080021dd 	.word	0x080021dd
 800219c:	080021dd 	.word	0x080021dd
 80021a0:	080021d1 	.word	0x080021d1
 80021a4:	080021dd 	.word	0x080021dd
 80021a8:	080021dd 	.word	0x080021dd
 80021ac:	080021dd 	.word	0x080021dd
 80021b0:	080021cb 	.word	0x080021cb
 80021b4:	080021dd 	.word	0x080021dd
 80021b8:	080021dd 	.word	0x080021dd
 80021bc:	080021dd 	.word	0x080021dd
 80021c0:	080021d7 	.word	0x080021d7
 80021c4:	2300      	movs	r3, #0
 80021c6:	76fb      	strb	r3, [r7, #27]
 80021c8:	e05e      	b.n	8002288 <UART_SetConfig+0x1e4>
 80021ca:	2302      	movs	r3, #2
 80021cc:	76fb      	strb	r3, [r7, #27]
 80021ce:	e05b      	b.n	8002288 <UART_SetConfig+0x1e4>
 80021d0:	2304      	movs	r3, #4
 80021d2:	76fb      	strb	r3, [r7, #27]
 80021d4:	e058      	b.n	8002288 <UART_SetConfig+0x1e4>
 80021d6:	2308      	movs	r3, #8
 80021d8:	76fb      	strb	r3, [r7, #27]
 80021da:	e055      	b.n	8002288 <UART_SetConfig+0x1e4>
 80021dc:	2310      	movs	r3, #16
 80021de:	76fb      	strb	r3, [r7, #27]
 80021e0:	bf00      	nop
 80021e2:	e051      	b.n	8002288 <UART_SetConfig+0x1e4>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a69      	ldr	r2, [pc, #420]	; (8002390 <UART_SetConfig+0x2ec>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d120      	bne.n	8002230 <UART_SetConfig+0x18c>
 80021ee:	4b66      	ldr	r3, [pc, #408]	; (8002388 <UART_SetConfig+0x2e4>)
 80021f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80021f8:	2b10      	cmp	r3, #16
 80021fa:	d00f      	beq.n	800221c <UART_SetConfig+0x178>
 80021fc:	2b10      	cmp	r3, #16
 80021fe:	d802      	bhi.n	8002206 <UART_SetConfig+0x162>
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <UART_SetConfig+0x16c>
 8002204:	e010      	b.n	8002228 <UART_SetConfig+0x184>
 8002206:	2b20      	cmp	r3, #32
 8002208:	d005      	beq.n	8002216 <UART_SetConfig+0x172>
 800220a:	2b30      	cmp	r3, #48	; 0x30
 800220c:	d009      	beq.n	8002222 <UART_SetConfig+0x17e>
 800220e:	e00b      	b.n	8002228 <UART_SetConfig+0x184>
 8002210:	2300      	movs	r3, #0
 8002212:	76fb      	strb	r3, [r7, #27]
 8002214:	e038      	b.n	8002288 <UART_SetConfig+0x1e4>
 8002216:	2302      	movs	r3, #2
 8002218:	76fb      	strb	r3, [r7, #27]
 800221a:	e035      	b.n	8002288 <UART_SetConfig+0x1e4>
 800221c:	2304      	movs	r3, #4
 800221e:	76fb      	strb	r3, [r7, #27]
 8002220:	e032      	b.n	8002288 <UART_SetConfig+0x1e4>
 8002222:	2308      	movs	r3, #8
 8002224:	76fb      	strb	r3, [r7, #27]
 8002226:	e02f      	b.n	8002288 <UART_SetConfig+0x1e4>
 8002228:	2310      	movs	r3, #16
 800222a:	76fb      	strb	r3, [r7, #27]
 800222c:	bf00      	nop
 800222e:	e02b      	b.n	8002288 <UART_SetConfig+0x1e4>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a52      	ldr	r2, [pc, #328]	; (8002380 <UART_SetConfig+0x2dc>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d124      	bne.n	8002284 <UART_SetConfig+0x1e0>
 800223a:	4b53      	ldr	r3, [pc, #332]	; (8002388 <UART_SetConfig+0x2e4>)
 800223c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002240:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002248:	d012      	beq.n	8002270 <UART_SetConfig+0x1cc>
 800224a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800224e:	d802      	bhi.n	8002256 <UART_SetConfig+0x1b2>
 8002250:	2b00      	cmp	r3, #0
 8002252:	d007      	beq.n	8002264 <UART_SetConfig+0x1c0>
 8002254:	e012      	b.n	800227c <UART_SetConfig+0x1d8>
 8002256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800225a:	d006      	beq.n	800226a <UART_SetConfig+0x1c6>
 800225c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002260:	d009      	beq.n	8002276 <UART_SetConfig+0x1d2>
 8002262:	e00b      	b.n	800227c <UART_SetConfig+0x1d8>
 8002264:	2300      	movs	r3, #0
 8002266:	76fb      	strb	r3, [r7, #27]
 8002268:	e00e      	b.n	8002288 <UART_SetConfig+0x1e4>
 800226a:	2302      	movs	r3, #2
 800226c:	76fb      	strb	r3, [r7, #27]
 800226e:	e00b      	b.n	8002288 <UART_SetConfig+0x1e4>
 8002270:	2304      	movs	r3, #4
 8002272:	76fb      	strb	r3, [r7, #27]
 8002274:	e008      	b.n	8002288 <UART_SetConfig+0x1e4>
 8002276:	2308      	movs	r3, #8
 8002278:	76fb      	strb	r3, [r7, #27]
 800227a:	e005      	b.n	8002288 <UART_SetConfig+0x1e4>
 800227c:	2310      	movs	r3, #16
 800227e:	76fb      	strb	r3, [r7, #27]
 8002280:	bf00      	nop
 8002282:	e001      	b.n	8002288 <UART_SetConfig+0x1e4>
 8002284:	2310      	movs	r3, #16
 8002286:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a3c      	ldr	r2, [pc, #240]	; (8002380 <UART_SetConfig+0x2dc>)
 800228e:	4293      	cmp	r3, r2
 8002290:	f040 8082 	bne.w	8002398 <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002294:	7efb      	ldrb	r3, [r7, #27]
 8002296:	2b08      	cmp	r3, #8
 8002298:	d823      	bhi.n	80022e2 <UART_SetConfig+0x23e>
 800229a:	a201      	add	r2, pc, #4	; (adr r2, 80022a0 <UART_SetConfig+0x1fc>)
 800229c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a0:	080022c5 	.word	0x080022c5
 80022a4:	080022e3 	.word	0x080022e3
 80022a8:	080022cd 	.word	0x080022cd
 80022ac:	080022e3 	.word	0x080022e3
 80022b0:	080022d3 	.word	0x080022d3
 80022b4:	080022e3 	.word	0x080022e3
 80022b8:	080022e3 	.word	0x080022e3
 80022bc:	080022e3 	.word	0x080022e3
 80022c0:	080022db 	.word	0x080022db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022c4:	f7ff fc8e 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 80022c8:	6178      	str	r0, [r7, #20]
        break;
 80022ca:	e00f      	b.n	80022ec <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022cc:	4b31      	ldr	r3, [pc, #196]	; (8002394 <UART_SetConfig+0x2f0>)
 80022ce:	617b      	str	r3, [r7, #20]
        break;
 80022d0:	e00c      	b.n	80022ec <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022d2:	f7ff fbf1 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 80022d6:	6178      	str	r0, [r7, #20]
        break;
 80022d8:	e008      	b.n	80022ec <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022de:	617b      	str	r3, [r7, #20]
        break;
 80022e0:	e004      	b.n	80022ec <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	76bb      	strb	r3, [r7, #26]
        break;
 80022ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 8100 	beq.w	80024f4 <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4413      	add	r3, r2
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	429a      	cmp	r2, r3
 8002302:	d305      	bcc.n	8002310 <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	429a      	cmp	r2, r3
 800230e:	d902      	bls.n	8002316 <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	76bb      	strb	r3, [r7, #26]
 8002314:	e0ee      	b.n	80024f4 <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	4619      	mov	r1, r3
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	f04f 0400 	mov.w	r4, #0
 8002326:	0214      	lsls	r4, r2, #8
 8002328:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800232c:	020b      	lsls	r3, r1, #8
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6852      	ldr	r2, [r2, #4]
 8002332:	0852      	lsrs	r2, r2, #1
 8002334:	4611      	mov	r1, r2
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	eb13 0b01 	adds.w	fp, r3, r1
 800233e:	eb44 0c02 	adc.w	ip, r4, r2
 8002342:	4658      	mov	r0, fp
 8002344:	4661      	mov	r1, ip
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f04f 0400 	mov.w	r4, #0
 800234e:	461a      	mov	r2, r3
 8002350:	4623      	mov	r3, r4
 8002352:	f7fd ff3b 	bl	80001cc <__aeabi_uldivmod>
 8002356:	4603      	mov	r3, r0
 8002358:	460c      	mov	r4, r1
 800235a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002362:	d308      	bcc.n	8002376 <UART_SetConfig+0x2d2>
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800236a:	d204      	bcs.n	8002376 <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	60da      	str	r2, [r3, #12]
 8002374:	e0be      	b.n	80024f4 <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	76bb      	strb	r3, [r7, #26]
 800237a:	e0bb      	b.n	80024f4 <UART_SetConfig+0x450>
 800237c:	efff69f3 	.word	0xefff69f3
 8002380:	40008000 	.word	0x40008000
 8002384:	40013800 	.word	0x40013800
 8002388:	40021000 	.word	0x40021000
 800238c:	40004400 	.word	0x40004400
 8002390:	40004800 	.word	0x40004800
 8002394:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023a0:	d15c      	bne.n	800245c <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 80023a2:	7efb      	ldrb	r3, [r7, #27]
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d828      	bhi.n	80023fa <UART_SetConfig+0x356>
 80023a8:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <UART_SetConfig+0x30c>)
 80023aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ae:	bf00      	nop
 80023b0:	080023d5 	.word	0x080023d5
 80023b4:	080023dd 	.word	0x080023dd
 80023b8:	080023e5 	.word	0x080023e5
 80023bc:	080023fb 	.word	0x080023fb
 80023c0:	080023eb 	.word	0x080023eb
 80023c4:	080023fb 	.word	0x080023fb
 80023c8:	080023fb 	.word	0x080023fb
 80023cc:	080023fb 	.word	0x080023fb
 80023d0:	080023f3 	.word	0x080023f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023d4:	f7ff fc06 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 80023d8:	6178      	str	r0, [r7, #20]
        break;
 80023da:	e013      	b.n	8002404 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80023dc:	f7ff fc18 	bl	8001c10 <HAL_RCC_GetPCLK2Freq>
 80023e0:	6178      	str	r0, [r7, #20]
        break;
 80023e2:	e00f      	b.n	8002404 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023e4:	4b49      	ldr	r3, [pc, #292]	; (800250c <UART_SetConfig+0x468>)
 80023e6:	617b      	str	r3, [r7, #20]
        break;
 80023e8:	e00c      	b.n	8002404 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023ea:	f7ff fb65 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 80023ee:	6178      	str	r0, [r7, #20]
        break;
 80023f0:	e008      	b.n	8002404 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023f6:	617b      	str	r3, [r7, #20]
        break;
 80023f8:	e004      	b.n	8002404 <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	76bb      	strb	r3, [r7, #26]
        break;
 8002402:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d074      	beq.n	80024f4 <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	005a      	lsls	r2, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	085b      	lsrs	r3, r3, #1
 8002414:	441a      	add	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	fbb2 f3f3 	udiv	r3, r2, r3
 800241e:	b29b      	uxth	r3, r3
 8002420:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	2b0f      	cmp	r3, #15
 8002426:	d916      	bls.n	8002456 <UART_SetConfig+0x3b2>
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800242e:	d212      	bcs.n	8002456 <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	b29b      	uxth	r3, r3
 8002434:	f023 030f 	bic.w	r3, r3, #15
 8002438:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	085b      	lsrs	r3, r3, #1
 800243e:	b29b      	uxth	r3, r3
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	b29a      	uxth	r2, r3
 8002446:	89fb      	ldrh	r3, [r7, #14]
 8002448:	4313      	orrs	r3, r2
 800244a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	89fa      	ldrh	r2, [r7, #14]
 8002452:	60da      	str	r2, [r3, #12]
 8002454:	e04e      	b.n	80024f4 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	76bb      	strb	r3, [r7, #26]
 800245a:	e04b      	b.n	80024f4 <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 800245c:	7efb      	ldrb	r3, [r7, #27]
 800245e:	2b08      	cmp	r3, #8
 8002460:	d827      	bhi.n	80024b2 <UART_SetConfig+0x40e>
 8002462:	a201      	add	r2, pc, #4	; (adr r2, 8002468 <UART_SetConfig+0x3c4>)
 8002464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002468:	0800248d 	.word	0x0800248d
 800246c:	08002495 	.word	0x08002495
 8002470:	0800249d 	.word	0x0800249d
 8002474:	080024b3 	.word	0x080024b3
 8002478:	080024a3 	.word	0x080024a3
 800247c:	080024b3 	.word	0x080024b3
 8002480:	080024b3 	.word	0x080024b3
 8002484:	080024b3 	.word	0x080024b3
 8002488:	080024ab 	.word	0x080024ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800248c:	f7ff fbaa 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 8002490:	6178      	str	r0, [r7, #20]
        break;
 8002492:	e013      	b.n	80024bc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002494:	f7ff fbbc 	bl	8001c10 <HAL_RCC_GetPCLK2Freq>
 8002498:	6178      	str	r0, [r7, #20]
        break;
 800249a:	e00f      	b.n	80024bc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800249c:	4b1b      	ldr	r3, [pc, #108]	; (800250c <UART_SetConfig+0x468>)
 800249e:	617b      	str	r3, [r7, #20]
        break;
 80024a0:	e00c      	b.n	80024bc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024a2:	f7ff fb09 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 80024a6:	6178      	str	r0, [r7, #20]
        break;
 80024a8:	e008      	b.n	80024bc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024ae:	617b      	str	r3, [r7, #20]
        break;
 80024b0:	e004      	b.n	80024bc <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	76bb      	strb	r3, [r7, #26]
        break;
 80024ba:	bf00      	nop
    }

    if (pclk != 0U)
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d018      	beq.n	80024f4 <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	085a      	lsrs	r2, r3, #1
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	441a      	add	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	2b0f      	cmp	r3, #15
 80024dc:	d908      	bls.n	80024f0 <UART_SetConfig+0x44c>
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e4:	d204      	bcs.n	80024f0 <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	e001      	b.n	80024f4 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002500:	7ebb      	ldrb	r3, [r7, #26]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3720      	adds	r7, #32
 8002506:	46bd      	mov	sp, r7
 8002508:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800250c:	00f42400 	.word	0x00f42400

08002510 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00a      	beq.n	800253a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00a      	beq.n	800257e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00a      	beq.n	80025a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	f003 0320 	and.w	r3, r3, #32
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d01a      	beq.n	8002626 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800260e:	d10a      	bne.n	8002626 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	605a      	str	r2, [r3, #4]
  }
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af02      	add	r7, sp, #8
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002662:	f7fe f9df 	bl	8000a24 <HAL_GetTick>
 8002666:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b08      	cmp	r3, #8
 8002674:	d10e      	bne.n	8002694 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002676:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f82a 	bl	80026de <UART_WaitOnFlagUntilTimeout>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e020      	b.n	80026d6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d10e      	bne.n	80026c0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f814 	bl	80026de <UART_WaitOnFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e00a      	b.n	80026d6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2220      	movs	r2, #32
 80026c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2220      	movs	r2, #32
 80026ca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	4613      	mov	r3, r2
 80026ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ee:	e05d      	b.n	80027ac <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f6:	d059      	beq.n	80027ac <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f8:	f7fe f994 	bl	8000a24 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	429a      	cmp	r2, r3
 8002706:	d302      	bcc.n	800270e <UART_WaitOnFlagUntilTimeout+0x30>
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d11b      	bne.n	8002746 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800271c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0201 	bic.w	r2, r2, #1
 800272c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2220      	movs	r2, #32
 8002732:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2220      	movs	r2, #32
 8002738:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e042      	b.n	80027cc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d02b      	beq.n	80027ac <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800275e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002762:	d123      	bne.n	80027ac <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800276c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800277c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0201 	bic.w	r2, r2, #1
 800278c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2220      	movs	r2, #32
 8002792:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2220      	movs	r2, #32
 800279e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e00f      	b.n	80027cc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	69da      	ldr	r2, [r3, #28]
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	4013      	ands	r3, r2
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	bf0c      	ite	eq
 80027bc:	2301      	moveq	r3, #1
 80027be:	2300      	movne	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d092      	beq.n	80026f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <__libc_init_array>:
 80027d4:	b570      	push	{r4, r5, r6, lr}
 80027d6:	4e0d      	ldr	r6, [pc, #52]	; (800280c <__libc_init_array+0x38>)
 80027d8:	4c0d      	ldr	r4, [pc, #52]	; (8002810 <__libc_init_array+0x3c>)
 80027da:	1ba4      	subs	r4, r4, r6
 80027dc:	10a4      	asrs	r4, r4, #2
 80027de:	2500      	movs	r5, #0
 80027e0:	42a5      	cmp	r5, r4
 80027e2:	d109      	bne.n	80027f8 <__libc_init_array+0x24>
 80027e4:	4e0b      	ldr	r6, [pc, #44]	; (8002814 <__libc_init_array+0x40>)
 80027e6:	4c0c      	ldr	r4, [pc, #48]	; (8002818 <__libc_init_array+0x44>)
 80027e8:	f000 f820 	bl	800282c <_init>
 80027ec:	1ba4      	subs	r4, r4, r6
 80027ee:	10a4      	asrs	r4, r4, #2
 80027f0:	2500      	movs	r5, #0
 80027f2:	42a5      	cmp	r5, r4
 80027f4:	d105      	bne.n	8002802 <__libc_init_array+0x2e>
 80027f6:	bd70      	pop	{r4, r5, r6, pc}
 80027f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027fc:	4798      	blx	r3
 80027fe:	3501      	adds	r5, #1
 8002800:	e7ee      	b.n	80027e0 <__libc_init_array+0xc>
 8002802:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002806:	4798      	blx	r3
 8002808:	3501      	adds	r5, #1
 800280a:	e7f2      	b.n	80027f2 <__libc_init_array+0x1e>
 800280c:	08002894 	.word	0x08002894
 8002810:	08002894 	.word	0x08002894
 8002814:	08002894 	.word	0x08002894
 8002818:	08002898 	.word	0x08002898

0800281c <memset>:
 800281c:	4402      	add	r2, r0
 800281e:	4603      	mov	r3, r0
 8002820:	4293      	cmp	r3, r2
 8002822:	d100      	bne.n	8002826 <memset+0xa>
 8002824:	4770      	bx	lr
 8002826:	f803 1b01 	strb.w	r1, [r3], #1
 800282a:	e7f9      	b.n	8002820 <memset+0x4>

0800282c <_init>:
 800282c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282e:	bf00      	nop
 8002830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002832:	bc08      	pop	{r3}
 8002834:	469e      	mov	lr, r3
 8002836:	4770      	bx	lr

08002838 <_fini>:
 8002838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800283a:	bf00      	nop
 800283c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800283e:	bc08      	pop	{r3}
 8002840:	469e      	mov	lr, r3
 8002842:	4770      	bx	lr
